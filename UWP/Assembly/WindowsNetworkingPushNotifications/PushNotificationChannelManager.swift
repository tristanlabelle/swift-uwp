// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates objects that you use to retrieve push notification channels from the Windows Push Notification Services (WNS). These channels are bound to an app or secondary tile.
public enum WindowsNetworkingPushNotifications_PushNotificationChannelManager {
    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics3 members

    /// Gets the manager for the active user.
    /// - Returns: A PushNotificationChannelManagerForUser object.
    public static func getDefault() throws -> WindowsNetworkingPushNotifications_PushNotificationChannelManagerForUser {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerStatics3.getDefault())
    }

    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics members

    /// Creates an object, bound to the calling app, through which you retrieve a push notification channel from Windows Push Notification Services (WNS).
    /// - Returns: The object, bound to the calling app, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public static func createPushNotificationChannelForApplicationAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerStatics.createPushNotificationChannelForApplicationAsync())
    }

    /// Creates an object, bound to a specified app, through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The specified app must be in the same package as the calling app. This overload should only be called from a multi-app package, most apps should use the method with no parameter.
    /// - Parameter applicationId: The package-relative application identifier (PRAID) of the app to bind to the push notification channel. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    /// - Returns: The object, bound to the app specified in *applicationId*, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public static func createPushNotificationChannelForApplicationAsync(_ applicationId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerStatics.createPushNotificationChannelForApplicationAsyncWithId(applicationId))
    }

    /// Creates an object, bound to a secondary tile, through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The tile can be a secondary tile of the calling app or any other app in the same package.
    /// - Parameter tileId: The ID of the secondary tile to bind to the push notification channel.
    /// - Returns: The object, bound to the secondary tile, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public static func createPushNotificationChannelForSecondaryTileAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerStatics.createPushNotificationChannelForSecondaryTileAsync(tileId))
    }

    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics4 members

    /// Raised when your push channel is revoked, so that you can immediately request a new channel. This minimizes any downtime resulting from using a revoked WNS channel. The event arguments type is PushNotificationChannelsRevokedEventArgs.
    public static func channelsRevoked(adding handler: WindowsFoundation_EventHandler<WindowsNetworkingPushNotifications_PushNotificationChannelsRevokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipushNotificationChannelManagerStatics4.add_ChannelsRevoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: channelsRevoked)
    }

    public static func channelsRevoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipushNotificationChannelManagerStatics4.remove_ChannelsRevoked(token)
    }

    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics2 members

    /// Gets the push notifications for the specified user.
    /// - Parameter user: The user account for the push notifications.
    /// - Returns: A PushNotificationChannelManagerForUser object.
    public static func getForUser(_ user: WindowsSystem_User?) throws -> WindowsNetworkingPushNotifications_PushNotificationChannelManagerForUser {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerStatics2.getForUser(user))
    }

    // MARK: Implementation details

    private static var _ipushNotificationChannelManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics3>? = nil

    internal static var _ipushNotificationChannelManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics3> {
        get throws {
            try _ipushNotificationChannelManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.PushNotifications.PushNotificationChannelManager", id: CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics3.iid)
            }
        }
    }

    private static var _ipushNotificationChannelManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics>? = nil

    internal static var _ipushNotificationChannelManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics> {
        get throws {
            try _ipushNotificationChannelManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.PushNotifications.PushNotificationChannelManager", id: CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics.iid)
            }
        }
    }

    private static var _ipushNotificationChannelManagerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics4>? = nil

    internal static var _ipushNotificationChannelManagerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics4> {
        get throws {
            try _ipushNotificationChannelManagerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.PushNotifications.PushNotificationChannelManager", id: CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics4.iid)
            }
        }
    }

    private static var _ipushNotificationChannelManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics2>? = nil

    internal static var _ipushNotificationChannelManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics2> {
        get throws {
            try _ipushNotificationChannelManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.PushNotifications.PushNotificationChannelManager", id: CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerStatics2.iid)
            }
        }
    }
}