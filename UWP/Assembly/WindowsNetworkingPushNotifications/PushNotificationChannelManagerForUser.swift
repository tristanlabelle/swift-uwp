// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates objects that you use to retrieve push notification channels from the Windows Push Notification Services (WNS). These channels are bound to the current user through an app or secondary tile.
public final class WindowsNetworkingPushNotifications_PushNotificationChannelManagerForUser: WindowsRuntime.WinRTImport<WindowsNetworkingPushNotifications_PushNotificationChannelManagerForUserProjection> {
    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser members

    /// Gets the user.
    /// - Returns: The user.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_interop.get_User())
        }
    }

    /// Creates an object, bound to the calling app, through which you retrieve a push notification channel from Windows Push Notification Services (WNS).
    /// - Returns: The object, bound to the calling app, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public func createPushNotificationChannelForApplicationAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_interop.createPushNotificationChannelForApplicationAsync())
    }

    /// Creates an object, bound to a specified app, through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The specified app must be in the same package as the calling app.
    /// - Parameter applicationId: The package-relative application identifier (PRAID) of the app to bind to the push notification channel. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    /// - Returns: The object, bound to the app specified in *applicationId*, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public func createPushNotificationChannelForApplicationAsync(_ applicationId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_interop.createPushNotificationChannelForApplicationAsyncWithId(applicationId))
    }

    /// Creates an object, bound to a secondary tile, through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The tile can be a secondary tile of the calling app or any other app in the same package.
    /// - Parameter tileId: The ID of the secondary tile to bind to the push notification channel.
    /// - Returns: The object, bound to the secondary tile, that is used to request a PushNotificationChannel from the Windows Push Notification Services (WNS).
    public func createPushNotificationChannelForSecondaryTileAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_interop.createPushNotificationChannelForSecondaryTileAsync(tileId))
    }

    // MARK: Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2 members

    /// Creates an object bound to a specified app through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The specified app must be in the same package as the calling app.
    /// - Parameter appServerKey: An uncompressed key in ANSI X9.62 format. This value is from the P-256 curve defined in the Secure Hash Standard specification.
    /// - Parameter channelId: The ID of the push notification channel.
    /// - Returns: The object, bound to the app server specified in appServerKey, that is used to request a PushNotificationChannel from WNS.
    public func createRawPushNotificationChannelWithAlternateKeyForApplicationAsync(_ appServerKey: WindowsStorageStreams_IBuffer?, _ channelId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerForUser2.createRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey, channelId))
    }

    /// Creates an object bound to a specified app through which you retrieve a push notification channel from Windows Push Notification Services (WNS). The specified app must be in the same package as the calling app.
    /// - Parameter appServerKey: An uncompressed key in ANSI X9.62 format. This value is from the P-256 curve defined in the Secure Hash Standard specification.
    /// - Parameter channelId: The ID of the push notification channel.
    /// - Parameter appId: The package-relative application identifier (PRAID) of the app to bind to the push notification channel. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    /// - Returns: The object, bound to the app server specified in appServerKey, that is used to request a PushNotificationChannel from WNS.
    public func createRawPushNotificationChannelWithAlternateKeyForApplicationAsync(_ appServerKey: WindowsStorageStreams_IBuffer?, _ channelId: Swift.String, _ appId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingPushNotifications_PushNotificationChannel?> {
        try COM.NullResult.unwrap(_ipushNotificationChannelManagerForUser2.createRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey, channelId, appId))
    }

    // MARK: Implementation details

    private var _ipushNotificationChannelManagerForUser2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerForUser2>? = nil

    internal var _ipushNotificationChannelManagerForUser2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerForUser2> {
        get throws {
            try _ipushNotificationChannelManagerForUser2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerForUser2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingPushNotifications_IPushNotificationChannelManagerForUser2.self)
            }
        }
    }

    deinit {
        _ipushNotificationChannelManagerForUser2_storage?.release()
    }
}