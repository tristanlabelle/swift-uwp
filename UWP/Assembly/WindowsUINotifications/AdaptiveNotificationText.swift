// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the text content of an adaptive notification.
public final class WindowsUINotifications_AdaptiveNotificationText: WindowsRuntime.WinRTImport<WindowsUINotifications_AdaptiveNotificationTextProjection>, WindowsUINotifications_IAdaptiveNotificationContentProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUINotifications_AdaptiveNotificationTextProjection.self))
    }

    // MARK: Windows.UI.Notifications.IAdaptiveNotificationText members

    /// Gets or sets the language of the text content.
    /// - Returns: The language of the text content. See the National Language Support (NLS) API Reference for a list of valid values.
    public var language: Swift.String {
        get throws {
            try _interop.get_Language()
        }
    }

    /// Gets or sets the language of the text content.
    /// - Returns: The language of the text content. See the National Language Support (NLS) API Reference for a list of valid values.
    public func language(_ value: Swift.String) throws {
        try _interop.put_Language(value)
    }

    /// Gets or sets the text content to display.
    /// - Returns: The text content to display.
    public var text: Swift.String {
        get throws {
            try _interop.get_Text()
        }
    }

    /// Gets or sets the text content to display.
    /// - Returns: The text content to display.
    public func text(_ value: Swift.String) throws {
        try _interop.put_Text(value)
    }

    // MARK: Windows.UI.Notifications.IAdaptiveNotificationContent members

    /// Specifies hints for formatting the notification, such as the text style, text wrapping, and alignment. For a complete list of hints, see the text element entry of the Adaptive notifications schema.
    /// - Returns: A collection of name-value pairs that provide hints for formatting the notification, such as the text style, text wrapping, and alignment. For a complete list of hints, see the text element entry of the Adaptive notifications schema.
    public var hints: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_iadaptiveNotificationContent.get_Hints())
        }
    }

    /// Specifies the type of content the notification contains. This property always returns AdaptiveNotificationContentKind.Text.
    /// - Returns: A value that specifies the type of content the notification contains. This property always returns AdaptiveNotificationContentKind.Text.
    public var kind: WindowsUINotifications_AdaptiveNotificationContentKind {
        get throws {
            try _iadaptiveNotificationContent.get_Kind()
        }
    }

    // MARK: Implementation details

    private var _iadaptiveNotificationContent_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IAdaptiveNotificationContent>? = nil

    internal var _iadaptiveNotificationContent: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IAdaptiveNotificationContent> {
        get throws {
            try _iadaptiveNotificationContent_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IAdaptiveNotificationContent.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IAdaptiveNotificationContent.self)
            }
        }
    }

    deinit {
        _iadaptiveNotificationContent_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Notifications.AdaptiveNotificationText", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}