// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Raises a toast notification to the specific app to which the ToastNotifier is bound. This class also lets you schedule and remove toast notifications.
public final class WindowsUINotifications_ToastNotifier: WindowsRuntime.WinRTImport<WindowsUINotifications_ToastNotifierProjection> {
    // MARK: Windows.UI.Notifications.IToastNotifier members

    /// Gets a value that tells you whether there is an app, user, or system block that prevents the display of a toast notification.
    /// - Returns: **Enabled** if the toast can be shown; otherwise, one or more reasons that the toast will be blocked.
    public var setting: WindowsUINotifications_NotificationSetting {
        get throws {
            try _interop.get_Setting()
        }
    }

    /// Displays the specified toast notification.
    /// - Parameter notification: The object that contains the content of the toast notification to display.
    public func show(_ notification: WindowsUINotifications_ToastNotification?) throws {
        try _interop.show(notification)
    }

    /// Removes the specified toast notification from the screen.
    /// - Parameter notification: The object that specifies the toast to hide.
    public func hide(_ notification: WindowsUINotifications_ToastNotification?) throws {
        try _interop.hide(notification)
    }

    /// Adds a ScheduledToastNotification for later display by Windows.
    /// - Parameter scheduledToast: The scheduled toast notification, which includes its content and timing instructions.
    public func addToSchedule(_ scheduledToast: WindowsUINotifications_ScheduledToastNotification?) throws {
        try _interop.addToSchedule(scheduledToast)
    }

    /// Cancels the scheduled display of a specified ScheduledToastNotification.
    /// - Parameter scheduledToast: The notification to remove from the schedule.
    public func removeFromSchedule(_ scheduledToast: WindowsUINotifications_ScheduledToastNotification?) throws {
        try _interop.removeFromSchedule(scheduledToast)
    }

    /// Gets the collection of ScheduledToastNotification objects that this app has scheduled for display.
    /// - Returns: The collection of scheduled toast notifications that the app bound to this notifier has scheduled for timed display.
    public func getScheduledToastNotifications() throws -> WindowsFoundationCollections_IVectorView<WindowsUINotifications_ScheduledToastNotification?> {
        try COM.NullResult.unwrap(_interop.getScheduledToastNotifications())
    }

    // MARK: Windows.UI.Notifications.IToastNotifier2 members

    /// Updates the existing toast notification that has the specified tag and belongs to the specified notification group.
    /// - Parameter data: An object that contains the updated info.
    /// - Parameter tag: The identifier of the toast notification to update.
    /// - Parameter group: The ID of the ToastCollection that contains the notification.
    /// - Returns: A value that indicates the result of the update (failure, success, etc).
    public func update(_ data: WindowsUINotifications_NotificationData?, _ tag: Swift.String, _ group: Swift.String) throws -> WindowsUINotifications_NotificationUpdateResult {
        try _itoastNotifier2.updateWithTagAndGroup(data, tag, group)
    }

    /// Updates the existing toast notification that has the specified tag.
    /// - Parameter data: An object that contains the updated info.
    /// - Parameter tag: The identifier of the toast notification to update.
    /// - Returns: A value that indicates the result of the update (failure, success, etc).
    public func update(_ data: WindowsUINotifications_NotificationData?, _ tag: Swift.String) throws -> WindowsUINotifications_NotificationUpdateResult {
        try _itoastNotifier2.updateWithTag(data, tag)
    }

    // MARK: Windows.UI.Notifications.IToastNotifier3 members

    /// Occurs when the system shows the scheduled toast notification.
    public func scheduledToastNotificationShowing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUINotifications_ToastNotifier?, WindowsUINotifications_ScheduledToastNotificationShowingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itoastNotifier3.add_ScheduledToastNotificationShowing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: scheduledToastNotificationShowing)
    }

    public func scheduledToastNotificationShowing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itoastNotifier3.remove_ScheduledToastNotificationShowing(token)
    }

    // MARK: Implementation details

    private var _itoastNotifier2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotifier2>? = nil

    internal var _itoastNotifier2: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotifier2> {
        get throws {
            try _itoastNotifier2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotifier2.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotifier2.self)
            }
        }
    }

    private var _itoastNotifier3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotifier3>? = nil

    internal var _itoastNotifier3: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotifier3> {
        get throws {
            try _itoastNotifier3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotifier3.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotifier3.self)
            }
        }
    }

    deinit {
        _itoastNotifier2_storage?.release()
        _itoastNotifier3_storage?.release()
    }
}