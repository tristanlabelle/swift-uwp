// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines the content, associated metadata and events, and expiration time of a toast notification.
public final class WindowsUINotifications_ToastNotification: WindowsRuntime.WinRTImport<WindowsUINotifications_ToastNotificationProjection> {
    // MARK: Windows.UI.Notifications.IToastNotificationFactory members

    public convenience init(_ content: WindowsDataXmlDom_XmlDocument?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._itoastNotificationFactory.createToastNotification(content)))
    }

    // MARK: Windows.UI.Notifications.IToastNotification members

    /// Gets the XML that defines the current toast notification.
    /// - Returns: The object that contains the XML.
    public var content: WindowsDataXmlDom_XmlDocument {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets or sets the time after which a toast notification should not be displayed.
    /// - Returns: The date and time after which the toast is no longer considered current or valid and should not be displayed.
    public var expirationTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_ExpirationTime()
        }
    }

    /// Gets or sets the time after which a toast notification should not be displayed.
    /// - Returns: The date and time after which the toast is no longer considered current or valid and should not be displayed.
    public func expirationTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_ExpirationTime(value)
    }

    /// Occurs when user activates a toast notification through a click or touch. Apps that are running subscribe to this event.
    public func activated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUINotifications_ToastNotification?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Activated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activated)
    }

    public func activated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Activated(token)
    }

    /// Occurs when a toast notification leaves the screen, either by expiring or being explicitly dismissed by the user. Apps that are running subscribe to this event.
    public func dismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUINotifications_ToastNotification?, WindowsUINotifications_ToastDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Dismissed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dismissed)
    }

    public func dismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Dismissed(token)
    }

    /// Occurs when an error is caused when Windows attempts to raise a toast notification. Apps that are running subscribe to this event.
    public func failed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUINotifications_ToastNotification?, WindowsUINotifications_ToastFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Failed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: failed)
    }

    public func failed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Failed(token)
    }

    // MARK: Windows.UI.Notifications.IToastNotification2 members

    /// Gets or sets the group identifier for the notification.
    /// - Returns: The group identifier for the notification.
    public var group: Swift.String {
        get throws {
            try _itoastNotification2.get_Group()
        }
    }

    /// Gets or sets the group identifier for the notification.
    /// - Returns: The group identifier for the notification.
    public func group(_ value: Swift.String) throws {
        try _itoastNotification2.put_Group(value)
    }

    /// Gets or sets whether a toast's pop-up UI is displayed on the user's screen.
    /// - Returns: Set to **true** to suppress the popup message; otherwise, false. The default value is false, meaning the toast's pop-up message will be shown. Setting this property to **true** places the toast notification silently into the action center. This enables your app to communicate with the user without interrupting them.
    public var suppressPopup: Swift.Bool {
        get throws {
            try _itoastNotification2.get_SuppressPopup()
        }
    }

    /// Gets or sets whether a toast's pop-up UI is displayed on the user's screen.
    /// - Returns: Set to **true** to suppress the popup message; otherwise, false. The default value is false, meaning the toast's pop-up message will be shown. Setting this property to **true** places the toast notification silently into the action center. This enables your app to communicate with the user without interrupting them.
    public func suppressPopup(_ value: Swift.Bool) throws {
        try _itoastNotification2.put_SuppressPopup(value)
    }

    /// Gets or sets the unique identifier of this notification within the notification Group.
    /// - Returns: Gets or sets the unique identifier of this notification within the notification Group.
    public var tag: Swift.String {
        get throws {
            try _itoastNotification2.get_Tag()
        }
    }

    /// Gets or sets the unique identifier of this notification within the notification Group.
    /// - Returns: Gets or sets the unique identifier of this notification within the notification Group.
    public func tag(_ value: Swift.String) throws {
        try _itoastNotification2.put_Tag(value)
    }

    // MARK: Windows.UI.Notifications.IToastNotification3 members

    /// Gets or sets a value that specifies whether notification mirroring is allowed.
    /// - Returns: A value that specifies whether notification mirroring is allowed.
    public var notificationMirroring: WindowsUINotifications_NotificationMirroring {
        get throws {
            try _itoastNotification3.get_NotificationMirroring()
        }
    }

    /// Gets or sets a value that specifies whether notification mirroring is allowed.
    /// - Returns: A value that specifies whether notification mirroring is allowed.
    public func notificationMirroring(_ value: WindowsUINotifications_NotificationMirroring) throws {
        try _itoastNotification3.put_NotificationMirroring(value)
    }

    /// Gets or sets a remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    /// - Returns: A remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    public var remoteId: Swift.String {
        get throws {
            try _itoastNotification3.get_RemoteId()
        }
    }

    /// Gets or sets a remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    /// - Returns: A remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    public func remoteId(_ value: Swift.String) throws {
        try _itoastNotification3.put_RemoteId(value)
    }

    // MARK: Windows.UI.Notifications.IToastNotification4 members

    /// Gets or sets additional information about the status of the toast notification.
    /// - Returns: An object that provides additional information about the status of the toast notification, such as the progress of the action described by the notification.
    public var data: WindowsUINotifications_NotificationData {
        get throws {
            try COM.NullResult.unwrap(_itoastNotification4.get_Data())
        }
    }

    /// Gets or sets additional information about the status of the toast notification.
    /// - Returns: An object that provides additional information about the status of the toast notification, such as the progress of the action described by the notification.
    public func data(_ value: WindowsUINotifications_NotificationData?) throws {
        try _itoastNotification4.put_Data(value)
    }

    /// Gets or sets the priority of the toast notification.
    /// - Returns: The priority of the toast notification.
    public var priority: WindowsUINotifications_ToastNotificationPriority {
        get throws {
            try _itoastNotification4.get_Priority()
        }
    }

    /// Gets or sets the priority of the toast notification.
    /// - Returns: The priority of the toast notification.
    public func priority(_ value: WindowsUINotifications_ToastNotificationPriority) throws {
        try _itoastNotification4.put_Priority(value)
    }

    // MARK: Windows.UI.Notifications.IToastNotification6 members

    public var expiresOnReboot: Swift.Bool {
        get throws {
            try _itoastNotification6.get_ExpiresOnReboot()
        }
    }

    public func expiresOnReboot(_ value: Swift.Bool) throws {
        try _itoastNotification6.put_ExpiresOnReboot(value)
    }

    // MARK: Implementation details

    private var _itoastNotification2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification2>? = nil

    internal var _itoastNotification2: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification2> {
        get throws {
            try _itoastNotification2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotification2.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotification2.self)
            }
        }
    }

    private var _itoastNotification3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification3>? = nil

    internal var _itoastNotification3: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification3> {
        get throws {
            try _itoastNotification3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotification3.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotification3.self)
            }
        }
    }

    private var _itoastNotification4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification4>? = nil

    internal var _itoastNotification4: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification4> {
        get throws {
            try _itoastNotification4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotification4.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotification4.self)
            }
        }
    }

    private var _itoastNotification6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification6>? = nil

    internal var _itoastNotification6: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotification6> {
        get throws {
            try _itoastNotification6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotification6.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotification6.self)
            }
        }
    }

    deinit {
        _itoastNotification2_storage?.release()
        _itoastNotification3_storage?.release()
        _itoastNotification4_storage?.release()
        _itoastNotification6_storage?.release()
    }

    private static var _itoastNotificationFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationFactory>? = nil

    internal static var _itoastNotificationFactory: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationFactory> {
        get throws {
            try _itoastNotificationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Notifications.ToastNotification", id: CWinRT.SWRT_WindowsUINotifications_IToastNotificationFactory.iid)
            }
        }
    }
}