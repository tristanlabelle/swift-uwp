// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates ToastNotifier objects that you use to raise toast notifications for the bound user. This class also provides access to the XML content of the system-provided toast templates so that you can customize that content for use in your notifications.
public final class WindowsUINotifications_ToastNotificationManagerForUser: WindowsRuntime.WinRTImport<WindowsUINotifications_ToastNotificationManagerForUserProjection> {
    // MARK: Windows.UI.Notifications.IToastNotificationManagerForUser members

    /// Gets the ToastNotificationHistory object.
    /// - Returns: The ToastNotificationHistory object.
    public var history: WindowsUINotifications_ToastNotificationHistory {
        get throws {
            try COM.NullResult.unwrap(_interop.get_History())
        }
    }

    /// Gets the user that receives the toast notifications created by this object.
    /// - Returns: The user that receives the toast notifications created by this object.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_interop.get_User())
        }
    }

    /// Creates a new ToastNotifier for the calling application and the bound user that lets you raise a toast notification.
    /// - Returns: The object you will use to send the toast notification to the app for the bound user.
    public func createToastNotifier() throws -> WindowsUINotifications_ToastNotifier {
        try COM.NullResult.unwrap(_interop.createToastNotifier())
    }

    /// Creates a new ToastNotification for the bound user and the specified app, usually another app in the same package.
    /// - Parameter applicationId: The unique ID of the app.
    /// - Returns: The object you will use to send the toast notification to the tile.
    public func createToastNotifier(_ applicationId: Swift.String) throws -> WindowsUINotifications_ToastNotifier {
        try COM.NullResult.unwrap(_interop.createToastNotifierWithId(applicationId))
    }

    // MARK: Windows.UI.Notifications.IToastNotificationManagerForUser2 members

    /// Creates a new ToastNotification for the bound user and app for the specified notification group.
    /// - Parameter collectionId: The ID of the ToastNotificationCollection that represents the notification group you want to send.
    /// - Returns: The object you will use to send the toast notifications.
    public func getToastNotifierForToastCollectionIdAsync(_ collectionId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsUINotifications_ToastNotifier?> {
        try COM.NullResult.unwrap(_itoastNotificationManagerForUser2.getToastNotifierForToastCollectionIdAsync(collectionId))
    }

    /// Starts the retrieval of notification history for the specified notification group.
    /// - Parameter collectionId: The ID of the notification group whose history you want to retrieve.
    /// - Returns: An object that represents the asynchronous operation.
    public func getHistoryForToastCollectionIdAsync(_ collectionId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsUINotifications_ToastNotificationHistory?> {
        try COM.NullResult.unwrap(_itoastNotificationManagerForUser2.getHistoryForToastCollectionIdAsync(collectionId))
    }

    /// Creates a ToastCollectionManager that you can use to save, update, and clear notification groups for the current app.
    /// - Returns: An object you can use to save, update, and clear notification groups.
    public func getToastCollectionManager() throws -> WindowsUINotifications_ToastCollectionManager {
        try COM.NullResult.unwrap(_itoastNotificationManagerForUser2.getToastCollectionManager())
    }

    /// Creates a ToastCollectionManager that you can use to save, update, and clear notification groups for the specified app.
    /// - Parameter appId: The ID of the app whose notification groups you want to manipulate.
    /// - Returns: An object you can use to save, update, and clear notification groups.
    public func getToastCollectionManager(_ appId: Swift.String) throws -> WindowsUINotifications_ToastCollectionManager {
        try COM.NullResult.unwrap(_itoastNotificationManagerForUser2.getToastCollectionManagerWithAppId(appId))
    }

    // MARK: Windows.UI.Notifications.IToastNotificationManagerForUser3 members

    public var notificationMode: WindowsUINotifications_ToastNotificationMode {
        get throws {
            try _itoastNotificationManagerForUser3.get_NotificationMode()
        }
    }

    public func notificationModeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUINotifications_ToastNotificationManagerForUser?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itoastNotificationManagerForUser3.add_NotificationModeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: notificationModeChanged)
    }

    public func notificationModeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itoastNotificationManagerForUser3.remove_NotificationModeChanged(token)
    }

    // MARK: Implementation details

    private var _itoastNotificationManagerForUser2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser2>? = nil

    internal var _itoastNotificationManagerForUser2: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser2> {
        get throws {
            try _itoastNotificationManagerForUser2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser2.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser2.self)
            }
        }
    }

    private var _itoastNotificationManagerForUser3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser3>? = nil

    internal var _itoastNotificationManagerForUser3: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser3> {
        get throws {
            try _itoastNotificationManagerForUser3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser3.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IToastNotificationManagerForUser3.self)
            }
        }
    }

    deinit {
        _itoastNotificationManagerForUser2_storage?.release()
        _itoastNotificationManagerForUser3_storage?.release()
    }
}