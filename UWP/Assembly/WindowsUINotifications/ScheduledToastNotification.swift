// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the XML that defines the toast notification that will display at the scheduled time.
public final class WindowsUINotifications_ScheduledToastNotification: WindowsRuntime.WinRTImport<WindowsUINotifications_ScheduledToastNotificationProjection> {
    // MARK: Windows.UI.Notifications.IScheduledToastNotificationFactory members

    public convenience init(_ content: WindowsDataXmlDom_XmlDocument?, _ deliveryTime: WindowsFoundation_DateTime) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ischeduledToastNotificationFactory.createScheduledToastNotification(content, deliveryTime)))
    }

    public convenience init(_ content: WindowsDataXmlDom_XmlDocument?, _ deliveryTime: WindowsFoundation_DateTime, _ snoozeInterval: WindowsFoundation_TimeSpan, _ maximumSnoozeCount: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ischeduledToastNotificationFactory.createScheduledToastNotificationRecurring(content, deliveryTime, snoozeInterval, maximumSnoozeCount)))
    }

    // MARK: Windows.UI.Notifications.IScheduledToastNotification members

    /// Gets the XML that defines this scheduled toast notification.
    /// - Returns: The object that contains the XML.
    public var content: WindowsDataXmlDom_XmlDocument {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets the time that this toast notification is scheduled to be displayed.
    /// - Returns: The time that this toast notification is scheduled to be displayed.
    public var deliveryTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_DeliveryTime()
        }
    }

    /// Gets a developer-specified value used to identify a specific scheduled toast.
    /// - Returns: The identifier. This string is limited to 16 characters.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a developer-specified value used to identify a specific scheduled toast.
    /// - Returns: The identifier. This string is limited to 16 characters.
    public func id(_ value: Swift.String) throws {
        try _interop.put_Id(value)
    }

    /// Gets the maximum number of times to display this notification.
    /// - Returns: The maximum number of times to display this notification. This will be a value between 1 and 5, inclusive.
    public var maximumSnoozeCount: Swift.UInt32 {
        get throws {
            try _interop.get_MaximumSnoozeCount()
        }
    }

    /// Gets the amount of time between occurrences of the notification.
    /// - Returns: The time between occurrences of the notification. This value will be between 60 seconds and 60 minutes, inclusive.
    public var snoozeInterval: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_SnoozeInterval()
        }
    }

    // MARK: Windows.UI.Notifications.IScheduledToastNotification2 members

    /// Gets or sets the group identifier for the notification.
    /// - Returns: The group identifier for the notification.
    public var group: Swift.String {
        get throws {
            try _ischeduledToastNotification2.get_Group()
        }
    }

    /// Gets or sets the group identifier for the notification.
    /// - Returns: The group identifier for the notification.
    public func group(_ value: Swift.String) throws {
        try _ischeduledToastNotification2.put_Group(value)
    }

    /// Gets or sets whether a toast's pop-up UI is displayed on the user's screen.
    /// - Returns: Set to **true** to suppress the popup message; otherwise, false. The default value is false, meaning the toast's pop-up message will be shown. Setting this property to **true** places the toast notification silently into the action center. This enables your app to communicate with the user without interrupting them.
    public var suppressPopup: Swift.Bool {
        get throws {
            try _ischeduledToastNotification2.get_SuppressPopup()
        }
    }

    /// Gets or sets whether a toast's pop-up UI is displayed on the user's screen.
    /// - Returns: Set to **true** to suppress the popup message; otherwise, false. The default value is false, meaning the toast's pop-up message will be shown. Setting this property to **true** places the toast notification silently into the action center. This enables your app to communicate with the user without interrupting them.
    public func suppressPopup(_ value: Swift.Bool) throws {
        try _ischeduledToastNotification2.put_SuppressPopup(value)
    }

    /// Gets or sets a string that uniquely identifies a toast notification inside a Group.
    /// - Returns: The unique identifier for this notification within a Group.
    public var tag: Swift.String {
        get throws {
            try _ischeduledToastNotification2.get_Tag()
        }
    }

    /// Gets or sets a string that uniquely identifies a toast notification inside a Group.
    /// - Returns: The unique identifier for this notification within a Group.
    public func tag(_ value: Swift.String) throws {
        try _ischeduledToastNotification2.put_Tag(value)
    }

    // MARK: Windows.UI.Notifications.IScheduledToastNotification3 members

    /// Gets or sets a value that specifies whether notification mirroring is enabled. (Notification mirroring enables a notification to appear on multiple devices.)
    /// - Returns: **true** to enable notification mirroring; otherwise, **false**.
    public var notificationMirroring: WindowsUINotifications_NotificationMirroring {
        get throws {
            try _ischeduledToastNotification3.get_NotificationMirroring()
        }
    }

    /// Gets or sets a value that specifies whether notification mirroring is enabled. (Notification mirroring enables a notification to appear on multiple devices.)
    /// - Returns: **true** to enable notification mirroring; otherwise, **false**.
    public func notificationMirroring(_ value: WindowsUINotifications_NotificationMirroring) throws {
        try _ischeduledToastNotification3.put_NotificationMirroring(value)
    }

    /// Gets or sets a remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    /// - Returns: A remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    public var remoteId: Swift.String {
        get throws {
            try _ischeduledToastNotification3.get_RemoteId()
        }
    }

    /// Gets or sets a remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    /// - Returns: A remote id for the notification that enables the system to correlate this notification with another one generated on another device.
    public func remoteId(_ value: Swift.String) throws {
        try _ischeduledToastNotification3.put_RemoteId(value)
    }

    // MARK: Windows.UI.Notifications.IScheduledToastNotification4 members

    /// Gets or sets the expiration time of the notification.
    /// - Returns: The expiration time of the notification.
    public var expirationTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _ischeduledToastNotification4.get_ExpirationTime()
        }
    }

    /// Gets or sets the expiration time of the notification.
    /// - Returns: The expiration time of the notification.
    public func expirationTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _ischeduledToastNotification4.put_ExpirationTime(value)
    }

    // MARK: Implementation details

    private var _ischeduledToastNotification2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification2>? = nil

    internal var _ischeduledToastNotification2: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification2> {
        get throws {
            try _ischeduledToastNotification2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification2.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification2.self)
            }
        }
    }

    private var _ischeduledToastNotification3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification3>? = nil

    internal var _ischeduledToastNotification3: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification3> {
        get throws {
            try _ischeduledToastNotification3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification3.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification3.self)
            }
        }
    }

    private var _ischeduledToastNotification4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification4>? = nil

    internal var _ischeduledToastNotification4: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification4> {
        get throws {
            try _ischeduledToastNotification4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification4.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotification4.self)
            }
        }
    }

    deinit {
        _ischeduledToastNotification2_storage?.release()
        _ischeduledToastNotification3_storage?.release()
        _ischeduledToastNotification4_storage?.release()
    }

    private static var _ischeduledToastNotificationFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotificationFactory>? = nil

    internal static var _ischeduledToastNotificationFactory: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotificationFactory> {
        get throws {
            try _ischeduledToastNotificationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Notifications.ScheduledToastNotification", id: CWinRT.SWRT_WindowsUINotifications_IScheduledToastNotificationFactory.iid)
            }
        }
    }
}