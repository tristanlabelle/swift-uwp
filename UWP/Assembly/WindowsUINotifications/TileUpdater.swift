// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Changes the content of the specific tile that the updater is bound to.
public final class WindowsUINotifications_TileUpdater: WindowsRuntime.WinRTImport<WindowsUINotifications_TileUpdaterProjection> {
    // MARK: Windows.UI.Notifications.ITileUpdater members

    /// Gets a value that specifies whether a tile can be updated through notifications.
    /// - Returns: A value that indicates either that the tile can be updated through notifications, or who disabled them: developer, user, or administrator.
    public var setting: WindowsUINotifications_NotificationSetting {
        get throws {
            try _interop.get_Setting()
        }
    }

    /// Applies a change in content or appearance to the tile.
    /// - Parameter notification: The object that supplies the new XML definition for the tile's content.
    public func update(_ notification: WindowsUINotifications_TileNotification?) throws {
        try _interop.update(notification)
    }

    /// Removes all updates and causes the tile to display its default content as declared in the app's manifest.
    public func clear() throws {
        try _interop.clear()
    }

    /// Enables the tile to queue up to five notifications. This enables the notification queue on all tile sizes.
    /// - Parameter enable: **True** to enable queuing; otherwise **false**.
    public func enableNotificationQueue(_ enable: Swift.Bool) throws {
        try _interop.enableNotificationQueue(enable)
    }

    /// Adds a ScheduledTileNotification to the schedule.
    /// - Parameter scheduledTile: The scheduled tile update object.
    public func addToSchedule(_ scheduledTile: WindowsUINotifications_ScheduledTileNotification?) throws {
        try _interop.addToSchedule(scheduledTile)
    }

    /// Removes an upcoming tile update from the schedule.
    /// - Parameter scheduledTile: The notification to remove from the schedule.
    public func removeFromSchedule(_ scheduledTile: WindowsUINotifications_ScheduledTileNotification?) throws {
        try _interop.removeFromSchedule(scheduledTile)
    }

    /// Retrieves a list of scheduled updates to the tile.
    /// - Returns: The collection of scheduled updates for this tile.
    public func getScheduledTileNotifications() throws -> WindowsFoundationCollections_IVectorView<WindowsUINotifications_ScheduledTileNotification?> {
        try COM.NullResult.unwrap(_interop.getScheduledTileNotifications())
    }

    /// Begins a series of timed content changes for the tile that the updater is bound to, beginning immediately.
    /// - Parameter tileContent: The Uniform Resource Identifier (URI) from which the XML content of the tile update will be retrieved.
    /// - Parameter requestedInterval: The frequency with which the Uniform Resource Identifier (URI) is polled for new tile content, following the initial update at *startTime*.
    public func startPeriodicUpdate(_ tileContent: WindowsFoundation_Uri?, _ requestedInterval: WindowsUINotifications_PeriodicUpdateRecurrence) throws {
        try _interop.startPeriodicUpdate(tileContent, requestedInterval)
    }

    /// Begins a series of timed updates for the tile that the updater is bound to. Update content is retrieved from a specified Uniform Resource Identifier (URI). Updates begin at a specified time.
    /// - Parameter tileContent: The Uniform Resource Identifier (URI) from which the XML content of the tile update will be retrieved.
    /// - Parameter startTime: The time at which the Uniform Resource Identifier (URI) should first be polled for new tile content.
    /// - Parameter requestedInterval: The frequency with which the Uniform Resource Identifier (URI) is polled for new tile content, following the initial update at *startTime*.
    public func startPeriodicUpdate(_ tileContent: WindowsFoundation_Uri?, _ startTime: WindowsFoundation_DateTime, _ requestedInterval: WindowsUINotifications_PeriodicUpdateRecurrence) throws {
        try _interop.startPeriodicUpdateAtTime(tileContent, startTime, requestedInterval)
    }

    /// Cancels the current series of timed updates for the tile that the updater is bound to.
    public func stopPeriodicUpdate() throws {
        try _interop.stopPeriodicUpdate()
    }

    public func startPeriodicUpdateBatch(_ tileContents: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ requestedInterval: WindowsUINotifications_PeriodicUpdateRecurrence) throws {
        try _interop.startPeriodicUpdateBatch(tileContents, requestedInterval)
    }

    public func startPeriodicUpdateBatch(_ tileContents: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ startTime: WindowsFoundation_DateTime, _ requestedInterval: WindowsUINotifications_PeriodicUpdateRecurrence) throws {
        try _interop.startPeriodicUpdateBatchAtTime(tileContents, startTime, requestedInterval)
    }

    // MARK: Windows.UI.Notifications.ITileUpdater2 members

    /// Enables the tile to queue up to five notifications on the medium tile.
    /// - Parameter enable: **True** to enable queuing on this tile size; otherwise **false**.
    public func enableNotificationQueueForSquare150x150(_ enable: Swift.Bool) throws {
        try _itileUpdater2.enableNotificationQueueForSquare150x150(enable)
    }

    /// Enables the tile to queue up to five notifications on the wide tile.
    /// - Parameter enable: **True** to enable queuing on this tile size; otherwise **false**.
    public func enableNotificationQueueForWide310x150(_ enable: Swift.Bool) throws {
        try _itileUpdater2.enableNotificationQueueForWide310x150(enable)
    }

    /// Enables the tile to queue up to five notifications on the large tile.
    /// - Parameter enable: **True** to enable queuing on this tile size; otherwise **false**.
    public func enableNotificationQueueForSquare310x310(_ enable: Swift.Bool) throws {
        try _itileUpdater2.enableNotificationQueueForSquare310x310(enable)
    }

    // MARK: Implementation details

    private var _itileUpdater2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_ITileUpdater2>? = nil

    internal var _itileUpdater2: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_ITileUpdater2> {
        get throws {
            try _itileUpdater2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUINotifications_ITileUpdater2.iid).cast(to: CWinRT.SWRT_WindowsUINotifications_ITileUpdater2.self)
            }
        }
    }

    deinit {
        _itileUpdater2_storage?.release()
    }
}