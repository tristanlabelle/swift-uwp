// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines the visual content and timing for a single, non-recurring scheduled update to a tile.
public final class WindowsUINotifications_ScheduledTileNotification: WindowsRuntime.WinRTImport<WindowsUINotifications_ScheduledTileNotificationProjection> {
    // MARK: Windows.UI.Notifications.IScheduledTileNotificationFactory members

    public convenience init(_ content: WindowsDataXmlDom_XmlDocument?, _ deliveryTime: WindowsFoundation_DateTime) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ischeduledTileNotificationFactory.createScheduledTileNotification(content, deliveryTime)))
    }

    // MARK: Windows.UI.Notifications.IScheduledTileNotification members

    /// Gets the XML description of the content of the scheduled tile update.
    /// - Returns: The object that contains the notification content.
    public var content: WindowsDataXmlDom_XmlDocument {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets the time at which the tile is scheduled to be updated.
    /// - Returns: The date and time that the notification will be updated.
    public var deliveryTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_DeliveryTime()
        }
    }

    /// Gets or sets the time after which the tile notification should no longer be shown. By default, a tile notification does not expire. It is a best practice to explicitly set an expiration time to avoid stale content.
    /// - Returns: The time after which the tile update should no longer be shown.
    public var expirationTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_ExpirationTime()
        }
    }

    /// Gets or sets the time after which the tile notification should no longer be shown. By default, a tile notification does not expire. It is a best practice to explicitly set an expiration time to avoid stale content.
    /// - Returns: The time after which the tile update should no longer be shown.
    public func expirationTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_ExpirationTime(value)
    }

    /// Gets or sets the unique ID that is used to identify the scheduled tile in the schedule.
    /// - Returns: The notification's identifier. This string is limited to 16 characters.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets the unique ID that is used to identify the scheduled tile in the schedule.
    /// - Returns: The notification's identifier. This string is limited to 16 characters.
    public func id(_ value: Swift.String) throws {
        try _interop.put_Id(value)
    }

    /// Gets or sets a string that Windows can use to prevent duplicate notification content from appearing in the queue.
    /// - Returns: A string of 16 characters or less (plus a terminating null character) that identifies the notification in the stack. While there is no set form for the string content, we recommend that it should relate to the content of the notification.
    public var tag: Swift.String {
        get throws {
            try _interop.get_Tag()
        }
    }

    /// Gets or sets a string that Windows can use to prevent duplicate notification content from appearing in the queue.
    /// - Returns: A string of 16 characters or less (plus a terminating null character) that identifies the notification in the stack. While there is no set form for the string content, we recommend that it should relate to the content of the notification.
    public func tag(_ value: Swift.String) throws {
        try _interop.put_Tag(value)
    }

    // MARK: Implementation details

    private static var _ischeduledTileNotificationFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledTileNotificationFactory>? = nil

    internal static var _ischeduledTileNotificationFactory: COM.COMInterop<CWinRT.SWRT_WindowsUINotifications_IScheduledTileNotificationFactory> {
        get throws {
            try _ischeduledTileNotificationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Notifications.ScheduledTileNotification", id: CWinRT.SWRT_WindowsUINotifications_IScheduledTileNotificationFactory.iid)
            }
        }
    }
}