// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates the methods needed to implement the AtomPub protocol which enables HTTP CRUD access to Web resources using the Atom 1.0 wire format.
public final class WindowsWebAtomPub_AtomPubClient: WindowsRuntime.WinRTImport<WindowsWebAtomPub_AtomPubClientProjection>, WindowsWebSyndication_ISyndicationClientProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsWebAtomPub_AtomPubClientProjection.self))
    }

    // MARK: Windows.Web.AtomPub.IAtomPubClientFactory members

    public convenience init(_ serverCredential: WindowsSecurityCredentials_PasswordCredential?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iatomPubClientFactory.createAtomPubClientWithCredentials(serverCredential)))
    }

    // MARK: Windows.Web.AtomPub.IAtomPubClient members

    /// Retrieves a service document from the specified Uri.
    /// - Parameter uri: The specified Uri.
    /// - Returns: The object that is used to retrieve the service document asynchronously and to report the progress and completion status of the operation.
    public func retrieveServiceDocumentAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebAtomPub_ServiceDocument?, WindowsWebSyndication_RetrievalProgress> {
        try COM.NullResult.unwrap(_interop.retrieveServiceDocumentAsync(uri))
    }

    /// Retrieves a media link resource from the specified Uniform Resource Identifier (URI).
    /// - Parameter uri: The Uniform Resource Identifier (URI) for the media resource.
    /// - Returns: The object used to retrieve the media resource and report the progress and completion status of the operation.
    public func retrieveMediaResourceAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsStorageStreams_IInputStream?, WindowsWebSyndication_RetrievalProgress> {
        try COM.NullResult.unwrap(_interop.retrieveMediaResourceAsync(uri))
    }

    /// Retrieves an Entry resource or Media Link resource from the specified Uniform Resource Identifier (URI).
    /// - Parameter uri: The specified Uniform Resource Identifier (URI).
    /// - Returns: The object that is used to retrieve the resource asynchronously and to report the progress and completion status of the operation.
    public func retrieveResourceAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebSyndication_SyndicationItem?, WindowsWebSyndication_RetrievalProgress> {
        try COM.NullResult.unwrap(_interop.retrieveResourceAsync(uri))
    }

    /// Creates a new Entry resource in the specified collection. The Uri of the collection in which to create the new resource can be discovered from the ResourceCollection object retrieved from the RetrieveResourceAsync method.
    /// - Parameter uri: The Uri of the specified collection in which the new resource should be created.
    /// - Parameter description: The description of the new resource that is turned into the Slug: header of the POST request.
    /// - Parameter item: The new resource to be created.
    /// - Returns: The object that is used to create the resource asynchronously and to report the progress and completion status of the operation.
    public func createResourceAsync(_ uri: WindowsFoundation_Uri?, _ description: Swift.String, _ item: WindowsWebSyndication_SyndicationItem?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebSyndication_SyndicationItem?, WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.createResourceAsync(uri, description, item))
    }

    /// Creates a new media resource in the specified collection.
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the specified collection in which the new resource should be created.
    /// - Parameter mediaType: The type for the media resource.
    /// - Parameter description: The description of the new resource that is turned into the Slug: header of the POST request.
    /// - Parameter mediaStream: Specifies the IInputStream to use as the media resource.
    /// - Returns: The object that is used to create the resource asynchronously and to report the progress and completion status of the operation.
    public func createMediaResourceAsync(_ uri: WindowsFoundation_Uri?, _ mediaType: Swift.String, _ description: Swift.String, _ mediaStream: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebSyndication_SyndicationItem?, WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.createMediaResourceAsync(uri, mediaType, description, mediaStream))
    }

    /// Updates a media link resource from the specified Uniform Resource Identifier (URI).
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the resource to be updated.
    /// - Parameter mediaType: The media type of the resource.
    /// - Parameter mediaStream: The IInputStream of the media that is updating the media resource.
    /// - Returns: Completion status or error codes.
    public func updateMediaResourceAsync(_ uri: WindowsFoundation_Uri?, _ mediaType: Swift.String, _ mediaStream: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncActionWithProgress<WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.updateMediaResourceAsync(uri, mediaType, mediaStream))
    }

    /// Updates an existing Entry or Media Link resource. If an ETag: header has previously been seen while retrieving this resource (in a response to RetrieveResourceAsync, CreateResourceAsync or a previous call to UpdateResourceAsync), this method automatically sends an If-Match: header with the remembered value.
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the resource to be updated.
    /// - Parameter item: The resource to be updated.
    /// - Returns: The object that is used to update the resource asynchronously and to report the progress and completion status of the operation.
    public func updateResourceAsync(_ uri: WindowsFoundation_Uri?, _ item: WindowsWebSyndication_SyndicationItem?) throws -> WindowsFoundation_IAsyncActionWithProgress<WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.updateResourceAsync(uri, item))
    }

    /// Updates an existing Entry or Media Link resource. This differs from the UpdateResourceAsync method in that the EditUri property of the specified SyndicationItem object is used as the Uri of the resource to be updated.
    /// - Parameter item: The resource to be updated.
    /// - Returns: The object that is used to update the resource asynchronously and to report the progress and completion status of the operation.
    public func updateResourceItemAsync(_ item: WindowsWebSyndication_SyndicationItem?) throws -> WindowsFoundation_IAsyncActionWithProgress<WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.updateResourceItemAsync(item))
    }

    /// Deletes an existing Entry or Media Link resource.
    /// - Parameter uri: The Uri of the resource to be deleted.
    /// - Returns: The object that is used to delete the resource asynchronously and to report the progress and completion status of the operation.
    public func deleteResourceAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncActionWithProgress<WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.deleteResourceAsync(uri))
    }

    /// Deletes an existing Entry or Media Link resource. This differs from the DeleteResourceAsync method in that the SyndicationItem object that represents the resource to be deleted is specified instead of the Uri. The DeleteResourceItemAsync method uses the  property of the specified SyndicationItem as the Uri of the resource to be deleted.
    /// - Parameter item: The resource to be deleted.
    /// - Returns: The object that is used to delete the resource asynchronously and to report the progress and completion status of the operation.
    public func deleteResourceItemAsync(_ item: WindowsWebSyndication_SyndicationItem?) throws -> WindowsFoundation_IAsyncActionWithProgress<WindowsWebSyndication_TransferProgress> {
        try COM.NullResult.unwrap(_interop.deleteResourceItemAsync(item))
    }

    /// Cancels any in-progress asynchronous operations, causing them to fail (asynchronously) with an error code indicating cancellation.
    public func cancelAsyncOperations() throws {
        try _interop.cancelAsyncOperations()
    }

    // MARK: Windows.Web.Syndication.ISyndicationClient members

    /// Gets or sets a **Boolean** value that specifies whether to bypass the cache when retrieving the feed.
    /// - Returns: **TRUE** if the cache should be bypassed; otherwise **FALSE**.
    public var bypassCacheOnRetrieve: Swift.Bool {
        get throws {
            try _isyndicationClient.get_BypassCacheOnRetrieve()
        }
    }

    /// Gets or sets a **Boolean** value that specifies whether to bypass the cache when retrieving the feed.
    /// - Returns: **TRUE** if the cache should be bypassed; otherwise **FALSE**.
    public func bypassCacheOnRetrieve(_ value: Swift.Bool) throws {
        try _isyndicationClient.put_BypassCacheOnRetrieve(value)
    }

    /// Gets or sets the maximum number of bytes to buffer when receiving a response from a server.
    /// - Returns: Maximum size and default is **UInt32.MaxValue**.
    public var maxResponseBufferSize: Swift.UInt32 {
        get throws {
            try _isyndicationClient.get_MaxResponseBufferSize()
        }
    }

    /// Gets or sets the maximum number of bytes to buffer when receiving a response from a server.
    /// - Returns: Maximum size and default is **UInt32.MaxValue**.
    public func maxResponseBufferSize(_ value: Swift.UInt32) throws {
        try _isyndicationClient.put_MaxResponseBufferSize(value)
    }

    /// Gets or sets the credentials to use when making requests via a proxy.
    /// - Returns: The PasswordCredential to use.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_isyndicationClient.get_ProxyCredential())
        }
    }

    /// Gets or sets the credentials to use when making requests via a proxy.
    /// - Returns: The PasswordCredential to use.
    public func proxyCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _isyndicationClient.put_ProxyCredential(value)
    }

    /// Gets or sets the credentials to use when making requests to the server.
    /// - Returns: Initially, this value is a username/password tuple. For domain credentials, the username is in domain\user form.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_isyndicationClient.get_ServerCredential())
        }
    }

    /// Gets or sets the credentials to use when making requests to the server.
    /// - Returns: Initially, this value is a username/password tuple. For domain credentials, the username is in domain\user form.
    public func serverCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _isyndicationClient.put_ServerCredential(value)
    }

    /// Gets or sets the maximum amount of time, in milliseconds, to wait for any of the asynchronous operations to complete. If the operation is not complete within this amount of time, it will fail with a status code indicating that it timed out.
    /// - Returns: Default value is 30000 (30 seconds). A value of **UInt32.MaxValue** indicates that the syndication client will wait indefinitely for a response.
    public var timeout: Swift.UInt32 {
        get throws {
            try _isyndicationClient.get_Timeout()
        }
    }

    /// Gets or sets the maximum amount of time, in milliseconds, to wait for any of the asynchronous operations to complete. If the operation is not complete within this amount of time, it will fail with a status code indicating that it timed out.
    /// - Returns: Default value is 30000 (30 seconds). A value of **UInt32.MaxValue** indicates that the syndication client will wait indefinitely for a response.
    public func timeout(_ value: Swift.UInt32) throws {
        try _isyndicationClient.put_Timeout(value)
    }

    /// Sets an HTTP header for the request. This method can be called multiple times to set multiple headers. When the same header is set multiple times, the values will be concatenated and separated by ",".
    /// - Parameter name: The name of the header.
    /// - Parameter value: The value of the header.
    public func setRequestHeader(_ name: Swift.String, _ value: Swift.String) throws {
        try _isyndicationClient.setRequestHeader(name, value)
    }

    /// Starts an asynchronous operation to download the syndication feed from the given URI. This method instantiates a SyndicationFeed object from the feed string, which can be in one of the formats specified in SyndicationFormat.
    /// - Parameter uri: The URI from which the feed is downloaded.
    /// - Returns: Contains the results of the operation.
    public func retrieveFeedAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebSyndication_SyndicationFeed?, WindowsWebSyndication_RetrievalProgress> {
        try COM.NullResult.unwrap(_isyndicationClient.retrieveFeedAsync(uri))
    }

    // MARK: Implementation details

    private var _isyndicationClient_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebSyndication_ISyndicationClient>? = nil

    internal var _isyndicationClient: COM.COMInterop<CWinRT.SWRT_WindowsWebSyndication_ISyndicationClient> {
        get throws {
            try _isyndicationClient_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebSyndication_ISyndicationClient.iid).cast(to: CWinRT.SWRT_WindowsWebSyndication_ISyndicationClient.self)
            }
        }
    }

    deinit {
        _isyndicationClient_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.AtomPub.AtomPubClient", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iatomPubClientFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebAtomPub_IAtomPubClientFactory>? = nil

    internal static var _iatomPubClientFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebAtomPub_IAtomPubClientFactory> {
        get throws {
            try _iatomPubClientFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.AtomPub.AtomPubClient", id: CWinRT.SWRT_WindowsWebAtomPub_IAtomPubClientFactory.iid)
            }
        }
    }
}