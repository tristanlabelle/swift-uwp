// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a calendar with appointments.
public final class WindowsApplicationModelAppointments_AppointmentCalendar: WindowsRuntime.WinRTImport<WindowsApplicationModelAppointments_AppointmentCalendarProjection> {
    // MARK: Windows.ApplicationModel.Appointments.IAppointmentCalendar members

    /// Gets the color that the built-in calendar app uses for appointments associated with the calendar.
    /// - Returns: An unsigned integer representing the color that the built-in calendar app uses for appointments associated with the calendar.
    public var displayColor: WindowsUI_Color {
        get throws {
            try _interop.get_DisplayColor()
        }
    }

    /// Gets a string representing the display name for the AppointmentCalendar.
    /// - Returns: A string representing the display name for the AppointmentCalendar.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets a string representing the display name for the AppointmentCalendar.
    /// - Returns: A string representing the display name for the AppointmentCalendar.
    public func displayName(_ value: Swift.String) throws {
        try _interop.put_DisplayName(value)
    }

    /// Gets whether the AppointmentCalendar is hidden in the device's built-in calendar UI.
    /// - Returns: A boolean value indicating whether the AppointmentCalendar is hidden in the device's built-in calendar UI.
    public var isHidden: Swift.Bool {
        get throws {
            try _interop.get_IsHidden()
        }
    }

    /// Gets a string that uniquely identifies the appointment calendar on the local device.
    /// - Returns: A string that uniquely identifies the appointment calendar on the local device.
    public var localId: Swift.String {
        get throws {
            try _interop.get_LocalId()
        }
    }

    /// Gets or sets a boolean value indicating whether other apps on the device have read access to the appointment calendar.
    /// - Returns: A boolean value indicating whether other apps on the device have read access to the appointment calendar.
    public var otherAppReadAccess: WindowsApplicationModelAppointments_AppointmentCalendarOtherAppReadAccess {
        get throws {
            try _interop.get_OtherAppReadAccess()
        }
    }

    /// Gets or sets a boolean value indicating whether other apps on the device have read access to the appointment calendar.
    /// - Returns: A boolean value indicating whether other apps on the device have read access to the appointment calendar.
    public func otherAppReadAccess(_ value: WindowsApplicationModelAppointments_AppointmentCalendarOtherAppReadAccess) throws {
        try _interop.put_OtherAppReadAccess(value)
    }

    /// Gets or sets a boolean value indicating whether other apps on the device have write access to the appointment calendar.
    /// - Returns: A boolean value indicating whether other apps on the device have write access to the appointment calendar.
    public var otherAppWriteAccess: WindowsApplicationModelAppointments_AppointmentCalendarOtherAppWriteAccess {
        get throws {
            try _interop.get_OtherAppWriteAccess()
        }
    }

    /// Gets or sets a boolean value indicating whether other apps on the device have write access to the appointment calendar.
    /// - Returns: A boolean value indicating whether other apps on the device have write access to the appointment calendar.
    public func otherAppWriteAccess(_ value: WindowsApplicationModelAppointments_AppointmentCalendarOtherAppWriteAccess) throws {
        try _interop.put_OtherAppWriteAccess(value)
    }

    /// Gets a string that describes the provider for the appointment calendar.
    /// - Returns: A string that describes the provider for the appointment calendar.
    public var sourceDisplayName: Swift.String {
        get throws {
            try _interop.get_SourceDisplayName()
        }
    }

    /// Gets or sets how the summary card for the calendar's appointments are displayed.
    /// - Returns: An AppointmentSummaryCardView value indicating how the summary card for the calendar's appointments are displayed.
    public var summaryCardView: WindowsApplicationModelAppointments_AppointmentSummaryCardView {
        get throws {
            try _interop.get_SummaryCardView()
        }
    }

    /// Gets or sets how the summary card for the calendar's appointments are displayed.
    /// - Returns: An AppointmentSummaryCardView value indicating how the summary card for the calendar's appointments are displayed.
    public func summaryCardView(_ value: WindowsApplicationModelAppointments_AppointmentSummaryCardView) throws {
        try _interop.put_SummaryCardView(value)
    }

    /// Asynchronously retrieves a list of appointments belonging to the current AppointmentCalendar that meet the specified criteria.
    /// - Parameter rangeStart: The start time of the time window for which appointments are retrieved.
    /// - Parameter rangeLength: The length of the time window for which appointments are retrieved. If the *rangeLength* parameter is set to 0, no appointments will be returned. Even if appointments exist on the device that have a StartTime that is exactly the same as the *rangeStart* value, the returned list will be empty.
    /// - Returns: An asynchronous operation that returns an IVectorView list of Appointment objects upon successful completion.
    public func findAppointmentsAsync(_ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentsAsync(rangeStart, rangeLength))
    }

    /// Asynchronously retrieves a list of appointments belonging to the current AppointmentCalendar that meet the specified criteria.
    /// - Parameter rangeStart: The start time of the time window for which appointments are retrieved.
    /// - Parameter rangeLength: The length of the time window for which appointments are retrieved. If the *rangeLength* parameter is set to 0, no appointments will be returned. Even if appointments exist on the device that have a StartTime that is exactly the same as the *rangeStart* value, the returned list will be empty.
    /// - Parameter options: A FindAppointmentsOptions object that is used to specify more options for this operation. You must set the *options* parameter to specify the values to retrieve.
    /// - Returns: An asynchronous operation that returns an IVectorView list of Appointment objects upon successful completion.
    public func findAppointmentsAsync(_ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan, _ options: WindowsApplicationModelAppointments_FindAppointmentsOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentsAsyncWithOptions(rangeStart, rangeLength, options))
    }

    /// Asynchronously retrieves a list of appointment instances that are exceptions from the specified master appointment.
    /// - Parameter masterLocalId: The LocalId of the master appointment for which exceptional appointment instances are retrieved.
    /// - Returns: An asynchronous operation that returns IVectorView on successful completion.
    public func findExceptionsFromMasterAsync(_ masterLocalId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_AppointmentException?>?> {
        try COM.NullResult.unwrap(_interop.findExceptionsFromMasterAsync(masterLocalId))
    }

    /// Asynchronously retrieves a list of appointment instances of the specified master appointment that meet the specified criteria.
    /// - Parameter masterLocalId: The LocalId of the master appointment for which appointment instances are retrieved.
    /// - Parameter rangeStart: The start time of the time window for which appointment instances are retrieved.
    /// - Parameter rangeLength: The length of the time window for which appointment instances are retrieved.
    /// - Returns: An asynchronous operation that returns IVectorView on successful completion.
    public func findAllInstancesAsync(_ masterLocalId: Swift.String, _ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAllInstancesAsync(masterLocalId, rangeStart, rangeLength))
    }

    /// Asynchronously retrieves a list of appointment instances of the specified master appointment that meet the specified criteria.
    /// - Parameter masterLocalId: The LocalId of the master appointment for which appointment instances are retrieved.
    /// - Parameter rangeStart: The start time of the time window for which appointment instances are retrieved.
    /// - Parameter rangeLength: The length of the time window for which appointment instances are retrieved.
    /// - Parameter pOptions: A FindAppointmentsOptions object that is used to specify more options for this operation.
    /// - Returns: An asynchronous operation that returns IVectorView on successful completion.
    public func findAllInstancesAsync(_ masterLocalId: Swift.String, _ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan, _ pOptions: WindowsApplicationModelAppointments_FindAppointmentsOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAllInstancesAsyncWithOptions(masterLocalId, rangeStart, rangeLength, pOptions))
    }

    /// Asynchronously retrieves the Appointment with the specified ID.
    /// - Parameter localId: The LocalId of the appointment to be retrieved.
    /// - Returns: An asynchronous operation that returns Appointment on successful completion.
    public func getAppointmentAsync(_ localId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_Appointment?> {
        try COM.NullResult.unwrap(_interop.getAppointmentAsync(localId))
    }

    /// Asynchronously retrieves the appointment instance of the specified master appointment that has the specified start time.
    /// - Parameter localId: The ID of the master appointment to which the retrieved appointment instance belongs.
    /// - Parameter instanceStartTime: The start time of the appointment instance to be retrieved.
    /// - Returns: An asynchronous operation that returns Appointment on successful completion.
    public func getAppointmentInstanceAsync(_ localId: Swift.String, _ instanceStartTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_Appointment?> {
        try COM.NullResult.unwrap(_interop.getAppointmentInstanceAsync(localId, instanceStartTime))
    }

    /// Asynchronously retrieves a list of appointments that meet the specified criteria.
    /// - Returns: An asynchronous operation that returns IVectorView on successful completion.
    public func findUnexpandedAppointmentsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findUnexpandedAppointmentsAsync())
    }

    /// Asynchronously retrieves a list of appointments that meet the specified criteria.
    /// - Parameter options: A FindAppointmentsOptions object that is used to specify more options for this operation.
    /// - Returns: An asynchronous operation that returns IVectorView on successful completion.
    public func findUnexpandedAppointmentsAsync(_ options: WindowsApplicationModelAppointments_FindAppointmentsOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findUnexpandedAppointmentsAsyncWithOptions(options))
    }

    /// Asynchronously deletes the appointment calendar.
    /// - Returns: An asynchrounous action.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteAsync())
    }

    /// Asynchronously saves changes to the appointment calendar.
    /// - Returns: An asynchronous action.
    public func saveAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveAsync())
    }

    /// Asynchronously deletes the appointment with the specified ID.
    /// - Parameter localId: The LocalId of the appointment to be deleted.
    /// - Returns: An asynchronous action.
    public func deleteAppointmentAsync(_ localId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteAppointmentAsync(localId))
    }

    /// Asynchronously deletes the appointment instance with the specified start time of a master appointment with the specified ID.
    /// - Parameter localId: The LocalId of the master appointment associated with the appointment instance to be deleted.
    /// - Parameter instanceStartTime: The start time of the appointment instance to be deleted. This must be the original start date of the instance.
    /// - Returns: An asynchronous action.
    public func deleteAppointmentInstanceAsync(_ localId: Swift.String, _ instanceStartTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteAppointmentInstanceAsync(localId, instanceStartTime))
    }

    /// Asynchronously saves the provided appointment to the calendar.
    /// - Parameter pAppointment: The appointment to be saved.
    /// - Returns: An asynchronous action.
    public func saveAppointmentAsync(_ pAppointment: WindowsApplicationModelAppointments_Appointment?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveAppointmentAsync(pAppointment))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentCalendar2 members

    /// Gets or sets a Boolean value that indicates if the calendar supports cancelling meetings.
    /// - Returns: Boolean value that indicates if the calendar supports cancelling meetings.
    public var canCancelMeetings: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanCancelMeetings()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports cancelling meetings.
    /// - Returns: Boolean value that indicates if the calendar supports cancelling meetings.
    public func canCancelMeetings(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanCancelMeetings(value)
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports creating or updating appointments.
    /// - Returns: Boolean value that indicates if the calendar supports creating or updating appointments.
    public var canCreateOrUpdateAppointments: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanCreateOrUpdateAppointments()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports creating or updating appointments.
    /// - Returns: Boolean value that indicates if the calendar supports creating or updating appointments.
    public func canCreateOrUpdateAppointments(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanCreateOrUpdateAppointments(value)
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports forwarding meetings.
    /// - Returns: Boolean value that indicates if the calendar supports forwarding meetings.
    public var canForwardMeetings: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanForwardMeetings()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports forwarding meetings.
    /// - Returns: Boolean value that indicates if the calendar supports forwarding meetings.
    public func canForwardMeetings(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanForwardMeetings(value)
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports notifying attendees.
    /// - Returns: Boolean value that indicates if the calendar supports notifying attendees.
    public var canNotifyInvitees: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanNotifyInvitees()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports notifying attendees.
    /// - Returns: Boolean value that indicates if the calendar supports notifying attendees.
    public func canNotifyInvitees(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanNotifyInvitees(value)
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports proposing new meeting times.
    /// - Returns: Boolean value that indicates if the calendar supports proposing new meeting times.
    public var canProposeNewTimeForMeetings: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanProposeNewTimeForMeetings()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports proposing new meeting times.
    /// - Returns: Boolean value that indicates if the calendar supports proposing new meeting times.
    public func canProposeNewTimeForMeetings(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanProposeNewTimeForMeetings(value)
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports updating meeting responses.
    /// - Returns: Boolean value that indicates if the calendar supports updating meeting responses.
    public var canUpdateMeetingResponses: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_CanUpdateMeetingResponses()
        }
    }

    /// Gets or sets a Boolean value that indicates if the calendar supports updating meeting responses.
    /// - Returns: Boolean value that indicates if the calendar supports updating meeting responses.
    public func canUpdateMeetingResponses(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_CanUpdateMeetingResponses(value)
    }

    /// Gets the color that the built-in calendar app uses for appointments associated with the calendar.
    /// - Returns: An unsigned integer representing the color that the built-in calendar app uses for appointments associated with the calendar.
    public func displayColor(_ value: WindowsUI_Color) throws {
        try _iappointmentCalendar2.put_DisplayColor(value)
    }

    /// Gets whether the AppointmentCalendar is hidden in the device's built-in calendar UI.
    /// - Returns: A boolean value indicating whether the AppointmentCalendar is hidden in the device's built-in calendar UI.
    public func isHidden(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_IsHidden(value)
    }

    /// Gets or sets a Boolean value that indicates if invitees must be sent notifications.
    /// - Returns: A Boolean value that indicates if invitees must be sent notifications.
    public var mustNofityInvitees: Swift.Bool {
        get throws {
            try _iappointmentCalendar2.get_MustNofityInvitees()
        }
    }

    /// Gets or sets a Boolean value that indicates if invitees must be sent notifications.
    /// - Returns: A Boolean value that indicates if invitees must be sent notifications.
    public func mustNofityInvitees(_ value: Swift.Bool) throws {
        try _iappointmentCalendar2.put_MustNofityInvitees(value)
    }

    /// Gets the remote ID for the AppointmentCalendar.
    /// - Returns: The remote ID for the AppointmentCalendar.
    public var remoteId: Swift.String {
        get throws {
            try _iappointmentCalendar2.get_RemoteId()
        }
    }

    /// Gets the remote ID for the AppointmentCalendar.
    /// - Returns: The remote ID for the AppointmentCalendar.
    public func remoteId(_ value: Swift.String) throws {
        try _iappointmentCalendar2.put_RemoteId(value)
    }

    /// Gets the AppointmentCalendarSyncManager which can be used to sync with the remote server.
    /// - Returns: The AppointmentCalendarSyncManager which can be used to sync with the remote server.
    public var syncManager: WindowsApplicationModelAppointments_AppointmentCalendarSyncManager {
        get throws {
            try COM.NullResult.unwrap(_iappointmentCalendar2.get_SyncManager())
        }
    }

    /// Get the identifier of the user account data for the AppointmentCalendar.
    /// - Returns: The identifier of the user account data for the AppointmentCalendar.
    public var userDataAccountId: Swift.String {
        get throws {
            try _iappointmentCalendar2.get_UserDataAccountId()
        }
    }

    /// Asynchronously attempts to create or update a meeting.
    /// - Parameter appointment: The meeting to create or update.
    /// - Parameter notifyInvitees: A Boolean value indicating if invitees should be notified.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryCreateOrUpdateAppointmentAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?, _ notifyInvitees: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappointmentCalendar2.tryCreateOrUpdateAppointmentAsync(appointment, notifyInvitees))
    }

    /// Asynchronously attempts to cancel a meeting.
    /// - Parameter meeting: The meeting to cancel.
    /// - Parameter subject: The subject for the cancellation notification.
    /// - Parameter comment: The body of the cancellation notification.
    /// - Parameter notifyInvitees: A Boolean value indicating if invitees should be notified.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryCancelMeetingAsync(_ meeting: WindowsApplicationModelAppointments_Appointment?, _ subject: Swift.String, _ comment: Swift.String, _ notifyInvitees: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappointmentCalendar2.tryCancelMeetingAsync(meeting, subject, comment, notifyInvitees))
    }

    public func tryForwardMeetingAsync(_ meeting: WindowsApplicationModelAppointments_Appointment?, _ invitees: WindowsFoundationCollections_IIterable<WindowsApplicationModelAppointments_AppointmentInvitee?>?, _ subject: Swift.String, _ forwardHeader: Swift.String, _ comment: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappointmentCalendar2.tryForwardMeetingAsync(meeting, invitees, subject, forwardHeader, comment))
    }

    /// Asynchronously attempts to propose a new meeting time.
    /// - Parameter meeting: The meeting to update.
    /// - Parameter newStartTime: The proposed new start time.
    /// - Parameter newDuration: A new duration for the meeting.
    /// - Parameter subject: The subject of the meeting invitation.
    /// - Parameter comment: The body of the meeting invitation.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryProposeNewTimeForMeetingAsync(_ meeting: WindowsApplicationModelAppointments_Appointment?, _ newStartTime: WindowsFoundation_DateTime, _ newDuration: WindowsFoundation_TimeSpan, _ subject: Swift.String, _ comment: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappointmentCalendar2.tryProposeNewTimeForMeetingAsync(meeting, newStartTime, newDuration, subject, comment))
    }

    /// Asynchronously attempts to update the response to a meeting invitation.
    /// - Parameter meeting: The meeting to update.
    /// - Parameter response: The response to the meeting invitation, such as accept, tentative or decline.
    /// - Parameter subject: The subject of the response.
    /// - Parameter comment: The body of the response.
    /// - Parameter sendUpdate: A Boolean value indicating whether or not to send the response to the meeting organizer.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryUpdateMeetingResponseAsync(_ meeting: WindowsApplicationModelAppointments_Appointment?, _ response: WindowsApplicationModelAppointments_AppointmentParticipantResponse, _ subject: Swift.String, _ comment: Swift.String, _ sendUpdate: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappointmentCalendar2.tryUpdateMeetingResponseAsync(meeting, response, subject, comment, sendUpdate))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentCalendar3 members

    /// Registers the AppointmentCalendar as a sync provider.
    /// - Returns: An asynchronous action.
    public func registerSyncManagerAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iappointmentCalendar3.registerSyncManagerAsync())
    }

    // MARK: Implementation details

    private var _iappointmentCalendar2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar2>? = nil

    internal var _iappointmentCalendar2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar2> {
        get throws {
            try _iappointmentCalendar2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar2.self)
            }
        }
    }

    private var _iappointmentCalendar3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar3>? = nil

    internal var _iappointmentCalendar3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar3> {
        get throws {
            try _iappointmentCalendar3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentCalendar3.self)
            }
        }
    }

    deinit {
        _iappointmentCalendar2_storage?.release()
        _iappointmentCalendar3_storage?.release()
    }
}