// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a store that contains appointments.
public final class WindowsApplicationModelAppointments_AppointmentStore: WindowsRuntime.WinRTImport<WindowsApplicationModelAppointments_AppointmentStoreProjection> {
    // MARK: Windows.ApplicationModel.Appointments.IAppointmentStore members

    /// Returns the AppointmentStoreChangeTracker associated with the appointment store.
    /// - Returns: The AppointmentStoreChangeTracker associated with the appointment store.
    public var changeTracker: WindowsApplicationModelAppointments_AppointmentStoreChangeTracker {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ChangeTracker())
        }
    }

    /// Asynchronously creates a new AppointmentCalendar within the appointment store using the specified parameters.
    /// - Parameter name: The name for the new AppointmentCalendar.
    /// - Returns: An async operation that provides access to the newly created AppointmentCalendar.
    public func createAppointmentCalendarAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_AppointmentCalendar?> {
        try COM.NullResult.unwrap(_interop.createAppointmentCalendarAsync(name))
    }

    /// Retrieves the AppointmentCalendar with the specified LocalId.
    /// - Parameter calendarId: The LocalId of the AppointmentCalendar to be retrieved.
    /// - Returns: An asynchronous operation that returns an AppointmentCalendar upon successful completion.
    public func getAppointmentCalendarAsync(_ calendarId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_AppointmentCalendar?> {
        try COM.NullResult.unwrap(_interop.getAppointmentCalendarAsync(calendarId))
    }

    /// Retrieves the Appointment with the specified LocalId.
    /// - Parameter localId: The LocalId of the appointment to be retrieved.
    /// - Returns: An asynchronous operation that returns an Appointment upon successful completion.
    public func getAppointmentAsync(_ localId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_Appointment?> {
        try COM.NullResult.unwrap(_interop.getAppointmentAsync(localId))
    }

    /// Retrieves the instance of the Appointment with the specified LocalId and the specified start time.
    /// - Parameter localId: The LocalId of the appointment instance to be retrieved.
    /// - Parameter instanceStartTime: The start time of the appointment instance to be retrieved. The value of this parameter must be the original start date of the instance.
    /// - Returns: An asynchronous operation that returns an Appointment upon successful completion.
    public func getAppointmentInstanceAsync(_ localId: Swift.String, _ instanceStartTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_Appointment?> {
        try COM.NullResult.unwrap(_interop.getAppointmentInstanceAsync(localId, instanceStartTime))
    }

    /// Retrieves a list of all of the appointment calendars in the appointment store.
    /// - Returns: An asynchronous operation that returns an IVectorView upon successful completion.
    public func findAppointmentCalendarsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_AppointmentCalendar?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentCalendarsAsync())
    }

    /// Retrieves a list of appointment calendars in the appointment store that meet the criteria specified by the supplied FindAppointmentCalendarsOptions object..
    /// - Parameter options: The object that specifies the criteria that determines which appointment calendars are returned.
    /// - Returns: An asynchronous operation that returns an IVectorView upon successful completion.
    public func findAppointmentCalendarsAsync(_ options: WindowsApplicationModelAppointments_FindAppointmentCalendarsOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_AppointmentCalendar?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentCalendarsAsyncWithOptions(options))
    }

    /// Retrieves a list of appointments in the appointment calendar that fall within the specified date range.
    /// - Parameter rangeStart: The start of the date range for which appointments are retrieved.
    /// - Parameter rangeLength: The length of the date range for which appointments are retrieved. If the *rangeLength* parameter is set to 0, no appointments will be returned. Even if appointments exist on the device that have a StartTime that is exactly the same as the *rangeStart* value, the returned list will be empty.
    /// - Returns: An asynchronous operation that returns an IVectorView list of Appointment objects upon successful completion.
    public func findAppointmentsAsync(_ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentsAsync(rangeStart, rangeLength))
    }

    /// Retrieves a list of appointments in the appointment calendar that fall within the specified date range and meet the criteria specified by the supplied FindAppointmentsOptions object..
    /// - Parameter rangeStart: The start of the date range for which appointments are retrieved.
    /// - Parameter rangeLength: The length of the date range for which appointments are retrieved. If the *rangeLength* parameter is set to 0, no appointments will be returned. Even if appointments exist on the device that have a StartTime that is exactly the same as the *rangeStart* value, the returned list will be empty.
    /// - Parameter options: A FindAppointmentsOptions object that is used to specify more options for this operation. You must set the *options* parameter to specify the values to retrieve.
    /// - Returns: An asynchronous operation that returns an IVectorView list of Appointment objects upon successful completion.
    public func findAppointmentsAsync(_ rangeStart: WindowsFoundation_DateTime, _ rangeLength: WindowsFoundation_TimeSpan, _ options: WindowsApplicationModelAppointments_FindAppointmentsOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelAppointments_Appointment?>?> {
        try COM.NullResult.unwrap(_interop.findAppointmentsAsyncWithOptions(rangeStart, rangeLength, options))
    }

    /// Returns an AppointmentConflictResult representing a conflict between the specified appointment and an existing appointment in the appointment store.
    /// - Parameter appointment: The appointment for which a conflict is sought.
    /// - Returns: An asynchronous operation that returns an AppointmentConflictResult upon successful completion. For conflicts that are in the past, the returned AppointmentConflictResult object will have a Type of AppointmentConflictType.None.
    public func findConflictAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_AppointmentConflictResult?> {
        try COM.NullResult.unwrap(_interop.findConflictAsync(appointment))
    }

    /// Returns an AppointmentConflictResult representing a conflict between the specified appointment and an existing appointment instance in the appointment store.
    /// - Parameter appointment: The appointment for which a conflict is sought.
    /// - Parameter instanceStartTime: The start time of the appointment instance for which a conflict is sought.
    /// - Returns: An asynchronous operation that returns an AppointmentConflictResult upon successful completion. For conflicts that are in the past, the returned AppointmentConflictResult object will have a Type of AppointmentConflictType.None.
    public func findConflictAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?, _ instanceStartTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_AppointmentConflictResult?> {
        try COM.NullResult.unwrap(_interop.findConflictAsyncWithInstanceStart(appointment, instanceStartTime))
    }

    /// Moves the specified Appointment object to the specified AppointmentCalendar.
    /// - Parameter appointment: The appointment to be moved.
    /// - Parameter destinationCalendar: The appointment calendar to which the appointment is moved.
    /// - Returns: An asynchronous action.
    public func moveAppointmentAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?, _ destinationCalendar: WindowsApplicationModelAppointments_AppointmentCalendar?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.moveAppointmentAsync(appointment, destinationCalendar))
    }

    /// Shows the Appointments provider Add Appointment UI, to enable the user to add an appointment.
    /// - Parameter appointment: The object representing the information for the appointment to add.
    /// - Parameter selection: The Rect is the rectangular area of user selection (for example, pressing a button), around which the operating system displays the Add Appointment UI, not within that rectangular area. For example, if an app uses a button to show the Rect, pass the Rect of the button so the Add Appointment UI displays around the button, not overlapping it.
    /// - Returns: When this method completes, it returns a **String** object that represents the RoamingId of the appointment. If the appointment identifier returned is an empty string, the appointment was not added to the Appointments provider app.
    public func showAddAppointmentAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?, _ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.showAddAppointmentAsync(appointment, selection))
    }

    /// Shows the Appointments provider Replace Appointment UI, to enable the user to replace an appointment.
    /// - Parameter localId: The LocalId of the appointment to be replaced.
    /// - Parameter appointment: The object representing the appointment to replace the existing appointment.
    /// - Parameter selection: The Rect is the rectangular area of user selection (for example, pressing a button), around which the operating system displays the Replace Appointment UI, not within that rectangular area. For example, if an app uses a button to show the Rect, pass the Rect of the button so the Replace Appointment UI displays around the button, not overlapping it.
    /// - Returns: When this method completes, it returns a **String** object that represents the RoamingId of the appointment that replaced the existing appointment.
    public func showReplaceAppointmentAsync(_ localId: Swift.String, _ appointment: WindowsApplicationModelAppointments_Appointment?, _ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.showReplaceAppointmentAsync(localId, appointment, selection))
    }

    /// Shows the Appointments provider Replace Appointment UI, to enable the user to replace an appointment.
    /// - Parameter localId: The LocalId of the appointment to be replaced.
    /// - Parameter appointment: The object representing the appointment to replace the existing appointment.
    /// - Parameter selection: The Rect is the rectangular area of user selection (for example, pressing a button), around which the operating system displays the Replace Appointment UI, not within that rectangular area. For example, if an app uses a button to show the Rect, pass the Rect of the button so the Replace Appointment UI displays around the button, not overlapping it.
    /// - Parameter preferredPlacement: The Placement that describes the preferred placement of the Replace Appointment UI.
    /// - Parameter instanceStartDate: The start date and time of the appointment instance to replace.
    /// - Returns: When this method completes, it returns a **String** object that represents the RoamingId of the appointment that replaced the existing appointment.
    public func showReplaceAppointmentAsync(_ localId: Swift.String, _ appointment: WindowsApplicationModelAppointments_Appointment?, _ selection: WindowsFoundation_Rect, _ preferredPlacement: WindowsUIPopups_Placement, _ instanceStartDate: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.showReplaceAppointmentWithPlacementAndDateAsync(localId, appointment, selection, preferredPlacement, instanceStartDate))
    }

    /// Shows the Appointments provider Remove Appointment UI, to enable the user to remove an appointment.
    /// - Parameter localId: The LocalId of the appointment to be removed.
    /// - Parameter selection: The Rect is the rectangular area of user selection (for example, pressing a button), around which the operating system displays the Remove Appointment UI, not within that rectangular area. For example, if an app uses a button to show the Rect, pass the Rect of the button so the Remove Appointment UI displays around the button, not overlapping it.
    /// - Returns: When this method completes, it returns a **Boolean** value that indicates whether the Appointment provider app removed the appointment.
    public func showRemoveAppointmentAsync(_ localId: Swift.String, _ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.showRemoveAppointmentAsync(localId, selection))
    }

    /// Shows the Appointments provider Remove Appointment UI, to enable the user to remove an appointment.
    /// - Parameter localId: The LocalId of the appointment to be removed.
    /// - Parameter selection: The Rect is the rectangular area of user selection (for example, pressing a button), around which the operating system displays the Remove Appointment UI, not within that rectangular area. For example, if an app uses a button to show the Rect, pass the Rect of the button so the Remove Appointment UI displays around the button, not overlapping it.
    /// - Parameter preferredPlacement: The Placement that describes the preferred placement of the Remove Appointment UI.
    /// - Parameter instanceStartDate: The start date and time of the appointment instance to remove. This parameter must be the original start date of the instance.
    /// - Returns: When this method completes, it returns a **Boolean** value that indicates whether the Appointment provider app removed the appointment.
    public func showRemoveAppointmentAsync(_ localId: Swift.String, _ selection: WindowsFoundation_Rect, _ preferredPlacement: WindowsUIPopups_Placement, _ instanceStartDate: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.showRemoveAppointmentWithPlacementAndDateAsync(localId, selection, preferredPlacement, instanceStartDate))
    }

    /// Shows the Appointments provider Appointment Details UI, to enable the user to view the specified appointment.
    /// - Parameter localId: The LocalId of the appointment to be displayed.
    /// - Returns: An asynchronous action.
    public func showAppointmentDetailsAsync(_ localId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.showAppointmentDetailsAsync(localId))
    }

    /// Shows the Appointments provider Appointment Details UI, to enable the user to view the specified appointment.
    /// - Parameter localId: The LocalId of the appointment to be displayed.
    /// - Parameter instanceStartDate: A DateTime object with the start time of the appointment instance to be displayed. This parameter must be the original start date of the instance.
    /// - Returns: An asynchronous action.
    public func showAppointmentDetailsAsync(_ localId: Swift.String, _ instanceStartDate: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.showAppointmentDetailsWithDateAsync(localId, instanceStartDate))
    }

    /// Shows the Appointments provider Add Appointment UI including the full edit experience, to enable the user to add an appointment.
    /// - Parameter appointment: The appointment to be added.
    /// - Returns: When this method completes, it returns a **String** object that represents the RoamingId of the appointment. If the appointment identifier returned is an empty string, the appointment was not added to the Appointments provider app.
    public func showEditNewAppointmentAsync(_ appointment: WindowsApplicationModelAppointments_Appointment?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.showEditNewAppointmentAsync(appointment))
    }

    /// Returns a list of LocalId values for appointment instances with the specified RoamingId value.
    /// - Parameter roamingId: The RoamingId value for which local ID values are sought.
    /// - Returns: An asynchronous operation that returns an IVectorView upon successful completion.
    public func findLocalIdsFromRoamingIdAsync(_ roamingId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<Swift.String>?> {
        try COM.NullResult.unwrap(_interop.findLocalIdsFromRoamingIdAsync(roamingId))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentStore2 members

    /// Occurs when the AppointmentStore changes.
    public func storeChanged(adding pHandler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelAppointments_AppointmentStore?, WindowsApplicationModelAppointments_AppointmentStoreChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iappointmentStore2.add_StoreChanged(pHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: storeChanged)
    }

    public func storeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iappointmentStore2.remove_StoreChanged(token)
    }

    /// Asynchronously creates a new AppointmentCalendar within the appointment store with the specified name and user data account ID.
    /// - Parameter name: The name for the new AppointmentCalendar.
    /// - Parameter userDataAccountId: The identifier for the user data account used to create the AppointmentCalendar.
    /// - Returns: An async operation that provides access to the newly created AppointmentCalendar.
    public func createAppointmentCalendarAsync(_ name: Swift.String, _ userDataAccountId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelAppointments_AppointmentCalendar?> {
        try COM.NullResult.unwrap(_iappointmentStore2.createAppointmentCalendarInAccountAsync(name, userDataAccountId))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentStore3 members

    /// Gets a AppointmentStoreChangeTracker that provides functionality for monitoring changes to Appointment objects in the AppointmentStore.
    /// - Parameter identity: A string that identifies the AppointmentStoreChangeTracker instance in the store.
    /// - Returns: A AppointmentStoreChangeTracker that provides functionality for monitoring changes to Appointment objects in the AppointmentStore.
    public func getChangeTracker(_ identity: Swift.String) throws -> WindowsApplicationModelAppointments_AppointmentStoreChangeTracker {
        try COM.NullResult.unwrap(_iappointmentStore3.getChangeTracker(identity))
    }

    // MARK: Implementation details

    private var _iappointmentStore2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore2>? = nil

    internal var _iappointmentStore2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore2> {
        get throws {
            try _iappointmentStore2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore2.self)
            }
        }
    }

    private var _iappointmentStore3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore3>? = nil

    internal var _iappointmentStore3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore3> {
        get throws {
            try _iappointmentStore3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentStore3.self)
            }
        }
    }

    deinit {
        _iappointmentStore2_storage?.release()
        _iappointmentStore3_storage?.release()
    }
}