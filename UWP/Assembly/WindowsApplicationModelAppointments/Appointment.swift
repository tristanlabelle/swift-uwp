// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an appointment in a calendar. This class is used when an app is activated using the **AppointmentsProvider** value for ActivationKind, as a value for AppointmentInformation properties.
public final class WindowsApplicationModelAppointments_Appointment: WindowsRuntime.WinRTImport<WindowsApplicationModelAppointments_AppointmentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelAppointments_AppointmentProjection.self))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointment members

    /// Gets or sets a Boolean value that indicates whether the appointment will last all day. The default is **FALSE** for won't last all day.
    /// - Returns: A Boolean value that indicates whether the appointment will last all day. **TRUE** indicates that the appointment will last all day; otherwise **FALSE**.
    public var allDay: Swift.Bool {
        get throws {
            try _interop.get_AllDay()
        }
    }

    /// Gets or sets a Boolean value that indicates whether the appointment will last all day. The default is **FALSE** for won't last all day.
    /// - Returns: A Boolean value that indicates whether the appointment will last all day. **TRUE** indicates that the appointment will last all day; otherwise **FALSE**.
    public func allDay(_ value: Swift.Bool) throws {
        try _interop.put_AllDay(value)
    }

    /// Gets or sets a AppointmentBusyStatus -typed value that indicates the busy status for a participant of an appointment.
    /// - Returns: A AppointmentBusyStatus -typed value that indicates the busy status for a participant of an appointment.
    public var busyStatus: WindowsApplicationModelAppointments_AppointmentBusyStatus {
        get throws {
            try _interop.get_BusyStatus()
        }
    }

    /// Gets or sets a AppointmentBusyStatus -typed value that indicates the busy status for a participant of an appointment.
    /// - Returns: A AppointmentBusyStatus -typed value that indicates the busy status for a participant of an appointment.
    public func busyStatus(_ value: WindowsApplicationModelAppointments_AppointmentBusyStatus) throws {
        try _interop.put_BusyStatus(value)
    }

    /// Gets or sets a string value. The string contains extended details that describe the appointment. Details is of type String and a maximum of 1,073,741,823 characters in length, which is the maximum length of a JET database string.
    /// - Returns: The extended details that describe the appointment.
    public var details: Swift.String {
        get throws {
            try _interop.get_Details()
        }
    }

    /// Gets or sets a string value. The string contains extended details that describe the appointment. Details is of type String and a maximum of 1,073,741,823 characters in length, which is the maximum length of a JET database string.
    /// - Returns: The extended details that describe the appointment.
    public func details(_ value: Swift.String) throws {
        try _interop.put_Details(value)
    }

    /// Gets or sets a time span that represents the time duration of the appointment. Duration is of type TimeSpan and must be non-negative.
    /// - Returns: A time span that represents the duration of the appointment. The duration can't be a negative value.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets a time span that represents the time duration of the appointment. Duration is of type TimeSpan and must be non-negative.
    /// - Returns: A time span that represents the duration of the appointment. The duration can't be a negative value.
    public func duration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Duration(value)
    }

    /// Gets the list of participants for the appointment. Invitees is of type IVector(AppointmentInvitee). If an organizer is set and invitee length is greater than 0, a call to an AppointmentManager API fails with **E_INVALIDARG**. The number of invitees is unlimited.
    /// - Returns: The list of participants for the appointment.
    public var invitees: WindowsFoundationCollections_IVector<WindowsApplicationModelAppointments_AppointmentInvitee?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Invitees())
        }
    }

    /// Gets or sets a string that communicates the physical location of the appointment. Location is of type String and a maximum of 32,768 characters in length.
    /// - Returns: The location of the appointment.
    public var location: Swift.String {
        get throws {
            try _interop.get_Location()
        }
    }

    /// Gets or sets a string that communicates the physical location of the appointment. Location is of type String and a maximum of 32,768 characters in length.
    /// - Returns: The location of the appointment.
    public func location(_ value: Swift.String) throws {
        try _interop.put_Location(value)
    }

    /// Gets or sets the organizer of the appointment. Organizer is of type AppointmentOrganizer. If an organizer is set and invitee length is greater than 0, a call to an AppointmentManager API fails with **E_INVALIDARG**. The number of invitees is unlimited.
    /// - Returns: A AppointmentOrganizer object that indicates the organizer of the appointment.
    public var organizer: WindowsApplicationModelAppointments_AppointmentOrganizer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Organizer())
        }
    }

    /// Gets or sets the organizer of the appointment. Organizer is of type AppointmentOrganizer. If an organizer is set and invitee length is greater than 0, a call to an AppointmentManager API fails with **E_INVALIDARG**. The number of invitees is unlimited.
    /// - Returns: A AppointmentOrganizer object that indicates the organizer of the appointment.
    public func organizer(_ value: WindowsApplicationModelAppointments_AppointmentOrganizer?) throws {
        try _interop.put_Organizer(value)
    }

    /// Gets or sets the object that describes when and how often the appointment occurs. Recurrence is of type AppointmentRecurrence.
    /// - Returns: A AppointmentRecurrence object that describes when and how often the appointment occurs.
    public var recurrence: WindowsApplicationModelAppointments_AppointmentRecurrence {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Recurrence())
        }
    }

    /// Gets or sets the object that describes when and how often the appointment occurs. Recurrence is of type AppointmentRecurrence.
    /// - Returns: A AppointmentRecurrence object that describes when and how often the appointment occurs.
    public func recurrence(_ value: WindowsApplicationModelAppointments_AppointmentRecurrence?) throws {
        try _interop.put_Recurrence(value)
    }

    /// Gets or sets a time span value. The value declares the amount of time to subtract from the StartTime, and that time used as the issue time for a reminder for an appointment. A **null** value indicates that the appointment will not issue a reminder. Reminder is of type IReference(TimeSpan).
    /// - Returns: A time span value, or **null** to issue no reminder.
    public var reminder: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_Reminder()
        }
    }

    /// Gets or sets a time span value. The value declares the amount of time to subtract from the StartTime, and that time used as the issue time for a reminder for an appointment. A **null** value indicates that the appointment will not issue a reminder. Reminder is of type IReference(TimeSpan).
    /// - Returns: A time span value, or **null** to issue no reminder.
    public func reminder(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_Reminder(value)
    }

    /// Gets or sets a AppointmentSensitivity -typed value that indicates the sensitivity of the appointment.
    /// - Returns: A AppointmentSensitivity -typed value that indicates the sensitivity of the appointment.
    public var sensitivity: WindowsApplicationModelAppointments_AppointmentSensitivity {
        get throws {
            try _interop.get_Sensitivity()
        }
    }

    /// Gets or sets a AppointmentSensitivity -typed value that indicates the sensitivity of the appointment.
    /// - Returns: A AppointmentSensitivity -typed value that indicates the sensitivity of the appointment.
    public func sensitivity(_ value: WindowsApplicationModelAppointments_AppointmentSensitivity) throws {
        try _interop.put_Sensitivity(value)
    }

    /// Gets or sets the starting time for the appointment. StartTime is of type DateTime.
    /// - Returns: The date and time to use as the starting time for the appointment.
    public var startTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_StartTime()
        }
    }

    /// Gets or sets the starting time for the appointment. StartTime is of type DateTime.
    /// - Returns: The date and time to use as the starting time for the appointment.
    public func startTime(_ value: WindowsFoundation_DateTime) throws {
        try _interop.put_StartTime(value)
    }

    /// Gets or sets a string that communicates the subject of the appointment. Subject is of type String and a maximum of 255 characters in length.
    /// - Returns: The subject of the appointment.
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets or sets a string that communicates the subject of the appointment. Subject is of type String and a maximum of 255 characters in length.
    /// - Returns: The subject of the appointment.
    public func subject(_ value: Swift.String) throws {
        try _interop.put_Subject(value)
    }

    /// Gets the Uniform Resource Identifier (Uri ) for the appointment. Allows the Calendar app to perform an association launch to go back to the source app or other URI that represents this appointment.
    /// - Returns: The URI for the appointment.
    public var uri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Uri())
        }
    }

    /// Gets the Uniform Resource Identifier (Uri ) for the appointment. Allows the Calendar app to perform an association launch to go back to the source app or other URI that represents this appointment.
    /// - Returns: The URI for the appointment.
    public func uri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_Uri(value)
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointment2 members

    /// Gets or sets a value that indicates whether the appointment will allow users to propose a new time.
    /// - Returns: A Boolean value that indicates whether the appointment will allow users to propose a new time. **TRUE** indicates that the appointment does allow new time proposal; otherwise **FALSE**.
    public var allowNewTimeProposal: Swift.Bool {
        get throws {
            try _iappointment2.get_AllowNewTimeProposal()
        }
    }

    /// Gets or sets a value that indicates whether the appointment will allow users to propose a new time.
    /// - Returns: A Boolean value that indicates whether the appointment will allow users to propose a new time. **TRUE** indicates that the appointment does allow new time proposal; otherwise **FALSE**.
    public func allowNewTimeProposal(_ value: Swift.Bool) throws {
        try _iappointment2.put_AllowNewTimeProposal(value)
    }

    /// Gets the unique identifier for the calendar associated with the appointment.
    /// - Returns: The unique identifier for the calendar associated with the appointment.
    public var calendarId: Swift.String {
        get throws {
            try _iappointment2.get_CalendarId()
        }
    }

    /// Gets a value that indicates whether the appointment has invitees.
    /// - Returns: A value that indicates whether the appointment has invitees.
    public var hasInvitees: Swift.Bool {
        get throws {
            try _iappointment2.get_HasInvitees()
        }
    }

    /// Gets or sets a value that indicates whether the appointment has been cancelled.
    /// - Returns: A Boolean value that indicates whether the appointment has been cancelled. **TRUE** indicates that the appointment has been cancelled; otherwise **FALSE**.
    public var isCanceledMeeting: Swift.Bool {
        get throws {
            try _iappointment2.get_IsCanceledMeeting()
        }
    }

    /// Gets or sets a value that indicates whether the appointment has been cancelled.
    /// - Returns: A Boolean value that indicates whether the appointment has been cancelled. **TRUE** indicates that the appointment has been cancelled; otherwise **FALSE**.
    public func isCanceledMeeting(_ value: Swift.Bool) throws {
        try _iappointment2.put_IsCanceledMeeting(value)
    }

    /// Gets or sets a value that indicates whether the appointment was organized by the current user.
    /// - Returns: A Boolean value that indicates whether the appointment was organized by the current user **TRUE** indicates that the appointment was organized by the user; otherwise **FALSE**.
    public var isOrganizedByUser: Swift.Bool {
        get throws {
            try _iappointment2.get_IsOrganizedByUser()
        }
    }

    /// Gets or sets a value that indicates whether the appointment was organized by the current user.
    /// - Returns: A Boolean value that indicates whether the appointment was organized by the current user **TRUE** indicates that the appointment was organized by the user; otherwise **FALSE**.
    public func isOrganizedByUser(_ value: Swift.Bool) throws {
        try _iappointment2.put_IsOrganizedByUser(value)
    }

    /// Gets or sets a value that indicates whether a response to the appointment invitation is requested.
    /// - Returns: A Boolean value that indicates whether a response is requested. **TRUE** indicates that a response is requested; otherwise **FALSE**.
    public var isResponseRequested: Swift.Bool {
        get throws {
            try _iappointment2.get_IsResponseRequested()
        }
    }

    /// Gets or sets a value that indicates whether a response to the appointment invitation is requested.
    /// - Returns: A Boolean value that indicates whether a response is requested. **TRUE** indicates that a response is requested; otherwise **FALSE**.
    public func isResponseRequested(_ value: Swift.Bool) throws {
        try _iappointment2.put_IsResponseRequested(value)
    }

    /// Gets a string that uniquely identifies the appointment on the local device.
    /// - Returns: A string that uniquely identifies the appointment on the local device.
    public var localId: Swift.String {
        get throws {
            try _iappointment2.get_LocalId()
        }
    }

    /// Gets or sets a string value that is a URL used to join the online meeting for the appointment.
    /// - Returns: A string value that is a URL used to join the online meeting for the appointment.
    public var onlineMeetingLink: Swift.String {
        get throws {
            try _iappointment2.get_OnlineMeetingLink()
        }
    }

    /// Gets or sets a string value that is a URL used to join the online meeting for the appointment.
    /// - Returns: A string value that is a URL used to join the online meeting for the appointment.
    public func onlineMeetingLink(_ value: Swift.String) throws {
        try _iappointment2.put_OnlineMeetingLink(value)
    }

    /// Gets the original starting time for a recurring appointment.
    /// - Returns: The original starting time for a recurring appointment..
    public var originalStartTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _iappointment2.get_OriginalStartTime()
        }
    }

    /// Gets or sets the date and time that the user responded to the appointment request.
    /// - Returns: The date and time that the user responded to the appointment request.
    public var replyTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _iappointment2.get_ReplyTime()
        }
    }

    /// Gets or sets the date and time that the user responded to the appointment request.
    /// - Returns: The date and time that the user responded to the appointment request.
    public func replyTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _iappointment2.put_ReplyTime(value)
    }

    /// Gets or sets a string that uniquely identifies an appointment across devices.
    /// - Returns: A string that uniquely identifies an appointment across devices.
    public var roamingId: Swift.String {
        get throws {
            try _iappointment2.get_RoamingId()
        }
    }

    /// Gets or sets a string that uniquely identifies an appointment across devices.
    /// - Returns: A string that uniquely identifies an appointment across devices.
    public func roamingId(_ value: Swift.String) throws {
        try _iappointment2.put_RoamingId(value)
    }

    /// Gets or sets the user's response to the appointment request.
    /// - Returns: The user's response to the appointment request.
    public var userResponse: WindowsApplicationModelAppointments_AppointmentParticipantResponse {
        get throws {
            try _iappointment2.get_UserResponse()
        }
    }

    /// Gets or sets the user's response to the appointment request.
    /// - Returns: The user's response to the appointment request.
    public func userResponse(_ value: WindowsApplicationModelAppointments_AppointmentParticipantResponse) throws {
        try _iappointment2.put_UserResponse(value)
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointment3 members

    /// Gets the current change number of the local version of the Appointment.
    /// - Returns: The current change number of the local version of the Appointment.
    public var changeNumber: Swift.UInt64 {
        get throws {
            try _iappointment3.get_ChangeNumber()
        }
    }

    /// Gets or sets the type of appointment details, plain text or HTML.
    /// - Returns: The type of appointment details.
    public var detailsKind: WindowsApplicationModelAppointments_AppointmentDetailsKind {
        get throws {
            try _iappointment3.get_DetailsKind()
        }
    }

    /// Gets or sets the type of appointment details, plain text or HTML.
    /// - Returns: The type of appointment details.
    public func detailsKind(_ value: WindowsApplicationModelAppointments_AppointmentDetailsKind) throws {
        try _iappointment3.put_DetailsKind(value)
    }

    /// Gets or sets the current change number of the server version of the Appointment.
    /// - Returns: The current change number of the server version of the Appointment.
    public var remoteChangeNumber: Swift.UInt64 {
        get throws {
            try _iappointment3.get_RemoteChangeNumber()
        }
    }

    /// Gets or sets the current change number of the server version of the Appointment.
    /// - Returns: The current change number of the server version of the Appointment.
    public func remoteChangeNumber(_ value: Swift.UInt64) throws {
        try _iappointment3.put_RemoteChangeNumber(value)
    }

    // MARK: Implementation details

    private var _iappointment2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment2>? = nil

    internal var _iappointment2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment2> {
        get throws {
            try _iappointment2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment2.self)
            }
        }
    }

    private var _iappointment3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment3>? = nil

    internal var _iappointment3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment3> {
        get throws {
            try _iappointment3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointment3.self)
            }
        }
    }

    deinit {
        _iappointment2_storage?.release()
        _iappointment3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Appointments.Appointment", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}