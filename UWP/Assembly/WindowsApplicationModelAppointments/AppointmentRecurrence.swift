// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents when and how often an appointment occurs.
public final class WindowsApplicationModelAppointments_AppointmentRecurrence: WindowsRuntime.WinRTImport<WindowsApplicationModelAppointments_AppointmentRecurrenceProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelAppointments_AppointmentRecurrenceProjection.self))
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentRecurrence members

    /// Gets or sets the day on which an appointment occurs. Day is of type UInt32, has a default value of 1, and can be a value from 1 to 31.
    /// - Returns: The day on which an appointment occurs.
    public var day: Swift.UInt32 {
        get throws {
            try _interop.get_Day()
        }
    }

    /// Gets or sets the day on which an appointment occurs. Day is of type UInt32, has a default value of 1, and can be a value from 1 to 31.
    /// - Returns: The day on which an appointment occurs.
    public func day(_ value: Swift.UInt32) throws {
        try _interop.put_Day(value)
    }

    /// Gets or sets a combination of AppointmentDaysOfWeek -typed values for all the days of the week on which an appointment occurs.
    /// - Returns: A combination of AppointmentDaysOfWeek -typed values that are combined by using a bitwise OR operation. The resulting value specifies all the days of the week on which an appointment occurs.
    public var daysOfWeek: WindowsApplicationModelAppointments_AppointmentDaysOfWeek {
        get throws {
            try _interop.get_DaysOfWeek()
        }
    }

    /// Gets or sets a combination of AppointmentDaysOfWeek -typed values for all the days of the week on which an appointment occurs.
    /// - Returns: A combination of AppointmentDaysOfWeek -typed values that are combined by using a bitwise OR operation. The resulting value specifies all the days of the week on which an appointment occurs.
    public func daysOfWeek(_ value: WindowsApplicationModelAppointments_AppointmentDaysOfWeek) throws {
        try _interop.put_DaysOfWeek(value)
    }

    /// Gets or sets the interval between occurrences of an appointment. Interval is of type UInt32 and has a default value of 1. For daily, the interval is the number of days in between, for weekly, the number of weeks, and so on.
    /// - Returns: The interval on which an appointment occurs.
    public var interval: Swift.UInt32 {
        get throws {
            try _interop.get_Interval()
        }
    }

    /// Gets or sets the interval between occurrences of an appointment. Interval is of type UInt32 and has a default value of 1. For daily, the interval is the number of days in between, for weekly, the number of weeks, and so on.
    /// - Returns: The interval on which an appointment occurs.
    public func interval(_ value: Swift.UInt32) throws {
        try _interop.put_Interval(value)
    }

    /// Gets or sets the month on which an appointment occurs. Month is of type UInt32, has a default value of 1, and can be a value from 1 to 12.
    /// - Returns: The month on which an appointment occurs.
    public var month: Swift.UInt32 {
        get throws {
            try _interop.get_Month()
        }
    }

    /// Gets or sets the month on which an appointment occurs. Month is of type UInt32, has a default value of 1, and can be a value from 1 to 12.
    /// - Returns: The month on which an appointment occurs.
    public func month(_ value: Swift.UInt32) throws {
        try _interop.put_Month(value)
    }

    /// Gets or sets the number of times an appointment recurs. Occurrences is of type IReference(UInt32) and is **NULL** by default. Occurrences is mutually exclusive with Until.
    /// - Returns: The number of times an appointment recurs.
    public var occurrences: Swift.UInt32? {
        get throws {
            try _interop.get_Occurrences()
        }
    }

    /// Gets or sets the number of times an appointment recurs. Occurrences is of type IReference(UInt32) and is **NULL** by default. Occurrences is mutually exclusive with Until.
    /// - Returns: The number of times an appointment recurs.
    public func occurrences(_ value: Swift.UInt32?) throws {
        try _interop.put_Occurrences(value)
    }

    /// Gets or sets a AppointmentRecurrenceUnit -typed value that indicates the frequency for which the appointment occurs.
    /// - Returns: A AppointmentRecurrenceUnit -typed value that indicates the frequency for which the appointment occurs.
    public var unit: WindowsApplicationModelAppointments_AppointmentRecurrenceUnit {
        get throws {
            try _interop.get_Unit()
        }
    }

    /// Gets or sets a AppointmentRecurrenceUnit -typed value that indicates the frequency for which the appointment occurs.
    /// - Returns: A AppointmentRecurrenceUnit -typed value that indicates the frequency for which the appointment occurs.
    public func unit(_ value: WindowsApplicationModelAppointments_AppointmentRecurrenceUnit) throws {
        try _interop.put_Unit(value)
    }

    /// Gets or sets the date and time until which an appointment is valid. Until is of type IReference(DateTime) and is **NULL** by default. Until is mutually exclusive with Occurrences.
    /// - Returns: The date and time until which an appointment is valid.
    public var until: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_Until()
        }
    }

    /// Gets or sets the date and time until which an appointment is valid. Until is of type IReference(DateTime) and is **NULL** by default. Until is mutually exclusive with Occurrences.
    /// - Returns: The date and time until which an appointment is valid.
    public func until(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_Until(value)
    }

    /// Gets or sets a AppointmentWeekOfMonth -typed value that indicates the week of the month for which the appointment occurs. The first week is the default.
    /// - Returns: A AppointmentWeekOfMonth -typed value that indicates the week of the month for which the appointment occurs.
    public var weekOfMonth: WindowsApplicationModelAppointments_AppointmentWeekOfMonth {
        get throws {
            try _interop.get_WeekOfMonth()
        }
    }

    /// Gets or sets a AppointmentWeekOfMonth -typed value that indicates the week of the month for which the appointment occurs. The first week is the default.
    /// - Returns: A AppointmentWeekOfMonth -typed value that indicates the week of the month for which the appointment occurs.
    public func weekOfMonth(_ value: WindowsApplicationModelAppointments_AppointmentWeekOfMonth) throws {
        try _interop.put_WeekOfMonth(value)
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentRecurrence2 members

    /// Gets a value indicating what type of recurrence applies to the associated appointment.
    /// - Returns: A value indicating what type of recurrence applies to the associated appointment.
    public var recurrenceType: WindowsApplicationModelAppointments_RecurrenceType {
        get throws {
            try _iappointmentRecurrence2.get_RecurrenceType()
        }
    }

    /// Gets or sets the time zone for the recurrence.
    /// - Returns: The time zone for the recurrence.
    public var timeZone: Swift.String {
        get throws {
            try _iappointmentRecurrence2.get_TimeZone()
        }
    }

    /// Gets or sets the time zone for the recurrence.
    /// - Returns: The time zone for the recurrence.
    public func timeZone(_ value: Swift.String) throws {
        try _iappointmentRecurrence2.put_TimeZone(value)
    }

    // MARK: Windows.ApplicationModel.Appointments.IAppointmentRecurrence3 members

    /// Gets a string that identifies the type of the calendar as represented by CalendarIdentifiers.
    /// - Returns: A string that identifies the type of the calendar.
    public var calendarIdentifier: Swift.String {
        get throws {
            try _iappointmentRecurrence3.get_CalendarIdentifier()
        }
    }

    // MARK: Implementation details

    private var _iappointmentRecurrence2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence2>? = nil

    internal var _iappointmentRecurrence2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence2> {
        get throws {
            try _iappointmentRecurrence2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence2.self)
            }
        }
    }

    private var _iappointmentRecurrence3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence3>? = nil

    internal var _iappointmentRecurrence3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence3> {
        get throws {
            try _iappointmentRecurrence3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelAppointments_IAppointmentRecurrence3.self)
            }
        }
    }

    deinit {
        _iappointmentRecurrence2_storage?.release()
        _iappointmentRecurrence3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Appointments.AppointmentRecurrence", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}