// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents device settings for app sync relationships.
public final class WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountConfiguration: WindowsRuntime.WinRTImport<WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountConfigurationProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountConfigurationProjection.self))
    }

    // MARK: Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration members

    /// Gets or sets the name that identifies the device account.
    /// - Returns: The name that identifies the device account.
    public var accountName: Swift.String {
        get throws {
            try _interop.get_AccountName()
        }
    }

    /// Gets or sets the name that identifies the device account.
    /// - Returns: The name that identifies the device account.
    public func accountName(_ value: Swift.String) throws {
        try _interop.put_AccountName(value)
    }

    /// Gets or sets a Boolean value indicating if calendar syncing is enabled.
    /// - Returns: A Boolean value indicating if calendar syncing is enabled.
    public var calendarSyncEnabled: Swift.Bool {
        get throws {
            try _interop.get_CalendarSyncEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if calendar syncing is enabled.
    /// - Returns: A Boolean value indicating if calendar syncing is enabled.
    public func calendarSyncEnabled(_ value: Swift.Bool) throws {
        try _interop.put_CalendarSyncEnabled(value)
    }

    /// Gets or sets a Boolean value indicating if contacts syncing is enabled.
    /// - Returns: A Boolean value indicating if contacts syncing is enabled.
    public var contactsSyncEnabled: Swift.Bool {
        get throws {
            try _interop.get_ContactsSyncEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if contacts syncing is enabled.
    /// - Returns: A Boolean value indicating if contacts syncing is enabled.
    public func contactsSyncEnabled(_ value: Swift.Bool) throws {
        try _interop.put_ContactsSyncEnabled(value)
    }

    /// Gets or sets the value that identifies the device account type.
    /// - Returns: The value that identifies the device account type.
    public var deviceAccountTypeId: Swift.String {
        get throws {
            try _interop.get_DeviceAccountTypeId()
        }
    }

    /// Gets or sets the value that identifies the device account type.
    /// - Returns: The value that identifies the device account type.
    public func deviceAccountTypeId(_ value: Swift.String) throws {
        try _interop.put_DeviceAccountTypeId(value)
    }

    /// Gets or sets the network domain of the device.
    /// - Returns: The network domain of the device.
    public var domain: Swift.String {
        get throws {
            try _interop.get_Domain()
        }
    }

    /// Gets or sets the network domain of the device.
    /// - Returns: The network domain of the device.
    public func domain(_ value: Swift.String) throws {
        try _interop.put_Domain(value)
    }

    /// Gets or sets the email address of the current user.
    /// - Returns: The email address of the current user.
    public var emailAddress: Swift.String {
        get throws {
            try _interop.get_EmailAddress()
        }
    }

    /// Gets or sets the email address of the current user.
    /// - Returns: The email address of the current user.
    public func emailAddress(_ value: Swift.String) throws {
        try _interop.put_EmailAddress(value)
    }

    /// Gets or sets a Boolean value indicating if email syncing is enabled.
    /// - Returns: A Boolean value indicating if email syncing is enabled.
    public var emailSyncEnabled: Swift.Bool {
        get throws {
            try _interop.get_EmailSyncEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if email syncing is enabled.
    /// - Returns: A Boolean value indicating if email syncing is enabled.
    public func emailSyncEnabled(_ value: Swift.Bool) throws {
        try _interop.put_EmailSyncEnabled(value)
    }

    /// Gets or sets the incoming email server address.
    /// - Returns: The incoming email server address.
    public var incomingServerAddress: Swift.String {
        get throws {
            try _interop.get_IncomingServerAddress()
        }
    }

    /// Gets or sets the incoming email server address.
    /// - Returns: The incoming email server address.
    public func incomingServerAddress(_ value: Swift.String) throws {
        try _interop.put_IncomingServerAddress(value)
    }

    /// Gets or sets the port number to use to connect to the incoming email server.
    /// - Returns: The port number to use to connect to the incoming email server.
    public var incomingServerPort: Swift.Int32 {
        get throws {
            try _interop.get_IncomingServerPort()
        }
    }

    /// Gets or sets the port number to use to connect to the incoming email server.
    /// - Returns: The port number to use to connect to the incoming email server.
    public func incomingServerPort(_ value: Swift.Int32) throws {
        try _interop.put_IncomingServerPort(value)
    }

    /// Gets or sets a Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the incoming email server.
    /// - Returns: A Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the incoming email server.
    public var incomingServerRequiresSsl: Swift.Bool {
        get throws {
            try _interop.get_IncomingServerRequiresSsl()
        }
    }

    /// Gets or sets a Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the incoming email server.
    /// - Returns: A Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the incoming email server.
    public func incomingServerRequiresSsl(_ value: Swift.Bool) throws {
        try _interop.put_IncomingServerRequiresSsl(value)
    }

    /// Gets or sets the username to use when connecting to the incoming email server.
    /// - Returns: The username to use when connecting to the incoming email server.
    public var incomingServerUsername: Swift.String {
        get throws {
            try _interop.get_IncomingServerUsername()
        }
    }

    /// Gets or sets the username to use when connecting to the incoming email server.
    /// - Returns: The username to use when connecting to the incoming email server.
    public func incomingServerUsername(_ value: Swift.String) throws {
        try _interop.put_IncomingServerUsername(value)
    }

    /// Gets or sets the outgoing email server address.
    /// - Returns: The outgoing email server address.
    public var outgoingServerAddress: Swift.String {
        get throws {
            try _interop.get_OutgoingServerAddress()
        }
    }

    /// Gets or sets the outgoing email server address.
    /// - Returns: The outgoing email server address.
    public func outgoingServerAddress(_ value: Swift.String) throws {
        try _interop.put_OutgoingServerAddress(value)
    }

    /// Gets or sets the port number to use to connect to the outgoing email server.
    /// - Returns: The port number to use to connect to the outgoing email server.
    public var outgoingServerPort: Swift.Int32 {
        get throws {
            try _interop.get_OutgoingServerPort()
        }
    }

    /// Gets or sets the port number to use to connect to the outgoing email server.
    /// - Returns: The port number to use to connect to the outgoing email server.
    public func outgoingServerPort(_ value: Swift.Int32) throws {
        try _interop.put_OutgoingServerPort(value)
    }

    /// Gets or sets a Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the outgoing email server.
    /// - Returns: A Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the outgoing email server.
    public var outgoingServerRequiresSsl: Swift.Bool {
        get throws {
            try _interop.get_OutgoingServerRequiresSsl()
        }
    }

    /// Gets or sets a Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the outgoing email server.
    /// - Returns: A Boolean value indicating if Secure Sockets Layer (SSL) should be used when connecting to the outgoing email server.
    public func outgoingServerRequiresSsl(_ value: Swift.Bool) throws {
        try _interop.put_OutgoingServerRequiresSsl(value)
    }

    /// Gets or sets the username to use when connecting to the outgoing email server.
    /// - Returns: The username to use when connecting to the outgoing email server.
    public var outgoingServerUsername: Swift.String {
        get throws {
            try _interop.get_OutgoingServerUsername()
        }
    }

    /// Gets or sets the username to use when connecting to the outgoing email server.
    /// - Returns: The username to use when connecting to the outgoing email server.
    public func outgoingServerUsername(_ value: Swift.String) throws {
        try _interop.put_OutgoingServerUsername(value)
    }

    /// Gets or sets a value indicating the type of the server.
    /// - Returns: Enum value indicating the type of the server.
    public var serverType: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountServerType {
        get throws {
            try _interop.get_ServerType()
        }
    }

    /// Gets or sets a value indicating the type of the server.
    /// - Returns: Enum value indicating the type of the server.
    public func serverType(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountServerType) throws {
        try _interop.put_ServerType(value)
    }

    // MARK: Windows.ApplicationModel.UserDataAccounts.SystemAccess.IDeviceAccountConfiguration2 members

    /// Gets or sets the identifier for the device account icon.
    /// - Returns: The identifier for the device account icon.
    public var accountIconId: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountIconId {
        get throws {
            try _ideviceAccountConfiguration2.get_AccountIconId()
        }
    }

    /// Gets or sets the identifier for the device account icon.
    /// - Returns: The identifier for the device account icon.
    public func accountIconId(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountIconId) throws {
        try _ideviceAccountConfiguration2.put_AccountIconId(value)
    }

    /// Gets or sets a Boolean value indicating if the full email message should always be downloaded as opposed to only header information.
    /// - Returns: A Boolean value indicating if the full email message should always be downloaded.
    public var alwaysDownloadFullMessage: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_AlwaysDownloadFullMessage()
        }
    }

    /// Gets or sets a Boolean value indicating if the full email message should always be downloaded as opposed to only header information.
    /// - Returns: A Boolean value indicating if the full email message should always be downloaded.
    public func alwaysDownloadFullMessage(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_AlwaysDownloadFullMessage(value)
    }

    /// Gets or sets the identifier for the authentication certificate for this account.
    /// - Returns: The identifier for the authentication certificate for this account.
    public var authenticationCertificateId: Swift.String {
        get throws {
            try _ideviceAccountConfiguration2.get_AuthenticationCertificateId()
        }
    }

    /// Gets or sets the identifier for the authentication certificate for this account.
    /// - Returns: The identifier for the authentication certificate for this account.
    public func authenticationCertificateId(_ value: Swift.String) throws {
        try _ideviceAccountConfiguration2.put_AuthenticationCertificateId(value)
    }

    /// Gets or sets the DeviceAccountAuthenticationType for this account.
    /// - Returns: The DeviceAccountAuthenticationType for this account.
    public var authenticationType: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountAuthenticationType {
        get throws {
            try _ideviceAccountConfiguration2.get_AuthenticationType()
        }
    }

    /// Gets or sets the DeviceAccountAuthenticationType for this account.
    /// - Returns: The DeviceAccountAuthenticationType for this account.
    public func authenticationType(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountAuthenticationType) throws {
        try _ideviceAccountConfiguration2.put_AuthenticationType(value)
    }

    /// Gets or sets a Boolean value that indicates if the authentication certificate should be automatically selected.
    /// - Returns: A Boolean value that indicates if the authentication certificate should be automatically selected.
    public var autoSelectAuthenticationCertificate: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_AutoSelectAuthenticationCertificate()
        }
    }

    /// Gets or sets a Boolean value that indicates if the authentication certificate should be automatically selected.
    /// - Returns: A Boolean value that indicates if the authentication certificate should be automatically selected.
    public func autoSelectAuthenticationCertificate(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_AutoSelectAuthenticationCertificate(value)
    }

    /// Gets or sets a Boolean value that indicates if the CalDav server requires an SSL connection.
    /// - Returns: A Boolean value that indicates if the CalDav server requires an SSL connection.
    public var calDavRequiresSsl: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_CalDavRequiresSsl()
        }
    }

    /// Gets or sets a Boolean value that indicates if the CalDav server requires an SSL connection.
    /// - Returns: A Boolean value that indicates if the CalDav server requires an SSL connection.
    public func calDavRequiresSsl(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_CalDavRequiresSsl(value)
    }

    /// Gets or sets the address of the CalDav server.
    /// - Returns: The address of the CalDav server.
    public var calDavServerUrl: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ideviceAccountConfiguration2.get_CalDavServerUrl())
        }
    }

    /// Gets or sets the address of the CalDav server.
    /// - Returns: The address of the CalDav server.
    public func calDavServerUrl(_ value: WindowsFoundation_Uri?) throws {
        try _ideviceAccountConfiguration2.put_CalDavServerUrl(value)
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public var calDavSyncScheduleKind: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind {
        get throws {
            try _ideviceAccountConfiguration2.get_CalDavSyncScheduleKind()
        }
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public func calDavSyncScheduleKind(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind) throws {
        try _ideviceAccountConfiguration2.put_CalDavSyncScheduleKind(value)
    }

    /// Gets or sets a Boolean value that indicates if the CardDav server requires an SSL connection.
    /// - Returns: A Boolean value that indicates if the CardDav server requires an SSL connection.
    public var cardDavRequiresSsl: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_CardDavRequiresSsl()
        }
    }

    /// Gets or sets a Boolean value that indicates if the CardDav server requires an SSL connection.
    /// - Returns: A Boolean value that indicates if the CardDav server requires an SSL connection.
    public func cardDavRequiresSsl(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_CardDavRequiresSsl(value)
    }

    /// Gets or sets the address of the CardDav server.
    /// - Returns: The address of the CardDav server.
    public var cardDavServerUrl: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ideviceAccountConfiguration2.get_CardDavServerUrl())
        }
    }

    /// Gets or sets the address of the CardDav server.
    /// - Returns: The address of the CardDav server.
    public func cardDavServerUrl(_ value: WindowsFoundation_Uri?) throws {
        try _ideviceAccountConfiguration2.put_CardDavServerUrl(value)
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public var cardDavSyncScheduleKind: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind {
        get throws {
            try _ideviceAccountConfiguration2.get_CardDavSyncScheduleKind()
        }
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public func cardDavSyncScheduleKind(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind) throws {
        try _ideviceAccountConfiguration2.put_CardDavSyncScheduleKind(value)
    }

    /// Gets a Boolean value that indicates if this device is allowed to sync with the email server.
    /// - Returns: A Boolean value that indicates if this device is allowed to sync with the email server.
    public var doesPolicyAllowMailSync: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_DoesPolicyAllowMailSync()
        }
    }

    /// Gets or sets the incoming mail server's encryption certificate hash.
    /// - Returns: The incoming mail server's encryption certificate hash.
    public var incomingServerCertificateHash: Swift.String {
        get throws {
            try _ideviceAccountConfiguration2.get_IncomingServerCertificateHash()
        }
    }

    /// Gets or sets the incoming mail server's encryption certificate hash.
    /// - Returns: The incoming mail server's encryption certificate hash.
    public func incomingServerCertificateHash(_ value: Swift.String) throws {
        try _ideviceAccountConfiguration2.put_IncomingServerCertificateHash(value)
    }

    /// Gets or sets the incoming mail server's password.
    /// - Returns: The incoming mail server's password.
    public var incomingServerCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ideviceAccountConfiguration2.get_IncomingServerCredential())
        }
    }

    /// Gets or sets the incoming mail server's password.
    /// - Returns: The incoming mail server's password.
    public func incomingServerCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ideviceAccountConfiguration2.put_IncomingServerCredential(value)
    }

    /// Gets or sets a Boolean value indicating if a client authentication certificate is required by the server.
    /// - Returns: A Boolean value indicating if a client authentication certificate is required by the server.
    public var isClientAuthenticationCertificateRequired: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsClientAuthenticationCertificateRequired()
        }
    }

    /// Gets or sets a Boolean value indicating if a client authentication certificate is required by the server.
    /// - Returns: A Boolean value indicating if a client authentication certificate is required by the server.
    public func isClientAuthenticationCertificateRequired(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_IsClientAuthenticationCertificateRequired(value)
    }

    /// Gets or sets a Boolean value that indicates if the device account is managed outside the organization.
    /// - Returns: A Boolean value that indicates if the device account is managed outside the organization.
    public var isExternallyManaged: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsExternallyManaged()
        }
    }

    /// Gets or sets a Boolean value that indicates if the device account is managed outside the organization.
    /// - Returns: A Boolean value that indicates if the device account is managed outside the organization.
    public func isExternallyManaged(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_IsExternallyManaged(value)
    }

    /// Gets or sets a Boolean value indicating if authentication is enabled for the outgoing mail server.
    /// - Returns: A Boolean value indicating if authentication is enabled for the outgoing mail server.
    public var isOutgoingServerAuthenticationEnabled: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsOutgoingServerAuthenticationEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if authentication is enabled for the outgoing mail server.
    /// - Returns: A Boolean value indicating if authentication is enabled for the outgoing mail server.
    public func isOutgoingServerAuthenticationEnabled(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_IsOutgoingServerAuthenticationEnabled(value)
    }

    /// Gets or sets a Boolean value indicating if authentication is required by the outgoing mail server.
    /// - Returns: A Boolean value indicating if authentication is required by the outgoing mail server.
    public var isOutgoingServerAuthenticationRequired: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsOutgoingServerAuthenticationRequired()
        }
    }

    /// Gets or sets a Boolean value indicating if authentication is required by the outgoing mail server.
    /// - Returns: A Boolean value indicating if authentication is required by the outgoing mail server.
    public func isOutgoingServerAuthenticationRequired(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_IsOutgoingServerAuthenticationRequired(value)
    }

    /// Gets or sets a Boolean value indicating if single sign on (SSO) authentication is supported by the server.
    /// - Returns: A Boolean value indicating if single sign on (SSO) authentication is supported by the server.
    public var isSsoAuthenticationSupported: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsSsoAuthenticationSupported()
        }
    }

    /// Gets a Boolean value that indicates if the sync schedule is managed by the system as opposed to the app.
    /// - Returns: A Boolean value that indicates if the sync schedule is managed by the system as opposed to the app.
    public var isSyncScheduleManagedBySystem: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_IsSyncScheduleManagedBySystem()
        }
    }

    /// Gets a Boolean value that indicates if the sync schedule is managed by the system as opposed to the app.
    /// - Returns: A Boolean value that indicates if the sync schedule is managed by the system as opposed to the app.
    public func isSyncScheduleManagedBySystem(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_IsSyncScheduleManagedBySystem(value)
    }

    /// Gets or sets an enum value that indicates how many days of email to keep on the client.
    /// - Returns: An enum value that indicates how many days of email to keep on the client.
    public var mailAgeFilter: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountMailAgeFilter {
        get throws {
            try _ideviceAccountConfiguration2.get_MailAgeFilter()
        }
    }

    /// Gets or sets an enum value that indicates how many days of email to keep on the client.
    /// - Returns: An enum value that indicates how many days of email to keep on the client.
    public func mailAgeFilter(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountMailAgeFilter) throws {
        try _ideviceAccountConfiguration2.put_MailAgeFilter(value)
    }

    /// Gets or sets the OAuth refresh token used to create a new access token.
    /// - Returns: The OAuth refresh token used to create a new access token.
    public var oauthRefreshToken: Swift.String {
        get throws {
            try _ideviceAccountConfiguration2.get_OAuthRefreshToken()
        }
    }

    /// Gets or sets the OAuth refresh token used to create a new access token.
    /// - Returns: The OAuth refresh token used to create a new access token.
    public func oauthRefreshToken(_ value: Swift.String) throws {
        try _ideviceAccountConfiguration2.put_OAuthRefreshToken(value)
    }

    /// Gets or sets the outgoing mail server's encryption certificate hash.
    /// - Returns: The outgoing mail server's encryption certificate hash.
    public var outgoingServerCertificateHash: Swift.String {
        get throws {
            try _ideviceAccountConfiguration2.get_OutgoingServerCertificateHash()
        }
    }

    /// Gets or sets the outgoing mail server's encryption certificate hash.
    /// - Returns: The outgoing mail server's encryption certificate hash.
    public func outgoingServerCertificateHash(_ value: Swift.String) throws {
        try _ideviceAccountConfiguration2.put_OutgoingServerCertificateHash(value)
    }

    /// Gets or sets the outgoing mail server's password.
    /// - Returns: The outgoing mail server's password.
    public var outgoingServerCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ideviceAccountConfiguration2.get_OutgoingServerCredential())
        }
    }

    /// Gets or sets the outgoing mail server's password.
    /// - Returns: The outgoing mail server's password.
    public func outgoingServerCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ideviceAccountConfiguration2.put_OutgoingServerCredential(value)
    }

    /// Gets or sets the single sign on account ID.
    /// - Returns: The single sign on account ID.
    public var ssoAccountId: Swift.String {
        get throws {
            try _ideviceAccountConfiguration2.get_SsoAccountId()
        }
    }

    /// Gets or sets the single sign on account ID.
    /// - Returns: The single sign on account ID.
    public func ssoAccountId(_ value: Swift.String) throws {
        try _ideviceAccountConfiguration2.put_SsoAccountId(value)
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public var syncScheduleKind: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind {
        get throws {
            try _ideviceAccountConfiguration2.get_SyncScheduleKind()
        }
    }

    /// Gets or sets an enum value that specifies how often the account is synced.
    /// - Returns: An enum value that specifies how often the account is synced.
    public func syncScheduleKind(_ value: WindowsApplicationModelUserDataAccountsSystemAccess_DeviceAccountSyncScheduleKind) throws {
        try _ideviceAccountConfiguration2.put_SyncScheduleKind(value)
    }

    /// Gets or sets a Boolean value indicating if the incoming server's certificate hash has been confirmed.
    /// - Returns: A Boolean value indicating if the incoming server's certificate hash has been confirmed.
    public var wasIncomingServerCertificateHashConfirmed: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_WasIncomingServerCertificateHashConfirmed()
        }
    }

    /// Gets or sets a Boolean value indicating if the incoming server's certificate hash has been confirmed.
    /// - Returns: A Boolean value indicating if the incoming server's certificate hash has been confirmed.
    public func wasIncomingServerCertificateHashConfirmed(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_WasIncomingServerCertificateHashConfirmed(value)
    }

    /// Gets or sets a Boolean value that indicates if the account has been modified by the user.
    /// - Returns: A Boolean value that indicates if the account has been modified by the user.
    public var wasModifiedByUser: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_WasModifiedByUser()
        }
    }

    /// Gets or sets a Boolean value that indicates if the account has been modified by the user.
    /// - Returns: A Boolean value that indicates if the account has been modified by the user.
    public func wasModifiedByUser(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_WasModifiedByUser(value)
    }

    /// Gets or sets a Boolean value indicating if the outgoing server's certificate hash has been confirmed.
    /// - Returns: A Boolean value indicating if the outgoing server's certificate hash has been confirmed.
    public var wasOutgoingServerCertificateHashConfirmed: Swift.Bool {
        get throws {
            try _ideviceAccountConfiguration2.get_WasOutgoingServerCertificateHashConfirmed()
        }
    }

    /// Gets or sets a Boolean value indicating if the outgoing server's certificate hash has been confirmed.
    /// - Returns: A Boolean value indicating if the outgoing server's certificate hash has been confirmed.
    public func wasOutgoingServerCertificateHashConfirmed(_ value: Swift.Bool) throws {
        try _ideviceAccountConfiguration2.put_WasOutgoingServerCertificateHashConfirmed(value)
    }

    // MARK: Implementation details

    private var _ideviceAccountConfiguration2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelUserDataAccountsSystemAccess_IDeviceAccountConfiguration2>? = nil

    internal var _ideviceAccountConfiguration2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelUserDataAccountsSystemAccess_IDeviceAccountConfiguration2> {
        get throws {
            try _ideviceAccountConfiguration2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelUserDataAccountsSystemAccess_IDeviceAccountConfiguration2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelUserDataAccountsSystemAccess_IDeviceAccountConfiguration2.self)
            }
        }
    }

    deinit {
        _ideviceAccountConfiguration2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.UserDataAccounts.SystemAccess.DeviceAccountConfiguration", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}