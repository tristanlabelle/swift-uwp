// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a property set, which is a set of PropertyValue objects with string keys.
public final class WindowsFoundationCollections_PropertySet: WindowsRuntime.WinRTImport<WindowsFoundationCollections_PropertySetProjection>, WindowsFoundationCollections_IPropertySetProtocol, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsFoundationCollections_PropertySetProjection.self))
    }

    // MARK: Windows.Foundation.Collections.IObservableMap`2<String, Object> members

    /// Occurs when the observable map has changed.
    public func mapChanged(adding vhnd: WindowsFoundationCollections_MapChangedEventHandler<Swift.String, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iobservableMap.add_MapChanged(vhnd)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapChanged)
    }

    public func mapChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iobservableMap.remove_MapChanged(token)
    }

    // MARK: Windows.Foundation.Collections.IMap`2<String, Object> members

    /// Gets the number of items contained in the property set.
    /// - Returns: The number of items in the property set.
    public var size: Swift.UInt32 {
        get throws {
            try _imap.get_Size()
        }
    }

    /// Retrieves the value for the specified key.
    /// - Parameter key: The key.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        try _imap.lookup(key)
    }

    /// Indicates whether the property set has an item with the specified key.
    /// - Parameter key: The key.
    /// - Returns: True if the property set has an item with the specified key; otherwise, false.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _imap.hasKey(key)
    }

    /// Gets an immutable view of the property set.
    /// - Returns: The immutable view.
    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?> {
        try COM.NullResult.unwrap(_imap.getView())
    }

    /// Adds an item to the property set.
    /// - Parameter key: The key to insert.
    /// - Parameter value: The value to insert.
    /// - Returns: True if the method replaces a value that already exists for the key; false if this is a new key.
    public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        try _imap.insert(key, value)
    }

    /// Removes an item from the property set.
    /// - Parameter key: The key.
    public func remove(_ key: Swift.String) throws {
        try _imap.remove(key)
    }

    /// Removes all items from the property set.
    public func clear() throws {
        try _imap.clear()
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>> members

    /// Returns an iterator to enumerate the items in the property set.
    /// - Returns: The iterator. The current position of the iterator is index 0, or the end of the property set if the property set is empty.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _iobservableMap_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IObservableMap_String_Object>? = nil

    internal var _iobservableMap: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IObservableMap_String_Object> {
        get throws {
            try _iobservableMap_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IObservableMap_String_Object.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IObservableMap_String_Object.self)
            }
        }
    }

    private var _imap_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_String_Object>? = nil

    internal var _imap: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_String_Object> {
        get throws {
            try _imap_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IMap_String_Object.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IMap_String_Object.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_Object>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_Object> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_Object.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_Object.self)
            }
        }
    }

    deinit {
        _iobservableMap_storage?.release()
        _imap_storage?.release()
        _iiterable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Collections.PropertySet", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}