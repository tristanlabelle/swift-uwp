// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines a type used to manage CoreWindow.SizeChanged events. This type is used by frameworks (such as XAML) or apps that implement their own IFrameWorkView to synchronize the handover between shell drawn placholder (such as a splash screen) and the apps first drawn frame, so that there is no gap in the transition from one to the other. If your app does not implement the IFrameWorkView itself you should not participate in this synchronization as the framwork will do it for you.
public final class WindowsUICore_CoreWindowResizeManager: WindowsRuntime.WinRTImport<WindowsUICore_CoreWindowResizeManagerProjection> {
    // MARK: Windows.UI.Core.ICoreWindowResizeManager members

    /// Notifies the parent CoreWindow object that the new layout has completed.
    public func notifyLayoutCompleted() throws {
        try _interop.notifyLayoutCompleted()
    }

    // MARK: Windows.UI.Core.ICoreWindowResizeManagerLayoutCapability members

    /// Gets or sets whether the caller should wait for the new layout to complete.
    /// - Returns: **true** if the caller should wait for the new layout to complete; **false** if it should not.
    public var shouldWaitForLayoutCompletion: Swift.Bool {
        get throws {
            try _icoreWindowResizeManagerLayoutCapability.get_ShouldWaitForLayoutCompletion()
        }
    }

    /// Gets or sets whether the caller should wait for the new layout to complete.
    /// - Returns: **true** if the caller should wait for the new layout to complete; **false** if it should not.
    public func shouldWaitForLayoutCompletion(_ value: Swift.Bool) throws {
        try _icoreWindowResizeManagerLayoutCapability.put_ShouldWaitForLayoutCompletion(value)
    }

    // MARK: Windows.UI.Core.ICoreWindowResizeManagerStatics members

    /// Gets an instance of CoreWindowResizeManager for the running app's current CoreWindow.
    /// - Returns: An instance of CoreWindowResizeManager for the running app's current CoreWindow.
    public static func getForCurrentView() throws -> WindowsUICore_CoreWindowResizeManager {
        try COM.NullResult.unwrap(_icoreWindowResizeManagerStatics.getForCurrentView())
    }

    // MARK: Implementation details

    private var _icoreWindowResizeManagerLayoutCapability_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerLayoutCapability>? = nil

    internal var _icoreWindowResizeManagerLayoutCapability: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerLayoutCapability> {
        get throws {
            try _icoreWindowResizeManagerLayoutCapability_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerLayoutCapability.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerLayoutCapability.self)
            }
        }
    }

    deinit {
        _icoreWindowResizeManagerLayoutCapability_storage?.release()
    }

    private static var _icoreWindowResizeManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerStatics>? = nil

    internal static var _icoreWindowResizeManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerStatics> {
        get throws {
            try _icoreWindowResizeManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Core.CoreWindowResizeManager", id: CWinRT.SWRT_WindowsUICore_ICoreWindowResizeManagerStatics.iid)
            }
        }
    }
}