// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the arguments returned by the event raised when a character is received by the input queue.
public final class WindowsUICore_CharacterReceivedEventArgs: WindowsRuntime.WinRTImport<WindowsUICore_CharacterReceivedEventArgsProjection>, WindowsUICore_ICoreWindowEventArgsProtocol {
    // MARK: Windows.UI.Core.ICharacterReceivedEventArgs members

    /// Gets the key code of the character received by the input queue.
    /// - Returns: The character in UTF-32 encoding.
    public var keyCode: Swift.UInt32 {
        get throws {
            try _interop.get_KeyCode()
        }
    }

    /// Gets the status of the physical key press that raised the character-received event.
    /// - Returns: The status of the key that was pressed.
    public var keyStatus: WindowsUICore_CorePhysicalKeyStatus {
        get throws {
            try _interop.get_KeyStatus()
        }
    }

    // MARK: Windows.UI.Core.ICoreWindowEventArgs members

    /// Gets or sets whether the character-received event was handled or not.
    /// - Returns: True if the character received event has been handled; false if it has not.
    public var handled: Swift.Bool {
        get throws {
            try _icoreWindowEventArgs.get_Handled()
        }
    }

    /// Gets or sets whether the character-received event was handled or not.
    /// - Returns: True if the character received event has been handled; false if it has not.
    public func handled(_ value: Swift.Bool) throws {
        try _icoreWindowEventArgs.put_Handled(value)
    }

    // MARK: Implementation details

    private var _icoreWindowEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs>? = nil

    internal var _icoreWindowEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs> {
        get throws {
            try _icoreWindowEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs.self)
            }
        }
    }

    deinit {
        _icoreWindowEventArgs_storage?.release()
    }
}