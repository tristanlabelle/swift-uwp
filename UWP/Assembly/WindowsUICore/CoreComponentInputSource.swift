// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a mechanism to receive input for a XAML framework element hosted in another framework, such as a DirectX interop framework.
public final class WindowsUICore_CoreComponentInputSource: WindowsRuntime.WinRTImport<WindowsUICore_CoreComponentInputSourceProjection>, WindowsUICore_ICoreInputSourceBaseProtocol, WindowsUICore_ICorePointerInputSourceProtocol, WindowsUICore_ICorePointerInputSource2Protocol {
    // MARK: Windows.UI.Core.ICoreInputSourceBase members

    /// Gets the input event dispatcher for the hosted XAML framework element.
    /// - Returns: The CoreDispatcher for the hosted XAML framework element.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Dispatcher())
        }
    }

    /// Gets or sets whether input is enabled for the hosted XAML framework element.
    /// - Returns: **true** if input is enabled; **false** if it is not.
    public var isInputEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsInputEnabled()
        }
    }

    /// Gets or sets whether input is enabled for the hosted XAML framework element.
    /// - Returns: **true** if input is enabled; **false** if it is not.
    public func isInputEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsInputEnabled(value)
    }

    /// Raised when the hosted XAML control is enabled for input.
    public func inputEnabled(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_InputEnabledEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_InputEnabled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: inputEnabled)
    }

    public func inputEnabled(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_InputEnabled(cookie)
    }

    // MARK: Windows.UI.Core.ICorePointerInputSource members

    /// Indicates whether the input device supports input capture.
    /// - Returns: **true** if the input device supports capture (recording of input data); **false** if it does not.
    public var hasCapture: Swift.Bool {
        get throws {
            try _icorePointerInputSource.get_HasCapture()
        }
    }

    /// Gets the pointer cursor behavior for interactions with the hosted XAML framework element.
    /// - Returns: The pointer cursor object.
    public var pointerCursor: WindowsUICore_CoreCursor {
        get throws {
            try COM.NullResult.unwrap(_icorePointerInputSource.get_PointerCursor())
        }
    }

    /// Gets the pointer cursor behavior for interactions with the hosted XAML framework element.
    /// - Returns: The pointer cursor object.
    public func pointerCursor(_ value: WindowsUICore_CoreCursor?) throws {
        try _icorePointerInputSource.put_PointerCursor(value)
    }

    /// Gets the current pointer position in the hosted XAML framework.
    /// - Returns: The current pointer position.
    public var pointerPosition: WindowsFoundation_Point {
        get throws {
            try _icorePointerInputSource.get_PointerPosition()
        }
    }

    /// Raised when the pointer input capture stream is lost.
    public func pointerCaptureLost(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerCaptureLost(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerCaptureLost)
    }

    public func pointerCaptureLost(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerCaptureLost(cookie)
    }

    /// Raised when the pointer enters the hosted XAML element.
    public func pointerEntered(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerEntered)
    }

    public func pointerEntered(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerEntered(cookie)
    }

    /// Raised when the pointer exits the hosted XAML element.
    public func pointerExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerExited)
    }

    public func pointerExited(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerExited(cookie)
    }

    /// Raised when the pointer is moved for the active hosted XAML element.
    public func pointerMoved(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerMoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerMoved)
    }

    public func pointerMoved(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerMoved(cookie)
    }

    /// Raised when the pointer is "pressed" (such as a mouse button click or full screen press) for the active hosted XAML element.
    public func pointerPressed(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerPressed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerPressed)
    }

    public func pointerPressed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerPressed(cookie)
    }

    /// Raised when the pointer is released (such as when a mouse button click or screen press is released) for the active hosted XAML element.
    public func pointerReleased(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerReleased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerReleased)
    }

    public func pointerReleased(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerReleased(cookie)
    }

    /// Raised when the mouse wheel is rotated for the active hosted XAML element.
    public func pointerWheelChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerInputSource.add_PointerWheelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerWheelChanged)
    }

    public func pointerWheelChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerInputSource.remove_PointerWheelChanged(cookie)
    }

    /// Stops the capture of pointer input data (if the pointing device supports input capture).
    public func releasePointerCapture() throws {
        try _icorePointerInputSource.releasePointerCapture()
    }

    /// Starts the capture of pointer input data (if the pointing device supports input capture).
    public func setPointerCapture() throws {
        try _icorePointerInputSource.setPointerCapture()
    }

    // MARK: Windows.UI.Core.ICoreKeyboardInputSource members

    /// Raised when a character is received (such as from a completed key press sequence) by the hosted XAML element.
    public func characterReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_CharacterReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreKeyboardInputSource.add_CharacterReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: characterReceived)
    }

    public func characterReceived(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreKeyboardInputSource.remove_CharacterReceived(cookie)
    }

    /// Raised when a key is pressed for the current active hosted XAML element.
    public func keyDown(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_KeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreKeyboardInputSource.add_KeyDown(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyDown)
    }

    public func keyDown(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreKeyboardInputSource.remove_KeyDown(cookie)
    }

    /// Raised when a key press is released for the current active hosted XAML element.
    public func keyUp(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_KeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreKeyboardInputSource.add_KeyUp(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyUp)
    }

    public func keyUp(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreKeyboardInputSource.remove_KeyUp(cookie)
    }

    /// Gets the current status of a virtual key press.
    /// - Parameter virtualKey: The key from which to retrieve status.
    /// - Returns: The flags indicating the current state of the supplied virtual key when the input event fired.
    public func getCurrentKeyState(_ virtualKey: WindowsSystem_VirtualKey) throws -> WindowsUICore_CoreVirtualKeyStates {
        try _icoreKeyboardInputSource.getCurrentKeyState(virtualKey)
    }

    // MARK: Windows.UI.Core.ICoreComponentFocusable members

    /// Gets whether the current hosted XAML control element has focus. If it does, keyboard input is delivered to that control.
    /// - Returns: **true** if the element has focus; **false** if it does not.
    public var hasFocus: Swift.Bool {
        get throws {
            try _icoreComponentFocusable.get_HasFocus()
        }
    }

    /// Raised when a hosted XAML element gets focus.
    public func gotFocus(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_CoreWindowEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreComponentFocusable.add_GotFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gotFocus)
    }

    public func gotFocus(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreComponentFocusable.remove_GotFocus(cookie)
    }

    /// Raised when a hosted XAML element loses focus.
    public func lostFocus(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_CoreWindowEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreComponentFocusable.add_LostFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: lostFocus)
    }

    public func lostFocus(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreComponentFocusable.remove_LostFocus(cookie)
    }

    // MARK: Windows.UI.Core.ICoreTouchHitTesting members

    /// Raised for a touch hit test on a hosted XAML element.
    public func touchHitTesting(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUICore_TouchHitTestingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreTouchHitTesting.add_TouchHitTesting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: touchHitTesting)
    }

    public func touchHitTesting(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreTouchHitTesting.remove_TouchHitTesting(cookie)
    }

    // MARK: Windows.UI.Core.ICoreClosestInteractiveBoundsRequested members

    /// Occurs when a framework input manager requests the bounding rectangle of an interactive element within a specific bounding rectangle and closest to a specific pointer.
    public func closestInteractiveBoundsRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreComponentInputSource?, WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreClosestInteractiveBoundsRequested.add_ClosestInteractiveBoundsRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closestInteractiveBoundsRequested)
    }

    public func closestInteractiveBoundsRequested(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreClosestInteractiveBoundsRequested.remove_ClosestInteractiveBoundsRequested(cookie)
    }

    // MARK: Windows.UI.Core.ICoreKeyboardInputSource2 members

    /// Retrieves the unique ID for the input device that generated this key event.
    /// - Returns: A unique identifier for the input device associated with the key event, or an empty string. The same device can be assigned a different ID each time it is connected.
    public func getCurrentKeyEventDeviceId() throws -> Swift.String {
        try _icoreKeyboardInputSource2.getCurrentKeyEventDeviceId()
    }

    // MARK: Windows.UI.Core.ICorePointerInputSource2 members

    /// Gets the DispatcherQueue associated with this CoreComponentInputSource.
    /// - Returns: The DispatcherQueue for managing prioritized tasks that execute in a serial fashion on a thread.
    public var dispatcherQueue: WindowsSystem_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_icorePointerInputSource2.get_DispatcherQueue())
        }
    }

    // MARK: Implementation details

    private var _icorePointerInputSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerInputSource>? = nil

    internal var _icorePointerInputSource: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerInputSource> {
        get throws {
            try _icorePointerInputSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICorePointerInputSource.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICorePointerInputSource.self)
            }
        }
    }

    private var _icoreKeyboardInputSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource>? = nil

    internal var _icoreKeyboardInputSource: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource> {
        get throws {
            try _icoreKeyboardInputSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource.self)
            }
        }
    }

    private var _icoreComponentFocusable_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreComponentFocusable>? = nil

    internal var _icoreComponentFocusable: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreComponentFocusable> {
        get throws {
            try _icoreComponentFocusable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreComponentFocusable.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreComponentFocusable.self)
            }
        }
    }

    private var _icoreTouchHitTesting_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreTouchHitTesting>? = nil

    internal var _icoreTouchHitTesting: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreTouchHitTesting> {
        get throws {
            try _icoreTouchHitTesting_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreTouchHitTesting.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreTouchHitTesting.self)
            }
        }
    }

    private var _icoreClosestInteractiveBoundsRequested_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreClosestInteractiveBoundsRequested>? = nil

    internal var _icoreClosestInteractiveBoundsRequested: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreClosestInteractiveBoundsRequested> {
        get throws {
            try _icoreClosestInteractiveBoundsRequested_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreClosestInteractiveBoundsRequested.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreClosestInteractiveBoundsRequested.self)
            }
        }
    }

    private var _icoreKeyboardInputSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource2>? = nil

    internal var _icoreKeyboardInputSource2: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource2> {
        get throws {
            try _icoreKeyboardInputSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource2.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreKeyboardInputSource2.self)
            }
        }
    }

    private var _icorePointerInputSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerInputSource2>? = nil

    internal var _icorePointerInputSource2: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerInputSource2> {
        get throws {
            try _icorePointerInputSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICorePointerInputSource2.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICorePointerInputSource2.self)
            }
        }
    }

    deinit {
        _icorePointerInputSource_storage?.release()
        _icoreKeyboardInputSource_storage?.release()
        _icoreComponentFocusable_storage?.release()
        _icoreTouchHitTesting_storage?.release()
        _icoreClosestInteractiveBoundsRequested_storage?.release()
        _icoreKeyboardInputSource2_storage?.release()
        _icorePointerInputSource2_storage?.release()
    }
}