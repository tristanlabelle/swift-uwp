// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the arguments returned by an automation provider request event callback.
public final class WindowsUICore_AutomationProviderRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsUICore_AutomationProviderRequestedEventArgsProjection>, WindowsUICore_ICoreWindowEventArgsProtocol {
    // MARK: Windows.UI.Core.IAutomationProviderRequestedEventArgs members

    /// Gets or sets the automation provider object returned by the request event callback.
    /// - Returns: The automation provider object returned by the callback.
    public var automationProvider: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AutomationProvider())
        }
    }

    /// Gets or sets the automation provider object returned by the request event callback.
    /// - Returns: The automation provider object returned by the callback.
    public func automationProvider(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_AutomationProvider(value)
    }

    // MARK: Windows.UI.Core.ICoreWindowEventArgs members

    /// Gets or sets whether the automation provider request event has been handled.
    /// - Returns: True if the automation provider request event has been handled; false if it has not.
    public var handled: Swift.Bool {
        get throws {
            try _icoreWindowEventArgs.get_Handled()
        }
    }

    /// Gets or sets whether the automation provider request event has been handled.
    /// - Returns: True if the automation provider request event has been handled; false if it has not.
    public func handled(_ value: Swift.Bool) throws {
        try _icoreWindowEventArgs.put_Handled(value)
    }

    // MARK: Implementation details

    private var _icoreWindowEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs>? = nil

    internal var _icoreWindowEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs> {
        get throws {
            try _icoreWindowEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindowEventArgs.self)
            }
        }
    }

    deinit {
        _icoreWindowEventArgs_storage?.release()
    }
}