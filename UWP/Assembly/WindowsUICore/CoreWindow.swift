// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the UWP app with input events and basic user interface behaviors.
public final class WindowsUICore_CoreWindow: WindowsRuntime.WinRTImport<WindowsUICore_CoreWindowProjection>, WindowsUICore_ICoreWindowProtocol, WindowsUICore_ICorePointerRedirectorProtocol {
    // MARK: Windows.UI.Core.ICoreWindow members

    /// Gets the automation provider assigned to this window.
    /// - Returns: The automation provider for this window.
    public var automationHostProvider: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AutomationHostProvider())
        }
    }

    /// Gets the bounding rectangle of the window.
    /// - Returns: The bounding rectangle of the window, in device-independent pixels (DIPs).
    public var bounds: WindowsFoundation_Rect {
        get throws {
            try _interop.get_Bounds()
        }
    }

    /// Gets the set of custom properties for the window.
    /// - Returns: The set of custom properties for the window, represented as tuples.
    public var customProperties: WindowsFoundationCollections_IPropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CustomProperties())
        }
    }

    /// Gets the event dispatcher for the window.
    /// - Returns: The event dispatcher for the window.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Dispatcher())
        }
    }

    /// Gets or sets the horizontal origin of the window's reading order alignment. If the language specified by the user interface is right-aligned (such as in Arabic or Hebrew), the horizontal origin of the reading layout for the window is on the right edge.
    /// - Returns: The flow direction of the window's reading layout.
    public var flowDirection: WindowsUICore_CoreWindowFlowDirection {
        get throws {
            try _interop.get_FlowDirection()
        }
    }

    /// Gets or sets the horizontal origin of the window's reading order alignment. If the language specified by the user interface is right-aligned (such as in Arabic or Hebrew), the horizontal origin of the reading layout for the window is on the right edge.
    /// - Returns: The flow direction of the window's reading layout.
    public func flowDirection(_ value: WindowsUICore_CoreWindowFlowDirection) throws {
        try _interop.put_FlowDirection(value)
    }

    /// Gets or sets a value that indicates whether input is enabled for the app.
    /// - Returns: True if input is enabled for the app; false if it is disabled.
    public var isInputEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsInputEnabled()
        }
    }

    /// Gets or sets a value that indicates whether input is enabled for the app.
    /// - Returns: True if input is enabled for the app; false if it is disabled.
    public func isInputEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsInputEnabled(value)
    }

    /// Gets or sets the cursor used by the app.
    /// - Returns: The app's cursor.
    public var pointerCursor: WindowsUICore_CoreCursor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PointerCursor())
        }
    }

    /// Gets or sets the cursor used by the app.
    /// - Returns: The app's cursor.
    public func pointerCursor(_ value: WindowsUICore_CoreCursor?) throws {
        try _interop.put_PointerCursor(value)
    }

    /// Gets the client coordinates of the pointer.
    /// - Returns: The position of the pointer in device-independent pixel (DIP).
    public var pointerPosition: WindowsFoundation_Point {
        get throws {
            try _interop.get_PointerPosition()
        }
    }

    /// Gets a value that indicates whether the window is visible.
    /// - Returns: True if the window is visible on the screen; false if it is not.
    public var visible: Swift.Bool {
        get throws {
            try _interop.get_Visible()
        }
    }

    /// Is fired when the window completes activation or deactivation.
    public func activated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_WindowActivatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Activated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activated)
    }

    public func activated(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Activated(cookie)
    }

    /// Is fired when a request for an automation handler is generated.
    public func automationProviderRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_AutomationProviderRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AutomationProviderRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: automationProviderRequested)
    }

    public func automationProviderRequested(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AutomationProviderRequested(cookie)
    }

    /// Is fired when a new character is received by the input queue.
    public func characterReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_CharacterReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CharacterReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: characterReceived)
    }

    public func characterReceived(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CharacterReceived(cookie)
    }

    /// Is fired when the app terminates.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_CoreWindowEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(cookie)
    }

    /// Occurs when input is enabled or disabled for the app.
    public func inputEnabled(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_InputEnabledEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_InputEnabled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: inputEnabled)
    }

    public func inputEnabled(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_InputEnabled(cookie)
    }

    /// Is fired when a non-system key is pressed.
    public func keyDown(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_KeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_KeyDown(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyDown)
    }

    public func keyDown(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_KeyDown(cookie)
    }

    /// Is fired when a non-system key is released after a press.
    public func keyUp(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_KeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_KeyUp(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyUp)
    }

    public func keyUp(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_KeyUp(cookie)
    }

    /// Occurs when a pointer moves to another app. This event is raised after PointerExited and is the final event received by the app for this pointer.
    public func pointerCaptureLost(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerCaptureLost(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerCaptureLost)
    }

    public func pointerCaptureLost(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerCaptureLost(cookie)
    }

    /// Occurs when a pointer moves into the bounding box of the app.
    public func pointerEntered(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerEntered)
    }

    public func pointerEntered(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerEntered(cookie)
    }

    /// Occurs when the pointer moves outside the bounding box of the app.
    public func pointerExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerExited)
    }

    public func pointerExited(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerExited(cookie)
    }

    /// Occurs when a pointer moves within the bounding box of the app.
    public func pointerMoved(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerMoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerMoved)
    }

    public func pointerMoved(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerMoved(cookie)
    }

    /// Occurs when a mouse button is clicked, or the digitizer surface has been touched by a finger or pen, within the bounding rectangle of the app.
    public func pointerPressed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerPressed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerPressed)
    }

    public func pointerPressed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerPressed(cookie)
    }

    /// Occurs when a pressed mouse button is released, or a touch or pen contact is lifted from the digitizer surface, within the bounding rectangle of the app (or outside the bounding rectangle, if the pointer is captured).
    public func pointerReleased(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerReleased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerReleased)
    }

    public func pointerReleased(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerReleased(cookie)
    }

    /// Occurs when the wheel button is rotated.
    public func pointerWheelChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PointerWheelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerWheelChanged)
    }

    public func pointerWheelChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PointerWheelChanged(cookie)
    }

    /// Occurs when the window size is changed.
    public func sizeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_WindowSizeChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SizeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sizeChanged)
    }

    public func sizeChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SizeChanged(cookie)
    }

    /// Occurs when a touch contact area intersects the bounding rectangle (or polygon) of a window that is registered for touch hit testing.
    public func touchHitTesting(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_TouchHitTestingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TouchHitTesting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: touchHitTesting)
    }

    public func touchHitTesting(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TouchHitTesting(cookie)
    }

    /// Is fired when the window visibility is changed.
    public func visibilityChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_VisibilityChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VisibilityChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: visibilityChanged)
    }

    public func visibilityChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VisibilityChanged(cookie)
    }

    /// Activates the window. This method is called to present the window on the screen.
    public func activate() throws {
        try _interop.activate()
    }

    /// Closes a secondary window and exits the message loop.
    public func close() throws {
        try _interop.close()
    }

    /// Asynchronously retrieves the state of a virtual key.
    /// - Parameter virtualKey: The virtual key for which state is returned.
    /// - Returns: The flags indicating the current state of the supplied virtual key when the input event fired.
    public func getAsyncKeyState(_ virtualKey: WindowsSystem_VirtualKey) throws -> WindowsUICore_CoreVirtualKeyStates {
        try _interop.getAsyncKeyState(virtualKey)
    }

    /// Retrieves the state of a virtual key.
    /// - Parameter virtualKey: The virtual key for which state is returned.
    /// - Returns: The flags indicating the current state of the supplied virtual key when the input event fired.
    public func getKeyState(_ virtualKey: WindowsSystem_VirtualKey) throws -> WindowsUICore_CoreVirtualKeyStates {
        try _interop.getKeyState(virtualKey)
    }

    /// Dissociates pointer input from the app, if previously associated through SetPointerCapture, and restores normal pointer input processing.
    public func releasePointerCapture() throws {
        try _interop.releasePointerCapture()
    }

    /// Associates pointer input with the app. Once a pointer is captured, all subsequent events associated with that pointer are fired by the app.
    public func setPointerCapture() throws {
        try _interop.setPointerCapture()
    }

    // MARK: Windows.UI.Core.ICoreWindow2 members

    /// Gets the client coordinates of the pointer.
    /// - Returns: The position of the pointer in device-independent pixel (DIP).
    public func pointerPosition(_ value: WindowsFoundation_Point) throws {
        try _icoreWindow2.put_PointerPosition(value)
    }

    // MARK: Windows.UI.Core.ICorePointerRedirector members

    /// Occurs on the process receiving input when the pointer input is routed to another process.
    public func pointerRoutedAway(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_ICorePointerRedirector?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerRedirector.add_PointerRoutedAway(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerRoutedAway)
    }

    public func pointerRoutedAway(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerRedirector.remove_PointerRoutedAway(cookie)
    }

    /// Occurs on a process associated with, but not currently receiving input from, a pointer that fires a PointerReleased event on a different process.
    public func pointerRoutedReleased(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_ICorePointerRedirector?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerRedirector.add_PointerRoutedReleased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerRoutedReleased)
    }

    public func pointerRoutedReleased(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerRedirector.remove_PointerRoutedReleased(cookie)
    }

    /// Occurs on the process not currently receiving input, but designated to begin receiving input from another process.
    public func pointerRoutedTo(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_ICorePointerRedirector?, WindowsUICore_PointerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icorePointerRedirector.add_PointerRoutedTo(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerRoutedTo)
    }

    public func pointerRoutedTo(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icorePointerRedirector.remove_PointerRoutedTo(cookie)
    }

    // MARK: Windows.UI.Core.ICoreWindow3 members

    /// Occurs when a framework input manager requests the bounding rectangle of an interactive element within a specific bounding rectangle and closest to a specific pointer.
    public func closestInteractiveBoundsRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreWindow3.add_ClosestInteractiveBoundsRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closestInteractiveBoundsRequested)
    }

    public func closestInteractiveBoundsRequested(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreWindow3.remove_ClosestInteractiveBoundsRequested(cookie)
    }

    /// Retrieves the unique ID for the input device that generated this key event.
    /// - Returns: A unique identifier for the input device associated with the key event, or an empty string. The same device can be assigned a different ID each time it is connected.
    public func getCurrentKeyEventDeviceId() throws -> Swift.String {
        try _icoreWindow3.getCurrentKeyEventDeviceId()
    }

    // MARK: Windows.UI.Core.ICoreWindow4 members

    /// Occurs when a user finishes resizing the window.
    public func resizeCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreWindow4.add_ResizeCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: resizeCompleted)
    }

    public func resizeCompleted(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreWindow4.remove_ResizeCompleted(cookie)
    }

    /// Occurs when a user starts to resize the window.
    public func resizeStarted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreWindow4.add_ResizeStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: resizeStarted)
    }

    public func resizeStarted(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreWindow4.remove_ResizeStarted(cookie)
    }

    // MARK: Windows.UI.Core.ICoreWindow5 members

    /// Gets a value that indicates the activation state of the window.
    /// - Returns: A value that indicates the activation state of the window.
    public var activationMode: WindowsUICore_CoreWindowActivationMode {
        get throws {
            try _icoreWindow5.get_ActivationMode()
        }
    }

    /// Gets the **DispatcherQueue** for the window.
    /// - Returns: The **DispatcherQueue**.
    public var dispatcherQueue: WindowsSystem_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_icoreWindow5.get_DispatcherQueue())
        }
    }

    // MARK: Windows.UI.Core.ICoreWindowWithContext members

    /// Gets the context identifier for the core window.
    /// - Returns: The context identifier for the core window.
    public var uicontext: WindowsUI_UIContext {
        get throws {
            try COM.NullResult.unwrap(_icoreWindowWithContext.get_UIContext())
        }
    }

    // MARK: Windows.UI.Core.ICoreWindowStatic members

    /// Gets the CoreWindow instance for the currently active thread.
    /// - Returns: The CoreWindow for the currently active thread.
    public static func getForCurrentThread() throws -> WindowsUICore_CoreWindow {
        try COM.NullResult.unwrap(_icoreWindowStatic.getForCurrentThread())
    }

    // MARK: Implementation details

    private var _icoreWindow2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow2>? = nil

    internal var _icoreWindow2: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow2> {
        get throws {
            try _icoreWindow2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindow2.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindow2.self)
            }
        }
    }

    private var _icorePointerRedirector_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerRedirector>? = nil

    internal var _icorePointerRedirector: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICorePointerRedirector> {
        get throws {
            try _icorePointerRedirector_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICorePointerRedirector.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICorePointerRedirector.self)
            }
        }
    }

    private var _icoreWindow3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow3>? = nil

    internal var _icoreWindow3: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow3> {
        get throws {
            try _icoreWindow3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindow3.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindow3.self)
            }
        }
    }

    private var _icoreWindow4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow4>? = nil

    internal var _icoreWindow4: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow4> {
        get throws {
            try _icoreWindow4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindow4.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindow4.self)
            }
        }
    }

    private var _icoreWindow5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow5>? = nil

    internal var _icoreWindow5: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindow5> {
        get throws {
            try _icoreWindow5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindow5.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindow5.self)
            }
        }
    }

    private var _icoreWindowWithContext_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowWithContext>? = nil

    internal var _icoreWindowWithContext: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowWithContext> {
        get throws {
            try _icoreWindowWithContext_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreWindowWithContext.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreWindowWithContext.self)
            }
        }
    }

    deinit {
        _icoreWindow2_storage?.release()
        _icorePointerRedirector_storage?.release()
        _icoreWindow3_storage?.release()
        _icoreWindow4_storage?.release()
        _icoreWindow5_storage?.release()
        _icoreWindowWithContext_storage?.release()
    }

    private static var _icoreWindowStatic_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowStatic>? = nil

    internal static var _icoreWindowStatic: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreWindowStatic> {
        get throws {
            try _icoreWindowStatic_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Core.CoreWindow", id: CWinRT.SWRT_WindowsUICore_ICoreWindowStatic.iid)
            }
        }
    }
}