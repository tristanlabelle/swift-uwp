// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the Windows Runtime core event message dispatcher. Instances of this type are responsible for processing the window messages and dispatching the events to the client.
public final class WindowsUICore_CoreDispatcher: WindowsRuntime.WinRTImport<WindowsUICore_CoreDispatcherProjection>, WindowsUICore_ICoreAcceleratorKeysProtocol {
    // MARK: Windows.UI.Core.ICoreDispatcher members

    /// Gets a value that specifies whether the event dispatcher provided by this instance of CoreWindow has access to the current thread or not.
    /// - Returns: True if the event dispatcher has thread access; false it does not.
    public var hasThreadAccess: Swift.Bool {
        get throws {
            try _interop.get_HasThreadAccess()
        }
    }

    /// Starts the dispatcher processing the input event queue for this instance of CoreWindow.
    /// - Parameter options: Determines how many events to process, and if this method should block.
    public func processEvents(_ options: WindowsUICore_CoreProcessEventsOption) throws {
        try _interop.processEvents(options)
    }

    /// Schedules the provided callback on the UI thread from a worker thread, and returns the results asynchronously.
    /// - Parameter priority: Specifies the priority for event dispatch. Set this to CoreDispatcherPriority.Normal.
    /// - Parameter agileCallback: The callback on which the dispatcher returns when the event is dispatched.
    /// - Returns: The object that provides handlers for the completed async event dispatch.
    public func runAsync(_ priority: WindowsUICore_CoreDispatcherPriority, _ agileCallback: WindowsUICore_DispatchedHandler?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.runAsync(priority, agileCallback))
    }

    /// Schedules a callback on the UI thread from a worker thread at idle priority, and returns the results asynchronously.
    /// - Parameter agileCallback: The callback on which the idle priority dispatcher returns when the event is dispatched.
    /// - Returns: Object that contains the results of the asynchronous action.
    public func runIdleAsync(_ agileCallback: WindowsUICore_IdleDispatchedHandler?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.runIdleAsync(agileCallback))
    }

    // MARK: Windows.UI.Core.ICoreAcceleratorKeys members

    /// Fired when an accelerator key is activated (pressed or held down).
    public func acceleratorKeyActivated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreDispatcher?, WindowsUICore_AcceleratorKeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icoreAcceleratorKeys.add_AcceleratorKeyActivated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: acceleratorKeyActivated)
    }

    public func acceleratorKeyActivated(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _icoreAcceleratorKeys.remove_AcceleratorKeyActivated(cookie)
    }

    // MARK: Windows.UI.Core.ICoreDispatcherWithTaskPriority members

    /// Gets and sets the priority of the current task.
    /// - Returns: A CoreDispatcherPriority enumeration value that specifies the priority of the current task.
    public var currentPriority: WindowsUICore_CoreDispatcherPriority {
        get throws {
            try _icoreDispatcherWithTaskPriority.get_CurrentPriority()
        }
    }

    /// Gets and sets the priority of the current task.
    /// - Returns: A CoreDispatcherPriority enumeration value that specifies the priority of the current task.
    public func currentPriority(_ value: WindowsUICore_CoreDispatcherPriority) throws {
        try _icoreDispatcherWithTaskPriority.put_CurrentPriority(value)
    }

    /// Queries whether the caller should yield if there are items in the task queue of higher priority than the current task.
    /// - Returns: **true** if the current work item should yield to higher priority work; **false** if it should not.
    public func shouldYield() throws -> Swift.Bool {
        try _icoreDispatcherWithTaskPriority.shouldYield()
    }

    /// Queries whether the caller should yield if there are items in the task queue of the specified priority or higher.
    /// - Parameter priority: The minimum priority level for which the current work item should yield.
    /// - Returns: **true** if the current work item should yield to higher priority work; **false** if it should not.
    public func shouldYield(_ priority: WindowsUICore_CoreDispatcherPriority) throws -> Swift.Bool {
        try _icoreDispatcherWithTaskPriority.shouldYieldToPriority(priority)
    }

    /// Stops the dispatcher from processing any queued events.
    public func stopProcessEvents() throws {
        try _icoreDispatcherWithTaskPriority.stopProcessEvents()
    }

    // MARK: Windows.UI.Core.ICoreDispatcher2 members

    /// Attempts to schedule the specified callback on the UI thread from a worker thread, and returns the results asynchronously.
    /// - Parameter priority: Specifies the priority for event dispatch. Set this to CoreDispatcherPriority.Normal.
    /// - Parameter agileCallback: The callback on which the dispatcher returns when the event is dispatched.
    /// - Returns: The asynchronous operation.
    public func tryRunAsync(_ priority: WindowsUICore_CoreDispatcherPriority, _ agileCallback: WindowsUICore_DispatchedHandler?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_icoreDispatcher2.tryRunAsync(priority, agileCallback))
    }

    /// Attempts to schedule a callback on the UI thread from a worker thread at idle priority, and returns the results asynchronously.
    /// - Parameter agileCallback: The callback on which the idle priority dispatcher returns when the event is dispatched.
    /// - Returns: The asynchronous operation.
    public func tryRunIdleAsync(_ agileCallback: WindowsUICore_IdleDispatchedHandler?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_icoreDispatcher2.tryRunIdleAsync(agileCallback))
    }

    // MARK: Implementation details

    private var _icoreAcceleratorKeys_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreAcceleratorKeys>? = nil

    internal var _icoreAcceleratorKeys: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreAcceleratorKeys> {
        get throws {
            try _icoreAcceleratorKeys_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreAcceleratorKeys.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreAcceleratorKeys.self)
            }
        }
    }

    private var _icoreDispatcherWithTaskPriority_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreDispatcherWithTaskPriority>? = nil

    internal var _icoreDispatcherWithTaskPriority: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreDispatcherWithTaskPriority> {
        get throws {
            try _icoreDispatcherWithTaskPriority_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreDispatcherWithTaskPriority.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreDispatcherWithTaskPriority.self)
            }
        }
    }

    private var _icoreDispatcher2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreDispatcher2>? = nil

    internal var _icoreDispatcher2: COM.COMInterop<CWinRT.SWRT_WindowsUICore_ICoreDispatcher2> {
        get throws {
            try _icoreDispatcher2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICore_ICoreDispatcher2.iid).cast(to: CWinRT.SWRT_WindowsUICore_ICoreDispatcher2.self)
            }
        }
    }

    deinit {
        _icoreAcceleratorKeys_storage?.release()
        _icoreDispatcherWithTaskPriority_storage?.release()
        _icoreDispatcher2_storage?.release()
    }
}