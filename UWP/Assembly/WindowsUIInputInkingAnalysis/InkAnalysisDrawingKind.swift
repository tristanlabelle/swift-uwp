// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the shapes that an InkAnalyzer can recognize when InkAnalysisNode.Kind is set to InkDrawing.
public struct WindowsUIInputInkingAnalysis_InkAnalysisDrawingKind: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Drawing is not recognized as one of the shapes listed.
    public static let drawing = Self()

    /// Drawing is recognized as a circle.
    public static let circle = Self(rawValue: 1)

    /// Drawing is recognized as an ellipse.
    public static let ellipse = Self(rawValue: 2)

    /// Drawing is recognized as a triangle.
    public static let triangle = Self(rawValue: 3)

    /// Drawing is recognized as an isosceles triangle.
    public static let isoscelesTriangle = Self(rawValue: 4)

    /// Drawing is recognized as an equilateral triangle.
    public static let equilateralTriangle = Self(rawValue: 5)

    /// Drawing is recognized as a right angle triangle.
    public static let rightTriangle = Self(rawValue: 6)

    /// Drawing is recognized as a quadrilateral.
    public static let quadrilateral = Self(rawValue: 7)

    /// Drawing is recognized as a right rectangle.
    public static let rectangle = Self(rawValue: 8)

    /// Drawing is recognized as a square.
    public static let square = Self(rawValue: 9)

    /// Drawing is recognized as a diamond.
    public static let diamond = Self(rawValue: 10)

    /// Drawing is recognized as a trapezoid.
    public static let trapezoid = Self(rawValue: 11)

    /// Drawing is recognized as a parallelogram.
    public static let parallelogram = Self(rawValue: 12)

    /// Drawing is recognized as a pentagon.
    public static let pentagon = Self(rawValue: 13)

    /// Drawing is recognized as a hexagon.
    public static let hexagon = Self(rawValue: 14)
}