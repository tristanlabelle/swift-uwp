// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to an object that can categorize ink strokes into either writing or drawing strokes, and recognize text, shapes, and basic layout structures.
public final class WindowsUIInputInkingAnalysis_InkAnalyzer: WindowsRuntime.WinRTImport<WindowsUIInputInkingAnalysis_InkAnalyzerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIInputInkingAnalysis_InkAnalyzerProjection.self))
    }

    // MARK: Windows.UI.Input.Inking.Analysis.IInkAnalyzer members

    /// Gets the root node of the ink analysis results.
    public var analysisRoot: WindowsUIInputInkingAnalysis_InkAnalysisRoot {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AnalysisRoot())
        }
    }

    /// Gets the state of the ink analysis process.
    public var isAnalyzing: Swift.Bool {
        get throws {
            try _interop.get_IsAnalyzing()
        }
    }

    /// Adds data for a single ink stroke to the ink analysis results.
    /// - Parameter stroke: The ink stroke from which to extract the data to add to the ink analysis results.
    public func addDataForStroke(_ stroke: WindowsUIInputInking_InkStroke?) throws {
        try _interop.addDataForStroke(stroke)
    }

    public func addDataForStrokes(_ strokes: WindowsFoundationCollections_IIterable<WindowsUIInputInking_InkStroke?>?) throws {
        try _interop.addDataForStrokes(strokes)
    }

    /// Delete all nodes from the last ink analysis process.
    public func clearDataForAllStrokes() throws {
        try _interop.clearDataForAllStrokes()
    }

    /// Delete all nodes for the specified ink stroke from the last ink analysis process.
    /// - Parameter strokeId: The unique identifier of the ink stroke.
    public func removeDataForStroke(_ strokeId: Swift.UInt32) throws {
        try _interop.removeDataForStroke(strokeId)
    }

    public func removeDataForStrokes(_ strokeIds: WindowsFoundationCollections_IIterable<Swift.UInt32>?) throws {
        try _interop.removeDataForStrokes(strokeIds)
    }

    /// Update all nodes for the specified ink stroke from the last ink analysis process.
    public func replaceDataForStroke(_ stroke: WindowsUIInputInking_InkStroke?) throws {
        try _interop.replaceDataForStroke(stroke)
    }

    /// Sets the ink analysis category for the InkAnalysisNode associated with the ink stroke.
    /// - Parameter strokeId: The unique identifier for the ink stroke being categorized.
    /// - Parameter strokeKind: The InkAnalysisStrokeKind category to assign to the InkAnalysisNode.
    public func setStrokeDataKind(_ strokeId: Swift.UInt32, _ strokeKind: WindowsUIInputInkingAnalysis_InkAnalysisStrokeKind) throws {
        try _interop.setStrokeDataKind(strokeId, strokeKind)
    }

    /// Aynchronously generates the tree of objects for the ink analysis process.
    /// - Returns: The results of the analysis as an InkAnalysisResult object.
    public func analyzeAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsUIInputInkingAnalysis_InkAnalysisResult?> {
        try COM.NullResult.unwrap(_interop.analyzeAsync())
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Inking.Analysis.InkAnalyzer", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}