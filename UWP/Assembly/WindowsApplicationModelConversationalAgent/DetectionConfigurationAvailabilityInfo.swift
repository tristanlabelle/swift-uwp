// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides availability details for the ActivationSignalDetector.
public final class WindowsApplicationModelConversationalAgent_DetectionConfigurationAvailabilityInfo: WindowsRuntime.WinRTImport<WindowsApplicationModelConversationalAgent_DetectionConfigurationAvailabilityInfoProjection> {
    // MARK: Windows.ApplicationModel.ConversationalAgent.IDetectionConfigurationAvailabilityInfo members

    /// Gets whether the ActivationSignalDetector has user permission to operate above the lock screen.
    /// - Returns: True, if permission granted. Otherwise, false.
    public var hasLockScreenPermission: Swift.Bool {
        get throws {
            try _interop.get_HasLockScreenPermission()
        }
    }

    /// Gets whether the ActivationSignalDetector has user permission to listen for activation keywords.
    /// - Returns: True, if permission granted. Otherwise, false.
    public var hasPermission: Swift.Bool {
        get throws {
            try _interop.get_HasPermission()
        }
    }

    /// Gets whether the ActivationSignalDetector can access system resources.
    /// - Returns: True, if enabled. Otherwise, false.
    public var hasSystemResourceAccess: Swift.Bool {
        get throws {
            try _interop.get_HasSystemResourceAccess()
        }
    }

    /// Gets whether the ActivationSignalDetector is enabled.
    /// - Returns: True, if enabled. Otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    // MARK: Windows.ApplicationModel.ConversationalAgent.IDetectionConfigurationAvailabilityInfo2 members

    public var unavailableSystemResources: WindowsFoundationCollections_IVectorView<WindowsApplicationModelConversationalAgent_SignalDetectorResourceKind> {
        get throws {
            try COM.NullResult.unwrap(_idetectionConfigurationAvailabilityInfo2.get_UnavailableSystemResources())
        }
    }

    // MARK: Implementation details

    private var _idetectionConfigurationAvailabilityInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IDetectionConfigurationAvailabilityInfo2>? = nil

    internal var _idetectionConfigurationAvailabilityInfo2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IDetectionConfigurationAvailabilityInfo2> {
        get throws {
            try _idetectionConfigurationAvailabilityInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IDetectionConfigurationAvailabilityInfo2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IDetectionConfigurationAvailabilityInfo2.self)
            }
        }
    }

    deinit {
        _idetectionConfigurationAvailabilityInfo2_storage?.release()
    }
}