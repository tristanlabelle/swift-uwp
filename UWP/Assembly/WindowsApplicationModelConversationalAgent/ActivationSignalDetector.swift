// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents hardware and software components that can generate activation signals based on input from a user's environment, such as spoken keyword(s), sound detection, or button press.
public final class WindowsApplicationModelConversationalAgent_ActivationSignalDetector: WindowsRuntime.WinRTImport<WindowsApplicationModelConversationalAgent_ActivationSignalDetectorProjection> {
    // MARK: Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetector members

    /// Gets whether the ActivationSignalDetector can add or remove items from its collection of ActivationSignalDetectionConfiguration objects.
    /// - Returns: True, if an ActivationSignalDetectionConfiguration object can be created. Otherwise, false.
    public var canCreateConfigurations: Swift.Bool {
        get throws {
            try _interop.get_CanCreateConfigurations()
        }
    }

    /// Gets the supported ActivationSignalDetector types.
    /// - Returns: The supported ActivationSignalDetector types.
    public var kind: WindowsApplicationModelConversationalAgent_ActivationSignalDetectorKind {
        get throws {
            try _interop.get_Kind()
        }
    }

    /// Gets an identifier unique to the provider of this detector, such as the manufacturer of a hardware-based keyword spotter.
    /// - Returns: The unique identifier of the provider.
    public var providerId: Swift.String {
        get throws {
            try _interop.get_ProviderId()
        }
    }

    /// Gets the model configuration data types supported by the signal detector.
    /// - Returns: A collection of model configuration data types.
    public var supportedModelDataTypes: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedModelDataTypes())
        }
    }

    /// Gets the power modes supported by an ActivationSignalDetector.
    /// - Returns: A collection of ActivationSignalDetectorPowerState modes supported by an ActivationSignalDetector.
    public var supportedPowerStates: WindowsFoundationCollections_IVectorView<WindowsApplicationModelConversationalAgent_ActivationSignalDetectorPowerState> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedPowerStates())
        }
    }

    /// Gets the supported formats for training an ActivationSignalDetector.
    /// - Returns: An ActivationSignalDetectionConfiguration.TrainingDataFormat collection for training an ActivationSignalDetector.
    public var supportedTrainingDataFormats: WindowsFoundationCollections_IVectorView<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionTrainingDataFormat> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedTrainingDataFormats())
        }
    }

    /// Asynchronously gets the collection of model identifiers supported by this detector for the specified signal identifier. For example, all supported locales for language-specific versions of the "Hey Cortana" keyword.
    /// - Parameter signalId: The locale-independent identifier for this configuration.
    /// - Returns: The collection of model identifiers supported through the specified signal.
    public func getSupportedModelIdsForSignalId(_ signalId: Swift.String) throws -> WindowsFoundationCollections_IVectorView<Swift.String> {
        try COM.NullResult.unwrap(_interop.getSupportedModelIdsForSignalId(signalId))
    }

    /// Asynchronously gets the collection of model identifiers supported by this detector for the specified signal identifier. For example, all supported locales for language-specific versions of the "Hey Cortana" keyword.
    /// - Parameter signalId: The locale-independent identifier for this configuration.
    /// - Returns: The collection of model identifiers supported through the specified signal.
    public func getSupportedModelIdsForSignalIdAsync(_ signalId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<Swift.String>?> {
        try COM.NullResult.unwrap(_interop.getSupportedModelIdsForSignalIdAsync(signalId))
    }

    /// Creates an ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair and adds it to the collection of supported configurations for the detector.
    /// - Parameter signalId: The locale-independent identifier for this configuration.
    /// - Parameter modelId: The unique identifier, typically locale-specific, for the model data associated with this configuration.
    /// - Parameter displayName: The name of the signal in a localizable, human-readable form.
    public func createConfiguration(_ signalId: Swift.String, _ modelId: Swift.String, _ displayName: Swift.String) throws {
        try _interop.createConfiguration(signalId, modelId, displayName)
    }

    /// Asynchronously creates an ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair and adds it to the collection of supported configurations for the detector.
    /// - Parameter signalId: The locale-independent identifier for this configuration.
    /// - Parameter modelId: The unique identifier, typically locale-specific, for the model data associated with this configuration.
    /// - Parameter displayName: The name of the signal in a localizable, human-readable form.
    public func createConfigurationAsync(_ signalId: Swift.String, _ modelId: Swift.String, _ displayName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.createConfigurationAsync(signalId, modelId, displayName))
    }

    /// Gets the collection of ActivationSignalDetectionConfiguration objects associated with the ActivationSignalDetector.
    /// - Returns: The collection of ActivationSignalDetectionConfiguration objects associated with the ActivationSignalDetector.
    public func getConfigurations() throws -> WindowsFoundationCollections_IVectorView<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration?> {
        try COM.NullResult.unwrap(_interop.getConfigurations())
    }

    /// Asynchronously gets the collection of ActivationSignalDetectionConfiguration objects associated with the ActivationSignalDetector.
    /// - Returns: The collection of ActivationSignalDetectionConfiguration objects associated with the ActivationSignalDetector.
    public func getConfigurationsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration?>?> {
        try COM.NullResult.unwrap(_interop.getConfigurationsAsync())
    }

    /// Gets the ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    /// - Parameter signalId: The unique identifier for the ConversationalAgentSignal.
    /// - Parameter modelId: The unique model identifier of the Signal that activated the conversational agent.
    /// - Returns: The ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    public func getConfiguration(_ signalId: Swift.String, _ modelId: Swift.String) throws -> WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration {
        try COM.NullResult.unwrap(_interop.getConfiguration(signalId, modelId))
    }

    /// Asynchronously gets the ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    /// - Parameter signalId: The unique identifier for the ConversationalAgentSignal.
    /// - Parameter modelId: The unique model identifier of the Signal that activated the conversational agent.
    /// - Returns: The ActivationSignalDetectionConfiguration object associated with the specified ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    public func getConfigurationAsync(_ signalId: Swift.String, _ modelId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration?> {
        try COM.NullResult.unwrap(_interop.getConfigurationAsync(signalId, modelId))
    }

    /// Removes the ActivationSignalDetectionConfiguration identified by the ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    /// - Parameter signalId: The unique identifier for the ConversationalAgentSignal.
    /// - Parameter modelId: The unique model identifier of the Signal that activated the conversational agent.
    public func removeConfiguration(_ signalId: Swift.String, _ modelId: Swift.String) throws {
        try _interop.removeConfiguration(signalId, modelId)
    }

    /// Asynchronously removes the ActivationSignalDetectionConfiguration identified by the ActivationSignalDetectionConfiguration.SignalId and ActivationSignalDetectionConfiguration.ModelId pair.
    /// - Parameter signalId: The unique identifier for the ConversationalAgentSignal.
    /// - Parameter modelId: The unique model identifier of the Signal that activated the conversational agent.
    public func removeConfigurationAsync(_ signalId: Swift.String, _ modelId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.removeConfigurationAsync(signalId, modelId))
    }

    // MARK: Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetector2 members

    public var detectorId: Swift.String {
        get throws {
            try _iactivationSignalDetector2.get_DetectorId()
        }
    }

    public func getAvailableModelIdsForSignalIdAsync(_ signalId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<Swift.String>?> {
        try COM.NullResult.unwrap(_iactivationSignalDetector2.getAvailableModelIdsForSignalIdAsync(signalId))
    }

    public func getAvailableModelIdsForSignalId(_ signalId: Swift.String) throws -> WindowsFoundationCollections_IVector<Swift.String> {
        try COM.NullResult.unwrap(_iactivationSignalDetector2.getAvailableModelIdsForSignalId(signalId))
    }

    public func createConfigurationWithResultAsync(_ signalId: Swift.String, _ modelId: Swift.String, _ displayName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationCreationResult?> {
        try COM.NullResult.unwrap(_iactivationSignalDetector2.createConfigurationWithResultAsync(signalId, modelId, displayName))
    }

    public func createConfigurationWithResult(_ signalId: Swift.String, _ modelId: Swift.String, _ displayName: Swift.String) throws -> WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationCreationResult {
        try COM.NullResult.unwrap(_iactivationSignalDetector2.createConfigurationWithResult(signalId, modelId, displayName))
    }

    public func removeConfigurationWithResultAsync(_ signalId: Swift.String, _ modelId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationRemovalResult> {
        try COM.NullResult.unwrap(_iactivationSignalDetector2.removeConfigurationWithResultAsync(signalId, modelId))
    }

    public func removeConfigurationWithResult(_ signalId: Swift.String, _ modelId: Swift.String) throws -> WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationRemovalResult {
        try _iactivationSignalDetector2.removeConfigurationWithResult(signalId, modelId)
    }

    // MARK: Implementation details

    private var _iactivationSignalDetector2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetector2>? = nil

    internal var _iactivationSignalDetector2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetector2> {
        get throws {
            try _iactivationSignalDetector2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetector2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetector2.self)
            }
        }
    }

    deinit {
        _iactivationSignalDetector2_storage?.release()
    }
}