// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the configuration details for a single signal supported by an activation signal detector. For example, the keyword "Hey Cortana" in US English.
public final class WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration: WindowsRuntime.WinRTImport<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration members

    /// Gets the current usage restrictions unique to this configuration.
    /// - Returns: The availability state of the ActivationSignalDetector.
    public var availabilityInfo: WindowsApplicationModelConversationalAgent_DetectionConfigurationAvailabilityInfo {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AvailabilityInfo())
        }
    }

    /// Gets the name of the signal in a localizable, human-readable form.
    /// - Returns: The name of the signal.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets whether an ActivationSignalDetectionConfiguration object is processing configuration settings.
    /// - Returns: True, if all criteria are met. Otherwise, false.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// - Returns: The unique model identifier.
    public var modelId: Swift.String {
        get throws {
            try _interop.get_ModelId()
        }
    }

    /// Gets the locale-independent identifier for this configuration.
    /// - Returns: The signal identifier.
    public var signalId: Swift.String {
        get throws {
            try _interop.get_SignalId()
        }
    }

    /// Gets the supported data format used for signal detection training with this configuration (if available).
    /// - Returns: The signal detection data format.
    public var trainingDataFormat: WindowsApplicationModelConversationalAgent_ActivationSignalDetectionTrainingDataFormat {
        get throws {
            try _interop.get_TrainingDataFormat()
        }
    }

    /// Gets the number of steps completed in the training process of this configuration (if available).
    /// - Returns: THe number of training steps completed.
    public var trainingStepsCompleted: Swift.UInt32 {
        get throws {
            try _interop.get_TrainingStepsCompleted()
        }
    }

    /// Gets the number of steps remaining in the training process of this configuration (if available).
    /// - Returns: THe number of training steps remaining.
    public var trainingStepsRemaining: Swift.UInt32 {
        get throws {
            try _interop.get_TrainingStepsRemaining()
        }
    }

    /// Occurs when the availability state of the ActivationSignalDetector changes.
    public func availabilityChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfiguration?, WindowsApplicationModelConversationalAgent_DetectionConfigurationAvailabilityChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AvailabilityChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: availabilityChanged)
    }

    public func availabilityChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AvailabilityChanged(token)
    }

    /// Enables or disables the configuration in an application-level manner, independent of system-level settings. The configuration must be both allowed and enabled for its associatedActivationSignalDetector.
    /// - Parameter value: True, if enabled. Otherwise, false.
    public func setEnabled(_ value: Swift.Bool) throws {
        try _interop.setEnabled(value)
    }

    /// Asynchronously enables or disables the configuration in an application-level manner, independent of system-level settings. The configuration must be both allowed and enabled for its associatedActivationSignalDetector.
    /// - Parameter value: True, if enabled. Otherwise, false.
    public func setEnabledAsync(_ value: Swift.Bool) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setEnabledAsync(value))
    }

    /// Sets the model configuration data (specific to a signal detector).
    /// - Parameter dataType: The type of configuration data that ensures compatibility with the detector.
    /// - Parameter data: The configuration data.
    public func setModelData(_ dataType: Swift.String, _ data: WindowsStorageStreams_IInputStream?) throws {
        try _interop.setModelData(dataType, data)
    }

    /// Asynchronously sets the model configuration data (specific to a signal detector).
    /// - Parameter dataType: The type of configuration data that ensures compatibility with the detector.
    /// - Parameter data: The configuration data.
    public func setModelDataAsync(_ dataType: Swift.String, _ data: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setModelDataAsync(dataType, data))
    }

    /// Gets the model configuration data type (specific to a signal detector).
    /// - Returns: The configuration data type, or null if no data exists.
    public func getModelDataType() throws -> Swift.String {
        try _interop.getModelDataType()
    }

    /// Asynchronously gets the model configuration data type (specific to a signal detector).
    /// - Returns: The configuration data type, or null if no data exists.
    public func getModelDataTypeAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.getModelDataTypeAsync())
    }

    /// Gets the model configuration data (specific to a signal detector).
    /// - Returns: The configuration data, or null if no data exists.
    public func getModelData() throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_interop.getModelData())
    }

    /// Asynchronously gets the model configuration data (specific to a signal detector).
    /// - Returns: The configuration data, or null if no data exists.
    public func getModelDataAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?> {
        try COM.NullResult.unwrap(_interop.getModelDataAsync())
    }

    /// Deletes all model data for the digital assistant.
    public func clearModelData() throws {
        try _interop.clearModelData()
    }

    /// Asynchronously deletes all model data for the digital assistant.
    public func clearModelDataAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.clearModelDataAsync())
    }

    /// Provides input data in the specified format and attempts to complete a training step (if a training process is available for the signal detector of this configuration).
    /// - Parameter trainingDataFormat: The voice training data formats supported by the ActivationSignalDetector for the digital assistant.
    /// - Parameter trainingData: The voice training data.
    /// - Returns: The voice training data states recognized by the ActivationSignalDetector for the digital assistant.
    public func applyTrainingData(_ trainingDataFormat: WindowsApplicationModelConversationalAgent_ActivationSignalDetectionTrainingDataFormat, _ trainingData: WindowsStorageStreams_IInputStream?) throws -> WindowsApplicationModelConversationalAgent_DetectionConfigurationTrainingStatus {
        try _interop.applyTrainingData(trainingDataFormat, trainingData)
    }

    /// Asynchronously provides input data in the specified format and attempts to complete a training step (if a training process is available for the signal detector of this configuration).
    /// - Parameter trainingDataFormat: The voice training data formats supported by the ActivationSignalDetector for the digital assistant.
    /// - Parameter trainingData: The voice training data.
    /// - Returns: The voice training data states recognized by the ActivationSignalDetector for the digital assistant.
    public func applyTrainingDataAsync(_ trainingDataFormat: WindowsApplicationModelConversationalAgent_ActivationSignalDetectionTrainingDataFormat, _ trainingData: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_DetectionConfigurationTrainingStatus> {
        try COM.NullResult.unwrap(_interop.applyTrainingDataAsync(trainingDataFormat, trainingData))
    }

    /// Deletes all voice training data from the ActivationSignalDetector for the digital assistant.
    public func clearTrainingData() throws {
        try _interop.clearTrainingData()
    }

    /// Asynchronously deletes all voice training data from the ActivationSignalDetector for the digital assistant.
    public func clearTrainingDataAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.clearTrainingDataAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases system resources that are exposed by a Windows Runtime object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.ApplicationModel.ConversationalAgent.IActivationSignalDetectionConfiguration2 members

    public var trainingStepCompletionMaxAllowedTime: Swift.UInt32 {
        get throws {
            try _iactivationSignalDetectionConfiguration2.get_TrainingStepCompletionMaxAllowedTime()
        }
    }

    public func setModelDataWithResult(_ dataType: Swift.String, _ data: WindowsStorageStreams_IInputStream?) throws -> WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationSetModelDataResult {
        try _iactivationSignalDetectionConfiguration2.setModelDataWithResult(dataType, data)
    }

    public func setModelDataWithResultAsync(_ dataType: Swift.String, _ data: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationSetModelDataResult> {
        try COM.NullResult.unwrap(_iactivationSignalDetectionConfiguration2.setModelDataWithResultAsync(dataType, data))
    }

    public func setEnabledWithResultAsync(_ value: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationStateChangeResult> {
        try COM.NullResult.unwrap(_iactivationSignalDetectionConfiguration2.setEnabledWithResultAsync(value))
    }

    public func setEnabledWithResult(_ value: Swift.Bool) throws -> WindowsApplicationModelConversationalAgent_ActivationSignalDetectionConfigurationStateChangeResult {
        try _iactivationSignalDetectionConfiguration2.setEnabledWithResult(value)
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iactivationSignalDetectionConfiguration2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetectionConfiguration2>? = nil

    internal var _iactivationSignalDetectionConfiguration2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetectionConfiguration2> {
        get throws {
            try _iactivationSignalDetectionConfiguration2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetectionConfiguration2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelConversationalAgent_IActivationSignalDetectionConfiguration2.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _iactivationSignalDetectionConfiguration2_storage?.release()
    }
}