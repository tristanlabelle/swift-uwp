// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a source object for properties that use a Scalable Vector Graphics (SVG) source. You can define a SvgImageSource by using a Uniform Resource Identifier (URI) that references a SVG file, or by calling SetSourceAsync(IRandomAccessStream) and supplying a stream.
open class WindowsUIXamlMediaImaging_SvgImageSource: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Media.Imaging.ISvgImageSourceFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlMediaImaging_SvgImageSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isvgImageSourceFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    public convenience init(_ uriSource: WindowsFoundation_Uri?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlMediaImaging_SvgImageSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isvgImageSourceFactory.createInstanceWithUriSource(uriSource, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Media.Imaging.ISvgImageSource members

    /// Gets or sets the height to use for SVG rasterization operations.
    /// - Returns: The height (in logical pixels) to use for SVG decoding operations. The default is **Double.NaN**.
    public var rasterizePixelHeight: Swift.Double {
        get throws {
            try _isvgImageSource.get_RasterizePixelHeight()
        }
    }

    /// Gets or sets the height to use for SVG rasterization operations.
    /// - Returns: The height (in logical pixels) to use for SVG decoding operations. The default is **Double.NaN**.
    public func rasterizePixelHeight(_ value: Swift.Double) throws {
        try _isvgImageSource.put_RasterizePixelHeight(value)
    }

    /// Gets or sets the width to use for SVG rasterization operations.
    /// - Returns: The width (in logical pixels) to use for SVG decoding operations. The default is **Double.NaN**.
    public var rasterizePixelWidth: Swift.Double {
        get throws {
            try _isvgImageSource.get_RasterizePixelWidth()
        }
    }

    /// Gets or sets the width to use for SVG rasterization operations.
    /// - Returns: The width (in logical pixels) to use for SVG decoding operations. The default is **Double.NaN**.
    public func rasterizePixelWidth(_ value: Swift.Double) throws {
        try _isvgImageSource.put_RasterizePixelWidth(value)
    }

    /// Gets or sets the Uniform Resource Identifier (URI) of the SVG source file that generated this SvgImageSource.
    /// - Returns: An object describing the Uniform Resource Identifier (URI) of the SVG source file that generated this SvgImageSource.
    public var uriSource: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_isvgImageSource.get_UriSource())
        }
    }

    /// Gets or sets the Uniform Resource Identifier (URI) of the SVG source file that generated this SvgImageSource.
    /// - Returns: An object describing the Uniform Resource Identifier (URI) of the SVG source file that generated this SvgImageSource.
    public func uriSource(_ value: WindowsFoundation_Uri?) throws {
        try _isvgImageSource.put_UriSource(value)
    }

    /// Occurs when there is an error associated with SVG retrieval or format.
    public func openFailed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlMediaImaging_SvgImageSource?, WindowsUIXamlMediaImaging_SvgImageSourceFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isvgImageSource.add_OpenFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: openFailed)
    }

    public func openFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isvgImageSource.remove_OpenFailed(token)
    }

    /// Occurs when the SVG source is downloaded and decoded with no failure.
    public func opened(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlMediaImaging_SvgImageSource?, WindowsUIXamlMediaImaging_SvgImageSourceOpenedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isvgImageSource.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isvgImageSource.remove_Opened(token)
    }

    /// Sets the source SVG for a SvgImageSource by accessing a stream and processing the result asynchronously.
    /// - Parameter streamSource: The stream source that sets the SVG source value.
    /// - Returns: A SvgImageSourceLoadStatus value that indicates whether the operation was successful. If it failed, indicates the reason for the failure.
    public func setSourceAsync(_ streamSource: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlMediaImaging_SvgImageSourceLoadStatus> {
        try COM.NullResult.unwrap(_isvgImageSource.setSourceAsync(streamSource))
    }

    // MARK: Windows.UI.Xaml.Media.Imaging.ISvgImageSourceStatics members

    /// Identifies the **RasterizePixelHeight** dependency property.
    /// - Returns: The identifier for the **RasterizePixelHeight** dependency property.
    public static var rasterizePixelHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isvgImageSourceStatics.get_RasterizePixelHeightProperty())
        }
    }

    /// Identifies the **RasterizePixelWidth** dependency property.
    /// - Returns: The identifier for the **RasterizePixelWidth** dependency property.
    public static var rasterizePixelWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isvgImageSourceStatics.get_RasterizePixelWidthProperty())
        }
    }

    /// Identifies the **UriSource** dependency property.
    /// - Returns: The identifier for the **UriSource** dependency property.
    public static var uriSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isvgImageSourceStatics.get_UriSourceProperty())
        }
    }

    // MARK: Implementation details

    private var _isvgImageSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSource>? = nil

    internal var _isvgImageSource: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSource> {
        get throws {
            try _isvgImageSource_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSource.iid).cast(to: CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSource.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSource>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _isvgImageSource_storage?.release()
    }

    private static var _isvgImageSourceFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceFactory>? = nil

    internal static var _isvgImageSourceFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceFactory> {
        get throws {
            try _isvgImageSourceFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Imaging.SvgImageSource", id: CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceFactory.iid)
            }
        }
    }

    private static var _isvgImageSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceStatics>? = nil

    internal static var _isvgImageSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceStatics> {
        get throws {
            try _isvgImageSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Imaging.SvgImageSource", id: CWinRT.SWRT_WindowsUIXamlMediaImaging_ISvgImageSourceStatics.iid)
            }
        }
    }
}