// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a source object, backed by a SoftwareBitmap, for properties that use a bitmap-format image source.
public final class WindowsUIXamlMediaImaging_SoftwareBitmapSource: WindowsRuntime.WinRTImport<WindowsUIXamlMediaImaging_SoftwareBitmapSourceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMediaImaging_SoftwareBitmapSourceProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.Imaging.ISoftwareBitmapSource members

    /// Sets the source SoftwareBitmap to be used as an image source.
    /// - Parameter softwareBitmap: The SoftwareBitmap to be used as an image source.
    /// - Returns: An asynchronous action.
    public func setBitmapAsync(_ softwareBitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setBitmapAsync(softwareBitmap))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes of the object and associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}