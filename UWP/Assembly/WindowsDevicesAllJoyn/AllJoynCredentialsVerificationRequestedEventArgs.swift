// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Used to allow the application to indicate whether the credentials provided by a peer are valid.
public final class WindowsDevicesAllJoyn_AllJoynCredentialsVerificationRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsDevicesAllJoyn_AllJoynCredentialsVerificationRequestedEventArgsProjection> {
    // MARK: Windows.Devices.AllJoyn.IAllJoynCredentialsVerificationRequestedEventArgs members

    /// The mechanism used to authenticate credentials.
    /// - Returns: The authentication mechanism.
    public var authenticationMechanism: WindowsDevicesAllJoyn_AllJoynAuthenticationMechanism {
        get throws {
            try _interop.get_AuthenticationMechanism()
        }
    }

    /// The cryptography certificate provided for authentication.
    /// - Returns: The cryptography certificate.
    public var peerCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PeerCertificate())
        }
    }

    /// The category of an errors encountered authenticating the cryptography certificate.
    /// - Returns: The severity of the error.
    public var peerCertificateErrorSeverity: WindowsNetworkingSockets_SocketSslErrorSeverity {
        get throws {
            try _interop.get_PeerCertificateErrorSeverity()
        }
    }

    /// A list of errors that occurred during authentication of the provided cryptography certificate.
    /// - Returns: A list of credential errors.
    public var peerCertificateErrors: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PeerCertificateErrors())
        }
    }

    /// Retrieves the intermediate certificates sent during authentication.
    /// - Returns: A list of the intermediate certificates.
    public var peerIntermediateCertificates: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PeerIntermediateCertificates())
        }
    }

    /// The unique bus name of the remote app being authenticated.
    /// - Returns: A unique bus name.
    public var peerUniqueName: Swift.String {
        get throws {
            try _interop.get_PeerUniqueName()
        }
    }

    /// Calling this method indicates that the credentials provided for authentication are valid.
    public func accept() throws {
        try _interop.accept()
    }

    /// Conducts verification of provided of credentials asynchronously.
    /// - Returns: The verification deferral.
    public func getDeferral() throws -> WindowsFoundation_Deferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    // MARK: Implementation details
}