// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Identifies an account from a web account provider.
public final class WindowsSecurityCredentials_WebAccount: WindowsRuntime.WinRTImport<WindowsSecurityCredentials_WebAccountProjection>, WindowsSecurityCredentials_IWebAccountProtocol {
    // MARK: Windows.Security.Credentials.IWebAccountFactory members

    public convenience init(_ webAccountProvider: WindowsSecurityCredentials_WebAccountProvider?, _ userName: Swift.String, _ state: WindowsSecurityCredentials_WebAccountState) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwebAccountFactory.createWebAccount(webAccountProvider, userName, state)))
    }

    // MARK: Windows.Security.Credentials.IWebAccount members

    /// Gets the connected state of the web account.
    /// - Returns: The connected state of the web account.
    public var state: WindowsSecurityCredentials_WebAccountState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Gets the username for the web account.
    /// - Returns: The username for the web account.
    public var userName: Swift.String {
        get throws {
            try _interop.get_UserName()
        }
    }

    /// Gets the web authentication provider for the account.
    /// - Returns: The web authentication provider for the account.
    public var webAccountProvider: WindowsSecurityCredentials_WebAccountProvider {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WebAccountProvider())
        }
    }

    // MARK: Windows.Security.Credentials.IWebAccount2 members

    /// Gets the Id of the web account.
    /// - Returns: The Id of the WebAccount.
    public var id: Swift.String {
        get throws {
            try _iwebAccount2.get_Id()
        }
    }

    /// Gets the properties of the web account.
    /// - Returns: The properties of the WebAccount.
    public var properties: WindowsFoundationCollections_IMapView<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_iwebAccount2.get_Properties())
        }
    }

    /// Gets the web account's picture asynchronously.
    /// - Parameter desizedSize: The desired size of the web account picture.
    /// - Returns: When this method completes, it returns the web account's picture.
    public func getPictureAsync(_ desizedSize: WindowsSecurityCredentials_WebAccountPictureSize) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_iwebAccount2.getPictureAsync(desizedSize))
    }

    /// Signs the web account out asynchronously. This clears all cached tokens associated with the account, and tells the provider to invalidate any tokens associated with the account for this app.
    /// - Returns: This method does not return a value.
    public func signOutAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccount2.signOutAsync())
    }

    /// Signs the web account out asynchronously. This clears all cached tokens associated with the account, and tells the provider to invalidate any tokens associated with the account for this app.
    /// - Parameter clientId: The Id of the client.
    /// - Returns: This method does not return a value.
    public func signOutAsync(_ clientId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccount2.signOutWithClientIdAsync(clientId))
    }

    // MARK: Implementation details

    private var _iwebAccount2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccount2>? = nil

    internal var _iwebAccount2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccount2> {
        get throws {
            try _iwebAccount2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCredentials_IWebAccount2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccount2.self)
            }
        }
    }

    deinit {
        _iwebAccount2_storage?.release()
    }

    private static var _iwebAccountFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountFactory>? = nil

    internal static var _iwebAccountFactory: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountFactory> {
        get throws {
            try _iwebAccountFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Credentials.WebAccount", id: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountFactory.iid)
            }
        }
    }
}