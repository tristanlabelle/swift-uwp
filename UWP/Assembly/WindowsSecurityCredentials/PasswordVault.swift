// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Credential Locker of credentials. The contents of the locker are specific to the app or service. Apps and services don't have access to credentials associated with other apps or services.
public final class WindowsSecurityCredentials_PasswordVault: WindowsRuntime.WinRTImport<WindowsSecurityCredentials_PasswordVaultProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCredentials_PasswordVaultProjection.self))
    }

    // MARK: Windows.Security.Credentials.IPasswordVault members

    /// Adds a credential to the Credential Locker.
    /// - Parameter credential: The credential to be added.
    public func add(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.add(credential)
    }

    /// Removes a credential from the Credential Locker.
    /// - Parameter credential: The credential to be removed.
    public func remove(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.remove(credential)
    }

    /// Reads a credential from the Credential Locker.
    /// - Parameter resource: The resource for which the credential is used.
    /// - Parameter userName: The user name that must be present in the credential.
    /// - Returns: The returned credential that contains all the data.
    public func retrieve(_ resource: Swift.String, _ userName: Swift.String) throws -> WindowsSecurityCredentials_PasswordCredential {
        try COM.NullResult.unwrap(_interop.retrieve(resource, userName))
    }

    /// Searches the Credential Locker for credentials matching the resource specified.
    /// - Parameter resource: The resource to be searched for. If a match does not exist, an exception will throw.
    /// - Returns: When this method returns, contains an [IVectorView](https://docs.microsoft.com/previous-versions/br224594(v=vs.85)) of credential objects that match the search criteria.
    public func findAllByResource(_ resource: Swift.String) throws -> WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_PasswordCredential?> {
        try COM.NullResult.unwrap(_interop.findAllByResource(resource))
    }

    /// Searches the Credential Locker for credentials that match the user name specified.
    /// - Parameter userName: The user name to be searched for. If a match does not exist, an exception will throw.
    /// - Returns: When this method returns, contains an [IVectorView](https://docs.microsoft.com/previous-versions/br224594(v=vs.85)) of credential objects that match the search criteria.
    public func findAllByUserName(_ userName: Swift.String) throws -> WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_PasswordCredential?> {
        try COM.NullResult.unwrap(_interop.findAllByUserName(userName))
    }

    /// Retrieves all of the credentials stored in the Credential Locker.
    /// - Returns: When this method returns, contains an [IVectorView](https://docs.microsoft.com/previous-versions/br224594(v=vs.85)) output of credential objects that match the search criteria. This output is a snapshot and not dynamic. If the results are used for updating or deleting credentials, those changes won't be reflected in the previous output.
    public func retrieveAll() throws -> WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_PasswordCredential?> {
        try COM.NullResult.unwrap(_interop.retrieveAll())
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Credentials.PasswordVault", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}