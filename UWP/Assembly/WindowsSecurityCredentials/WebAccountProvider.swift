// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a web account authentication provider.
public final class WindowsSecurityCredentials_WebAccountProvider: WindowsRuntime.WinRTImport<WindowsSecurityCredentials_WebAccountProviderProjection> {
    // MARK: Windows.Security.Credentials.IWebAccountProviderFactory members

    public convenience init(_ id: Swift.String, _ displayName: Swift.String, _ iconUri: WindowsFoundation_Uri?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwebAccountProviderFactory.createWebAccountProvider(id, displayName, iconUri)))
    }

    // MARK: Windows.Security.Credentials.IWebAccountProvider members

    /// Gets the display name for the web account provider.
    /// - Returns: The display name for the web account provider.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets the Uri of the icon image to display for the web account provider.
    /// - Returns: The Uri of the icon image to display for the web account provider.
    public var iconUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_IconUri())
        }
    }

    /// Gets the web account provider id.
    /// - Returns: The web account provider id.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    // MARK: Windows.Security.Credentials.IWebAccountProvider2 members

    /// Gets the authority of the web account provider. Use authority to disambiguate between a single provider with multiple identities (such as a Microsoft account versus Azure Active Directory).
    /// - Returns: The authority of the web account provider.
    public var authority: Swift.String {
        get throws {
            try _iwebAccountProvider2.get_Authority()
        }
    }

    /// Gets the display purpose of the web account provider.
    /// - Returns: The display purpose of the web account provider.
    public var displayPurpose: Swift.String {
        get throws {
            try _iwebAccountProvider2.get_DisplayPurpose()
        }
    }

    // MARK: Windows.Security.Credentials.IWebAccountProvider3 members

    /// Gets the user associated with the provider.
    /// - Returns: The user associated with the provider.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iwebAccountProvider3.get_User())
        }
    }

    // MARK: Windows.Security.Credentials.IWebAccountProvider4 members

    /// Gets the value describing whether the given ID provider supports system-wide authentication tokens.
    /// - Returns: **True** if the WebAccountProvider allows system-wide authentication tokens. Otherwise **False**.
    public var isSystemProvider: Swift.Bool {
        get throws {
            try _iwebAccountProvider4.get_IsSystemProvider()
        }
    }

    // MARK: Implementation details

    private var _iwebAccountProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider2>? = nil

    internal var _iwebAccountProvider2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider2> {
        get throws {
            try _iwebAccountProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider2.self)
            }
        }
    }

    private var _iwebAccountProvider3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider3>? = nil

    internal var _iwebAccountProvider3: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider3> {
        get throws {
            try _iwebAccountProvider3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider3.iid).cast(to: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider3.self)
            }
        }
    }

    private var _iwebAccountProvider4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider4>? = nil

    internal var _iwebAccountProvider4: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider4> {
        get throws {
            try _iwebAccountProvider4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider4.iid).cast(to: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProvider4.self)
            }
        }
    }

    deinit {
        _iwebAccountProvider2_storage?.release()
        _iwebAccountProvider3_storage?.release()
        _iwebAccountProvider4_storage?.release()
    }

    private static var _iwebAccountProviderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProviderFactory>? = nil

    internal static var _iwebAccountProviderFactory: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProviderFactory> {
        get throws {
            try _iwebAccountProviderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Credentials.WebAccountProvider", id: CWinRT.SWRT_WindowsSecurityCredentials_IWebAccountProviderFactory.iid)
            }
        }
    }
}