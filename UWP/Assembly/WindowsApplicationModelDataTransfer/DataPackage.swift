// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the data that a user wants to exchange with another app.
public final class WindowsApplicationModelDataTransfer_DataPackage: WindowsRuntime.WinRTImport<WindowsApplicationModelDataTransfer_DataPackageProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelDataTransfer_DataPackageProjection.self))
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataPackage members

    /// Allows you to get and set properties like the title of the content being shared.
    /// - Returns: A collection of properties that describe the data contained in a DataPackage.
    public var properties: WindowsApplicationModelDataTransfer_DataPackagePropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Specifies the DataPackageOperation (none, move, copy, or link) for the operation.
    /// - Returns: The operation requested by the source app.
    public var requestedOperation: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get throws {
            try _interop.get_RequestedOperation()
        }
    }

    /// Specifies the DataPackageOperation (none, move, copy, or link) for the operation.
    /// - Returns: The operation requested by the source app.
    public func requestedOperation(_ value: WindowsApplicationModelDataTransfer_DataPackageOperation) throws {
        try _interop.put_RequestedOperation(value)
    }

    /// Maps a URI to a file. Used to ensure that referenced content (such as an image) in HTML content is added to the DataPackage.
    /// - Returns: Specifies a name/value pair that specifies the an HTML path with a corresponding StreamReference object.
    public var resourceMap: WindowsFoundationCollections_IMap<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ResourceMap())
        }
    }

    /// Occurs when the DataPackage is destroyed.
    public func destroyed(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Destroyed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: destroyed)
    }

    public func destroyed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Destroyed(token)
    }

    /// Occurs when a paste operation is completed.
    public func operationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsApplicationModelDataTransfer_OperationCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_OperationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: operationCompleted)
    }

    public func operationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_OperationCompleted(token)
    }

    /// Returns a DataPackageView object. This object is a read-only copy of the DataPackage object.
    /// - Returns: The object that is a read-only copy of the DataPackage object.
    public func getView() throws -> WindowsApplicationModelDataTransfer_DataPackageView {
        try COM.NullResult.unwrap(_interop.getView())
    }

    /// Sets the data contained in the DataPackage in a RandomAccessStream format.
    /// - Parameter formatId: Specifies the format of the data. We recommend that you set this value by using the StandardDataFormats class.
    /// - Parameter value: Specifies the content that the DataPackage contains.
    public func setData(_ formatId: Swift.String, _ value: WindowsRuntime.IInspectable?) throws {
        try _interop.setData(formatId, value)
    }

    /// Sets a delegate to handle requests from the target app.
    /// - Parameter formatId: Specifies the format of the data. We recommend that you set this value by using the StandardDataFormats class.
    /// - Parameter delayRenderer: A delegate that is responsible for processing requests from a target app.
    public func setDataProvider(_ formatId: Swift.String, _ delayRenderer: WindowsApplicationModelDataTransfer_DataProviderHandler?) throws {
        try _interop.setDataProvider(formatId, delayRenderer)
    }

    /// Sets the text that a DataPackage contains.
    /// - Parameter value: The text.
    public func setText(_ value: Swift.String) throws {
        try _interop.setText(value)
    }

    /// Sets the Uniform Resource Identifier (URI) that is contained in the DataPackage.
    /// - Parameter value: The Uniform Resource Identifier (URI) that is contained in the DataPackage.
    public func setUri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.setUri(value)
    }

    /// Adds HTML content to the DataPackage.
    /// - Parameter value: The HTML content.
    public func setHtmlFormat(_ value: Swift.String) throws {
        try _interop.setHtmlFormat(value)
    }

    /// Sets the Rich Text Format (RTF) content that is contained in a DataPackage.
    /// - Parameter value: Specifies the Rich Text Format (RTF) content for the DataPackage.
    public func setRtf(_ value: Swift.String) throws {
        try _interop.setRtf(value)
    }

    /// Sets the bitmap image contained in the DataPackage.
    /// - Parameter value: A stream that contains the bitmap image.
    public func setBitmap(_ value: WindowsStorageStreams_RandomAccessStreamReference?) throws {
        try _interop.setBitmap(value)
    }

    public func setStorageItems(_ value: WindowsFoundationCollections_IIterable<WindowsStorage_IStorageItem?>?) throws {
        try _interop.setStorageItemsReadOnly(value)
    }

    public func setStorageItems(_ value: WindowsFoundationCollections_IIterable<WindowsStorage_IStorageItem?>?, _ readOnly: Swift.Bool) throws {
        try _interop.setStorageItems(value, readOnly)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataPackage2 members

    /// Sets the application link that a DataPackage contains.
    /// - Parameter value: A Uniform Resource Identifier (URI) with a scheme that isn't **http** or **https** that's handled by the source app.
    public func setApplicationLink(_ value: WindowsFoundation_Uri?) throws {
        try _idataPackage2.setApplicationLink(value)
    }

    /// Sets the web link that a DataPackage contains.
    /// - Parameter value: A Uniform Resource Identifier (URI) with an **http** or **https** scheme that corresponds to the content being displayed to the user.
    public func setWebLink(_ value: WindowsFoundation_Uri?) throws {
        try _idataPackage2.setWebLink(value)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataPackage3 members

    /// An event that is triggered when a share is completed. Shares can be sent to an app, a provider, or a contact.
    public func shareCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsApplicationModelDataTransfer_ShareCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idataPackage3.add_ShareCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shareCompleted)
    }

    public func shareCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idataPackage3.remove_ShareCompleted(token)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataPackage4 members

    /// Raised when a share is canceled.
    public func shareCanceled(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idataPackage4.add_ShareCanceled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shareCanceled)
    }

    public func shareCanceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idataPackage4.remove_ShareCanceled(token)
    }

    // MARK: Implementation details

    private var _idataPackage2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage2>? = nil

    internal var _idataPackage2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage2> {
        get throws {
            try _idataPackage2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage2.self)
            }
        }
    }

    private var _idataPackage3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage3>? = nil

    internal var _idataPackage3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage3> {
        get throws {
            try _idataPackage3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage3.self)
            }
        }
    }

    private var _idataPackage4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage4>? = nil

    internal var _idataPackage4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage4> {
        get throws {
            try _idataPackage4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataPackage4.self)
            }
        }
    }

    deinit {
        _idataPackage2_storage?.release()
        _idataPackage3_storage?.release()
        _idataPackage4_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.DataPackage", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}