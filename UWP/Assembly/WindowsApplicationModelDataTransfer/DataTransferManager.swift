// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Programmatically initiates an exchange of content with other apps.
public final class WindowsApplicationModelDataTransfer_DataTransferManager: WindowsRuntime.WinRTImport<WindowsApplicationModelDataTransfer_DataTransferManagerProjection> {
    // MARK: Windows.ApplicationModel.DataTransfer.IDataTransferManager members

    /// Occurs when a share operation starts.
    public func dataRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataTransferManager?, WindowsApplicationModelDataTransfer_DataRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DataRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dataRequested)
    }

    public func dataRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DataRequested(token)
    }

    /// Occurs when the user chooses a target app in the Share charm.
    public func targetApplicationChosen(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataTransferManager?, WindowsApplicationModelDataTransfer_TargetApplicationChosenEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TargetApplicationChosen(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: targetApplicationChosen)
    }

    public func targetApplicationChosen(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TargetApplicationChosen(token)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataTransferManager2 members

    /// An event that is triggered when the share providers are requested. This is used as a callback and providers are added by subscribing to this event and calling ShareProvidersRequestedEventArgs.Providers.Add() in the event handler.
    public func shareProvidersRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataTransferManager?, WindowsApplicationModelDataTransfer_ShareProvidersRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idataTransferManager2.add_ShareProvidersRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shareProvidersRequested)
    }

    public func shareProvidersRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idataTransferManager2.remove_ShareProvidersRequested(token)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics members

    /// Programmatically initiates the user interface for sharing content with another app.
    public static func showShareUI() throws {
        try _idataTransferManagerStatics.showShareUI()
    }

    /// Returns the DataTransferManager object associated with the current window.
    /// - Returns: The DataTransferManager object associated with the current window.
    public static func getForCurrentView() throws -> WindowsApplicationModelDataTransfer_DataTransferManager {
        try COM.NullResult.unwrap(_idataTransferManagerStatics.getForCurrentView())
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics3 members

    /// Programmatically initiates the user interface for sharing content with another app.
    /// - Parameter options: The options.
    public static func showShareUI(_ options: WindowsApplicationModelDataTransfer_ShareUIOptions?) throws {
        try _idataTransferManagerStatics3.showShareUIWithOptions(options)
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IDataTransferManagerStatics2 members

    /// Returns true if the device supports sharing, false otherwise.
    /// - Returns: True if the device supports sharing, false otherwise.
    public static func isSupported() throws -> Swift.Bool {
        try _idataTransferManagerStatics2.isSupported()
    }

    // MARK: Implementation details

    private var _idataTransferManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManager2>? = nil

    internal var _idataTransferManager2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManager2> {
        get throws {
            try _idataTransferManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManager2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManager2.self)
            }
        }
    }

    deinit {
        _idataTransferManager2_storage?.release()
    }

    private static var _idataTransferManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics>? = nil

    internal static var _idataTransferManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics> {
        get throws {
            try _idataTransferManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.DataTransferManager", id: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics.iid)
            }
        }
    }

    private static var _idataTransferManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics3>? = nil

    internal static var _idataTransferManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics3> {
        get throws {
            try _idataTransferManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.DataTransferManager", id: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics3.iid)
            }
        }
    }

    private static var _idataTransferManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics2>? = nil

    internal static var _idataTransferManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics2> {
        get throws {
            try _idataTransferManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.DataTransferManager", id: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IDataTransferManagerStatics2.iid)
            }
        }
    }
}