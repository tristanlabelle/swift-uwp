// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Gets and sets information from the clipboard object.
public enum WindowsApplicationModelDataTransfer_Clipboard {
    // MARK: Windows.ApplicationModel.DataTransfer.IClipboardStatics members

    /// Occurs when the data stored in the Clipboard changes.
    public static func contentChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclipboardStatics.add_ContentChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contentChanged)
    }

    public static func contentChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclipboardStatics.remove_ContentChanged(token)
    }

    /// Gets the current content that is stored in the clipboard object.
    /// - Returns: Contains the content of the Clipboard.
    public static func getContent() throws -> WindowsApplicationModelDataTransfer_DataPackageView {
        try COM.NullResult.unwrap(_iclipboardStatics.getContent())
    }

    /// Sets the current content that is stored in the clipboard object.
    /// - Parameter content: Contains the content of the clipboard. If **NULL**, the clipboard is emptied.
    public static func setContent(_ content: WindowsApplicationModelDataTransfer_DataPackage?) throws {
        try _iclipboardStatics.setContent(content)
    }

    /// Adds the content to the Clipboard and releases the DataPackage object from the source app. This method allows the content to remain available after the application shuts down.
    public static func flush() throws {
        try _iclipboardStatics.flush()
    }

    /// Removes all data from the Clipboard.
    public static func clear() throws {
        try _iclipboardStatics.clear()
    }

    // MARK: Windows.ApplicationModel.DataTransfer.IClipboardStatics2 members

    /// Occurs when a new item is added to the clipboard history.
    public static func historyChanged(adding handler: WindowsFoundation_EventHandler<WindowsApplicationModelDataTransfer_ClipboardHistoryChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclipboardStatics2.add_HistoryChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: historyChanged)
    }

    public static func historyChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclipboardStatics2.remove_HistoryChanged(token)
    }

    /// Occurs when the OS setting that controls whether clipboard history is enabled for the current user is changed.
    public static func historyEnabledChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclipboardStatics2.add_HistoryEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: historyEnabledChanged)
    }

    public static func historyEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclipboardStatics2.remove_HistoryEnabledChanged(token)
    }

    /// Occurs when the OS setting that controls whether clipboard data is set to sync across devices for the current user is changed.
    public static func roamingEnabledChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclipboardStatics2.add_RoamingEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: roamingEnabledChanged)
    }

    public static func roamingEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclipboardStatics2.remove_RoamingEnabledChanged(token)
    }

    /// Gets the list of items currently in the clipboard history.
    /// - Returns: An asynchronous operation that, on successful completion, returns a ClipboardHistoryItemsResult object that contains the items currently in the clipboard history.
    public static func getHistoryItemsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_ClipboardHistoryItemsResult?> {
        try COM.NullResult.unwrap(_iclipboardStatics2.getHistoryItemsAsync())
    }

    /// Clears the clipboard history.
    /// - Returns: True if the clear history operation was successful; otherwise, false.
    public static func clearHistory() throws -> Swift.Bool {
        try _iclipboardStatics2.clearHistory()
    }

    /// Deletes the specified item from the clipboard history.
    /// - Parameter item: The item to remove from the clipboard history.
    /// - Returns: True if the item was successfully removed from the clipboard history; otherwise, false.
    public static func deleteItemFromHistory(_ item: WindowsApplicationModelDataTransfer_ClipboardHistoryItem?) throws -> Swift.Bool {
        try _iclipboardStatics2.deleteItemFromHistory(item)
    }

    /// Sets an item in the clipboard history as the current content for the clipboard.
    /// - Parameter item: The item in the clipboard history to set as the current content for the clipboard.
    /// - Returns: The status of the operation.
    public static func setHistoryItemAsContent(_ item: WindowsApplicationModelDataTransfer_ClipboardHistoryItem?) throws -> WindowsApplicationModelDataTransfer_SetHistoryItemAsContentStatus {
        try _iclipboardStatics2.setHistoryItemAsContent(item)
    }

    /// Indicates whether clipboard history (that is, the ability to save multiple items to the clipboard) is enabled for the current user.
    /// - Returns: True if clipboard history is enabled for the current user; otherwise, false.
    public static func isHistoryEnabled() throws -> Swift.Bool {
        try _iclipboardStatics2.isHistoryEnabled()
    }

    /// Indicates whether clipboard data is set to sync across devices for the current user.
    /// - Returns: True if clipboard data is set to sync across devices for the current user; otherwise, false.
    public static func isRoamingEnabled() throws -> Swift.Bool {
        try _iclipboardStatics2.isRoamingEnabled()
    }

    /// Sets the content that is stored in the clipboard object with options for the content.
    /// - Parameter content: Contains the content to store in the clipboard. If null, the clipboard is emptied.
    /// - Parameter options: An object that specifies options for the clipboard content, such as whether the content is allowed in the clipboard history and whether it will be synced to other devices.
    public static func setContentWithOptions(_ content: WindowsApplicationModelDataTransfer_DataPackage?, _ options: WindowsApplicationModelDataTransfer_ClipboardContentOptions?) throws -> Swift.Bool {
        try _iclipboardStatics2.setContentWithOptions(content, options)
    }

    // MARK: Implementation details

    private static var _iclipboardStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics>? = nil

    internal static var _iclipboardStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics> {
        get throws {
            try _iclipboardStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.Clipboard", id: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics.iid)
            }
        }
    }

    private static var _iclipboardStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics2>? = nil

    internal static var _iclipboardStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics2> {
        get throws {
            try _iclipboardStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.DataTransfer.Clipboard", id: CWinRT.SWRT_WindowsApplicationModelDataTransfer_IClipboardStatics2.iid)
            }
        }
    }
}