// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides an interface for a barometric sensor to measure atmospheric pressure.
public final class WindowsDevicesSensors_Barometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_BarometerProjection> {
    // MARK: Windows.Devices.Sensors.IBarometer members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// The smallest report interval that is supported by this barometer sensor.
    /// - Returns: The smallest ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the barometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the barometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the barometer sensor reports a new value.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Barometer?, WindowsDevicesSensors_BarometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current reading for the barometer.
    /// - Returns: The current atmospheric pressure according to this sensor.
    public func getCurrentReading() throws -> WindowsDevicesSensors_BarometerReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IBarometer2 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _ibarometer2.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _ibarometer2.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _ibarometer2.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IBarometer3 members

    /// Gets BarometerDataThreshold for the barometric pressure sensor.
    public var reportThreshold: WindowsDevicesSensors_BarometerDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_ibarometer3.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.IBarometerStatics2 members

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Barometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Barometer?> {
        try COM.NullResult.unwrap(_ibarometerStatics2.fromIdAsync(deviceId))
    }

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibarometerStatics2.getDeviceSelector()
    }

    // MARK: Windows.Devices.Sensors.IBarometerStatics members

    /// Returns the default barometer sensor.
    /// - Returns: The default barometer.
    public static func getDefault() throws -> WindowsDevicesSensors_Barometer {
        try COM.NullResult.unwrap(_ibarometerStatics.getDefault())
    }

    // MARK: Implementation details

    private var _ibarometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometer2>? = nil

    internal var _ibarometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometer2> {
        get throws {
            try _ibarometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IBarometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IBarometer2.self)
            }
        }
    }

    private var _ibarometer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometer3>? = nil

    internal var _ibarometer3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometer3> {
        get throws {
            try _ibarometer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IBarometer3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IBarometer3.self)
            }
        }
    }

    deinit {
        _ibarometer2_storage?.release()
        _ibarometer3_storage?.release()
    }

    private static var _ibarometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics2>? = nil

    internal static var _ibarometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics2> {
        get throws {
            try _ibarometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Barometer", id: CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics2.iid)
            }
        }
    }

    private static var _ibarometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics>? = nil

    internal static var _ibarometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics> {
        get throws {
            try _ibarometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Barometer", id: CWinRT.SWRT_WindowsDevicesSensors_IBarometerStatics.iid)
            }
        }
    }
}