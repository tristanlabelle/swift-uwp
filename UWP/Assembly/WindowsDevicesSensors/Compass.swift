// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a compass sensor.
public final class WindowsDevicesSensors_Compass: WindowsRuntime.WinRTImport<WindowsDevicesSensors_CompassProjection> {
    // MARK: Windows.Devices.Sensors.ICompass members

    /// Gets the minimum report interval supported by the compass.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the compass.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the compass.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the compass reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Compass?, WindowsDevicesSensors_CompassReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current compass reading.
    /// - Returns: The current compass reading.
    public func getCurrentReading() throws -> WindowsDevicesSensors_CompassReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.ICompassDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _icompassDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.ICompass2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _icompass2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _icompass2.put_ReadingTransform(value)
    }

    // MARK: Windows.Devices.Sensors.ICompass3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _icompass3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _icompass3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _icompass3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.ICompass4 members

    /// Gets the CompassDataThreshold for the compass sensor.
    public var reportThreshold: WindowsDevicesSensors_CompassDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_icompass4.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.ICompassStatics members

    /// Returns the default compass.
    /// - Returns: The default compass or null if no integrated compasses are found.
    public static func getDefault() throws -> WindowsDevicesSensors_Compass {
        try COM.NullResult.unwrap(_icompassStatics.getDefault())
    }

    // MARK: Windows.Devices.Sensors.ICompassStatics2 members

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _icompassStatics2.getDeviceSelector()
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Compass object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Compass?> {
        try COM.NullResult.unwrap(_icompassStatics2.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _icompassDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassDeviceId>? = nil

    internal var _icompassDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassDeviceId> {
        get throws {
            try _icompassDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompassDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompassDeviceId.self)
            }
        }
    }

    private var _icompass2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass2>? = nil

    internal var _icompass2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass2> {
        get throws {
            try _icompass2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompass2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompass2.self)
            }
        }
    }

    private var _icompass3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass3>? = nil

    internal var _icompass3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass3> {
        get throws {
            try _icompass3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompass3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompass3.self)
            }
        }
    }

    private var _icompass4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass4>? = nil

    internal var _icompass4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompass4> {
        get throws {
            try _icompass4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompass4.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompass4.self)
            }
        }
    }

    deinit {
        _icompassDeviceId_storage?.release()
        _icompass2_storage?.release()
        _icompass3_storage?.release()
        _icompass4_storage?.release()
    }

    private static var _icompassStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics>? = nil

    internal static var _icompassStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics> {
        get throws {
            try _icompassStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Compass", id: CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics.iid)
            }
        }
    }

    private static var _icompassStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics2>? = nil

    internal static var _icompassStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics2> {
        get throws {
            try _icompassStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Compass", id: CWinRT.SWRT_WindowsDevicesSensors_ICompassStatics2.iid)
            }
        }
    }
}