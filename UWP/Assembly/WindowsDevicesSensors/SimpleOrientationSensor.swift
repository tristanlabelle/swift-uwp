// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a simple orientation sensor.
public final class WindowsDevicesSensors_SimpleOrientationSensor: WindowsRuntime.WinRTImport<WindowsDevicesSensors_SimpleOrientationSensorProjection> {
    // MARK: Windows.Devices.Sensors.ISimpleOrientationSensor members

    /// Occurs each time the simple orientation sensor reports a new sensor reading
    public func orientationChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_SimpleOrientationSensor?, WindowsDevicesSensors_SimpleOrientationSensorOrientationChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_OrientationChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: orientationChanged)
    }

    public func orientationChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_OrientationChanged(token)
    }

    /// Gets the default simple orientation sensor.
    /// - Returns: The default simple orientation sensor.
    public func getCurrentOrientation() throws -> WindowsDevicesSensors_SimpleOrientation {
        try _interop.getCurrentOrientation()
    }

    // MARK: Windows.Devices.Sensors.ISimpleOrientationSensorDeviceId members

    /// Gets the device identifier used in the SimpleOrientationSensor.FromIdAsync method.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _isimpleOrientationSensorDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.ISimpleOrientationSensor2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _isimpleOrientationSensor2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _isimpleOrientationSensor2.put_ReadingTransform(value)
    }

    // MARK: Windows.Devices.Sensors.ISimpleOrientationSensorStatics2 members

    /// Retrieves an Advanced Query Syntax (AQS) string used to enumerate the available SimpleOrientationSensor devices.
    /// - Returns: The device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _isimpleOrientationSensorStatics2.getDeviceSelector()
    }

    /// Asynchronously retrieves a SimpleOrientationSensor object based on the specified device identifier.
    /// - Parameter deviceId: The SimpleOrientationSensor device identifier.
    /// - Returns: After the operation completes, returns the SimpleOrientationSensor instance based on the value of deviceId.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_SimpleOrientationSensor?> {
        try COM.NullResult.unwrap(_isimpleOrientationSensorStatics2.fromIdAsync(deviceId))
    }

    // MARK: Windows.Devices.Sensors.ISimpleOrientationSensorStatics members

    /// Gets the default simple orientation sensor.
    /// - Returns: The default simple orientation sensor or null if no simple orientation sensors are found.
    public static func getDefault() throws -> WindowsDevicesSensors_SimpleOrientationSensor {
        try COM.NullResult.unwrap(_isimpleOrientationSensorStatics.getDefault())
    }

    // MARK: Implementation details

    private var _isimpleOrientationSensorDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorDeviceId>? = nil

    internal var _isimpleOrientationSensorDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorDeviceId> {
        get throws {
            try _isimpleOrientationSensorDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorDeviceId.self)
            }
        }
    }

    private var _isimpleOrientationSensor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensor2>? = nil

    internal var _isimpleOrientationSensor2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensor2> {
        get throws {
            try _isimpleOrientationSensor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensor2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensor2.self)
            }
        }
    }

    deinit {
        _isimpleOrientationSensorDeviceId_storage?.release()
        _isimpleOrientationSensor2_storage?.release()
    }

    private static var _isimpleOrientationSensorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics2>? = nil

    internal static var _isimpleOrientationSensorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics2> {
        get throws {
            try _isimpleOrientationSensorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.SimpleOrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics2.iid)
            }
        }
    }

    private static var _isimpleOrientationSensorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics>? = nil

    internal static var _isimpleOrientationSensorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics> {
        get throws {
            try _isimpleOrientationSensorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.SimpleOrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_ISimpleOrientationSensorStatics.iid)
            }
        }
    }
}