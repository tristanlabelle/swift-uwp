// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an ambient-light sensor.
public final class WindowsDevicesSensors_LightSensor: WindowsRuntime.WinRTImport<WindowsDevicesSensors_LightSensorProjection> {
    // MARK: Windows.Devices.Sensors.ILightSensor members

    /// Gets the minimum report interval supported by the sensor.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the ambient light sensor.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the ambient light sensor.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the ambient-light sensor reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_LightSensor?, WindowsDevicesSensors_LightSensorReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current ambient-light sensor reading.
    /// - Returns: The current ambient-light sensor reading.
    public func getCurrentReading() throws -> WindowsDevicesSensors_LightSensorReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.ILightSensorDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _ilightSensorDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.ILightSensor2 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _ilightSensor2.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _ilightSensor2.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _ilightSensor2.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.ILightSensor3 members

    /// Gets the LightSensorDataThreshold for the light sensor.
    public var reportThreshold: WindowsDevicesSensors_LightSensorDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_ilightSensor3.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.ILightSensorStatics2 members

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ilightSensorStatics2.getDeviceSelector()
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the LightSensor object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_LightSensor?> {
        try COM.NullResult.unwrap(_ilightSensorStatics2.fromIdAsync(deviceId))
    }

    // MARK: Windows.Devices.Sensors.ILightSensorStatics members

    /// Returns the default ambient-light sensor.
    /// - Returns: The default ambient-light sensor or null if no integrated light sensors are found.
    public static func getDefault() throws -> WindowsDevicesSensors_LightSensor {
        try COM.NullResult.unwrap(_ilightSensorStatics.getDefault())
    }

    // MARK: Implementation details

    private var _ilightSensorDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorDeviceId>? = nil

    internal var _ilightSensorDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorDeviceId> {
        get throws {
            try _ilightSensorDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ILightSensorDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ILightSensorDeviceId.self)
            }
        }
    }

    private var _ilightSensor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensor2>? = nil

    internal var _ilightSensor2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensor2> {
        get throws {
            try _ilightSensor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ILightSensor2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ILightSensor2.self)
            }
        }
    }

    private var _ilightSensor3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensor3>? = nil

    internal var _ilightSensor3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensor3> {
        get throws {
            try _ilightSensor3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ILightSensor3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ILightSensor3.self)
            }
        }
    }

    deinit {
        _ilightSensorDeviceId_storage?.release()
        _ilightSensor2_storage?.release()
        _ilightSensor3_storage?.release()
    }

    private static var _ilightSensorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics2>? = nil

    internal static var _ilightSensorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics2> {
        get throws {
            try _ilightSensorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.LightSensor", id: CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics2.iid)
            }
        }
    }

    private static var _ilightSensorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics>? = nil

    internal static var _ilightSensorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics> {
        get throws {
            try _ilightSensorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.LightSensor", id: CWinRT.SWRT_WindowsDevicesSensors_ILightSensorStatics.iid)
            }
        }
    }
}