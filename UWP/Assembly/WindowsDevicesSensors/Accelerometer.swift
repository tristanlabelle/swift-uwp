// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an accelerometer sensor.
public final class WindowsDevicesSensors_Accelerometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_AccelerometerProjection> {
    // MARK: Windows.Devices.Sensors.IAccelerometer members

    /// Gets the minimum report interval supported by the accelerometer.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the accelerometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the accelerometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the accelerometer reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Accelerometer?, WindowsDevicesSensors_AccelerometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Occurs when the accelerometer detects that the PC has been shaken.
    public func shaken(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Accelerometer?, WindowsDevicesSensors_AccelerometerShakenEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Shaken(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shaken)
    }

    public func shaken(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Shaken(token)
    }

    /// Gets the current accelerometer reading.
    /// - Returns: This method has no parameters.
    public func getCurrentReading() throws -> WindowsDevicesSensors_AccelerometerReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IAccelerometerDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _iaccelerometerDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.IAccelerometer2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _iaccelerometer2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _iaccelerometer2.put_ReadingTransform(value)
    }

    // MARK: Windows.Devices.Sensors.IAccelerometer3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _iaccelerometer3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _iaccelerometer3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _iaccelerometer3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IAccelerometer4 members

    /// Gets the type of accelerometer sensor the is represented by this object.
    /// - Returns: The type of accelerometer.
    public var readingType: WindowsDevicesSensors_AccelerometerReadingType {
        get throws {
            try _iaccelerometer4.get_ReadingType()
        }
    }

    // MARK: Windows.Devices.Sensors.IAccelerometer5 members

    /// Gets the AccelerometerDataThreshold for the accelerometer sensor.
    public var reportThreshold: WindowsDevicesSensors_AccelerometerDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_iaccelerometer5.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.IAccelerometerStatics members

    /// Returns the default accelerometer.
    /// - Returns: The default accelerometer or null if no integrated accelerometers are found.
    public static func getDefault() throws -> WindowsDevicesSensors_Accelerometer {
        try COM.NullResult.unwrap(_iaccelerometerStatics.getDefault())
    }

    // MARK: Windows.Devices.Sensors.IAccelerometerStatics3 members

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Accelerometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Accelerometer?> {
        try COM.NullResult.unwrap(_iaccelerometerStatics3.fromIdAsync(deviceId))
    }

    /// Gets the device selector.
    /// - Parameter readingType: The type of sensor to retrieve.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector(_ readingType: WindowsDevicesSensors_AccelerometerReadingType) throws -> Swift.String {
        try _iaccelerometerStatics3.getDeviceSelector(readingType)
    }

    // MARK: Windows.Devices.Sensors.IAccelerometerStatics2 members

    /// Returns the default accelerometer of a specific type of sensor. The possible accelerometer sensors are defined by AccelerometerReadingType.
    /// - Parameter readingType: Indicates the type of accelerometer to retrieve.
    /// - Returns: The default accelerometer or **null** if no integrated accelerometers are found.
    public static func getDefault(_ readingType: WindowsDevicesSensors_AccelerometerReadingType) throws -> WindowsDevicesSensors_Accelerometer {
        try COM.NullResult.unwrap(_iaccelerometerStatics2.getDefaultWithAccelerometerReadingType(readingType))
    }

    // MARK: Implementation details

    private var _iaccelerometerDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerDeviceId>? = nil

    internal var _iaccelerometerDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerDeviceId> {
        get throws {
            try _iaccelerometerDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerDeviceId.self)
            }
        }
    }

    private var _iaccelerometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer2>? = nil

    internal var _iaccelerometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer2> {
        get throws {
            try _iaccelerometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer2.self)
            }
        }
    }

    private var _iaccelerometer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer3>? = nil

    internal var _iaccelerometer3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer3> {
        get throws {
            try _iaccelerometer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer3.self)
            }
        }
    }

    private var _iaccelerometer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer4>? = nil

    internal var _iaccelerometer4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer4> {
        get throws {
            try _iaccelerometer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer4.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer4.self)
            }
        }
    }

    private var _iaccelerometer5_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer5>? = nil

    internal var _iaccelerometer5: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer5> {
        get throws {
            try _iaccelerometer5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer5.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometer5.self)
            }
        }
    }

    deinit {
        _iaccelerometerDeviceId_storage?.release()
        _iaccelerometer2_storage?.release()
        _iaccelerometer3_storage?.release()
        _iaccelerometer4_storage?.release()
        _iaccelerometer5_storage?.release()
    }

    private static var _iaccelerometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics>? = nil

    internal static var _iaccelerometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics> {
        get throws {
            try _iaccelerometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Accelerometer", id: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics.iid)
            }
        }
    }

    private static var _iaccelerometerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics3>? = nil

    internal static var _iaccelerometerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics3> {
        get throws {
            try _iaccelerometerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Accelerometer", id: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics3.iid)
            }
        }
    }

    private static var _iaccelerometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics2>? = nil

    internal static var _iaccelerometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics2> {
        get throws {
            try _iaccelerometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Accelerometer", id: CWinRT.SWRT_WindowsDevicesSensors_IAccelerometerStatics2.iid)
            }
        }
    }
}