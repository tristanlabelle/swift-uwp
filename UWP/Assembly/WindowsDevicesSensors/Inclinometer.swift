// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an inclinometer sensor.
public final class WindowsDevicesSensors_Inclinometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_InclinometerProjection> {
    // MARK: Windows.Devices.Sensors.IInclinometer members

    /// Gets the minimum report interval supported by the inclinometer.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the inclinometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the inclinometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the inclinometer reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Inclinometer?, WindowsDevicesSensors_InclinometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current inclinometer reading.
    /// - Returns: The current inclinometer reading.
    public func getCurrentReading() throws -> WindowsDevicesSensors_InclinometerReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IInclinometerDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _iinclinometerDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.IInclinometer2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _iinclinometer2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _iinclinometer2.put_ReadingTransform(value)
    }

    /// Gets the sensor reading type.
    /// - Returns: A SensorReadingType -typed value that specifies the sensor reading type.
    public var readingType: WindowsDevicesSensors_SensorReadingType {
        get throws {
            try _iinclinometer2.get_ReadingType()
        }
    }

    // MARK: Windows.Devices.Sensors.IInclinometer3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _iinclinometer3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _iinclinometer3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _iinclinometer3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IInclinometer4 members

    /// Gets the InclinometerDataThreshold for the gyrometer sensor.
    public var reportThreshold: WindowsDevicesSensors_InclinometerDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_iinclinometer4.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.IInclinometerStatics3 members

    /// Returns the default inclinometer based on the SensorReadingType.
    /// - Parameter sensorReadingtype: The type of sensor to retrieve.
    /// - Returns: The default inclinometer or **null** if no inclinometers are found.
    public static func getDefault(_ sensorReadingtype: WindowsDevicesSensors_SensorReadingType) throws -> WindowsDevicesSensors_Inclinometer {
        try COM.NullResult.unwrap(_iinclinometerStatics3.getDefaultWithSensorReadingType(sensorReadingtype))
    }

    // MARK: Windows.Devices.Sensors.IInclinometerStatics4 members

    /// Gets the device selector.
    /// - Parameter readingType: The type of sensor to retrieve.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector(_ readingType: WindowsDevicesSensors_SensorReadingType) throws -> Swift.String {
        try _iinclinometerStatics4.getDeviceSelector(readingType)
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Inclinometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Inclinometer?> {
        try COM.NullResult.unwrap(_iinclinometerStatics4.fromIdAsync(deviceId))
    }

    // MARK: Windows.Devices.Sensors.IInclinometerStatics2 members

    /// Returns the default inclinometer for relative readings.
    /// - Returns: The default inclinometer or null if no inclinometers are found.
    public static func getDefaultForRelativeReadings() throws -> WindowsDevicesSensors_Inclinometer {
        try COM.NullResult.unwrap(_iinclinometerStatics2.getDefaultForRelativeReadings())
    }

    // MARK: Windows.Devices.Sensors.IInclinometerStatics members

    /// Returns the default inclinometer for absolute readings.
    /// - Returns: The default inclinometer or null if no inclinometers are found.
    public static func getDefault() throws -> WindowsDevicesSensors_Inclinometer {
        try COM.NullResult.unwrap(_iinclinometerStatics.getDefault())
    }

    // MARK: Implementation details

    private var _iinclinometerDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerDeviceId>? = nil

    internal var _iinclinometerDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerDeviceId> {
        get throws {
            try _iinclinometerDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IInclinometerDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IInclinometerDeviceId.self)
            }
        }
    }

    private var _iinclinometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer2>? = nil

    internal var _iinclinometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer2> {
        get throws {
            try _iinclinometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IInclinometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IInclinometer2.self)
            }
        }
    }

    private var _iinclinometer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer3>? = nil

    internal var _iinclinometer3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer3> {
        get throws {
            try _iinclinometer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IInclinometer3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IInclinometer3.self)
            }
        }
    }

    private var _iinclinometer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer4>? = nil

    internal var _iinclinometer4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometer4> {
        get throws {
            try _iinclinometer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IInclinometer4.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IInclinometer4.self)
            }
        }
    }

    deinit {
        _iinclinometerDeviceId_storage?.release()
        _iinclinometer2_storage?.release()
        _iinclinometer3_storage?.release()
        _iinclinometer4_storage?.release()
    }

    private static var _iinclinometerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics3>? = nil

    internal static var _iinclinometerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics3> {
        get throws {
            try _iinclinometerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Inclinometer", id: CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics3.iid)
            }
        }
    }

    private static var _iinclinometerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics4>? = nil

    internal static var _iinclinometerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics4> {
        get throws {
            try _iinclinometerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Inclinometer", id: CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics4.iid)
            }
        }
    }

    private static var _iinclinometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics2>? = nil

    internal static var _iinclinometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics2> {
        get throws {
            try _iinclinometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Inclinometer", id: CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics2.iid)
            }
        }
    }

    private static var _iinclinometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics>? = nil

    internal static var _iinclinometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics> {
        get throws {
            try _iinclinometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Inclinometer", id: CWinRT.SWRT_WindowsDevicesSensors_IInclinometerStatics.iid)
            }
        }
    }
}