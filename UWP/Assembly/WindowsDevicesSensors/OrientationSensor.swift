// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an orientation sensor.
public final class WindowsDevicesSensors_OrientationSensor: WindowsRuntime.WinRTImport<WindowsDevicesSensors_OrientationSensorProjection> {
    // MARK: Windows.Devices.Sensors.IOrientationSensor members

    /// Gets the minimum report interval supported by the sensor.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the report interval supported by the sensor.
    /// - Returns: The report interval supported by the sensor.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the report interval supported by the sensor.
    /// - Returns: The report interval supported by the sensor.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the orientation sensor reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_OrientationSensor?, WindowsDevicesSensors_OrientationSensorReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current sensor reading.
    /// - Returns: The current sensor reading.
    public func getCurrentReading() throws -> WindowsDevicesSensors_OrientationSensorReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensorDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _iorientationSensorDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensor2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _iorientationSensor2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _iorientationSensor2.put_ReadingTransform(value)
    }

    /// Gets the sensor reading type.
    /// - Returns: A SensorReadingType -typed value that specifies the sensor reading type.
    public var readingType: WindowsDevicesSensors_SensorReadingType {
        get throws {
            try _iorientationSensor2.get_ReadingType()
        }
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensor3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _iorientationSensor3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _iorientationSensor3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _iorientationSensor3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensorStatics3 members

    /// Returns the default orientation sensor, taking into account accuracy preferences.
    /// - Parameter sensorReadingtype: The type of sensor to retrieve. An Absolute SensorReadingType returns an OrientationSensor using an accelerometer, a gyromoter, and magnetometer to determine the orientation with respect to magnetic North. A Relative SensorReadingType returns an OrientationSensor using an accelerometer and gyrometer only (no magnetometer), measuring relative to where the sensor was first instantiated.”
    /// - Returns: The default orientation sensor or **null** if no orientation sensors are found.
    public static func getDefault(_ sensorReadingtype: WindowsDevicesSensors_SensorReadingType) throws -> WindowsDevicesSensors_OrientationSensor {
        try COM.NullResult.unwrap(_iorientationSensorStatics3.getDefaultWithSensorReadingType(sensorReadingtype))
    }

    /// Returns the default orientation sensor, taking into account power and accuracy preferences.
    /// - Parameter sensorReadingType: The type of sensor to retrieve. An Absolute SensorReadingType returns an OrientationSensor using an accelerometer, a gyromoter, and magnetometer to determine the orientation with respect to magnetic North. A Relative SensorReadingType returns an OrientationSensor using an accelerometer and gyrometer only (no magnetometer), measuring relative to where the sensor was first instantiated.
    /// - Parameter optimizationGoal: Indicates the preferences of optimization for the sensor. This field is only used if an Absolute SensorReadingType is specified. An optimizationGoal of Precision will return an OrientationSensor using an accelereometer, a gyrometer, and a magnetometer to determine orientation with respect to magnetic North. This has the potential to use a lot of power due to it’s use of a gyrometer.
    /// - Returns: The default orientation sensor or **null** if no orientation sensors are found.
    public static func getDefault(_ sensorReadingType: WindowsDevicesSensors_SensorReadingType, _ optimizationGoal: WindowsDevicesSensors_SensorOptimizationGoal) throws -> WindowsDevicesSensors_OrientationSensor {
        try COM.NullResult.unwrap(_iorientationSensorStatics3.getDefaultWithSensorReadingTypeAndSensorOptimizationGoal(sensorReadingType, optimizationGoal))
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensorStatics4 members

    /// Gets the device selector.
    /// - Parameter readingType: The type of sensor to retrieve.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector(_ readingType: WindowsDevicesSensors_SensorReadingType) throws -> Swift.String {
        try _iorientationSensorStatics4.getDeviceSelector(readingType)
    }

    /// Gets the device selector.
    /// - Parameter readingType: The type of sensor to retrieve. An Absolute SensorReadingType returns an OrientationSensor using an accelerometer, a gyromoter, and magnetometer to determine the orientation with respect to magnetic North. A Relative SensorReadingType returns an OrientationSensor using an accelerometer and gyrometer only (no magnetometer), measuring relative to where the sensor was first instantiated.
    /// - Parameter optimizationGoal: Indicates the preferences of optimization for the sensor. This field is only used if an Absolute SensorReadingType is specified. An optimizationGoal of Precision will return an OrientationSensor using an accelereometer, a gyrometer, and a magnetometer to determine orientation with respect to magnetic North. This has the potential to use a lot of power due to it’s use of a gyrometer.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector(_ readingType: WindowsDevicesSensors_SensorReadingType, _ optimizationGoal: WindowsDevicesSensors_SensorOptimizationGoal) throws -> Swift.String {
        try _iorientationSensorStatics4.getDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(readingType, optimizationGoal)
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the OrientationSensor object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_OrientationSensor?> {
        try COM.NullResult.unwrap(_iorientationSensorStatics4.fromIdAsync(deviceId))
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensorStatics2 members

    /// Returns the default orientation sensor for relative readings.
    /// - Returns: The default orientation sensor or null if no orientation sensors are found.
    public static func getDefaultForRelativeReadings() throws -> WindowsDevicesSensors_OrientationSensor {
        try COM.NullResult.unwrap(_iorientationSensorStatics2.getDefaultForRelativeReadings())
    }

    // MARK: Windows.Devices.Sensors.IOrientationSensorStatics members

    /// Returns the default orientation sensor for absolute readings.
    /// - Returns: The default orientation sensor or **null** if no orientation sensors are found.
    public static func getDefault() throws -> WindowsDevicesSensors_OrientationSensor {
        try COM.NullResult.unwrap(_iorientationSensorStatics.getDefault())
    }

    // MARK: Implementation details

    private var _iorientationSensorDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorDeviceId>? = nil

    internal var _iorientationSensorDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorDeviceId> {
        get throws {
            try _iorientationSensorDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorDeviceId.self)
            }
        }
    }

    private var _iorientationSensor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor2>? = nil

    internal var _iorientationSensor2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor2> {
        get throws {
            try _iorientationSensor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor2.self)
            }
        }
    }

    private var _iorientationSensor3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor3>? = nil

    internal var _iorientationSensor3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor3> {
        get throws {
            try _iorientationSensor3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensor3.self)
            }
        }
    }

    deinit {
        _iorientationSensorDeviceId_storage?.release()
        _iorientationSensor2_storage?.release()
        _iorientationSensor3_storage?.release()
    }

    private static var _iorientationSensorStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics3>? = nil

    internal static var _iorientationSensorStatics3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics3> {
        get throws {
            try _iorientationSensorStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.OrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics3.iid)
            }
        }
    }

    private static var _iorientationSensorStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics4>? = nil

    internal static var _iorientationSensorStatics4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics4> {
        get throws {
            try _iorientationSensorStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.OrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics4.iid)
            }
        }
    }

    private static var _iorientationSensorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics2>? = nil

    internal static var _iorientationSensorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics2> {
        get throws {
            try _iorientationSensorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.OrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics2.iid)
            }
        }
    }

    private static var _iorientationSensorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics>? = nil

    internal static var _iorientationSensorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics> {
        get throws {
            try _iorientationSensorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.OrientationSensor", id: CWinRT.SWRT_WindowsDevicesSensors_IOrientationSensorStatics.iid)
            }
        }
    }
}