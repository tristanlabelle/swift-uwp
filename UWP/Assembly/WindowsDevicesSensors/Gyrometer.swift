// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a gyrometer sensor.
public final class WindowsDevicesSensors_Gyrometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_GyrometerProjection> {
    // MARK: Windows.Devices.Sensors.IGyrometer members

    /// Gets the minimum report interval supported by the gyrometer.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the gyrometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the gyrometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the gyrometer reports the current sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Gyrometer?, WindowsDevicesSensors_GyrometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current gyrometer reading.
    /// - Returns: This method has no parameters.
    public func getCurrentReading() throws -> WindowsDevicesSensors_GyrometerReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IGyrometerDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _igyrometerDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.IGyrometer2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _igyrometer2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _igyrometer2.put_ReadingTransform(value)
    }

    // MARK: Windows.Devices.Sensors.IGyrometer3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _igyrometer3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _igyrometer3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _igyrometer3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IGyrometer4 members

    /// Gets the GyrometerDataThreshold for the gyrometer sensor.
    public var reportThreshold: WindowsDevicesSensors_GyrometerDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_igyrometer4.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.IGyrometerStatics2 members

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _igyrometerStatics2.getDeviceSelector()
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Gyrometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Gyrometer?> {
        try COM.NullResult.unwrap(_igyrometerStatics2.fromIdAsync(deviceId))
    }

    // MARK: Windows.Devices.Sensors.IGyrometerStatics members

    /// Returns the default gyrometer.
    /// - Returns: The default gyrometer or null if no integrated gyrometers are found.
    public static func getDefault() throws -> WindowsDevicesSensors_Gyrometer {
        try COM.NullResult.unwrap(_igyrometerStatics.getDefault())
    }

    // MARK: Implementation details

    private var _igyrometerDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerDeviceId>? = nil

    internal var _igyrometerDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerDeviceId> {
        get throws {
            try _igyrometerDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IGyrometerDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IGyrometerDeviceId.self)
            }
        }
    }

    private var _igyrometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer2>? = nil

    internal var _igyrometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer2> {
        get throws {
            try _igyrometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IGyrometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IGyrometer2.self)
            }
        }
    }

    private var _igyrometer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer3>? = nil

    internal var _igyrometer3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer3> {
        get throws {
            try _igyrometer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IGyrometer3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IGyrometer3.self)
            }
        }
    }

    private var _igyrometer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer4>? = nil

    internal var _igyrometer4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometer4> {
        get throws {
            try _igyrometer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IGyrometer4.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IGyrometer4.self)
            }
        }
    }

    deinit {
        _igyrometerDeviceId_storage?.release()
        _igyrometer2_storage?.release()
        _igyrometer3_storage?.release()
        _igyrometer4_storage?.release()
    }

    private static var _igyrometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics2>? = nil

    internal static var _igyrometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics2> {
        get throws {
            try _igyrometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Gyrometer", id: CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics2.iid)
            }
        }
    }

    private static var _igyrometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics>? = nil

    internal static var _igyrometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics> {
        get throws {
            try _igyrometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Gyrometer", id: CWinRT.SWRT_WindowsDevicesSensors_IGyrometerStatics.iid)
            }
        }
    }
}