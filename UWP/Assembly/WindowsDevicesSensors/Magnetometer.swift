// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a magnetic sensor.
public final class WindowsDevicesSensors_Magnetometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_MagnetometerProjection> {
    // MARK: Windows.Devices.Sensors.IMagnetometer members

    /// Gets the minimum report interval supported by the magnetometer.
    /// - Returns: The minimum ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the magnetometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the magnetometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the compass reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Magnetometer?, WindowsDevicesSensors_MagnetometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current magnetometer reading.
    /// - Returns: The current magnetometer reading.
    public func getCurrentReading() throws -> WindowsDevicesSensors_MagnetometerReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.IMagnetometerDeviceId members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _imagnetometerDeviceId.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Sensors.IMagnetometer2 members

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public var readingTransform: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _imagnetometer2.get_ReadingTransform()
        }
    }

    /// Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
    /// - Returns: A DisplayOrientations -typed value that specifies the display orientation with which to align the sensor data.
    public func readingTransform(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _imagnetometer2.put_ReadingTransform(value)
    }

    // MARK: Windows.Devices.Sensors.IMagnetometer3 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _imagnetometer3.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _imagnetometer3.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _imagnetometer3.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.IMagnetometer4 members

    /// Gets the MagnetometerDataThreshold for the magnetometer sensor.
    public var reportThreshold: WindowsDevicesSensors_MagnetometerDataThreshold {
        get throws {
            try COM.NullResult.unwrap(_imagnetometer4.get_ReportThreshold())
        }
    }

    // MARK: Windows.Devices.Sensors.IMagnetometerStatics members

    /// Returns the default magnetometer.
    /// - Returns: The default magnetometer.
    public static func getDefault() throws -> WindowsDevicesSensors_Magnetometer {
        try COM.NullResult.unwrap(_imagnetometerStatics.getDefault())
    }

    // MARK: Windows.Devices.Sensors.IMagnetometerStatics2 members

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _imagnetometerStatics2.getDeviceSelector()
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter deviceId: The sensor identifier
    /// - Returns: Returns the Magnetometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Magnetometer?> {
        try COM.NullResult.unwrap(_imagnetometerStatics2.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _imagnetometerDeviceId_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerDeviceId>? = nil

    internal var _imagnetometerDeviceId: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerDeviceId> {
        get throws {
            try _imagnetometerDeviceId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerDeviceId.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerDeviceId.self)
            }
        }
    }

    private var _imagnetometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer2>? = nil

    internal var _imagnetometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer2> {
        get throws {
            try _imagnetometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer2.self)
            }
        }
    }

    private var _imagnetometer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer3>? = nil

    internal var _imagnetometer3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer3> {
        get throws {
            try _imagnetometer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer3.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer3.self)
            }
        }
    }

    private var _imagnetometer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer4>? = nil

    internal var _imagnetometer4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer4> {
        get throws {
            try _imagnetometer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer4.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometer4.self)
            }
        }
    }

    deinit {
        _imagnetometerDeviceId_storage?.release()
        _imagnetometer2_storage?.release()
        _imagnetometer3_storage?.release()
        _imagnetometer4_storage?.release()
    }

    private static var _imagnetometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics>? = nil

    internal static var _imagnetometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics> {
        get throws {
            try _imagnetometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Magnetometer", id: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics.iid)
            }
        }
    }

    private static var _imagnetometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics2>? = nil

    internal static var _imagnetometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics2> {
        get throws {
            try _imagnetometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Magnetometer", id: CWinRT.SWRT_WindowsDevicesSensors_IMagnetometerStatics2.iid)
            }
        }
    }
}