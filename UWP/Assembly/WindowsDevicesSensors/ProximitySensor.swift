// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides an interface for a proximity sensor to determine whether or not an object is detected.
public final class WindowsDevicesSensors_ProximitySensor: WindowsRuntime.WinRTImport<WindowsDevicesSensors_ProximitySensorProjection> {
    // MARK: Windows.Devices.Sensors.IProximitySensor members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// The largest distance where the proximity sensor can detect an object.
    /// - Returns: The maximum distance in millimeters where the proximity sensor supports detecting an object.
    public var maxDistanceInMillimeters: Swift.UInt32? {
        get throws {
            try _interop.get_MaxDistanceInMillimeters()
        }
    }

    /// The shortest distance where the proximity sensor can detect an object.
    /// - Returns: The minimum distance in millimeters where the proximity sensor supports detecting an object.
    public var minDistanceInMillimeters: Swift.UInt32? {
        get throws {
            try _interop.get_MinDistanceInMillimeters()
        }
    }

    /// Occurs each time the proximity sensor reports a new value.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_ProximitySensor?, WindowsDevicesSensors_ProximitySensorReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current reading for the proximity sensor.
    /// - Returns: Indicates whether or not the proximity sensor detects an object, and if so, the distance to that object.
    public func getCurrentReading() throws -> WindowsDevicesSensors_ProximitySensorReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    /// Creates a controller responsible for turning the display on or off based on the ProximitySensorReading.
    /// - Returns: The controller for the phone display.
    public func createDisplayOnOffController() throws -> WindowsDevicesSensors_ProximitySensorDisplayOnOffController {
        try COM.NullResult.unwrap(_interop.createDisplayOnOffController())
    }

    // MARK: Windows.Devices.Sensors.IProximitySensorStatics members

    /// Gets the device selector.
    /// - Returns: Returns the device selector. If no device selector is available, this method returns null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iproximitySensorStatics.getDeviceSelector()
    }

    /// Obtains the proximity sensor from its identifier.
    /// - Parameter sensorId: The sensor identifier.
    /// - Returns: Returns the ProximitySensor object from its identifier.
    public static func fromId(_ sensorId: Swift.String) throws -> WindowsDevicesSensors_ProximitySensor {
        try COM.NullResult.unwrap(_iproximitySensorStatics.fromId(sensorId))
    }

    // MARK: Windows.Devices.Sensors.IProximitySensorStatics2 members

    /// Gets readings from the trigger details in background task.
    /// - Parameter triggerDetails: The trigger details received from the background task.
    /// - Returns: The collection of proximity data retrieved from the trigger details.
    public static func getReadingsFromTriggerDetails(_ triggerDetails: WindowsDevicesSensors_SensorDataThresholdTriggerDetails?) throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesSensors_ProximitySensorReading?> {
        try COM.NullResult.unwrap(_iproximitySensorStatics2.getReadingsFromTriggerDetails(triggerDetails))
    }

    // MARK: Implementation details

    private static var _iproximitySensorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics>? = nil

    internal static var _iproximitySensorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics> {
        get throws {
            try _iproximitySensorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.ProximitySensor", id: CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics.iid)
            }
        }
    }

    private static var _iproximitySensorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics2>? = nil

    internal static var _iproximitySensorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics2> {
        get throws {
            try _iproximitySensorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.ProximitySensor", id: CWinRT.SWRT_WindowsDevicesSensors_IProximitySensorStatics2.iid)
            }
        }
    }
}