// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides an interface for a pedometer to measure the number of steps taken.
public final class WindowsDevicesSensors_Pedometer: WindowsRuntime.WinRTImport<WindowsDevicesSensors_PedometerProjection> {
    // MARK: Windows.Devices.Sensors.IPedometer members

    /// Gets the device identifier.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// The smallest report interval that is supported by this pedometer.
    /// - Returns: The smallest ReportInterval supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets the power that the sensor consumes.
    /// - Returns: The amount of power consumed in milliwatts.
    public var powerInMilliwatts: Swift.Double {
        get throws {
            try _interop.get_PowerInMilliwatts()
        }
    }

    /// Gets or sets the current report interval for the pedometer.
    /// - Returns: The current report interval.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the pedometer.
    /// - Returns: The current report interval.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the pedometer reports a new value.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensors_Pedometer?, WindowsDevicesSensors_PedometerReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    // MARK: Windows.Devices.Sensors.IPedometer2 members

    /// Gets the current step information from the pedometer sensor.
    /// - Returns: A collection of the step information available from the sensor.
    public func getCurrentReadings() throws -> WindowsFoundationCollections_IMapView<WindowsDevicesSensors_PedometerStepKind, WindowsDevicesSensors_PedometerReading?> {
        try COM.NullResult.unwrap(_ipedometer2.getCurrentReadings())
    }

    // MARK: Windows.Devices.Sensors.IPedometerStatics2 members

    /// Gets readings from the trigger details in background task.
    /// - Parameter triggerDetails: The trigger details received from the background task.
    /// - Returns: The collection of pedometer data retrieved from the trigger details.
    public static func getReadingsFromTriggerDetails(_ triggerDetails: WindowsDevicesSensors_SensorDataThresholdTriggerDetails?) throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesSensors_PedometerReading?> {
        try COM.NullResult.unwrap(_ipedometerStatics2.getReadingsFromTriggerDetails(triggerDetails))
    }

    // MARK: Windows.Devices.Sensors.IPedometerStatics members

    /// Obtains the pedometer from its identifier.
    /// - Parameter deviceId: The sensor identifier.
    /// - Returns: Returns the Pedometer object from its identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Pedometer?> {
        try COM.NullResult.unwrap(_ipedometerStatics.fromIdAsync(deviceId))
    }

    /// Asynchronously obtains the default pedometer.
    /// - Returns: Asynchronously returns a Pedometer object that represents the default sensor.
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensors_Pedometer?> {
        try COM.NullResult.unwrap(_ipedometerStatics.getDefaultAsync())
    }

    /// Gets the device selector.
    /// - Returns: Returns the device selector, if it exists; otherwise null.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ipedometerStatics.getDeviceSelector()
    }

    /// Asynchronously gets sensor readings from a specific time.
    /// - Parameter fromTime: The time for which you want to retrieve the reading.
    /// - Returns: Asynchronously returns a list of PedometerReading objects that represent info about the sensor.
    public static func getSystemHistoryAsync(_ fromTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesSensors_PedometerReading?>?> {
        try COM.NullResult.unwrap(_ipedometerStatics.getSystemHistoryAsync(fromTime))
    }

    /// Asynchronously gets pedometer readings from a specific time and duration.
    /// - Parameter fromTime: The time for which you want to retrieve the reading.
    /// - Parameter duration: The duration over which you want to retrieve data.
    /// - Returns: Asynchronously returns a list of PedometerReading objects that represent info about the sensor.
    public static func getSystemHistoryAsync(_ fromTime: WindowsFoundation_DateTime, _ duration: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesSensors_PedometerReading?>?> {
        try COM.NullResult.unwrap(_ipedometerStatics.getSystemHistoryWithDurationAsync(fromTime, duration))
    }

    // MARK: Implementation details

    private var _ipedometer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometer2>? = nil

    internal var _ipedometer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometer2> {
        get throws {
            try _ipedometer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_IPedometer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_IPedometer2.self)
            }
        }
    }

    deinit {
        _ipedometer2_storage?.release()
    }

    private static var _ipedometerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics2>? = nil

    internal static var _ipedometerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics2> {
        get throws {
            try _ipedometerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Pedometer", id: CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics2.iid)
            }
        }
    }

    private static var _ipedometerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics>? = nil

    internal static var _ipedometerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics> {
        get throws {
            try _ipedometerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Pedometer", id: CWinRT.SWRT_WindowsDevicesSensors_IPedometerStatics.iid)
            }
        }
    }
}