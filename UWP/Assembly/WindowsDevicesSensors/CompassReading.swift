// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a compass reading.
public final class WindowsDevicesSensors_CompassReading: WindowsRuntime.WinRTImport<WindowsDevicesSensors_CompassReadingProjection> {
    // MARK: Windows.Devices.Sensors.ICompassReading members

    /// Gets the heading in degrees relative to magnetic-north.
    /// - Returns: The magnetic-north heading.
    public var headingMagneticNorth: Swift.Double {
        get throws {
            try _interop.get_HeadingMagneticNorth()
        }
    }

    /// Gets the heading in degrees relative to geographic true-north.
    /// - Returns: The true-north heading.
    public var headingTrueNorth: Swift.Double? {
        get throws {
            try _interop.get_HeadingTrueNorth()
        }
    }

    /// Gets the time at which the sensor reported the reading.
    /// - Returns: The time at which the sensor reported the reading.
    public var timestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    // MARK: Windows.Devices.Sensors.ICompassReadingHeadingAccuracy members

    /// Gets the compass's heading accuracy.
    /// - Returns: The compass's heading accuracy.
    public var headingAccuracy: WindowsDevicesSensors_MagnetometerAccuracy {
        get throws {
            try _icompassReadingHeadingAccuracy.get_HeadingAccuracy()
        }
    }

    // MARK: Windows.Devices.Sensors.ICompassReading2 members

    /// Gets the performance count associated with the reading. This allows the reading to be synchronized with other devices and processes on the system.
    /// - Returns: The performance count for the reading. Null if this property is not supported on the sensor.
    public var performanceCount: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _icompassReading2.get_PerformanceCount()
        }
    }

    /// Gets the data properties reported by the sensor.
    /// - Returns: Contains a key/value pair for each data property reported by the sensor for the given reading. The key is a string of the property key, and the value is the value of the property that the key represents.
    public var properties: WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_icompassReading2.get_Properties())
        }
    }

    // MARK: Implementation details

    private var _icompassReadingHeadingAccuracy_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassReadingHeadingAccuracy>? = nil

    internal var _icompassReadingHeadingAccuracy: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassReadingHeadingAccuracy> {
        get throws {
            try _icompassReadingHeadingAccuracy_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompassReadingHeadingAccuracy.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompassReadingHeadingAccuracy.self)
            }
        }
    }

    private var _icompassReading2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassReading2>? = nil

    internal var _icompassReading2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensors_ICompassReading2> {
        get throws {
            try _icompassReading2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensors_ICompassReading2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensors_ICompassReading2.self)
            }
        }
    }

    deinit {
        _icompassReadingHeadingAccuracy_storage?.release()
        _icompassReading2_storage?.release()
    }
}