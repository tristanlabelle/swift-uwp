// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Runs a method when an event or semaphore is signaled. A timeout value can also be specified, causing the delegate to run after the time span has elapsed if the named event does not occur (or if the semaphore does not reach a signaled state).
public final class WindowsSystemThreadingCore_SignalNotifier: WindowsRuntime.WinRTImport<WindowsSystemThreadingCore_SignalNotifierProjection> {
    // MARK: Windows.System.Threading.Core.ISignalNotifier members

    /// Submits the SignalNotifier to the thread pool.
    public func enable() throws {
        try _interop.enable()
    }

    /// Terminates the SignalNotifier if it has not already started running.
    public func terminate() throws {
        try _interop.terminate()
    }

    // MARK: Windows.System.Threading.Core.ISignalNotifierStatics members

    /// Attaches a SignalHandler delegate to an event. The delegated method will run the next time the event occurs.
    /// - Parameter name: Indicates the event that causes the method to run.
    /// - Parameter handler: Indicates the method that will run in response to the event.
    /// - Returns: The resulting SignalNotifier object.
    public static func attachToEvent(_ name: Swift.String, _ handler: WindowsSystemThreadingCore_SignalHandler?) throws -> WindowsSystemThreadingCore_SignalNotifier {
        try COM.NullResult.unwrap(_isignalNotifierStatics.attachToEvent(name, handler))
    }

    /// Attaches a SignalHandler delegate to an event. The delegated method will run if the event occurs or the time span elapses, whichever comes first.
    /// - Parameter name: Indicates the event that causes the method to run.
    /// - Parameter handler: Indicates the method that will run in response to the event, or when the time span elapses, whichever comes first.
    /// - Parameter timeout: Indicates the amount of time to continue waiting for the event before running the *handler* method.
    /// - Returns: The resulting SignalNotifier object.
    public static func attachToEvent(_ name: Swift.String, _ handler: WindowsSystemThreadingCore_SignalHandler?, _ timeout: WindowsFoundation_TimeSpan) throws -> WindowsSystemThreadingCore_SignalNotifier {
        try COM.NullResult.unwrap(_isignalNotifierStatics.attachToEventWithTimeout(name, handler, timeout))
    }

    /// Attaches a SignalHandler delegate to a named semaphore. The delegated method will run when the named semaphore is signaled.
    /// - Parameter name: Names the semaphore that signals the method to run.
    /// - Parameter handler: Indicates the delegate that will run in response to the named semaphore entering the signaled state.
    /// - Returns: The resulting SignalNotifier object.
    public static func attachToSemaphore(_ name: Swift.String, _ handler: WindowsSystemThreadingCore_SignalHandler?) throws -> WindowsSystemThreadingCore_SignalNotifier {
        try COM.NullResult.unwrap(_isignalNotifierStatics.attachToSemaphore(name, handler))
    }

    /// Attaches a SignalHandler delegate to a named semaphore and specifies a timeout value. The delegated method will run when the named semaphore is signaled, or if the time span elapses before the semaphore reaches a signaled state.
    /// - Parameter name: Names the semaphore that signals the method to run.
    /// - Parameter handler: Indicates the delegate that will run in response to the named semaphore entering the signaled state.
    /// - Parameter timeout: Indicates the amount of time to continue waiting for the named semaphore before running the delegate.
    /// - Returns: The resulting SignalNotifier object.
    public static func attachToSemaphore(_ name: Swift.String, _ handler: WindowsSystemThreadingCore_SignalHandler?, _ timeout: WindowsFoundation_TimeSpan) throws -> WindowsSystemThreadingCore_SignalNotifier {
        try COM.NullResult.unwrap(_isignalNotifierStatics.attachToSemaphoreWithTimeout(name, handler, timeout))
    }

    // MARK: Implementation details

    private static var _isignalNotifierStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreadingCore_ISignalNotifierStatics>? = nil

    internal static var _isignalNotifierStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreadingCore_ISignalNotifierStatics> {
        get throws {
            try _isignalNotifierStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Threading.Core.SignalNotifier", id: CWinRT.SWRT_WindowsSystemThreadingCore_ISignalNotifierStatics.iid)
            }
        }
    }
}