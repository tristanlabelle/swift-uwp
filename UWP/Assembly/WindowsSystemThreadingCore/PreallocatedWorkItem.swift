// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A preallocated work item is constructed in advance of its submission to the thread pool, ensuring that the work item is constructed so that it can be submitted to the thread pool when necessary. For example, a PreallocatedWorkItem can be created in case it is needed for a resource deallocation routine, since the resource deallocation routine may be called in circumstances when not enough resources would be available to create the work item.
public final class WindowsSystemThreadingCore_PreallocatedWorkItem: WindowsRuntime.WinRTImport<WindowsSystemThreadingCore_PreallocatedWorkItemProjection> {
    // MARK: Windows.System.Threading.Core.IPreallocatedWorkItemFactory members

    public convenience init(_ handler: WindowsSystemThreading_WorkItemHandler?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ipreallocatedWorkItemFactory.createWorkItem(handler)))
    }

    public convenience init(_ handler: WindowsSystemThreading_WorkItemHandler?, _ priority: WindowsSystemThreading_WorkItemPriority) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ipreallocatedWorkItemFactory.createWorkItemWithPriority(handler, priority)))
    }

    public convenience init(_ handler: WindowsSystemThreading_WorkItemHandler?, _ priority: WindowsSystemThreading_WorkItemPriority, _ options: WindowsSystemThreading_WorkItemOptions) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ipreallocatedWorkItemFactory.createWorkItemWithPriorityAndOptions(handler, priority, options)))
    }

    // MARK: Windows.System.Threading.Core.IPreallocatedWorkItem members

    /// Submits the preallocated work item to the thread pool, without requiring any additional resources to be allocated.
    /// - Returns: Provides access to the running IAsyncAction that was previously constructed and given the necessary resource allocation.
    public func runAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.runAsync())
    }

    // MARK: Implementation details

    private static var _ipreallocatedWorkItemFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreadingCore_IPreallocatedWorkItemFactory>? = nil

    internal static var _ipreallocatedWorkItemFactory: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreadingCore_IPreallocatedWorkItemFactory> {
        get throws {
            try _ipreallocatedWorkItemFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Threading.Core.PreallocatedWorkItem", id: CWinRT.SWRT_WindowsSystemThreadingCore_IPreallocatedWorkItemFactory.iid)
            }
        }
    }
}