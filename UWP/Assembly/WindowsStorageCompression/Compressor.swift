// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A compressor takes information written to a stream and compresses it using a compression algorithm.
public final class WindowsStorageCompression_Compressor: WindowsRuntime.WinRTImport<WindowsStorageCompression_CompressorProjection>, WindowsStorageStreams_IOutputStreamProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Storage.Compression.ICompressorFactory members

    public convenience init(_ underlyingStream: WindowsStorageStreams_IOutputStream?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icompressorFactory.createCompressor(underlyingStream)))
    }

    public convenience init(_ underlyingStream: WindowsStorageStreams_IOutputStream?, _ algorithm: WindowsStorageCompression_CompressAlgorithm, _ blockSize: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icompressorFactory.createCompressorEx(underlyingStream, algorithm, blockSize)))
    }

    // MARK: Windows.Storage.Compression.ICompressor members

    /// Finishes writing the compression stream.
    /// - Returns: The asynchronous operation.
    public func finishAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.finishAsync())
    }

    /// Detaches the underlying stream from the Compressor object so that the object can be closed using the Compressor.Close method without also closing the underlying stream.
    /// - Returns: The stream of information.
    public func detachStream() throws -> WindowsStorageStreams_IOutputStream {
        try COM.NullResult.unwrap(_interop.detachStream())
    }

    // MARK: Windows.Storage.Streams.IOutputStream members

    /// Writes information to the compression stream asynchronously.
    /// - Parameter buffer: The buffer that contains the information to be written to the stream.
    /// - Returns: The asynchronous operation.
    public func writeAsync(_ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperationWithProgress<Swift.UInt32, Swift.UInt32> {
        try COM.NullResult.unwrap(_ioutputStream.writeAsync(buffer))
    }

    /// Flushes the compression stream asynchronously.
    /// - Returns: The asynchronous operation.
    public func flushAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ioutputStream.flushAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes a Compressor object and synchronously discards any information in buffers. This will close the underlying stream as well unless the Compressor.Detach method has been used to detach the stream from the object. Subsequent calls on a closed object, except for , will fail.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _ioutputStream_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IOutputStream>? = nil

    internal var _ioutputStream: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IOutputStream> {
        get throws {
            try _ioutputStream_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IOutputStream.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IOutputStream.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ioutputStream_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _icompressorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageCompression_ICompressorFactory>? = nil

    internal static var _icompressorFactory: COM.COMInterop<CWinRT.SWRT_WindowsStorageCompression_ICompressorFactory> {
        get throws {
            try _icompressorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Compression.Compressor", id: CWinRT.SWRT_WindowsStorageCompression_ICompressorFactory.iid)
            }
        }
    }
}