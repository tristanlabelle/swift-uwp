// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a provider of asymmetric (public) key algorithms. For more information, see Cryptographic keys.
public final class WindowsSecurityCryptographyCore_AsymmetricKeyAlgorithmProvider: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCore_AsymmetricKeyAlgorithmProviderProjection> {
    // MARK: Windows.Security.Cryptography.Core.IAsymmetricKeyAlgorithmProvider members

    /// Gets the name of the open asymmetric algorithm.
    /// - Returns: Algorithm name.
    public var algorithmName: Swift.String {
        get throws {
            try _interop.get_AlgorithmName()
        }
    }

    /// Creates a public/private key pair.
    /// - Parameter keySize: Size, in bits, of the key. Typical key sizes are 512, 1024, 2048, or 4096 bits.
    /// - Returns: Represents the asymmetric key pair.
    public func createKeyPair(_ keySize: Swift.UInt32) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.createKeyPair(keySize))
    }

    /// Imports a public/private key pair from a buffer.
    /// - Parameter keyBlob: Buffer that contains the key pair to import.
    /// - Returns: Represents the imported key pair.
    public func importKeyPair(_ keyBlob: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.importDefaultPrivateKeyBlob(keyBlob))
    }

    /// Imports a public/private key pair from a buffer in the specified format.
    /// - Parameter keyBlob: Buffer that contains the key pair to import.
    /// - Parameter BlobType: A CryptographicPrivateKeyBlobType enumeration value that specifies information about the private key contained in the *keyBlob* buffer. The default value is **Pkcs8RawPrivateKeyInfo**.
    /// - Returns: Represents the imported key pair.
    public func importKeyPair(_ keyBlob: WindowsStorageStreams_IBuffer?, _ BlobType: WindowsSecurityCryptographyCore_CryptographicPrivateKeyBlobType) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.importKeyPairWithBlobType(keyBlob, BlobType))
    }

    /// Imports a public key into a buffer.
    /// - Parameter keyBlob: Buffer that contains the key to import.
    /// - Returns: Represents the imported key.
    public func importPublicKey(_ keyBlob: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.importDefaultPublicKeyBlob(keyBlob))
    }

    /// Imports a public key into a buffer for a specified format.
    /// - Parameter keyBlob: Buffer that contains the key to import.
    /// - Parameter BlobType: A CryptographicPublicKeyBlobType enumeration value that specifies the format of the public key contained in the *keyBlob* buffer. The default value is **X509SubjectPublicKeyInfo**.
    /// - Returns: Represents the imported key.
    public func importPublicKey(_ keyBlob: WindowsStorageStreams_IBuffer?, _ BlobType: WindowsSecurityCryptographyCore_CryptographicPublicKeyBlobType) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.importPublicKeyWithBlobType(keyBlob, BlobType))
    }

    // MARK: Windows.Security.Cryptography.Core.IAsymmetricKeyAlgorithmProvider2 members

    /// Creates a public/private key pair using a curve name.
    /// - Parameter curveName: The name of the curve.
    /// - Returns: Represents the asymmetric key pair.
    public func createKeyPairWithCurveName(_ curveName: Swift.String) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_iasymmetricKeyAlgorithmProvider2.createKeyPairWithCurveName(curveName))
    }

    /// Creates a public/private key pair using curve parameters.
    /// - Parameter parameters: The curve parameters.
    /// - Returns: Represents the asymmetric key pair.
    public func createKeyPairWithCurveParameters(_ parameters: [Swift.UInt8]) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_iasymmetricKeyAlgorithmProvider2.createKeyPairWithCurveParameters(parameters))
    }

    // MARK: Windows.Security.Cryptography.Core.IAsymmetricKeyAlgorithmProviderStatics members

    /// Creates an instance of the AsymmetricKeyAlgorithmProvider class and opens the specified algorithm for use.
    /// - Parameter algorithm: Algorithm name.
    /// - Returns: Represents a public key algorithm provider.
    public static func openAlgorithm(_ algorithm: Swift.String) throws -> WindowsSecurityCryptographyCore_AsymmetricKeyAlgorithmProvider {
        try COM.NullResult.unwrap(_iasymmetricKeyAlgorithmProviderStatics.openAlgorithm(algorithm))
    }

    // MARK: Implementation details

    private var _iasymmetricKeyAlgorithmProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProvider2>? = nil

    internal var _iasymmetricKeyAlgorithmProvider2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProvider2> {
        get throws {
            try _iasymmetricKeyAlgorithmProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProvider2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProvider2.self)
            }
        }
    }

    deinit {
        _iasymmetricKeyAlgorithmProvider2_storage?.release()
    }

    private static var _iasymmetricKeyAlgorithmProviderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProviderStatics>? = nil

    internal static var _iasymmetricKeyAlgorithmProviderStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProviderStatics> {
        get throws {
            try _iasymmetricKeyAlgorithmProviderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.AsymmetricKeyAlgorithmProvider", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IAsymmetricKeyAlgorithmProviderStatics.iid)
            }
        }
    }
}