// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents parameters used when deriving a key.
public final class WindowsSecurityCryptographyCore_KeyDerivationParameters: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCore_KeyDerivationParametersProjection> {
    // MARK: Windows.Security.Cryptography.Core.IKeyDerivationParameters members

    /// Retrieves the number of iterations used to derive the key. For more information, see BuildForPbkdf2.
    /// - Returns: Iteration count.
    public var iterationCount: Swift.UInt32 {
        get throws {
            try _interop.get_IterationCount()
        }
    }

    /// Gets or sets the parameters used by the key derivation algorithm.
    /// - Returns: Buffer that contains the parameters.
    public var kdfGenericBinary: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_KdfGenericBinary())
        }
    }

    /// Gets or sets the parameters used by the key derivation algorithm.
    /// - Returns: Buffer that contains the parameters.
    public func kdfGenericBinary(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_KdfGenericBinary(value)
    }

    // MARK: Windows.Security.Cryptography.Core.IKeyDerivationParameters2 members

    /// Gets or sets the Capi1KdfTargetAlgorithm.
    /// - Returns: The Capi1KdfTargetAlgorithm.
    public var capi1KdfTargetAlgorithm: WindowsSecurityCryptographyCore_Capi1KdfTargetAlgorithm {
        get throws {
            try _ikeyDerivationParameters2.get_Capi1KdfTargetAlgorithm()
        }
    }

    /// Gets or sets the Capi1KdfTargetAlgorithm.
    /// - Returns: The Capi1KdfTargetAlgorithm.
    public func capi1KdfTargetAlgorithm(_ value: WindowsSecurityCryptographyCore_Capi1KdfTargetAlgorithm) throws {
        try _ikeyDerivationParameters2.put_Capi1KdfTargetAlgorithm(value)
    }

    // MARK: Windows.Security.Cryptography.Core.IKeyDerivationParametersStatics2 members

    /// Creates a KeyDerivationParameters object for use in the target algorithm.
    /// - Parameter capi1KdfTargetAlgorithm: The target algorithm.
    /// - Returns: Refers to the parameters used during key derivation.
    public static func buildForCapi1Kdf(_ capi1KdfTargetAlgorithm: WindowsSecurityCryptographyCore_Capi1KdfTargetAlgorithm) throws -> WindowsSecurityCryptographyCore_KeyDerivationParameters {
        try COM.NullResult.unwrap(_ikeyDerivationParametersStatics2.buildForCapi1Kdf(capi1KdfTargetAlgorithm))
    }

    // MARK: Windows.Security.Cryptography.Core.IKeyDerivationParametersStatics members

    /// Creates a KeyDerivationParameters object for use in the password-based key derivation function 2 (PBKDF2).
    /// - Parameter pbkdf2Salt: The salt, a random or pseudorandom value to be combined with the password in multiple iterations. A salt is used to increase entropy above what can be obtained from using a password alone.
    /// - Parameter iterationCount: Number of iterations to be used to derive a key.
    /// - Returns: Refers to the parameters used during key derivation.
    public static func buildForPbkdf2(_ pbkdf2Salt: WindowsStorageStreams_IBuffer?, _ iterationCount: Swift.UInt32) throws -> WindowsSecurityCryptographyCore_KeyDerivationParameters {
        try COM.NullResult.unwrap(_ikeyDerivationParametersStatics.buildForPbkdf2(pbkdf2Salt, iterationCount))
    }

    /// Creates a KeyDerivationParameters object for use in a counter mode, hash-based message authentication code (HMAC) key derivation function.
    /// - Parameter label: Buffer that specifies the purpose for the derived keying material.
    /// - Parameter context: Buffer that specifies information related to the derived keying material. For example, the context can identify the parties who are deriving the keying material and, optionally, a nonce known by the parties.
    /// - Returns: Refers to the parameters used during key derivation.
    public static func buildForSP800108(_ label: WindowsStorageStreams_IBuffer?, _ context: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_KeyDerivationParameters {
        try COM.NullResult.unwrap(_ikeyDerivationParametersStatics.buildForSP800108(label, context))
    }

    /// Creates a KeyDerivationParameters object for use in the SP800-56A key derivation function.
    /// - Parameter algorithmId: Specifies the intended purpose of the derived key.
    /// - Parameter partyUInfo: Contains public information contributed by the initiator.
    /// - Parameter partyVInfo: Contains public information contributed by the responder.
    /// - Parameter suppPubInfo: Contains public information known to both initiator and responder.
    /// - Parameter suppPrivInfo: Contains private information known to both initiator and responder, such as a shared secret.
    /// - Returns: Refers to the parameters used during key derivation.
    public static func buildForSP80056a(_ algorithmId: WindowsStorageStreams_IBuffer?, _ partyUInfo: WindowsStorageStreams_IBuffer?, _ partyVInfo: WindowsStorageStreams_IBuffer?, _ suppPubInfo: WindowsStorageStreams_IBuffer?, _ suppPrivInfo: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_KeyDerivationParameters {
        try COM.NullResult.unwrap(_ikeyDerivationParametersStatics.buildForSP80056a(algorithmId, partyUInfo, partyVInfo, suppPubInfo, suppPrivInfo))
    }

    // MARK: Implementation details

    private var _ikeyDerivationParameters2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParameters2>? = nil

    internal var _ikeyDerivationParameters2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParameters2> {
        get throws {
            try _ikeyDerivationParameters2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParameters2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParameters2.self)
            }
        }
    }

    deinit {
        _ikeyDerivationParameters2_storage?.release()
    }

    private static var _ikeyDerivationParametersStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics2>? = nil

    internal static var _ikeyDerivationParametersStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics2> {
        get throws {
            try _ikeyDerivationParametersStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.KeyDerivationParameters", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics2.iid)
            }
        }
    }

    private static var _ikeyDerivationParametersStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics>? = nil

    internal static var _ikeyDerivationParametersStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics> {
        get throws {
            try _ikeyDerivationParametersStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.KeyDerivationParameters", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IKeyDerivationParametersStatics.iid)
            }
        }
    }
}