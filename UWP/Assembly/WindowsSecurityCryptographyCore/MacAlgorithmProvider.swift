// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a message authentication code (MAC). A MAC uses symmetric key cryptography to prevent message tampering. For more information, see MACs, hashes, and signatures.
public final class WindowsSecurityCryptographyCore_MacAlgorithmProvider: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCore_MacAlgorithmProviderProjection> {
    // MARK: Windows.Security.Cryptography.Core.IMacAlgorithmProvider members

    /// Gets the name of the open MAC algorithm.
    /// - Returns: Algorithm name.
    public var algorithmName: Swift.String {
        get throws {
            try _interop.get_AlgorithmName()
        }
    }

    /// Gets the length, in bytes, of the message authentication code.
    /// - Returns: Number of bytes in the MAC.
    public var macLength: Swift.UInt32 {
        get throws {
            try _interop.get_MacLength()
        }
    }

    /// Creates a symmetric key that can be used to create the MAC value.
    /// - Parameter keyMaterial: Random data used to help generate the key. You can call the GenerateRandom method to create the random data.
    /// - Returns: Symmetric key.
    public func createKey(_ keyMaterial: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_CryptographicKey {
        try COM.NullResult.unwrap(_interop.createKey(keyMaterial))
    }

    // MARK: Windows.Security.Cryptography.Core.IMacAlgorithmProvider2 members

    /// Creates a CryptographicHash object that supports incremental hash operations.
    /// - Parameter keyMaterial: Random data used to help generate the hash. You can call the GenerateRandom method to create the random data.
    /// - Returns: A CryptographicHash object that supports incremental hash operations.
    public func createHash(_ keyMaterial: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_CryptographicHash {
        try COM.NullResult.unwrap(_imacAlgorithmProvider2.createHash(keyMaterial))
    }

    // MARK: Windows.Security.Cryptography.Core.IMacAlgorithmProviderStatics members

    /// Creates a MacAlgorithmProvider object and opens the specified algorithm for use.
    /// - Parameter algorithm: Algorithm name.
    /// - Returns: Represents a provider that implements MAC algorithms.
    public static func openAlgorithm(_ algorithm: Swift.String) throws -> WindowsSecurityCryptographyCore_MacAlgorithmProvider {
        try COM.NullResult.unwrap(_imacAlgorithmProviderStatics.openAlgorithm(algorithm))
    }

    // MARK: Implementation details

    private var _imacAlgorithmProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProvider2>? = nil

    internal var _imacAlgorithmProvider2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProvider2> {
        get throws {
            try _imacAlgorithmProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProvider2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProvider2.self)
            }
        }
    }

    deinit {
        _imacAlgorithmProvider2_storage?.release()
    }

    private static var _imacAlgorithmProviderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProviderStatics>? = nil

    internal static var _imacAlgorithmProviderStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProviderStatics> {
        get throws {
            try _imacAlgorithmProviderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.MacAlgorithmProvider", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IMacAlgorithmProviderStatics.iid)
            }
        }
    }
}