// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a cryptographic hash provider. For more information about hashes, see MACs, hashes, and signatures.
public final class WindowsSecurityCryptographyCore_HashAlgorithmProvider: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCore_HashAlgorithmProviderProjection> {
    // MARK: Windows.Security.Cryptography.Core.IHashAlgorithmProvider members

    /// Gets the name of the open hash algorithm.
    /// - Returns: Algorithm name.
    public var algorithmName: Swift.String {
        get throws {
            try _interop.get_AlgorithmName()
        }
    }

    /// Gets the length, in bytes, of the hash.
    /// - Returns: Number of bytes in the hash.
    public var hashLength: Swift.UInt32 {
        get throws {
            try _interop.get_HashLength()
        }
    }

    /// Hashes binary data.
    /// - Parameter data: Data to be hashed.
    /// - Returns: Hashed data.
    public func hashData(_ data: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_interop.hashData(data))
    }

    /// Creates a reusable CryptographicHash object.
    /// - Returns: Reusable hash object.
    public func createHash() throws -> WindowsSecurityCryptographyCore_CryptographicHash {
        try COM.NullResult.unwrap(_interop.createHash())
    }

    // MARK: Windows.Security.Cryptography.Core.IHashAlgorithmProviderStatics members

    /// Creates a HashAlgorithmProvider object and opens the specified algorithm for use.
    /// - Parameter algorithm: Algorithm name.
    /// - Returns: Represents a provider that implements hash algorithms.
    public static func openAlgorithm(_ algorithm: Swift.String) throws -> WindowsSecurityCryptographyCore_HashAlgorithmProvider {
        try COM.NullResult.unwrap(_ihashAlgorithmProviderStatics.openAlgorithm(algorithm))
    }

    // MARK: Implementation details

    private static var _ihashAlgorithmProviderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmProviderStatics>? = nil

    internal static var _ihashAlgorithmProviderStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmProviderStatics> {
        get throws {
            try _ihashAlgorithmProviderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.HashAlgorithmProvider", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmProviderStatics.iid)
            }
        }
    }
}