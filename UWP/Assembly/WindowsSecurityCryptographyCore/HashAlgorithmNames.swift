// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains static properties that enable you to retrieve algorithm names that can be used in the OpenAlgorithm method of the HashAlgorithmProvider class.
public enum WindowsSecurityCryptographyCore_HashAlgorithmNames {
    // MARK: Windows.Security.Cryptography.Core.IHashAlgorithmNamesStatics members

    /// Retrieves a string that contains "MD5".
    /// - Returns: String that contains "MD5".
    public static var md5: Swift.String {
        get throws {
            try _ihashAlgorithmNamesStatics.get_Md5()
        }
    }

    /// Retrieves a string that contains "SHA1".
    /// - Returns: String that contains "SHA1".
    public static var sha1: Swift.String {
        get throws {
            try _ihashAlgorithmNamesStatics.get_Sha1()
        }
    }

    /// Retrieves a string that contains "SHA256".
    /// - Returns: String that contains "SHA256".
    public static var sha256: Swift.String {
        get throws {
            try _ihashAlgorithmNamesStatics.get_Sha256()
        }
    }

    /// Retrieves a string that contains "SHA384".
    /// - Returns: String that contains "SHA384".
    public static var sha384: Swift.String {
        get throws {
            try _ihashAlgorithmNamesStatics.get_Sha384()
        }
    }

    /// Retrieves a string that contains "SHA512".
    /// - Returns: String that contains "SHA512".
    public static var sha512: Swift.String {
        get throws {
            try _ihashAlgorithmNamesStatics.get_Sha512()
        }
    }

    // MARK: Implementation details

    private static var _ihashAlgorithmNamesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmNamesStatics>? = nil

    internal static var _ihashAlgorithmNamesStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmNamesStatics> {
        get throws {
            try _ihashAlgorithmNamesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.HashAlgorithmNames", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_IHashAlgorithmNamesStatics.iid)
            }
        }
    }
}