// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encrypts, decrypts, and signs content, and verifies digital signatures.
public enum WindowsSecurityCryptographyCore_CryptographicEngine {
    // MARK: Windows.Security.Cryptography.Core.ICryptographicEngineStatics2 members

    /// Signs the hashed input data using the specified key.
    /// - Parameter key: The key to use to sign the hash. This key must be an asymmetric key obtained from a PersistedKeyProvider or AsymmetricKeyAlgorithmProvider.
    /// - Parameter data: The input data to sign. The data is a hashed value which can be obtained through incremental hash.
    /// - Returns: The signed data.
    public static func signHashedData(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics2.signHashedData(key, data))
    }

    /// Verifies the signature of the specified input data against a known signature.
    /// - Parameter key: The key to use to retrieve the signature from the input data. This key must be an asymmetric key obtained from a PersistedKeyProvider or AsymmetricKeyAlgorithmProvider.
    /// - Parameter data: The data to be verified. The data is a hashed value of raw data.
    /// - Parameter signature: The known signature to use to verify the signature of the input data.
    /// - Returns: True if the signature is verified; otherwise false.
    public static func verifySignatureWithHashInput(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ signature: WindowsStorageStreams_IBuffer?) throws -> Swift.Bool {
        try _icryptographicEngineStatics2.verifySignatureWithHashInput(key, data, signature)
    }

    /// Decrypts the encrypted input data using the supplied key.
    /// - Parameter key: The key to use to decrypt the encrypted input data.
    /// - Parameter data: The encrypted data to decrypt.
    /// - Parameter iv: The initial vector for a symmetric key. For an asymmetric key, set this value to null.
    /// - Returns: The decrypted data.
    public static func decryptAsync(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ iv: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_icryptographicEngineStatics2.decryptAsync(key, data, iv))
    }

    /// Computes a hash for the supplied input data, and then signs the computed hash using the specified key.
    /// - Parameter key: The key to use to compute and sign the hash.
    /// - Parameter data: The raw input data to sign. The data is not hashed.
    /// - Returns: An asynchronous operation to retrieve the hashed and signed data.
    public static func signAsync(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_icryptographicEngineStatics2.signAsync(key, data))
    }

    /// Signs the hashed input data using the specified key.
    /// - Parameter key: The key to use to sign the hash. This key must be an asymmetric key obtained from a PersistedKeyProvider or AsymmetricKeyAlgorithmProvider.
    /// - Parameter data: The input data to sign. The data is a hashed value which can be obtained through incremental hash.
    /// - Returns: An asynchronous operation to retrieve the signed data.
    public static func signHashedDataAsync(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_icryptographicEngineStatics2.signHashedDataAsync(key, data))
    }

    // MARK: Windows.Security.Cryptography.Core.ICryptographicEngineStatics members

    /// Encrypts data by using a symmetric or asymmetric algorithm.
    /// - Parameter key: Cryptographic key to use for encryption. This can be an asymmetric or a symmetric key. For more information, see AsymmetricKeyAlgorithmProvider and SymmetricKeyAlgorithmProvider.
    /// - Parameter data: Data to encrypt.
    /// - Parameter iv: Buffer that contains the initialization vector. This can be **null** for a symmetric algorithm and should always be **null** for an asymmetric algorithm. If an initialization vector (IV) was used to encrypt the data, you must use the same IV to decrypt the data. You can use the GenerateRandom method to create an IV that contains random data. Other IVs, such as nonce-generated vectors, require custom implementation. For more information, see Cryptographic keys.
    /// - Returns: Encrypted data.
    public static func encrypt(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ iv: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.encrypt(key, data, iv))
    }

    /// Decrypts content that was previously encrypted by using a symmetric or asymmetric algorithm.
    /// - Parameter key: Cryptographic key to use for decryption. This can be an asymmetric or a symmetric key. For more information, see AsymmetricKeyAlgorithmProvider and SymmetricKeyAlgorithmProvider.
    /// - Parameter data: Buffer that contains the encrypted data.
    /// - Parameter iv: Buffer that contains the initialization vector. If an initialization vector (IV) was used to encrypt the data, you must use the same IV to decrypt the data. For more information, see Encrypt.
    /// - Returns: Decrypted data.
    public static func decrypt(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ iv: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.decrypt(key, data, iv))
    }

    /// Performs authenticated encryption.
    /// - Parameter key: Symmetric key to use for encryption.
    /// - Parameter data: Data to be encrypted and authenticated.
    /// - Parameter nonce: Nonce to be used. A nonce is a variable that has minimal chance of repeating. For example, you can use a random value that is newly generated for each use, a time stamp, a sequence number, or some combination of these. The Microsoft GCM implementation requires a 12-byte nonce. The CCM implementation requires a 7- to 13- byte nonce.
    /// - Parameter authenticatedData: Authenticated data. This can be **Null**.
    /// - Returns: The encrypted and authenticated data.If the method fails, authentication fails; if the method succeeds, the authentication succeeded as well.
    public static func encryptAndAuthenticate(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ nonce: WindowsStorageStreams_IBuffer?, _ authenticatedData: WindowsStorageStreams_IBuffer?) throws -> WindowsSecurityCryptographyCore_EncryptedAndAuthenticatedData {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.encryptAndAuthenticate(key, data, nonce, authenticatedData))
    }

    /// Decrypts and authenticates data. For more information and a complete code sample, see EncryptedAndAuthenticatedData.
    /// - Parameter key: Symmetric key to use.
    /// - Parameter data: Data to be decrypted and authenticated.
    /// - Parameter nonce: Nonce to be used. This must be the same nonce used by the EncryptAndAuthenticate method.
    /// - Parameter authenticationTag: Authentication tag.
    /// - Parameter authenticatedData: Authenticated data. This can be **Null**.
    /// - Returns: A buffer that contains the decrypted data.If the method fails, authentication fails; if the method succeeds, the authentication succeeded as well.
    public static func decryptAndAuthenticate(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ nonce: WindowsStorageStreams_IBuffer?, _ authenticationTag: WindowsStorageStreams_IBuffer?, _ authenticatedData: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.decryptAndAuthenticate(key, data, nonce, authenticationTag, authenticatedData))
    }

    /// Signs digital content. For more information, see MACs, hashes, and signatures.
    /// - Parameter key: Key used for signing.
    /// - Parameter data: Data to be signed.
    /// - Returns: The data's signature.
    public static func sign(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.sign(key, data))
    }

    /// Verifies a message signature.
    /// - Parameter key: Key used for verification. This must be the same key previously used to sign the message.
    /// - Parameter data: Message to be verified.
    /// - Parameter signature: Signature previously computed over the message to be verified.
    /// - Returns: **true** if the message is verified.
    public static func verifySignature(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ data: WindowsStorageStreams_IBuffer?, _ signature: WindowsStorageStreams_IBuffer?) throws -> Swift.Bool {
        try _icryptographicEngineStatics.verifySignature(key, data, signature)
    }

    /// Derives a key from another key by using a key derivation function. For more information, see the KeyDerivationAlgorithmProvider and KeyDerivationParameters classes.
    /// - Parameter key: The symmetric or secret key used for derivation.
    /// - Parameter parameters: Derivation parameters. The parameters vary depending on the type of KDF algorithm used.
    /// - Parameter desiredKeySize: Requested size, in bytes, of the derived key.
    /// - Returns: Buffer that contains the derived key.
    public static func deriveKeyMaterial(_ key: WindowsSecurityCryptographyCore_CryptographicKey?, _ parameters: WindowsSecurityCryptographyCore_KeyDerivationParameters?, _ desiredKeySize: Swift.UInt32) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_icryptographicEngineStatics.deriveKeyMaterial(key, parameters, desiredKeySize))
    }

    // MARK: Implementation details

    private static var _icryptographicEngineStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics2>? = nil

    internal static var _icryptographicEngineStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics2> {
        get throws {
            try _icryptographicEngineStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.CryptographicEngine", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics2.iid)
            }
        }
    }

    private static var _icryptographicEngineStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics>? = nil

    internal static var _icryptographicEngineStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics> {
        get throws {
            try _icryptographicEngineStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Core.CryptographicEngine", id: CWinRT.SWRT_WindowsSecurityCryptographyCore_ICryptographicEngineStatics.iid)
            }
        }
    }
}