// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A force feedback effect which applies a constant force along a vector.
public final class WindowsGamingInputForceFeedback_ConstantForceEffect: WindowsRuntime.WinRTImport<WindowsGamingInputForceFeedback_ConstantForceEffectProjection>, WindowsGamingInputForceFeedback_IForceFeedbackEffectProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsGamingInputForceFeedback_ConstantForceEffectProjection.self))
    }

    // MARK: Windows.Gaming.Input.ForceFeedback.IForceFeedbackEffect members

    /// Specifies the percentage by which to reduce the force of the effect.
    /// - Returns: Specifies the percentage by which to reduce the force of the effect.
    public var gain: Swift.Double {
        get throws {
            try _interop.get_Gain()
        }
    }

    /// Specifies the percentage by which to reduce the force of the effect.
    /// - Returns: Specifies the percentage by which to reduce the force of the effect.
    public func gain(_ value: Swift.Double) throws {
        try _interop.put_Gain(value)
    }

    /// The current state of the force feedback effect.
    /// - Returns: The current state of the force feedback effect.
    public var state: WindowsGamingInputForceFeedback_ForceFeedbackEffectState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Starts the force feedback effect.
    public func start() throws {
        try _interop.start()
    }

    /// Stops the force feedback effect.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Gaming.Input.ForceFeedback.IConstantForceEffect members

    /// Sets the parameters for the constant force feedback effect.
    /// - Parameter vector: A vector describing the direction and magnitude of the effect on each axis. Each individual axis has a range of -1.0 to 1.0 and is independent of the other axes. Specifying a negative value for an axis reverses the input values from the axis.
    /// - Parameter duration: The duration of the effect.
    public func setParameters(_ vector: WindowsFoundationNumerics_Vector3, _ duration: WindowsFoundation_TimeSpan) throws {
        try _iconstantForceEffect.setParameters(vector, duration)
    }

    /// Sets the parameters for the effect and sets an envelope for the effect.
    /// - Parameter vector: A vector describing the direction and magnitude of the effect on each axis. Each individual axis has a range of -1.0 to 1.0 and is independent of the other axes. Specifying a negative value for an axis reverses the input values from the axis.
    /// - Parameter attackGain: Percentage by which to reduce the strength of the effect when it is ramping up.
    /// - Parameter sustainGain: Percentage by which to reduce the strength of the effect when it is sustaining.
    /// - Parameter releaseGain: Percentage by which to reduce the strength of the effect when it is ramping down.
    /// - Parameter startDelay: Time to delay the effect before starting.
    /// - Parameter attackDuration: Time to ramp up to the effect's full strength.
    /// - Parameter sustainDuration: Time to maintain the effect at full strength.
    /// - Parameter releaseDuration: Time to ramp down from full strength to zero.
    /// - Parameter repeatCount: The number of times to repeat the effect.
    public func setParametersWithEnvelope(_ vector: WindowsFoundationNumerics_Vector3, _ attackGain: Swift.Float, _ sustainGain: Swift.Float, _ releaseGain: Swift.Float, _ startDelay: WindowsFoundation_TimeSpan, _ attackDuration: WindowsFoundation_TimeSpan, _ sustainDuration: WindowsFoundation_TimeSpan, _ releaseDuration: WindowsFoundation_TimeSpan, _ repeatCount: Swift.UInt32) throws {
        try _iconstantForceEffect.setParametersWithEnvelope(vector, attackGain, sustainGain, releaseGain, startDelay, attackDuration, sustainDuration, releaseDuration, repeatCount)
    }

    // MARK: Implementation details

    private var _iconstantForceEffect_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputForceFeedback_IConstantForceEffect>? = nil

    internal var _iconstantForceEffect: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputForceFeedback_IConstantForceEffect> {
        get throws {
            try _iconstantForceEffect_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInputForceFeedback_IConstantForceEffect.iid).cast(to: CWinRT.SWRT_WindowsGamingInputForceFeedback_IConstantForceEffect.self)
            }
        }
    }

    deinit {
        _iconstantForceEffect_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.ForceFeedback.ConstantForceEffect", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}