// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates the force feedback hardware for a given input device.
public final class WindowsGamingInputForceFeedback_ForceFeedbackMotor: WindowsRuntime.WinRTImport<WindowsGamingInputForceFeedback_ForceFeedbackMotorProjection> {
    // MARK: Windows.Gaming.Input.ForceFeedback.IForceFeedbackMotor members

    /// Boolean indicating whether force feedback effects are paused.
    /// - Returns: Boolean indicating whether force feedback effects are paused.
    public var areEffectsPaused: Swift.Bool {
        get throws {
            try _interop.get_AreEffectsPaused()
        }
    }

    /// Boolean indicating whether the force feedback motor is enabled.
    /// - Returns: Boolean indicating whether the force feedback motor is enabled.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Specifies the percentage by which to reduce the force of all effects on the controller.
    /// - Returns: Specifies the percentage by which to reduce the force of all effects on the controller.
    public var masterGain: Swift.Double {
        get throws {
            try _interop.get_MasterGain()
        }
    }

    /// Specifies the percentage by which to reduce the force of all effects on the controller.
    /// - Returns: Specifies the percentage by which to reduce the force of all effects on the controller.
    public func masterGain(_ value: Swift.Double) throws {
        try _interop.put_MasterGain(value)
    }

    /// The axes supported by the force feedback motor.
    /// - Returns: The axes supported by the force feedback motor.
    public var supportedAxes: WindowsGamingInputForceFeedback_ForceFeedbackEffectAxes {
        get throws {
            try _interop.get_SupportedAxes()
        }
    }

    /// Attempts to asynchronously load a feedback effect to the device's internal memory.
    /// - Parameter effect: The effect to load.
    /// - Returns: Returns the result of the asynchronous operation.
    public func loadEffectAsync(_ effect: WindowsGamingInputForceFeedback_IForceFeedbackEffect?) throws -> WindowsFoundation_IAsyncOperation<WindowsGamingInputForceFeedback_ForceFeedbackLoadEffectResult> {
        try COM.NullResult.unwrap(_interop.loadEffectAsync(effect))
    }

    /// Pauses all force feedback effects being executed.
    public func pauseAllEffects() throws {
        try _interop.pauseAllEffects()
    }

    /// Resumes all force feedback effects being executed.
    public func resumeAllEffects() throws {
        try _interop.resumeAllEffects()
    }

    /// Stops all force feedback effects.
    public func stopAllEffects() throws {
        try _interop.stopAllEffects()
    }

    /// Attempts to asynchronously disable the force feedback motor.
    /// - Returns: Returns the result of the asynchronous operation.
    public func tryDisableAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryDisableAsync())
    }

    /// Try to asynchronously enable the force feedback motor of the device.
    /// - Returns: Returns the result of the asynchronous operation.
    public func tryEnableAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryEnableAsync())
    }

    /// Attempts to asynchronously reset the device back to its initial state.
    /// - Returns: Returns the result of the asynchronous operation.
    public func tryResetAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryResetAsync())
    }

    /// Attempts to asynchronously unload a feedback effect from the device's internal memory.
    /// - Parameter effect: The effect to unload.
    /// - Returns: Returns the result of the asynchronous operation.
    public func tryUnloadEffectAsync(_ effect: WindowsGamingInputForceFeedback_IForceFeedbackEffect?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryUnloadEffectAsync(effect))
    }

    // MARK: Implementation details
}