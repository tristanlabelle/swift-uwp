// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the name policy for a specific namespace. It can specify the DNS servers to use for name resolution of the namespace, the web proxies to use when connecting to the namespace, or whether it should be exempted from the policy itself.
public final class WindowsNetworkingVpn_VpnDomainNameInfo: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnDomainNameInfoProjection> {
    // MARK: Windows.Networking.Vpn.IVpnDomainNameInfoFactory members

    public convenience init(_ name: Swift.String, _ nameType: WindowsNetworkingVpn_VpnDomainNameType, _ dnsServerList: WindowsFoundationCollections_IIterable<WindowsNetworking_HostName?>?, _ proxyServerList: WindowsFoundationCollections_IIterable<WindowsNetworking_HostName?>?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ivpnDomainNameInfoFactory.createVpnDomainNameInfo(name, nameType, dnsServerList, proxyServerList)))
    }

    // MARK: Windows.Networking.Vpn.IVpnDomainNameInfo members

    /// Gets a list of DNS servers to perform DNS resolution against when resolving a name in the namespace.
    /// - Returns: A list of DNS servers to perform DNS resolution against when resolving a name in the namespace.
    public var dnsServers: WindowsFoundationCollections_IVector<WindowsNetworking_HostName?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DnsServers())
        }
    }

    /// Gets or sets the domain name. This could be an FQDN, or a DNS suffix.
    /// - Returns: The domain name. This could be an FQDN, or a DNS suffix.
    public var domainName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DomainName())
        }
    }

    /// Gets or sets the domain name. This could be an FQDN, or a DNS suffix.
    /// - Returns: The domain name. This could be an FQDN, or a DNS suffix.
    public func domainName(_ value: WindowsNetworking_HostName?) throws {
        try _interop.put_DomainName(value)
    }

    /// Gets or sets whether the namespace in question is a FQDN, or a DNS suffix.
    /// - Returns: An enum value indicating whether the namespace in question is a FQDN, or a DNS suffix.
    public var domainNameType: WindowsNetworkingVpn_VpnDomainNameType {
        get throws {
            try _interop.get_DomainNameType()
        }
    }

    /// Gets or sets whether the namespace in question is a FQDN, or a DNS suffix.
    /// - Returns: An enum value indicating whether the namespace in question is a FQDN, or a DNS suffix.
    public func domainNameType(_ value: WindowsNetworkingVpn_VpnDomainNameType) throws {
        try _interop.put_DomainNameType(value)
    }

    /// Gets a list of web proxy servers to be used when connecting to a resource in the specified namespace.
    /// - Returns: A list of web proxy servers to be used when connecting to a resource in the specified namespace.
    public var webProxyServers: WindowsFoundationCollections_IVector<WindowsNetworking_HostName?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WebProxyServers())
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnDomainNameInfo2 members

    /// Gets a web proxy URI to be used when connecting to a resource in the specified namespace. This value differs from WebProxyServers in that the URI can be specify a custom port number, while the WebProxyServers value assumes port 80.
    /// - Returns: A list of web proxy server URIs to be used when connecting to a resource in the specified namespace.
    public var webProxyUris: WindowsFoundationCollections_IVector<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnDomainNameInfo2.get_WebProxyUris())
        }
    }

    // MARK: Implementation details

    private var _ivpnDomainNameInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfo2>? = nil

    internal var _ivpnDomainNameInfo2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfo2> {
        get throws {
            try _ivpnDomainNameInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfo2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfo2.self)
            }
        }
    }

    deinit {
        _ivpnDomainNameInfo2_storage?.release()
    }

    private static var _ivpnDomainNameInfoFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfoFactory>? = nil

    internal static var _ivpnDomainNameInfoFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfoFactory> {
        get throws {
            try _ivpnDomainNameInfoFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnDomainNameInfo", id: CWinRT.SWRT_WindowsNetworkingVpn_IVpnDomainNameInfoFactory.iid)
            }
        }
    }
}