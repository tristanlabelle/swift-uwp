// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Used by the platform to manage a memory buffer. **VpnPacketBuffer** allows buffers to be chained together in a **IVpnPacketBufferList** object list to be sent or received in a specific order.
public final class WindowsNetworkingVpn_VpnPacketBuffer: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnPacketBufferProjection> {
    // MARK: Windows.Networking.Vpn.IVpnPacketBufferFactory members

    /// Reserved.
    /// - Parameter parentBuffer: Reserved.
    /// - Parameter offset: Reserved.
    /// - Parameter length: Not used.
    /// - Returns: Reserved.
    public convenience init(_ parentBuffer: WindowsNetworkingVpn_VpnPacketBuffer?, _ offset: Swift.UInt32, _ length: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ivpnPacketBufferFactory.createVpnPacketBuffer(parentBuffer, offset, length)))
    }

    // MARK: Windows.Networking.Vpn.IVpnPacketBuffer members

    /// Gets the memory buffer object, designed to contain packets of date to be sent or received as part of a **IVpnPacketBufferList**.
    /// - Returns: The memory buffer object.
    public var buffer: WindowsStorageStreams_Buffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Buffer())
        }
    }

    /// Gets the status of **VpnPacketBuffer**. The status property may be used to report errors when manipulating the **IVpnPacketBufferList.**
    /// - Returns: An enum value indicating the status of a **VpnPacketBuffer** object.
    public var status: WindowsNetworkingVpn_VpnPacketBufferStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Gets the status of **VpnPacketBuffer**. The status property may be used to report errors when manipulating the **IVpnPacketBufferList.**
    /// - Returns: An enum value indicating the status of a **VpnPacketBuffer** object.
    public func status(_ value: WindowsNetworkingVpn_VpnPacketBufferStatus) throws {
        try _interop.put_Status(value)
    }

    /// Gets or sets a number specifying which transport object to use as specified in the VpnChannel:Start* methods. This allows the selection between the main and the optional transports.
    /// - Returns: A value of 0 sets this packet to be sent over the main transport. A value of 1 sets this packet to be sent over the optional transport.
    public var transportAffinity: Swift.UInt32 {
        get throws {
            try _interop.get_TransportAffinity()
        }
    }

    /// Gets or sets a number specifying which transport object to use as specified in the VpnChannel:Start* methods. This allows the selection between the main and the optional transports.
    /// - Returns: A value of 0 sets this packet to be sent over the main transport. A value of 1 sets this packet to be sent over the optional transport.
    public func transportAffinity(_ value: Swift.UInt32) throws {
        try _interop.put_TransportAffinity(value)
    }

    // MARK: Windows.Networking.Vpn.IVpnPacketBuffer2 members

    /// Gets the app ID representing the app that caused this packet to flow. This is present only on the first packet of a flow. The presence of this property indicates it is the first packet.
    /// - Returns: The app ID representing the app that caused this packet to flow.
    public var appId: WindowsNetworkingVpn_VpnAppId {
        get throws {
            try COM.NullResult.unwrap(_ivpnPacketBuffer2.get_AppId())
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnPacketBuffer3 members

    /// Gets or sets a transport context object, for example the name of a host or server.
    /// - Returns: A transport context object, for example the name of a host or server.
    public var transportContext: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ivpnPacketBuffer3.get_TransportContext())
        }
    }

    /// Gets or sets a transport context object, for example the name of a host or server.
    /// - Returns: A transport context object, for example the name of a host or server.
    public func transportContext(_ value: WindowsRuntime.IInspectable?) throws {
        try _ivpnPacketBuffer3.put_TransportContext(value)
    }

    // MARK: Implementation details

    private var _ivpnPacketBuffer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer2>? = nil

    internal var _ivpnPacketBuffer2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer2> {
        get throws {
            try _ivpnPacketBuffer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer2.self)
            }
        }
    }

    private var _ivpnPacketBuffer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer3>? = nil

    internal var _ivpnPacketBuffer3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer3> {
        get throws {
            try _ivpnPacketBuffer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBuffer3.self)
            }
        }
    }

    deinit {
        _ivpnPacketBuffer2_storage?.release()
        _ivpnPacketBuffer3_storage?.release()
    }

    private static var _ivpnPacketBufferFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBufferFactory>? = nil

    internal static var _ivpnPacketBufferFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBufferFactory> {
        get throws {
            try _ivpnPacketBufferFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnPacketBuffer", id: CWinRT.SWRT_WindowsNetworkingVpn_IVpnPacketBufferFactory.iid)
            }
        }
    }
}