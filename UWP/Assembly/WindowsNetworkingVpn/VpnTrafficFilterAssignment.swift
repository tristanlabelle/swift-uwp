// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows the specification of a set of traffic filters as policy to a VPN channel.
public final class WindowsNetworkingVpn_VpnTrafficFilterAssignment: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnTrafficFilterAssignmentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnTrafficFilterAssignmentProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnTrafficFilterAssignment members

    /// Gets or sets whether inbound traffic is allowed or not.
    /// - Returns: If inbound traffic is allowed, it is **TRUE**; otherwise , it is **FALSE**.
    public var allowInbound: Swift.Bool {
        get throws {
            try _interop.get_AllowInbound()
        }
    }

    /// Gets or sets whether inbound traffic is allowed or not.
    /// - Returns: If inbound traffic is allowed, it is **TRUE**; otherwise , it is **FALSE**.
    public func allowInbound(_ value: Swift.Bool) throws {
        try _interop.put_AllowInbound(value)
    }

    /// Gets or sets whether outbound traffic is allowed or not.
    /// - Returns: If outbound traffic is allowed, it is **TRUE**; otherwise , it is **FALSE**.
    public var allowOutbound: Swift.Bool {
        get throws {
            try _interop.get_AllowOutbound()
        }
    }

    /// Gets or sets whether outbound traffic is allowed or not.
    /// - Returns: If outbound traffic is allowed, it is **TRUE**; otherwise , it is **FALSE**.
    public func allowOutbound(_ value: Swift.Bool) throws {
        try _interop.put_AllowOutbound(value)
    }

    /// Gets a list of traffic filters composing the traffic filter policy to assign to a VPN channel.
    /// - Returns: The list of traffic filters composing the traffic filter policy to assign to a VPN channel.
    public var trafficFilterList: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnTrafficFilter?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TrafficFilterList())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnTrafficFilterAssignment", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}