// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a VPN plug-in profile.
public final class WindowsNetworkingVpn_VpnPlugInProfile: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnPlugInProfileProjection>, WindowsNetworkingVpn_IVpnProfileProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnPlugInProfileProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnPlugInProfile members

    /// Gets or sets an XML string to configure the VPN plug-in. Refer to the documentation from the VPN plug-in for format and support.
    /// - Returns: A string representing the XML to configure the VPN plug-in.
    public var customConfiguration: Swift.String {
        get throws {
            try _interop.get_CustomConfiguration()
        }
    }

    /// Gets or sets an XML string to configure the VPN plug-in. Refer to the documentation from the VPN plug-in for format and support.
    /// - Returns: A string representing the XML to configure the VPN plug-in.
    public func customConfiguration(_ value: Swift.String) throws {
        try _interop.put_CustomConfiguration(value)
    }

    /// Gets a list of server URIs to connect to for the VPN profile.
    /// - Returns: A list of server URIs to connect to for the VPN profile.
    public var serverUris: WindowsFoundationCollections_IVector<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerUris())
        }
    }

    /// Gets or sets the package family name of the VPN plug-in to be used for this VPN plug-in profile.
    /// - Returns: The package family name of the VPN plug-in to be used for this VPN plug-in profile.
    public var vpnPluginPackageFamilyName: Swift.String {
        get throws {
            try _interop.get_VpnPluginPackageFamilyName()
        }
    }

    /// Gets or sets the package family name of the VPN plug-in to be used for this VPN plug-in profile.
    /// - Returns: The package family name of the VPN plug-in to be used for this VPN plug-in profile.
    public func vpnPluginPackageFamilyName(_ value: Swift.String) throws {
        try _interop.put_VpnPluginPackageFamilyName(value)
    }

    // MARK: Windows.Networking.Vpn.IVpnProfile members

    /// Gets or sets the AlwayOn property. If true, indicates that the VPN profile is always connected.
    /// - Returns: If the VPN profile is an AlwaysOn profile, it is TRUE; otherwise , it is FALSE.
    public var alwaysOn: Swift.Bool {
        get throws {
            try _ivpnProfile.get_AlwaysOn()
        }
    }

    /// Gets or sets the AlwayOn property. If true, indicates that the VPN profile is always connected.
    /// - Returns: If the VPN profile is an AlwaysOn profile, it is TRUE; otherwise , it is FALSE.
    public func alwaysOn(_ value: Swift.Bool) throws {
        try _ivpnProfile.put_AlwaysOn(value)
    }

    /// Gets a list of apps that will trigger the VPN connection to connect.
    /// - Returns: A list of apps that will trigger the VPN connection to connect.
    public var appTriggers: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnAppId?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_AppTriggers())
        }
    }

    /// Gets a list of Name Resolution Policy Table (NRPT) rules for the VPN plug-in profile.
    /// - Returns: A list of Name Resolution Policy Table (NRPT) rules for the VPN plug-in profile.
    public var domainNameInfoList: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnDomainNameInfo?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_DomainNameInfoList())
        }
    }

    /// Gets or sets the name of the VPN profile.
    /// - Returns: The name of the VPN profile.
    public var profileName: Swift.String {
        get throws {
            try _ivpnProfile.get_ProfileName()
        }
    }

    /// Gets or sets the name of the VPN profile.
    /// - Returns: The name of the VPN profile.
    public func profileName(_ value: Swift.String) throws {
        try _ivpnProfile.put_ProfileName(value)
    }

    /// Gets or sets whether the credentials for the VPN profile will be cached. If TRUE, the credentials for the VPN profile will be cached where applicable.
    /// - Returns: If the credentials for the VPN profile will be cached, it is TRUE; otherwise , it is FALSE.
    public var rememberCredentials: Swift.Bool {
        get throws {
            try _ivpnProfile.get_RememberCredentials()
        }
    }

    /// Gets or sets whether the credentials for the VPN profile will be cached. If TRUE, the credentials for the VPN profile will be cached where applicable.
    /// - Returns: If the credentials for the VPN profile will be cached, it is TRUE; otherwise , it is FALSE.
    public func rememberCredentials(_ value: Swift.Bool) throws {
        try _ivpnProfile.put_RememberCredentials(value)
    }

    /// Gets a list of routes that must go over the VPN interface in the case of a Split Tunneled VPN.
    /// - Returns: A list of routes that must go over the VPN interface in the case of a Split Tunneled VPN.
    public var routes: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnRoute?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_Routes())
        }
    }

    /// Gets a list of Traffic Filters (including per App) included in the VPN profile.
    /// - Returns: A list of Traffic Filters (including per App) included in the VPN profile.
    public var trafficFilters: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnTrafficFilter?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_TrafficFilters())
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnPlugInProfile2 members

    /// Gets the current connection status.
    /// - Returns: An enumeration value giving current connection status.
    public var connectionStatus: WindowsNetworkingVpn_VpnManagementConnectionStatus {
        get throws {
            try _ivpnPlugInProfile2.get_ConnectionStatus()
        }
    }

    /// Gets or sets a value that determines whether this VPN profile appears in the system's VPN connection UI.
    /// - Returns: When true, this profile should appear in the system VPN connection user interface. By default, this value is **false**.
    public var requireVpnClientAppUI: Swift.Bool {
        get throws {
            try _ivpnPlugInProfile2.get_RequireVpnClientAppUI()
        }
    }

    /// Gets or sets a value that determines whether this VPN profile appears in the system's VPN connection UI.
    /// - Returns: When true, this profile should appear in the system VPN connection user interface. By default, this value is **false**.
    public func requireVpnClientAppUI(_ value: Swift.Bool) throws {
        try _ivpnPlugInProfile2.put_RequireVpnClientAppUI(value)
    }

    // MARK: Implementation details

    private var _ivpnProfile_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile>? = nil

    internal var _ivpnProfile: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile> {
        get throws {
            try _ivpnProfile_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile.self)
            }
        }
    }

    private var _ivpnPlugInProfile2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPlugInProfile2>? = nil

    internal var _ivpnPlugInProfile2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnPlugInProfile2> {
        get throws {
            try _ivpnPlugInProfile2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnPlugInProfile2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnPlugInProfile2.self)
            }
        }
    }

    deinit {
        _ivpnProfile_storage?.release()
        _ivpnPlugInProfile2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnPlugInProfile", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}