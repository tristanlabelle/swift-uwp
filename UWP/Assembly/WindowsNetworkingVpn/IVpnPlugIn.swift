// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides an interface to implement specific third party VPN client operations.
public protocol WindowsNetworkingVpn_IVpnPlugInProtocol: IInspectableProtocol {
    /// This method instructs the VPN plug-in to connect to the VPN server and establish the VPN channel.
    /// - Parameter channel: The VPN channel object representing the instance VPN connection of the VPN plug-in to the VPN server.
    func connect(_ channel: WindowsNetworkingVpn_VpnChannel?) throws

    /// This method instructs the VPN plug-in to disconnect from the VPN server and destroy the VPN channel.
    /// - Parameter channel: The VPN channel object representing the instance VPN connection of the VPN plug-in to the VPN server.
    func disconnect(_ channel: WindowsNetworkingVpn_VpnChannel?) throws

    /// This method instructs the VPN plug-in to compute and return a Keep alive payload ready to be sent to the VPN server.
    /// - Parameter channel: The VPN channel object representing the instance VPN connection of the VPN plug-in to the VPN server.
    /// - Parameter keepAlivePacket: An VPN protocol specific message payload used by the VPN Plug-in to indicate to the server that the client and its VPN connection are still alive.
    func getKeepAlivePayload(_ channel: WindowsNetworkingVpn_VpnChannel?, _ keepAlivePacket: inout WindowsNetworkingVpn_VpnPacketBuffer?) throws

    /// This method instructs the VPN plug-in to prepare the indicated L3 IP packet for transmission to the VPN server. The process might include any encapsulation specific to the VPN protocol.
    /// - Parameter channel: The VPN channel object representing the instance VPN connection of the VPN plug-in to the VPN server.
    /// - Parameter packets: An L3 IP packets originated by the client machine TCP/IP stack and that needs to be processed to be sent to the corporate network.
    /// - Parameter encapulatedPackets: An buffer containing an encapsulated IP packet (framed in a specific VPN protocol message and or potentially encrypted) that is ready to be sent to the VPN server through the **outerTunnelTransport.**
    func encapsulate(_ channel: WindowsNetworkingVpn_VpnChannel?, _ packets: WindowsNetworkingVpn_VpnPacketBufferList?, _ encapulatedPackets: WindowsNetworkingVpn_VpnPacketBufferList?) throws

    /// This method instructs the VPN plug-in to prepare receive a buffer from the VPN server **outerTunnelTransport**, extract any number of IP packets encapsulated in the buffer, and return the IP packets together with any other reply buffers that are needed to be sent back through the **outerTunnelTransport** to the VPN server.
    /// - Parameter channel: The VPN channel object representing the instance VPN connection of the VPN plug-in to the VPN server.
    /// - Parameter encapBuffer: A buffer originated from the VPN server and received through the **outerTunnelTransport.**
    /// - Parameter decapsulatedPackets: An **IVpnPacketBuffer** chain representing any L3 IP packets extracted and decapsulated from the buffer and which need to be injected through the VPN interface to be received by the client machine's TCP/IP stack.
    /// - Parameter controlPacketsToSend: An **IVpnPacketBuffer** chain representing any control messages that VPN plug-in is required by its protocol specification to reply back to the VPN server.
    func decapsulate(_ channel: WindowsNetworkingVpn_VpnChannel?, _ encapBuffer: WindowsNetworkingVpn_VpnPacketBuffer?, _ decapsulatedPackets: WindowsNetworkingVpn_VpnPacketBufferList?, _ controlPacketsToSend: WindowsNetworkingVpn_VpnPacketBufferList?) throws
}

/// Provides an interface to implement specific third party VPN client operations.
public typealias WindowsNetworkingVpn_IVpnPlugIn = any WindowsNetworkingVpn_IVpnPlugInProtocol