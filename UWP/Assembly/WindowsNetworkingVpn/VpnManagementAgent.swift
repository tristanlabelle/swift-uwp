// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows the creation, deletion, edit, connect, and disconnect flows for VPN. These can be used to manage the lifecycle of a VPN profile, and to create a custom VPN connection manager.
public final class WindowsNetworkingVpn_VpnManagementAgent: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnManagementAgentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnManagementAgentProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnManagementAgent members

    /// Creates a new VPN connection based on a ProfileXML-encoded string (see ProfileXML XSD ).
    /// - Parameter xml: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func addProfileFromXmlAsync(_ xml: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.addProfileFromXmlAsync(xml))
    }

    /// Creates a new VPN Profile based on the **VpnProfile** input object.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func addProfileFromObjectAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.addProfileFromObjectAsync(profile))
    }

    /// Updates an existing VPN profile based on an input WAP XML string.
    /// - Parameter xml: A Wireless Application Protocol (WAP) XML string.
    /// - Returns: An enum value indicating the error status.
    public func updateProfileFromXmlAsync(_ xml: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.updateProfileFromXmlAsync(xml))
    }

    /// Updates a VPN profile based on an input object.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func updateProfileFromObjectAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.updateProfileFromObjectAsync(profile))
    }

    /// Gets the accessible list of present VPN profiles.
    /// - Returns: A list of present VPN profiles.
    public func getProfilesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingVpn_IVpnProfile?>?> {
        try COM.NullResult.unwrap(_interop.getProfilesAsync())
    }

    /// Deletes an existing VPN profile.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func deleteProfileAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.deleteProfileAsync(profile))
    }

    /// Connects to an existing VPN profile.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func connectProfileAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.connectProfileAsync(profile))
    }

    /// Connects to a VPN profile using a specified set of password credentials.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Parameter passwordCredential: The current password used by the user to log on to the VPN server.
    /// - Returns: An enum value indicating the error status.
    public func connectProfileWithPasswordCredentialAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?, _ passwordCredential: WindowsSecurityCredentials_PasswordCredential?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.connectProfileWithPasswordCredentialAsync(profile, passwordCredential))
    }

    /// Disconnects from a connected VPN profile.
    /// - Parameter profile: A **VpnProfile** object.
    /// - Returns: An enum value indicating the error status.
    public func disconnectProfileAsync(_ profile: WindowsNetworkingVpn_IVpnProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnManagementErrorStatus> {
        try COM.NullResult.unwrap(_interop.disconnectProfileAsync(profile))
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnManagementAgent", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}