// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an interface ID used in the construction and assignment of an IPv6 address to the VPN interface. The ID contained in this class fills the interface ID portion of the IPv6 address.
public final class WindowsNetworkingVpn_VpnInterfaceId: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnInterfaceIdProjection> {
    // MARK: Windows.Networking.Vpn.IVpnInterfaceIdFactory members

    /// Creates a VpnInterfaceId object.
    /// - Parameter address: The address represented as a set of bytes.
    /// - Returns: Represents an interface ID used in the construction and assignment of an IPv6 address to the VPN interface. The ID contained in this class fills the interface ID portion of the IPv6 address.
    public convenience init(_ address: [Swift.UInt8]) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ivpnInterfaceIdFactory.createVpnInterfaceId(address)))
    }

    // MARK: Windows.Networking.Vpn.IVpnInterfaceId members

    /// Gets the address represented as the set of bytes to be used as the interface ID.
    /// - Parameter id: The address represented as the set of bytes.
    public func getAddressInfo(_ id: inout [Swift.UInt8]) throws {
        try _interop.getAddressInfo(&id)
    }

    // MARK: Implementation details

    private static var _ivpnInterfaceIdFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnInterfaceIdFactory>? = nil

    internal static var _ivpnInterfaceIdFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnInterfaceIdFactory> {
        get throws {
            try _ivpnInterfaceIdFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnInterfaceId", id: CWinRT.SWRT_WindowsNetworkingVpn_IVpnInterfaceIdFactory.iid)
            }
        }
    }
}