// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides methods to create and destroy a VPN channel, and methods to perform buffer management. A VPN channel is the object in the system that links the network traffic data flow between the VPN plug-in's VPN server socket and the client machine network stack.
public final class WindowsNetworkingVpn_VpnChannel: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnChannelProjection> {
    // MARK: Windows.Networking.Vpn.IVpnChannel members

    /// Gets or sets a **VpnChannelConfiguration** object corresponding to the configuration of the VpnChannel and which dictates how to establish the communication with the VPN server.
    /// - Returns: A **VpnChannelConfiguration** object containing the configuration pertaining the VpnChannel object.
    public var configuration: WindowsNetworkingVpn_VpnChannelConfiguration {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Configuration())
        }
    }

    /// Gets the unique instance ID of a VPN channel. This can be used to simplify demuxing operations between two VPN connection instances.
    /// - Returns: A number representing the unique ID of the VPN channel.
    public var id: Swift.UInt32 {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets a context object that VPN plug-ins can use to associate their internal state with a VpnChannel object for later use while the session is in progress.
    /// - Returns: The contents of the Object are defined by the individual plug-in, based on the needs of the plug-in.
    public var plugInContext: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PlugInContext())
        }
    }

    /// Gets or sets a context object that VPN plug-ins can use to associate their internal state with a VpnChannel object for later use while the session is in progress.
    /// - Returns: The contents of the Object are defined by the individual plug-in, based on the needs of the plug-in.
    public func plugInContext(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_PlugInContext(value)
    }

    /// Gets the statement of health of the client machine.
    /// - Returns: A pointer to the VpnSystemHealth class that provides access to the statement of health for the client machine.
    public var systemHealth: WindowsNetworkingVpn_VpnSystemHealth {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SystemHealth())
        }
    }

    /// Not supported.
    public func activityChange(adding handler: WindowsFoundation_TypedEventHandler<WindowsNetworkingVpn_VpnChannel?, WindowsNetworkingVpn_VpnChannelActivityEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ActivityChange(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activityChange)
    }

    public func activityChange(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ActivityChange(token)
    }

    /// Prepares and marks the transport for use by the VPN framework as a transport link communicating the VPN plug-in to the VPN server. This call must be performed before any other operations related to the VPN framework APIs.
    /// - Parameter mainOuterTunnelTransport: An **IInspectable** object for socket transport. This object can be a Windows.Networking.StreamSocket, a Windows.Networking.StreamWebSocket, or a Windows.Networking.DatagramSocket. This socket will control the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data. The socket must be unconnected at the point of the call.
    /// - Parameter optionalOuterTunnelTransport: An optional **IInspectable** object for socket transport. This object can be a Windows.Networking.StreamSocket, a Windows.Networking.StreamWebSocket, or a Windows.Networking.DatagramSocket. This socket will control the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data.
    public func associateTransport(_ mainOuterTunnelTransport: WindowsRuntime.IInspectable?, _ optionalOuterTunnelTransport: WindowsRuntime.IInspectable?) throws {
        try _interop.associateTransport(mainOuterTunnelTransport, optionalOuterTunnelTransport)
    }

    public func start(_ assignedClientIPv4list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ assignedClientIPv6list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ vpnInterfaceId: WindowsNetworkingVpn_VpnInterfaceId?, _ routeScope: WindowsNetworkingVpn_VpnRouteAssignment?, _ namespaceScope: WindowsNetworkingVpn_VpnNamespaceAssignment?, _ mtuSize: Swift.UInt32, _ maxFrameSize: Swift.UInt32, _ optimizeForLowCostNetwork: Swift.Bool, _ mainOuterTunnelTransport: WindowsRuntime.IInspectable?, _ optionalOuterTunnelTransport: WindowsRuntime.IInspectable?) throws {
        try _interop.start(assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, routeScope, namespaceScope, mtuSize, maxFrameSize, optimizeForLowCostNetwork, mainOuterTunnelTransport, optionalOuterTunnelTransport)
    }

    /// Destroys a previously established VPN channel object. Disassociates and closes the *outerTunnelTransport* connection to the VPN server.
    public func stop() throws {
        try _interop.stop()
    }

    /// Request the VPN platform to collect credentials from the user. The plug-in can specify the type and form of credentials to collect. The result is an object containing the main credentials depending on the type and the secondary credentials for change and expiration cases.
    /// - Parameter credType: An enum value indicating type of credential to collect.
    /// - Parameter isRetry: If the request is a retry from as previous failed attempt, it is TRUE; otherwise, it is FALSE.
    /// - Parameter isSingleSignOnCredential: If the credential should be used by all applications operating over the VPN tunnel and authenticating to resources on the VPN, it is TRUE; otherwise, it is FALSE. This provides a single sign on experience over the VPN.
    /// - Parameter certificate: The certificate that can be optionally passed to indicate the platform its intention of use and obtain consent and unlock its protection.
    /// - Returns: An object containing the main credentials and any other transitional credentials filled by the user.
    public func requestCredentials(_ credType: WindowsNetworkingVpn_VpnCredentialType, _ isRetry: Swift.Bool, _ isSingleSignOnCredential: Swift.Bool, _ certificate: WindowsSecurityCryptographyCertificates_Certificate?) throws -> WindowsNetworkingVpn_VpnPickedCredential {
        try COM.NullResult.unwrap(_interop.requestCredentials(credType, isRetry, isSingleSignOnCredential, certificate))
    }

    /// Not supported. Requests a **IVpnPacketBuffer** from the specified pool. There is one **IVpnPacketBuffer** for the send path and another **IVpnPacketBuffer** for the receive path
    /// - Parameter type: An enum value indicating which buffer pool to pick a buffer from. If the buffer requested for the packet to be sent to the VPN server, pick the Send enum type. If the buffer requested is for a received L3 decapsulated packet ready to be injected into the client network stack, pick the Receive enum type.
    /// - Parameter vpnPacketBuffer: A **IVpnPacketBuffer** object returned from the specified buffer pool.
    public func requestVpnPacketBuffer(_ type: WindowsNetworkingVpn_VpnDataPathType, _ vpnPacketBuffer: inout WindowsNetworkingVpn_VpnPacketBuffer?) throws {
        try _interop.requestVpnPacketBuffer(type, &vpnPacketBuffer)
    }

    /// Writes a diagnostic message to the system log.
    /// - Parameter message: The text of the diagnostic message.
    public func logDiagnosticMessage(_ message: Swift.String) throws {
        try _interop.logDiagnosticMessage(message)
    }

    public func requestCustomPrompt(_ customPrompt: WindowsFoundationCollections_IVectorView<WindowsNetworkingVpn_IVpnCustomPrompt?>?) throws {
        try _interop.requestCustomPrompt(customPrompt)
    }

    /// Not supported.
    /// - Parameter message: The text of the error message.
    public func setErrorMessage(_ message: Swift.String) throws {
        try _interop.setErrorMessage(message)
    }

    /// Not supported.
    /// - Parameter tunnelTransport: An optional **IInspectable** object for socket transport. The object can be a **Windows.Networking.StreamSocket**, **Windows.Networking.WebStreamSocket** or **Windows.Networking.DatagramSocket**. This socket controls the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data.
    /// - Parameter useTls12: If Transport Security Layer 1.2 should be used, it is TRUE; otherwise, it is FALSE.
    public func setAllowedSslTlsVersions(_ tunnelTransport: WindowsRuntime.IInspectable?, _ useTls12: Swift.Bool) throws {
        try _interop.setAllowedSslTlsVersions(tunnelTransport, useTls12)
    }

    // MARK: Windows.Networking.Vpn.IVpnChannel2 members

    /// Event raised when the channel's activity state has changed. Used by VPN plug-ins to determine whether the channel is active with traffic or idle.
    public func activityStateChange(adding handler: WindowsFoundation_TypedEventHandler<WindowsNetworkingVpn_VpnChannel?, WindowsNetworkingVpn_VpnChannelActivityStateChangedArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ivpnChannel2.add_ActivityStateChange(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activityStateChange)
    }

    public func activityStateChange(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ivpnChannel2.remove_ActivityStateChange(token)
    }

    public func startWithMainTransport(_ assignedClientIPv4list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ assignedClientIPv6list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ vpnInterfaceId: WindowsNetworkingVpn_VpnInterfaceId?, _ assignedRoutes: WindowsNetworkingVpn_VpnRouteAssignment?, _ assignedDomainName: WindowsNetworkingVpn_VpnDomainNameAssignment?, _ mtuSize: Swift.UInt32, _ maxFrameSize: Swift.UInt32, _ Reserved: Swift.Bool, _ mainOuterTunnelTransport: WindowsRuntime.IInspectable?) throws {
        try _ivpnChannel2.startWithMainTransport(assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, assignedRoutes, assignedDomainName, mtuSize, maxFrameSize, Reserved, mainOuterTunnelTransport)
    }

    public func startExistingTransports(_ assignedClientIPv4list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ assignedClientIPv6list: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ vpnInterfaceId: WindowsNetworkingVpn_VpnInterfaceId?, _ assignedRoutes: WindowsNetworkingVpn_VpnRouteAssignment?, _ assignedDomainName: WindowsNetworkingVpn_VpnDomainNameAssignment?, _ mtuSize: Swift.UInt32, _ maxFrameSize: Swift.UInt32, _ Reserved: Swift.Bool) throws {
        try _ivpnChannel2.startExistingTransports(assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, assignedRoutes, assignedDomainName, mtuSize, maxFrameSize, Reserved)
    }

    /// Retrieves a VpnPacketBuffer object from the send packet buffer pool to use in encapsulation and transmission of a data packet from the client network stack to the VPN server.
    /// - Returns: The requested packet buffer object.
    public func getVpnSendPacketBuffer() throws -> WindowsNetworkingVpn_VpnPacketBuffer {
        try COM.NullResult.unwrap(_ivpnChannel2.getVpnSendPacketBuffer())
    }

    /// Requests a VpnPacketBuffer object from the receive packet buffer pool to be used in the decapsulation or injection of a received packet from the VPN server into the local network stack
    /// - Returns: The requested packet buffer object.
    public func getVpnReceivePacketBuffer() throws -> WindowsNetworkingVpn_VpnPacketBuffer {
        try COM.NullResult.unwrap(_ivpnChannel2.getVpnReceivePacketBuffer())
    }

    public func requestCustomPromptAsync(_ customPromptElement: WindowsFoundationCollections_IVectorView<WindowsNetworkingVpn_IVpnCustomPromptElement?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ivpnChannel2.requestCustomPromptAsync(customPromptElement))
    }

    /// VPN platform to collect credentials from the user. If user interaction is required to obtain a credential or consent, the platform provides the necessary user interaction. A VPN plug-in must request credentials before using any type of credential, even if the intent is not to invoke user interaction for it.
    /// - Parameter credType: An enum value indicating the type of credential to collect.
    /// - Parameter credOptions: Specifies the values defining whether a requested credential is a retry case, or should be used for single sign on.
    /// - Parameter certificate: A certificate to be used in validating the credential.
    /// - Returns: An asynchronous retrieval operation on a VpnCredential object containing the main credentials of the requested type, and secondary credentials for change and expiration cases.
    public func requestCredentialsAsync(_ credType: WindowsNetworkingVpn_VpnCredentialType, _ credOptions: Swift.UInt32, _ certificate: WindowsSecurityCryptographyCertificates_Certificate?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnCredential?> {
        try COM.NullResult.unwrap(_ivpnChannel2.requestCredentialsWithCertificateAsync(credType, credOptions, certificate))
    }

    /// Requests the VPN platform to collect credentials from the user. The plug-in can specify the type and form of credentials to collect. The result is an object containing the main credentials depending on the type, and the secondary credentials for change and expiration cases.
    /// - Parameter credType: An enum value indicating the type of credential to collect.
    /// - Parameter credOptions: Specifies the values defining whether a requested credential is a retry case, or should be used for single sign on.
    /// - Returns: An asynchronous retrieval operation on a VpnCredential object containing the main credentials of the requested type, and secondary credentials for change and expiration cases.
    public func requestCredentialsAsync(_ credType: WindowsNetworkingVpn_VpnCredentialType, _ credOptions: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnCredential?> {
        try COM.NullResult.unwrap(_ivpnChannel2.requestCredentialsWithOptionsAsync(credType, credOptions))
    }

    /// Requests the VPN platform to collect credentials of a given credential type from the user.
    /// - Parameter credType: An enum value indicating the type of credential to collect.
    /// - Returns: An asynchronous retrieval operation on a VpnCredential object containing the main credentials of the requested type, and secondary credentials for change and expiration cases.
    public func requestCredentialsAsync(_ credType: WindowsNetworkingVpn_VpnCredentialType) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingVpn_VpnCredential?> {
        try COM.NullResult.unwrap(_ivpnChannel2.requestCredentialsSimpleAsync(credType))
    }

    /// Allows a VPN plugin to indicate an error message and terminate the connection attempt performed inside the IVpnPlugin.Connect method. Should not be called on reconnect cases.
    /// - Parameter message: The text of the error message.
    public func terminateConnection(_ message: Swift.String) throws {
        try _ivpnChannel2.terminateConnection(message)
    }

    public func startWithTrafficFilter(_ assignedClientIpv4List: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ assignedClientIpv6List: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?>?, _ vpnInterfaceId: WindowsNetworkingVpn_VpnInterfaceId?, _ assignedRoutes: WindowsNetworkingVpn_VpnRouteAssignment?, _ assignedNamespace: WindowsNetworkingVpn_VpnDomainNameAssignment?, _ mtuSize: Swift.UInt32, _ maxFrameSize: Swift.UInt32, _ reserved: Swift.Bool, _ mainOuterTunnelTransport: WindowsRuntime.IInspectable?, _ optionalOuterTunnelTransport: WindowsRuntime.IInspectable?, _ assignedTrafficFilters: WindowsNetworkingVpn_VpnTrafficFilterAssignment?) throws {
        try _ivpnChannel2.startWithTrafficFilter(assignedClientIpv4List, assignedClientIpv6List, vpnInterfaceId, assignedRoutes, assignedNamespace, mtuSize, maxFrameSize, reserved, mainOuterTunnelTransport, optionalOuterTunnelTransport, assignedTrafficFilters)
    }

    // MARK: Windows.Networking.Vpn.IVpnChannel4 members

    /// Gets the transport context object in use, for example the name of a host or server.
    /// - Returns: The transport context object in use, for example the name of a host or server. The value is `null` if the property is accessed outside of a callback (for example, in the case of a reconnection).
    public var currentRequestTransportContext: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ivpnChannel4.get_CurrentRequestTransportContext())
        }
    }

    /// Prepares, marks, and creates the transport for use by the VPN framework as a transport link communicating the VPN plug-in to the VPN server. This call must be performed before any other operations related to the VPN framework APIs.
    /// - Parameter transport: An **IInspectable** object for socket transport. This object can be a Windows.Networking.StreamSocket, a Windows.Networking.StreamWebSocket, or a Windows.Networking.DatagramSocket. This socket will control the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data. The socket must be unconnected at the point of the call.
    /// - Parameter context: The transport context object to use, for example the name of a host or server.
    public func addAndAssociateTransport(_ transport: WindowsRuntime.IInspectable?, _ context: WindowsRuntime.IInspectable?) throws {
        try _ivpnChannel4.addAndAssociateTransport(transport, context)
    }

    public func startWithTrafficFilter(_ assignedClientIpv4Addresses: WindowsFoundationCollections_IIterable<WindowsNetworking_HostName?>?, _ assignedClientIpv6Addresses: WindowsFoundationCollections_IIterable<WindowsNetworking_HostName?>?, _ vpninterfaceId: WindowsNetworkingVpn_VpnInterfaceId?, _ assignedRoutes: WindowsNetworkingVpn_VpnRouteAssignment?, _ assignedNamespace: WindowsNetworkingVpn_VpnDomainNameAssignment?, _ mtuSize: Swift.UInt32, _ maxFrameSize: Swift.UInt32, _ reserved: Swift.Bool, _ transports: WindowsFoundationCollections_IIterable<WindowsRuntime.IInspectable?>?, _ assignedTrafficFilters: WindowsNetworkingVpn_VpnTrafficFilterAssignment?) throws {
        try _ivpnChannel4.startWithMultipleTransports(assignedClientIpv4Addresses, assignedClientIpv6Addresses, vpninterfaceId, assignedRoutes, assignedNamespace, mtuSize, maxFrameSize, reserved, transports, assignedTrafficFilters)
    }

    /// Replaces an existing transport with a new one for use by the VPN framework as a transport link communicating the VPN plug-in to the VPN server.
    /// - Parameter transport: An **IInspectable** object for socket transport. This object can be a Windows.Networking.StreamSocket, a Windows.Networking.StreamWebSocket, or a Windows.Networking.DatagramSocket. This socket will control the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data. The socket must be unconnected at the point of the call.
    /// - Parameter context: The transport context object to use, for example the name of a host or server.
    public func replaceAndAssociateTransport(_ transport: WindowsRuntime.IInspectable?, _ context: WindowsRuntime.IInspectable?) throws {
        try _ivpnChannel4.replaceAndAssociateTransport(transport, context)
    }

    /// Reconnect the socket transport. Transport and transport context are the only parameters that can be changed on a socket transport reconnection.
    /// - Parameter transport: An **IInspectable** object for socket transport. This object can be a Windows.Networking.StreamSocket, a Windows.Networking.StreamWebSocket, or a Windows.Networking.DatagramSocket. This socket will control the connection to the VPN server and will be used to send encapsulated IP packets and receive encapsulated data. The socket must be unconnected at the point of the call.
    /// - Parameter context: The transport context object to use, for example the name of a host or server.
    public func startReconnectingTransport(_ transport: WindowsRuntime.IInspectable?, _ context: WindowsRuntime.IInspectable?) throws {
        try _ivpnChannel4.startReconnectingTransport(transport, context)
    }

    /// Retrieves the slot type (hardware or software) for the specified transport context object.
    /// - Parameter context: A transport context object, for example the name of a host or server.
    /// - Returns: A value that indicates a slot type (hardware or software).
    public func getSlotTypeForTransportContext(_ context: WindowsRuntime.IInspectable?) throws -> WindowsNetworkingSockets_ControlChannelTriggerStatus {
        try _ivpnChannel4.getSlotTypeForTransportContext(context)
    }

    // MARK: Windows.Networking.Vpn.IVpnChannel5 members

    public func appendVpnReceivePacketBuffer(_ decapsulatedPacketBuffer: WindowsNetworkingVpn_VpnPacketBuffer?) throws {
        try _ivpnChannel5.appendVpnReceivePacketBuffer(decapsulatedPacketBuffer)
    }

    public func appendVpnSendPacketBuffer(_ encapsulatedPacketBuffer: WindowsNetworkingVpn_VpnPacketBuffer?) throws {
        try _ivpnChannel5.appendVpnSendPacketBuffer(encapsulatedPacketBuffer)
    }

    public func flushVpnReceivePacketBuffers() throws {
        try _ivpnChannel5.flushVpnReceivePacketBuffers()
    }

    public func flushVpnSendPacketBuffers() throws {
        try _ivpnChannel5.flushVpnSendPacketBuffers()
    }

    // MARK: Windows.Networking.Vpn.IVpnChannel6 members

    public func activateForeground(_ packageRelativeAppId: Swift.String, _ sharedContext: WindowsFoundationCollections_ValueSet?) throws -> WindowsFoundationCollections_ValueSet {
        try COM.NullResult.unwrap(_ivpnChannel6.activateForeground(packageRelativeAppId, sharedContext))
    }

    // MARK: Windows.Networking.Vpn.IVpnChannelStatics members

    /// Processes any pending VpnChannel events.
    /// - Parameter thirdPartyPlugIn: The plug-in to be processed.
    public static func processEventAsync(_ thirdPartyPlugIn: WindowsRuntime.IInspectable?, _ event: WindowsRuntime.IInspectable?) throws {
        try _ivpnChannelStatics.processEventAsync(thirdPartyPlugIn, event)
    }

    // MARK: Implementation details

    private var _ivpnChannel2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel2>? = nil

    internal var _ivpnChannel2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel2> {
        get throws {
            try _ivpnChannel2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel2.self)
            }
        }
    }

    private var _ivpnChannel4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel4>? = nil

    internal var _ivpnChannel4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel4> {
        get throws {
            try _ivpnChannel4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel4.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel4.self)
            }
        }
    }

    private var _ivpnChannel5_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel5>? = nil

    internal var _ivpnChannel5: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel5> {
        get throws {
            try _ivpnChannel5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel5.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel5.self)
            }
        }
    }

    private var _ivpnChannel6_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel6>? = nil

    internal var _ivpnChannel6: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel6> {
        get throws {
            try _ivpnChannel6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel6.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannel6.self)
            }
        }
    }

    deinit {
        _ivpnChannel2_storage?.release()
        _ivpnChannel4_storage?.release()
        _ivpnChannel5_storage?.release()
        _ivpnChannel6_storage?.release()
    }

    private static var _ivpnChannelStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelStatics>? = nil

    internal static var _ivpnChannelStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelStatics> {
        get throws {
            try _ivpnChannelStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnChannel", id: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelStatics.iid)
            }
        }
    }
}