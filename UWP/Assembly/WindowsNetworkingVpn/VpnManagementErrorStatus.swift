// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the known VPN management errors.
public struct WindowsNetworkingVpn_VpnManagementErrorStatus: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// No error.
    public static let ok = Self()

    /// Other
    public static let other = Self(rawValue: 1)

    /// Invalid XML syntax
    public static let invalidXmlSyntax = Self(rawValue: 2)

    /// The profile name is too long.
    public static let profileNameTooLong = Self(rawValue: 3)

    /// The app id is invalid.
    public static let profileInvalidAppId = Self(rawValue: 4)

    /// Access is denied.
    public static let accessDenied = Self(rawValue: 5)

    /// A specified profile cannot be found.
    public static let cannotFindProfile = Self(rawValue: 6)

    /// The connection is in the process of being disconnected.
    public static let alreadyDisconnecting = Self(rawValue: 7)

    /// The connection already exists.
    public static let alreadyConnected = Self(rawValue: 8)

    /// Connection failed during authentication. No further details available.
    public static let generalAuthenticationFailure = Self(rawValue: 9)

    /// EAP authentication has failed.
    public static let eapFailure = Self(rawValue: 10)

    /// Smart Card authentication has failed.
    public static let smartCardFailure = Self(rawValue: 11)

    /// Certificate authentication has failed.
    public static let certificateFailure = Self(rawValue: 12)

    /// The server configuration is invalid.
    public static let serverConfiguration = Self(rawValue: 13)

    /// No internet connection is available.
    public static let noConnection = Self(rawValue: 14)

    /// Can't connect to the server.
    public static let serverConnection = Self(rawValue: 15)

    /// User name/password authentication has failed.
    public static let userNamePassword = Self(rawValue: 16)

    /// A given hostname was not resolvable through the available DNS.
    public static let dnsNotResolvable = Self(rawValue: 17)

    /// A given IP address was invalid.
    public static let invalidIP = Self(rawValue: 18)
}