// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a profile for an OS Native/Inbox VPN protocol.
public final class WindowsNetworkingVpn_VpnNativeProfile: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnNativeProfileProjection>, WindowsNetworkingVpn_IVpnProfileProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnNativeProfileProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnNativeProfile members

    /// Gets or sets the EAP Authentication configuration for an Inbox/Native VPN profile.
    /// - Returns: The EAP Authentication configuration for an Inbox/Native VPN profile.
    public var eapConfiguration: Swift.String {
        get throws {
            try _interop.get_EapConfiguration()
        }
    }

    /// Gets or sets the EAP Authentication configuration for an Inbox/Native VPN profile.
    /// - Returns: The EAP Authentication configuration for an Inbox/Native VPN profile.
    public func eapConfiguration(_ value: Swift.String) throws {
        try _interop.put_EapConfiguration(value)
    }

    /// Gets or sets the tunnel protocol type for the Inbox VPN connection.
    /// - Returns: An enum value indicating tunnel protocol type for the Inbox VPN connection.
    public var nativeProtocolType: WindowsNetworkingVpn_VpnNativeProtocolType {
        get throws {
            try _interop.get_NativeProtocolType()
        }
    }

    /// Gets or sets the tunnel protocol type for the Inbox VPN connection.
    /// - Returns: An enum value indicating tunnel protocol type for the Inbox VPN connection.
    public func nativeProtocolType(_ value: WindowsNetworkingVpn_VpnNativeProtocolType) throws {
        try _interop.put_NativeProtocolType(value)
    }

    /// Gets or sets whether the apps allowed by this traffic filter are force tunneled through the VPN interface, or whether they are split tunneled and allowed to talk through other interfaces.
    /// - Returns: An enum value indicating whether a VPN profile is Split Tunneled or Force Tunneled.
    public var routingPolicyType: WindowsNetworkingVpn_VpnRoutingPolicyType {
        get throws {
            try _interop.get_RoutingPolicyType()
        }
    }

    /// Gets or sets whether the apps allowed by this traffic filter are force tunneled through the VPN interface, or whether they are split tunneled and allowed to talk through other interfaces.
    /// - Returns: An enum value indicating whether a VPN profile is Split Tunneled or Force Tunneled.
    public func routingPolicyType(_ value: WindowsNetworkingVpn_VpnRoutingPolicyType) throws {
        try _interop.put_RoutingPolicyType(value)
    }

    /// Gets a list of VPN servers for the Inbox VPN profile.
    /// - Returns: A list of VPN servers for the Inbox VPN profile.
    public var servers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Servers())
        }
    }

    /// Gets or sets the authentication method to be used in the tunnel layer of the native VPN protocol.
    /// - Returns: An enum value indicating authentication method to be used in the tunnel layer of the native VPN protocol.
    public var tunnelAuthenticationMethod: WindowsNetworkingVpn_VpnAuthenticationMethod {
        get throws {
            try _interop.get_TunnelAuthenticationMethod()
        }
    }

    /// Gets or sets the authentication method to be used in the tunnel layer of the native VPN protocol.
    /// - Returns: An enum value indicating authentication method to be used in the tunnel layer of the native VPN protocol.
    public func tunnelAuthenticationMethod(_ value: WindowsNetworkingVpn_VpnAuthenticationMethod) throws {
        try _interop.put_TunnelAuthenticationMethod(value)
    }

    /// Gets or sets the authentication method to be used to authenticate the user.
    /// - Returns: An enum value indicating authentication method to be used to authenticate the user.
    public var userAuthenticationMethod: WindowsNetworkingVpn_VpnAuthenticationMethod {
        get throws {
            try _interop.get_UserAuthenticationMethod()
        }
    }

    /// Gets or sets the authentication method to be used to authenticate the user.
    /// - Returns: An enum value indicating authentication method to be used to authenticate the user.
    public func userAuthenticationMethod(_ value: WindowsNetworkingVpn_VpnAuthenticationMethod) throws {
        try _interop.put_UserAuthenticationMethod(value)
    }

    // MARK: Windows.Networking.Vpn.IVpnProfile members

    /// Gets or sets a value that indicates whether the profile is for Always On VPN.
    /// - Returns: `true` if the VPN profile is always connected, otherwise `false`.
    public var alwaysOn: Swift.Bool {
        get throws {
            try _ivpnProfile.get_AlwaysOn()
        }
    }

    /// Gets or sets a value that indicates whether the profile is for Always On VPN.
    /// - Returns: `true` if the VPN profile is always connected, otherwise `false`.
    public func alwaysOn(_ value: Swift.Bool) throws {
        try _ivpnProfile.put_AlwaysOn(value)
    }

    /// Gets a list of apps that can trigger the Inbox VPN profile.
    /// - Returns: A list of apps that can trigger the Inbox VPN profile.
    public var appTriggers: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnAppId?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_AppTriggers())
        }
    }

    /// Gets a list of domain name policies to be used for the profile.
    /// - Returns: A list of domain name policies to be used for the profile.
    public var domainNameInfoList: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnDomainNameInfo?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_DomainNameInfoList())
        }
    }

    /// Gets or sets the profile name for the Inbox/Native VPN profile.
    /// - Returns: The profile name for the Inbox/Native VPN profile.
    public var profileName: Swift.String {
        get throws {
            try _ivpnProfile.get_ProfileName()
        }
    }

    /// Gets or sets the profile name for the Inbox/Native VPN profile.
    /// - Returns: The profile name for the Inbox/Native VPN profile.
    public func profileName(_ value: Swift.String) throws {
        try _ivpnProfile.put_ProfileName(value)
    }

    /// Gets or sets whether the credentials for the VPN profile will be cached. If TRUE, the credentials for the VPN profile will be cached where applicable.
    /// - Returns: If the credentials for the VPN profile will be cached, it is TRUE; otherwise , it is FALSE.
    public var rememberCredentials: Swift.Bool {
        get throws {
            try _ivpnProfile.get_RememberCredentials()
        }
    }

    /// Gets or sets whether the credentials for the VPN profile will be cached. If TRUE, the credentials for the VPN profile will be cached where applicable.
    /// - Returns: If the credentials for the VPN profile will be cached, it is TRUE; otherwise , it is FALSE.
    public func rememberCredentials(_ value: Swift.Bool) throws {
        try _ivpnProfile.put_RememberCredentials(value)
    }

    /// Gets a list of routes that should go over the VPN interface in the case of a Split Tunneled VPN.
    /// - Returns: A list of routes that should go over the VPN interface in the case of a Split Tunneled VPN.
    public var routes: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnRoute?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_Routes())
        }
    }

    /// Gets a list of Traffic Filters (including per App) included in the VPN profile.
    /// - Returns: A list of Traffic Filters (including per App) included in the VPN profile.
    public var trafficFilters: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnTrafficFilter?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnProfile.get_TrafficFilters())
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnNativeProfile2 members

    /// Gets the current connection status.
    /// - Returns: An enumeration value giving current connection status.
    public var connectionStatus: WindowsNetworkingVpn_VpnManagementConnectionStatus {
        get throws {
            try _ivpnNativeProfile2.get_ConnectionStatus()
        }
    }

    /// Gets or sets a value that determines whether this VPN profile appears in the system's VPN connection UI.
    /// - Returns: When true, this profile should appear in the system VPN connection user interface. By default, this value is **false**.
    public var requireVpnClientAppUI: Swift.Bool {
        get throws {
            try _ivpnNativeProfile2.get_RequireVpnClientAppUI()
        }
    }

    /// Gets or sets a value that determines whether this VPN profile appears in the system's VPN connection UI.
    /// - Returns: When true, this profile should appear in the system VPN connection user interface. By default, this value is **false**.
    public func requireVpnClientAppUI(_ value: Swift.Bool) throws {
        try _ivpnNativeProfile2.put_RequireVpnClientAppUI(value)
    }

    // MARK: Implementation details

    private var _ivpnProfile_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile>? = nil

    internal var _ivpnProfile: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile> {
        get throws {
            try _ivpnProfile_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnProfile.self)
            }
        }
    }

    private var _ivpnNativeProfile2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnNativeProfile2>? = nil

    internal var _ivpnNativeProfile2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnNativeProfile2> {
        get throws {
            try _ivpnNativeProfile2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnNativeProfile2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnNativeProfile2.self)
            }
        }
    }

    deinit {
        _ivpnProfile_storage?.release()
        _ivpnNativeProfile2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnNativeProfile", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}