// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains VPN domain name policies, like name resolution, namespace configuration, and web proxies.
public final class WindowsNetworkingVpn_VpnDomainNameAssignment: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnDomainNameAssignmentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnDomainNameAssignmentProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnDomainNameAssignment members

    /// Gets a list of name resolution rule policies.
    /// - Returns: A list of name resolution rule policies.
    public var domainNameList: WindowsFoundationCollections_IVector<WindowsNetworkingVpn_VpnDomainNameInfo?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DomainNameList())
        }
    }

    /// Gets or sets the location of the global AutoConfigURL script in the corporate network. [This is an optional property.]
    /// - Returns: The location of the global AutoConfigURL script in the corporate network. [This is an optional property.]
    public var proxyAutoConfigurationUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProxyAutoConfigurationUri())
        }
    }

    /// Gets or sets the location of the global AutoConfigURL script in the corporate network. [This is an optional property.]
    /// - Returns: The location of the global AutoConfigURL script in the corporate network. [This is an optional property.]
    public func proxyAutoConfigurationUri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_ProxyAutoConfigurationUri(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnDomainNameAssignment", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}