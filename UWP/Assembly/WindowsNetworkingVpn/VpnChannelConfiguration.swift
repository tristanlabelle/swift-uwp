// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The configuration of the VpnChannel, which dictates how to establish the communication with the VPN server.
public final class WindowsNetworkingVpn_VpnChannelConfiguration: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnChannelConfigurationProjection> {
    // MARK: Windows.Networking.Vpn.IVpnChannelConfiguration members

    /// Gets the custom configuration as a string which the VPN plug-in parses to configure VPN vendor specific settings. The field is a string to allow XML as the data format of the configuration.
    /// - Returns: The custom configuration string data which the VPN plug-in parses to configure VPN vendor specific settings.
    public var customField: Swift.String {
        get throws {
            try _interop.get_CustomField()
        }
    }

    /// Gets the server hostname of the VPN server to which the VPN plug-in should connect.
    /// - Returns: The server hostname of the VPN server to which the VPN plug-in should connect.
    public var serverHostNameList: WindowsFoundationCollections_IVectorView<WindowsNetworking_HostName?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerHostNameList())
        }
    }

    /// Gets the service name of the VPN server listening for remote access connections.
    /// - Returns: The service name of the VPN server listening for remote access connections. Also known as the VPN server port.
    public var serverServiceName: Swift.String {
        get throws {
            try _interop.get_ServerServiceName()
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnChannelConfiguration2 members

    /// Gets the list of URIs that describe the VPN servers to connect to and the URI to use when connecting to them. This is analogous to the ServerHostNames, but are in URI format which allows for more information to be carried per server.
    /// - Returns: The list of URIs that describe the VPN servers to connect to and the URI to use when connecting to them.
    public var serverUris: WindowsFoundationCollections_IVectorView<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_ivpnChannelConfiguration2.get_ServerUris())
        }
    }

    // MARK: Implementation details

    private var _ivpnChannelConfiguration2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelConfiguration2>? = nil

    internal var _ivpnChannelConfiguration2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelConfiguration2> {
        get throws {
            try _ivpnChannelConfiguration2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelConfiguration2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnChannelConfiguration2.self)
            }
        }
    }

    deinit {
        _ivpnChannelConfiguration2_storage?.release()
    }
}