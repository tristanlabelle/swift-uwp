// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an application identifier, which can be a file path, a package family name, or a fully qualified binary name (FQBN) string.
public final class WindowsNetworkingVpn_VpnAppId: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnAppIdProjection> {
    // MARK: Windows.Networking.Vpn.IVpnAppIdFactory members

    public convenience init(_ type: WindowsNetworkingVpn_VpnAppIdType, _ value: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ivpnAppIdFactory.create(type, value)))
    }

    // MARK: Windows.Networking.Vpn.IVpnAppId members

    /// Gets or sets the type of the app ID.
    /// - Returns: An enum value that corresponds to the type of the app ID.
    public var type: WindowsNetworkingVpn_VpnAppIdType {
        get throws {
            try _interop.get_Type()
        }
    }

    /// Gets or sets the type of the app ID.
    /// - Returns: An enum value that corresponds to the type of the app ID.
    public func type(_ value: WindowsNetworkingVpn_VpnAppIdType) throws {
        try _interop.put_Type(value)
    }

    /// Gets or sets the value of the app ID.
    /// - Returns: The app ID. The format of the ID must be correct for the VpnAppId.Type value.
    public var value: Swift.String {
        get throws {
            try _interop.get_Value()
        }
    }

    /// Gets or sets the value of the app ID.
    /// - Returns: The app ID. The format of the ID must be correct for the VpnAppId.Type value.
    public func value(_ value: Swift.String) throws {
        try _interop.put_Value(value)
    }

    // MARK: Implementation details

    private static var _ivpnAppIdFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnAppIdFactory>? = nil

    internal static var _ivpnAppIdFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnAppIdFactory> {
        get throws {
            try _ivpnAppIdFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnAppId", id: CWinRT.SWRT_WindowsNetworkingVpn_IVpnAppIdFactory.iid)
            }
        }
    }
}