// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a multiple choice UI control prompt required from the user. This is typically a combo box. This is used in the construction of custom prompts used in the VpnChannel.RequestCustomPromptAsync method.
public final class WindowsNetworkingVpn_VpnCustomPromptOptionSelector: WindowsRuntime.WinRTImport<WindowsNetworkingVpn_VpnCustomPromptOptionSelectorProjection>, WindowsNetworkingVpn_IVpnCustomPromptElementProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingVpn_VpnCustomPromptOptionSelectorProjection.self))
    }

    // MARK: Windows.Networking.Vpn.IVpnCustomPromptOptionSelector members

    /// Gets the list of strings that are presented as choices for the multiple choice UI element. The plug-in is expected to retrieve the list, and fill it with the strings needed (in the order that they are to be presented).
    /// - Returns: The list of strings that are presented as choices for the multiple choice UI element.
    public var options: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Options())
        }
    }

    /// Gets the index into the options string vector of the option selected by the user.
    /// - Returns: The index into the options string vector of the option selected by the user.
    public var selectedIndex: Swift.UInt32 {
        get throws {
            try _interop.get_SelectedIndex()
        }
    }

    // MARK: Windows.Networking.Vpn.IVpnCustomPromptElement members

    /// Gets or sets whether the user must provide some text input in this element before the UI flow of the can continue (the next button is grayed out).
    /// - Returns: If the user must provide some text input, it is TRUE; otherwise , it is FALSE.
    public var compulsory: Swift.Bool {
        get throws {
            try _ivpnCustomPromptElement.get_Compulsory()
        }
    }

    /// Gets or sets whether the user must provide some text input in this element before the UI flow of the can continue (the next button is grayed out).
    /// - Returns: If the user must provide some text input, it is TRUE; otherwise , it is FALSE.
    public func compulsory(_ value: Swift.Bool) throws {
        try _ivpnCustomPromptElement.put_Compulsory(value)
    }

    /// Gets or sets the text label of the text input UI element.
    /// - Returns: The text label of the text input UI element.
    public var displayName: Swift.String {
        get throws {
            try _ivpnCustomPromptElement.get_DisplayName()
        }
    }

    /// Gets or sets the text label of the text input UI element.
    /// - Returns: The text label of the text input UI element.
    public func displayName(_ value: Swift.String) throws {
        try _ivpnCustomPromptElement.put_DisplayName(value)
    }

    /// Gets or sets whether the input UI element is emphasized or not
    /// - Returns: If the text input UI element is emphasized, it is TRUE; otherwise , it is FALSE.
    public var emphasized: Swift.Bool {
        get throws {
            try _ivpnCustomPromptElement.get_Emphasized()
        }
    }

    /// Gets or sets whether the input UI element is emphasized or not
    /// - Returns: If the text input UI element is emphasized, it is TRUE; otherwise , it is FALSE.
    public func emphasized(_ value: Swift.Bool) throws {
        try _ivpnCustomPromptElement.put_Emphasized(value)
    }

    // MARK: Implementation details

    private var _ivpnCustomPromptElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnCustomPromptElement>? = nil

    internal var _ivpnCustomPromptElement: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingVpn_IVpnCustomPromptElement> {
        get throws {
            try _ivpnCustomPromptElement_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingVpn_IVpnCustomPromptElement.iid).cast(to: CWinRT.SWRT_WindowsNetworkingVpn_IVpnCustomPromptElement.self)
            }
        }
    }

    deinit {
        _ivpnCustomPromptElement_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Vpn.VpnCustomPromptOptionSelector", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}