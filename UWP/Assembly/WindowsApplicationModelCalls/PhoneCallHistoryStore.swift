// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A collection of phone call history entries.
public final class WindowsApplicationModelCalls_PhoneCallHistoryStore: WindowsRuntime.WinRTImport<WindowsApplicationModelCalls_PhoneCallHistoryStoreProjection> {
    // MARK: Windows.ApplicationModel.Calls.IPhoneCallHistoryStore members

    /// Gets an entry from the store based on the entry id.
    /// - Parameter callHistoryEntryId: The PhoneCallHistoryEntryt.Id of the relevant entry.
    public func getEntryAsync(_ callHistoryEntryId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelCalls_PhoneCallHistoryEntry?> {
        try COM.NullResult.unwrap(_interop.getEntryAsync(callHistoryEntryId))
    }

    /// Retrieves a default phone call history entry that reads all entries.
    /// - Returns: A reader that can be used to go through the phone call log entries.
    public func getEntryReader() throws -> WindowsApplicationModelCalls_PhoneCallHistoryEntryReader {
        try COM.NullResult.unwrap(_interop.getEntryReader())
    }

    /// Retrieves an entry reader based on provided filters.
    /// - Parameter queryOptions: The options used to create a filtered entry reader.
    /// - Returns: A reader that can be used to go through the phone call log entries.
    public func getEntryReader(_ queryOptions: WindowsApplicationModelCalls_PhoneCallHistoryEntryQueryOptions?) throws -> WindowsApplicationModelCalls_PhoneCallHistoryEntryReader {
        try COM.NullResult.unwrap(_interop.getEntryReaderWithOptions(queryOptions))
    }

    /// Saves an entry to the store.
    /// - Parameter callHistoryEntry: The entry to save.
    public func saveEntryAsync(_ callHistoryEntry: WindowsApplicationModelCalls_PhoneCallHistoryEntry?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveEntryAsync(callHistoryEntry))
    }

    /// Delete an entry from the store.
    /// - Parameter callHistoryEntry: The entry to delete.
    public func deleteEntryAsync(_ callHistoryEntry: WindowsApplicationModelCalls_PhoneCallHistoryEntry?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteEntryAsync(callHistoryEntry))
    }

    public func deleteEntriesAsync(_ callHistoryEntries: WindowsFoundationCollections_IIterable<WindowsApplicationModelCalls_PhoneCallHistoryEntry?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteEntriesAsync(callHistoryEntries))
    }

    /// Updates an entry to indicate it has been seen.
    /// - Parameter callHistoryEntry: The entry to update.
    public func markEntryAsSeenAsync(_ callHistoryEntry: WindowsApplicationModelCalls_PhoneCallHistoryEntry?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markEntryAsSeenAsync(callHistoryEntry))
    }

    public func markEntriesAsSeenAsync(_ callHistoryEntries: WindowsFoundationCollections_IIterable<WindowsApplicationModelCalls_PhoneCallHistoryEntry?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markEntriesAsSeenAsync(callHistoryEntries))
    }

    /// Gets the number of unseen entries.
    /// - Returns: The number of unseen entries.
    public func getUnseenCountAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_interop.getUnseenCountAsync())
    }

    /// Update all the entries to indicate they have all been seen by the user.
    public func markAllAsSeenAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markAllAsSeenAsync())
    }

    public func getSourcesUnseenCountAsync(_ sourceIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_interop.getSourcesUnseenCountAsync(sourceIds))
    }

    public func markSourcesAsSeenAsync(_ sourceIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markSourcesAsSeenAsync(sourceIds))
    }

    // MARK: Implementation details
}