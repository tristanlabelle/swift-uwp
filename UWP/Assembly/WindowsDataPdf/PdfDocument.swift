// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Portable Document Format (PDF) document.
public final class WindowsDataPdf_PdfDocument: WindowsRuntime.WinRTImport<WindowsDataPdf_PdfDocumentProjection> {
    // MARK: Windows.Data.Pdf.IPdfDocument members

    /// Gets whether the Portable Document Format (PDF) document is password-protected.
    /// - Returns: True if the Portable Document Format (PDF) document is password-protected; otherwise, false.
    public var isPasswordProtected: Swift.Bool {
        get throws {
            try _interop.get_IsPasswordProtected()
        }
    }

    /// Gets the number of pages in the Portable Document Format (PDF) document.
    /// - Returns: The number of pages in the Portable Document Format (PDF) document.
    public var pageCount: Swift.UInt32 {
        get throws {
            try _interop.get_PageCount()
        }
    }

    /// Gets a page from a Portable Document Format (PDF) document.
    /// - Parameter pageIndex: The location of the Portable Document Format (PDF) page relative to its parent document.
    /// - Returns: The Portable Document Format (PDF) page.
    public func getPage(_ pageIndex: Swift.UInt32) throws -> WindowsDataPdf_PdfPage {
        try COM.NullResult.unwrap(_interop.getPage(pageIndex))
    }

    // MARK: Windows.Data.Pdf.IPdfDocumentStatics members

    /// Outputs an asynchronous operation. When the operation completes, a PdfDocument object is returned, which represents a Portable Document Format (PDF) document.
    /// - Parameter file: The file, which represents a Portable Document Format (PDF) document.
    /// - Returns: The asynchronous operation.
    public static func loadFromFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataPdf_PdfDocument?> {
        try COM.NullResult.unwrap(_ipdfDocumentStatics.loadFromFileAsync(file))
    }

    /// Outputs an asynchronous operation. When the operation completes, a PdfDocument object is returned, which represents a Portable Document Format (PDF) document. Use this method if the Portable Document Format (PDF) document is password-protected.
    /// - Parameter file: The file, which represents a Portable Document Format (PDF) document.
    /// - Parameter password: The password to open the Portable Document Format (PDF) document, if it requires one.
    /// - Returns: The asynchronous operation.
    public static func loadFromFileAsync(_ file: WindowsStorage_IStorageFile?, _ password: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDataPdf_PdfDocument?> {
        try COM.NullResult.unwrap(_ipdfDocumentStatics.loadFromFileWithPasswordAsync(file, password))
    }

    /// Creates a PdfDocument object, representing a Portable Document Format (PDF) document, from a stream of data that represents a Portable Document Format (PDF) document in the file system.
    /// - Parameter inputStream: The stream of data, which represents a Portable Document Format (PDF) document.
    /// - Returns: The asynchronous operation.
    public static func loadFromStreamAsync(_ inputStream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataPdf_PdfDocument?> {
        try COM.NullResult.unwrap(_ipdfDocumentStatics.loadFromStreamAsync(inputStream))
    }

    /// Creates a PdfDocument object, representing a Portable Document Format (PDF) document, from a stream of data that represents a Portable Document Format (PDF) document in the file system. Use this method if the Portable Document Format (PDF) document is password-protected.
    /// - Parameter inputStream: The stream of data, which represents a Portable Document Format (PDF) document.
    /// - Parameter password: The password to open the Portable Document Format (PDF) document, if it requires one.
    /// - Returns: The asynchronous operation.
    public static func loadFromStreamAsync(_ inputStream: WindowsStorageStreams_IRandomAccessStream?, _ password: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDataPdf_PdfDocument?> {
        try COM.NullResult.unwrap(_ipdfDocumentStatics.loadFromStreamWithPasswordAsync(inputStream, password))
    }

    // MARK: Implementation details

    private static var _ipdfDocumentStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataPdf_IPdfDocumentStatics>? = nil

    internal static var _ipdfDocumentStatics: COM.COMInterop<CWinRT.SWRT_WindowsDataPdf_IPdfDocumentStatics> {
        get throws {
            try _ipdfDocumentStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Pdf.PdfDocument", id: CWinRT.SWRT_WindowsDataPdf_IPdfDocumentStatics.iid)
            }
        }
    }
}