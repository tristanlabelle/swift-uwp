// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents display settings for a single page of a Portable Document Format (PDF) document, such as the page's background color and its encoding type.
public final class WindowsDataPdf_PdfPageRenderOptions: WindowsRuntime.WinRTImport<WindowsDataPdf_PdfPageRenderOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDataPdf_PdfPageRenderOptionsProjection.self))
    }

    // MARK: Windows.Data.Pdf.IPdfPageRenderOptions members

    /// Gets or sets the Portable Document Format (PDF) page's background color.
    /// - Returns: The Portable Document Format (PDF) page's background color.
    public var backgroundColor: WindowsUI_Color {
        get throws {
            try _interop.get_BackgroundColor()
        }
    }

    /// Gets or sets the Portable Document Format (PDF) page's background color.
    /// - Returns: The Portable Document Format (PDF) page's background color.
    public func backgroundColor(_ value: WindowsUI_Color) throws {
        try _interop.put_BackgroundColor(value)
    }

    /// Gets or sets the Portable Document Format (PDF) page's encoding type to be used while the page is being converted to a bitmap.
    /// - Returns: A BmpEncoderId value representing the unique identifier of the built-in bitmap encoder.
    public var bitmapEncoderId: Foundation.UUID {
        get throws {
            try _interop.get_BitmapEncoderId()
        }
    }

    /// Gets or sets the Portable Document Format (PDF) page's encoding type to be used while the page is being converted to a bitmap.
    /// - Returns: A BmpEncoderId value representing the unique identifier of the built-in bitmap encoder.
    public func bitmapEncoderId(_ value: Foundation.UUID) throws {
        try _interop.put_BitmapEncoderId(value)
    }

    /// Gets or sets the final size of the rendering of the Portable Document Format (PDF) page in device-independent pixels (DIPs).
    /// - Returns: The Portable Document Format (PDF) page's scaling factor relative to the page's destination display height boundary.
    public var destinationHeight: Swift.UInt32 {
        get throws {
            try _interop.get_DestinationHeight()
        }
    }

    /// Gets or sets the final size of the rendering of the Portable Document Format (PDF) page in device-independent pixels (DIPs).
    /// - Returns: The Portable Document Format (PDF) page's scaling factor relative to the page's destination display height boundary.
    public func destinationHeight(_ value: Swift.UInt32) throws {
        try _interop.put_DestinationHeight(value)
    }

    /// Gets or sets the final size of the rendering of the Portable Document Format (PDF) page in device-independent pixels (DIPs).
    /// - Returns: The Portable Document Format (PDF) page's scaling factor relative to the page's destination display width boundary.
    public var destinationWidth: Swift.UInt32 {
        get throws {
            try _interop.get_DestinationWidth()
        }
    }

    /// Gets or sets the final size of the rendering of the Portable Document Format (PDF) page in device-independent pixels (DIPs).
    /// - Returns: The Portable Document Format (PDF) page's scaling factor relative to the page's destination display width boundary.
    public func destinationWidth(_ value: Swift.UInt32) throws {
        try _interop.put_DestinationWidth(value)
    }

    /// Gets or sets whether the Portable Document Format (PDF) page uses the system's high contrast display setting.
    /// - Returns: False to use high contrast; otherwise, true.
    public var isIgnoringHighContrast: Swift.Bool {
        get throws {
            try _interop.get_IsIgnoringHighContrast()
        }
    }

    /// Gets or sets whether the Portable Document Format (PDF) page uses the system's high contrast display setting.
    /// - Returns: False to use high contrast; otherwise, true.
    public func isIgnoringHighContrast(_ value: Swift.Bool) throws {
        try _interop.put_IsIgnoringHighContrast(value)
    }

    /// Gets or sets a portion of the Portable Document Format (PDF) page to be displayed.
    /// - Returns: The portion of the Portable Document Format (PDF) page to be displayed.
    public var sourceRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_SourceRect()
        }
    }

    /// Gets or sets a portion of the Portable Document Format (PDF) page to be displayed.
    /// - Returns: The portion of the Portable Document Format (PDF) page to be displayed.
    public func sourceRect(_ value: WindowsFoundation_Rect) throws {
        try _interop.put_SourceRect(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Pdf.PdfPageRenderOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}