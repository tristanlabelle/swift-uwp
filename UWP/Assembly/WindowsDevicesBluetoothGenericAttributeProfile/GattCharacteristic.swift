// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Characteristic of a GATT service. The GattCharacteristic object represents a GATT Characteristic of a particular service, and is obtained from the Characteristics property of the GattDeviceService object.
public final class WindowsDevicesBluetoothGenericAttributeProfile_GattCharacteristic: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothGenericAttributeProfile_GattCharacteristicProjection> {
    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic members

    /// Gets the handle used to uniquely identify GATT-based characteristic attributes as declared on the Bluetooth LE device.
    /// - Returns: Handle that uniquely identifies GATT-based characteristic attributes.
    public var attributeHandle: Swift.UInt16 {
        get throws {
            try _interop.get_AttributeHandle()
        }
    }

    /// Gets the GATT characteristic properties, as defined by the GATT profile.
    /// - Returns: The GATT characteristic properties, as defined by the GATT profile.
    public var characteristicProperties: WindowsDevicesBluetoothGenericAttributeProfile_GattCharacteristicProperties {
        get throws {
            try _interop.get_CharacteristicProperties()
        }
    }

    /// Gets the list of presentation format descriptors associated with this GattCharacteristic, in the order specified by the Aggregate Format Descriptor.
    /// - Returns: An array of GattPresentationFormat objects that contain the list of presentation format descriptors associated with this GattCharacteristic, in the order specified by the Aggregate Format Descriptor.
    public var presentationFormats: WindowsFoundationCollections_IVectorView<WindowsDevicesBluetoothGenericAttributeProfile_GattPresentationFormat?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PresentationFormats())
        }
    }

    /// Gets or sets the desired GATT security options for over the air communication with the device.
    /// - Returns: The desired GATT security options for over the air communication with the device.
    public var protectionLevel: WindowsDevicesBluetoothGenericAttributeProfile_GattProtectionLevel {
        get throws {
            try _interop.get_ProtectionLevel()
        }
    }

    /// Gets or sets the desired GATT security options for over the air communication with the device.
    /// - Returns: The desired GATT security options for over the air communication with the device.
    public func protectionLevel(_ value: WindowsDevicesBluetoothGenericAttributeProfile_GattProtectionLevel) throws {
        try _interop.put_ProtectionLevel(value)
    }

    /// Get the user friendly description for this GattCharacteristic, if the User Description Descriptor is present, otherwise this will be an empty string.
    /// - Returns: The user friendly description for this GattCharacteristic, if the User Description Descriptor is present, otherwise this will be an empty string.
    public var userDescription: Swift.String {
        get throws {
            try _interop.get_UserDescription()
        }
    }

    /// Gets the GATT Characteristic UUID for this GattCharacteristic.
    /// - Returns: The GATT Characteristic UUID for this GattCharacteristic.
    public var uuid: Foundation.UUID {
        get throws {
            try _interop.get_Uuid()
        }
    }

    /// An App can register an event handler in order to receive events when notification or indications are received from a device, after setting the Client Characteristic Configuration Descriptor.
    public func valueChanged(adding valueChangedHandler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothGenericAttributeProfile_GattCharacteristic?, WindowsDevicesBluetoothGenericAttributeProfile_GattValueChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ValueChanged(valueChangedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: valueChanged)
    }

    public func valueChanged(removing valueChangedEventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ValueChanged(valueChangedEventCookie)
    }

    /// Returns a vector of descriptors, that are identified by the specified UUID, and belong to this GattCharacteristic instance.
    /// - Parameter descriptorUuid: The UUID for the descriptors to be retrieved.
    /// - Returns: A vector of descriptors whose UUIDs match descriptorUuid.
    public func getDescriptors(_ descriptorUuid: Foundation.UUID) throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptor?> {
        try COM.NullResult.unwrap(_interop.getDescriptors(descriptorUuid))
    }

    /// Performs a Characteristic Value read from the value cache maintained by Windows.
    /// - Returns: The object required to manage the asynchronous operation, which, upon completion, returns a GattReadResult object, which in turn contains the completion status of the asynchronous operation and, if successful, the data read from the device.
    public func readValueAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattReadResult?> {
        try COM.NullResult.unwrap(_interop.readValueAsync())
    }

    /// Performs a Characteristic Value read either from the value cache maintained by Windows, or directly from the device.
    /// - Parameter cacheMode: Specifies whether to read the value directly from the device or from a value cache maintained by Windows.
    /// - Returns: The object required to manage the asynchronous operation, which, upon completion, returns a GattReadResult object, which in turn contains the completion status of the asynchronous operation and, if successful, the data read from the device.
    public func readValueAsync(_ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattReadResult?> {
        try COM.NullResult.unwrap(_interop.readValueWithCacheModeAsync(cacheMode))
    }

    /// Performs a Characteristic Value write to a Bluetooth LE device.
    /// - Parameter value: A Windows.Storage.Streams.IBuffer object which contains the data to be written to the Bluetooth LE device.
    /// - Returns: The object that manages the asynchronous operation, which, upon completion, returns the status with which the operation completed.
    public func writeValueAsync(_ value: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattCommunicationStatus> {
        try COM.NullResult.unwrap(_interop.writeValueAsync(value))
    }

    /// Performs a Characteristic Value write to a Bluetooth LE device.
    /// - Parameter value: A Windows.Storage.Streams.IBuffer object which contains the data to be written to the Bluetooth LE device.
    /// - Parameter writeOption: Specifies what type of GATT write should be performed.
    /// - Returns: The object that manages the asynchronous operation, which, upon completion, returns the status with which the operation completed.
    public func writeValueAsync(_ value: WindowsStorageStreams_IBuffer?, _ writeOption: WindowsDevicesBluetoothGenericAttributeProfile_GattWriteOption) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattCommunicationStatus> {
        try COM.NullResult.unwrap(_interop.writeValueWithOptionAsync(value, writeOption))
    }

    /// Reads the current value of the ClientCharacteristicConfigurationDescriptor.
    /// - Returns: The object that manages the asynchronous operation. Upon completion of the asynchronous method, the IAsyncOperation(GattReadClientCharacteristicConfigurationDescriptorResult) contains the result of the read operation, which contains the status of completed operation. The Status property on the GattReadClientCharacteristicConfigurationDescriptorResult returned indicates if the result of the operation was successful.
    public func readClientCharacteristicConfigurationDescriptorAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattReadClientCharacteristicConfigurationDescriptorResult?> {
        try COM.NullResult.unwrap(_interop.readClientCharacteristicConfigurationDescriptorAsync())
    }

    /// Writes the ClientCharacteristicConfigurationDescriptor to the Bluetooth LE device, and if the value to be written represents an indication or a notification and a ValueChanged event handler is registered, enables receiving ValueChanged events from the device.
    /// - Parameter clientCharacteristicConfigurationDescriptorValue: Specifies a new value for the ClientCharacteristicConfigurationDescriptor of this Characteristic object.
    /// - Returns: The object that manages the asynchronous operation, which, upon completion, returns the status with which the operation completed.
    public func writeClientCharacteristicConfigurationDescriptorAsync(_ clientCharacteristicConfigurationDescriptorValue: WindowsDevicesBluetoothGenericAttributeProfile_GattClientCharacteristicConfigurationDescriptorValue) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattCommunicationStatus> {
        try COM.NullResult.unwrap(_interop.writeClientCharacteristicConfigurationDescriptorAsync(clientCharacteristicConfigurationDescriptorValue))
    }

    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic2 members

    /// Gets the GattDeviceService of which this characteristic is a member.
    /// - Returns: The GattDeviceService of which this characteristic is a member.
    public var service: WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceService {
        get throws {
            try COM.NullResult.unwrap(_igattCharacteristic2.get_Service())
        }
    }

    /// Gets the collection of all descriptors belonging to this GattCharacteristic instance.
    /// - Returns: The collection of all descriptors belonging to this GattCharacteristic instance.
    public func getAllDescriptors() throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptor?> {
        try COM.NullResult.unwrap(_igattCharacteristic2.getAllDescriptors())
    }

    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristic3 members

    /// Returns the descriptors for this GattCharacteristic instance.
    /// - Returns: An asynchronous operation that completes with the descriptors for this GattCharacteristic instance.
    public func getDescriptorsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptorsResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.getDescriptorsAsync())
    }

    /// Returns the descriptors with the specified cache mode for this GattCharacteristic instance.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: An asynchronous operation that completes with the descriptors.
    public func getDescriptorsAsync(_ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptorsResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.getDescriptorsWithCacheModeAsync(cacheMode))
    }

    /// Returns the descriptors whose UUIDs match descriptorUuid.
    /// - Parameter descriptorUuid: The UUID for the descriptors to be retrieved.
    /// - Returns: An asynchronous operation that completes with the descriptors whose UUIDs match descriptorUuid.
    public func getDescriptorsForUuidAsync(_ descriptorUuid: Foundation.UUID) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptorsResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.getDescriptorsForUuidAsync(descriptorUuid))
    }

    /// Returns the descriptors whose UUIDs match descriptorUuid with the specified cacheMode.
    /// - Parameter descriptorUuid: The UUID for the descriptors to be retrieved.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: Returns an asynchronous operation that completes with the descriptors for the descriptorUuid.
    public func getDescriptorsForUuidAsync(_ descriptorUuid: Foundation.UUID, _ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDescriptorsResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.getDescriptorsForUuidWithCacheModeAsync(descriptorUuid, cacheMode))
    }

    /// Performs a Characteristic Value write to a Bluetooth LE device.
    /// - Parameter value: A Windows.Storage.Streams.IBuffer object which contains the data to be written to the Bluetooth LE device.
    /// - Returns: An asynchronous operation that completes with a GattWriteResult object.
    public func writeValueWithResultAsync(_ value: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattWriteResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.writeValueWithResultAsync(value))
    }

    /// Performs a Characteristic Value write to a Bluetooth LE device.
    /// - Parameter value: A Windows.Storage.Streams.IBuffer object which contains the data to be written to the Bluetooth LE device.
    /// - Parameter writeOption: Specifies what type of GATT write should be performed.
    /// - Returns: An asynchronous operation that completes with a GattWriteResult object.
    public func writeValueWithResultAsync(_ value: WindowsStorageStreams_IBuffer?, _ writeOption: WindowsDevicesBluetoothGenericAttributeProfile_GattWriteOption) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattWriteResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.writeValueWithResultAndOptionAsync(value, writeOption))
    }

    /// Writes the ClientCharacteristicConfigurationDescriptor to the Bluetooth LE device, and if the value to be written represents an indication or a notification and a ValueChanged event handler is registered, enables receiving ValueChanged events from the device.
    /// - Parameter clientCharacteristicConfigurationDescriptorValue: Specifies a new value for the ClientCharacteristicConfigurationDescriptor of this Characteristic object.
    /// - Returns: Returns an asynchronous operation that completes with a GattWriteResult object.
    public func writeClientCharacteristicConfigurationDescriptorWithResultAsync(_ clientCharacteristicConfigurationDescriptorValue: WindowsDevicesBluetoothGenericAttributeProfile_GattClientCharacteristicConfigurationDescriptorValue) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattWriteResult?> {
        try COM.NullResult.unwrap(_igattCharacteristic3.writeClientCharacteristicConfigurationDescriptorWithResultAsync(clientCharacteristicConfigurationDescriptorValue))
    }

    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattCharacteristicStatics members

    /// Converts a Bluetooth SIG defined short Id to a full GATT UUID.
    /// - Parameter shortId: A 16-bit Bluetooth GATT Service UUID.
    /// - Returns: The corresponding 128-bit GATT Characteristic UUID, that uniquely identifies this characteristic.
    public static func convertShortIdToUuid(_ shortId: Swift.UInt16) throws -> Foundation.UUID {
        try _igattCharacteristicStatics.convertShortIdToUuid(shortId)
    }

    // MARK: Implementation details

    private var _igattCharacteristic2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic2>? = nil

    internal var _igattCharacteristic2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic2> {
        get throws {
            try _igattCharacteristic2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic2.self)
            }
        }
    }

    private var _igattCharacteristic3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic3>? = nil

    internal var _igattCharacteristic3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic3> {
        get throws {
            try _igattCharacteristic3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic3.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristic3.self)
            }
        }
    }

    deinit {
        _igattCharacteristic2_storage?.release()
        _igattCharacteristic3_storage?.release()
    }

    private static var _igattCharacteristicStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristicStatics>? = nil

    internal static var _igattCharacteristicStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristicStatics> {
        get throws {
            try _igattCharacteristicStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic", id: CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattCharacteristicStatics.iid)
            }
        }
    }
}