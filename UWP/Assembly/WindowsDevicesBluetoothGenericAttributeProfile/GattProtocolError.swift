// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This class contains byte values for GATT protocol errors.
public enum WindowsDevicesBluetoothGenericAttributeProfile_GattProtocolError {
    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattProtocolErrorStatics members

    /// Gets the byte value for an attribute not found error.
    /// - Returns: The byte value for an attribute not found error.
    public static var attributeNotFound: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_AttributeNotFound()
        }
    }

    /// Gets the byte value for an attribute not long error.
    /// - Returns: The byte value for an attribute not long error.
    public static var attributeNotLong: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_AttributeNotLong()
        }
    }

    /// Gets the byte value for an insufficient authentication error.
    /// - Returns: The byte value for an insufficient authentication error.
    public static var insufficientAuthentication: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InsufficientAuthentication()
        }
    }

    /// Gets the byte value for an insufficient authorization error.
    /// - Returns: The byte value for an insufficient authorization error.
    public static var insufficientAuthorization: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InsufficientAuthorization()
        }
    }

    /// Gets the byte value for an insufficient encryption error.
    /// - Returns: The byte value for an insufficient encryption error.
    public static var insufficientEncryption: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InsufficientEncryption()
        }
    }

    /// Gets the byte value for an insufficient encryption key size error.
    /// - Returns: The byte value for an insufficient encryption key size error.
    public static var insufficientEncryptionKeySize: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InsufficientEncryptionKeySize()
        }
    }

    /// Gets the byte value for an insufficient resources error.
    /// - Returns: The byte value for an insufficient resources error.
    public static var insufficientResources: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InsufficientResources()
        }
    }

    /// Gets the byte value for an invalid attribute value length error.
    /// - Returns: The byte value for an invalid attribute value length error.
    public static var invalidAttributeValueLength: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InvalidAttributeValueLength()
        }
    }

    /// Gets the byte value for an invalid handle error.
    /// - Returns: The byte value for an invalid handle error.
    public static var invalidHandle: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InvalidHandle()
        }
    }

    /// Gets the byte value for an invalid offset error.
    /// - Returns: The byte value for an invalid offset error.
    public static var invalidOffset: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InvalidOffset()
        }
    }

    /// Gets the byte value for an invalid PDU error.
    /// - Returns: The byte value for an invalid PDU error.
    public static var invalidPdu: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_InvalidPdu()
        }
    }

    /// Gets the byte value for a prepare queue full error.
    /// - Returns: The byte value for a prepare queue full error.
    public static var prepareQueueFull: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_PrepareQueueFull()
        }
    }

    /// Gets the byte value for a read not permitted error.
    /// - Returns: The byte value for a read not permitted error.
    public static var readNotPermitted: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_ReadNotPermitted()
        }
    }

    /// Gets the byte value for a request not supported error.
    /// - Returns: The byte value for a request not supported error.
    public static var requestNotSupported: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_RequestNotSupported()
        }
    }

    /// Gets the byte value for an unlikely error.
    /// - Returns: The byte value for an unsupported group type error.
    public static var unlikelyError: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_UnlikelyError()
        }
    }

    /// Gets the byte value for an unsupported group type error.
    /// - Returns: The byte value for an unsupported group type error.
    public static var unsupportedGroupType: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_UnsupportedGroupType()
        }
    }

    /// Gets the byte value for a write not permitted error.
    /// - Returns: The byte value for a write not permitted error.
    public static var writeNotPermitted: Swift.UInt8 {
        get throws {
            try _igattProtocolErrorStatics.get_WriteNotPermitted()
        }
    }

    // MARK: Implementation details

    private static var _igattProtocolErrorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattProtocolErrorStatics>? = nil

    internal static var _igattProtocolErrorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattProtocolErrorStatics> {
        get throws {
            try _igattProtocolErrorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.GenericAttributeProfile.GattProtocolError", id: CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattProtocolErrorStatics.iid)
            }
        }
    }
}