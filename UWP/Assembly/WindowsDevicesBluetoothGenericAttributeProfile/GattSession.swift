// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Generic Attribute Profile (GATT) session.
public final class WindowsDevicesBluetoothGenericAttributeProfile_GattSession: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothGenericAttributeProfile_GattSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSession members

    /// Gets a Boolean value that indicates whether the connection can be maintained.
    /// - Returns: `true` if the connection can be maintained, otherwise `false`.
    public var canMaintainConnection: Swift.Bool {
        get throws {
            try _interop.get_CanMaintainConnection()
        }
    }

    /// Gets the device ID.
    /// - Returns: The device ID.
    public var deviceId: WindowsDevicesBluetooth_BluetoothDeviceId {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeviceId())
        }
    }

    /// Gets or sets a Boolean value that indicates whether the connection should be maintained.
    /// - Returns: `true` if the connection should be maintained, otherwise `false`.
    public var maintainConnection: Swift.Bool {
        get throws {
            try _interop.get_MaintainConnection()
        }
    }

    /// Gets or sets a Boolean value that indicates whether the connection should be maintained.
    /// - Returns: `true` if the connection should be maintained, otherwise `false`.
    public func maintainConnection(_ value: Swift.Bool) throws {
        try _interop.put_MaintainConnection(value)
    }

    /// Gets the max PDU size.
    /// - Returns: The max PDU size.
    public var maxPduSize: Swift.UInt16 {
        get throws {
            try _interop.get_MaxPduSize()
        }
    }

    /// Gets the session status.
    /// - Returns: The session status.
    public var sessionStatus: WindowsDevicesBluetoothGenericAttributeProfile_GattSessionStatus {
        get throws {
            try _interop.get_SessionStatus()
        }
    }

    /// An event that is triggered when the max PDU size changes.
    public func maxPduSizeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothGenericAttributeProfile_GattSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MaxPduSizeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: maxPduSizeChanged)
    }

    public func maxPduSizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MaxPduSizeChanged(token)
    }

    /// An event that is triggered when the GATT session status has changed.
    public func sessionStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothGenericAttributeProfile_GattSession?, WindowsDevicesBluetoothGenericAttributeProfile_GattSessionStatusChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SessionStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sessionStatusChanged)
    }

    public func sessionStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SessionStatusChanged(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the GattSession.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Bluetooth.GenericAttributeProfile.IGattSessionStatics members

    /// Creates a new GattSession object from the specified deviceId.
    /// - Parameter deviceId: The deviceId.
    /// - Returns: An asynchronous operation that completes with a new GattSession object.
    public static func fromDeviceIdAsync(_ deviceId: WindowsDevicesBluetooth_BluetoothDeviceId?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattSession?> {
        try COM.NullResult.unwrap(_igattSessionStatics.fromDeviceIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _igattSessionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattSessionStatics>? = nil

    internal static var _igattSessionStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattSessionStatics> {
        get throws {
            try _igattSessionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.GenericAttributeProfile.GattSession", id: CWinRT.SWRT_WindowsDevicesBluetoothGenericAttributeProfile_IGattSessionStatics.iid)
            }
        }
    }
}