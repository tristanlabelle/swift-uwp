// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the music-related properties of an item (like a file or folder).
public final class WindowsStorageFileProperties_MusicProperties: WindowsRuntime.WinRTImport<WindowsStorageFileProperties_MusicPropertiesProjection>, WindowsStorageFileProperties_IStorageItemExtraPropertiesProtocol {
    // MARK: Windows.Storage.FileProperties.IMusicProperties members

    /// Gets or sets the name of the album that contains the song.
    /// - Returns: The album name.
    public var album: Swift.String {
        get throws {
            try _interop.get_Album()
        }
    }

    /// Gets or sets the name of the album that contains the song.
    /// - Returns: The album name.
    public func album(_ value: Swift.String) throws {
        try _interop.put_Album(value)
    }

    /// Gets or sets the name of the album artist of the song.
    /// - Returns: The name of the song's album artist.
    public var albumArtist: Swift.String {
        get throws {
            try _interop.get_AlbumArtist()
        }
    }

    /// Gets or sets the name of the album artist of the song.
    /// - Returns: The name of the song's album artist.
    public func albumArtist(_ value: Swift.String) throws {
        try _interop.put_AlbumArtist(value)
    }

    /// Gets the artists that contributed to the song.
    /// - Returns: The names of the song's artists.
    public var artist: Swift.String {
        get throws {
            try _interop.get_Artist()
        }
    }

    /// Gets the artists that contributed to the song.
    /// - Returns: The names of the song's artists.
    public func artist(_ value: Swift.String) throws {
        try _interop.put_Artist(value)
    }

    /// Gets the bit rate of the song file.
    /// - Returns: The bit rate, in bits per second.
    public var bitrate: Swift.UInt32 {
        get throws {
            try _interop.get_Bitrate()
        }
    }

    /// Gets the composers of the song.
    /// - Returns: A list of the names of the song's composers.
    public var composers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Composers())
        }
    }

    /// Gets the conductors of the song.
    /// - Returns: A list of the names of the song's conductors.
    public var conductors: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Conductors())
        }
    }

    /// Gets the duration of the song in milliseconds.
    /// - Returns: The duration in milliseconds.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets the names of music genres that the song belongs to.
    /// - Returns: The collection of music genre names.
    public var genre: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Genre())
        }
    }

    /// Gets the producers of the song.
    /// - Returns: A list of the names of the song's producers.
    public var producers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Producers())
        }
    }

    /// Gets or sets the publisher of the song.
    /// - Returns: The name of the song's publisher.
    public var publisher: Swift.String {
        get throws {
            try _interop.get_Publisher()
        }
    }

    /// Gets or sets the publisher of the song.
    /// - Returns: The name of the song's publisher.
    public func publisher(_ value: Swift.String) throws {
        try _interop.put_Publisher(value)
    }

    /// Gets or sets the rating associated with a music file.
    /// - Returns: The media file rating, as a value between 0 and 99.
    public var rating: Swift.UInt32 {
        get throws {
            try _interop.get_Rating()
        }
    }

    /// Gets or sets the rating associated with a music file.
    /// - Returns: The media file rating, as a value between 0 and 99.
    public func rating(_ value: Swift.UInt32) throws {
        try _interop.put_Rating(value)
    }

    /// Gets or sets the subtitle of the song.
    /// - Returns: The song's subtitle.
    public var subtitle: Swift.String {
        get throws {
            try _interop.get_Subtitle()
        }
    }

    /// Gets or sets the subtitle of the song.
    /// - Returns: The song's subtitle.
    public func subtitle(_ value: Swift.String) throws {
        try _interop.put_Subtitle(value)
    }

    /// Gets or sets the title of the song
    /// - Returns: The song title.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Gets or sets the title of the song
    /// - Returns: The song title.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Gets or sets the track number of the song on the song's album.
    /// - Returns: The track number.
    public var trackNumber: Swift.UInt32 {
        get throws {
            try _interop.get_TrackNumber()
        }
    }

    /// Gets or sets the track number of the song on the song's album.
    /// - Returns: The track number.
    public func trackNumber(_ value: Swift.UInt32) throws {
        try _interop.put_TrackNumber(value)
    }

    /// Gets the songwriters.
    /// - Returns: A list of the names of the songwriters.
    public var writers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Writers())
        }
    }

    /// Gets or sets the year that the song was released.
    /// - Returns: The song's release year.
    public var year: Swift.UInt32 {
        get throws {
            try _interop.get_Year()
        }
    }

    /// Gets or sets the year that the song was released.
    /// - Returns: The song's release year.
    public func year(_ value: Swift.UInt32) throws {
        try _interop.put_Year(value)
    }

    // MARK: Windows.Storage.FileProperties.IStorageItemExtraProperties members

    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.retrievePropertiesAsync(propertiesToRetrieve))
    }

    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.savePropertiesAsync(propertiesToSave))
    }

    /// Saves all properties associated with the item.
    /// - Returns: No object or value is returned when this method completes.
    public func savePropertiesAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.savePropertiesAsyncOverloadDefault())
    }

    // MARK: Implementation details

    private var _istorageItemExtraProperties_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties>? = nil

    internal var _istorageItemExtraProperties: COM.COMInterop<CWinRT.SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties> {
        get throws {
            try _istorageItemExtraProperties_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties.iid).cast(to: CWinRT.SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties.self)
            }
        }
    }

    deinit {
        _istorageItemExtraProperties_storage?.release()
    }
}