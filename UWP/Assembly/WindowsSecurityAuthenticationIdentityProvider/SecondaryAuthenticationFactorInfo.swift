// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains properties that provide information about a companion device.
public final class WindowsSecurityAuthenticationIdentityProvider_SecondaryAuthenticationFactorInfo: WindowsRuntime.WinRTImport<WindowsSecurityAuthenticationIdentityProvider_SecondaryAuthenticationFactorInfoProjection> {
    // MARK: Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo members

    /// Gets the device configuration data.
    /// - Returns: The device configuration data.
    public var deviceConfigurationData: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeviceConfigurationData())
        }
    }

    /// Gets the device friendly name.
    /// - Returns: The device friendly name.
    public var deviceFriendlyName: Swift.String {
        get throws {
            try _interop.get_DeviceFriendlyName()
        }
    }

    /// Gets the device Id.
    /// - Returns: The device Id.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the device model number.
    /// - Returns: The device model number.
    public var deviceModelNumber: Swift.String {
        get throws {
            try _interop.get_DeviceModelNumber()
        }
    }

    // MARK: Windows.Security.Authentication.Identity.Provider.ISecondaryAuthenticationFactorInfo2 members

    /// **Deprecated.** Checks whether the companion device supports some kind of user authentication function.
    /// - Returns: **True** if the device supports authentication, otherwise **false**.
    public var isAuthenticationSupported: Swift.Bool {
        get throws {
            try _isecondaryAuthenticationFactorInfo2.get_IsAuthenticationSupported()
        }
    }

    /// **Deprecated.** Gets the presence monitoring mode of the companion device (the mechanism by which the main device checks the presence of the companion device).
    /// - Returns: A SecondaryAuthenticationFactorDevicePresenceMonitoringMode value describing the monitoring mode.
    public var presenceMonitoringMode: WindowsSecurityAuthenticationIdentityProvider_SecondaryAuthenticationFactorDevicePresenceMonitoringMode {
        get throws {
            try _isecondaryAuthenticationFactorInfo2.get_PresenceMonitoringMode()
        }
    }

    /// **Deprecated.** Manually assigns a presence state to a device.
    /// - Parameter presenceState: A SecondaryAuthenticationFactorDevicePresence value indicating the device's presence state.
    /// - Returns: An asynchronous action for the operation.
    public func updateDevicePresenceAsync(_ presenceState: WindowsSecurityAuthenticationIdentityProvider_SecondaryAuthenticationFactorDevicePresence) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_isecondaryAuthenticationFactorInfo2.updateDevicePresenceAsync(presenceState))
    }

    // MARK: Implementation details

    private var _isecondaryAuthenticationFactorInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationIdentityProvider_ISecondaryAuthenticationFactorInfo2>? = nil

    internal var _isecondaryAuthenticationFactorInfo2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationIdentityProvider_ISecondaryAuthenticationFactorInfo2> {
        get throws {
            try _isecondaryAuthenticationFactorInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityAuthenticationIdentityProvider_ISecondaryAuthenticationFactorInfo2.iid).cast(to: CWinRT.SWRT_WindowsSecurityAuthenticationIdentityProvider_ISecondaryAuthenticationFactorInfo2.self)
            }
        }
    }

    deinit {
        _isecondaryAuthenticationFactorInfo2_storage?.release()
    }
}