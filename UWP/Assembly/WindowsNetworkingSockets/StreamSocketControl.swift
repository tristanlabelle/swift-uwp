// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides socket control data on a StreamSocket object.
public final class WindowsNetworkingSockets_StreamSocketControl: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamSocketControlProjection> {
    // MARK: Windows.Networking.Sockets.IStreamSocketControl members

    /// A value that indicates whether keep-alive packets are sent to the remote destination on a StreamSocket object.
    /// - Returns: Whether keep-alive packets are sent to the remote destination.
    public var keepAlive: Swift.Bool {
        get throws {
            try _interop.get_KeepAlive()
        }
    }

    /// A value that indicates whether keep-alive packets are sent to the remote destination on a StreamSocket object.
    /// - Returns: Whether keep-alive packets are sent to the remote destination.
    public func keepAlive(_ value: Swift.Bool) throws {
        try _interop.put_KeepAlive(value)
    }

    /// A value that indicates whether the Nagle algorithm is used on a StreamSocket object.
    /// - Returns: A value that indicates whether the Nagle algorithm is used on the TCP connection of a StreamSocket object
    public var noDelay: Swift.Bool {
        get throws {
            try _interop.get_NoDelay()
        }
    }

    /// A value that indicates whether the Nagle algorithm is used on a StreamSocket object.
    /// - Returns: A value that indicates whether the Nagle algorithm is used on the TCP connection of a StreamSocket object
    public func noDelay(_ value: Swift.Bool) throws {
        try _interop.put_NoDelay(value)
    }

    /// The size, in bytes, of the send buffer to be used for sending data on a StreamSocket object.
    /// - Returns: The size, in bytes, of the send buffer to be used for sending data.
    public var outboundBufferSizeInBytes: Swift.UInt32 {
        get throws {
            try _interop.get_OutboundBufferSizeInBytes()
        }
    }

    /// The size, in bytes, of the send buffer to be used for sending data on a StreamSocket object.
    /// - Returns: The size, in bytes, of the send buffer to be used for sending data.
    public func outboundBufferSizeInBytes(_ value: Swift.UInt32) throws {
        try _interop.put_OutboundBufferSizeInBytes(value)
    }

    /// The hop limit on an outbound packet sent to a unicast IP address by the StreamSocket object.
    /// - Returns: The hop limit on an outbound packet sent by the StreamSocket object. The default is 128.
    public var outboundUnicastHopLimit: Swift.UInt8 {
        get throws {
            try _interop.get_OutboundUnicastHopLimit()
        }
    }

    /// The hop limit on an outbound packet sent to a unicast IP address by the StreamSocket object.
    /// - Returns: The hop limit on an outbound packet sent by the StreamSocket object. The default is 128.
    public func outboundUnicastHopLimit(_ value: Swift.UInt8) throws {
        try _interop.put_OutboundUnicastHopLimit(value)
    }

    /// The quality of service on a StreamSocket object.
    /// - Returns: The quality of service on a StreamSocket object.
    public var qualityOfService: WindowsNetworkingSockets_SocketQualityOfService {
        get throws {
            try _interop.get_QualityOfService()
        }
    }

    /// The quality of service on a StreamSocket object.
    /// - Returns: The quality of service on a StreamSocket object.
    public func qualityOfService(_ value: WindowsNetworkingSockets_SocketQualityOfService) throws {
        try _interop.put_QualityOfService(value)
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketControl2 members

    /// Get a vector of SSL server errors to ignore when making an SSL connection with a StreamSocket.
    /// - Returns: A vector of SSL server errors to ignore.
    public var ignorableServerCertificateErrors: WindowsFoundationCollections_IVector<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_istreamSocketControl2.get_IgnorableServerCertificateErrors())
        }
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketControl3 members

    /// Gets or sets the client SSL/TLS certificate that will be sent to the server if the server requests a client certificate.
    /// - Returns: The client certificate.
    public var clientCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_istreamSocketControl3.get_ClientCertificate())
        }
    }

    /// Gets or sets the client SSL/TLS certificate that will be sent to the server if the server requests a client certificate.
    /// - Returns: The client certificate.
    public func clientCertificate(_ value: WindowsSecurityCryptographyCertificates_Certificate?) throws {
        try _istreamSocketControl3.put_ClientCertificate(value)
    }

    /// A value that indicates whether, when multiple connection attempts are being made, the attempts are made in parallel or serially.
    /// - Returns: When true, at most one connection attempt will be active at one time on this StreamSocket. Default value is false.
    public var serializeConnectionAttempts: Swift.Bool {
        get throws {
            try _istreamSocketControl3.get_SerializeConnectionAttempts()
        }
    }

    /// A value that indicates whether, when multiple connection attempts are being made, the attempts are made in parallel or serially.
    /// - Returns: When true, at most one connection attempt will be active at one time on this StreamSocket. Default value is false.
    public func serializeConnectionAttempts(_ value: Swift.Bool) throws {
        try _istreamSocketControl3.put_SerializeConnectionAttempts(value)
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketControl4 members

    /// Constrains the TLS protocol version that will be negotiated when the developer uses the ConnectAsync() or UpgradeToSslAsync() methods that require TLS.
    /// - Returns: A SocketProtectionLevel enumeration member indicating the socket protection level.
    public var minProtectionLevel: WindowsNetworkingSockets_SocketProtectionLevel {
        get throws {
            try _istreamSocketControl4.get_MinProtectionLevel()
        }
    }

    /// Constrains the TLS protocol version that will be negotiated when the developer uses the ConnectAsync() or UpgradeToSslAsync() methods that require TLS.
    /// - Returns: A SocketProtectionLevel enumeration member indicating the socket protection level.
    public func minProtectionLevel(_ value: WindowsNetworkingSockets_SocketProtectionLevel) throws {
        try _istreamSocketControl4.put_MinProtectionLevel(value)
    }

    // MARK: Implementation details

    private var _istreamSocketControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl2>? = nil

    internal var _istreamSocketControl2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl2> {
        get throws {
            try _istreamSocketControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl2.self)
            }
        }
    }

    private var _istreamSocketControl3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl3>? = nil

    internal var _istreamSocketControl3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl3> {
        get throws {
            try _istreamSocketControl3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl3.self)
            }
        }
    }

    private var _istreamSocketControl4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl4>? = nil

    internal var _istreamSocketControl4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl4> {
        get throws {
            try _istreamSocketControl4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl4.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketControl4.self)
            }
        }
    }

    deinit {
        _istreamSocketControl2_storage?.release()
        _istreamSocketControl3_storage?.release()
        _istreamSocketControl4_storage?.release()
    }
}