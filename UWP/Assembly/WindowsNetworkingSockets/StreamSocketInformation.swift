// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides socket information on a StreamSocket object.
public final class WindowsNetworkingSockets_StreamSocketInformation: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamSocketInformationProjection> {
    // MARK: Windows.Networking.Sockets.IStreamSocketInformation members

    /// Gets bandwidth information for network data transfer on a StreamSocket object.
    /// - Returns: Bandwidth information for network data transfer on a StreamSocket object.
    public var bandwidthStatistics: WindowsNetworkingSockets_BandwidthStatistics {
        get throws {
            try _interop.get_BandwidthStatistics()
        }
    }

    /// Gets the local IP address associated with a StreamSocket object.
    /// - Returns: The local IP address or hostname.
    public var localAddress: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_LocalAddress())
        }
    }

    /// Get the TCP port number associated with a StreamSocket.
    /// - Returns: The local TCP port number of service name.
    public var localPort: Swift.String {
        get throws {
            try _interop.get_LocalPort()
        }
    }

    /// Gets the protection level that represents the integrity and encryption set on a StreamSocket object.
    /// - Returns: The protection level that represents the integrity and encryption set on a StreamSocket object.
    public var protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel {
        get throws {
            try _interop.get_ProtectionLevel()
        }
    }

    /// Get the IP address or hostname of the remote network destination associated with a StreamSocket object.
    /// - Returns: The IP address of the remote network endpoint after a connection is established.
    public var remoteAddress: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RemoteAddress())
        }
    }

    /// Get the hostname or IP address of the remote network destination associated with a StreamSocket object.
    /// - Returns: The hostname or IP address of the remote network destination.
    public var remoteHostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RemoteHostName())
        }
    }

    /// Get the TCP port number or service name of the remote network destination associated with a StreamSocket object.
    /// - Returns: The TCP port number of the remote network endpoint after a connection is established.
    public var remotePort: Swift.String {
        get throws {
            try _interop.get_RemotePort()
        }
    }

    /// Get the service name or TCP port number of the remote network destination associated with a StreamSocket object.
    /// - Returns: The service name or TCP port number of the remote network destination.
    public var remoteServiceName: Swift.String {
        get throws {
            try _interop.get_RemoteServiceName()
        }
    }

    /// Gets round trip time information for a StreamSocket object.
    /// - Returns: Round trip time information for a StreamSocket object.
    public var roundTripTimeStatistics: WindowsNetworkingSockets_RoundTripTimeStatistics {
        get throws {
            try _interop.get_RoundTripTimeStatistics()
        }
    }

    /// Get a byte array that represents the private shared secret exchanged by proximity devices.
    /// - Returns: A byte array that represents the private shared secret exchanged by proximity devices.
    public var sessionKey: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SessionKey())
        }
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketInformation2 members

    /// Gets the certificate from the server when making an SSL connection with a StreamSocket.
    /// - Returns: The certificate from the server with the SSL information.
    public var serverCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_istreamSocketInformation2.get_ServerCertificate())
        }
    }

    /// Gets the category of an error that occurred making an SSL connection with a StreamSocket.
    /// - Returns: The category of error on an SSL connection.
    public var serverCertificateErrorSeverity: WindowsNetworkingSockets_SocketSslErrorSeverity {
        get throws {
            try _istreamSocketInformation2.get_ServerCertificateErrorSeverity()
        }
    }

    /// Gets the list of errors that occurred making an SSL connection with a StreamSocket.
    /// - Returns: The list of errors that occurred making an SSL connection.
    public var serverCertificateErrors: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_istreamSocketInformation2.get_ServerCertificateErrors())
        }
    }

    /// Gets the intermediate certificates sent by the server during SSL negotiation when making an SSL connection with a StreamSocket.
    /// - Returns: The set of certificates sent by the server during SSL negotiation.
    public var serverIntermediateCertificates: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?> {
        get throws {
            try COM.NullResult.unwrap(_istreamSocketInformation2.get_ServerIntermediateCertificates())
        }
    }

    // MARK: Implementation details

    private var _istreamSocketInformation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketInformation2>? = nil

    internal var _istreamSocketInformation2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketInformation2> {
        get throws {
            try _istreamSocketInformation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketInformation2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketInformation2.self)
            }
        }
    }

    deinit {
        _istreamSocketInformation2_storage?.release()
    }
}