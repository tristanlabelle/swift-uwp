// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for a message received event on a MessageWebSocket.
public final class WindowsNetworkingSockets_MessageWebSocketMessageReceivedEventArgs: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_MessageWebSocketMessageReceivedEventArgsProjection> {
    // MARK: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs members

    /// Gets the type of the message received by a MessageWebSocket object.
    /// - Returns: The type of the message received.
    public var messageType: WindowsNetworkingSockets_SocketMessageType {
        get throws {
            try _interop.get_MessageType()
        }
    }

    /// Gets a DataReader object to read incoming data received from the remote network destination on a MessageWebSocket.
    /// - Returns: A DataReader object to read incoming data received from the remote network destination on a MessageWebSocket.
    public func getDataReader() throws -> WindowsStorageStreams_DataReader {
        try COM.NullResult.unwrap(_interop.getDataReader())
    }

    /// Gets an IInputStream object (a message represented as a sequential stream of bytes) from the remote network destination on a MessageWebSocket object.
    /// - Returns: A message represented as a sequential stream of bytes.
    public func getDataStream() throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_interop.getDataStream())
    }

    // MARK: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2 members

    /// Allow clients to query if a MessageReceived callback indicates the received message is complete or just a partial message.
    /// - Returns: TRUE if the message is complete. The default value is FALSE.
    public var isMessageComplete: Swift.Bool {
        get throws {
            try _imessageWebSocketMessageReceivedEventArgs2.get_IsMessageComplete()
        }
    }

    // MARK: Implementation details

    private var _imessageWebSocketMessageReceivedEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IMessageWebSocketMessageReceivedEventArgs2>? = nil

    internal var _imessageWebSocketMessageReceivedEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IMessageWebSocketMessageReceivedEventArgs2> {
        get throws {
            try _imessageWebSocketMessageReceivedEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IMessageWebSocketMessageReceivedEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IMessageWebSocketMessageReceivedEventArgs2.self)
            }
        }
    }

    deinit {
        _imessageWebSocketMessageReceivedEventArgs2_storage?.release()
    }
}