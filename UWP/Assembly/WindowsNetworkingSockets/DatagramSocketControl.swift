// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides socket control data on a DatagramSocket object.
public final class WindowsNetworkingSockets_DatagramSocketControl: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_DatagramSocketControlProjection> {
    // MARK: Windows.Networking.Sockets.IDatagramSocketControl members

    /// Gets or sets the hop limit on an outbound packet sent to a unicast IP address by the DatagramSocket object.
    /// - Returns: The hop limit on an outbound packet sent by the DatagramSocket object. The default is 128.
    public var outboundUnicastHopLimit: Swift.UInt8 {
        get throws {
            try _interop.get_OutboundUnicastHopLimit()
        }
    }

    /// Gets or sets the hop limit on an outbound packet sent to a unicast IP address by the DatagramSocket object.
    /// - Returns: The hop limit on an outbound packet sent by the DatagramSocket object. The default is 128.
    public func outboundUnicastHopLimit(_ value: Swift.UInt8) throws {
        try _interop.put_OutboundUnicastHopLimit(value)
    }

    /// Gets or sets the quality of service on a DatagramSocket object.
    /// - Returns: The quality of service on a DatagramSocket object. The default is **normal**.
    public var qualityOfService: WindowsNetworkingSockets_SocketQualityOfService {
        get throws {
            try _interop.get_QualityOfService()
        }
    }

    /// Gets or sets the quality of service on a DatagramSocket object.
    /// - Returns: The quality of service on a DatagramSocket object. The default is **normal**.
    public func qualityOfService(_ value: WindowsNetworkingSockets_SocketQualityOfService) throws {
        try _interop.put_QualityOfService(value)
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocketControl2 members

    /// Gets or sets a Boolean value that specifies whether the DatagramSocket allows IP datagrams for UDP to be fragmented.
    /// - Returns: Whether the DatagramSocket allows datagrams to be fragmented.
    public var dontFragment: Swift.Bool {
        get throws {
            try _idatagramSocketControl2.get_DontFragment()
        }
    }

    /// Gets or sets a Boolean value that specifies whether the DatagramSocket allows IP datagrams for UDP to be fragmented.
    /// - Returns: Whether the DatagramSocket allows datagrams to be fragmented.
    public func dontFragment(_ value: Swift.Bool) throws {
        try _idatagramSocketControl2.put_DontFragment(value)
    }

    /// Gets or sets the size, in bytes, of the buffer used for receiving data on the DatagramSocket object.
    /// - Returns: The size, in bytes, of the buffer used for receiving data on the DatagramSocket object.
    public var inboundBufferSizeInBytes: Swift.UInt32 {
        get throws {
            try _idatagramSocketControl2.get_InboundBufferSizeInBytes()
        }
    }

    /// Gets or sets the size, in bytes, of the buffer used for receiving data on the DatagramSocket object.
    /// - Returns: The size, in bytes, of the buffer used for receiving data on the DatagramSocket object.
    public func inboundBufferSizeInBytes(_ value: Swift.UInt32) throws {
        try _idatagramSocketControl2.put_InboundBufferSizeInBytes(value)
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocketControl3 members

    /// Gets or sets a Boolean value that specifies whether the DatagramSocket is able to coexist with other Win32 or WinRT multicast sockets bound to the same address/port.
    /// - Returns: Setting this property to **true** enables the DatagramSocket instance to share its local port with any Win32 sockets that are bound using **SO_REUSEADDR/SO_REUSE_MULTICASTPORT**, and with any other **DatagramSocket** instances that have **MulticastOnly** set to true.
    public var multicastOnly: Swift.Bool {
        get throws {
            try _idatagramSocketControl3.get_MulticastOnly()
        }
    }

    /// Gets or sets a Boolean value that specifies whether the DatagramSocket is able to coexist with other Win32 or WinRT multicast sockets bound to the same address/port.
    /// - Returns: Setting this property to **true** enables the DatagramSocket instance to share its local port with any Win32 sockets that are bound using **SO_REUSEADDR/SO_REUSE_MULTICASTPORT**, and with any other **DatagramSocket** instances that have **MulticastOnly** set to true.
    public func multicastOnly(_ value: Swift.Bool) throws {
        try _idatagramSocketControl3.put_MulticastOnly(value)
    }

    // MARK: Implementation details

    private var _idatagramSocketControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl2>? = nil

    internal var _idatagramSocketControl2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl2> {
        get throws {
            try _idatagramSocketControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl2.self)
            }
        }
    }

    private var _idatagramSocketControl3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl3>? = nil

    internal var _idatagramSocketControl3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl3> {
        get throws {
            try _idatagramSocketControl3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketControl3.self)
            }
        }
    }

    deinit {
        _idatagramSocketControl2_storage?.release()
        _idatagramSocketControl3_storage?.release()
    }
}