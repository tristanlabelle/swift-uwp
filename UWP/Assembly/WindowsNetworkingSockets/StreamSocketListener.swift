// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports listening for an incoming network connection using a TCP stream socket or Bluetooth RFCOMM.
public final class WindowsNetworkingSockets_StreamSocketListener: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamSocketListenerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingSockets_StreamSocketListenerProjection.self))
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketListener members

    /// Gets socket control data on a StreamSocketListener object.
    /// - Returns: Socket control data on a StreamSocketListener object.
    public var control: WindowsNetworkingSockets_StreamSocketListenerControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Control())
        }
    }

    /// Gets socket information for the StreamSocketListener object.
    /// - Returns: Socket information for the StreamSocketListener object.
    public var information: WindowsNetworkingSockets_StreamSocketListenerInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Information())
        }
    }

    /// An event that indicates that a connection was received on the StreamSocketListener object.
    public func connectionReceived(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsNetworkingSockets_StreamSocketListener?, WindowsNetworkingSockets_StreamSocketListenerConnectionReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ConnectionReceived(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: connectionReceived)
    }

    public func connectionReceived(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ConnectionReceived(eventCookie)
    }

    /// Starts a bind operation on a StreamSocketListener to a local service name.
    /// - Parameter localServiceName: The local service name or TCP port on which to bind the StreamSocketListener object. For Bluetooth RFCOMM, this parameter is the Bluetooth Service ID.
    /// - Returns: The asynchronous bind operation on a StreamSocketListener object.
    public func bindServiceNameAsync(_ localServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.bindServiceNameAsync(localServiceName))
    }

    /// Starts a bind operation on a StreamSocketListener to a local hostname and a local service name.
    /// - Parameter localHostName: The local hostname or IP address on which to bind the StreamSocketListener object.
    /// - Parameter localServiceName: The local service name or TCP port on which to bind the StreamSocketListener object.
    /// - Returns: An asynchronous bind operation on a StreamSocketListener object.
    public func bindEndpointAsync(_ localHostName: WindowsNetworking_HostName?, _ localServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.bindEndpointAsync(localHostName, localServiceName))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the StreamSocketListener object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketListener2 members

    /// Starts a bind operation on a StreamSocketListener to a local service name with a specified SocketProtectionLevel to set on any bound sockets.
    /// - Parameter localServiceName: The local service name or TCP port on which to bind the StreamSocketListener object. For Bluetooth RFCOMM, this parameter is the Bluetooth Service ID.
    /// - Parameter protectionLevel: The protection level for encryption to set on any bound sockets.
    /// - Returns: The asynchronous bind operation on a StreamSocketListener object.
    public func bindServiceNameAsync(_ localServiceName: Swift.String, _ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istreamSocketListener2.bindServiceNameWithProtectionLevelAsync(localServiceName, protectionLevel))
    }

    /// Starts a socket bind operation on a StreamSocketListener to a local service name on a specified network adapter with a specified SocketProtectionLevel to set on any bound sockets.
    /// - Parameter localServiceName: The local service name or TCP port on which to bind the StreamSocketListener object. For Bluetooth RFCOMM, this parameter is the Bluetooth Service ID.
    /// - Parameter protectionLevel: The protection level for encryption to set on any bound sockets.
    /// - Parameter adapter: The network adapter on which to bind the StreamSocketListener object.
    /// - Returns: The asynchronous bind operation on a StreamSocketListener object.
    public func bindServiceNameAsync(_ localServiceName: Swift.String, _ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istreamSocketListener2.bindServiceNameWithProtectionLevelAndAdapterAsync(localServiceName, protectionLevel, adapter))
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketListener3 members

    /// Cancels pending reads and writes over a StreamSocketListener object.
    /// - Returns: An asynchronous cancel operation on a StreamSocketListener object.
    public func cancelIOAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istreamSocketListener3.cancelIOAsync())
    }

    /// Enables your app's background task to be triggered by the socket broker when traffic for this StreamSocketListener arrives while the app is not active.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task that will be triggered by the socket broker when traffic arrives for this StreamSocketListener.
    public func enableTransferOwnership(_ taskId: Foundation.UUID) throws {
        try _istreamSocketListener3.enableTransferOwnership(taskId)
    }

    /// Enables your app's background task to be triggered by the socket broker when traffic for this StreamSocketListener arrives while the system is in connected standby.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task that will be triggered by the socket broker when traffic arrives for this StreamSocketListener.
    /// - Parameter connectedStandbyAction: Specifies whether to enable or disable the activation of the background task when traffic arrives.
    public func enableTransferOwnership(_ taskId: Foundation.UUID, _ connectedStandbyAction: WindowsNetworkingSockets_SocketActivityConnectedStandbyAction) throws {
        try _istreamSocketListener3.enableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction)
    }

    /// Transfers ownership of the StreamSocketListener to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    public func transferOwnership(_ socketId: Swift.String) throws {
        try _istreamSocketListener3.transferOwnership(socketId)
    }

    /// Transfers ownership of the StreamSocketListener to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    /// - Parameter data: Use the SocketActivityContext to pass context information through the socket broker. When your app is notified by the broker of activity, this SocketActivityContext will be provided to your app to help establish the context in which you should handle the notification.
    public func transferOwnership(_ socketId: Swift.String, _ data: WindowsNetworkingSockets_SocketActivityContext?) throws {
        try _istreamSocketListener3.transferOwnershipWithContext(socketId, data)
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _istreamSocketListener2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener2>? = nil

    internal var _istreamSocketListener2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener2> {
        get throws {
            try _istreamSocketListener2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener2.self)
            }
        }
    }

    private var _istreamSocketListener3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener3>? = nil

    internal var _istreamSocketListener3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener3> {
        get throws {
            try _istreamSocketListener3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketListener3.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _istreamSocketListener2_storage?.release()
        _istreamSocketListener3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.StreamSocketListener", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}