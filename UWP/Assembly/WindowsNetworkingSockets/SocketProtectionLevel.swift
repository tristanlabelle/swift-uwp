// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the level of encryption to use on a StreamSocket object.
public struct WindowsNetworkingSockets_SocketProtectionLevel: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// A plain socket with no encryption.
    public static let plainSocket = Self()

    /// A TCP socket that must use the Secure Sockets Layer (SSL) for encryption. This value requires encryption and never allows a NULL cipher (no encryption).
    public static let ssl = Self(rawValue: 1)

    /// A TCP socket that prefers to use SSL for encryption. This value prefers that full encryption be used, but allows a NULL cipher (no encryption) based on the server configuration.
    public static let sslAllowNullEncryption = Self(rawValue: 2)

    /// A Bluetooth socket that prefers that encryption be used, but allows a NULL cipher (no encryption) based on the configuration of the target server.
    public static let bluetoothEncryptionAllowNullAuthentication = Self(rawValue: 3)

    /// A Bluetooth socket that must use encryption. This value requires encryption and never allows a NULL cipher.
    public static let bluetoothEncryptionWithAuthentication = Self(rawValue: 4)

    /// A TCP socket that must use SSL for encryption. This value supports the SSL 3.0 protocol and all encryption ciphers installed on the system except the NULL cipher. This value allows RC4 and other weak ciphers which are considered insecure. For domain-joined machines, an administrator can configure additional restrictions on which ciphers are allowed.
    public static let ssl3AllowWeakEncryption = Self(rawValue: 5)

    /// A TCP socket that must use SSL for encryption. This value supports the TLS 1.0 protocol and all encryption ciphers installed on the system except RC4, other weak ciphers, and the NULL cipher. For domain-joined machines, an administrator can configure additional restrictions on which ciphers are allowed.
    public static let tls10 = Self(rawValue: 6)

    /// A TCP socket that must use SSL for encryption. This value supports the TLS 1.1 and TLS 1.0 protocols and all encryption ciphers installed on the system except RC4, other weak ciphers, and the NULL cipher. For domain-joined machines, an administrator can configure additional restrictions on which ciphers are allowed.
    public static let tls11 = Self(rawValue: 7)

    /// A TCP socket that must use SSL for encryption. This value supports the TLS 1.2, TLS 1.1 and TLS 1.0 protocols and all encryption ciphers installed on the system except RC4, other weak ciphers, and the NULL cipher. For domain-joined machines, an administrator can configure additional restrictions on which ciphers are allowed.
    public static let tls12 = Self(rawValue: 8)

    /// The protection level is unspecified.
    public static let unspecified = Self(rawValue: 9)
}