// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports network communication using a stream socket over TCP or Bluetooth RFCOMM in UWP apps.
public final class WindowsNetworkingSockets_StreamSocket: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamSocketProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingSockets_StreamSocketProjection.self))
    }

    // MARK: Windows.Networking.Sockets.IStreamSocket members

    /// Gets socket control data on a StreamSocket object.
    /// - Returns: Socket control data on a StreamSocket object.
    public var control: WindowsNetworkingSockets_StreamSocketControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Control())
        }
    }

    /// Gets socket information on a StreamSocket object.
    /// - Returns: Socket information on a StreamSocket object.
    public var information: WindowsNetworkingSockets_StreamSocketInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Information())
        }
    }

    /// Gets the input stream to read from the remote destination on a StreamSocket object.
    /// - Returns: A sequential stream of bytes to be read from the remote destination.
    public var inputStream: WindowsStorageStreams_IInputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InputStream())
        }
    }

    /// Gets the output stream to write to the remote host on a StreamSocket object.
    /// - Returns: A sequential stream of bytes to be written to the remote destination.
    public var outputStream: WindowsStorageStreams_IOutputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OutputStream())
        }
    }

    /// Starts an asynchronous operation on a StreamSocket object to connect to a remote network destination specified as an EndpointPair object.
    /// - Parameter endpointPair: An EndpointPair object that specifies the local hostname or IP address, the local service name or TCP port, the remote hostname or remote IP address, and the remote service name or remote TCP port for the remote network destination.
    /// - Returns: An asynchronous connect operation on a StreamSocket object.
    public func connectAsync(_ endpointPair: WindowsNetworking_EndpointPair?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectWithEndpointPairAsync(endpointPair))
    }

    public func connectAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectAsync(remoteHostName, remoteServiceName))
    }

    public func connectAsync(_ endpointPair: WindowsNetworking_EndpointPair?, _ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectWithEndpointPairAndProtectionLevelAsync(endpointPair, protectionLevel))
    }

    /// Starts an asynchronous operation on a StreamSocket object to connect to a remote destination specified by a remote hostname, a remote service name, and a SocketProtectionLevel.
    /// - Parameter remoteHostName: The hostname or IP address of the remote network destination. For Bluetooth RFCOMM, this is a MAC address.
    /// - Parameter remoteServiceName: The service name or TCP port number of the remote network destination. For Bluetooth RFCOMM, this is the Bluetooth address.
    /// - Parameter protectionLevel: The protection level that represents the integrity and encryption for the StreamSocket object.
    /// - Returns: An asynchronous connect operation on a StreamSocket object.
    public func connectAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String, _ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectWithProtectionLevelAsync(remoteHostName, remoteServiceName, protectionLevel))
    }

    /// Starts an asynchronous operation to upgrade a connected socket to use SSL on a StreamSocket object.
    /// - Parameter protectionLevel: The protection level that represents the integrity and encryption on the StreamSocket object.
    /// - Parameter validationHostName: The hostname of the remote network destination that is used for validation when upgrading to SSL.
    /// - Returns: An asynchronous operation to upgrade to use SSL on a StreamSocket object.
    public func upgradeToSslAsync(_ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel, _ validationHostName: WindowsNetworking_HostName?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.upgradeToSslAsync(protectionLevel, validationHostName))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the StreamSocket object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Networking.Sockets.IStreamSocket2 members

    /// Starts an asynchronous operation on a StreamSocket object on a specified local network adapter to connect to a remote destination specified by a remote hostname, a remote service name, and a SocketProtectionLevel.
    /// - Parameter remoteHostName: The hostname or IP address of the remote network destination. For Bluetooth RFCOMM, this is a MAC address.
    /// - Parameter remoteServiceName: The service name or TCP port number of the remote network destination. For Bluetooth RFCOMM, this is the Bluetooth address.
    /// - Parameter protectionLevel: The protection level that represents the integrity and encryption for the StreamSocket object.
    /// - Parameter adapter: The local network adapter to use for the connect operation on the StreamSocket object.
    /// - Returns: An asynchronous connect operation on a StreamSocket object.
    public func connectAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String, _ protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istreamSocket2.connectWithProtectionLevelAndAdapterAsync(remoteHostName, remoteServiceName, protectionLevel, adapter))
    }

    // MARK: Windows.Networking.Sockets.IStreamSocket3 members

    /// Cancels pending reads and writes over a StreamSocket object.
    /// - Returns: An asynchronous cancel operation on a StreamSocket object.
    public func cancelIOAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istreamSocket3.cancelIOAsync())
    }

    /// Enables your app's background task to be triggered by the socket broker when traffic for this StreamSocket arrives while the app is not active.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task that will be triggered by the socket broker when traffic arrives for this StreamSocket.
    public func enableTransferOwnership(_ taskId: Foundation.UUID) throws {
        try _istreamSocket3.enableTransferOwnership(taskId)
    }

    /// Enables or disables the ability of your app's background task to be triggered by the socket broker when traffic for this StreamSocket arrives while the system is in connected standby.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task being enabled or disabled.
    /// - Parameter connectedStandbyAction: Specifies whether to enable or disable the activation of the background task when traffic arrives.
    public func enableTransferOwnership(_ taskId: Foundation.UUID, _ connectedStandbyAction: WindowsNetworkingSockets_SocketActivityConnectedStandbyAction) throws {
        try _istreamSocket3.enableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction)
    }

    /// Transfers ownership of the StreamSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    public func transferOwnership(_ socketId: Swift.String) throws {
        try _istreamSocket3.transferOwnership(socketId)
    }

    /// Transfers ownership of the StreamSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity. Specifies a new SocketActivityContext for the socket.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    /// - Parameter data: Use the SocketActivityContext to pass context information through the socket broker. When your app is notified by the broker of activity, this SocketActivityContext will be provided to your app to help establish the context in which you should handle the notification.
    public func transferOwnership(_ socketId: Swift.String, _ data: WindowsNetworkingSockets_SocketActivityContext?) throws {
        try _istreamSocket3.transferOwnershipWithContext(socketId, data)
    }

    /// Transfers ownership of the StreamSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity. Specifies a new SocketActivityContext and a keep alive time for the socket.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    /// - Parameter data: Use the SocketActivityContext to pass context information through the socket broker. When your app is notified by the broker of activity, this SocketActivityContext will be provided to your app to help establish the context in which you should handle the notification.
    /// - Parameter keepAliveTime: How long the socket brokering service should monitor the socket for activity.
    public func transferOwnership(_ socketId: Swift.String, _ data: WindowsNetworkingSockets_SocketActivityContext?, _ keepAliveTime: WindowsFoundation_TimeSpan) throws {
        try _istreamSocket3.transferOwnershipWithContextAndKeepAliveTime(socketId, data, keepAliveTime)
    }

    // MARK: Windows.Networking.Sockets.IStreamSocketStatics members

    /// Gets a list of EndpointPair objects based on a remote hostname and remote service name that can be used to send TCP packets to a remote network destination.
    /// - Parameter remoteHostName: The hostname of a service. The service might actually be hosted on multiple services, so that a DNS lookup returns multiple IP addresses for the various servers. This method returns one endpoint pair for each of the servers found by a DNS lookup.
    /// - Parameter remoteServiceName: The name or port number of a remote service. Note that different servers might support the named service on different physical ports, so not all of the returned endpoints will use the same service port number.
    /// - Returns: An asynchronous lookup operation. On successful completion, the returned list contains one EndpointPair for each remote host found, with one end point being one of the remote hosts and the other being the local host.
    public static func getEndpointPairsAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworking_EndpointPair?>?> {
        try COM.NullResult.unwrap(_istreamSocketStatics.getEndpointPairsAsync(remoteHostName, remoteServiceName))
    }

    /// Gets a list of EndpointPair objects based on a remote hostname and remote service name and the sort order to be used.
    /// - Parameter remoteHostName: The remote hostname or IP address.
    /// - Parameter remoteServiceName: The remote service name or UDP port.
    /// - Parameter sortOptions: The sort order to use when returning the list.
    /// - Returns: A list of EndpointPair objects.
    public static func getEndpointPairsAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String, _ sortOptions: WindowsNetworking_HostNameSortOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworking_EndpointPair?>?> {
        try COM.NullResult.unwrap(_istreamSocketStatics.getEndpointPairsWithSortOptionsAsync(remoteHostName, remoteServiceName, sortOptions))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _istreamSocket2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket2>? = nil

    internal var _istreamSocket2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket2> {
        get throws {
            try _istreamSocket2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket2.self)
            }
        }
    }

    private var _istreamSocket3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket3>? = nil

    internal var _istreamSocket3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket3> {
        get throws {
            try _istreamSocket3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocket3.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _istreamSocket2_storage?.release()
        _istreamSocket3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.StreamSocket", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _istreamSocketStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketStatics>? = nil

    internal static var _istreamSocketStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketStatics> {
        get throws {
            try _istreamSocketStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.StreamSocket", id: CWinRT.SWRT_WindowsNetworkingSockets_IStreamSocketStatics.iid)
            }
        }
    }
}