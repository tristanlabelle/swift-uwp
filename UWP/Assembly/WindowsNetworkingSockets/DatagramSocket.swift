// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports network communication using a UDP datagram socket.
public final class WindowsNetworkingSockets_DatagramSocket: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_DatagramSocketProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingSockets_DatagramSocketProjection.self))
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocket members

    /// Gets socket control data on a DatagramSocket object.
    /// - Returns: Socket control data on a DatagramSocket object.
    public var control: WindowsNetworkingSockets_DatagramSocketControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Control())
        }
    }

    /// Gets socket information on the local and remote hostnames and local and remote service names for the DatagramSocket object.
    /// - Returns: Socket information for the DatagramSocket object.
    public var information: WindowsNetworkingSockets_DatagramSocketInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Information())
        }
    }

    /// Gets the output stream to write to the remote host.
    /// - Returns: A stream of bytes to be written to the remote host in a UDP datagram.
    public var outputStream: WindowsStorageStreams_IOutputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OutputStream())
        }
    }

    /// An event that indicates that a message was received on the DatagramSocket object.
    public func messageReceived(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsNetworkingSockets_DatagramSocket?, WindowsNetworkingSockets_DatagramSocketMessageReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MessageReceived(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: messageReceived)
    }

    public func messageReceived(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MessageReceived(eventCookie)
    }

    /// Starts a connect operation on a DatagramSocket to a remote destination specified by a remote hostname and a remote service name.
    /// - Parameter remoteHostName: The hostname or IP address of the remote network destination.
    /// - Parameter remoteServiceName: The service name or UDP port of the remote network destination.
    /// - Returns: An asynchronous connect operation on a DatagramSocket object.
    public func connectAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectAsync(remoteHostName, remoteServiceName))
    }

    /// Starts a connect operation on a DatagramSocket to a remote network destination specified as an EndpointPair object.
    /// - Parameter endpointPair: An EndpointPair object that specifies local hostname or IP address, local service name or UDP port, the remote hostname or remote IP address, and the remote service name or remote UDP port for the remote network destination.
    /// - Returns: An asynchronous connect operation on a DatagramSocket object.
    public func connectAsync(_ endpointPair: WindowsNetworking_EndpointPair?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.connectWithEndpointPairAsync(endpointPair))
    }

    /// Starts a bind operation on a DatagramSocket to a local service name.
    /// - Parameter localServiceName: The local service name or UDP port on which to bind the DatagramSocket object.
    /// - Returns: An asynchronous bind operation on a DatagramSocket object.
    public func bindServiceNameAsync(_ localServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.bindServiceNameAsync(localServiceName))
    }

    /// Starts a bind operation on a DatagramSocket to a local hostname and a local service name.
    /// - Parameter localHostName: The local hostname or IP address on which to bind the DatagramSocket object.
    /// - Parameter localServiceName: The local service name or UDP port on which to bind the DatagramSocket object.
    /// - Returns: An asynchronous bind operation on a DatagramSocket object.
    public func bindEndpointAsync(_ localHostName: WindowsNetworking_HostName?, _ localServiceName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.bindEndpointAsync(localHostName, localServiceName))
    }

    /// Joins a DatagramSocket object to a multicast group.
    /// - Parameter host: The hostname or IP address for the multicast group.
    public func joinMulticastGroup(_ host: WindowsNetworking_HostName?) throws {
        try _interop.joinMulticastGroup(host)
    }

    /// Starts an operation to get an IOutputStream to a remote destination specified by a remote hostname and a remote service name that can then be used to send network data.
    /// - Parameter remoteHostName: The remote hostname or remote IP address.
    /// - Parameter remoteServiceName: The remote service name or remote UDP port.
    /// - Returns: An IOutputStream that representing the asynchronous operation.
    public func getOutputStreamAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IOutputStream?> {
        try COM.NullResult.unwrap(_interop.getOutputStreamAsync(remoteHostName, remoteServiceName))
    }

    /// Starts an operation to get an IOutputStream to a remote network destination specified by an EndpointPair object that can then be used to send network data.
    /// - Parameter endpointPair: An endpoint pair that represents the local hostname or local IP address, the local service name or local UDP port, the remote hostname or remote IP address, and the remote service name or remote UDP port.
    /// - Returns: An IOutputStream that represents the asynchronous operation.
    public func getOutputStreamAsync(_ endpointPair: WindowsNetworking_EndpointPair?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IOutputStream?> {
        try COM.NullResult.unwrap(_interop.getOutputStreamWithEndpointPairAsync(endpointPair))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the DatagramSocket object and aborts any pending operation on the **DatagramSocket**.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocket2 members

    /// Starts a bind operation on a DatagramSocket to a local service name and specific network interface.
    /// - Parameter localServiceName: The local service name or UDP port on which to bind the DatagramSocket object.
    /// - Parameter adapter: The network adapter on which to bind the DatagramSocket object.
    /// - Returns: An asynchronous bind operation on a DatagramSocket object.
    public func bindServiceNameAsync(_ localServiceName: Swift.String, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_idatagramSocket2.bindServiceNameAndAdapterAsync(localServiceName, adapter))
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocket3 members

    /// Cancels pending reads and writes over a DatagramSocket object.
    /// - Returns: An asynchronous cancel operation on a DatagramSocket object.
    public func cancelIOAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_idatagramSocket3.cancelIOAsync())
    }

    /// Enables your app's background task to be triggered by the socket broker when traffic for this DatagramSocket arrives while the app is not active.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task that will be triggered by the socket broker when traffic arrives for this DatagramSocket.
    public func enableTransferOwnership(_ taskId: Foundation.UUID) throws {
        try _idatagramSocket3.enableTransferOwnership(taskId)
    }

    /// Enables your app's background task to be triggered by the socket broker when traffic for this DatagramSocket arrives while the system is in connected standby.
    /// - Parameter taskId: The IBackgroundTaskRegistration.TaskId of the background task that will be triggered by the socket broker when traffic arrives for this DatagramSocket.
    /// - Parameter connectedStandbyAction: Specifies whether to enable or disable the activation of the background task when traffic arrives.
    public func enableTransferOwnership(_ taskId: Foundation.UUID, _ connectedStandbyAction: WindowsNetworkingSockets_SocketActivityConnectedStandbyAction) throws {
        try _idatagramSocket3.enableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction)
    }

    /// Transfers ownership of the DatagramSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    public func transferOwnership(_ socketId: Swift.String) throws {
        try _idatagramSocket3.transferOwnership(socketId)
    }

    /// Transfers ownership of the DatagramSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    /// - Parameter data: Use the SocketActivityContext to pass context information through the socket broker. When your app is notified by the broker of activity, this SocketActivityContext will be provided to your app to help establish the context in which you should handle the notification.
    public func transferOwnership(_ socketId: Swift.String, _ data: WindowsNetworkingSockets_SocketActivityContext?) throws {
        try _idatagramSocket3.transferOwnershipWithContext(socketId, data)
    }

    /// Transfers ownership of the DatagramSocket to the socket brokering service, which monitors socket activity and notifies the app through a background task if there is any activity.
    /// - Parameter socketId: A string the app uses to identify the transferred socket. The string should identify this socket uniquely within the app. When activity occurs on this socket, this string will be provided to the app to identify the socket.
    /// - Parameter data: Use the SocketActivityContext to pass context information through the socket broker. When your app is notified by the broker of activity, this SocketActivityContext will be provided to your app to help establish the context in which you should handle the notification.
    /// - Parameter keepAliveTime: How long the socket brokering service should monitor the socket for activity.
    public func transferOwnership(_ socketId: Swift.String, _ data: WindowsNetworkingSockets_SocketActivityContext?, _ keepAliveTime: WindowsFoundation_TimeSpan) throws {
        try _idatagramSocket3.transferOwnershipWithContextAndKeepAliveTime(socketId, data, keepAliveTime)
    }

    // MARK: Windows.Networking.Sockets.IDatagramSocketStatics members

    /// Gets a list of EndpointPair objects based on a remote hostname and remote service name that can be used to send datagrams to a remote network destination.
    /// - Parameter remoteHostName: The remote hostname or IP address.
    /// - Parameter remoteServiceName: The remote service name or UDP port.
    /// - Returns: A list of EndpointPair objects.
    public static func getEndpointPairsAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworking_EndpointPair?>?> {
        try COM.NullResult.unwrap(_idatagramSocketStatics.getEndpointPairsAsync(remoteHostName, remoteServiceName))
    }

    /// Gets a list of EndpointPair objects based on a remote hostname and remote service name and the sort order to be used.
    /// - Parameter remoteHostName: The remote hostname or IP address.
    /// - Parameter remoteServiceName: The remote service name or UDP port.
    /// - Parameter sortOptions: The sort order to use when returning the list.
    /// - Returns: A list of EndpointPair objects.
    public static func getEndpointPairsAsync(_ remoteHostName: WindowsNetworking_HostName?, _ remoteServiceName: Swift.String, _ sortOptions: WindowsNetworking_HostNameSortOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworking_EndpointPair?>?> {
        try COM.NullResult.unwrap(_idatagramSocketStatics.getEndpointPairsWithSortOptionsAsync(remoteHostName, remoteServiceName, sortOptions))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _idatagramSocket2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket2>? = nil

    internal var _idatagramSocket2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket2> {
        get throws {
            try _idatagramSocket2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket2.self)
            }
        }
    }

    private var _idatagramSocket3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket3>? = nil

    internal var _idatagramSocket3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket3> {
        get throws {
            try _idatagramSocket3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocket3.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _idatagramSocket2_storage?.release()
        _idatagramSocket3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.DatagramSocket", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _idatagramSocketStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketStatics>? = nil

    internal static var _idatagramSocketStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketStatics> {
        get throws {
            try _idatagramSocketStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.DatagramSocket", id: CWinRT.SWRT_WindowsNetworkingSockets_IDatagramSocketStatics.iid)
            }
        }
    }
}