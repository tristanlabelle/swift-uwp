// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides socket control data on a StreamWebSocket object.
public final class WindowsNetworkingSockets_StreamWebSocketControl: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamWebSocketControlProjection>, WindowsNetworkingSockets_IWebSocketControlProtocol, WindowsNetworkingSockets_IWebSocketControl2Protocol {
    // MARK: Windows.Networking.Sockets.IStreamWebSocketControl members

    /// A value that indicates whether the Nagle algorithm is used on a StreamWebSocket object.
    /// - Returns: A value that indicates whether the Nagle algorithm is used on the TCP connection of a StreamWebSocket object.
    public var noDelay: Swift.Bool {
        get throws {
            try _interop.get_NoDelay()
        }
    }

    /// A value that indicates whether the Nagle algorithm is used on a StreamWebSocket object.
    /// - Returns: A value that indicates whether the Nagle algorithm is used on the TCP connection of a StreamWebSocket object.
    public func noDelay(_ value: Swift.Bool) throws {
        try _interop.put_NoDelay(value)
    }

    // MARK: Windows.Networking.Sockets.IWebSocketControl members

    /// The size, in bytes, of the send buffer to be used for sending data on a StreamWebSocket object.
    /// - Returns: The size, in bytes, of the send buffer to be used for sending data.
    public var outboundBufferSizeInBytes: Swift.UInt32 {
        get throws {
            try _iwebSocketControl.get_OutboundBufferSizeInBytes()
        }
    }

    /// The size, in bytes, of the send buffer to be used for sending data on a StreamWebSocket object.
    /// - Returns: The size, in bytes, of the send buffer to be used for sending data.
    public func outboundBufferSizeInBytes(_ value: Swift.UInt32) throws {
        try _iwebSocketControl.put_OutboundBufferSizeInBytes(value)
    }

    /// The credential to use to authenticate to the proxy server through HTTP header authentication using a StreamWebSocket object.
    /// - Returns: The credential to use to authenticate to the proxy server through HTTP header authentication.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_iwebSocketControl.get_ProxyCredential())
        }
    }

    /// The credential to use to authenticate to the proxy server through HTTP header authentication using a StreamWebSocket object.
    /// - Returns: The credential to use to authenticate to the proxy server through HTTP header authentication.
    public func proxyCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _iwebSocketControl.put_ProxyCredential(value)
    }

    /// The credential to use to authenticate to the WebSocket server through HTTP header authentication using a StreamWebSocket object.
    /// - Returns: The credential to use to authenticate to the WebSocket server through HTTP header authentication.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_iwebSocketControl.get_ServerCredential())
        }
    }

    /// The credential to use to authenticate to the WebSocket server through HTTP header authentication using a StreamWebSocket object.
    /// - Returns: The credential to use to authenticate to the WebSocket server through HTTP header authentication.
    public func serverCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _iwebSocketControl.put_ServerCredential(value)
    }

    /// Gets a collection that can be used to add a list of supported sub-protocols that will be advertised to the server during the connect handshake.
    /// - Returns: A collection that contains the WebSocket sub-protocols supported by the StreamWebSocket object.
    public var supportedProtocols: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_iwebSocketControl.get_SupportedProtocols())
        }
    }

    // MARK: Windows.Networking.Sockets.IWebSocketControl2 members

    /// Gets a list of ignorable server certificate errors. Get this list and add ChainValidationResult values for server certificate errors that you wish to ignore during the secure WebSocket (**wss://** protocol) server certificate validation process.
    /// - Returns: A list of ChainValidationResult values indicating the server certificate errors to ignore when validating server certificates. By default, the list is empty and all errors cause validation to fail.
    public var ignorableServerCertificateErrors: WindowsFoundationCollections_IVector<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_iwebSocketControl2.get_IgnorableServerCertificateErrors())
        }
    }

    // MARK: Windows.Networking.Sockets.IStreamWebSocketControl2 members

    /// Allows an app to get the actual unsolicited WebSocket PONG interval.
    /// - Returns: System.Timespan
    public var actualUnsolicitedPongInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _istreamWebSocketControl2.get_ActualUnsolicitedPongInterval()
        }
    }

    /// Gets the certificate provided by the client when a secure WebSocket connection has been established.
    /// - Returns: The client certificate.
    public var clientCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_istreamWebSocketControl2.get_ClientCertificate())
        }
    }

    /// Gets the certificate provided by the client when a secure WebSocket connection has been established.
    /// - Returns: The client certificate.
    public func clientCertificate(_ value: WindowsSecurityCryptographyCertificates_Certificate?) throws {
        try _istreamWebSocketControl2.put_ClientCertificate(value)
    }

    /// Allows an app to get and set the desired unsolicited WebSocket PONG interval.
    /// - Returns: System.Timespan
    public var desiredUnsolicitedPongInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _istreamWebSocketControl2.get_DesiredUnsolicitedPongInterval()
        }
    }

    /// Allows an app to get and set the desired unsolicited WebSocket PONG interval.
    /// - Returns: System.Timespan
    public func desiredUnsolicitedPongInterval(_ value: WindowsFoundation_TimeSpan) throws {
        try _istreamWebSocketControl2.put_DesiredUnsolicitedPongInterval(value)
    }

    // MARK: Implementation details

    private var _iwebSocketControl_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl>? = nil

    internal var _iwebSocketControl: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl> {
        get throws {
            try _iwebSocketControl_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl.self)
            }
        }
    }

    private var _iwebSocketControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl2>? = nil

    internal var _iwebSocketControl2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl2> {
        get throws {
            try _iwebSocketControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IWebSocketControl2.self)
            }
        }
    }

    private var _istreamWebSocketControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocketControl2>? = nil

    internal var _istreamWebSocketControl2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocketControl2> {
        get throws {
            try _istreamWebSocketControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocketControl2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocketControl2.self)
            }
        }
    }

    deinit {
        _iwebSocketControl_storage?.release()
        _iwebSocketControl2_storage?.release()
        _istreamWebSocketControl2_storage?.release()
    }
}