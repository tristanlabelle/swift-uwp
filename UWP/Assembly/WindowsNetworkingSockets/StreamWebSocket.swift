// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports network communication that allows reading and writing streams using a WebSocket.
public final class WindowsNetworkingSockets_StreamWebSocket: WindowsRuntime.WinRTImport<WindowsNetworkingSockets_StreamWebSocketProjection>, WindowsNetworkingSockets_IWebSocketProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingSockets_StreamWebSocketProjection.self))
    }

    // MARK: Windows.Networking.Sockets.IStreamWebSocket members

    /// Gets socket control data on a StreamWebSocket object.
    /// - Returns: Socket control data on a StreamWebSocket object.
    public var control: WindowsNetworkingSockets_StreamWebSocketControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Control())
        }
    }

    /// Gets socket information on a StreamWebSocket object.
    /// - Returns: Socket information on a StreamWebSocket object.
    public var information: WindowsNetworkingSockets_StreamWebSocketInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Information())
        }
    }

    /// Gets the input stream to read from the remote destination on a StreamWebSocket object.
    /// - Returns: A sequential stream of bytes to be read from the remote destination.
    public var inputStream: WindowsStorageStreams_IInputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InputStream())
        }
    }

    // MARK: Windows.Networking.Sockets.IWebSocket members

    /// Gets the output stream to write to the remote network destination on a StreamWebSocket object.
    /// - Returns: A sequential stream of bytes to be written to the remote destination.
    public var outputStream: WindowsStorageStreams_IOutputStream {
        get throws {
            try COM.NullResult.unwrap(_iwebSocket.get_OutputStream())
        }
    }

    /// Occurs when a close frame is received on the StreamWebSocket object as part of the close handshake.
    public func closed(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsNetworkingSockets_IWebSocket?, WindowsNetworkingSockets_WebSocketClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iwebSocket.add_Closed(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _iwebSocket.remove_Closed(eventCookie)
    }

    /// Starts an asynchronous operation to connect to a remote network destination on a StreamWebSocket object.
    /// - Parameter uri: An absolute Uri for the server to connect to.
    /// - Returns: An asynchronous connect operation on a StreamWebSocket object.
    public func connectAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebSocket.connectAsync(uri))
    }

    /// Adds an HTTP request header to the HTTP request message used in the WebSocket protocol handshake by the StreamWebSocket object.
    /// - Parameter headerName: The name of the request header.
    /// - Parameter headerValue: The value of the request header.
    public func setRequestHeader(_ headerName: Swift.String, _ headerValue: Swift.String) throws {
        try _iwebSocket.setRequestHeader(headerName, headerValue)
    }

    /// Closes the StreamWebSocket and indicates a reason for the closure.
    /// - Parameter code: Status code indicating the reason for closure.
    /// - Parameter reason: Optional UTF-8-encoded data with additional information about the closure.
    public func close(_ code: Swift.UInt16, _ reason: Swift.String) throws {
        try _iwebSocket.closeWithStatus(code, reason)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the StreamWebSocket and sends an empty close frame to the server.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Networking.Sockets.IStreamWebSocket2 members

    /// Occurs when a new StreamWebSocket connection to a secured server URI (**wss:** protocol) is being validated. Handle this event if you want to implement custom server validation for the connection.
    public func serverCustomValidationRequested(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsNetworkingSockets_StreamWebSocket?, WindowsNetworkingSockets_WebSocketServerCustomValidationRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _istreamWebSocket2.add_ServerCustomValidationRequested(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: serverCustomValidationRequested)
    }

    public func serverCustomValidationRequested(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _istreamWebSocket2.remove_ServerCustomValidationRequested(eventCookie)
    }

    // MARK: Implementation details

    private var _iwebSocket_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocket>? = nil

    internal var _iwebSocket: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IWebSocket> {
        get throws {
            try _iwebSocket_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IWebSocket.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IWebSocket.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _istreamWebSocket2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocket2>? = nil

    internal var _istreamWebSocket2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocket2> {
        get throws {
            try _istreamWebSocket2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocket2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingSockets_IStreamWebSocket2.self)
            }
        }
    }

    deinit {
        _iwebSocket_storage?.release()
        _iclosable_storage?.release()
        _istreamWebSocket2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Sockets.StreamWebSocket", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}