// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Renders a series of images to selected lamp indexes on the device.
public final class WindowsDevicesLightsEffects_LampArrayBitmapEffect: WindowsRuntime.WinRTImport<WindowsDevicesLightsEffects_LampArrayBitmapEffectProjection>, WindowsDevicesLightsEffects_ILampArrayEffectProtocol {
    // MARK: Windows.Devices.Lights.Effects.ILampArrayBitmapEffectFactory members

    public convenience init(_ lampArray: WindowsDevicesLights_LampArray?, _ lampIndexes: [Swift.Int32]) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ilampArrayBitmapEffectFactory.createInstance(lampArray, lampIndexes)))
    }

    // MARK: Windows.Devices.Lights.Effects.ILampArrayBitmapEffect members

    /// Gets or sets the duration of the effect.
    /// - Returns: Default value is 0.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets the duration of the effect.
    /// - Returns: Default value is 0.
    public func duration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Duration(value)
    }

    /// Gets or sets the duration to delay before starting the effect.
    /// - Returns: Default value is 0.
    public var startDelay: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_StartDelay()
        }
    }

    /// Gets or sets the duration to delay before starting the effect.
    /// - Returns: Default value is 0.
    public func startDelay(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_StartDelay(value)
    }

    /// Gets the most suitable image size for the caller selected lamp indexes that results in minimal scaling/distortion.
    /// - Returns: The image size.
    public var suggestedBitmapSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_SuggestedBitmapSize()
        }
    }

    /// Gets or sets the interval between the triggering of the BitmapRequested event. The supplied image will be displayed until the event is next triggered.
    /// - Returns: Time interval between updates. Default value is 0.
    public var updateInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_UpdateInterval()
        }
    }

    /// Gets or sets the interval between the triggering of the BitmapRequested event. The supplied image will be displayed until the event is next triggered.
    /// - Returns: Time interval between updates. Default value is 0.
    public func updateInterval(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_UpdateInterval(value)
    }

    /// Event triggered by the system to indicate a new image should be supplied to the effect.
    public func bitmapRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesLightsEffects_LampArrayBitmapEffect?, WindowsDevicesLightsEffects_LampArrayBitmapRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BitmapRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: bitmapRequested)
    }

    public func bitmapRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BitmapRequested(token)
    }

    // MARK: Windows.Devices.Lights.Effects.ILampArrayEffect members

    /// Gets or sets the global precedence (across all playlists) for two effects that modify the same lamp (on the same LampArray ).
    /// - Returns: Default value is 0.
    public var zindex: Swift.Int32 {
        get throws {
            try _ilampArrayEffect.get_ZIndex()
        }
    }

    /// Gets or sets the global precedence (across all playlists) for two effects that modify the same lamp (on the same LampArray ).
    /// - Returns: Default value is 0.
    public func zindex(_ value: Swift.Int32) throws {
        try _ilampArrayEffect.put_ZIndex(value)
    }

    // MARK: Implementation details

    private var _ilampArrayEffect_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect>? = nil

    internal var _ilampArrayEffect: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect> {
        get throws {
            try _ilampArrayEffect_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect.iid).cast(to: CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect.self)
            }
        }
    }

    deinit {
        _ilampArrayEffect_storage?.release()
    }

    private static var _ilampArrayBitmapEffectFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBitmapEffectFactory>? = nil

    internal static var _ilampArrayBitmapEffectFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBitmapEffectFactory> {
        get throws {
            try _ilampArrayBitmapEffectFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Lights.Effects.LampArrayBitmapEffect", id: CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBitmapEffectFactory.iid)
            }
        }
    }
}