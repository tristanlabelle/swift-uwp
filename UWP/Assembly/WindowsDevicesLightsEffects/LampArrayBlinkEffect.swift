// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Blinks lamp/s a color for a specific duration.  Timing of attack/sustain/decay phases can be defined.
public final class WindowsDevicesLightsEffects_LampArrayBlinkEffect: WindowsRuntime.WinRTImport<WindowsDevicesLightsEffects_LampArrayBlinkEffectProjection>, WindowsDevicesLightsEffects_ILampArrayEffectProtocol {
    // MARK: Windows.Devices.Lights.Effects.ILampArrayBlinkEffectFactory members

    public convenience init(_ lampArray: WindowsDevicesLights_LampArray?, _ lampIndexes: [Swift.Int32]) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ilampArrayBlinkEffectFactory.createInstance(lampArray, lampIndexes)))
    }

    // MARK: Windows.Devices.Lights.Effects.ILampArrayBlinkEffect members

    /// Gets or sets the time spent attacking/ramping-up from off/Black to peak intensity.
    /// - Returns: Default value is 0.
    public var attackDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_AttackDuration()
        }
    }

    /// Gets or sets the time spent attacking/ramping-up from off/Black to peak intensity.
    /// - Returns: Default value is 0.
    public func attackDuration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_AttackDuration(value)
    }

    /// Gets or sets the color of peak intensity for the effect. Duration color is visible defined by SustainDuration.
    /// - Returns: Default is Black
    public var color: WindowsUI_Color {
        get throws {
            try _interop.get_Color()
        }
    }

    /// Gets or sets the color of peak intensity for the effect. Duration color is visible defined by SustainDuration.
    /// - Returns: Default is Black
    public func color(_ value: WindowsUI_Color) throws {
        try _interop.put_Color(value)
    }

    /// Gets or sets the time spent decaying/ramping-down from peak intensity to off/Black.
    /// - Returns: Default value is 0.
    public var decayDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_DecayDuration()
        }
    }

    /// Gets or sets the time spent decaying/ramping-down from peak intensity to off/Black.
    /// - Returns: Default value is 0.
    public func decayDuration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_DecayDuration(value)
    }

    /// Number of occurrences this effect will play.
    /// - Returns: Default value is 0.
    public var occurrences: Swift.Int32 {
        get throws {
            try _interop.get_Occurrences()
        }
    }

    /// Number of occurrences this effect will play.
    /// - Returns: Default value is 0.
    public func occurrences(_ value: Swift.Int32) throws {
        try _interop.put_Occurrences(value)
    }

    /// Gets or sets the delay between effect repetitions.
    /// - Returns: Default value is 0.
    public var repetitionDelay: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_RepetitionDelay()
        }
    }

    /// Gets or sets the delay between effect repetitions.
    /// - Returns: Default value is 0.
    public func repetitionDelay(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_RepetitionDelay(value)
    }

    /// Gets or sets the repetition behavior of the effect.
    /// - Returns: Default is Occurrences
    public var repetitionMode: WindowsDevicesLightsEffects_LampArrayRepetitionMode {
        get throws {
            try _interop.get_RepetitionMode()
        }
    }

    /// Gets or sets the repetition behavior of the effect.
    /// - Returns: Default is Occurrences
    public func repetitionMode(_ value: WindowsDevicesLightsEffects_LampArrayRepetitionMode) throws {
        try _interop.put_RepetitionMode(value)
    }

    /// Gets or sets the duration to delay before starting the effect.
    /// - Returns: The time value to delay the start of an effect. Default value is 0.
    public var startDelay: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_StartDelay()
        }
    }

    /// Gets or sets the duration to delay before starting the effect.
    /// - Returns: The time value to delay the start of an effect. Default value is 0.
    public func startDelay(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_StartDelay(value)
    }

    /// Gets or sets the time spent displaying peak intensity for the effect.
    /// - Returns: Time value of time spent displaying peak intensity of an effect. Default value is 0.
    public var sustainDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_SustainDuration()
        }
    }

    /// Gets or sets the time spent displaying peak intensity for the effect.
    /// - Returns: Time value of time spent displaying peak intensity of an effect. Default value is 0.
    public func sustainDuration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_SustainDuration(value)
    }

    // MARK: Windows.Devices.Lights.Effects.ILampArrayEffect members

    /// Gets or sets the global precedence (across all playlists) for two effects that modify the same lamp (on the same LampArray ).
    /// - Returns: Global precedence value. Default value is 0.
    public var zindex: Swift.Int32 {
        get throws {
            try _ilampArrayEffect.get_ZIndex()
        }
    }

    /// Gets or sets the global precedence (across all playlists) for two effects that modify the same lamp (on the same LampArray ).
    /// - Returns: Global precedence value. Default value is 0.
    public func zindex(_ value: Swift.Int32) throws {
        try _ilampArrayEffect.put_ZIndex(value)
    }

    // MARK: Implementation details

    private var _ilampArrayEffect_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect>? = nil

    internal var _ilampArrayEffect: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect> {
        get throws {
            try _ilampArrayEffect_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect.iid).cast(to: CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayEffect.self)
            }
        }
    }

    deinit {
        _ilampArrayEffect_storage?.release()
    }

    private static var _ilampArrayBlinkEffectFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBlinkEffectFactory>? = nil

    internal static var _ilampArrayBlinkEffectFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBlinkEffectFactory> {
        get throws {
            try _ilampArrayBlinkEffectFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Lights.Effects.LampArrayBlinkEffect", id: CWinRT.SWRT_WindowsDevicesLightsEffects_ILampArrayBlinkEffectFactory.iid)
            }
        }
    }
}