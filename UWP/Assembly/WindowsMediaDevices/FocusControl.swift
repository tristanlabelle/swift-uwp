// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for controlling the focus settings on a capture device.
public final class WindowsMediaDevices_FocusControl: WindowsRuntime.WinRTImport<WindowsMediaDevices_FocusControlProjection> {
    // MARK: Windows.Media.Devices.IFocusControl members

    /// Gets the maximum focus length.
    /// - Returns: The maximum focus.
    public var max: Swift.UInt32 {
        get throws {
            try _interop.get_Max()
        }
    }

    /// Gets the minimum focus length.
    /// - Returns: The minimum focus length.
    public var min: Swift.UInt32 {
        get throws {
            try _interop.get_Min()
        }
    }

    /// Gets the focus preset.
    /// - Returns: The focus preset.
    public var preset: WindowsMediaDevices_FocusPreset {
        get throws {
            try _interop.get_Preset()
        }
    }

    /// Gets the smallest focus increment supported by the capture device.
    /// - Returns: The smallest focus increment.
    public var step: Swift.UInt32 {
        get throws {
            try _interop.get_Step()
        }
    }

    /// Gets a value that specifies if the capture device supports the focus control.
    /// - Returns: **true** if the capture device supports the FocusControl; otherwise, **false**.
    public var supported: Swift.Bool {
        get throws {
            try _interop.get_Supported()
        }
    }

    /// Gets the focus presets that the capture device supports.
    /// - Returns: The supported focus presets.
    public var supportedPresets: WindowsFoundationCollections_IVectorView<WindowsMediaDevices_FocusPreset> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedPresets())
        }
    }

    /// Gets the current value that the focus is set to.
    /// - Returns: The value that the focus is set to. The minimum and maximum values for the focus are specified by Min and Max.
    public var value: Swift.UInt32 {
        get throws {
            try _interop.get_Value()
        }
    }

    /// Asynchronously sets the focus Preset.
    /// - Parameter preset: The focus preset to set the Preset property to.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func setPresetAsync(_ preset: WindowsMediaDevices_FocusPreset) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setPresetAsync(preset))
    }

    /// Asynchronously sets the focus Preset, specifying if the operation must complete before the device is focused.
    /// - Parameter preset: The focus preset to set the Preset property to.
    /// - Parameter completeBeforeFocus: Specifies if the asynchronous operation must complete before the device is focused.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func setPresetAsync(_ preset: WindowsMediaDevices_FocusPreset, _ completeBeforeFocus: Swift.Bool) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setPresetWithCompletionOptionAsync(preset, completeBeforeFocus))
    }

    /// Asynchronously sets the focus Value.
    /// - Parameter focus: The value to set the focus to. The minimum and maximum values are specified by Min and Max.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func setValueAsync(_ focus: Swift.UInt32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setValueAsync(focus))
    }

    /// Asynchronously focuses the device.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func focusAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.focusAsync())
    }

    // MARK: Windows.Media.Devices.IFocusControl2 members

    /// Gets a value that specifics if the capture device supports the FocusChanged event.
    /// - Returns: **true** if the focus changed event is supported; otherwise, **false**.
    public var focusChangedSupported: Swift.Bool {
        get throws {
            try _ifocusControl2.get_FocusChangedSupported()
        }
    }

    /// Gets a MediaCaptureFocusState value indicating the current focus state of the capture device.
    /// - Returns: A value indicating the current focus state of the capture device.
    public var focusState: WindowsMediaDevices_MediaCaptureFocusState {
        get throws {
            try _ifocusControl2.get_FocusState()
        }
    }

    /// Gets the capture device's current focus mode.
    /// - Returns: The capture device's current focus mode.
    public var mode: WindowsMediaDevices_FocusMode {
        get throws {
            try _ifocusControl2.get_Mode()
        }
    }

    /// Gets a list of values indicating the manual focus distances that are supported by the capture device.
    /// - Returns: A list of values indicating the manual focus distances that are supported by the capture device.
    public var supportedFocusDistances: WindowsFoundationCollections_IVectorView<WindowsMediaDevices_ManualFocusDistance> {
        get throws {
            try COM.NullResult.unwrap(_ifocusControl2.get_SupportedFocusDistances())
        }
    }

    /// Gets a list of values indicating the focus modes that are supported by the capture device.
    /// - Returns: A list of values indicating the focus modes that are supported by the capture device.
    public var supportedFocusModes: WindowsFoundationCollections_IVectorView<WindowsMediaDevices_FocusMode> {
        get throws {
            try COM.NullResult.unwrap(_ifocusControl2.get_SupportedFocusModes())
        }
    }

    /// Gets a list of values indicating the auto focus ranges that are supported by the capture device.
    /// - Returns: A list of values indicating the auto focus ranges that are supported by the capture device.
    public var supportedFocusRanges: WindowsFoundationCollections_IVectorView<WindowsMediaDevices_AutoFocusRange> {
        get throws {
            try COM.NullResult.unwrap(_ifocusControl2.get_SupportedFocusRanges())
        }
    }

    /// Gets a value that indicates whether WaitForFocus is supported by the capture device.
    /// - Returns: A value indicating whether WaitForFocus is supported by the capture device.
    public var waitForFocusSupported: Swift.Bool {
        get throws {
            try _ifocusControl2.get_WaitForFocusSupported()
        }
    }

    /// Unlocks the capture device's focus if it has previously been locked with a call to LockAsync.
    /// - Returns: An asynchronous action.
    public func unlockAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifocusControl2.unlockAsync())
    }

    /// Locks the capture device's focus.
    /// - Returns: An asynchronous action.
    public func lockAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifocusControl2.lockAsync())
    }

    /// Configures the FocusControl object with values specified in the provided FocusSettings object.
    /// - Parameter settings: The focus settings to use to configure the FocusControl object.
    public func configure(_ settings: WindowsMediaDevices_FocusSettings?) throws {
        try _ifocusControl2.configure(settings)
    }

    // MARK: Implementation details

    private var _ifocusControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IFocusControl2>? = nil

    internal var _ifocusControl2: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IFocusControl2> {
        get throws {
            try _ifocusControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IFocusControl2.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IFocusControl2.self)
            }
        }
    }

    deinit {
        _ifocusControl2_storage?.release()
    }
}