// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for controlling the ISO film speed settings on a capture device.
public final class WindowsMediaDevices_IsoSpeedControl: WindowsRuntime.WinRTImport<WindowsMediaDevices_IsoSpeedControlProjection> {
    // MARK: Windows.Media.Devices.IIsoSpeedControl members

    /// Gets the ISO film speed preset.
    /// - Returns: The ISO speed preset.
    public var preset: WindowsMediaDevices_IsoSpeedPreset {
        get throws {
            try _interop.get_Preset()
        }
    }

    /// Gets a value the specifies if the capture device supports the ISO speed control.
    /// - Returns: **true** if the ISO control is supported; otherwise, **false**.
    public var supported: Swift.Bool {
        get throws {
            try _interop.get_Supported()
        }
    }

    /// Gets the ISO presets that the capture device supports.
    /// - Returns: The supported ISO presets.
    public var supportedPresets: WindowsFoundationCollections_IVectorView<WindowsMediaDevices_IsoSpeedPreset> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedPresets())
        }
    }

    /// Asynchronously sets the ISO film speed Preset.
    /// - Parameter preset: The ISO preset value to set the Preset property to.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func setPresetAsync(_ preset: WindowsMediaDevices_IsoSpeedPreset) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setPresetAsync(preset))
    }

    // MARK: Windows.Media.Devices.IIsoSpeedControl2 members

    /// Gets a value indicating whether auto ISO speed is enabled.
    /// - Returns: A value indicating whether auto ISO speed is enabled.
    public var auto: Swift.Bool {
        get throws {
            try _iisoSpeedControl2.get_Auto()
        }
    }

    /// Gets the maximum ISO speed supported by the capture device.
    /// - Returns: The maximum ISO speed supported by the capture device.
    public var max: Swift.UInt32 {
        get throws {
            try _iisoSpeedControl2.get_Max()
        }
    }

    /// Gets the minimum ISO speed supported by the capture device.
    /// - Returns: The minimum ISO speed supported by the capture device.
    public var min: Swift.UInt32 {
        get throws {
            try _iisoSpeedControl2.get_Min()
        }
    }

    /// Gets the smallest ISO speed increment supported by the capture device.
    /// - Returns: The smallest ISO speed increment supported by the capture device.
    public var step: Swift.UInt32 {
        get throws {
            try _iisoSpeedControl2.get_Step()
        }
    }

    /// Gets the current ISO speed value.
    /// - Returns: The current ISO speed value.
    public var value: Swift.UInt32 {
        get throws {
            try _iisoSpeedControl2.get_Value()
        }
    }

    /// Sets the ISO speed value.
    /// - Parameter isoSpeed: The ISO speed value.
    /// - Returns: An asynchronous action.
    public func setValueAsync(_ isoSpeed: Swift.UInt32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iisoSpeedControl2.setValueAsync(isoSpeed))
    }

    /// Sets the ISO speed to automatic.
    /// - Returns: An asynchronous action.
    public func setAutoAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iisoSpeedControl2.setAutoAsync())
    }

    // MARK: Implementation details

    private var _iisoSpeedControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IIsoSpeedControl2>? = nil

    internal var _iisoSpeedControl2: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IIsoSpeedControl2> {
        get throws {
            try _iisoSpeedControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IIsoSpeedControl2.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IIsoSpeedControl2.self)
            }
        }
    }

    deinit {
        _iisoSpeedControl2_storage?.release()
    }
}