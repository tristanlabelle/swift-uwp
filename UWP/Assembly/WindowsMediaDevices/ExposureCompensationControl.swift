// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for modifying exposure levels of captured photos.
public final class WindowsMediaDevices_ExposureCompensationControl: WindowsRuntime.WinRTImport<WindowsMediaDevices_ExposureCompensationControlProjection> {
    // MARK: Windows.Media.Devices.IExposureCompensationControl members

    /// Gets the maximum exposure time.
    /// - Returns: The maximum exposure time.
    public var max: Swift.Float {
        get throws {
            try _interop.get_Max()
        }
    }

    /// Gets the minimum exposure time.
    /// - Returns: The minimum exposure time.
    public var min: Swift.Float {
        get throws {
            try _interop.get_Min()
        }
    }

    /// Gets the smallest exposure compensation increment supported by the capture device.
    /// - Returns: The smallest exposure compensation increment.
    public var step: Swift.Float {
        get throws {
            try _interop.get_Step()
        }
    }

    /// Gets a value that specifies if the capture device supports the exposure compensation control.
    /// - Returns: **true** if the exposure compensation control is supported; otherwise, **false**.
    public var supported: Swift.Bool {
        get throws {
            try _interop.get_Supported()
        }
    }

    /// Gets the exposure compensation level.
    /// - Returns: The exposure time.
    public var value: Swift.Float {
        get throws {
            try _interop.get_Value()
        }
    }

    /// Asynchronously sets the exposure compensation.
    /// - Parameter value: The exposure compensation level to set the Value property to. The minimum and maximum values are specified by Min and Max.
    /// - Returns: The object that is used to control the asynchronous operation.
    public func setValueAsync(_ value: Swift.Float) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setValueAsync(value))
    }

    // MARK: Implementation details
}