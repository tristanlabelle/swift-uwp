// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Controls device settings on the camera.
public final class WindowsMediaDevices_VideoDeviceController: WindowsRuntime.WinRTImport<WindowsMediaDevices_VideoDeviceControllerProjection>, WindowsMediaDevices_IMediaDeviceControllerProtocol {
    // MARK: Windows.Media.Devices.IVideoDeviceController members

    /// Gets a MediaDeviceControl object that can be used to get or set the whether back-light compensation is enabled on the camera.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the back-light compensation.
    public var backlightCompensation: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BacklightCompensation())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the brightness level on the camera.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the brightness.
    public var brightness: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Brightness())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the contrast level on the camera.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the contrast.
    public var contrast: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Contrast())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's exposure time.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the exposure time.
    public var exposure: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Exposure())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's focus setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the focus.
    public var focus: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Focus())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's hue setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the hue.
    public var hue: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Hue())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's pan setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the pan.
    public var pan: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Pan())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's roll setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the roll.
    public var roll: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Roll())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's tilt setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the tilt.
    public var tilt: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Tilt())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the white balance on the camera.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the white balance.
    public var whiteBalance: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WhiteBalance())
        }
    }

    /// Gets a MediaDeviceControl object that can be used to get or set the camera's zoom setting.
    /// - Returns: A MediaDeviceControl object that provides methods to get and set the zoom.
    public var zoom: WindowsMediaDevices_MediaDeviceControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Zoom())
        }
    }

    /// Sets the local power line frequency.
    /// - Parameter value: The power line frequency.
    /// - Returns: Returns true if the method succeeded, or false otherwise.
    public func trySetPowerlineFrequency(_ value: WindowsMediaCapture_PowerlineFrequency) throws -> Swift.Bool {
        try _interop.trySetPowerlineFrequency(value)
    }

    /// Gets the local power line frequency.
    /// - Parameter value: The power line frequency.
    /// - Returns: Returns true if the method succeeded, or false otherwise.
    public func tryGetPowerlineFrequency(_ value: inout WindowsMediaCapture_PowerlineFrequency) throws -> Swift.Bool {
        try _interop.tryGetPowerlineFrequency(&value)
    }

    // MARK: Windows.Media.Devices.IMediaDeviceController members

    /// Gets a list of the supported encoding properties for the video device.
    /// - Parameter mediaStreamType: The type of media stream for which to get the properties.
    /// - Returns: A list of the supported encoding properties.
    public func getAvailableMediaStreamProperties(_ mediaStreamType: WindowsMediaCapture_MediaStreamType) throws -> WindowsFoundationCollections_IVectorView<WindowsMediaMediaProperties_IMediaEncodingProperties?> {
        try COM.NullResult.unwrap(_imediaDeviceController.getAvailableMediaStreamProperties(mediaStreamType))
    }

    /// Gets the encoding properties for the specified media stream type for the video device.
    /// - Parameter mediaStreamType: The type of media stream for which to get the properties.
    /// - Returns: The encoding properties.
    public func getMediaStreamProperties(_ mediaStreamType: WindowsMediaCapture_MediaStreamType) throws -> WindowsMediaMediaProperties_IMediaEncodingProperties {
        try COM.NullResult.unwrap(_imediaDeviceController.getMediaStreamProperties(mediaStreamType))
    }

    /// Sets the encoding properties asynchronously for the specified media stream type for the video device.
    /// - Parameter mediaStreamType: The type of media stream for which to set the properties.
    /// - Parameter mediaEncodingProperties: The encoding properties to set.
    /// - Returns: An IAsyncAction object that is used to control the asynchronous operation.
    public func setMediaStreamPropertiesAsync(_ mediaStreamType: WindowsMediaCapture_MediaStreamType, _ mediaEncodingProperties: WindowsMediaMediaProperties_IMediaEncodingProperties?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaDeviceController.setMediaStreamPropertiesAsync(mediaStreamType, mediaEncodingProperties))
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController members

    /// Sets the value of the property with the specified ID on the capture device driver. You can use this method to set properties that are specific to a particular camera.
    /// - Parameter propertyId: The identifier of the property for which the value is set.
    /// - Parameter propertyValue: The new value of the property.
    public func setDeviceProperty(_ propertyId: Swift.String, _ propertyValue: WindowsRuntime.IInspectable?) throws {
        try _iadvancedVideoCaptureDeviceController.setDeviceProperty(propertyId, propertyValue)
    }

    /// Gets the value of the property with the specified ID from the capture device driver. You can use this method to query properties that are specific to a particular camera.
    /// - Parameter propertyId: The identifier of the property for which the value is retrieved.
    /// - Returns: The property value.
    public func getDeviceProperty(_ propertyId: Swift.String) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController.getDeviceProperty(propertyId))
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController2 members

    /// Gets the exposure compensation control for this video device.
    /// - Returns: The exposure compensation control
    public var exposureCompensationControl: WindowsMediaDevices_ExposureCompensationControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_ExposureCompensationControl())
        }
    }

    /// Gets the exposure control for this video device.
    /// - Returns: The exposure control.
    public var exposureControl: WindowsMediaDevices_ExposureControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_ExposureControl())
        }
    }

    /// Gets the flash control for this video device.
    /// - Returns: The flash control.
    public var flashControl: WindowsMediaDevices_FlashControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_FlashControl())
        }
    }

    /// Gets the focus control for this video device.
    /// - Returns: The focus control.
    public var focusControl: WindowsMediaDevices_FocusControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_FocusControl())
        }
    }

    /// Gets the ISO film speed control for this video device.
    /// - Returns: The ISO film speed control.
    public var isoSpeedControl: WindowsMediaDevices_IsoSpeedControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_IsoSpeedControl())
        }
    }

    /// Gets the low shutter lag photo control for this video device.
    /// - Returns: The low shutter lag photo control.
    public var lowLagPhoto: WindowsMediaDevices_LowLagPhotoControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_LowLagPhoto())
        }
    }

    /// Gets the low shutter lag photo sequence control for this video device.
    /// - Returns: The photo sequence control.
    public var lowLagPhotoSequence: WindowsMediaDevices_LowLagPhotoSequenceControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_LowLagPhotoSequence())
        }
    }

    /// Gets or sets the primary use for the device.
    /// - Returns: The primary use for the device.
    public var primaryUse: WindowsMediaDevices_CaptureUse {
        get throws {
            try _iadvancedVideoCaptureDeviceController2.get_PrimaryUse()
        }
    }

    /// Gets or sets the primary use for the device.
    /// - Returns: The primary use for the device.
    public func primaryUse(_ value: WindowsMediaDevices_CaptureUse) throws {
        try _iadvancedVideoCaptureDeviceController2.put_PrimaryUse(value)
    }

    /// Gets the regions of interest control for this video device.
    /// - Returns: The regions of interest control.
    public var regionsOfInterestControl: WindowsMediaDevices_RegionsOfInterestControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_RegionsOfInterestControl())
        }
    }

    /// Gets the scene mode control for this video device.
    /// - Returns: The scene mode control.
    public var sceneModeControl: WindowsMediaDevices_SceneModeControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_SceneModeControl())
        }
    }

    /// Gets the torch control for this video device.
    /// - Returns: The torch control.
    public var torchControl: WindowsMediaDevices_TorchControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_TorchControl())
        }
    }

    /// Gets the white balance control for this video device.
    /// - Returns: The white balance control.
    public var whiteBalanceControl: WindowsMediaDevices_WhiteBalanceControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController2.get_WhiteBalanceControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController3 members

    /// Gets the photo confirmation control for this video device.
    /// - Returns: The photo confirmation control for this video device.
    public var photoConfirmationControl: WindowsMediaDevices_PhotoConfirmationControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController3.get_PhotoConfirmationControl())
        }
    }

    /// Gets the VariablePhotoSequenceController associated with the VideoDeviceController.
    /// - Returns: The VariablePhotoSequenceController associated with the VideoDeviceController.
    public var variablePhotoSequenceController: WindowsMediaDevicesCore_VariablePhotoSequenceController {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController3.get_VariablePhotoSequenceController())
        }
    }

    /// Gets the ZoomControl associated with the VideoDeviceController.
    /// - Returns: The ZoomControl associated with the VideoDeviceController.
    public var zoomControl: WindowsMediaDevices_ZoomControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController3.get_ZoomControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController4 members

    /// Gets the advanced photo capture control for this video device.
    /// - Returns: The advanced photo capture control
    public var advancedPhotoControl: WindowsMediaDevices_AdvancedPhotoControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController4.get_AdvancedPhotoControl())
        }
    }

    /// Gets or sets a value that indicates the optimizations the capture device should use to prioritize high quality picture, low latency, or low power consumption during video capture.
    /// - Returns: A value that indicates the optimizations the capture device should use.
    public var desiredOptimization: WindowsMediaDevices_MediaCaptureOptimization {
        get throws {
            try _iadvancedVideoCaptureDeviceController4.get_DesiredOptimization()
        }
    }

    /// Gets or sets a value that indicates the optimizations the capture device should use to prioritize high quality picture, low latency, or low power consumption during video capture.
    /// - Returns: A value that indicates the optimizations the capture device should use.
    public func desiredOptimization(_ value: WindowsMediaDevices_MediaCaptureOptimization) throws {
        try _iadvancedVideoCaptureDeviceController4.put_DesiredOptimization(value)
    }

    /// Gets the ExposurePriorityVideoControl associated with the VideoDeviceController.
    /// - Returns: The ExposurePriorityVideoControl associated with the VideoDeviceController.
    public var exposurePriorityVideoControl: WindowsMediaDevices_ExposurePriorityVideoControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController4.get_ExposurePriorityVideoControl())
        }
    }

    /// Gets the HdrVideoControl associated with the VideoDeviceController. This allows you to enable and disable High Dynamic Range (HDR) video capture mode on devices that support it.
    /// - Returns: The HdrVideoControl associated with the VideoDeviceController.
    public var hdrVideoControl: WindowsMediaDevices_HdrVideoControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController4.get_HdrVideoControl())
        }
    }

    /// Gets the OpticalImageStabilizationControl associated with the VideoDeviceController.
    /// - Returns: The OpticalImageStabilizationControl associated with the VideoDeviceController.
    public var opticalImageStabilizationControl: WindowsMediaDevices_OpticalImageStabilizationControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController4.get_OpticalImageStabilizationControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController5 members

    /// Gets a string containing the identifier for the video device controller.
    /// - Returns: The identifier for the video device controller.
    public var id: Swift.String {
        get throws {
            try _iadvancedVideoCaptureDeviceController5.get_Id()
        }
    }

    public func getDevicePropertyById(_ propertyId: Swift.String, _ maxPropertyValueSize: Swift.UInt32?) throws -> WindowsMediaDevices_VideoDeviceControllerGetDevicePropertyResult {
        try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController5.getDevicePropertyById(propertyId, maxPropertyValueSize))
    }

    /// Sets the value of the property with the specified ID from the capture device driver, using an extended ID with custom header information and providing the value as an object.
    /// - Parameter propertyId: A byte array containing the extended identifier data.
    /// - Parameter propertyValue: An object representing the data to be assigned to the specified property.
    /// - Returns: A VideoDeviceControllerSetDevicePropertyStatus object describing the status of the operation.
    public func setDevicePropertyById(_ propertyId: Swift.String, _ propertyValue: WindowsRuntime.IInspectable?) throws -> WindowsMediaDevices_VideoDeviceControllerSetDevicePropertyStatus {
        try _iadvancedVideoCaptureDeviceController5.setDevicePropertyById(propertyId, propertyValue)
    }

    public func getDevicePropertyByExtendedId(_ extendedPropertyId: [Swift.UInt8], _ maxPropertyValueSize: Swift.UInt32?) throws -> WindowsMediaDevices_VideoDeviceControllerGetDevicePropertyResult {
        try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController5.getDevicePropertyByExtendedId(extendedPropertyId, maxPropertyValueSize))
    }

    /// Sets the value of the property with the specified ID from the capture device driver, using an extended ID with custom header information and providing the value as a byte array.
    /// - Parameter extendedPropertyId: A byte array containing the extended identifier data.
    /// - Parameter propertyValue: A byte array containing the data to be assigned to the specified property.
    /// - Returns: A VideoDeviceControllerSetDevicePropertyStatus object describing the status of the operation.
    public func setDevicePropertyByExtendedId(_ extendedPropertyId: [Swift.UInt8], _ propertyValue: [Swift.UInt8]) throws -> WindowsMediaDevices_VideoDeviceControllerSetDevicePropertyStatus {
        try _iadvancedVideoCaptureDeviceController5.setDevicePropertyByExtendedId(extendedPropertyId, propertyValue)
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController6 members

    /// Gets the VideoTemporalDenoisingControl associated with the VideoDeviceController. This allows you to enable and disable temporal denoising, which uses image data from adjacent frames to reduce the appearance of noise in captured video, on devices that support it.
    /// - Returns: The VideoTemporalDenoisingControl associated with the VideoDeviceController.
    public var videoTemporalDenoisingControl: WindowsMediaDevices_VideoTemporalDenoisingControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController6.get_VideoTemporalDenoisingControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController7 members

    /// Gets the infrared torch control for selected video device.
    /// - Returns: The infrared torch control.
    public var infraredTorchControl: WindowsMediaDevices_InfraredTorchControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController7.get_InfraredTorchControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController8 members

    public var panelBasedOptimizationControl: WindowsMediaDevices_PanelBasedOptimizationControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController8.get_PanelBasedOptimizationControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController9 members

    public var digitalWindowControl: WindowsMediaDevices_DigitalWindowControl {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController9.get_DigitalWindowControl())
        }
    }

    // MARK: Windows.Media.Devices.IAdvancedVideoCaptureDeviceController10 members

    public var cameraOcclusionInfo: WindowsMediaDevices_CameraOcclusionInfo {
        get throws {
            try COM.NullResult.unwrap(_iadvancedVideoCaptureDeviceController10.get_CameraOcclusionInfo())
        }
    }

    // MARK: Implementation details

    private var _imediaDeviceController_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IMediaDeviceController>? = nil

    internal var _imediaDeviceController: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IMediaDeviceController> {
        get throws {
            try _imediaDeviceController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IMediaDeviceController.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IMediaDeviceController.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController>? = nil

    internal var _iadvancedVideoCaptureDeviceController: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController> {
        get throws {
            try _iadvancedVideoCaptureDeviceController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController2>? = nil

    internal var _iadvancedVideoCaptureDeviceController2: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController2> {
        get throws {
            try _iadvancedVideoCaptureDeviceController2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController2.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController2.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController3>? = nil

    internal var _iadvancedVideoCaptureDeviceController3: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController3> {
        get throws {
            try _iadvancedVideoCaptureDeviceController3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController3.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController3.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController4>? = nil

    internal var _iadvancedVideoCaptureDeviceController4: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController4> {
        get throws {
            try _iadvancedVideoCaptureDeviceController4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController4.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController4.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController5_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController5>? = nil

    internal var _iadvancedVideoCaptureDeviceController5: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController5> {
        get throws {
            try _iadvancedVideoCaptureDeviceController5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController5.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController5.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController6_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController6>? = nil

    internal var _iadvancedVideoCaptureDeviceController6: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController6> {
        get throws {
            try _iadvancedVideoCaptureDeviceController6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController6.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController6.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController7_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController7>? = nil

    internal var _iadvancedVideoCaptureDeviceController7: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController7> {
        get throws {
            try _iadvancedVideoCaptureDeviceController7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController7.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController7.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController8_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController8>? = nil

    internal var _iadvancedVideoCaptureDeviceController8: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController8> {
        get throws {
            try _iadvancedVideoCaptureDeviceController8_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController8.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController8.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController9_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController9>? = nil

    internal var _iadvancedVideoCaptureDeviceController9: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController9> {
        get throws {
            try _iadvancedVideoCaptureDeviceController9_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController9.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController9.self)
            }
        }
    }

    private var _iadvancedVideoCaptureDeviceController10_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController10>? = nil

    internal var _iadvancedVideoCaptureDeviceController10: COM.COMInterop<CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController10> {
        get throws {
            try _iadvancedVideoCaptureDeviceController10_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController10.iid).cast(to: CWinRT.SWRT_WindowsMediaDevices_IAdvancedVideoCaptureDeviceController10.self)
            }
        }
    }

    deinit {
        _imediaDeviceController_storage?.release()
        _iadvancedVideoCaptureDeviceController_storage?.release()
        _iadvancedVideoCaptureDeviceController2_storage?.release()
        _iadvancedVideoCaptureDeviceController3_storage?.release()
        _iadvancedVideoCaptureDeviceController4_storage?.release()
        _iadvancedVideoCaptureDeviceController5_storage?.release()
        _iadvancedVideoCaptureDeviceController6_storage?.release()
        _iadvancedVideoCaptureDeviceController7_storage?.release()
        _iadvancedVideoCaptureDeviceController8_storage?.release()
        _iadvancedVideoCaptureDeviceController9_storage?.release()
        _iadvancedVideoCaptureDeviceController10_storage?.release()
    }
}