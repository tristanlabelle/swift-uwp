// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for managing the low shutter lag photo sequence mode on the capture device.
public final class WindowsMediaDevices_LowLagPhotoSequenceControl: WindowsRuntime.WinRTImport<WindowsMediaDevices_LowLagPhotoSequenceControlProjection> {
    // MARK: Windows.Media.Devices.ILowLagPhotoSequenceControl members

    /// Gets or sets the desired size for thumbnails, which is the largest length of the image, either width or height.
    /// - Returns: The desired thumbnail size.
    public var desiredThumbnailSize: Swift.UInt32 {
        get throws {
            try _interop.get_DesiredThumbnailSize()
        }
    }

    /// Gets or sets the desired size for thumbnails, which is the largest length of the image, either width or height.
    /// - Returns: The desired thumbnail size.
    public func desiredThumbnailSize(_ value: Swift.UInt32) throws {
        try _interop.put_DesiredThumbnailSize(value)
    }

    /// Gets a value that specifies if hardware acceleration is supported for thumbnails in photo sequence mode.
    /// - Returns: **true** if hardware acceleration is supported for thumbnails in photo sequence mode; otherwise, **false**.
    public var hardwareAcceleratedThumbnailSupported: Swift.UInt32 {
        get throws {
            try _interop.get_HardwareAcceleratedThumbnailSupported()
        }
    }

    /// Gets the maximum number of past photos that can be stored.
    /// - Returns: The maximum number of past photos.
    public var maxPastPhotos: Swift.UInt32 {
        get throws {
            try _interop.get_MaxPastPhotos()
        }
    }

    /// Gets the maximum number of photos that can be taken per second.
    /// - Returns: The maximum number of photos per second.
    public var maxPhotosPerSecond: Swift.Float {
        get throws {
            try _interop.get_MaxPhotosPerSecond()
        }
    }

    /// Gets or sets a value that specifies the number of past photos to store.
    /// - Returns: The number of past photos to store. To determine the maximum number of past photos that can be stored, check the MaxPastPhotos property.
    public var pastPhotoLimit: Swift.UInt32 {
        get throws {
            try _interop.get_PastPhotoLimit()
        }
    }

    /// Gets or sets a value that specifies the number of past photos to store.
    /// - Returns: The number of past photos to store. To determine the maximum number of past photos that can be stored, check the MaxPastPhotos property.
    public func pastPhotoLimit(_ value: Swift.UInt32) throws {
        try _interop.put_PastPhotoLimit(value)
    }

    /// Gets or sets the number of photos that are taken per second.
    /// - Returns: The number of photos taken per second.
    public var photosPerSecondLimit: Swift.Float {
        get throws {
            try _interop.get_PhotosPerSecondLimit()
        }
    }

    /// Gets or sets the number of photos that are taken per second.
    /// - Returns: The number of photos taken per second.
    public func photosPerSecondLimit(_ value: Swift.Float) throws {
        try _interop.put_PhotosPerSecondLimit(value)
    }

    /// Gets a value that specifies if the capture device supports low shutter lag photo sequence mode.
    /// - Returns: **true** if photo sequence mode is supported; otherwise, **false**.
    public var supported: Swift.Bool {
        get throws {
            try _interop.get_Supported()
        }
    }

    /// Gets a value that enables and disables thumbnail support in photo sequence mode.
    /// - Returns: **true** if thumbnails are enabled; otherwise, **false**.
    public var thumbnailEnabled: Swift.Bool {
        get throws {
            try _interop.get_ThumbnailEnabled()
        }
    }

    /// Gets a value that enables and disables thumbnail support in photo sequence mode.
    /// - Returns: **true** if thumbnails are enabled; otherwise, **false**.
    public func thumbnailEnabled(_ value: Swift.Bool) throws {
        try _interop.put_ThumbnailEnabled(value)
    }

    /// Gets or sets the media format for the thumbnails.
    /// - Returns: The media format for the thumbnails.
    public var thumbnailFormat: WindowsMediaMediaProperties_MediaThumbnailFormat {
        get throws {
            try _interop.get_ThumbnailFormat()
        }
    }

    /// Gets or sets the media format for the thumbnails.
    /// - Returns: The media format for the thumbnails.
    public func thumbnailFormat(_ value: WindowsMediaMediaProperties_MediaThumbnailFormat) throws {
        try _interop.put_ThumbnailFormat(value)
    }

    /// Gets the highest frame rate supported when video and photos sequences are being captured concurrently.
    /// - Parameter captureProperties: The media encoding properties.
    /// - Returns: The highest concurrent frames per second.
    public func getHighestConcurrentFrameRate(_ captureProperties: WindowsMediaMediaProperties_IMediaEncodingProperties?) throws -> WindowsMediaMediaProperties_MediaRatio {
        try COM.NullResult.unwrap(_interop.getHighestConcurrentFrameRate(captureProperties))
    }

    /// Gets the current frame rate at which pictures can be taken.
    /// - Returns: The current frame rate.
    public func getCurrentFrameRate() throws -> WindowsMediaMediaProperties_MediaRatio {
        try COM.NullResult.unwrap(_interop.getCurrentFrameRate())
    }

    // MARK: Implementation details
}