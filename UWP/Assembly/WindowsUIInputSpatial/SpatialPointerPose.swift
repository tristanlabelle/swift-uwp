// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the available spatial pointer poses, such as the user's head gaze, eye gaze and each motion controller's pointer pose, for use in targeting hand gestures, motion controller presses, and speech interactions.
public final class WindowsUIInputSpatial_SpatialPointerPose: WindowsRuntime.WinRTImport<WindowsUIInputSpatial_SpatialPointerPoseProjection> {
    // MARK: Windows.UI.Input.Spatial.ISpatialPointerPose members

    /// Gets the user's head gaze for this timestamp.
    /// - Returns: The head gaze.
    public var head: WindowsPerceptionPeople_HeadPose {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Head())
        }
    }

    /// Gets the timestamp when the pointing rays are determined.
    /// - Returns: The timestamp.
    public var timestamp: WindowsPerception_PerceptionTimestamp {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Timestamp())
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialPointerPose2 members

    /// Gets the pointer pose for a particular spatial interaction source, such as a motion controller, at a given timestamp.
    /// - Parameter source: The spatial interaction source for which a pointer pose should be determined.
    /// - Returns: The interaction source pointer pose.
    public func tryGetInteractionSourcePose(_ source: WindowsUIInputSpatial_SpatialInteractionSource?) throws -> WindowsUIInputSpatial_SpatialPointerInteractionSourcePose {
        try COM.NullResult.unwrap(_ispatialPointerPose2.tryGetInteractionSourcePose(source))
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialPointerPose3 members

    /// Gets the user's eye gaze for this timestamp.
    /// - Returns: The eye gaze if supported by the current headset; otherwise, null.
    public var eyes: WindowsPerceptionPeople_EyesPose {
        get throws {
            try COM.NullResult.unwrap(_ispatialPointerPose3.get_Eyes())
        }
    }

    /// Gets whether the user's head gaze is being captured by system UI at the moment (preventing gaze-driven presses from being delivered to the view associated with this SpatialPointerPose ).
    /// - Returns: Whether head gaze is being captured by the system.
    public var isHeadCapturedBySystem: Swift.Bool {
        get throws {
            try _ispatialPointerPose3.get_IsHeadCapturedBySystem()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialPointerPoseStatics members

    /// Gets the head gaze and motion controller pointer poses for the specified timestamp.
    /// - Parameter coordinateSystem: The coordinate system in which to express the pointer poses.
    /// - Parameter timestamp: The timestamp, past or future.
    /// - Returns: The pointer poses, or null if the specified coordinate system cannot be located.
    public static func tryGetAtTimestamp(_ coordinateSystem: WindowsPerceptionSpatial_SpatialCoordinateSystem?, _ timestamp: WindowsPerception_PerceptionTimestamp?) throws -> WindowsUIInputSpatial_SpatialPointerPose {
        try COM.NullResult.unwrap(_ispatialPointerPoseStatics.tryGetAtTimestamp(coordinateSystem, timestamp))
    }

    // MARK: Implementation details

    private var _ispatialPointerPose2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose2>? = nil

    internal var _ispatialPointerPose2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose2> {
        get throws {
            try _ispatialPointerPose2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose2.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose2.self)
            }
        }
    }

    private var _ispatialPointerPose3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose3>? = nil

    internal var _ispatialPointerPose3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose3> {
        get throws {
            try _ispatialPointerPose3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose3.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPose3.self)
            }
        }
    }

    deinit {
        _ispatialPointerPose2_storage?.release()
        _ispatialPointerPose3_storage?.release()
    }

    private static var _ispatialPointerPoseStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPoseStatics>? = nil

    internal static var _ispatialPointerPoseStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPoseStatics> {
        get throws {
            try _ispatialPointerPoseStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Spatial.SpatialPointerPose", id: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialPointerPoseStatics.iid)
            }
        }
    }
}