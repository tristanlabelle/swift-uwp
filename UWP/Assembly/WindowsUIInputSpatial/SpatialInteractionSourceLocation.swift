// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the grip pose and pointer pose of a hand or motion controller.
public final class WindowsUIInputSpatial_SpatialInteractionSourceLocation: WindowsRuntime.WinRTImport<WindowsUIInputSpatial_SpatialInteractionSourceLocationProjection> {
    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation members

    /// Gets the grip pose position, representing the position of the user's hand, either directly or where it holds a motion controller.
    /// - Returns: The position.
    public var position: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>? {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets the velocity of a hand or motion controller.
    /// - Returns: The velocity.
    public var velocity: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>? {
        get throws {
            try _interop.get_Velocity()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation2 members

    /// Gets the grip pose orientation, representing the orientation of the user's hand as it holds a motion controller.
    /// - Returns: The orientation.
    public var orientation: WindowsFoundation_IReference<WindowsFoundationNumerics_Quaternion>? {
        get throws {
            try _ispatialInteractionSourceLocation2.get_Orientation()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceLocation3 members

    /// Gets the angular velocity of a hand or motion controller.
    /// - Returns: The angular velocity.
    public var angularVelocity: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>? {
        get throws {
            try _ispatialInteractionSourceLocation3.get_AngularVelocity()
        }
    }

    /// Gets the accuracy of an interaction source's positional tracking.
    /// - Returns: The position accuracy.
    public var positionAccuracy: WindowsUIInputSpatial_SpatialInteractionSourcePositionAccuracy {
        get throws {
            try _ispatialInteractionSourceLocation3.get_PositionAccuracy()
        }
    }

    /// Gets the pointer pose for a particular spatial interaction source, such as a motion controller, at a given timestamp.
    /// - Returns: The interaction source pointer pose.
    public var sourcePointerPose: WindowsUIInputSpatial_SpatialPointerInteractionSourcePose {
        get throws {
            try COM.NullResult.unwrap(_ispatialInteractionSourceLocation3.get_SourcePointerPose())
        }
    }

    // MARK: Implementation details

    private var _ispatialInteractionSourceLocation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation2>? = nil

    internal var _ispatialInteractionSourceLocation2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation2> {
        get throws {
            try _ispatialInteractionSourceLocation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation2.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation2.self)
            }
        }
    }

    private var _ispatialInteractionSourceLocation3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation3>? = nil

    internal var _ispatialInteractionSourceLocation3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation3> {
        get throws {
            try _ispatialInteractionSourceLocation3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation3.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceLocation3.self)
            }
        }
    }

    deinit {
        _ispatialInteractionSourceLocation2_storage?.release()
        _ispatialInteractionSourceLocation3_storage?.release()
    }
}