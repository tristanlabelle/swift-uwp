// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents one detected instance of a hand, motion controller, or speech source that can cause interactions and gestures.
public final class WindowsUIInputSpatial_SpatialInteractionSource: WindowsRuntime.WinRTImport<WindowsUIInputSpatial_SpatialInteractionSourceProjection> {
    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSource members

    /// Gets the identifier for the hand, motion controller, or speech source.
    /// - Returns: The ID.
    public var id: Swift.UInt32 {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the interaction source type.
    /// - Returns: The interaction source type.
    public var kind: WindowsUIInputSpatial_SpatialInteractionSourceKind {
        get throws {
            try _interop.get_Kind()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSource2 members

    /// Represents the specifics of a detected motion controller.
    /// - Returns: The motion controller, or null if the source is not a motion controller.
    public var controller: WindowsUIInputSpatial_SpatialInteractionController {
        get throws {
            try COM.NullResult.unwrap(_ispatialInteractionSource2.get_Controller())
        }
    }

    /// Gets whether the source supports grasps.
    /// - Returns: True for some motion controllers, and false for other interaction sources.
    public var isGraspSupported: Swift.Bool {
        get throws {
            try _ispatialInteractionSource2.get_IsGraspSupported()
        }
    }

    /// Gets whether the source supports Menu presses.
    /// - Returns: Whether the source supports Menu presses.
    public var isMenuSupported: Swift.Bool {
        get throws {
            try _ispatialInteractionSource2.get_IsMenuSupported()
        }
    }

    /// Gets whether the source can provide pointer poses.
    /// - Returns: Returns true for motion controllers that support positional tracking and false for other interaction sources.
    public var isPointingSupported: Swift.Bool {
        get throws {
            try _ispatialInteractionSource2.get_IsPointingSupported()
        }
    }

    /// Get the state of this source as of the specified timestamp.
    /// - Parameter timestamp: The time to query for the state of this interaction source.
    /// - Returns: The state.
    public func tryGetStateAtTimestamp(_ timestamp: WindowsPerception_PerceptionTimestamp?) throws -> WindowsUIInputSpatial_SpatialInteractionSourceState {
        try COM.NullResult.unwrap(_ispatialInteractionSource2.tryGetStateAtTimestamp(timestamp))
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSource3 members

    /// Gets whether the interaction source represents the user's left hand or right hand.
    /// - Returns: The handedness.
    public var handedness: WindowsUIInputSpatial_SpatialInteractionSourceHandedness {
        get throws {
            try _ispatialInteractionSource3.get_Handedness()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSource4 members

    /// Synchronously requests a HandMeshObserver to provide mesh updates for each frame that tracks the detected shape of a hand.
    /// - Returns: A hand mesh observer if this source supports hand meshes; otherwise, null.
    public func tryCreateHandMeshObserver() throws -> WindowsPerceptionPeople_HandMeshObserver {
        try COM.NullResult.unwrap(_ispatialInteractionSource4.tryCreateHandMeshObserver())
    }

    /// Requests a HandMeshObserver to provide mesh updates for each frame that tracks the detected shape of a hand.
    /// - Returns: An operation that triggers with a hand mesh observer (if this source supports hand meshes); otherwise, an operation that returns null.
    public func tryCreateHandMeshObserverAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsPerceptionPeople_HandMeshObserver?> {
        try COM.NullResult.unwrap(_ispatialInteractionSource4.tryCreateHandMeshObserverAsync())
    }

    // MARK: Implementation details

    private var _ispatialInteractionSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource2>? = nil

    internal var _ispatialInteractionSource2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource2> {
        get throws {
            try _ispatialInteractionSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource2.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource2.self)
            }
        }
    }

    private var _ispatialInteractionSource3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource3>? = nil

    internal var _ispatialInteractionSource3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource3> {
        get throws {
            try _ispatialInteractionSource3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource3.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource3.self)
            }
        }
    }

    private var _ispatialInteractionSource4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource4>? = nil

    internal var _ispatialInteractionSource4: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource4> {
        get throws {
            try _ispatialInteractionSource4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource4.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSource4.self)
            }
        }
    }

    deinit {
        _ispatialInteractionSource2_storage?.release()
        _ispatialInteractionSource3_storage?.release()
        _ispatialInteractionSource4_storage?.release()
    }
}