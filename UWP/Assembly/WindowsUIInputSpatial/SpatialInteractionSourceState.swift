// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a snapshot of the state of a spatial interaction source (hand, motion controller, or speech) at a given time.
public final class WindowsUIInputSpatial_SpatialInteractionSourceState: WindowsRuntime.WinRTImport<WindowsUIInputSpatial_SpatialInteractionSourceStateProjection> {
    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceState members

    /// Gets whether a hand or motion controller is experiencing any press.
    /// - Returns: Whether the source is experiencing any press.
    public var isPressed: Swift.Bool {
        get throws {
            try _interop.get_IsPressed()
        }
    }

    /// Gets advanced state of the interaction source.
    /// - Returns: The properties.
    public var properties: WindowsUIInputSpatial_SpatialInteractionSourceProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets the interaction source that this state describes.
    /// - Returns: The source.
    public var source: WindowsUIInputSpatial_SpatialInteractionSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets the timestamp at which this state snapshot was taken.
    /// - Returns: The timestamp.
    public var timestamp: WindowsPerception_PerceptionTimestamp {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Timestamp())
        }
    }

    /// Gets the available pointer poses, such as the user's head gaze, eye gaze and each motion controller's pointer pose, for the timestamp when this state snapshot was taken.
    /// - Parameter coordinateSystem: The coordinate system in which to express the pointer poses.
    /// - Returns: The pointer poses.
    public func tryGetPointerPose(_ coordinateSystem: WindowsPerceptionSpatial_SpatialCoordinateSystem?) throws -> WindowsUIInputSpatial_SpatialPointerPose {
        try COM.NullResult.unwrap(_interop.tryGetPointerPose(coordinateSystem))
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceState2 members

    /// Gets state specific to motion controllers.
    /// - Returns: The motion controller properties.
    public var controllerProperties: WindowsUIInputSpatial_SpatialInteractionControllerProperties {
        get throws {
            try COM.NullResult.unwrap(_ispatialInteractionSourceState2.get_ControllerProperties())
        }
    }

    /// Gets whether an input device detects a grasp/grab action (how users take direct action on objects in order to manipulate them).
    /// - Returns: True, if the source detects a grasp/grab action. Otherwise, false.
    public var isGrasped: Swift.Bool {
        get throws {
            try _ispatialInteractionSourceState2.get_IsGrasped()
        }
    }

    /// Gets whether a motion controller is experiencing a Menu press.
    /// - Returns: Whether the source is experiencing a Menu press.
    public var isMenuPressed: Swift.Bool {
        get throws {
            try _ispatialInteractionSourceState2.get_IsMenuPressed()
        }
    }

    /// Gets whether a hand or motion controller is experiencing a primary Select press.
    /// - Returns: Whether the source is experiencing a Select press.
    public var isSelectPressed: Swift.Bool {
        get throws {
            try _ispatialInteractionSourceState2.get_IsSelectPressed()
        }
    }

    /// Gets the amount to which a hand or motion controller is experiencing a primary Select press, as a value between 0.0 and 1.0.
    /// - Returns: The amount to which the source is experiencing a Select press.
    public var selectPressedValue: Swift.Double {
        get throws {
            try _ispatialInteractionSourceState2.get_SelectPressedValue()
        }
    }

    // MARK: Windows.UI.Input.Spatial.ISpatialInteractionSourceState3 members

    /// Gets the poses of the user's joints for this hand.
    /// - Returns: The poses of the user's hand joints if supported for this source; otherwise null.
    public func tryGetHandPose() throws -> WindowsPerceptionPeople_HandPose {
        try COM.NullResult.unwrap(_ispatialInteractionSourceState3.tryGetHandPose())
    }

    // MARK: Implementation details

    private var _ispatialInteractionSourceState2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState2>? = nil

    internal var _ispatialInteractionSourceState2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState2> {
        get throws {
            try _ispatialInteractionSourceState2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState2.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState2.self)
            }
        }
    }

    private var _ispatialInteractionSourceState3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState3>? = nil

    internal var _ispatialInteractionSourceState3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState3> {
        get throws {
            try _ispatialInteractionSourceState3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState3.iid).cast(to: CWinRT.SWRT_WindowsUIInputSpatial_ISpatialInteractionSourceState3.self)
            }
        }
    }

    deinit {
        _ispatialInteractionSourceState2_storage?.release()
        _ispatialInteractionSourceState3_storage?.release()
    }
}