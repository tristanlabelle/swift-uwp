// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A Bluetooth LE manufacturer-specific data section (one particular type of LE advertisement section). A Bluetooth LE advertisement packet can contain multiple instances of these BluetoothLEManufacturerData objects.
public final class WindowsDevicesBluetoothAdvertisement_BluetoothLEManufacturerData: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothAdvertisement_BluetoothLEManufacturerDataProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesBluetoothAdvertisement_BluetoothLEManufacturerDataProjection.self))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerDataFactory members

    public convenience init(_ companyId: Swift.UInt16, _ data: WindowsStorageStreams_IBuffer?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibluetoothLEManufacturerDataFactory.create(companyId, data)))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEManufacturerData members

    /// The Bluetooth LE company identifier code as defined by the Bluetooth Special Interest Group (SIG).
    /// - Returns: The Bluetooth LE company identifier code.
    public var companyId: Swift.UInt16 {
        get throws {
            try _interop.get_CompanyId()
        }
    }

    /// The Bluetooth LE company identifier code as defined by the Bluetooth Special Interest Group (SIG).
    /// - Returns: The Bluetooth LE company identifier code.
    public func companyId(_ value: Swift.UInt16) throws {
        try _interop.put_CompanyId(value)
    }

    /// Bluetooth LE manufacturer-specific section data.
    /// - Returns: Bluetooth LE manufacturer-specific section data.
    public var data: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Data())
        }
    }

    /// Bluetooth LE manufacturer-specific section data.
    /// - Returns: Bluetooth LE manufacturer-specific section data.
    public func data(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_Data(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEManufacturerData", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibluetoothLEManufacturerDataFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEManufacturerDataFactory>? = nil

    internal static var _ibluetoothLEManufacturerDataFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEManufacturerDataFactory> {
        get throws {
            try _ibluetoothLEManufacturerDataFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEManufacturerData", id: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEManufacturerDataFactory.iid)
            }
        }
    }
}