// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Some of the Bluetooth LE advertisement types defined in the Generic Access Profile (GAP) by the Bluetooth Special Interest Group (SIG).
public enum WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementDataTypes {
    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementDataTypesStatics members

    /// Section data type for the Bluetooth LE advertising interval.
    /// - Returns: The Bluetooth LE advertising interval.
    public static var advertisingInterval: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_AdvertisingInterval()
        }
    }

    /// Section data type for the Bluetooth LE advertising appearance.
    /// - Returns: The Bluetooth LE advertising appearance.
    public static var appearance: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_Appearance()
        }
    }

    /// Section data type for the Bluetooth LE complete local name.
    /// - Returns: The Bluetooth LE complete local name.
    public static var completeLocalName: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_CompleteLocalName()
        }
    }

    /// Section data type for the complete list of 128-bit Bluetooth LE service UUIDs
    /// - Returns: The complete list of 128-bit Bluetooth LE service UUIDs
    public static var completeService128BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_CompleteService128BitUuids()
        }
    }

    /// Section data type for the complete list of 16-bit Bluetooth LE service UUIDs
    /// - Returns: The complete list of 16-bit Bluetooth LE service UUIDs
    public static var completeService16BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_CompleteService16BitUuids()
        }
    }

    /// Section data type for the complete list of 32-bit Bluetooth LE service UUIDs
    /// - Returns: The complete list of 32-bit Bluetooth LE service UUIDs
    public static var completeService32BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_CompleteService32BitUuids()
        }
    }

    /// Section data type for a set of flags for internal use.
    /// - Returns: A set of flags for internal use.
    public static var flags: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_Flags()
        }
    }

    /// Section data type for an incomplete list of 128-bit Bluetooth LE service UUIDs.
    /// - Returns: An incomplete list of 128-bit Bluetooth LE service UUIDs.
    public static var incompleteService128BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_IncompleteService128BitUuids()
        }
    }

    /// Section data type for an incomplete list of 16-bit Bluetooth LE service UUIDs.
    /// - Returns: An incomplete list of 16-bit Bluetooth LE service UUIDs.
    public static var incompleteService16BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_IncompleteService16BitUuids()
        }
    }

    /// Section data type for an incomplete list of 32-bit Bluetooth LE service UUIDs.
    /// - Returns: An incomplete list of 32-bit Bluetooth LE service UUIDs.
    public static var incompleteService32BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_IncompleteService32BitUuids()
        }
    }

    /// Section data type for manufacturer-specific data for a Bluetooth LE advertisements.
    /// - Returns: Manufacturer-specific data for a Bluetooth LE advertisements.
    public static var manufacturerSpecificData: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ManufacturerSpecificData()
        }
    }

    /// Section data type for a list of public Bluetooth LE target addresses.
    /// - Returns: A list of public Bluetooth LE target addresses.
    public static var publicTargetAddress: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_PublicTargetAddress()
        }
    }

    /// Section data type for a list of random Bluetooth LE target addresses.
    /// - Returns: A list of random Bluetooth LE target addresses.
    public static var randomTargetAddress: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_RandomTargetAddress()
        }
    }

    /// Section data type for service data for 128-bit Bluetooth LE UUIDs.
    /// - Returns: Service data for 128-bit Bluetooth LE UUIDs.
    public static var serviceData128BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceData128BitUuids()
        }
    }

    /// Section data type for service data for 16-bit Bluetooth LE UUIDs.
    /// - Returns: Service data for 16-bit Bluetooth LE UUIDs.
    public static var serviceData16BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceData16BitUuids()
        }
    }

    /// Section data type for service data for 32-bit Bluetooth LE UUIDs..
    /// - Returns: Service data for 32-bit Bluetooth LE UUIDs.
    public static var serviceData32BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceData32BitUuids()
        }
    }

    /// Section data type for a list of 128-bit Bluetooth LE service solicitation UUIDs.
    /// - Returns: A list of 128-bit Bluetooth LE service solicitation UUIDs.
    public static var serviceSolicitation128BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceSolicitation128BitUuids()
        }
    }

    /// Section data type for a list of 16-bit Bluetooth LE service solicitation UUIDs.
    /// - Returns: A list of 16-bit Bluetooth LE service solicitation UUIDs.
    public static var serviceSolicitation16BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceSolicitation16BitUuids()
        }
    }

    /// Section data type for a list of 32-bit Bluetooth LE service solicitation UUIDs.
    /// - Returns: A list of 32-bit Bluetooth LE service solicitation UUIDs.
    public static var serviceSolicitation32BitUuids: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ServiceSolicitation32BitUuids()
        }
    }

    /// Section data type for a shortened local name.
    /// - Returns: A shortened local name.
    public static var shortenedLocalName: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_ShortenedLocalName()
        }
    }

    /// Section data type for the slave connection interval range.
    /// - Returns: The slave connection interval range.
    public static var slaveConnectionIntervalRange: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_SlaveConnectionIntervalRange()
        }
    }

    /// Section data type for the Bluetooth LE transmit power level.
    /// - Returns: The Bluetooth LE transmit power level.
    public static var txPowerLevel: Swift.UInt8 {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics.get_TxPowerLevel()
        }
    }

    // MARK: Implementation details

    private static var _ibluetoothLEAdvertisementDataTypesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementDataTypesStatics>? = nil

    internal static var _ibluetoothLEAdvertisementDataTypesStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementDataTypesStatics> {
        get throws {
            try _ibluetoothLEAdvertisementDataTypesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes", id: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementDataTypesStatics.iid)
            }
        }
    }
}