// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An object to receive Bluetooth Low Energy (LE) advertisements.
public final class WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcher: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcherProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcherProjection.self))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcherFactory members

    public convenience init(_ advertisementFilter: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementFilter?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibluetoothLEAdvertisementWatcherFactory.create(advertisementFilter)))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher members

    /// Gets or sets a BluetoothLEAdvertisementFilter object used for configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    /// - Returns: Configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    public var advertisementFilter: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AdvertisementFilter())
        }
    }

    /// Gets or sets a BluetoothLEAdvertisementFilter object used for configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    /// - Returns: Configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    public func advertisementFilter(_ value: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementFilter?) throws {
        try _interop.put_AdvertisementFilter(value)
    }

    /// Gets the maximum out of range timeout.
    /// - Returns: The maximum out of range timeout.
    public var maxOutOfRangeTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MaxOutOfRangeTimeout()
        }
    }

    /// Gets the maximum sampling interval.
    /// - Returns: The maximum sampling interval.
    public var maxSamplingInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MaxSamplingInterval()
        }
    }

    /// Gets the minimum out of range timeout.
    /// - Returns: The minimum out of range timeout.
    public var minOutOfRangeTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MinOutOfRangeTimeout()
        }
    }

    /// Gets the minimum sampling interval.
    /// - Returns: The minimum sampling interval.
    public var minSamplingInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MinSamplingInterval()
        }
    }

    /// Gets or sets the Bluetooth LE scanning mode.
    /// - Returns: The Bluetooth LE scanning mode.
    public var scanningMode: WindowsDevicesBluetoothAdvertisement_BluetoothLEScanningMode {
        get throws {
            try _interop.get_ScanningMode()
        }
    }

    /// Gets or sets the Bluetooth LE scanning mode.
    /// - Returns: The Bluetooth LE scanning mode.
    public func scanningMode(_ value: WindowsDevicesBluetoothAdvertisement_BluetoothLEScanningMode) throws {
        try _interop.put_ScanningMode(value)
    }

    /// Gets or sets a BluetoothSignalStrengthFilter object used for configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    /// - Returns: Configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    public var signalStrengthFilter: WindowsDevicesBluetooth_BluetoothSignalStrengthFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SignalStrengthFilter())
        }
    }

    /// Gets or sets a BluetoothSignalStrengthFilter object used for configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    /// - Returns: Configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    public func signalStrengthFilter(_ value: WindowsDevicesBluetooth_BluetoothSignalStrengthFilter?) throws {
        try _interop.put_SignalStrengthFilter(value)
    }

    /// Gets the current status of the BluetoothLEAdvertisementWatcher.
    /// - Returns: The current status of the BluetoothLEAdvertisementWatcher.
    public var status: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcherStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Notification for new Bluetooth LE advertisement events received.
    public func received(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcher?, WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Received(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: received)
    }

    public func received(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Received(token)
    }

    /// Notification to the app that the Bluetooth LE scanning for advertisements has been cancelled or aborted either by the app or due to an error.
    public func stopped(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcher?, WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementWatcherStoppedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Stopped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stopped)
    }

    public func stopped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Stopped(token)
    }

    /// Start the BluetoothLEAdvertisementWatcher to scan for Bluetooth LE advertisements.
    public func start() throws {
        try _interop.start()
    }

    /// Stop the BluetoothLEAdvertisementWatcher and disable the scanning for Bluetooth LE advertisements.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementWatcher2 members

    /// Enables reception of advertisements using the Extended Advertising format. Defaults to False.
    /// - Returns: Indicates whether advertisements of the Extended Advertising format can be received. The default value is False.
    public var allowExtendedAdvertisements: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementWatcher2.get_AllowExtendedAdvertisements()
        }
    }

    /// Enables reception of advertisements using the Extended Advertising format. Defaults to False.
    /// - Returns: Indicates whether advertisements of the Extended Advertising format can be received. The default value is False.
    public func allowExtendedAdvertisements(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementWatcher2.put_AllowExtendedAdvertisements(value)
    }

    // MARK: Implementation details

    private var _ibluetoothLEAdvertisementWatcher2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcher2>? = nil

    internal var _ibluetoothLEAdvertisementWatcher2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcher2> {
        get throws {
            try _ibluetoothLEAdvertisementWatcher2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcher2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcher2.self)
            }
        }
    }

    deinit {
        _ibluetoothLEAdvertisementWatcher2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibluetoothLEAdvertisementWatcherFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcherFactory>? = nil

    internal static var _ibluetoothLEAdvertisementWatcherFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcherFactory> {
        get throws {
            try _ibluetoothLEAdvertisementWatcherFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher", id: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementWatcherFactory.iid)
            }
        }
    }
}