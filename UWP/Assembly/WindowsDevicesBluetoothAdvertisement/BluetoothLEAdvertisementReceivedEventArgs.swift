// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for a Received event on a BluetoothLEAdvertisementWatcher. A BluetoothLEAdvertisementReceivedEventArgs instance is created when the Received event occurs on a BluetoothLEAdvertisementWatcher object.
public final class WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementReceivedEventArgs: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementReceivedEventArgsProjection> {
    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs members

    /// Gets the Bluetooth LE advertisement payload data received.
    /// - Returns: The Bluetooth LE advertisement payload data received.
    public var advertisement: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Advertisement())
        }
    }

    /// Gets the type of the received Bluetooth LE advertisement packet.
    /// - Returns: the type of the received Bluetooth LE advertisement packet.
    public var advertisementType: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementType {
        get throws {
            try _interop.get_AdvertisementType()
        }
    }

    /// Gets the Bluetooth address of the device sending the Bluetooth LE advertisement.
    /// - Returns: the Bluetooth address of the device sending the Bluetooth LE advertisement.
    public var bluetoothAddress: Swift.UInt64 {
        get throws {
            try _interop.get_BluetoothAddress()
        }
    }

    /// Gets the received signal strength indicator (RSSI) value, in dBm, for this received Bluetooth LE advertisement event. This value could be the raw RSSI or a filtered RSSI depending on filtering settings configured through BluetoothSignalStrengthFilter.
    /// - Returns: The received signal strength indicator (RSSI) value, in dBm, for this event.
    public var rawSignalStrengthInDBm: Swift.Int16 {
        get throws {
            try _interop.get_RawSignalStrengthInDBm()
        }
    }

    /// Gets the timestamp when the Received event occurred.
    /// - Returns: The timestamp when the Received event occurred.
    public var timestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementReceivedEventArgs2 members

    /// Retrieves the Bluetooth Address Type of the received advertisement.
    /// - Returns: The Bluetooth Address Type of the advertisement. If the advertisement is anonymous, the type returned is `Unspecified`.
    public var bluetoothAddressType: WindowsDevicesBluetooth_BluetoothAddressType {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_BluetoothAddressType()
        }
    }

    /// Indicates whether a Bluetooth Address was omitted from the received advertisement.
    /// - Returns: Indicates whether the advertisement was sent anonymously.
    public var isAnonymous: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_IsAnonymous()
        }
    }

    /// Indicates whether the received advertisement is connectable.
    /// - Returns: Indicates whether the advertisement is connectable. Returns True if it is, otherwise, returns False.
    public var isConnectable: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_IsConnectable()
        }
    }

    /// Indicates whether the received advertisement is directed.
    /// - Returns: Indicates whether the advertisement is directed. Returns True if it is, otherwise, returns False.
    public var isDirected: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_IsDirected()
        }
    }

    /// Indicates whether the received advertisement is a scan response.
    /// - Returns: Indicates whether the advertisement is a scan response. Returns True if it is, otherwise, returns False.
    public var isScanResponse: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_IsScanResponse()
        }
    }

    /// Indicates whether the received advertisement is scannable.
    /// - Returns: Indicates whether the advertisement is scannable. Returns True if it is, otherwise, returns False.
    public var isScannable: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_IsScannable()
        }
    }

    /// Represents the received transmit power of the advertisement.
    /// - Returns: The received transmit power of the advertisement. Ranges from -127 dBm to 20dBM.
    public var transmitPowerLevelInDBm: Swift.Int16? {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2.get_TransmitPowerLevelInDBm()
        }
    }

    // MARK: Implementation details

    private var _ibluetoothLEAdvertisementReceivedEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementReceivedEventArgs2>? = nil

    internal var _ibluetoothLEAdvertisementReceivedEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementReceivedEventArgs2> {
        get throws {
            try _ibluetoothLEAdvertisementReceivedEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementReceivedEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementReceivedEventArgs2.self)
            }
        }
    }

    deinit {
        _ibluetoothLEAdvertisementReceivedEventArgs2_storage?.release()
    }
}