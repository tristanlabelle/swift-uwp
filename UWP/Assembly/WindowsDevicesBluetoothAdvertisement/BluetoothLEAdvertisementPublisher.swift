// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An object to send Bluetooth Low Energy (LE) advertisements.
public final class WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisher: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisherProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisherProjection.self))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisherFactory members

    public convenience init(_ advertisement: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisement?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibluetoothLEAdvertisementPublisherFactory.create(advertisement)))
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher members

    /// Gets a copy of the Bluetooth LE advertisement to publish.
    /// - Returns: A copy of the Bluetooth LE advertisement to publish.
    public var advertisement: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Advertisement())
        }
    }

    /// Gets the current status of the BluetoothLEAdvertisementPublisher.
    /// - Returns: The current status of the BluetoothLEAdvertisementPublisher.
    public var status: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisherStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Notification that the status of the BluetoothLEAdvertisementPublisher has changed.
    public func statusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisher?, WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementPublisherStatusChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusChanged)
    }

    public func statusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusChanged(token)
    }

    /// Start advertising a Bluetooth LE advertisement payload.
    public func start() throws {
        try _interop.start()
    }

    /// Stop the publisher and stop advertising a Bluetooth LE advertisement payload.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Devices.Bluetooth.Advertisement.IBluetoothLEAdvertisementPublisher2 members

    /// Specifies whether the transmit power level is included in the advertisement header. Defaults to False.
    /// - Returns: Indicates whether the transmit power level is included. The default value is False.
    public var includeTransmitPowerLevel: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisher2.get_IncludeTransmitPowerLevel()
        }
    }

    /// Specifies whether the transmit power level is included in the advertisement header. Defaults to False.
    /// - Returns: Indicates whether the transmit power level is included. The default value is False.
    public func includeTransmitPowerLevel(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisher2.put_IncludeTransmitPowerLevel(value)
    }

    /// Specifies whether or not the device address is included in the advertisement header. By default, the address is included.
    /// - Returns: Indicates whether the device address is hidden. The default value is False, indicating that the address is included.
    public var isAnonymous: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisher2.get_IsAnonymous()
        }
    }

    /// Specifies whether or not the device address is included in the advertisement header. By default, the address is included.
    /// - Returns: Indicates whether the device address is hidden. The default value is False, indicating that the address is included.
    public func isAnonymous(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisher2.put_IsAnonymous(value)
    }

    /// If specified, requests that the radio use the indicated transmit power level for the advertisement. Defaults to Null.
    /// - Returns: The requested power level for the radio transmission. The default is Null.
    public var preferredTransmitPowerLevelInDBm: Swift.Int16? {
        get throws {
            try _ibluetoothLEAdvertisementPublisher2.get_PreferredTransmitPowerLevelInDBm()
        }
    }

    /// If specified, requests that the radio use the indicated transmit power level for the advertisement. Defaults to Null.
    /// - Returns: The requested power level for the radio transmission. The default is Null.
    public func preferredTransmitPowerLevelInDBm(_ value: Swift.Int16?) throws {
        try _ibluetoothLEAdvertisementPublisher2.put_PreferredTransmitPowerLevelInDBm(value)
    }

    /// Specifies that the advertisement publisher should use the Extended Advertising format.
    /// - Returns: Indicates whether or not the Extended Advertising format should be used. The default value is False.
    public var useExtendedAdvertisement: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisher2.get_UseExtendedAdvertisement()
        }
    }

    /// Specifies that the advertisement publisher should use the Extended Advertising format.
    /// - Returns: Indicates whether or not the Extended Advertising format should be used. The default value is False.
    public func useExtendedAdvertisement(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisher2.put_UseExtendedAdvertisement(value)
    }

    // MARK: Implementation details

    private var _ibluetoothLEAdvertisementPublisher2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisher2>? = nil

    internal var _ibluetoothLEAdvertisementPublisher2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisher2> {
        get throws {
            try _ibluetoothLEAdvertisementPublisher2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisher2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisher2.self)
            }
        }
    }

    deinit {
        _ibluetoothLEAdvertisementPublisher2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibluetoothLEAdvertisementPublisherFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisherFactory>? = nil

    internal static var _ibluetoothLEAdvertisementPublisherFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisherFactory> {
        get throws {
            try _ibluetoothLEAdvertisementPublisherFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher", id: CWinRT.SWRT_WindowsDevicesBluetoothAdvertisement_IBluetoothLEAdvertisementPublisherFactory.iid)
            }
        }
    }
}