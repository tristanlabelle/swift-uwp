// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the base class for BindingExpression.
open class WindowsUIXamlData_BindingExpressionBase: WindowsRuntime.WinRTComposableClass {
    // MARK: Implementation details

    private var _ibindingExpressionBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBase>? = nil

    internal var _ibindingExpressionBase: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBase> {
        get throws {
            try _ibindingExpressionBase_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBase.iid).cast(to: CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBase.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBase>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ibindingExpressionBase_storage?.release()
    }

    private static var _ibindingExpressionBaseFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBaseFactory>? = nil

    internal static var _ibindingExpressionBaseFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBaseFactory> {
        get throws {
            try _ibindingExpressionBaseFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Data.BindingExpressionBase", id: CWinRT.SWRT_WindowsUIXamlData_IBindingExpressionBaseFactory.iid)
            }
        }
    }
}