// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages files so that they can be updated in real-time by an app that participates in the Cached File Updater contract.
public enum WindowsStorageProvider_CachedFileUpdater {
    // MARK: Windows.Storage.Provider.ICachedFileUpdaterStatics members

    /// Configures update policies for a local file.
    /// - Parameter file: The local file.
    /// - Parameter contentId: A unique identifier for the local file.
    /// - Parameter readMode: A value that specifies whether Windows will request updates before the local file is retrieved from an app's MostRecentlyUsedList or FutureAccessList.
    /// - Parameter writeMode: A value that specifies whether other apps can write to the local file and, if so, whether Windows will request updates after the local file is written.
    /// - Parameter options: A value that specifies additional circumstances and behaviors for when Windows requests updates.
    public static func setUpdateInformation(_ file: WindowsStorage_IStorageFile?, _ contentId: Swift.String, _ readMode: WindowsStorageProvider_ReadActivationMode, _ writeMode: WindowsStorageProvider_WriteActivationMode, _ options: WindowsStorageProvider_CachedFileOptions) throws {
        try _icachedFileUpdaterStatics.setUpdateInformation(file, contentId, readMode, writeMode, options)
    }

    // MARK: Implementation details

    private static var _icachedFileUpdaterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageProvider_ICachedFileUpdaterStatics>? = nil

    internal static var _icachedFileUpdaterStatics: COM.COMInterop<CWinRT.SWRT_WindowsStorageProvider_ICachedFileUpdaterStatics> {
        get throws {
            try _icachedFileUpdaterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Provider.CachedFileUpdater", id: CWinRT.SWRT_WindowsStorageProvider_ICachedFileUpdaterStatics.iid)
            }
        }
    }
}