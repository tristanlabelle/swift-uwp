// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Notifies listeners of dynamic changes to a map of ResourceQualifier objects, such as when items get added or removed, and allows qualifier values to change.
public final class WindowsApplicationModelResourcesCore_ResourceQualifierObservableMap: WindowsRuntime.WinRTImport<WindowsApplicationModelResourcesCore_ResourceQualifierObservableMapProjection>, WindowsFoundationCollections_IObservableMapProtocol, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias K = Swift.String
    public typealias V = Swift.String
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?

    // MARK: Windows.Foundation.Collections.IObservableMap`2<String, String> members

    /// Occurs when the map changes.
    public func mapChanged(adding vhnd: WindowsFoundationCollections_MapChangedEventHandler<Swift.String, Swift.String>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MapChanged(vhnd)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapChanged)
    }

    public func mapChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MapChanged(token)
    }

    // MARK: Windows.Foundation.Collections.IMap`2<String, String> members

    /// Gets the number of ResourceQualifier objects in the observable map.
    /// - Returns: The number of ResourceQualifier objects in the map.
    public var size: Swift.UInt32 {
        get throws {
            try _imap.get_Size()
        }
    }

    /// Returns the qualifier name at the specified key in the observable map.
    /// - Parameter key: The key to locate in the observable map.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> Swift.String {
        try _imap.lookup(key)
    }

    /// Determines whether the observable map contains the specified key.
    /// - Parameter key: The key to locate in the observable map.
    /// - Returns: **TRUE** if the key is found, otherwise **FALSE** if it is not found.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _imap.hasKey(key)
    }

    /// Returns an unchangeable view of the observable map.
    /// - Returns: The view of the map.
    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, Swift.String> {
        try COM.NullResult.unwrap(_imap.getView())
    }

    /// Inserts or replaces an item in the observable map.
    /// - Parameter key: The key associated with the item to insert.
    /// - Parameter value: The item to insert.
    /// - Returns: **TRUE** if an item with the specified key is an existing item and was replaced, otherwise **FALSE**.
    public func insert(_ key: Swift.String, _ value: Swift.String) throws -> Swift.Bool {
        try _imap.insert(key, value)
    }

    /// Removes an item from the observable map.
    /// - Parameter key: The key associated with the item to remove.
    public func remove(_ key: Swift.String) throws {
        try _imap.remove(key)
    }

    /// Removes all items from the observable map.
    public func clear() throws {
        try _imap.clear()
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>> members

    /// Returns an iterator to enumerate the items in the observable map.
    /// - Returns: The iterator. The current position of the iterator is index 0, or the end of the observable map if the observable map is empty.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _imap_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_String_String>? = nil

    internal var _imap: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_String_String> {
        get throws {
            try _imap_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IMap_String_String.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IMap_String_String.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String.self)
            }
        }
    }

    deinit {
        _imap_storage?.release()
        _iiterable_storage?.release()
    }
}