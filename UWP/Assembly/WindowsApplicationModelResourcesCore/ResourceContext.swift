// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates all of the factors (ResourceQualifier s) that might affect resource selection.
public final class WindowsApplicationModelResourcesCore_ResourceContext: WindowsRuntime.WinRTImport<WindowsApplicationModelResourcesCore_ResourceContextProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelResourcesCore_ResourceContextProjection.self))
    }

    // MARK: Windows.ApplicationModel.Resources.Core.IResourceContext members

    /// Gets or sets the language qualifier for this context.
    /// - Returns: A collection of BCP-47 language tags.
    public var languages: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Languages())
        }
    }

    /// Gets or sets the language qualifier for this context.
    /// - Returns: A collection of BCP-47 language tags.
    public func languages(_ languages: WindowsFoundationCollections_IVectorView<Swift.String>?) throws {
        try _interop.put_Languages(languages)
    }

    /// Gets a writable, observable map of all supported qualifiers, indexed by name.
    /// - Returns: The map of qualifiers, which you use to map a qualifier name to a qualifier value. The qualifier value returned represents the current setting. Here is a reference table of all the possible qualifier values that can be returned. See Tailor your resources for language, scale, high contrast, and other qualifiers for an explanation of the general concept of qualifiers, how to use them, and the purpose of each of the qualifier names.
    public var qualifierValues: WindowsFoundationCollections_IObservableMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_QualifierValues())
        }
    }

    /// Resets the overridden values for all qualifiers on the given ResourceContext instance.
    public func reset() throws {
        try _interop.reset()
    }

    public func reset(_ qualifierNames: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        try _interop.resetQualifierValues(qualifierNames)
    }

    public func overrideToMatch(_ result: WindowsFoundationCollections_IIterable<WindowsApplicationModelResourcesCore_ResourceQualifier?>?) throws {
        try _interop.overrideToMatch(result)
    }

    /// Creates a clone of this ResourceContext, with identical qualifiers.
    /// - Returns: A new, cloned ResourceContext.
    public func clone() throws -> WindowsApplicationModelResourcesCore_ResourceContext {
        try COM.NullResult.unwrap(_interop.clone())
    }

    // MARK: Windows.ApplicationModel.Resources.Core.IResourceContextStatics members

    public static func createMatchingContext(_ result: WindowsFoundationCollections_IIterable<WindowsApplicationModelResourcesCore_ResourceQualifier?>?) throws -> WindowsApplicationModelResourcesCore_ResourceContext {
        try COM.NullResult.unwrap(_iresourceContextStatics.createMatchingContext(result))
    }

    // MARK: Windows.ApplicationModel.Resources.Core.IResourceContextStatics3 members

    /// Applies a single qualifier value override to default contexts of all views for the current app, and specifies the persistence of the override.
    /// - Parameter key: The name of the qualifier to override.
    /// - Parameter value: The override value to set.
    /// - Parameter persistence: The persistence of the override value.
    public static func setGlobalQualifierValue(_ key: Swift.String, _ value: Swift.String, _ persistence: WindowsApplicationModelResourcesCore_ResourceQualifierPersistence) throws {
        try _iresourceContextStatics3.setGlobalQualifierValueWithPersistence(key, value, persistence)
    }

    // MARK: Windows.ApplicationModel.Resources.Core.IResourceContextStatics2 members

    /// Gets a default ResourceContext associated with the current view for the currently running application.
    /// - Returns: The default context associated with the current view.
    public static func getForCurrentView() throws -> WindowsApplicationModelResourcesCore_ResourceContext {
        try COM.NullResult.unwrap(_iresourceContextStatics2.getForCurrentView())
    }

    /// Applies a single qualifier value override to default contexts of all views for the current app.
    /// - Parameter key: The name of the qualifier to override.
    /// - Parameter value: The override value to set.
    public static func setGlobalQualifierValue(_ key: Swift.String, _ value: Swift.String) throws {
        try _iresourceContextStatics2.setGlobalQualifierValue(key, value)
    }

    /// Removes any qualifier overrides from default contexts of all views across the app.
    public static func resetGlobalQualifierValues() throws {
        try _iresourceContextStatics2.resetGlobalQualifierValues()
    }

    public static func resetGlobalQualifierValues(_ qualifierNames: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        try _iresourceContextStatics2.resetGlobalQualifierValuesForSpecifiedQualifiers(qualifierNames)
    }

    /// Gets a default ResourceContext not associated with any view.
    /// - Returns: A default ResourceContext not associated with any view.
    public static func getForViewIndependentUse() throws -> WindowsApplicationModelResourcesCore_ResourceContext {
        try COM.NullResult.unwrap(_iresourceContextStatics2.getForViewIndependentUse())
    }

    // MARK: Windows.ApplicationModel.Resources.Core.IResourceContextStatics4 members

    /// Gets a default ResourceContext associated with the specified UIContext for the currently running application.
    /// - Parameter context: The UI context for which to get the ResourceContext.
    /// - Returns: The default ResourceContext associated with the specified UI context.
    public static func getForUIContext(_ context: WindowsUI_UIContext?) throws -> WindowsApplicationModelResourcesCore_ResourceContext {
        try COM.NullResult.unwrap(_iresourceContextStatics4.getForUIContext(context))
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.Core.ResourceContext", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iresourceContextStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics>? = nil

    internal static var _iresourceContextStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics> {
        get throws {
            try _iresourceContextStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.Core.ResourceContext", id: CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics.iid)
            }
        }
    }

    private static var _iresourceContextStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics3>? = nil

    internal static var _iresourceContextStatics3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics3> {
        get throws {
            try _iresourceContextStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.Core.ResourceContext", id: CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics3.iid)
            }
        }
    }

    private static var _iresourceContextStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics2>? = nil

    internal static var _iresourceContextStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics2> {
        get throws {
            try _iresourceContextStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.Core.ResourceContext", id: CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics2.iid)
            }
        }
    }

    private static var _iresourceContextStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics4>? = nil

    internal static var _iresourceContextStatics4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics4> {
        get throws {
            try _iresourceContextStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.Core.ResourceContext", id: CWinRT.SWRT_WindowsApplicationModelResourcesCore_IResourceContextStatics4.iid)
            }
        }
    }
}