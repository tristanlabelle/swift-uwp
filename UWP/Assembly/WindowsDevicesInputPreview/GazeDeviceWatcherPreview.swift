// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Dynamically detects and enumerates eye-tracking devices, and receives event notifications when a device is added, removed, or updated after the initial enumeration.
public final class WindowsDevicesInputPreview_GazeDeviceWatcherPreview: WindowsRuntime.WinRTImport<WindowsDevicesInputPreview_GazeDeviceWatcherPreviewProjection> {
    // MARK: Windows.Devices.Input.Preview.IGazeDeviceWatcherPreview members

    /// Occurs when a new eye-tracker device is detected.
    public func added(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeDeviceWatcherPreview?, WindowsDevicesInputPreview_GazeDeviceWatcherAddedPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Added(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: added)
    }

    public func added(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Added(token)
    }

    /// Occurs when the GazeDeviceWatcherPreview finishes identifying the connected eye-tracker devices.
    public func enumerationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeDeviceWatcherPreview?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_EnumerationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: enumerationCompleted)
    }

    public func enumerationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_EnumerationCompleted(token)
    }

    /// Occurs when an existing eye-tracker device is no longer detected.
    public func removed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeDeviceWatcherPreview?, WindowsDevicesInputPreview_GazeDeviceWatcherRemovedPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Removed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: removed)
    }

    public func removed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Removed(token)
    }

    /// Occurs when an update is made to an existing eye-tracker device, such as calibration.
    public func updated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeDeviceWatcherPreview?, WindowsDevicesInputPreview_GazeDeviceWatcherUpdatedPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Updated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: updated)
    }

    public func updated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Updated(token)
    }

    /// Starts monitoring the state of an eye-tracker device.
    public func start() throws {
        try _interop.start()
    }

    /// Stops monitoring the state of an eye-tracker device.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Implementation details
}