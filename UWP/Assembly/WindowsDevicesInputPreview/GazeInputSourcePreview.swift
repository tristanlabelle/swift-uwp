// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the eyes and head of the user identified by an eye-tracking device.
public final class WindowsDevicesInputPreview_GazeInputSourcePreview: WindowsRuntime.WinRTImport<WindowsDevicesInputPreview_GazeInputSourcePreviewProjection> {
    // MARK: Windows.Devices.Input.Preview.IGazeInputSourcePreview members

    /// Occurs when the eye-tracking device detects that the gaze point has entered the bounding area of the element.
    public func gazeEntered(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeInputSourcePreview?, WindowsDevicesInputPreview_GazeEnteredPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_GazeEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gazeEntered)
    }

    public func gazeEntered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_GazeEntered(token)
    }

    /// Occurs when the eye-tracking device detects that the gaze point has moved outside the bounding area of the element.
    public func gazeExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeInputSourcePreview?, WindowsDevicesInputPreview_GazeExitedPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_GazeExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gazeExited)
    }

    public func gazeExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_GazeExited(token)
    }

    /// Occurs when the eye-tracking device detects eye movement and the gaze pointer remains within the bounding rectangle of the element.
    public func gazeMoved(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesInputPreview_GazeInputSourcePreview?, WindowsDevicesInputPreview_GazeMovedPreviewEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_GazeMoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gazeMoved)
    }

    public func gazeMoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_GazeMoved(token)
    }

    // MARK: Windows.Devices.Input.Preview.IGazeInputSourcePreviewStatics members

    /// Retrieves a reference to the user identified by an eye-tracking device, bound to the active application.
    /// - Returns: A GazeInputSourcePreview object bound to the active application.
    public static func getForCurrentView() throws -> WindowsDevicesInputPreview_GazeInputSourcePreview {
        try COM.NullResult.unwrap(_igazeInputSourcePreviewStatics.getForCurrentView())
    }

    /// Creates an object for monitoring the state of the eye-tracker device associated with the current view.
    public static func createWatcher() throws -> WindowsDevicesInputPreview_GazeDeviceWatcherPreview {
        try COM.NullResult.unwrap(_igazeInputSourcePreviewStatics.createWatcher())
    }

    // MARK: Implementation details

    private static var _igazeInputSourcePreviewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInputPreview_IGazeInputSourcePreviewStatics>? = nil

    internal static var _igazeInputSourcePreviewStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInputPreview_IGazeInputSourcePreviewStatics> {
        get throws {
            try _igazeInputSourcePreviewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Input.Preview.GazeInputSourcePreview", id: CWinRT.SWRT_WindowsDevicesInputPreview_IGazeInputSourcePreviewStatics.iid)
            }
        }
    }
}