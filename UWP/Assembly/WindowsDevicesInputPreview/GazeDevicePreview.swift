// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports the ability to identify and manage all connected eye-tracker devices.
public final class WindowsDevicesInputPreview_GazeDevicePreview: WindowsRuntime.WinRTImport<WindowsDevicesInputPreview_GazeDevicePreviewProjection> {
    // MARK: Windows.Devices.Input.Preview.IGazeDevicePreview members

    /// Gets whether the eye-tracking device can detect and track the user's eyes.
    /// - Returns: True, if the device can track the user's eyes; otherwise, false.
    public var canTrackEyes: Swift.Bool {
        get throws {
            try _interop.get_CanTrackEyes()
        }
    }

    /// Gets whether the eye-tracking device can detect and track the user's head.
    /// - Returns: True, if the device can track the user's head; otherwise, false.
    public var canTrackHead: Swift.Bool {
        get throws {
            try _interop.get_CanTrackHead()
        }
    }

    /// Gets the configuration state of the eye-tracking device.
    /// - Returns: The congiguration state.
    public var configurationState: WindowsDevicesInputPreview_GazeDeviceConfigurationStatePreview {
        get throws {
            try _interop.get_ConfigurationState()
        }
    }

    /// Gets a unique identifier for the eye-tracking device.
    /// - Returns: The unique identifier.
    public var id: Swift.UInt32 {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Asynchronously requests the eye-tracking device start its calibration process.
    /// - Returns: True, if calibration completes successfully; otherwise, false.
    public func requestCalibrationAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.requestCalibrationAsync())
    }

    /// Retrieves the numeric control description for the eye-tracking device.
    /// - Parameter usagePage: The usage page for the eye-tracking device.
    /// - Parameter usageId: The usage identifier for the eye-tracking device.
    /// - Returns: A vector of HidNumericControlDescription objects.
    public func getNumericControlDescriptions(_ usagePage: Swift.UInt16, _ usageId: Swift.UInt16) throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesHumanInterfaceDevice_HidNumericControlDescription?> {
        try COM.NullResult.unwrap(_interop.getNumericControlDescriptions(usagePage, usageId))
    }

    /// Retrieves the boolean control descriptions for the eye-tracking device.
    /// - Parameter usagePage: The usage page for the eye-tracking device.
    /// - Parameter usageId: The usage identifier for the eye-tracking device.
    /// - Returns: A vector of HidNumericControlDescription objects.
    public func getBooleanControlDescriptions(_ usagePage: Swift.UInt16, _ usageId: Swift.UInt16) throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesHumanInterfaceDevice_HidBooleanControlDescription?> {
        try COM.NullResult.unwrap(_interop.getBooleanControlDescriptions(usagePage, usageId))
    }

    // MARK: Implementation details
}