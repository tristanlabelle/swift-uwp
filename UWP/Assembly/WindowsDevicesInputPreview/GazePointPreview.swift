// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides basic properties for the gaze input point associated with a single eye-tracking device.
public final class WindowsDevicesInputPreview_GazePointPreview: WindowsRuntime.WinRTImport<WindowsDevicesInputPreview_GazePointPreviewProjection> {
    // MARK: Windows.Devices.Input.Preview.IGazePointPreview members

    /// Gets the location, derived from the position and orientation of the user's eyes, of the gaze point.
    /// - Returns: The screen coordinates of the gaze point are in device-independent pixels (DIP) relative to, and constrained by, the application view (or gaze-enabled element).
    public var eyeGazePosition: WindowsFoundation_IReference<WindowsFoundation_Point>? {
        get throws {
            try _interop.get_EyeGazePosition()
        }
    }

    /// Gets the location, derived from the user's head position and orientation, of the gaze point.
    /// - Returns: The screen coordinates of the gaze point are in device-independent pixels (DIP) relative to, and constrained by, the application view (or gaze-enabled element).
    public var headGazePosition: WindowsFoundation_IReference<WindowsFoundation_Point>? {
        get throws {
            try _interop.get_HeadGazePosition()
        }
    }

    /// Gets a Human Interface Device (HID) input report for the eye-tracking device.
    /// - Returns: A HidInputReport object.
    public var hidInputReport: WindowsDevicesHumanInterfaceDevice_HidInputReport {
        get throws {
            try COM.NullResult.unwrap(_interop.get_HidInputReport())
        }
    }

    /// Gets information about the eye-tracking device associated with the gaze input.
    /// - Returns: A reference to the eye-tracking device.
    public var sourceDevice: WindowsDevicesInputPreview_GazeDevicePreview {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SourceDevice())
        }
    }

    /// Gets the time of the gaze point input event.
    /// - Returns: The time, relative to the system boot time, in microseconds.
    public var timestamp: Swift.UInt64 {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    // MARK: Implementation details
}