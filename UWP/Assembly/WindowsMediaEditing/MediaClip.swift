// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a single media object.
public final class WindowsMediaEditing_MediaClip: WindowsRuntime.WinRTImport<WindowsMediaEditing_MediaClipProjection> {
    // MARK: Windows.Media.Editing.IMediaClip members

    /// Gets the list of audio effect definitions for processing the media clip.
    /// - Returns: The list of audio effect definitions for processing the media clip.
    public var audioEffectDefinitions: WindowsFoundationCollections_IVector<WindowsMediaEffects_IAudioEffectDefinition?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AudioEffectDefinitions())
        }
    }

    /// The list of embedded audio tracks in this media clip.
    /// - Returns: Each member in the list is an EmbeddedAudioTrack object.
    public var embeddedAudioTracks: WindowsFoundationCollections_IVectorView<WindowsMediaEditing_EmbeddedAudioTrack?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_EmbeddedAudioTracks())
        }
    }

    /// The time when the media clip stops playing within a MediaComposition.
    /// - Returns: Time is measured relative to the beginning of the media clip.
    public var endTimeInComposition: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_EndTimeInComposition()
        }
    }

    /// Original playback time of the media clip, without the effects of TrimTimeFromStart and TrimTimeFromEnd properties.
    /// - Returns: The original duration of the media clip is equal to TrimmedDuration + TrimTimeFromStart + TrimTimeFromEnd.
    public var originalDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_OriginalDuration()
        }
    }

    /// The index of the audio track within the media clip that is used for playback.
    /// - Returns: The default value of 0 selects the first audio track within the media clip.
    public var selectedEmbeddedAudioTrackIndex: Swift.UInt32 {
        get throws {
            try _interop.get_SelectedEmbeddedAudioTrackIndex()
        }
    }

    /// The index of the audio track within the media clip that is used for playback.
    /// - Returns: The default value of 0 selects the first audio track within the media clip.
    public func selectedEmbeddedAudioTrackIndex(_ value: Swift.UInt32) throws {
        try _interop.put_SelectedEmbeddedAudioTrackIndex(value)
    }

    /// The time when the media clip starts playing within a MediaComposition.
    /// - Returns: Time is measured relative to the beginning of the media clip.
    public var startTimeInComposition: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_StartTimeInComposition()
        }
    }

    /// The amount of time to trim from the end of the media clip.
    /// - Returns: The trim time must be greater than or equal to 0 and less than the length of the media clip.
    public var trimTimeFromEnd: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TrimTimeFromEnd()
        }
    }

    /// The amount of time to trim from the end of the media clip.
    /// - Returns: The trim time must be greater than or equal to 0 and less than the length of the media clip.
    public func trimTimeFromEnd(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_TrimTimeFromEnd(value)
    }

    /// The amount of time to trim from the beginning of the media clip.
    /// - Returns: The trim time must be greater than or equal to 0 and less than the length of the media clip.
    public var trimTimeFromStart: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TrimTimeFromStart()
        }
    }

    /// The amount of time to trim from the beginning of the media clip.
    /// - Returns: The trim time must be greater than or equal to 0 and less than the length of the media clip.
    public func trimTimeFromStart(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_TrimTimeFromStart(value)
    }

    /// Duration of the media clip with TrimTimeFromStart and TrimTimeFromEnd applied to playback.
    /// - Returns: The trimmed duration of the media clip is equal to OriginalDuration - (TrimTimeFromStart + TrimTimeFromEnd ).
    public var trimmedDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TrimmedDuration()
        }
    }

    /// An associative collection for storing custom properties associated with the media clip.
    /// - Returns: The values stored in the IMap must be strings. These values are app-defined and are not used by the operating system. You can use this collection to store, for example, a clip name, an application-related clip identifier, or a clip description.
    public var userData: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UserData())
        }
    }

    /// Gets the list of video effect definitions for processing the media clip.
    /// - Returns: The list of video effect definitions for processing the media clip.
    public var videoEffectDefinitions: WindowsFoundationCollections_IVector<WindowsMediaEffects_IVideoEffectDefinition?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoEffectDefinitions())
        }
    }

    /// Gets or sets the volume of the media clip.
    /// - Returns: A value between 0 and 1 represents a reduction in the volume level of the media clip where 0 is silence and 1 is normal volume. A value greater than 1 represents a boost in the volume of the media clip.
    public var volume: Swift.Double {
        get throws {
            try _interop.get_Volume()
        }
    }

    /// Gets or sets the volume of the media clip.
    /// - Returns: A value between 0 and 1 represents a reduction in the volume level of the media clip where 0 is silence and 1 is normal volume. A value greater than 1 represents a boost in the volume of the media clip.
    public func volume(_ value: Swift.Double) throws {
        try _interop.put_Volume(value)
    }

    /// Creates a MediaClip object that is identical to this instance.
    /// - Returns: A MediaClip object that is a copy of this instance.
    public func clone() throws -> WindowsMediaEditing_MediaClip {
        try COM.NullResult.unwrap(_interop.clone())
    }

    /// Gets the VideoEncodingProperties for the media clip.
    /// - Returns: The VideoEncodingProperties for the media clip.
    public func getVideoEncodingProperties() throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_interop.getVideoEncodingProperties())
    }

    // MARK: Windows.Media.Editing.IMediaClipStatics members

    /// Creates a solid color video clip that displays a single color for a specified length of time. Solid color video clips are typically used to create an explicit gap between video segments.
    /// - Parameter color: The color to display in the video clip.
    /// - Parameter originalDuration: How long to display the color in the video clip.
    /// - Returns: A new media clip object containing the color-based video clip.
    public static func createFromColor(_ color: WindowsUI_Color, _ originalDuration: WindowsFoundation_TimeSpan) throws -> WindowsMediaEditing_MediaClip {
        try COM.NullResult.unwrap(_imediaClipStatics.createFromColor(color, originalDuration))
    }

    /// Creates a video clip from a video file.
    /// - Parameter file: A StorageFile object representing the source video file.
    /// - Returns: A new media clip object containing a video clip of the video file.
    public static func createFromFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaEditing_MediaClip?> {
        try COM.NullResult.unwrap(_imediaClipStatics.createFromFileAsync(file))
    }

    /// Creates a video clip that displays a single image for a specified length of time.
    /// - Parameter file: A StorageFile object representing the source image file.
    /// - Parameter originalDuration: How long to display the image in the video clip.
    /// - Returns: A new media clip object containing the image-based video clip.
    public static func createFromImageFileAsync(_ file: WindowsStorage_IStorageFile?, _ originalDuration: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaEditing_MediaClip?> {
        try COM.NullResult.unwrap(_imediaClipStatics.createFromImageFileAsync(file, originalDuration))
    }

    // MARK: Windows.Media.Editing.IMediaClipStatics2 members

    /// Creates a video clip from a Microsoft Direct3D surface.
    /// - Parameter surface: The Microsoft Direct3D surface.
    /// - Parameter originalDuration: The initial duration of the created video clip.
    /// - Returns: A new media clip object containing the video clip.
    public static func createFromSurface(_ surface: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?, _ originalDuration: WindowsFoundation_TimeSpan) throws -> WindowsMediaEditing_MediaClip {
        try COM.NullResult.unwrap(_imediaClipStatics2.createFromSurface(surface, originalDuration))
    }

    // MARK: Implementation details

    private static var _imediaClipStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics>? = nil

    internal static var _imediaClipStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics> {
        get throws {
            try _imediaClipStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Editing.MediaClip", id: CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics.iid)
            }
        }
    }

    private static var _imediaClipStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics2>? = nil

    internal static var _imediaClipStatics2: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics2> {
        get throws {
            try _imediaClipStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Editing.MediaClip", id: CWinRT.SWRT_WindowsMediaEditing_IMediaClipStatics2.iid)
            }
        }
    }
}