// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a collection of media clips and background audio tracks.
public final class WindowsMediaEditing_MediaComposition: WindowsRuntime.WinRTImport<WindowsMediaEditing_MediaCompositionProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaEditing_MediaCompositionProjection.self))
    }

    // MARK: Windows.Media.Editing.IMediaComposition members

    /// A collection of background audio tracks for playback in the media composition.
    /// - Returns: The collection of BackgroundAudioTrack objects.
    public var backgroundAudioTracks: WindowsFoundationCollections_IVector<WindowsMediaEditing_BackgroundAudioTrack?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BackgroundAudioTracks())
        }
    }

    /// A collection of media clips for playback in the media composition.
    /// - Returns: The collection of MediaClip objects.
    public var clips: WindowsFoundationCollections_IVector<WindowsMediaEditing_MediaClip?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Clips())
        }
    }

    /// The total playback time of the media composition.
    /// - Returns: The sum of the trimmed durations of all media clips in the composition.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// An associative collection for storing custom properties associated with the media composition.
    /// - Returns: The values stored in the IMap must be strings. These values are app-defined and are not used by the operating system. You can use this collection to store, for example, a description of the media composition.
    public var userData: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UserData())
        }
    }

    /// Creates a MediaComposition object that is identical to this instance.
    /// - Returns: A MediaComposition object that is a copy of this instance.
    public func clone() throws -> WindowsMediaEditing_MediaComposition {
        try COM.NullResult.unwrap(_interop.clone())
    }

    /// Asynchronously serializes the MediaComposition to disk so that it can be loaded and modified in the future.
    /// - Parameter file: The file to which the MediaComposition is saved.
    /// - Returns: An async action which can be used to track the success or failure of the operation.
    public func saveAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveAsync(file))
    }

    /// Asynchronously gets an image stream that represents a thumbnail of the media composition.
    /// - Parameter timeFromStart: Specifies the point in the timeline of the MediaComposition from which to render the thumbnail, offset from the start of the MediaComposition.
    /// - Parameter scaledWidth: Specifies the target width at which to render. The default is 0. *scaledWidth* and/or *scaledHeight* can be optional; see Remarks.
    /// - Parameter scaledHeight: Specifies the target height at which to render. The default is 0. *scaledWidth* and/or *scaledHeight* can be optional; see Remarks.
    /// - Parameter framePrecision: Specifies the frame precision algorithm to use when retrieving the thumbnail.
    /// - Returns: An image stream representing resulting thumbnail.
    public func getThumbnailAsync(_ timeFromStart: WindowsFoundation_TimeSpan, _ scaledWidth: Swift.Int32, _ scaledHeight: Swift.Int32, _ framePrecision: WindowsMediaEditing_VideoFramePrecision) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_ImageStream?> {
        try COM.NullResult.unwrap(_interop.getThumbnailAsync(timeFromStart, scaledWidth, scaledHeight, framePrecision))
    }

    public func getThumbnailsAsync(_ timesFromStart: WindowsFoundationCollections_IIterable<WindowsFoundation_TimeSpan>?, _ scaledWidth: Swift.Int32, _ scaledHeight: Swift.Int32, _ framePrecision: WindowsMediaEditing_VideoFramePrecision) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsGraphicsImaging_ImageStream?>?> {
        try COM.NullResult.unwrap(_interop.getThumbnailsAsync(timesFromStart, scaledWidth, scaledHeight, framePrecision))
    }

    /// Asynchronously renders the MediaComposition to the specified file.
    /// - Parameter destination: The file to which this MediaComposition is rendered.
    /// - Returns: An async operation which can be used to track the success or failure of the operation.
    public func renderToFileAsync(_ destination: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsMediaTranscoding_TranscodeFailureReason, Swift.Double> {
        try COM.NullResult.unwrap(_interop.renderToFileAsync(destination))
    }

    /// Asynchronously renders the MediaComposition to a specified file using the indicated media trimming preference.
    /// - Parameter destination: The file to which this MediaComposition is rendered.
    /// - Parameter trimmingPreference: Specifies whether to be fast or precise when trimming the media.
    /// - Returns: An async operation which can be used to track the success or failure of the operation.
    public func renderToFileAsync(_ destination: WindowsStorage_IStorageFile?, _ trimmingPreference: WindowsMediaEditing_MediaTrimmingPreference) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsMediaTranscoding_TranscodeFailureReason, Swift.Double> {
        try COM.NullResult.unwrap(_interop.renderToFileWithTrimmingPreferenceAsync(destination, trimmingPreference))
    }

    /// Asynchronously renders the MediaComposition to a specified file using the indicated media trimming preference and encoding profile.
    /// - Parameter destination: The file to which this MediaComposition is rendered.
    /// - Parameter trimmingPreference: Specifies whether to be fast or precise when trimming the media.
    /// - Parameter encodingProfile: Specifies the encoding profile to use for rendering the media.
    /// - Returns: An async operation which can be used to track the success or failure of the operation.
    public func renderToFileAsync(_ destination: WindowsStorage_IStorageFile?, _ trimmingPreference: WindowsMediaEditing_MediaTrimmingPreference, _ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsMediaTranscoding_TranscodeFailureReason, Swift.Double> {
        try COM.NullResult.unwrap(_interop.renderToFileWithProfileAsync(destination, trimmingPreference, encodingProfile))
    }

    /// Create a new default media encoding profile which can be modified if necessary.
    /// - Returns: The newly created MediaEncodingProfile.
    public func createDefaultEncodingProfile() throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_interop.createDefaultEncodingProfile())
    }

    /// Creates a new MediaStreamSource.
    /// - Returns: The newly created MediaStreamSource.
    public func generateMediaStreamSource() throws -> WindowsMediaCore_MediaStreamSource {
        try COM.NullResult.unwrap(_interop.generateMediaStreamSource())
    }

    /// Creates a new MediaStreamSource using the specified MediaEncodingProfile.
    /// - Parameter encodingProfile: The MediaEncodingProfile used to specify the encoding properties of the new MediaStreamSource.
    /// - Returns: The newly created MediaStreamSource.
    public func generateMediaStreamSource(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?) throws -> WindowsMediaCore_MediaStreamSource {
        try COM.NullResult.unwrap(_interop.generateMediaStreamSourceWithProfile(encodingProfile))
    }

    /// Creates a new MediaStreamSource used to preview the edited media.
    /// - Parameter scaledWidth: The width of the preview media.
    /// - Parameter scaledHeight: The height of the preview media.
    /// - Returns: The new MediaStreamSource used to preview the edited media.
    public func generatePreviewMediaStreamSource(_ scaledWidth: Swift.Int32, _ scaledHeight: Swift.Int32) throws -> WindowsMediaCore_MediaStreamSource {
        try COM.NullResult.unwrap(_interop.generatePreviewMediaStreamSource(scaledWidth, scaledHeight))
    }

    // MARK: Windows.Media.Editing.IMediaComposition2 members

    /// Gets the list of overlay layers for the media composition.
    /// - Returns: The list of overlay layers for the media composition.
    public var overlayLayers: WindowsFoundationCollections_IVector<WindowsMediaEditing_MediaOverlayLayer?> {
        get throws {
            try COM.NullResult.unwrap(_imediaComposition2.get_OverlayLayers())
        }
    }

    // MARK: Windows.Media.Editing.IMediaCompositionStatics members

    /// Asynchronously loads a MediaComposition from a StorageFile.
    /// - Parameter file: The file from which to load the MediaComposition.
    /// - Returns: An async operation which can be used to track the success or failure of the operation.
    public static func loadAsync(_ file: WindowsStorage_StorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaEditing_MediaComposition?> {
        try COM.NullResult.unwrap(_imediaCompositionStatics.loadAsync(file))
    }

    // MARK: Implementation details

    private var _imediaComposition2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaComposition2>? = nil

    internal var _imediaComposition2: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaComposition2> {
        get throws {
            try _imediaComposition2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaEditing_IMediaComposition2.iid).cast(to: CWinRT.SWRT_WindowsMediaEditing_IMediaComposition2.self)
            }
        }
    }

    deinit {
        _imediaComposition2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Editing.MediaComposition", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imediaCompositionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaCompositionStatics>? = nil

    internal static var _imediaCompositionStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaEditing_IMediaCompositionStatics> {
        get throws {
            try _imediaCompositionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Editing.MediaComposition", id: CWinRT.SWRT_WindowsMediaEditing_IMediaCompositionStatics.iid)
            }
        }
    }
}