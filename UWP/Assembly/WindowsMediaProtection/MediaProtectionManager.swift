// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains a content protection manager object for an application that handles protected media content.
public final class WindowsMediaProtection_MediaProtectionManager: WindowsRuntime.WinRTImport<WindowsMediaProtection_MediaProtectionManagerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaProtection_MediaProtectionManagerProjection.self))
    }

    // MARK: Windows.Media.Protection.IMediaProtectionManager members

    /// Gets a PropertySet object containing any properties attached to the protection manager.
    /// - Returns: The PropertySet object that contains the properties for this protection manager.
    public var properties: WindowsFoundationCollections_IPropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Fires when the load of binary data fails.
    public func componentLoadFailed(adding handler: WindowsMediaProtection_ComponentLoadFailedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ComponentLoadFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: componentLoadFailed)
    }

    public func componentLoadFailed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ComponentLoadFailed(cookie)
    }

    /// Fires when a reboot is needed after the component is renewed.
    public func rebootNeeded(adding handler: WindowsMediaProtection_RebootNeededEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RebootNeeded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: rebootNeeded)
    }

    public func rebootNeeded(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RebootNeeded(cookie)
    }

    /// Fires when a service is requested.
    public func serviceRequested(adding handler: WindowsMediaProtection_ServiceRequestedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ServiceRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: serviceRequested)
    }

    public func serviceRequested(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ServiceRequested(cookie)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Protection.MediaProtectionManager", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}