// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows apps to set and query the current state of High-bandwidth Digital Content Protection (HDCP) between the graphics hardware and the display.
public final class WindowsMediaProtection_HdcpSession: WindowsRuntime.WinRTImport<WindowsMediaProtection_HdcpSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaProtection_HdcpSessionProjection.self))
    }

    // MARK: Windows.Media.Protection.IHdcpSession members

    /// Fires when the protection level of the HdcpSession instance changes.
    public func protectionChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtection_HdcpSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ProtectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: protectionChanged)
    }

    public func protectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ProtectionChanged(token)
    }

    /// Checks whether the effective protection of the HdcpSession instance is at least equal to the given HdcpProtection value.
    /// - Parameter protection: The level of protection to check against the HdcpSession instance's protection level.
    /// - Returns: True if the protection level of the HdcpSession is at least equal to the value of *protection*.
    public func isEffectiveProtectionAtLeast(_ protection: WindowsMediaProtection_HdcpProtection) throws -> Swift.Bool {
        try _interop.isEffectiveProtectionAtLeast(protection)
    }

    /// Returns the effective protection of the HdcpSession instance.
    /// - Returns: The level of protection that the HdcpSession instance currently has.
    public func getEffectiveProtection() throws -> WindowsFoundation_IReference<WindowsMediaProtection_HdcpProtection>? {
        try _interop.getEffectiveProtection()
    }

    /// Asynchronously attempts to set the protection of the HdcpSession instance with the given protection level.
    /// - Parameter protection: The level of protection at which to set the HdcpSession instance.
    /// - Returns: The result of the operation.
    public func setDesiredMinProtectionAsync(_ protection: WindowsMediaProtection_HdcpProtection) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaProtection_HdcpSetProtectionResult> {
        try COM.NullResult.unwrap(_interop.setDesiredMinProtectionAsync(protection))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the HdcpSession instance.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Protection.HdcpSession", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}