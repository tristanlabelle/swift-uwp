// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to various speech synthesizer options.
public final class WindowsMediaSpeechSynthesis_SpeechSynthesizerOptions: WindowsRuntime.WinRTImport<WindowsMediaSpeechSynthesis_SpeechSynthesizerOptionsProjection> {
    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions members

    /// Gets or sets whether sentence boundary metadata is added to a SpeechSynthesisStream object.
    /// - Returns: **true** if sentence boundaries are marked. Otherwise, **false**.
    public var includeSentenceBoundaryMetadata: Swift.Bool {
        get throws {
            try _interop.get_IncludeSentenceBoundaryMetadata()
        }
    }

    /// Gets or sets whether sentence boundary metadata is added to a SpeechSynthesisStream object.
    /// - Returns: **true** if sentence boundaries are marked. Otherwise, **false**.
    public func includeSentenceBoundaryMetadata(_ value: Swift.Bool) throws {
        try _interop.put_IncludeSentenceBoundaryMetadata(value)
    }

    /// Gets or sets whether word boundary metadata is added to a SpeechSynthesisStream object.
    /// - Returns: **true** if word boundaries are marked. Otherwise, **false**.
    public var includeWordBoundaryMetadata: Swift.Bool {
        get throws {
            try _interop.get_IncludeWordBoundaryMetadata()
        }
    }

    /// Gets or sets whether word boundary metadata is added to a SpeechSynthesisStream object.
    /// - Returns: **true** if word boundaries are marked. Otherwise, **false**.
    public func includeWordBoundaryMetadata(_ value: Swift.Bool) throws {
        try _interop.put_IncludeWordBoundaryMetadata(value)
    }

    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions2 members

    /// Gets or sets the tone (relative highness or lowness) of the speech synthesis utterance.
    /// - Returns: The tone of the selected speech synthesis engine (voice).
    public var audioPitch: Swift.Double {
        get throws {
            try _ispeechSynthesizerOptions2.get_AudioPitch()
        }
    }

    /// Gets or sets the tone (relative highness or lowness) of the speech synthesis utterance.
    /// - Returns: The tone of the selected speech synthesis engine (voice).
    public func audioPitch(_ value: Swift.Double) throws {
        try _ispeechSynthesizerOptions2.put_AudioPitch(value)
    }

    /// Gets or sets the loudness of the speech synthesis utterance.
    /// - Returns: The loudness of the selected speech synthesis engine (voice).
    public var audioVolume: Swift.Double {
        get throws {
            try _ispeechSynthesizerOptions2.get_AudioVolume()
        }
    }

    /// Gets or sets the loudness of the speech synthesis utterance.
    /// - Returns: The loudness of the selected speech synthesis engine (voice).
    public func audioVolume(_ value: Swift.Double) throws {
        try _ispeechSynthesizerOptions2.put_AudioVolume(value)
    }

    /// Gets or sets the tempo (including pauses and hesitations) of the speech synthesis utterance.
    /// - Returns: The tempo, relative to the default rate of the selected speech synthesis engine (voice).
    public var speakingRate: Swift.Double {
        get throws {
            try _ispeechSynthesizerOptions2.get_SpeakingRate()
        }
    }

    /// Gets or sets the tempo (including pauses and hesitations) of the speech synthesis utterance.
    /// - Returns: The tempo, relative to the default rate of the selected speech synthesis engine (voice).
    public func speakingRate(_ value: Swift.Double) throws {
        try _ispeechSynthesizerOptions2.put_SpeakingRate(value)
    }

    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesizerOptions3 members

    /// Gets or sets the amount of silence added to the end of the speech synthesis utterance (before another utterance begins).
    /// - Returns: The SpeechAppendedSilence duration.
    public var appendedSilence: WindowsMediaSpeechSynthesis_SpeechAppendedSilence {
        get throws {
            try _ispeechSynthesizerOptions3.get_AppendedSilence()
        }
    }

    /// Gets or sets the amount of silence added to the end of the speech synthesis utterance (before another utterance begins).
    /// - Returns: The SpeechAppendedSilence duration.
    public func appendedSilence(_ value: WindowsMediaSpeechSynthesis_SpeechAppendedSilence) throws {
        try _ispeechSynthesizerOptions3.put_AppendedSilence(value)
    }

    /// Gets or sets the amount of silence added after punctuation in the speech synthesis utterance (before another utterance begins).
    /// - Returns: The SpeechPunctuationSilence duration.
    public var punctuationSilence: WindowsMediaSpeechSynthesis_SpeechPunctuationSilence {
        get throws {
            try _ispeechSynthesizerOptions3.get_PunctuationSilence()
        }
    }

    /// Gets or sets the amount of silence added after punctuation in the speech synthesis utterance (before another utterance begins).
    /// - Returns: The SpeechPunctuationSilence duration.
    public func punctuationSilence(_ value: WindowsMediaSpeechSynthesis_SpeechPunctuationSilence) throws {
        try _ispeechSynthesizerOptions3.put_PunctuationSilence(value)
    }

    // MARK: Implementation details

    private var _ispeechSynthesizerOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions2>? = nil

    internal var _ispeechSynthesizerOptions2: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions2> {
        get throws {
            try _ispeechSynthesizerOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions2.iid).cast(to: CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions2.self)
            }
        }
    }

    private var _ispeechSynthesizerOptions3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions3>? = nil

    internal var _ispeechSynthesizerOptions3: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions3> {
        get throws {
            try _ispeechSynthesizerOptions3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions3.iid).cast(to: CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizerOptions3.self)
            }
        }
    }

    deinit {
        _ispeechSynthesizerOptions2_storage?.release()
        _ispeechSynthesizerOptions3_storage?.release()
    }
}