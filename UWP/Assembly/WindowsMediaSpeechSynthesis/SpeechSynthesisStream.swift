// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports reading and writing audio data generated by the speech synthesis engine (voice) to/from a random access stream.
public final class WindowsMediaSpeechSynthesis_SpeechSynthesisStream: WindowsRuntime.WinRTImport<WindowsMediaSpeechSynthesis_SpeechSynthesisStreamProjection>, WindowsStorageStreams_IRandomAccessStreamWithContentTypeProtocol, WindowsStorageStreams_IContentTypeProviderProtocol, WindowsStorageStreams_IRandomAccessStreamProtocol, WindowsStorageStreams_IOutputStreamProtocol, WindowsFoundation_IClosableProtocol, WindowsStorageStreams_IInputStreamProtocol, WindowsMediaCore_ITimedMetadataTrackProviderProtocol {
    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesisStream members

    /// Gets the collection of timeline markers associated with the SpeechSynthesisStream.
    /// - Returns: When this method completes successfully, it returns a collection of IMediaMarker objects that represent the timeline markers in the stream.
    public var markers: WindowsFoundationCollections_IVectorView<WindowsMedia_IMediaMarker?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Markers())
        }
    }

    // MARK: Windows.Storage.Streams.IContentTypeProvider members

    /// Gets the MIME type of the content of SpeechSynthesisStream.
    /// - Returns: The MIME type (audio/wav) of the stream.
    public var contentType: Swift.String {
        get throws {
            try _icontentTypeProvider.get_ContentType()
        }
    }

    // MARK: Windows.Storage.Streams.IRandomAccessStream members

    /// Gets whether SpeechSynthesisStream can be read from.
    /// - Returns: True if the stream can be read from; otherwise false.
    public var canRead: Swift.Bool {
        get throws {
            try _irandomAccessStream.get_CanRead()
        }
    }

    /// Gets a value that indicates whether SpeechSynthesisStream can be written to.
    /// - Returns: True if the stream can be written to; otherwise false.
    public var canWrite: Swift.Bool {
        get throws {
            try _irandomAccessStream.get_CanWrite()
        }
    }

    /// Gets the current position within the SpeechSynthesisStream.
    /// - Returns: The current position within the stream.
    public var position: Swift.UInt64 {
        get throws {
            try _irandomAccessStream.get_Position()
        }
    }

    /// Gets or sets the size of the SpeechSynthesisStream.
    /// - Returns: The size of the stream.
    public var size: Swift.UInt64 {
        get throws {
            try _irandomAccessStream.get_Size()
        }
    }

    /// Gets or sets the size of the SpeechSynthesisStream.
    /// - Returns: The size of the stream.
    public func size(_ value: Swift.UInt64) throws {
        try _irandomAccessStream.put_Size(value)
    }

    /// Retrieves an input stream at a specified location in SpeechSynthesisStream.
    /// - Parameter position: The location in the stream at which to begin.
    /// - Returns: The input stream.
    public func getInputStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_irandomAccessStream.getInputStreamAt(position))
    }

    /// Retrieves an output stream at a specified location in SpeechSynthesisStream.
    /// - Parameter position: The location in the stream at which to begin.
    /// - Returns: The output stream.
    public func getOutputStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IOutputStream {
        try COM.NullResult.unwrap(_irandomAccessStream.getOutputStreamAt(position))
    }

    /// Goes to the specified position within SpeechSynthesisStream.
    /// - Parameter position: The desired position within the stream.
    public func seek(_ position: Swift.UInt64) throws {
        try _irandomAccessStream.seek(position)
    }

    /// Creates a copy of SpeechSynthesisStream that references the same bytes as the original stream.
    /// - Returns: The new stream.
    public func cloneStream() throws -> WindowsStorageStreams_IRandomAccessStream {
        try COM.NullResult.unwrap(_irandomAccessStream.cloneStream())
    }

    // MARK: Windows.Storage.Streams.IOutputStream members

    /// Writes data asynchronously in a sequential stream.
    /// - Parameter buffer: The buffer into which the asynchronous writer operation places the bytes to write.
    /// - Returns: An asynchronous operation that includes progress updates. For more information, see WriteAsync method.
    public func writeAsync(_ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperationWithProgress<Swift.UInt32, Swift.UInt32> {
        try COM.NullResult.unwrap(_ioutputStream.writeAsync(buffer))
    }

    /// Flushes data asynchronously in a sequential stream.
    /// - Returns: An asynchronous operation. For more information, see FlushAsync method.
    public func flushAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ioutputStream.flushAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases system resources that are exposed by SpeechSynthesisStream.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Storage.Streams.IInputStream members

    /// Reads data asynchronously in a sequential stream.
    /// - Parameter buffer: The buffer into which the asynchronous read operation places the bytes that are read.
    /// - Parameter count: The number of bytes to read that is less than or equal to the Capacity value.
    /// - Parameter options: Specifies the type of the asynchronous read operation.
    /// - Returns: An asynchronous operation that includes progress updates. For more information, see ReadAsync method.
    public func readAsync(_ buffer: WindowsStorageStreams_IBuffer?, _ count: Swift.UInt32, _ options: WindowsStorageStreams_InputStreamOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsStorageStreams_IBuffer?, Swift.UInt32> {
        try COM.NullResult.unwrap(_iinputStream.readAsync(buffer, count, options))
    }

    // MARK: Windows.Media.Core.ITimedMetadataTrackProvider members

    /// Gets the collection of optional word and sentence boundaries in the speech synthesis stream as specified by the SpeechSynthesizer.Options property.
    /// - Returns: A collection of TimedMetadataTrack objects.
    public var timedMetadataTracks: WindowsFoundationCollections_IVectorView<WindowsMediaCore_TimedMetadataTrack?> {
        get throws {
            try COM.NullResult.unwrap(_itimedMetadataTrackProvider.get_TimedMetadataTracks())
        }
    }

    // MARK: Implementation details

    private var _irandomAccessStreamWithContentType_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamWithContentType>? = nil

    internal var _irandomAccessStreamWithContentType: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamWithContentType> {
        get throws {
            try _irandomAccessStreamWithContentType_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamWithContentType.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamWithContentType.self)
            }
        }
    }

    private var _icontentTypeProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IContentTypeProvider>? = nil

    internal var _icontentTypeProvider: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IContentTypeProvider> {
        get throws {
            try _icontentTypeProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IContentTypeProvider.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IContentTypeProvider.self)
            }
        }
    }

    private var _irandomAccessStream_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStream>? = nil

    internal var _irandomAccessStream: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStream> {
        get throws {
            try _irandomAccessStream_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStream.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStream.self)
            }
        }
    }

    private var _ioutputStream_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IOutputStream>? = nil

    internal var _ioutputStream: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IOutputStream> {
        get throws {
            try _ioutputStream_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IOutputStream.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IOutputStream.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iinputStream_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IInputStream>? = nil

    internal var _iinputStream: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IInputStream> {
        get throws {
            try _iinputStream_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IInputStream.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IInputStream.self)
            }
        }
    }

    private var _itimedMetadataTrackProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackProvider>? = nil

    internal var _itimedMetadataTrackProvider: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackProvider> {
        get throws {
            try _itimedMetadataTrackProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackProvider.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackProvider.self)
            }
        }
    }

    deinit {
        _irandomAccessStreamWithContentType_storage?.release()
        _icontentTypeProvider_storage?.release()
        _irandomAccessStream_storage?.release()
        _ioutputStream_storage?.release()
        _iclosable_storage?.release()
        _iinputStream_storage?.release()
        _itimedMetadataTrackProvider_storage?.release()
    }
}