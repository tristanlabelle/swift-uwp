// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the functionality of an installed speech synthesis engine (voice) for Text-to-speech (TTS) services.
public final class WindowsMediaSpeechSynthesis_SpeechSynthesizer: WindowsRuntime.WinRTImport<WindowsMediaSpeechSynthesis_SpeechSynthesizerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaSpeechSynthesis_SpeechSynthesizerProjection.self))
    }

    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesizer members

    /// Gets or sets the speech synthesis engine (voice).
    /// - Returns: A speech synthesis engine (or voice). The default value is the current system voice.
    public var voice: WindowsMediaSpeechSynthesis_VoiceInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Voice())
        }
    }

    /// Gets or sets the speech synthesis engine (voice).
    /// - Returns: A speech synthesis engine (or voice). The default value is the current system voice.
    public func voice(_ value: WindowsMediaSpeechSynthesis_VoiceInformation?) throws {
        try _interop.put_Voice(value)
    }

    /// Asynchronously generate speech output from a string.
    /// - Parameter text: The text to speak.
    /// - Returns: A SpeechSynthesisStream that represents the speech generated from the text.
    public func synthesizeTextToStreamAsync(_ text: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaSpeechSynthesis_SpeechSynthesisStream?> {
        try COM.NullResult.unwrap(_interop.synthesizeTextToStreamAsync(text))
    }

    /// Asynchronously generate and control speech output from a Speech Synthesis Markup Language (SSML) Version 1.1 string.
    /// - Parameter Ssml: The SSML-modified text to speak.
    /// - Returns: A SpeechSynthesisStream that represents the speech generated from the Speech Synthesis Markup Language (SSML) Version 1.1.
    public func synthesizeSsmlToStreamAsync(_ Ssml: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaSpeechSynthesis_SpeechSynthesisStream?> {
        try COM.NullResult.unwrap(_interop.synthesizeSsmlToStreamAsync(Ssml))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the SpeechSynthesizer and releases system resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.SpeechSynthesis.ISpeechSynthesizer2 members

    /// Gets a reference to the collection of options that can be set on the SpeechSynthesizer object.
    /// - Returns: The speech synthesizer options.
    public var options: WindowsMediaSpeechSynthesis_SpeechSynthesizerOptions {
        get throws {
            try COM.NullResult.unwrap(_ispeechSynthesizer2.get_Options())
        }
    }

    // MARK: Windows.Media.SpeechSynthesis.IInstalledVoicesStatic members

    /// Gets a collection of all installed speech synthesis engines (voices).
    /// - Returns: A collection of VoiceInformation objects.
    public static var allVoices: WindowsFoundationCollections_IVectorView<WindowsMediaSpeechSynthesis_VoiceInformation?> {
        get throws {
            try COM.NullResult.unwrap(_iinstalledVoicesStatic.get_AllVoices())
        }
    }

    /// Gets the default speech synthesis engine (voice).
    /// - Returns: The default voice.
    public static var defaultVoice: WindowsMediaSpeechSynthesis_VoiceInformation {
        get throws {
            try COM.NullResult.unwrap(_iinstalledVoicesStatic.get_DefaultVoice())
        }
    }

    // MARK: Windows.Media.SpeechSynthesis.IInstalledVoicesStatic2 members

    /// Asynchronously attempts to set the voice used for speech synthesis on an IoT device.
    /// - Parameter voice: One of the installed speech synthesis engines (voices).
    /// - Returns: An asynchronous operation that returns true if the set operation was a success. Otherwise, returns false.
    public static func trySetDefaultVoiceAsync(_ voice: WindowsMediaSpeechSynthesis_VoiceInformation?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iinstalledVoicesStatic2.trySetDefaultVoiceAsync(voice))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _ispeechSynthesizer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizer2>? = nil

    internal var _ispeechSynthesizer2: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizer2> {
        get throws {
            try _ispeechSynthesizer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizer2.iid).cast(to: CWinRT.SWRT_WindowsMediaSpeechSynthesis_ISpeechSynthesizer2.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _ispeechSynthesizer2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.SpeechSynthesis.SpeechSynthesizer", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iinstalledVoicesStatic_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic>? = nil

    internal static var _iinstalledVoicesStatic: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic> {
        get throws {
            try _iinstalledVoicesStatic_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.SpeechSynthesis.SpeechSynthesizer", id: CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic.iid)
            }
        }
    }

    private static var _iinstalledVoicesStatic2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic2>? = nil

    internal static var _iinstalledVoicesStatic2: COM.COMInterop<CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic2> {
        get throws {
            try _iinstalledVoicesStatic2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.SpeechSynthesis.SpeechSynthesizer", id: CWinRT.SWRT_WindowsMediaSpeechSynthesis_IInstalledVoicesStatic2.iid)
            }
        }
    }
}