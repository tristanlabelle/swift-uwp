// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a network connection, which includes either the currently connected network or prior network connections. Provides information about the connection status and connectivity statistics.
public final class WindowsNetworkingConnectivity_ConnectionProfile: WindowsRuntime.WinRTImport<WindowsNetworkingConnectivity_ConnectionProfileProjection> {
    // MARK: Windows.Networking.Connectivity.IConnectionProfile members

    /// Gets the object representing the network adapter providing connectivity for the connection.
    /// - Returns: The network adapter object.
    public var networkAdapter: WindowsNetworkingConnectivity_NetworkAdapter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NetworkAdapter())
        }
    }

    /// Retrieves the security settings for the network.
    /// - Returns: The current network security settings.
    public var networkSecuritySettings: WindowsNetworkingConnectivity_NetworkSecuritySettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NetworkSecuritySettings())
        }
    }

    /// Gets the name of the connection profile.
    /// - Returns: The name of the connection profile.
    public var profileName: Swift.String {
        get throws {
            try _interop.get_ProfileName()
        }
    }

    /// Gets the network connectivity level for this connection. This value indicates what network resources, if any, are currently available.
    /// - Returns: The level of network connectivity.
    public func getNetworkConnectivityLevel() throws -> WindowsNetworkingConnectivity_NetworkConnectivityLevel {
        try _interop.getNetworkConnectivityLevel()
    }

    /// Retrieves names associated with the network with which the connection is currently established.
    /// - Returns: An array of string values representing friendly names used to identify the local endpoint.
    public func getNetworkNames() throws -> WindowsFoundationCollections_IVectorView<Swift.String> {
        try COM.NullResult.unwrap(_interop.getNetworkNames())
    }

    /// Gets the cost information for the connection.
    /// - Returns: The cost information for the connection.
    public func getConnectionCost() throws -> WindowsNetworkingConnectivity_ConnectionCost {
        try COM.NullResult.unwrap(_interop.getConnectionCost())
    }

    /// Gets the current status of the data plan associated with the connection.
    /// - Returns: Current data plan status information.
    public func getDataPlanStatus() throws -> WindowsNetworkingConnectivity_DataPlanStatus {
        try COM.NullResult.unwrap(_interop.getDataPlanStatus())
    }

    /// Gets the estimated data usage for a connection during over a specific period of time.
    /// - Parameter StartTime: The start date/time for the usage data request.
    /// - Parameter EndTime: The end date/time for the usage data request.
    /// - Returns: The requested local data usage information.
    public func getLocalUsage(_ StartTime: WindowsFoundation_DateTime, _ EndTime: WindowsFoundation_DateTime) throws -> WindowsNetworkingConnectivity_DataUsage {
        try COM.NullResult.unwrap(_interop.getLocalUsage(StartTime, EndTime))
    }

    /// Gets the estimated data usage for a connection over a specific period of time and roaming state.
    /// - Parameter StartTime: The start date/time for the usage data request.
    /// - Parameter EndTime: The end date/time for the usage data request.
    /// - Parameter States: The roaming state to scope the request to.
    /// - Returns: The requested local data usage information.
    public func getLocalUsage(_ StartTime: WindowsFoundation_DateTime, _ EndTime: WindowsFoundation_DateTime, _ States: WindowsNetworkingConnectivity_RoamingStates) throws -> WindowsNetworkingConnectivity_DataUsage {
        try COM.NullResult.unwrap(_interop.getLocalUsagePerRoamingStates(StartTime, EndTime, States))
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfile2 members

    /// Gets a value that indicates if connection profile is a WLAN (WiFi) connection. This determines whether or not WlanConnectionProfileDetails is null.
    /// - Returns: Indicates if the connection profile represents a WLAN (WiFi) connection.
    public var isWlanConnectionProfile: Swift.Bool {
        get throws {
            try _iconnectionProfile2.get_IsWlanConnectionProfile()
        }
    }

    /// Gets a value that indicates if connection profile is a WWAN (mobile) connection. This determines whether or not WwanConnectionProfileDetails is null.
    /// - Returns: Indicates if the connection profile represents a WWAN (mobile) connection.
    public var isWwanConnectionProfile: Swift.Bool {
        get throws {
            try _iconnectionProfile2.get_IsWwanConnectionProfile()
        }
    }

    /// Gets the ID of the network operator who provisioned the connection profile.
    /// - Returns: The network operator ID.
    public var serviceProviderGuid: Foundation.UUID? {
        get throws {
            try _iconnectionProfile2.get_ServiceProviderGuid()
        }
    }

    /// Gets a WlanConnectionProfileDetails object that provides a method for retrieving information specific to a WLAN (WiFi) connection.
    /// - Returns: Defines a method to access information specific to a WLAN connection.
    public var wlanConnectionProfileDetails: WindowsNetworkingConnectivity_WlanConnectionProfileDetails {
        get throws {
            try COM.NullResult.unwrap(_iconnectionProfile2.get_WlanConnectionProfileDetails())
        }
    }

    /// Gets a WwanConnectionProfileDetails object containing the properties and methods used to retrieve information specific to mobile broadband connections.
    /// - Returns: Defines methods and properties used to retrieve information specific to a mobile broadband connection.
    public var wwanConnectionProfileDetails: WindowsNetworkingConnectivity_WwanConnectionProfileDetails {
        get throws {
            try COM.NullResult.unwrap(_iconnectionProfile2.get_WwanConnectionProfileDetails())
        }
    }

    /// Gets a value that indicates the current number of signal bars displayed by the Windows UI for the connection.
    /// - Returns: An integer value within a range of 0-5 that corresponds to the number of signal bars displayed by the UI.
    public func getSignalBars() throws -> Swift.UInt8? {
        try _iconnectionProfile2.getSignalBars()
    }

    /// Gets the current domain authentication status for a network connection. Possible values are defined by DomainConnectivityLevel.
    /// - Returns: A value indicating the authentication status for a connection to a network domain.
    public func getDomainConnectivityLevel() throws -> WindowsNetworkingConnectivity_DomainConnectivityLevel {
        try _iconnectionProfile2.getDomainConnectivityLevel()
    }

    /// Gets a list of the estimated data traffic and connection duration over a specified period of time, for a specific network usage state.
    /// - Parameter startTime: The start time over which to retrieve data. Can be no more than 60 days prior to the current time. If the specified granularity is PerMinute, the start time can be no more than 120 minutes prior to the current time.
    /// - Parameter endTime: The end time over which to retrieve data.
    /// - Parameter granularity: The desired granularity of the returned usage statistics. Each elements in the list corresponds to the network usage per the specified granularity, for example, usage per hour.
    /// - Parameter states: The state of the connection profile for which usage data should be returned.
    /// - Returns: When the method completes, it returns a list of NetworkUsage objects, which indicate the sent and received values, in bytes, and the total amount of time the profile was connected during the corresponding time interval.
    public func getNetworkUsageAsync(_ startTime: WindowsFoundation_DateTime, _ endTime: WindowsFoundation_DateTime, _ granularity: WindowsNetworkingConnectivity_DataUsageGranularity, _ states: WindowsNetworkingConnectivity_NetworkUsageStates) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingConnectivity_NetworkUsage?>?> {
        try COM.NullResult.unwrap(_iconnectionProfile2.getNetworkUsageAsync(startTime, endTime, granularity, states))
    }

    /// Gets a list of ConnectivityInterval objects, which indicate the timestamp for when the network connection began, and a time-span for the duration of that connection.
    /// - Parameter startTime: The start time over which to retrieve data. Can be no more than 60 days prior to the current time.
    /// - Parameter endTime: The end time over which to retrieve data.
    /// - Parameter states: The state of the connection profile for which usage data should be returned.
    /// - Returns: When the method completes, it returns a list of ConnectivityInterval objects, which indicate the start time and duration for the current or prior connections.
    public func getConnectivityIntervalsAsync(_ startTime: WindowsFoundation_DateTime, _ endTime: WindowsFoundation_DateTime, _ states: WindowsNetworkingConnectivity_NetworkUsageStates) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingConnectivity_ConnectivityInterval?>?> {
        try COM.NullResult.unwrap(_iconnectionProfile2.getConnectivityIntervalsAsync(startTime, endTime, states))
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfile3 members

    /// Gets network usage data for each individual application. This method is only supported in a Windows Phone 8.x app.
    /// - Parameter startTime: The start time of the usage window.
    /// - Parameter endTime: The end time of the usage window.
    /// - Parameter states: The state of the connection profile for which usage data should be returned.
    /// - Returns: When the method completes, it returns a list of AttributedNetworkUsage objects, which indicate the sent and received values, in bytes, and the total amount of time the app was connected during the corresponding time interval.
    public func getAttributedNetworkUsageAsync(_ startTime: WindowsFoundation_DateTime, _ endTime: WindowsFoundation_DateTime, _ states: WindowsNetworkingConnectivity_NetworkUsageStates) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingConnectivity_AttributedNetworkUsage?>?> {
        try COM.NullResult.unwrap(_iconnectionProfile3.getAttributedNetworkUsageAsync(startTime, endTime, states))
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfile4 members

    /// Returns the bytes sent and bytes received for each MCC and MNC combination (the combination is represented by a ProviderId ).
    /// - Parameter startTime: The start time over which to retrieve data. Can be no more than 60 days prior to the current time. If the specified granularity is PerMinute, the start time can be no more than 120 minutes prior to the current time.
    /// - Parameter endTime: The end time over which to retrieve data.
    /// - Parameter states: The state of the connection profile for which usage data should be returned.
    /// - Returns: Returns a single object containing the bytes send and bytes received for the ProviderId.
    public func getProviderNetworkUsageAsync(_ startTime: WindowsFoundation_DateTime, _ endTime: WindowsFoundation_DateTime, _ states: WindowsNetworkingConnectivity_NetworkUsageStates) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingConnectivity_ProviderNetworkUsage?>?> {
        try COM.NullResult.unwrap(_iconnectionProfile4.getProviderNetworkUsageAsync(startTime, endTime, states))
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfile5 members

    /// Gets a value that indicates whether or not it is possible to delete this connection profile. This can help determine whether TryDeleteAsync is likely to succeed.
    /// - Returns: `true` if it is possible to delete this connection profile, otherwise `false`.
    public var canDelete: Swift.Bool {
        get throws {
            try _iconnectionProfile5.get_CanDelete()
        }
    }

    /// Asynchronously attempts to delete this connection profile; the operation may or may not succeed. Examine the return value to determine the outcome of the operation.
    /// - Returns: An asynchronous operation object which, when it completes, returns a ConnectionProfileDeleteStatus indicating whether or not the connection profile was deleted.
    public func tryDeleteAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingConnectivity_ConnectionProfileDeleteStatus> {
        try COM.NullResult.unwrap(_iconnectionProfile5.tryDeleteAsync())
    }

    // MARK: Implementation details

    private var _iconnectionProfile2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile2>? = nil

    internal var _iconnectionProfile2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile2> {
        get throws {
            try _iconnectionProfile2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile2.self)
            }
        }
    }

    private var _iconnectionProfile3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile3>? = nil

    internal var _iconnectionProfile3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile3> {
        get throws {
            try _iconnectionProfile3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile3.self)
            }
        }
    }

    private var _iconnectionProfile4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile4>? = nil

    internal var _iconnectionProfile4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile4> {
        get throws {
            try _iconnectionProfile4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile4.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile4.self)
            }
        }
    }

    private var _iconnectionProfile5_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile5>? = nil

    internal var _iconnectionProfile5: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile5> {
        get throws {
            try _iconnectionProfile5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile5.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfile5.self)
            }
        }
    }

    deinit {
        _iconnectionProfile2_storage?.release()
        _iconnectionProfile3_storage?.release()
        _iconnectionProfile4_storage?.release()
        _iconnectionProfile5_storage?.release()
    }
}