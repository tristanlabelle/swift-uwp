// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The RoutePolicy class is used to represent the traffic routing policy for a special PDP Context/APN.
public final class WindowsNetworkingConnectivity_RoutePolicy: WindowsRuntime.WinRTImport<WindowsNetworkingConnectivity_RoutePolicyProjection> {
    // MARK: Windows.Networking.Connectivity.IRoutePolicyFactory members

    public convenience init(_ connectionProfile: WindowsNetworkingConnectivity_ConnectionProfile?, _ hostName: WindowsNetworking_HostName?, _ type: WindowsNetworking_DomainNameType) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iroutePolicyFactory.createRoutePolicy(connectionProfile, hostName, type)))
    }

    // MARK: Windows.Networking.Connectivity.IRoutePolicy members

    /// Retrieves the connection profile for an access point connection.
    /// - Returns: The associated connection profile.
    public var connectionProfile: WindowsNetworkingConnectivity_ConnectionProfile {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ConnectionProfile())
        }
    }

    /// Provides the host name for the route policy to the special PDP context.
    /// - Returns: The host name.
    public var hostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_HostName())
        }
    }

    /// Indicates if the HostName is a suffix or a fully qualified domain name reference. Possible values are defined by DomainNameType.
    /// - Returns: The domain type of the HostName object.
    public var hostNameType: WindowsNetworking_DomainNameType {
        get throws {
            try _interop.get_HostNameType()
        }
    }

    // MARK: Implementation details

    private static var _iroutePolicyFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IRoutePolicyFactory>? = nil

    internal static var _iroutePolicyFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IRoutePolicyFactory> {
        get throws {
            try _iroutePolicyFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Connectivity.RoutePolicy", id: CWinRT.SWRT_WindowsNetworkingConnectivity_IRoutePolicyFactory.iid)
            }
        }
    }
}