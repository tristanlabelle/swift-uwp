// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This class contains properties used to specify an Access Point Name (APN) for a 3GPP based cellular Data Connection (PDP context).
public final class WindowsNetworkingConnectivity_CellularApnContext: WindowsRuntime.WinRTImport<WindowsNetworkingConnectivity_CellularApnContextProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingConnectivity_CellularApnContextProjection.self))
    }

    // MARK: Windows.Networking.Connectivity.ICellularApnContext members

    /// Indicates the name of the access point to establish a connection with.
    /// - Returns: The access point name.
    public var accessPointName: Swift.String {
        get throws {
            try _interop.get_AccessPointName()
        }
    }

    /// Indicates the name of the access point to establish a connection with.
    /// - Returns: The access point name.
    public func accessPointName(_ value: Swift.String) throws {
        try _interop.put_AccessPointName(value)
    }

    /// Indicates the authentication method, as defined by CellularApnAuthenticationType, that is used by the access point.
    /// - Returns: The authentication type.
    public var authenticationType: WindowsNetworkingConnectivity_CellularApnAuthenticationType {
        get throws {
            try _interop.get_AuthenticationType()
        }
    }

    /// Indicates the authentication method, as defined by CellularApnAuthenticationType, that is used by the access point.
    /// - Returns: The authentication type.
    public func authenticationType(_ value: WindowsNetworkingConnectivity_CellularApnAuthenticationType) throws {
        try _interop.put_AuthenticationType(value)
    }

    /// Indicates if data compression will be used at the data link for header and data transfer.
    /// - Returns: A Boolean value. TRUE if enabled; otherwise FALSE.
    public var isCompressionEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsCompressionEnabled()
        }
    }

    /// Indicates if data compression will be used at the data link for header and data transfer.
    /// - Returns: A Boolean value. TRUE if enabled; otherwise FALSE.
    public func isCompressionEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsCompressionEnabled(value)
    }

    /// Indicates the password used to authenticate when connecting to the access point.
    /// - Returns: The password associated with the user name.
    public var password: Swift.String {
        get throws {
            try _interop.get_Password()
        }
    }

    /// Indicates the password used to authenticate when connecting to the access point.
    /// - Returns: The password associated with the user name.
    public func password(_ value: Swift.String) throws {
        try _interop.put_Password(value)
    }

    /// Indicates the provider ID associated with the access point.
    /// - Returns: The provider ID.
    public var providerId: Swift.String {
        get throws {
            try _interop.get_ProviderId()
        }
    }

    /// Indicates the provider ID associated with the access point.
    /// - Returns: The provider ID.
    public func providerId(_ value: Swift.String) throws {
        try _interop.put_ProviderId(value)
    }

    /// Indicates the user name used to authenticate when connecting to the access point.
    /// - Returns: The user name.
    public var userName: Swift.String {
        get throws {
            try _interop.get_UserName()
        }
    }

    /// Indicates the user name used to authenticate when connecting to the access point.
    /// - Returns: The user name.
    public func userName(_ value: Swift.String) throws {
        try _interop.put_UserName(value)
    }

    // MARK: Windows.Networking.Connectivity.ICellularApnContext2 members

    /// Gets the name of a cellular profile.
    /// - Returns: The name of a cellular profile.
    public var profileName: Swift.String {
        get throws {
            try _icellularApnContext2.get_ProfileName()
        }
    }

    /// Gets the name of a cellular profile.
    /// - Returns: The name of a cellular profile.
    public func profileName(_ value: Swift.String) throws {
        try _icellularApnContext2.put_ProfileName(value)
    }

    // MARK: Implementation details

    private var _icellularApnContext2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_ICellularApnContext2>? = nil

    internal var _icellularApnContext2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_ICellularApnContext2> {
        get throws {
            try _icellularApnContext2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_ICellularApnContext2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_ICellularApnContext2.self)
            }
        }
    }

    deinit {
        _icellularApnContext2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Connectivity.CellularApnContext", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}