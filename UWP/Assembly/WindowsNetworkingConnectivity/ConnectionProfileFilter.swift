// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The ConnectionProfileFilter class defines a set of properties that are used to improve the relevance of FindConnectionProfilesAsync results.
public final class WindowsNetworkingConnectivity_ConnectionProfileFilter: WindowsRuntime.WinRTImport<WindowsNetworkingConnectivity_ConnectionProfileFilterProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingConnectivity_ConnectionProfileFilterProjection.self))
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfileFilter members

    /// Indicates if connection profiles that represent currently established connections are included in query results.
    /// - Returns: A Boolean value that determines if profiles for established connections are included.
    public var isConnected: Swift.Bool {
        get throws {
            try _interop.get_IsConnected()
        }
    }

    /// Indicates if connection profiles that represent currently established connections are included in query results.
    /// - Returns: A Boolean value that determines if profiles for established connections are included.
    public func isConnected(_ value: Swift.Bool) throws {
        try _interop.put_IsConnected(value)
    }

    /// Indicates if connection profiles that represent WLAN (WiFi) connections are included in query results.
    /// - Returns: A Boolean value that indicates if WLAN (WiFi) connections are included.
    public var isWlanConnectionProfile: Swift.Bool {
        get throws {
            try _interop.get_IsWlanConnectionProfile()
        }
    }

    /// Indicates if connection profiles that represent WLAN (WiFi) connections are included in query results.
    /// - Returns: A Boolean value that indicates if WLAN (WiFi) connections are included.
    public func isWlanConnectionProfile(_ value: Swift.Bool) throws {
        try _interop.put_IsWlanConnectionProfile(value)
    }

    /// Indicates whether connection profiles that represent WWAN (mobile) connections are included in query results.
    /// - Returns: A Boolean value that indicates if WWAN (mobile) connections are included.
    public var isWwanConnectionProfile: Swift.Bool {
        get throws {
            try _interop.get_IsWwanConnectionProfile()
        }
    }

    /// Indicates whether connection profiles that represent WWAN (mobile) connections are included in query results.
    /// - Returns: A Boolean value that indicates if WWAN (mobile) connections are included.
    public func isWwanConnectionProfile(_ value: Swift.Bool) throws {
        try _interop.put_IsWwanConnectionProfile(value)
    }

    /// Defines a specific NetworkCostType value to query for.
    /// - Returns: The connection network cost type.
    public var networkCostType: WindowsNetworkingConnectivity_NetworkCostType {
        get throws {
            try _interop.get_NetworkCostType()
        }
    }

    /// Defines a specific NetworkCostType value to query for.
    /// - Returns: The connection network cost type.
    public func networkCostType(_ value: WindowsNetworkingConnectivity_NetworkCostType) throws {
        try _interop.put_NetworkCostType(value)
    }

    /// Indicates a specific network operator ID to query for.
    /// - Returns: The network operator ID.
    public var serviceProviderGuid: Foundation.UUID? {
        get throws {
            try _interop.get_ServiceProviderGuid()
        }
    }

    /// Indicates a specific network operator ID to query for.
    /// - Returns: The network operator ID.
    public func serviceProviderGuid(_ value: Foundation.UUID?) throws {
        try _interop.put_ServiceProviderGuid(value)
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfileFilter2 members

    /// Gets or sets whether background data usage is restricted by this connection profile filter.
    /// - Returns: True when background data usage is restricted. False if background data usage is not restricted.
    public var isBackgroundDataUsageRestricted: Swift.Bool? {
        get throws {
            try _iconnectionProfileFilter2.get_IsBackgroundDataUsageRestricted()
        }
    }

    /// Gets or sets whether background data usage is restricted by this connection profile filter.
    /// - Returns: True when background data usage is restricted. False if background data usage is not restricted.
    public func isBackgroundDataUsageRestricted(_ value: Swift.Bool?) throws {
        try _iconnectionProfileFilter2.put_IsBackgroundDataUsageRestricted(value)
    }

    /// Gets or sets whether the data limit has been exceeded under the current connection profile filter.
    /// - Returns: True when the data limit has been exceeded. False otherwise.v
    public var isOverDataLimit: Swift.Bool? {
        get throws {
            try _iconnectionProfileFilter2.get_IsOverDataLimit()
        }
    }

    /// Gets or sets whether the data limit has been exceeded under the current connection profile filter.
    /// - Returns: True when the data limit has been exceeded. False otherwise.v
    public func isOverDataLimit(_ value: Swift.Bool?) throws {
        try _iconnectionProfileFilter2.put_IsOverDataLimit(value)
    }

    /// Gets or sets whether roaming is active in the connection profile filter.
    /// - Returns: True when roaming, false otherwise.
    public var isRoaming: Swift.Bool? {
        get throws {
            try _iconnectionProfileFilter2.get_IsRoaming()
        }
    }

    /// Gets or sets whether roaming is active in the connection profile filter.
    /// - Returns: True when roaming, false otherwise.
    public func isRoaming(_ value: Swift.Bool?) throws {
        try _iconnectionProfileFilter2.put_IsRoaming(value)
    }

    /// Gets available data as raw data.
    /// - Returns: Gets available raw data.
    public var rawData: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_iconnectionProfileFilter2.get_RawData())
        }
    }

    // MARK: Windows.Networking.Connectivity.IConnectionProfileFilter3 members

    /// Gets or sets the purpose group GUID that a connection profile must match in order to be included in query results.
    /// - Returns: The purpose group GUID that a connection profile must match.
    public var purposeGuid: Foundation.UUID? {
        get throws {
            try _iconnectionProfileFilter3.get_PurposeGuid()
        }
    }

    /// Gets or sets the purpose group GUID that a connection profile must match in order to be included in query results.
    /// - Returns: The purpose group GUID that a connection profile must match.
    public func purposeGuid(_ value: Foundation.UUID?) throws {
        try _iconnectionProfileFilter3.put_PurposeGuid(value)
    }

    // MARK: Implementation details

    private var _iconnectionProfileFilter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter2>? = nil

    internal var _iconnectionProfileFilter2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter2> {
        get throws {
            try _iconnectionProfileFilter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter2.self)
            }
        }
    }

    private var _iconnectionProfileFilter3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter3>? = nil

    internal var _iconnectionProfileFilter3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter3> {
        get throws {
            try _iconnectionProfileFilter3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectionProfileFilter3.self)
            }
        }
    }

    deinit {
        _iconnectionProfileFilter2_storage?.release()
        _iconnectionProfileFilter3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Connectivity.ConnectionProfileFilter", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}