// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines values that indicate the type of encryption used for authentication.
public struct WindowsNetworkingConnectivity_NetworkEncryptionType: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// No encryption enabled.
    public static let none = Self()

    /// Encryption method unknown.
    public static let unknown = Self(rawValue: 1)

    /// Specifies a WEP cipher algorithm with a cipher key of any length.
    public static let wep = Self(rawValue: 2)

    /// Specifies a Wired Equivalent Privacy (WEP) algorithm, which is the RC4-based algorithm that is specified in the IEEE 802.11-1999 standard. This enumerator specifies the WEP cipher algorithm with a 40-bit cipher key.
    public static let wep40 = Self(rawValue: 3)

    /// Specifies a WEP cipher algorithm with a 104-bit cipher key.
    public static let wep104 = Self(rawValue: 4)

    /// Specifies a Temporal Key Integrity Protocol (TKIP) algorithm, which is the RC4-based cipher suite that is based on the algorithms that are defined in the WPA specification and IEEE 802.11i-2004 standard. This cipher also uses the Michael Message Integrity Code (MIC) algorithm for forgery protection.
    public static let tkip = Self(rawValue: 5)

    /// Specifies an AES-CCMP algorithm, as specified in the IEEE 802.11i-2004 standard and RFC 3610. Advanced Encryption Standard (AES) is the encryption algorithm defined in FIPS PUB 197.
    public static let ccmp = Self(rawValue: 6)

    /// Specifies a Wifi Protected Access (WPA) Use Group Key cipher suite. For more information about the Use Group Key cipher suite, refer to Clause 7.3.2.25.1 of the IEEE 802.11i-2004 standard.
    public static let wpaUseGroup = Self(rawValue: 7)

    /// Specifies a Robust Security Network (RSN) Use Group Key cipher suite. For more information about the Use Group Key cipher suite, refer to Clause 7.3.2.25.1 of the IEEE 802.11i-2004 standard.
    public static let rsnUseGroup = Self(rawValue: 8)

    /// Specifies an encryption type defined by an independent hardware vendor (IHV).
    public static let ihv = Self(rawValue: 9)
    public static let gcmp = Self(rawValue: 10)
    public static let gcmp256 = Self(rawValue: 11)
}