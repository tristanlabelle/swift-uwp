// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Methods defined by the ConnectivityManager class enable enforcement of traffic routing on a specific network adapter for the specified destination suffix. Once a policy is set using AddHttpRoutePolicy, traffic that matches the policy will either be routed or dropped.
public enum WindowsNetworkingConnectivity_ConnectivityManager {
    // MARK: Windows.Networking.Connectivity.IConnectivityManagerStatics members

    /// Establishes a connection to a specific access point on a network. The request is defined using a CellularApnContext object.
    /// - Parameter cellularApnContext: Provides specific details about the APN.
    /// - Returns: The established APN connection.
    public static func acquireConnectionAsync(_ cellularApnContext: WindowsNetworkingConnectivity_CellularApnContext?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingConnectivity_ConnectionSession?> {
        try COM.NullResult.unwrap(_iconnectivityManagerStatics.acquireConnectionAsync(cellularApnContext))
    }

    /// Specifies a RoutePolicy that the Http stack (WinInet) will follow when routing traffic. Routing policies are only available for cellular profiles
    /// - Parameter routePolicy: Indicates the policy for traffic routing.
    public static func addHttpRoutePolicy(_ routePolicy: WindowsNetworkingConnectivity_RoutePolicy?) throws {
        try _iconnectivityManagerStatics.addHttpRoutePolicy(routePolicy)
    }

    /// Removes a previously specified RoutePolicy from the Http stack (WinInet).
    /// - Parameter routePolicy: The RoutePolicy to remove.
    public static func removeHttpRoutePolicy(_ routePolicy: WindowsNetworkingConnectivity_RoutePolicy?) throws {
        try _iconnectivityManagerStatics.removeHttpRoutePolicy(routePolicy)
    }

    // MARK: Implementation details

    private static var _iconnectivityManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectivityManagerStatics>? = nil

    internal static var _iconnectivityManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectivityManagerStatics> {
        get throws {
            try _iconnectivityManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Connectivity.ConnectivityManager", id: CWinRT.SWRT_WindowsNetworkingConnectivity_IConnectivityManagerStatics.iid)
            }
        }
    }
}