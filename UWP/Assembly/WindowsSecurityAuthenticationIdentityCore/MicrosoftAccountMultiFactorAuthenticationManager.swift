// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This API is for internal use only and should not be used in your code.
public final class WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorAuthenticationManager: WindowsRuntime.WinRTImport<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorAuthenticationManagerProjection> {
    // MARK: Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorAuthenticationManager members

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Parameter codeLength: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func getOneTimePassCodeAsync(_ userAccountId: Swift.String, _ codeLength: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorOneTimeCodedInfo?> {
        try COM.NullResult.unwrap(_interop.getOneTimePassCodeAsync(userAccountId, codeLength))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Parameter authenticationToken: This API is for internal use only and should not be used in your code.
    /// - Parameter wnsChannelId: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func addDeviceAsync(_ userAccountId: Swift.String, _ authenticationToken: Swift.String, _ wnsChannelId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.addDeviceAsync(userAccountId, authenticationToken, wnsChannelId))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func removeDeviceAsync(_ userAccountId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.removeDeviceAsync(userAccountId))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Parameter channelUri: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func updateWnsChannelAsync(_ userAccountId: Swift.String, _ channelUri: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.updateWnsChannelAsync(userAccountId, channelUri))
    }

    public func getSessionsAsync(_ userAccountIdList: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorGetSessionsResult?> {
        try COM.NullResult.unwrap(_interop.getSessionsAsync(userAccountIdList))
    }

    public func getSessionsAndUnregisteredAccountsAsync(_ userAccountIdList: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorUnregisteredAccountsAndSessionInfo?> {
        try COM.NullResult.unwrap(_interop.getSessionsAndUnregisteredAccountsAsync(userAccountIdList))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter sessionAuthentictionStatus: This API is for internal use only and should not be used in your code.
    /// - Parameter authenticationSessionInfo: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func approveSessionAsync(_ sessionAuthentictionStatus: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorSessionAuthenticationStatus, _ authenticationSessionInfo: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorSessionInfo?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.approveSessionUsingAuthSessionInfoAsync(sessionAuthentictionStatus, authenticationSessionInfo))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter sessionAuthentictionStatus: This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Parameter sessionId: This API is for internal use only and should not be used in your code.
    /// - Parameter sessionAuthenticationType: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func approveSessionAsync(_ sessionAuthentictionStatus: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorSessionAuthenticationStatus, _ userAccountId: Swift.String, _ sessionId: Swift.String, _ sessionAuthenticationType: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorAuthenticationType) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.approveSessionAsync(sessionAuthentictionStatus, userAccountId, sessionId, sessionAuthenticationType))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter authenticationSessionInfo: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func denySessionAsync(_ authenticationSessionInfo: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorSessionInfo?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.denySessionUsingAuthSessionInfoAsync(authenticationSessionInfo))
    }

    /// This API is for internal use only and should not be used in your code.
    /// - Parameter userAccountId: This API is for internal use only and should not be used in your code.
    /// - Parameter sessionId: This API is for internal use only and should not be used in your code.
    /// - Parameter sessionAuthenticationType: This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public func denySessionAsync(_ userAccountId: Swift.String, _ sessionId: Swift.String, _ sessionAuthenticationType: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorAuthenticationType) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorServiceResponse> {
        try COM.NullResult.unwrap(_interop.denySessionAsync(userAccountId, sessionId, sessionAuthenticationType))
    }

    // MARK: Windows.Security.Authentication.Identity.Core.IMicrosoftAccountMultiFactorAuthenticatorStatics members

    /// This API is for internal use only and should not be used in your code.
    /// - Returns: This API is for internal use only and should not be used in your code.
    public static var current: WindowsSecurityAuthenticationIdentityCore_MicrosoftAccountMultiFactorAuthenticationManager {
        get throws {
            try COM.NullResult.unwrap(_imicrosoftAccountMultiFactorAuthenticatorStatics.get_Current())
        }
    }

    // MARK: Implementation details

    private static var _imicrosoftAccountMultiFactorAuthenticatorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationIdentityCore_IMicrosoftAccountMultiFactorAuthenticatorStatics>? = nil

    internal static var _imicrosoftAccountMultiFactorAuthenticatorStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationIdentityCore_IMicrosoftAccountMultiFactorAuthenticatorStatics> {
        get throws {
            try _imicrosoftAccountMultiFactorAuthenticatorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Identity.Core.MicrosoftAccountMultiFactorAuthenticationManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationIdentityCore_IMicrosoftAccountMultiFactorAuthenticatorStatics.iid)
            }
        }
    }
}