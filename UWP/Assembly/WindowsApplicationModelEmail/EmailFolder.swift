// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an email folder.
public final class WindowsApplicationModelEmail_EmailFolder: WindowsRuntime.WinRTImport<WindowsApplicationModelEmail_EmailFolderProjection> {
    // MARK: Windows.ApplicationModel.Email.IEmailFolder members

    /// Gets or sets the display name for the folder.
    /// - Returns: The display name for the folder.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets or sets the display name for the folder.
    /// - Returns: The display name for the folder.
    public func displayName(_ value: Swift.String) throws {
        try _interop.put_DisplayName(value)
    }

    /// Gets the ID of the email folder.
    /// - Returns: The ID of the email folder.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets a Boolean value indicating if the folder is sync enabled.
    /// - Returns: A Boolean value indicating if the folder is sync enabled.
    public var isSyncEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsSyncEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if the folder is sync enabled.
    /// - Returns: A Boolean value indicating if the folder is sync enabled.
    public func isSyncEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsSyncEnabled(value)
    }

    /// Gets the type of the folder such as inbox, outbox, drafts, sent, and so on.
    /// - Returns: The type of the folder such as inbox, outbox, drafts, sent, and so on.
    public var kind: WindowsApplicationModelEmail_EmailSpecialFolderKind {
        get throws {
            try _interop.get_Kind()
        }
    }

    /// Gets or sets the last time the folder was successfully synced with the server.
    /// - Returns: The last time the folder was successfully synced with the server.
    public var lastSuccessfulSyncTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_LastSuccessfulSyncTime()
        }
    }

    /// Gets or sets the last time the folder was successfully synced with the server.
    /// - Returns: The last time the folder was successfully synced with the server.
    public func lastSuccessfulSyncTime(_ value: WindowsFoundation_DateTime) throws {
        try _interop.put_LastSuccessfulSyncTime(value)
    }

    /// Gets the ID of the mailbox that contains this folder.
    /// - Returns: The ID of the mailbox that contains this folder.
    public var mailboxId: Swift.String {
        get throws {
            try _interop.get_MailboxId()
        }
    }

    /// Gets the ID of this folder's parent folder.
    /// - Returns: The ID of this folder's parent folder.
    public var parentFolderId: Swift.String {
        get throws {
            try _interop.get_ParentFolderId()
        }
    }

    /// Gets or sets the remote ID of the corresponding folder on the server.
    /// - Returns: The remote ID of the corresponding folder on the server.
    public var remoteId: Swift.String {
        get throws {
            try _interop.get_RemoteId()
        }
    }

    /// Gets or sets the remote ID of the corresponding folder on the server.
    /// - Returns: The remote ID of the corresponding folder on the server.
    public func remoteId(_ value: Swift.String) throws {
        try _interop.put_RemoteId(value)
    }

    /// Asynchronously creates a new folder.
    /// - Parameter name: The name for the new folder.
    /// - Returns: Returns the newly created folder.
    public func createFolderAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailFolder?> {
        try COM.NullResult.unwrap(_interop.createFolderAsync(name))
    }

    /// Asynchronously deletes this folder.
    /// - Returns: An async action indicating that the operation has completed.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteAsync())
    }

    /// Asynchronously finds the child folders of this folder.
    /// - Returns: The list of child folders.
    public func findChildFoldersAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelEmail_EmailFolder?>?> {
        try COM.NullResult.unwrap(_interop.findChildFoldersAsync())
    }

    /// Gets an instance of the EmailConversationReader class.
    /// - Returns: The conversation reader.
    public func getConversationReader() throws -> WindowsApplicationModelEmail_EmailConversationReader {
        try COM.NullResult.unwrap(_interop.getConversationReader())
    }

    /// Gets an instance of the EmailConversationReader class using the specified query options.
    /// - Parameter options: The query options to use when finding the conversation reader.
    /// - Returns: The conversation reader that matches the query options.
    public func getConversationReader(_ options: WindowsApplicationModelEmail_EmailQueryOptions?) throws -> WindowsApplicationModelEmail_EmailConversationReader {
        try COM.NullResult.unwrap(_interop.getConversationReaderWithOptions(options))
    }

    /// Asynchronously gets the specified message from the folder.
    /// - Parameter id: The ID of the message to retrieve.
    /// - Returns: The message specified in the *id* parameter.
    public func getMessageAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailMessage?> {
        try COM.NullResult.unwrap(_interop.getMessageAsync(id))
    }

    /// Gets an instance of the EmailMessageReader class.
    /// - Returns: The message reader.
    public func getMessageReader() throws -> WindowsApplicationModelEmail_EmailMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReader())
    }

    /// Gets an instance of the EmailMessageReader class using the specified query options.
    /// - Parameter options: The query options to use when finding the message reader.
    /// - Returns: The message reader that matches the query options.
    public func getMessageReader(_ options: WindowsApplicationModelEmail_EmailQueryOptions?) throws -> WindowsApplicationModelEmail_EmailMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReaderWithOptions(options))
    }

    /// Asynchronously gets the counts of email items such as flagged emails, important emails, unread emails, total emails, and so on.
    /// - Returns: An EmailItemCounts object containing the counts of email items such as flagged emails, important emails, unread emails, total emails, and so on.
    public func getMessageCountsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailItemCounts?> {
        try COM.NullResult.unwrap(_interop.getMessageCountsAsync())
    }

    /// Asynchronously attempts to move this folder to the specified folder.
    /// - Parameter newParentFolder: The new location for this folder.
    /// - Returns: A Boolean value indicating if the move was successful.
    public func tryMoveAsync(_ newParentFolder: WindowsApplicationModelEmail_EmailFolder?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryMoveAsync(newParentFolder))
    }

    /// Asynchronously attempts to move this folder to the specified folder and rename it in the process.
    /// - Parameter newParentFolder: The new location for this folder.
    /// - Parameter newFolderName: The name for the folder in the new location.
    /// - Returns: A Boolean value indicating if the move was successful.
    public func tryMoveAsync(_ newParentFolder: WindowsApplicationModelEmail_EmailFolder?, _ newFolderName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryMoveWithNewNameAsync(newParentFolder, newFolderName))
    }

    /// Asynchronously attempts to save changes to the folder.
    /// - Returns: A Boolean value indicating if the save was successful.
    public func trySaveAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySaveAsync())
    }

    /// Asynchronously saves the specified email message to the folder.
    /// - Parameter message: The email message to save.
    /// - Returns: An async action indicating that the operation has completed.
    public func saveMessageAsync(_ message: WindowsApplicationModelEmail_EmailMessage?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveMessageAsync(message))
    }

    // MARK: Implementation details
}