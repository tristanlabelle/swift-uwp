// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an email conversation.
public final class WindowsApplicationModelEmail_EmailConversation: WindowsRuntime.WinRTImport<WindowsApplicationModelEmail_EmailConversationProjection> {
    // MARK: Windows.ApplicationModel.Email.IEmailConversation members

    /// Gets the EmailFlagState for the conversation.
    /// - Returns: The EmailFlagState for the conversation.
    public var flagState: WindowsApplicationModelEmail_EmailFlagState {
        get throws {
            try _interop.get_FlagState()
        }
    }

    /// Gets a Boolean value indicating if the conversation has an attachment.
    /// - Returns: A Boolean value indicating if the conversation has an attachment.
    public var hasAttachment: Swift.Bool {
        get throws {
            try _interop.get_HasAttachment()
        }
    }

    /// Gets the unique identifier for the EmailConversation.
    /// - Returns: The unique identifier for the EmailConversation.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the value that specifies the importance of the conversation; normal, high or low.
    /// - Returns: The value that specifies the importance of the conversation; normal, high or low.
    public var importance: WindowsApplicationModelEmail_EmailImportance {
        get throws {
            try _interop.get_Importance()
        }
    }

    /// Gets the last EmailMessageResponseKind for the conversation.
    /// - Returns: The last EmailMessageResponseKind for the conversation.
    public var lastEmailResponseKind: WindowsApplicationModelEmail_EmailMessageResponseKind {
        get throws {
            try _interop.get_LastEmailResponseKind()
        }
    }

    /// Gets the latest sender in the conversation.
    /// - Returns: The latest sender in the conversation.
    public var latestSender: WindowsApplicationModelEmail_EmailRecipient {
        get throws {
            try COM.NullResult.unwrap(_interop.get_LatestSender())
        }
    }

    /// Gets the ID for the mailbox.
    /// - Returns: The ID for the mailbox.
    public var mailboxId: Swift.String {
        get throws {
            try _interop.get_MailboxId()
        }
    }

    /// Gets the number of messages in the conversation.
    /// - Returns: The number of messages in the conversation.
    public var messageCount: Swift.UInt32 {
        get throws {
            try _interop.get_MessageCount()
        }
    }

    /// Gets the ID of the most recent message in the conversation.
    /// - Returns: The ID of the most recent message in the conversation.
    public var mostRecentMessageId: Swift.String {
        get throws {
            try _interop.get_MostRecentMessageId()
        }
    }

    /// Gets the time of the most recent message in the conversation.
    /// - Returns: The time of the most recent message in the conversation.
    public var mostRecentMessageTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_MostRecentMessageTime()
        }
    }

    /// Gets a preview of the latest message in the conversation.
    /// - Returns: A preview of the latest message in the conversation.
    public var preview: Swift.String {
        get throws {
            try _interop.get_Preview()
        }
    }

    /// Gets the subject of the latest message in the conversation.
    /// - Returns: The subject of the latest message in the conversation.
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets the number of unread messages in the conversation.
    /// - Returns: The number of unread messages in the conversation.
    public var unreadMessageCount: Swift.UInt32 {
        get throws {
            try _interop.get_UnreadMessageCount()
        }
    }

    /// Asynchronously gets a batch of messages in the conversation.
    /// - Returns: The batch of messages.
    public func findMessagesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelEmail_EmailMessage?>?> {
        try COM.NullResult.unwrap(_interop.findMessagesAsync())
    }

    /// Asynchronously gets a batch of messages in the conversation.
    /// - Parameter count: The size of the batch of messages to retrieve.
    /// - Returns: The batch of messages.
    public func findMessagesAsync(_ count: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelEmail_EmailMessage?>?> {
        try COM.NullResult.unwrap(_interop.findMessagesWithCountAsync(count))
    }

    // MARK: Implementation details
}