// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the information associated with a meeting.
public final class WindowsApplicationModelEmail_EmailMeetingInfo: WindowsRuntime.WinRTImport<WindowsApplicationModelEmail_EmailMeetingInfoProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelEmail_EmailMeetingInfoProjection.self))
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMeetingInfo members

    /// Gets or sets a Boolean value indicating whether the proposal of a new time is allowed.
    /// - Returns: A Boolean value indicating whether the proposal of a new time is allowed.
    public var allowNewTimeProposal: Swift.Bool {
        get throws {
            try _interop.get_AllowNewTimeProposal()
        }
    }

    /// Gets or sets a Boolean value indicating whether the proposal of a new time is allowed.
    /// - Returns: A Boolean value indicating whether the proposal of a new time is allowed.
    public func allowNewTimeProposal(_ value: Swift.Bool) throws {
        try _interop.put_AllowNewTimeProposal(value)
    }

    /// Gets or sets the start time for a meeting.
    /// - Returns: The start time for a meeting.
    public var appointmentOriginalStartTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_AppointmentOriginalStartTime()
        }
    }

    /// Gets or sets the start time for a meeting.
    /// - Returns: The start time for a meeting.
    public func appointmentOriginalStartTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_AppointmentOriginalStartTime(value)
    }

    /// Gets or sets the server identifier for the appointment associated with an email message.
    /// - Returns: The server identifier for the appointment associated with an email message.
    public var appointmentRoamingId: Swift.String {
        get throws {
            try _interop.get_AppointmentRoamingId()
        }
    }

    /// Gets or sets the server identifier for the appointment associated with an email message.
    /// - Returns: The server identifier for the appointment associated with an email message.
    public func appointmentRoamingId(_ value: Swift.String) throws {
        try _interop.put_AppointmentRoamingId(value)
    }

    /// Gets or sets the duration of the meeting.
    /// - Returns: The duration of the meeting.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets the duration of the meeting.
    /// - Returns: The duration of the meeting.
    public func duration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Duration(value)
    }

    /// Gets or sets a Boolean value indicating whether the meeting is an all day event.
    /// - Returns: A Boolean value indicating whether the meeting is an all day event.
    public var isAllDay: Swift.Bool {
        get throws {
            try _interop.get_IsAllDay()
        }
    }

    /// Gets or sets a Boolean value indicating whether the meeting is an all day event.
    /// - Returns: A Boolean value indicating whether the meeting is an all day event.
    public func isAllDay(_ value: Swift.Bool) throws {
        try _interop.put_IsAllDay(value)
    }

    /// Gets or sets a Boolean value indicating whether a response to the meeting request is required.
    /// - Returns: A Boolean value indicating whether a response to the meeting request is required.
    public var isResponseRequested: Swift.Bool {
        get throws {
            try _interop.get_IsResponseRequested()
        }
    }

    /// Gets or sets a Boolean value indicating whether a response to the meeting request is required.
    /// - Returns: A Boolean value indicating whether a response to the meeting request is required.
    public func isResponseRequested(_ value: Swift.Bool) throws {
        try _interop.put_IsResponseRequested(value)
    }

    /// Gets or sets the meeting location.
    /// - Returns: The meeting location.
    public var location: Swift.String {
        get throws {
            try _interop.get_Location()
        }
    }

    /// Gets or sets the meeting location.
    /// - Returns: The meeting location.
    public func location(_ value: Swift.String) throws {
        try _interop.put_Location(value)
    }

    /// Gets or sets the proposed duration for the proposed meeting change.
    /// - Returns: The proposed duration for the proposed meeting change.
    public var proposedDuration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_ProposedDuration()
        }
    }

    /// Gets or sets the proposed duration for the proposed meeting change.
    /// - Returns: The proposed duration for the proposed meeting change.
    public func proposedDuration(_ duration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_ProposedDuration(duration)
    }

    /// Gets or sets the proposed start time for the proposed meeting change.
    /// - Returns: The proposed start time for the proposed meeting change.
    public var proposedStartTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_ProposedStartTime()
        }
    }

    /// Gets or sets the proposed start time for the proposed meeting change.
    /// - Returns: The proposed start time for the proposed meeting change.
    public func proposedStartTime(_ proposedStartTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_ProposedStartTime(proposedStartTime)
    }

    /// Gets or sets the recurrence parameters.
    /// - Returns: The recurrence parameters.
    public var recurrence: WindowsApplicationModelAppointments_AppointmentRecurrence {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Recurrence())
        }
    }

    /// Gets or sets the recurrence parameters.
    /// - Returns: The recurrence parameters.
    public func recurrence(_ value: WindowsApplicationModelAppointments_AppointmentRecurrence?) throws {
        try _interop.put_Recurrence(value)
    }

    /// Gets or sets the first instance of the recurrence pattern.
    /// - Returns: The first instance of the recurrence pattern.
    public var recurrenceStartTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_RecurrenceStartTime()
        }
    }

    /// Gets or sets the first instance of the recurrence pattern.
    /// - Returns: The first instance of the recurrence pattern.
    public func recurrenceStartTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_RecurrenceStartTime(value)
    }

    /// Gets or sets the change number on the server that identifies the meeting email change number.
    /// - Returns: The change number on the server that identifies the meeting email change number.
    public var remoteChangeNumber: Swift.UInt64 {
        get throws {
            try _interop.get_RemoteChangeNumber()
        }
    }

    /// Gets or sets the change number on the server that identifies the meeting email change number.
    /// - Returns: The change number on the server that identifies the meeting email change number.
    public func remoteChangeNumber(_ value: Swift.UInt64) throws {
        try _interop.put_RemoteChangeNumber(value)
    }

    /// Gets or sets the start time for the meeting.
    /// - Returns: The start time for the meeting.
    public var startTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_StartTime()
        }
    }

    /// Gets or sets the start time for the meeting.
    /// - Returns: The start time for the meeting.
    public func startTime(_ value: WindowsFoundation_DateTime) throws {
        try _interop.put_StartTime(value)
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMeetingInfo2 members

    /// Gets a Boolean value indicating if the meeting is reported as out of date by the server.
    /// - Returns: A Boolean value indicating if the meeting is reported as out of date by the server.
    public var isReportedOutOfDateByServer: Swift.Bool {
        get throws {
            try _iemailMeetingInfo2.get_IsReportedOutOfDateByServer()
        }
    }

    // MARK: Implementation details

    private var _iemailMeetingInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMeetingInfo2>? = nil

    internal var _iemailMeetingInfo2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMeetingInfo2> {
        get throws {
            try _iemailMeetingInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMeetingInfo2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMeetingInfo2.self)
            }
        }
    }

    deinit {
        _iemailMeetingInfo2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Email.EmailMeetingInfo", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}