// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The functionality described in this topic is not available to all UWP apps. As part of the store app submission process, Microsoft must approve your use of these APIs and provision your developer account before you can publish an app that uses them.
public final class WindowsApplicationModelEmail_EmailStore: WindowsRuntime.WinRTImport<WindowsApplicationModelEmail_EmailStoreProjection> {
    // MARK: Windows.ApplicationModel.Email.IEmailStore members

    /// Gets all mailboxes within the current scope.
    /// - Returns: A collection of mailboxes.
    public func findMailboxesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelEmail_EmailMailbox?>?> {
        try COM.NullResult.unwrap(_interop.findMailboxesAsync())
    }

    /// Gets a batch of email conversations.
    /// - Returns: A batch of email conversations.
    public func getConversationReader() throws -> WindowsApplicationModelEmail_EmailConversationReader {
        try COM.NullResult.unwrap(_interop.getConversationReader())
    }

    /// Gets a batch of email conversations using the specified email query options.
    /// - Parameter options: The email query options.
    /// - Returns: A batch of email conversations.
    public func getConversationReader(_ options: WindowsApplicationModelEmail_EmailQueryOptions?) throws -> WindowsApplicationModelEmail_EmailConversationReader {
        try COM.NullResult.unwrap(_interop.getConversationReaderWithOptions(options))
    }

    /// Gets a message reader.
    /// - Returns: The email message reader.
    public func getMessageReader() throws -> WindowsApplicationModelEmail_EmailMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReader())
    }

    /// Gets a message reader using the specified query options.
    /// - Parameter options: Specified query options.
    /// - Returns: An email message reader.
    public func getMessageReader(_ options: WindowsApplicationModelEmail_EmailQueryOptions?) throws -> WindowsApplicationModelEmail_EmailMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReaderWithOptions(options))
    }

    /// Gets a mailbox from an identifier.
    /// - Parameter id: The identifier for the mailbox.
    /// - Returns: The mailbox described by the identifier.
    public func getMailboxAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailMailbox?> {
        try COM.NullResult.unwrap(_interop.getMailboxAsync(id))
    }

    /// Gets an email conversation from the provided identifier.
    /// - Parameter id: The identifier of the conversation.
    /// - Returns: An email conversation.
    public func getConversationAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailConversation?> {
        try COM.NullResult.unwrap(_interop.getConversationAsync(id))
    }

    /// Gets an email folder from an identifier.
    /// - Parameter id: The identifier for the email folder.
    /// - Returns: The folder described by the identifier.
    public func getFolderAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailFolder?> {
        try COM.NullResult.unwrap(_interop.getFolderAsync(id))
    }

    /// Gets the specified email message.
    /// - Parameter id: The identifier for the email message.
    /// - Returns: The specified email message.
    public func getMessageAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailMessage?> {
        try COM.NullResult.unwrap(_interop.getMessageAsync(id))
    }

    /// Allows an app to create an email account from an account name and an email address.
    /// - Parameter accountName: The name of the account.
    /// - Parameter accountAddress: The email address associated with the account.
    /// - Returns: An email mailbox.
    public func createMailboxAsync(_ accountName: Swift.String, _ accountAddress: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailMailbox?> {
        try COM.NullResult.unwrap(_interop.createMailboxAsync(accountName, accountAddress))
    }

    /// Allows an app to create an email account from an account name, an email address, and the user data account in which the mailbox will reside.
    /// - Parameter accountName: The name of the account.
    /// - Parameter accountAddress: The email address associated with the account.
    /// - Parameter userDataAccountId: The user data account identifier associated with this user.
    /// - Returns: An email mailbox.
    public func createMailboxAsync(_ accountName: Swift.String, _ accountAddress: Swift.String, _ userDataAccountId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelEmail_EmailMailbox?> {
        try COM.NullResult.unwrap(_interop.createMailboxInAccountAsync(accountName, accountAddress, userDataAccountId))
    }

    // MARK: Implementation details
}