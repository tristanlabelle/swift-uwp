// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an email message.
public final class WindowsApplicationModelEmail_EmailMessage: WindowsRuntime.WinRTImport<WindowsApplicationModelEmail_EmailMessageProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelEmail_EmailMessageProjection.self))
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMessage members

    /// Gets the attachments of the email message.
    /// - Returns: The attachments to the email message.
    public var attachments: WindowsFoundationCollections_IVector<WindowsApplicationModelEmail_EmailAttachment?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Attachments())
        }
    }

    /// Gets the recipients BCC'd to the email message.
    /// - Returns: The recipients BCC'd to the email message.
    public var bcc: WindowsFoundationCollections_IVector<WindowsApplicationModelEmail_EmailRecipient?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Bcc())
        }
    }

    /// Gets or sets the body of the email message.
    /// - Returns: The body of the email message.
    public var body: Swift.String {
        get throws {
            try _interop.get_Body()
        }
    }

    /// Gets or sets the body of the email message.
    /// - Returns: The body of the email message.
    public func body(_ value: Swift.String) throws {
        try _interop.put_Body(value)
    }

    /// Gets the recipients CC'd to the email message.
    /// - Returns: The recipients CC'd to the email message.
    public var cc: WindowsFoundationCollections_IVector<WindowsApplicationModelEmail_EmailRecipient?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CC())
        }
    }

    /// Gets or sets the subject of the email message.
    /// - Returns: The subject of the email.
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets or sets the subject of the email message.
    /// - Returns: The subject of the email.
    public func subject(_ value: Swift.String) throws {
        try _interop.put_Subject(value)
    }

    /// Gets the direct recipients of the email message.
    /// - Returns: The recipients of the email message.
    public var to: WindowsFoundationCollections_IVector<WindowsApplicationModelEmail_EmailRecipient?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_To())
        }
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMessage2 members

    /// Gets or sets a Boolean value indicating whether images may be embedded in the html encoded email message.
    /// - Returns: A Boolean value indicating whether images may be embedded in the html encoded email message.
    public var allowInternetImages: Swift.Bool {
        get throws {
            try _iemailMessage2.get_AllowInternetImages()
        }
    }

    /// Gets or sets a Boolean value indicating whether images may be embedded in the html encoded email message.
    /// - Returns: A Boolean value indicating whether images may be embedded in the html encoded email message.
    public func allowInternetImages(_ value: Swift.Bool) throws {
        try _iemailMessage2.put_AllowInternetImages(value)
    }

    /// Gets the current change number which is incremented for each change made to an email message.
    /// - Returns: The current change number .
    public var changeNumber: Swift.UInt64 {
        get throws {
            try _iemailMessage2.get_ChangeNumber()
        }
    }

    /// Gets the identifier for a conversation.
    /// - Returns: The identifier for a conversation.
    public var conversationId: Swift.String {
        get throws {
            try _iemailMessage2.get_ConversationId()
        }
    }

    /// Gets or sets the download status of an email message.
    /// - Returns: The download status of an email message.
    public var downloadState: WindowsApplicationModelEmail_EmailMessageDownloadState {
        get throws {
            try _iemailMessage2.get_DownloadState()
        }
    }

    /// Gets or sets the download status of an email message.
    /// - Returns: The download status of an email message.
    public func downloadState(_ value: WindowsApplicationModelEmail_EmailMessageDownloadState) throws {
        try _iemailMessage2.put_DownloadState(value)
    }

    /// Gets or sets the estimated size, in bytes, of an email message download.
    /// - Returns: The estimated size, in bytes, of an email message download.
    public var estimatedDownloadSizeInBytes: Swift.UInt32 {
        get throws {
            try _iemailMessage2.get_EstimatedDownloadSizeInBytes()
        }
    }

    /// Gets or sets the estimated size, in bytes, of an email message download.
    /// - Returns: The estimated size, in bytes, of an email message download.
    public func estimatedDownloadSizeInBytes(_ value: Swift.UInt32) throws {
        try _iemailMessage2.put_EstimatedDownloadSizeInBytes(value)
    }

    /// Represents the flag status of an email message.
    /// - Returns: The flag status of an email message.
    public var flagState: WindowsApplicationModelEmail_EmailFlagState {
        get throws {
            try _iemailMessage2.get_FlagState()
        }
    }

    /// Represents the flag status of an email message.
    /// - Returns: The flag status of an email message.
    public func flagState(_ value: WindowsApplicationModelEmail_EmailFlagState) throws {
        try _iemailMessage2.put_FlagState(value)
    }

    /// Gets the identifier of a folder in the inbox.
    /// - Returns: The identifier of a folder in the inbox.
    public var folderId: Swift.String {
        get throws {
            try _iemailMessage2.get_FolderId()
        }
    }

    /// Gets a Boolean value indicating whether this email message contains partial bodies.
    /// - Returns: The Boolean value indicating whether this email message contains partial bodies.
    public var hasPartialBodies: Swift.Bool {
        get throws {
            try _iemailMessage2.get_HasPartialBodies()
        }
    }

    /// Gets the identifier of an email message.
    /// - Returns: The identifier of an email message.
    public var id: Swift.String {
        get throws {
            try _iemailMessage2.get_Id()
        }
    }

    /// Gets the importance of an email message.
    /// - Returns: The importance of an email message.
    public var importance: WindowsApplicationModelEmail_EmailImportance {
        get throws {
            try _iemailMessage2.get_Importance()
        }
    }

    /// Gets the importance of an email message.
    /// - Returns: The importance of an email message.
    public func importance(_ value: WindowsApplicationModelEmail_EmailImportance) throws {
        try _iemailMessage2.put_Importance(value)
    }

    /// Gets the identifier for the email message to which this message is a response.
    /// - Returns: The identifier for the email message to which this message is a response.
    public var inResponseToMessageId: Swift.String {
        get throws {
            try _iemailMessage2.get_InResponseToMessageId()
        }
    }

    /// Gets or sets the Information Rights Management (IRM) information for this email message.
    /// - Returns: The Information Rights Management (IRM) information for this email message.
    public var irmInfo: WindowsApplicationModelEmail_EmailIrmInfo {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage2.get_IrmInfo())
        }
    }

    /// Gets or sets the Information Rights Management (IRM) information for this email message.
    /// - Returns: The Information Rights Management (IRM) information for this email message.
    public func irmInfo(_ value: WindowsApplicationModelEmail_EmailIrmInfo?) throws {
        try _iemailMessage2.put_IrmInfo(value)
    }

    /// Gets a Boolean value indicating whether this message is a draft.
    /// - Returns: A Boolean value indicating whether this message is a draft.
    public var isDraftMessage: Swift.Bool {
        get throws {
            try _iemailMessage2.get_IsDraftMessage()
        }
    }

    /// Gets a Boolean value indicating whether the email message has been read.
    /// - Returns: A Boolean value indicating whether the email message has been read.
    public var isRead: Swift.Bool {
        get throws {
            try _iemailMessage2.get_IsRead()
        }
    }

    /// Gets a Boolean value indicating whether the email message has been read.
    /// - Returns: A Boolean value indicating whether the email message has been read.
    public func isRead(_ value: Swift.Bool) throws {
        try _iemailMessage2.put_IsRead(value)
    }

    /// Gets a Boolean value indicating whether the email message has been seen.
    /// - Returns: A Boolean value indicating whether the email message has been seen.
    public var isSeen: Swift.Bool {
        get throws {
            try _iemailMessage2.get_IsSeen()
        }
    }

    /// Gets a Boolean value indicating whether the email message has been seen.
    /// - Returns: A Boolean value indicating whether the email message has been seen.
    public func isSeen(_ value: Swift.Bool) throws {
        try _iemailMessage2.put_IsSeen(value)
    }

    /// Gets a Boolean value indicating whether the email message is a temporary server search message.
    /// - Returns: The Boolean value indicating whether the email message is a temporary server search message.
    public var isServerSearchMessage: Swift.Bool {
        get throws {
            try _iemailMessage2.get_IsServerSearchMessage()
        }
    }

    /// Gets a Boolean value indicating whether the response email message is allowed to attempt a smart send, only sending that portion of the email message that has changed.
    /// - Returns: A Boolean value indicating whether the response email message is allowed to attempt a smart send.
    public var isSmartSendable: Swift.Bool {
        get throws {
            try _iemailMessage2.get_IsSmartSendable()
        }
    }

    /// Gets the last kind of response sent in reference to this email message.
    /// - Returns: The last kind of response sent in reference to this email message.
    public var lastResponseKind: WindowsApplicationModelEmail_EmailMessageResponseKind {
        get throws {
            try _iemailMessage2.get_LastResponseKind()
        }
    }

    /// Gets the last kind of response sent in reference to this email message.
    /// - Returns: The last kind of response sent in reference to this email message.
    public func lastResponseKind(_ value: WindowsApplicationModelEmail_EmailMessageResponseKind) throws {
        try _iemailMessage2.put_LastResponseKind(value)
    }

    /// Gets the identifier of the mailbox.
    /// - Returns: The identifier of the mailbox.
    public var mailboxId: Swift.String {
        get throws {
            try _iemailMessage2.get_MailboxId()
        }
    }

    /// Gets the information associated with this meeting.
    /// - Returns: The information associated with this meeting.
    public var meetingInfo: WindowsApplicationModelEmail_EmailMeetingInfo {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage2.get_MeetingInfo())
        }
    }

    /// Gets the information associated with this meeting.
    /// - Returns: The information associated with this meeting.
    public func meetingInfo(_ value: WindowsApplicationModelEmail_EmailMeetingInfo?) throws {
        try _iemailMessage2.put_MeetingInfo(value)
    }

    /// Gets or sets a string that indicates the class of the message.
    /// - Returns: The string that indicates the class of the message.
    public var messageClass: Swift.String {
        get throws {
            try _iemailMessage2.get_MessageClass()
        }
    }

    /// Gets or sets a string that indicates the class of the message.
    /// - Returns: The string that indicates the class of the message.
    public func messageClass(_ value: Swift.String) throws {
        try _iemailMessage2.put_MessageClass(value)
    }

    /// Gets the subject line of an email message stripped of additional prefixes such as fwd: and re:
    /// - Returns: The subject line of an email message stripped of additional prefixes such as fwd: and re:
    public var normalizedSubject: Swift.String {
        get throws {
            try _iemailMessage2.get_NormalizedSubject()
        }
    }

    /// Gets or sets the integer that identifies the original flavor of the character set used so that when the email message is condensed from wide character format (16-bit) to ASCII or other 8-bit encoding, in cases of later encoding questions, this integer can be used to recreate the original character set.
    /// - Returns: The integer that identifies the original flavor of the character set used
    public var originalCodePage: Swift.Int32 {
        get throws {
            try _iemailMessage2.get_OriginalCodePage()
        }
    }

    /// Gets or sets the integer that identifies the original flavor of the character set used so that when the email message is condensed from wide character format (16-bit) to ASCII or other 8-bit encoding, in cases of later encoding questions, this integer can be used to recreate the original character set.
    /// - Returns: The integer that identifies the original flavor of the character set used
    public func originalCodePage(_ value: Swift.Int32) throws {
        try _iemailMessage2.put_OriginalCodePage(value)
    }

    /// Gets or sets the short preview string that represents the longer email message in the list view of emails.
    /// - Returns: The short preview string that represents the longer email message in the list view of emails.
    public var preview: Swift.String {
        get throws {
            try _iemailMessage2.get_Preview()
        }
    }

    /// Gets or sets the short preview string that represents the longer email message in the list view of emails.
    /// - Returns: The short preview string that represents the longer email message in the list view of emails.
    public func preview(_ value: Swift.String) throws {
        try _iemailMessage2.put_Preview(value)
    }

    /// Gets or sets the identifier that can be used by a service provider to access the email message on the client machine.
    /// - Returns: The identifier that can be used by a service provider to access the email message on the client machine.
    public var remoteId: Swift.String {
        get throws {
            try _iemailMessage2.get_RemoteId()
        }
    }

    /// Gets or sets the identifier that can be used by a service provider to access the email message on the client machine.
    /// - Returns: The identifier that can be used by a service provider to access the email message on the client machine.
    public func remoteId(_ value: Swift.String) throws {
        try _iemailMessage2.put_RemoteId(value)
    }

    /// Gets or sets the mailbox from which the email message was sent.
    /// - Returns: The mailbox from which the email message was sent.
    public var sender: WindowsApplicationModelEmail_EmailRecipient {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage2.get_Sender())
        }
    }

    /// Gets or sets the mailbox from which the email message was sent.
    /// - Returns: The mailbox from which the email message was sent.
    public func sender(_ value: WindowsApplicationModelEmail_EmailRecipient?) throws {
        try _iemailMessage2.put_Sender(value)
    }

    /// Gets or sets the time an email was sent.
    /// - Returns: The time an email was sent.
    public var sentTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _iemailMessage2.get_SentTime()
        }
    }

    /// Gets or sets the time an email was sent.
    /// - Returns: The time an email was sent.
    public func sentTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _iemailMessage2.put_SentTime(value)
    }

    /// Gets the requested email stream such as plain text or HTML.
    /// - Parameter type: The kind of message body; plain text or HTML.
    /// - Returns: The selected body stream.
    public func getBodyStream(_ type: WindowsApplicationModelEmail_EmailMessageBodyKind) throws -> WindowsStorageStreams_IRandomAccessStreamReference {
        try COM.NullResult.unwrap(_iemailMessage2.getBodyStream(type))
    }

    /// Sets the value of the specified body stream in an email message.
    /// - Parameter type: Indicates which body stream, plain text or HTML.
    /// - Parameter stream: The message for the specified body stream.
    public func setBodyStream(_ type: WindowsApplicationModelEmail_EmailMessageBodyKind, _ stream: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _iemailMessage2.setBodyStream(type, stream)
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMessage3 members

    /// Gets or sets the S/MIME data associated with an email message. For more information, see the Certificate class.
    /// - Returns: The MIME data associated with an email message.
    public var smimeData: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage3.get_SmimeData())
        }
    }

    /// Gets or sets the S/MIME data associated with an email message. For more information, see the Certificate class.
    /// - Returns: The MIME data associated with an email message.
    public func smimeData(_ value: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _iemailMessage3.put_SmimeData(value)
    }

    /// Gets or sets the type of S/MIME encryption/signature for the email message.
    /// - Returns: The type of S/MIME encryption/signature for the email message.
    public var smimeKind: WindowsApplicationModelEmail_EmailMessageSmimeKind {
        get throws {
            try _iemailMessage3.get_SmimeKind()
        }
    }

    /// Gets or sets the type of S/MIME encryption/signature for the email message.
    /// - Returns: The type of S/MIME encryption/signature for the email message.
    public func smimeKind(_ value: WindowsApplicationModelEmail_EmailMessageSmimeKind) throws {
        try _iemailMessage3.put_SmimeKind(value)
    }

    // MARK: Windows.ApplicationModel.Email.IEmailMessage4 members

    /// Gets the recipients that are configured to receive a reply to the email message.
    /// - Returns: The recipients that are configured to receive a reply to the email message.
    public var replyTo: WindowsFoundationCollections_IVector<WindowsApplicationModelEmail_EmailRecipient?> {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage4.get_ReplyTo())
        }
    }

    /// Gets or sets an object that identifies the name and address of the person sending the message.
    /// - Returns: An object that identifies the name and address of the person sending the message.
    public var sentRepresenting: WindowsApplicationModelEmail_EmailRecipient {
        get throws {
            try COM.NullResult.unwrap(_iemailMessage4.get_SentRepresenting())
        }
    }

    /// Gets or sets an object that identifies the name and address of the person sending the message.
    /// - Returns: An object that identifies the name and address of the person sending the message.
    public func sentRepresenting(_ value: WindowsApplicationModelEmail_EmailRecipient?) throws {
        try _iemailMessage4.put_SentRepresenting(value)
    }

    // MARK: Implementation details

    private var _iemailMessage2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage2>? = nil

    internal var _iemailMessage2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage2> {
        get throws {
            try _iemailMessage2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage2.self)
            }
        }
    }

    private var _iemailMessage3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage3>? = nil

    internal var _iemailMessage3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage3> {
        get throws {
            try _iemailMessage3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage3.self)
            }
        }
    }

    private var _iemailMessage4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage4>? = nil

    internal var _iemailMessage4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage4> {
        get throws {
            try _iemailMessage4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelEmail_IEmailMessage4.self)
            }
        }
    }

    deinit {
        _iemailMessage2_storage?.release()
        _iemailMessage3_storage?.release()
        _iemailMessage4_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Email.EmailMessage", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}