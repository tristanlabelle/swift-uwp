// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the ServerCustomValidationRequested event.
public final class WindowsWebHttpFilters_HttpServerCustomValidationRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsWebHttpFilters_HttpServerCustomValidationRequestedEventArgsProjection> {
    // MARK: Windows.Web.Http.Filters.IHttpServerCustomValidationRequestedEventArgs members

    /// Gets the HTTP request containing the destination URI, headers, and body.
    /// - Returns: The HTTP request containing the destination URI, headers, and body.
    public var requestMessage: WindowsWebHttp_HttpRequestMessage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RequestMessage())
        }
    }

    /// Gets the X509Certificate provided by the server.
    /// - Returns: The X509Certificate provided by the server.
    public var serverCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerCertificate())
        }
    }

    /// Gets the severity level of errors encountered.
    /// - Returns: The severity level of errors encountered.
    public var serverCertificateErrorSeverity: WindowsNetworkingSockets_SocketSslErrorSeverity {
        get throws {
            try _interop.get_ServerCertificateErrorSeverity()
        }
    }

    /// Gets the errors that the OS validation logic has found in this certificate or the chain.
    /// - Returns: The errors that the OS validation logic has found in this certificate or the chain.
    public var serverCertificateErrors: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerCertificateErrors())
        }
    }

    /// Gets the chain of intermediate certificates, ending in the root CA associated with the remote certificate.
    /// - Returns: The chain of intermediate certificates, ending in the root CA associated with the remote certificate.
    public var serverIntermediateCertificates: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerIntermediateCertificates())
        }
    }

    /// Reject the server's certificate. This will result in the client terminating the connection to the server.
    public func reject() throws {
        try _interop.reject()
    }

    /// Requests that suspension of the event handler be delayed until the deferral is completed by calling the Complete method on the Deferral object.
    /// - Returns: The deferral object.
    public func getDeferral() throws -> WindowsFoundation_Deferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    // MARK: Implementation details
}