// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The base protocol filter for an HttpClient instance.
public final class WindowsWebHttpFilters_HttpBaseProtocolFilter: WindowsRuntime.WinRTImport<WindowsWebHttpFilters_HttpBaseProtocolFilterProjection>, WindowsWebHttpFilters_IHttpFilterProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsWebHttpFilters_HttpBaseProtocolFilterProjection.self))
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilter members

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter should follow redirection responses.
    /// - Returns: A value that indicates whether the HttpBaseProtocolFilter should follow redirection responses.
    public var allowAutoRedirect: Swift.Bool {
        get throws {
            try _interop.get_AllowAutoRedirect()
        }
    }

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter should follow redirection responses.
    /// - Returns: A value that indicates whether the HttpBaseProtocolFilter should follow redirection responses.
    public func allowAutoRedirect(_ value: Swift.Bool) throws {
        try _interop.put_AllowAutoRedirect(value)
    }

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter can prompt for user credentials when requested by the server.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can prompt for user credentials when requested by the server.
    public var allowUI: Swift.Bool {
        get throws {
            try _interop.get_AllowUI()
        }
    }

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter can prompt for user credentials when requested by the server.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can prompt for user credentials when requested by the server.
    public func allowUI(_ value: Swift.Bool) throws {
        try _interop.put_AllowUI(value)
    }

    /// Gets or sets a value that indicates whether the HttpBaseProtocolFilter can automatically decompress the HTTP content response.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can automatically decompress the HTTP content response.
    public var automaticDecompression: Swift.Bool {
        get throws {
            try _interop.get_AutomaticDecompression()
        }
    }

    /// Gets or sets a value that indicates whether the HttpBaseProtocolFilter can automatically decompress the HTTP content response.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can automatically decompress the HTTP content response.
    public func automaticDecompression(_ value: Swift.Bool) throws {
        try _interop.put_AutomaticDecompression(value)
    }

    /// Get or set the read and write cache control behavior to be used on the HttpBaseProtocolFilter object.
    /// - Returns: The cache control behavior to be used on the HttpBaseProtocolFilter object.
    public var cacheControl: WindowsWebHttpFilters_HttpCacheControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CacheControl())
        }
    }

    /// Get or set the client SSL certificate that will be sent to the server if the server requests a client certificate.
    /// - Returns: The client SSl certificate.
    public var clientCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ClientCertificate())
        }
    }

    /// Get or set the client SSL certificate that will be sent to the server if the server requests a client certificate.
    /// - Returns: The client SSl certificate.
    public func clientCertificate(_ value: WindowsSecurityCryptographyCertificates_Certificate?) throws {
        try _interop.put_ClientCertificate(value)
    }

    /// Get the HttpCookieManager with the cookies associated with an app.
    /// - Returns: The HttpCookieManager object that contains the cookies associated with an app.
    public var cookieManager: WindowsWebHttp_HttpCookieManager {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CookieManager())
        }
    }

    /// Get a vector of SSL server certificate errors that the app might subsequently choose to ignore.
    /// - Returns: A vector of SSL server certificate errors that the app might subsequently choose to ignore.
    public var ignorableServerCertificateErrors: WindowsFoundationCollections_IVector<WindowsSecurityCryptographyCertificates_ChainValidationResult> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_IgnorableServerCertificateErrors())
        }
    }

    /// Get or set the maximum number of TCP connections allowed per HTTP server by the HttpBaseProtocolFilter object.
    /// - Returns: The maximum number of connections allowed per HTTP server.
    public var maxConnectionsPerServer: Swift.UInt32 {
        get throws {
            try _interop.get_MaxConnectionsPerServer()
        }
    }

    /// Get or set the maximum number of TCP connections allowed per HTTP server by the HttpBaseProtocolFilter object.
    /// - Returns: The maximum number of connections allowed per HTTP server.
    public func maxConnectionsPerServer(_ value: Swift.UInt32) throws {
        try _interop.put_MaxConnectionsPerServer(value)
    }

    /// Get or set the credentials to be used to negotiate with an HTTP proxy.
    /// - Returns: The credentials to be used to negotiate with an HTTP proxy.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProxyCredential())
        }
    }

    /// Get or set the credentials to be used to negotiate with an HTTP proxy.
    /// - Returns: The credentials to be used to negotiate with an HTTP proxy.
    public func proxyCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.put_ProxyCredential(value)
    }

    /// Get or set the credentials to be used to authenticate with an HTTP server.
    /// - Returns: The credentials to be used to authenticate with an HTTP server.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerCredential())
        }
    }

    /// Get or set the credentials to be used to authenticate with an HTTP server.
    /// - Returns: The credentials to be used to authenticate with an HTTP server.
    public func serverCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.put_ServerCredential(value)
    }

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter can use a proxy for sending HTTP requests.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can use a proxy to send HTTP requests.
    public var useProxy: Swift.Bool {
        get throws {
            try _interop.get_UseProxy()
        }
    }

    /// Get or set a value that indicates whether the HttpBaseProtocolFilter can use a proxy for sending HTTP requests.
    /// - Returns: A value that indicates whether HttpBaseProtocolFilter can use a proxy to send HTTP requests.
    public func useProxy(_ value: Swift.Bool) throws {
        try _interop.put_UseProxy(value)
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilter2 members

    /// Gets or sets the version of the HTTP protocol used.
    /// - Returns: An enumeration value that specifies the version of HTTP used.
    public var maxVersion: WindowsWebHttp_HttpVersion {
        get throws {
            try _ihttpBaseProtocolFilter2.get_MaxVersion()
        }
    }

    /// Gets or sets the version of the HTTP protocol used.
    /// - Returns: An enumeration value that specifies the version of HTTP used.
    public func maxVersion(_ value: WindowsWebHttp_HttpVersion) throws {
        try _ihttpBaseProtocolFilter2.put_MaxVersion(value)
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilter3 members

    /// Gets or sets the cookie usage behavior. By default, cookies are handled automatically.
    /// - Returns: The cookie usage behavior.
    public var cookieUsageBehavior: WindowsWebHttpFilters_HttpCookieUsageBehavior {
        get throws {
            try _ihttpBaseProtocolFilter3.get_CookieUsageBehavior()
        }
    }

    /// Gets or sets the cookie usage behavior. By default, cookies are handled automatically.
    /// - Returns: The cookie usage behavior.
    public func cookieUsageBehavior(_ value: WindowsWebHttpFilters_HttpCookieUsageBehavior) throws {
        try _ihttpBaseProtocolFilter3.put_CookieUsageBehavior(value)
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilter4 members

    /// This event is raised when the SSL/TLS connection is being established with the server. You should implement an event handler for this event if you need to perform extra validation (in addition to the OS default) of the server SSL certificate.
    public func serverCustomValidationRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsWebHttpFilters_HttpBaseProtocolFilter?, WindowsWebHttpFilters_HttpServerCustomValidationRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihttpBaseProtocolFilter4.add_ServerCustomValidationRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: serverCustomValidationRequested)
    }

    public func serverCustomValidationRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihttpBaseProtocolFilter4.remove_ServerCustomValidationRequested(token)
    }

    /// Clears authentication credentials currently cached on the device.
    public func clearAuthenticationCache() throws {
        try _ihttpBaseProtocolFilter4.clearAuthenticationCache()
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilter5 members

    /// Gets the User associated with the HttpBaseProtocolFilter.
    /// - Returns: The User associated with the HttpBaseProtocolFilter.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_ihttpBaseProtocolFilter5.get_User())
        }
    }

    // MARK: Windows.Web.Http.Filters.IHttpFilter members

    /// Send an HTTP request using the HttpBaseProtocolFilter as an asynchronous operation.
    /// - Parameter request: The HTTP request message to send.
    /// - Returns: The object representing the asynchronous operation.
    public func sendRequestAsync(_ request: WindowsWebHttp_HttpRequestMessage?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebHttp_HttpResponseMessage?, WindowsWebHttp_HttpProgress> {
        try COM.NullResult.unwrap(_ihttpFilter.sendRequestAsync(request))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the HttpBaseProtocolFilter instance and releases allocated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Web.Http.Filters.IHttpBaseProtocolFilterStatics members

    /// Creates a new HttpBaseProtocolFilter for a specific User.
    /// - Parameter user: The User for which you want to create the HttpBaseProtocolFilter.
    /// - Returns: Returns an HttpBaseProtocolFilter for the account specified by the *user* parameter.
    public static func createForUser(_ user: WindowsSystem_User?) throws -> WindowsWebHttpFilters_HttpBaseProtocolFilter {
        try COM.NullResult.unwrap(_ihttpBaseProtocolFilterStatics.createForUser(user))
    }

    // MARK: Implementation details

    private var _ihttpBaseProtocolFilter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter2>? = nil

    internal var _ihttpBaseProtocolFilter2: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter2> {
        get throws {
            try _ihttpBaseProtocolFilter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter2.iid).cast(to: CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter2.self)
            }
        }
    }

    private var _ihttpBaseProtocolFilter3_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter3>? = nil

    internal var _ihttpBaseProtocolFilter3: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter3> {
        get throws {
            try _ihttpBaseProtocolFilter3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter3.iid).cast(to: CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter3.self)
            }
        }
    }

    private var _ihttpBaseProtocolFilter4_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter4>? = nil

    internal var _ihttpBaseProtocolFilter4: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter4> {
        get throws {
            try _ihttpBaseProtocolFilter4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter4.iid).cast(to: CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter4.self)
            }
        }
    }

    private var _ihttpBaseProtocolFilter5_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter5>? = nil

    internal var _ihttpBaseProtocolFilter5: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter5> {
        get throws {
            try _ihttpBaseProtocolFilter5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter5.iid).cast(to: CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilter5.self)
            }
        }
    }

    private var _ihttpFilter_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpFilter>? = nil

    internal var _ihttpFilter: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpFilter> {
        get throws {
            try _ihttpFilter_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsWebHttpFilters_IHttpFilter.iid).cast(to: CWinRT.SWRT_WindowsWebHttpFilters_IHttpFilter.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ihttpBaseProtocolFilter2_storage?.release()
        _ihttpBaseProtocolFilter3_storage?.release()
        _ihttpBaseProtocolFilter4_storage?.release()
        _ihttpBaseProtocolFilter5_storage?.release()
        _ihttpFilter_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Filters.HttpBaseProtocolFilter", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ihttpBaseProtocolFilterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilterStatics>? = nil

    internal static var _ihttpBaseProtocolFilterStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilterStatics> {
        get throws {
            try _ihttpBaseProtocolFilterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Filters.HttpBaseProtocolFilter", id: CWinRT.SWRT_WindowsWebHttpFilters_IHttpBaseProtocolFilterStatics.iid)
            }
        }
    }
}