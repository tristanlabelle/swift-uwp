// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A frame source that provides depth frames.
public final class WindowsDevicesPerception_PerceptionDepthFrameSource: WindowsRuntime.WinRTImport<WindowsDevicesPerception_PerceptionDepthFrameSourceProjection> {
    // MARK: Windows.Devices.Perception.IPerceptionDepthFrameSource members

    /// Gets a boolean value indicating whether or not the source is active.
    /// - Returns: A boolean value indicating whether or not the source is active.
    public var active: Swift.Bool {
        get throws {
            try _interop.get_Active()
        }
    }

    /// Gets a boolean value indicating whether or not the source is available.
    /// - Returns: A boolean value indicating whether or not the source is available.
    public var available: Swift.Bool {
        get throws {
            try _interop.get_Available()
        }
    }

    /// Gets a read-only collection of video profiles that are currently available from the depth frame source.
    /// - Returns: A read-only collection of video profiles that are currently available from the depth frame source.
    public var availableVideoProfiles: WindowsFoundationCollections_IVectorView<WindowsDevicesPerception_PerceptionVideoProfile?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AvailableVideoProfiles())
        }
    }

    /// Gets a CameraIntrinsics value specifying the intrinsic properties of the depth frame source camera device.
    /// - Returns: A CameraIntrinsics value specifying the intrinsic properties of the depth frame source camera device.
    public var cameraIntrinsics: WindowsMediaDevicesCore_CameraIntrinsics {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CameraIntrinsics())
        }
    }

    /// Gets a string value indicating the kind of physical device that generates the depth frames.
    /// - Returns: A string value indicating the kind of physical device that generates the depth frames.
    public var deviceKind: Swift.String {
        get throws {
            try _interop.get_DeviceKind()
        }
    }

    /// Gets a string value indicating the display name of the depth frame source.
    /// - Returns: A string value indicating the display name of the depth frame source.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets a string value indicating the unique ID of the depth frame source.
    /// - Returns: A string value indicating the unique ID of the depth frame source.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a boolean value indicating whether or not the source is the subject of controller mode.
    /// - Returns: A boolean value indicating whether or not the source is the subject of controller mode.
    public var isControlled: Swift.Bool {
        get throws {
            try _interop.get_IsControlled()
        }
    }

    /// Gets a read-only collection of frame source properties.
    /// - Returns: A read-only collection of frame source properties.
    public var properties: WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets a read-only collection of video profiles that are supported by the depth frame source.
    /// - Returns: A read-only collection of video profiles that are supported by the depth frame source.
    public var supportedVideoProfiles: WindowsFoundationCollections_IVectorView<WindowsDevicesPerception_PerceptionVideoProfile?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedVideoProfiles())
        }
    }

    /// Gets a PerceptionVideoProfile object indicating the current video profile.
    /// - Returns: A PerceptionVideoProfile object indicating the current video profile.
    public var videoProfile: WindowsDevicesPerception_PerceptionVideoProfile {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoProfile())
        }
    }

    /// Subscribes to the ActiveChanged event.
    public func activeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPerception_PerceptionDepthFrameSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ActiveChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activeChanged)
    }

    public func activeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ActiveChanged(token)
    }

    /// Subscribes to the AvailableChanged event.
    public func availableChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPerception_PerceptionDepthFrameSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AvailableChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: availableChanged)
    }

    public func availableChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AvailableChanged(token)
    }

    /// Subscribes to the CameraIntrinsicsChanged event.
    public func cameraIntrinsicsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPerception_PerceptionDepthFrameSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CameraIntrinsicsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cameraIntrinsicsChanged)
    }

    public func cameraIntrinsicsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CameraIntrinsicsChanged(token)
    }

    /// Subscribes to the PropertiesChanged event.
    public func propertiesChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPerception_PerceptionDepthFrameSource?, WindowsDevicesPerception_PerceptionFrameSourcePropertiesChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PropertiesChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: propertiesChanged)
    }

    public func propertiesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PropertiesChanged(token)
    }

    /// Subscribes to the VideoProfileChanged event.
    public func videoProfileChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPerception_PerceptionDepthFrameSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VideoProfileChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: videoProfileChanged)
    }

    public func videoProfileChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VideoProfileChanged(token)
    }

    /// Attempts to acquire Controller Mode on the depth frame source.
    /// - Returns: If the attempt is successful, this returns a PerceptionControlSession object that can be used to control properties of the depth frame source. Otherwise, this returns null.
    public func acquireControlSession() throws -> WindowsDevicesPerception_PerceptionControlSession {
        try COM.NullResult.unwrap(_interop.acquireControlSession())
    }

    /// This method returns a boolean value indicating whether or not the depth frame source can be controlled separately from another frame source.
    /// - Parameter targetId: A string representing the unique ID of the other frame source.
    /// - Returns: True if the two sources can be controlled independently of one another; otherwise, false.
    public func canControlIndependentlyFrom(_ targetId: Swift.String) throws -> Swift.Bool {
        try _interop.canControlIndependentlyFrom(targetId)
    }

    /// Checks whether or not the depth frame source is correlated with the target entity. If the result is true, a transform matrix can be retrieved to change coordinate basis from this depth frame source to the entity, or vice versa.
    /// - Parameter targetId: The unique ID of the target entity.
    /// - Returns: True if a correlation exists, otherwise false.
    public func isCorrelatedWith(_ targetId: Swift.String) throws -> Swift.Bool {
        try _interop.isCorrelatedWith(targetId)
    }

    /// Gets the transform from the depth frame source to the target entity and sets hasResult to true, if a correlation exists. If a correlation does not exist, hasResult is set to false and result is not modified.
    /// - Parameter targetId: The unique ID of the target entity.
    /// - Parameter result: If a correlation exists, this will be set to a 4x4 transform matrix that changes basis from the depth frame source coordinate system to the target entity coordinate system.
    /// - Returns: True if a correlation exists, otherwise false.
    public func tryGetTransformTo(_ targetId: Swift.String, _ result: inout WindowsFoundationNumerics_Matrix4x4) throws -> Swift.Bool {
        try _interop.tryGetTransformTo(targetId, &result)
    }

    /// Attempts to get the intrinsic properties of the depth camera that is correlated with this depth source.
    /// - Parameter target: The depth frame source to try to get intrinsic properties of.
    /// - Returns: If the attempt is successful, this returns a read-only collection of PerceptionDepthCorrelatedCameraIntrinsics objects specifying the intrinsic properties of the camera used by the correlated depth frame source. Otherwise, this returns null.
    public func tryGetDepthCorrelatedCameraIntrinsicsAsync(_ target: WindowsDevicesPerception_PerceptionDepthFrameSource?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPerception_PerceptionDepthCorrelatedCameraIntrinsics?> {
        try COM.NullResult.unwrap(_interop.tryGetDepthCorrelatedCameraIntrinsicsAsync(target))
    }

    /// Attempts to get a coordinate mapper that maps from depth frame image space to depth frame space.
    /// - Parameter targetId: The unique ID of the depth frame source to try to map to.
    /// - Parameter depthFrameSourceToMapWith: The depth frame source to try to map to. This should be in a correlation group with the depth frame source.
    /// - Returns: If the two sources are correlated, this method returns a PerceptionDepthCorrelatedCoordinateMapper. Otherwise, it returns null. This method returns asynchronously.
    public func tryGetDepthCorrelatedCoordinateMapperAsync(_ targetId: Swift.String, _ depthFrameSourceToMapWith: WindowsDevicesPerception_PerceptionDepthFrameSource?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPerception_PerceptionDepthCorrelatedCoordinateMapper?> {
        try COM.NullResult.unwrap(_interop.tryGetDepthCorrelatedCoordinateMapperAsync(targetId, depthFrameSourceToMapWith))
    }

    /// Attempts to set a video profile on this depth frame source. Requires an active Controller Mode control session on this frame source.
    /// - Parameter controlSession: A PerceptionControlSession representing active control of this frame source.
    /// - Parameter profile: The video profile to set.
    /// - Returns: This method returns an PerceptionFrameSourcePropertyChangeResult object asynchronously. If the control session was still active when the video profile was set, and if the video profile is supported and can be activated, this will be a result indicating success.
    public func trySetVideoProfileAsync(_ controlSession: WindowsDevicesPerception_PerceptionControlSession?, _ profile: WindowsDevicesPerception_PerceptionVideoProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPerception_PerceptionFrameSourcePropertyChangeResult?> {
        try COM.NullResult.unwrap(_interop.trySetVideoProfileAsync(controlSession, profile))
    }

    /// Gets a frame reader that reads frames from this depth frame source.
    /// - Returns: A frame reader that reads frames from this depth frame source.
    public func openReader() throws -> WindowsDevicesPerception_PerceptionDepthFrameReader {
        try COM.NullResult.unwrap(_interop.openReader())
    }

    // MARK: Windows.Devices.Perception.IPerceptionDepthFrameSource2 members

    /// Gets a string value that identifies the device on the system.
    /// - Returns: The identifier.
    public var deviceId: Swift.String {
        get throws {
            try _iperceptionDepthFrameSource2.get_DeviceId()
        }
    }

    // MARK: Windows.Devices.Perception.IPerceptionDepthFrameSourceStatics members

    /// Creates a new depth frame source watcher.
    /// - Returns: A new depth frame source watcher.
    public static func createWatcher() throws -> WindowsDevicesPerception_PerceptionDepthFrameSourceWatcher {
        try COM.NullResult.unwrap(_iperceptionDepthFrameSourceStatics.createWatcher())
    }

    /// Finds all depth frame sources.
    /// - Returns: When the method completes, it asynchronously returns a list of depth frame sources.
    public static func findAllAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesPerception_PerceptionDepthFrameSource?>?> {
        try COM.NullResult.unwrap(_iperceptionDepthFrameSourceStatics.findAllAsync())
    }

    /// Finds an depth frame source by looking up its unique ID.
    /// - Parameter id: The unique ID of the depth frame source.
    /// - Returns: When this method completes, it asynchronously returns a depth frame source if one exists with the specified ID. Otherwise, this method asynchronously returns null.
    public static func fromIdAsync(_ id: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPerception_PerceptionDepthFrameSource?> {
        try COM.NullResult.unwrap(_iperceptionDepthFrameSourceStatics.fromIdAsync(id))
    }

    /// Requests access to use depth frame sources.
    /// - Returns: When this method completes, it asynchronously returns a PerceptionFrameSourceAccessStatus indicating the result of the access request.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPerception_PerceptionFrameSourceAccessStatus> {
        try COM.NullResult.unwrap(_iperceptionDepthFrameSourceStatics.requestAccessAsync())
    }

    // MARK: Implementation details

    private var _iperceptionDepthFrameSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSource2>? = nil

    internal var _iperceptionDepthFrameSource2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSource2> {
        get throws {
            try _iperceptionDepthFrameSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSource2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSource2.self)
            }
        }
    }

    deinit {
        _iperceptionDepthFrameSource2_storage?.release()
    }

    private static var _iperceptionDepthFrameSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSourceStatics>? = nil

    internal static var _iperceptionDepthFrameSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSourceStatics> {
        get throws {
            try _iperceptionDepthFrameSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Perception.PerceptionDepthFrameSource", id: CWinRT.SWRT_WindowsDevicesPerception_IPerceptionDepthFrameSourceStatics.iid)
            }
        }
    }
}