// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an elliptical arc between two points.
public final class WindowsUIXamlMedia_ArcSegment: WindowsRuntime.WinRTImport<WindowsUIXamlMedia_ArcSegmentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMedia_ArcSegmentProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.IArcSegment members

    /// Gets or sets a value that indicates whether the arc should be greater than 180 degrees.
    /// - Returns: **true** if the arc should be greater than 180 degrees; otherwise, **false**.
    public var isLargeArc: Swift.Bool {
        get throws {
            try _interop.get_IsLargeArc()
        }
    }

    /// Gets or sets a value that indicates whether the arc should be greater than 180 degrees.
    /// - Returns: **true** if the arc should be greater than 180 degrees; otherwise, **false**.
    public func isLargeArc(_ value: Swift.Bool) throws {
        try _interop.put_IsLargeArc(value)
    }

    /// Gets or sets the endpoint of the elliptical arc.
    /// - Returns: The point to which the arc is drawn. The default is a Point with value 0,0.
    public var point: WindowsFoundation_Point {
        get throws {
            try _interop.get_Point()
        }
    }

    /// Gets or sets the endpoint of the elliptical arc.
    /// - Returns: The point to which the arc is drawn. The default is a Point with value 0,0.
    public func point(_ value: WindowsFoundation_Point) throws {
        try _interop.put_Point(value)
    }

    /// Gets or sets the amount (in degrees) by which the ellipse is rotated about the x-axis.
    /// - Returns: The amount (in degrees) by which the ellipse is rotated about the x-axis. The default is 0.
    public var rotationAngle: Swift.Double {
        get throws {
            try _interop.get_RotationAngle()
        }
    }

    /// Gets or sets the amount (in degrees) by which the ellipse is rotated about the x-axis.
    /// - Returns: The amount (in degrees) by which the ellipse is rotated about the x-axis. The default is 0.
    public func rotationAngle(_ value: Swift.Double) throws {
        try _interop.put_RotationAngle(value)
    }

    /// Gets or sets the x-radius and y-radius of the arc as a Size structure.
    /// - Returns: A Size structure that describes the x-radius and y-radius of the elliptical arc. The Size structure's **Width** value specifies the arc's x-radius; its **Height** value specifies the arc's y-radius. The default is a Size with value 0,0.
    public var size: WindowsFoundation_Size {
        get throws {
            try _interop.get_Size()
        }
    }

    /// Gets or sets the x-radius and y-radius of the arc as a Size structure.
    /// - Returns: A Size structure that describes the x-radius and y-radius of the elliptical arc. The Size structure's **Width** value specifies the arc's x-radius; its **Height** value specifies the arc's y-radius. The default is a Size with value 0,0.
    public func size(_ value: WindowsFoundation_Size) throws {
        try _interop.put_Size(value)
    }

    /// Gets or sets a value that specifies whether the arc is drawn in the **Clockwise** or **Counterclockwise** direction.
    /// - Returns: One of the enumeration values that specifies the direction in which the arc is drawn. The default is **Counterclockwise**.
    public var sweepDirection: WindowsUIXamlMedia_SweepDirection {
        get throws {
            try _interop.get_SweepDirection()
        }
    }

    /// Gets or sets a value that specifies whether the arc is drawn in the **Clockwise** or **Counterclockwise** direction.
    /// - Returns: One of the enumeration values that specifies the direction in which the arc is drawn. The default is **Counterclockwise**.
    public func sweepDirection(_ value: WindowsUIXamlMedia_SweepDirection) throws {
        try _interop.put_SweepDirection(value)
    }

    // MARK: Windows.UI.Xaml.Media.IArcSegmentStatics members

    /// Identifies the IsLargeArc dependency property.
    /// - Returns: The IsLargeArc dependency property identifier.
    public static var isLargeArcProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iarcSegmentStatics.get_IsLargeArcProperty())
        }
    }

    /// Identifies the Point dependency property.
    /// - Returns: The Point dependency property identifier.
    public static var pointProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iarcSegmentStatics.get_PointProperty())
        }
    }

    /// Identifies the RotationAngle dependency property.
    /// - Returns: The RotationAngle dependency property identifier.
    public static var rotationAngleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iarcSegmentStatics.get_RotationAngleProperty())
        }
    }

    /// Identifies the Size dependency property.
    /// - Returns: The Size dependency property identifier.
    public static var sizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iarcSegmentStatics.get_SizeProperty())
        }
    }

    /// Identifies the SweepDirection dependency property.
    /// - Returns: The SweepDirection dependency property identifier.
    public static var sweepDirectionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iarcSegmentStatics.get_SweepDirectionProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.ArcSegment", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iarcSegmentStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IArcSegmentStatics>? = nil

    internal static var _iarcSegmentStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IArcSegmentStatics> {
        get throws {
            try _iarcSegmentStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.ArcSegment", id: CWinRT.SWRT_WindowsUIXamlMedia_IArcSegmentStatics.iid)
            }
        }
    }
}