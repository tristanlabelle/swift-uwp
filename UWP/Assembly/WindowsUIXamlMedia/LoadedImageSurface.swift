// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a composition surface that an image can be downloaded, decoded and loaded onto. You can load an image using a Uniform Resource Identifier (URI) that references an image source file, or supplying a IRandomAccessStream.
public final class WindowsUIXamlMedia_LoadedImageSurface: WindowsRuntime.WinRTImport<WindowsUIXamlMedia_LoadedImageSurfaceProjection>, WindowsFoundation_IClosableProtocol, WindowsUIComposition_ICompositionSurfaceProtocol {
    // MARK: Windows.UI.Xaml.Media.ILoadedImageSurface members

    /// Gets the size of the decoded image in physical pixels.
    /// - Returns: The size of the decoded image in physical pixels.
    public var decodedPhysicalSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_DecodedPhysicalSize()
        }
    }

    /// Gets the size of the decoded image in device independent pixels.
    /// - Returns: The size of the decoded image in device independent pixels.
    public var decodedSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_DecodedSize()
        }
    }

    /// Gets the natural size of the image in physical pixels, which is defined in the original image source.
    /// - Returns: The natural size of the image in physical pixels.
    public var naturalSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_NaturalSize()
        }
    }

    /// Occurs when the image has been downloaded, decoded and loaded to the underlying ICompositionSurface.
    public func loadCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlMedia_LoadedImageSurface?, WindowsUIXamlMedia_LoadedImageSourceLoadCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LoadCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: loadCompleted)
    }

    public func loadCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LoadCompleted(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes of the LoadedImageSurface and associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.UI.Xaml.Media.ILoadedImageSurfaceStatics members

    /// Loads an image into a LoadedImageSurface from the provided Uniform Resource Identifier (URI) with the desired maximum size.
    /// - Parameter uri: The URI from which the image is loaded.
    /// - Parameter desiredMaxSize: The desired maximum size of the image surface in device independent pixels.
    /// - Returns: An instance of LoadedImageSurface with the image loaded onto its surface.
    public static func startLoadFromUri(_ uri: WindowsFoundation_Uri?, _ desiredMaxSize: WindowsFoundation_Size) throws -> WindowsUIXamlMedia_LoadedImageSurface {
        try COM.NullResult.unwrap(_iloadedImageSurfaceStatics.startLoadFromUriWithSize(uri, desiredMaxSize))
    }

    /// Loads an image into a LoadedImageSurface from the provided Uniform Resource Identifier (URI) at the natural size defined in the image source.
    /// - Parameter uri: The URI from which the image is loaded.
    /// - Returns: An instance of LoadedImageSurface with the image loaded onto its surface.
    public static func startLoadFromUri(_ uri: WindowsFoundation_Uri?) throws -> WindowsUIXamlMedia_LoadedImageSurface {
        try COM.NullResult.unwrap(_iloadedImageSurfaceStatics.startLoadFromUri(uri))
    }

    /// Loads an image into a LoadedImageSurface from the provided IRandomAccessStream with the desired maximum size.
    /// - Parameter stream: The stream from which the image is loaded.
    /// - Parameter desiredMaxSize: The desired maximum size of the image surface in device independent pixels.
    /// - Returns: An instance of LoadedImageSurface with the image loaded onto its surface.
    public static func startLoadFromStream(_ stream: WindowsStorageStreams_IRandomAccessStream?, _ desiredMaxSize: WindowsFoundation_Size) throws -> WindowsUIXamlMedia_LoadedImageSurface {
        try COM.NullResult.unwrap(_iloadedImageSurfaceStatics.startLoadFromStreamWithSize(stream, desiredMaxSize))
    }

    /// Loads an image onto a LoadedImageSurface from the provided IRandomAccessStream at the natural size
    /// - Parameter stream: The stream from which the image is loaded.
    /// - Returns: An instance of LoadedImageSurface with the image loaded onto its surface.
    public static func startLoadFromStream(_ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsUIXamlMedia_LoadedImageSurface {
        try COM.NullResult.unwrap(_iloadedImageSurfaceStatics.startLoadFromStream(stream))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _icompositionSurface_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionSurface>? = nil

    internal var _icompositionSurface: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionSurface> {
        get throws {
            try _icompositionSurface_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionSurface.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionSurface.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _icompositionSurface_storage?.release()
    }

    private static var _iloadedImageSurfaceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_ILoadedImageSurfaceStatics>? = nil

    internal static var _iloadedImageSurfaceStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_ILoadedImageSurfaceStatics> {
        get throws {
            try _iloadedImageSurfaceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.LoadedImageSurface", id: CWinRT.SWRT_WindowsUIXamlMedia_ILoadedImageSurfaceStatics.iid)
            }
        }
    }
}