// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Paints an area with an image. The image source is typically obtained from file formats such as Joint Photographic Experts Group (JPEG).
public final class WindowsUIXamlMedia_ImageBrush: WindowsRuntime.WinRTImport<WindowsUIXamlMedia_ImageBrushProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMedia_ImageBrushProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.IImageBrush members

    /// Gets or sets the image source displayed by this ImageBrush. In code you set this with an ImageSource subclass instance, in XAML you set this with a URI to an image source file.
    /// - Returns: An object representing the image source, to be displayed by this ImageBrush when it's applied to content.
    public var imageSource: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ImageSource())
        }
    }

    /// Gets or sets the image source displayed by this ImageBrush. In code you set this with an ImageSource subclass instance, in XAML you set this with a URI to an image source file.
    /// - Returns: An object representing the image source, to be displayed by this ImageBrush when it's applied to content.
    public func imageSource(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _interop.put_ImageSource(value)
    }

    /// Occurs when there is an error associated with image retrieval or format.
    public func imageFailed(adding handler: WindowsUIXaml_ExceptionRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ImageFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: imageFailed)
    }

    public func imageFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ImageFailed(token)
    }

    /// Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.
    public func imageOpened(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ImageOpened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: imageOpened)
    }

    public func imageOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ImageOpened(token)
    }

    // MARK: Windows.UI.Xaml.Media.IImageBrushStatics members

    /// Identifies the ImageSource dependency property.
    /// - Returns: The identifier for the ImageSource dependency property.
    public static var imageSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iimageBrushStatics.get_ImageSourceProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.ImageBrush", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iimageBrushStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IImageBrushStatics>? = nil

    internal static var _iimageBrushStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IImageBrushStatics> {
        get throws {
            try _iimageBrushStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.ImageBrush", id: CWinRT.SWRT_WindowsUIXamlMedia_IImageBrushStatics.iid)
            }
        }
    }
}