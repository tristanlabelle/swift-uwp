// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A ThemeShadow is a preconfigured shadow effect that can be applied to any XAML element to draw shadows appropriately based on x, y, z coordinates. ThemeShadow also automatically adjusts for other environmental specifications:
open class WindowsUIXamlMedia_ThemeShadow: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Media.IThemeShadowFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlMedia_ThemeShadow.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ithemeShadowFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Media.IThemeShadow members

    /// Gets a collection of UI elements that this ThemeShadow is cast on.
    /// - Returns: A collection of UI elements that this ThemeShadow is cast on.
    public var receivers: WindowsUIXaml_UIElementWeakCollection {
        get throws {
            try COM.NullResult.unwrap(_ithemeShadow.get_Receivers())
        }
    }

    // MARK: Implementation details

    private var _ithemeShadow_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadow>? = nil

    internal var _ithemeShadow: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadow> {
        get throws {
            try _ithemeShadow_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadow.iid).cast(to: CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadow.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadow>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ithemeShadow_storage?.release()
    }

    private static var _ithemeShadowFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadowFactory>? = nil

    internal static var _ithemeShadowFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadowFactory> {
        get throws {
            try _ithemeShadowFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.ThemeShadow", id: CWinRT.SWRT_WindowsUIXamlMedia_IThemeShadowFactory.iid)
            }
        }
    }
}