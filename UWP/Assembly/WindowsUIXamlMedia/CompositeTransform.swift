// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Applies multiple transform operations to an object.
public final class WindowsUIXamlMedia_CompositeTransform: WindowsRuntime.WinRTImport<WindowsUIXamlMedia_CompositeTransformProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMedia_CompositeTransformProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.ICompositeTransform members

    /// Gets or sets the x-coordinate of the center point for all transforms specified by the CompositeTransform in device-independent pixel (DIP) relative to the upper left-hand corner of the element.
    /// - Returns: The x-coordinate of the center point for all transforms specified by the CompositeTransform.
    public var centerX: Swift.Double {
        get throws {
            try _interop.get_CenterX()
        }
    }

    /// Gets or sets the x-coordinate of the center point for all transforms specified by the CompositeTransform in device-independent pixel (DIP) relative to the upper left-hand corner of the element.
    /// - Returns: The x-coordinate of the center point for all transforms specified by the CompositeTransform.
    public func centerX(_ value: Swift.Double) throws {
        try _interop.put_CenterX(value)
    }

    /// Gets or sets the y-coordinate of the center point for all transforms specified by the CompositeTransform in device-independent pixel (DIP) relative to the upper left-hand corner of the element.
    /// - Returns: The y-coordinate of the center point for all transforms specified by the CompositeTransform.
    public var centerY: Swift.Double {
        get throws {
            try _interop.get_CenterY()
        }
    }

    /// Gets or sets the y-coordinate of the center point for all transforms specified by the CompositeTransform in device-independent pixel (DIP) relative to the upper left-hand corner of the element.
    /// - Returns: The y-coordinate of the center point for all transforms specified by the CompositeTransform.
    public func centerY(_ value: Swift.Double) throws {
        try _interop.put_CenterY(value)
    }

    /// Gets or sets the angle, in degrees, of clockwise rotation.
    /// - Returns: The angle, in degrees, of clockwise rotation. The default is 0.
    public var rotation: Swift.Double {
        get throws {
            try _interop.get_Rotation()
        }
    }

    /// Gets or sets the angle, in degrees, of clockwise rotation.
    /// - Returns: The angle, in degrees, of clockwise rotation. The default is 0.
    public func rotation(_ value: Swift.Double) throws {
        try _interop.put_Rotation(value)
    }

    /// Gets or sets the x-axis scale factor. You can use this property to stretch or shrink an object horizontally.
    /// - Returns: The scale factor along the x-axis. The default is 1.
    public var scaleX: Swift.Double {
        get throws {
            try _interop.get_ScaleX()
        }
    }

    /// Gets or sets the x-axis scale factor. You can use this property to stretch or shrink an object horizontally.
    /// - Returns: The scale factor along the x-axis. The default is 1.
    public func scaleX(_ value: Swift.Double) throws {
        try _interop.put_ScaleX(value)
    }

    /// Gets or sets the y-axis scale factor. You can use this property to stretch or shrink an object vertically.
    /// - Returns: The scale factor along the y-axis. The default is 1.
    public var scaleY: Swift.Double {
        get throws {
            try _interop.get_ScaleY()
        }
    }

    /// Gets or sets the y-axis scale factor. You can use this property to stretch or shrink an object vertically.
    /// - Returns: The scale factor along the y-axis. The default is 1.
    public func scaleY(_ value: Swift.Double) throws {
        try _interop.put_ScaleY(value)
    }

    /// Gets or sets the x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. A skew transform can be useful for creating the illusion of three-dimensional depth in a two-dimensional object.
    /// - Returns: The skew angle, which is measured in degrees counterclockwise from the y-axis. The default is 0.
    public var skewX: Swift.Double {
        get throws {
            try _interop.get_SkewX()
        }
    }

    /// Gets or sets the x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. A skew transform can be useful for creating the illusion of three-dimensional depth in a two-dimensional object.
    /// - Returns: The skew angle, which is measured in degrees counterclockwise from the y-axis. The default is 0.
    public func skewX(_ value: Swift.Double) throws {
        try _interop.put_SkewX(value)
    }

    /// Gets or sets the y-axis skew angle, which is measured in degrees counterclockwise from the x-axis. A skew transform can be useful for creating the illusion of three-dimensional depth in a two-dimensional object.
    /// - Returns: The skew angle, which is measured in degrees counterclockwise from the x-axis. The default is 0.
    public var skewY: Swift.Double {
        get throws {
            try _interop.get_SkewY()
        }
    }

    /// Gets or sets the y-axis skew angle, which is measured in degrees counterclockwise from the x-axis. A skew transform can be useful for creating the illusion of three-dimensional depth in a two-dimensional object.
    /// - Returns: The skew angle, which is measured in degrees counterclockwise from the x-axis. The default is 0.
    public func skewY(_ value: Swift.Double) throws {
        try _interop.put_SkewY(value)
    }

    /// Gets or sets the distance to translate along the x-axis.
    /// - Returns: The distance to translate (move) an object along the x-axis, in pixels. This property is read/write. The default is 0.
    public var translateX: Swift.Double {
        get throws {
            try _interop.get_TranslateX()
        }
    }

    /// Gets or sets the distance to translate along the x-axis.
    /// - Returns: The distance to translate (move) an object along the x-axis, in pixels. This property is read/write. The default is 0.
    public func translateX(_ value: Swift.Double) throws {
        try _interop.put_TranslateX(value)
    }

    /// Gets or sets the distance to translate (move) an object along the y-axis.
    /// - Returns: The distance to translate (move) an object along the y-axis, in pixels. The default is 0.
    public var translateY: Swift.Double {
        get throws {
            try _interop.get_TranslateY()
        }
    }

    /// Gets or sets the distance to translate (move) an object along the y-axis.
    /// - Returns: The distance to translate (move) an object along the y-axis, in pixels. The default is 0.
    public func translateY(_ value: Swift.Double) throws {
        try _interop.put_TranslateY(value)
    }

    // MARK: Windows.UI.Xaml.Media.ICompositeTransformStatics members

    /// Identifies the CenterX dependency property.
    /// - Returns: The identifier for the CenterX dependency property.
    public static var centerXProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_CenterXProperty())
        }
    }

    /// Identifies the CenterY dependency property.
    /// - Returns: The identifier for the CenterY dependency property.
    public static var centerYProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_CenterYProperty())
        }
    }

    /// Identifies the Rotation dependency property.
    /// - Returns: The identifier for the Rotation dependency property.
    public static var rotationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_RotationProperty())
        }
    }

    /// Identifies the ScaleX dependency property.
    /// - Returns: The identifier for the ScaleX dependency property.
    public static var scaleXProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_ScaleXProperty())
        }
    }

    /// Identifies the ScaleY dependency property.
    /// - Returns: The identifier for the ScaleY dependency property.
    public static var scaleYProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_ScaleYProperty())
        }
    }

    /// Identifies the SkewX dependency property.
    /// - Returns: The identifier for the SkewX dependency property.
    public static var skewXProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_SkewXProperty())
        }
    }

    /// Identifies the SkewY dependency property.
    /// - Returns: The identifier for the SkewY dependency property.
    public static var skewYProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_SkewYProperty())
        }
    }

    /// Identifies the TranslateX dependency property.
    /// - Returns: The identifier for the TranslateX dependency property.
    public static var translateXProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_TranslateXProperty())
        }
    }

    /// Identifies the TranslateY dependency property.
    /// - Returns: The identifier for the TranslateY dependency property.
    public static var translateYProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icompositeTransformStatics.get_TranslateYProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.CompositeTransform", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _icompositeTransformStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_ICompositeTransformStatics>? = nil

    internal static var _icompositeTransformStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_ICompositeTransformStatics> {
        get throws {
            try _icompositeTransformStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.CompositeTransform", id: CWinRT.SWRT_WindowsUIXamlMedia_ICompositeTransformStatics.iid)
            }
        }
    }
}