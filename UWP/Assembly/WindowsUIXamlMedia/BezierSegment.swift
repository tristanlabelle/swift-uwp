// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a cubic Bezier curve drawn between two points.
public final class WindowsUIXamlMedia_BezierSegment: WindowsRuntime.WinRTImport<WindowsUIXamlMedia_BezierSegmentProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMedia_BezierSegmentProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.IBezierSegment members

    /// Gets or sets the first control point of the curve.
    /// - Returns: The first control point of the curve. The default is a Point with value 0,0.
    public var point1: WindowsFoundation_Point {
        get throws {
            try _interop.get_Point1()
        }
    }

    /// Gets or sets the first control point of the curve.
    /// - Returns: The first control point of the curve. The default is a Point with value 0,0.
    public func point1(_ value: WindowsFoundation_Point) throws {
        try _interop.put_Point1(value)
    }

    /// Gets or sets the second control point of the curve.
    /// - Returns: The second control point of the curve.
    public var point2: WindowsFoundation_Point {
        get throws {
            try _interop.get_Point2()
        }
    }

    /// Gets or sets the second control point of the curve.
    /// - Returns: The second control point of the curve.
    public func point2(_ value: WindowsFoundation_Point) throws {
        try _interop.put_Point2(value)
    }

    /// Gets or sets the end point of the curve.
    /// - Returns: The end point of the curve.
    public var point3: WindowsFoundation_Point {
        get throws {
            try _interop.get_Point3()
        }
    }

    /// Gets or sets the end point of the curve.
    /// - Returns: The end point of the curve.
    public func point3(_ value: WindowsFoundation_Point) throws {
        try _interop.put_Point3(value)
    }

    // MARK: Windows.UI.Xaml.Media.IBezierSegmentStatics members

    /// Identifies the Point1 dependency property.
    /// - Returns: The identifier for the Point1 dependency property.
    public static var point1Property: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibezierSegmentStatics.get_Point1Property())
        }
    }

    /// Identifies the Point2 dependency property.
    /// - Returns: The identifier for the Point2 dependency property.
    public static var point2Property: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibezierSegmentStatics.get_Point2Property())
        }
    }

    /// Identifies the Point3 dependency property.
    /// - Returns: The identifier for the Point3 dependency property.
    public static var point3Property: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibezierSegmentStatics.get_Point3Property())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.BezierSegment", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibezierSegmentStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IBezierSegmentStatics>? = nil

    internal static var _ibezierSegmentStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMedia_IBezierSegmentStatics> {
        get throws {
            try _ibezierSegmentStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.BezierSegment", id: CWinRT.SWRT_WindowsUIXamlMedia_IBezierSegmentStatics.iid)
            }
        }
    }
}