// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a source of log messages.
public final class WindowsFoundationDiagnostics_LoggingChannel: WindowsRuntime.WinRTImport<WindowsFoundationDiagnostics_LoggingChannelProjection>, WindowsFoundationDiagnostics_ILoggingChannelProtocol, WindowsFoundation_IClosableProtocol, WindowsFoundationDiagnostics_ILoggingTargetProtocol {
    // MARK: Windows.Foundation.Diagnostics.ILoggingChannelFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingChannelFactory.create(name)))
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingChannelFactory2 members

    public convenience init(_ name: Swift.String, _ options: WindowsFoundationDiagnostics_LoggingChannelOptions?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingChannelFactory2.createWithOptions(name, options)))
    }

    public convenience init(_ name: Swift.String, _ options: WindowsFoundationDiagnostics_LoggingChannelOptions?, _ id: Foundation.UUID) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingChannelFactory2.createWithOptionsAndId(name, options, id)))
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingChannel members

    /// Gets a value that indicates whether at least one session is logging events from this channel.
    /// - Returns: Returns **true** if at least one session is listening for events from the channel, and otherwise **false**.
    public var enabled: Swift.Bool {
        get throws {
            try _interop.get_Enabled()
        }
    }

    /// Gets the minimum level at which any session is listening to events from this channel.
    /// - Returns: The event level required for the session to listen to an event from this channel.
    public var level: WindowsFoundationDiagnostics_LoggingLevel {
        get throws {
            try _interop.get_Level()
        }
    }

    /// Gets the name of the current LoggingChannel.
    /// - Returns: The name.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Raised when the logging channel is attached to a LoggingSession or other event tracing and debugging tools.
    public func loggingEnabled(adding handler: WindowsFoundation_TypedEventHandler<WindowsFoundationDiagnostics_ILoggingChannel?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LoggingEnabled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: loggingEnabled)
    }

    public func loggingEnabled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LoggingEnabled(token)
    }

    /// Logs a message to the current LoggingChannel.
    /// - Parameter eventString: The message to log.
    public func logMessage(_ eventString: Swift.String) throws {
        try _interop.logMessage(eventString)
    }

    /// Logs a message to the current LoggingChannel with the specified LoggingLevel.
    /// - Parameter eventString: The message to log.
    /// - Parameter level: The logging level.
    public func logMessage(_ eventString: Swift.String, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _interop.logMessageWithLevel(eventString, level)
    }

    /// Logs data to the current LoggingChannel.
    /// - Parameter value1: The string to associate with *value2*.
    /// - Parameter value2: The value to associate with *value1*.
    public func logValuePair(_ value1: Swift.String, _ value2: Swift.Int32) throws {
        try _interop.logValuePair(value1, value2)
    }

    /// Logs data to the current LoggingChannel with the specified LoggingLevel.
    /// - Parameter value1: The string to associate with *value2*.
    /// - Parameter value2: The value to associate with *value1*.
    /// - Parameter level: The logging level.
    public func logValuePair(_ value1: Swift.String, _ value2: Swift.Int32, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _interop.logValuePairWithLevel(value1, value2, level)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Ends logging on the current logging channel.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingChannel2 members

    /// Returns the provider identifier for this channel.
    /// - Returns: The provider identifier for this channel.
    public var id: Foundation.UUID {
        get throws {
            try _iloggingChannel2.get_Id()
        }
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingTarget members

    /// Indicates whether at least one session is listening for events from the channel.
    /// - Returns: Returns **true** if at least one session is listening for events from the channel, and otherwise **false**.
    public func isEnabled() throws -> Swift.Bool {
        try _iloggingTarget.isEnabled()
    }

    /// Indicates whether at least one session is listening for events with the specified event severity level from the channel.
    /// - Parameter level: The event severity level.
    /// - Returns: Returns **true** if at least one session is listening for events with the specified level from the channel, and otherwise **false**.
    public func isEnabled(_ level: WindowsFoundationDiagnostics_LoggingLevel) throws -> Swift.Bool {
        try _iloggingTarget.isEnabledWithLevel(level)
    }

    /// Indicates whether at least one session is listening for events with the specified level and keywords from this channel.
    /// - Parameter level: The event severity level.
    /// - Parameter keywords: The keywords. Each bit of the keywords value represents an event category.
    /// - Returns: Returns **true** if at least one session is listening for events with the specified level and keywords from the channel, and otherwise **false**.
    public func isEnabled(_ level: WindowsFoundationDiagnostics_LoggingLevel, _ keywords: Swift.Int64) throws -> Swift.Bool {
        try _iloggingTarget.isEnabledWithLevelAndKeywords(level, keywords)
    }

    /// Logs an event with the specified name.
    /// - Parameter eventName: The name for this event.
    public func logEvent(_ eventName: Swift.String) throws {
        try _iloggingTarget.logEvent(eventName)
    }

    /// Logs an event with the specified name and fields.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?) throws {
        try _iloggingTarget.logEventWithFields(eventName, fields)
    }

    /// Logs an event with the specified name, fields, and level.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The level of detail for this event.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _iloggingTarget.logEventWithFieldsAndLevel(eventName, fields, level)
    }

    /// Logs an event with the specified name, fields, level, and options.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The level of detail for this event.
    /// - Parameter options: The options for this event. Pass **null** to use the default options. The options are for advanced scenarios. The default values are designed to work well for most events.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel, _ options: WindowsFoundationDiagnostics_LoggingOptions?) throws {
        try _iloggingTarget.logEventWithFieldsAndOptions(eventName, fields, level, options)
    }

    /// Writes an activity start event and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for this event.
    /// - Returns: Returns an object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivity(startEventName))
    }

    /// Writes an activity start event with the specified fields and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for this event.
    /// - Parameter fields: The fields for this event.
    /// - Returns: Returns an object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFields(startEventName, fields))
    }

    /// Writes an activity start event with the specified fields and level, and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null **.
    /// - Parameter level: The level of detail for this event.
    /// - Returns: Returns an object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFieldsAndLevel(startEventName, fields, level))
    }

    /// Writes an activity start event with the specified fields, level, and options, and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The level of detail for this event.
    /// - Parameter options: The options for this event. Pass **null** to use the default options. The options are for advanced scenarios. The default values are designed to work well for most events.
    /// - Returns: Returns an object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel, _ options: WindowsFoundationDiagnostics_LoggingOptions?) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFieldsAndOptions(startEventName, fields, level, options))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iloggingChannel2_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannel2>? = nil

    internal var _iloggingChannel2: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannel2> {
        get throws {
            try _iloggingChannel2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannel2.iid).cast(to: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannel2.self)
            }
        }
    }

    private var _iloggingTarget_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget>? = nil

    internal var _iloggingTarget: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget> {
        get throws {
            try _iloggingTarget_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget.iid).cast(to: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _iloggingChannel2_storage?.release()
        _iloggingTarget_storage?.release()
    }

    private static var _iloggingChannelFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory>? = nil

    internal static var _iloggingChannelFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory> {
        get throws {
            try _iloggingChannelFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Diagnostics.LoggingChannel", id: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory.iid)
            }
        }
    }

    private static var _iloggingChannelFactory2_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory2>? = nil

    internal static var _iloggingChannelFactory2: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory2> {
        get throws {
            try _iloggingChannelFactory2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Diagnostics.LoggingChannel", id: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingChannelFactory2.iid)
            }
        }
    }
}