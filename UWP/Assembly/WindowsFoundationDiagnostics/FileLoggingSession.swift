// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the destination of logged messages from LoggingChannel instances.
public final class WindowsFoundationDiagnostics_FileLoggingSession: WindowsRuntime.WinRTImport<WindowsFoundationDiagnostics_FileLoggingSessionProjection>, WindowsFoundationDiagnostics_IFileLoggingSessionProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Foundation.Diagnostics.IFileLoggingSessionFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ifileLoggingSessionFactory.create(name)))
    }

    // MARK: Windows.Foundation.Diagnostics.IFileLoggingSession members

    /// Gets the name of the logging session.
    /// - Returns: The session name.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Raised when a log file is saved.
    public func logFileGenerated(adding handler: WindowsFoundation_TypedEventHandler<WindowsFoundationDiagnostics_IFileLoggingSession?, WindowsFoundationDiagnostics_LogFileGeneratedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LogFileGenerated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: logFileGenerated)
    }

    public func logFileGenerated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LogFileGenerated(token)
    }

    /// Adds a logging channel to the current logging session.
    /// - Parameter loggingChannel: The logging channel to add.
    public func addLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?) throws {
        try _interop.addLoggingChannel(loggingChannel)
    }

    /// Adds a logging channel to the current logging session. The logging channel only accepts events that have a logging level at or above the specified logging level.
    /// - Parameter loggingChannel: The logging channel to add.
    /// - Parameter maxLevel: The *minimum* logging level that an event must have to be accepted by the session.
    public func addLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?, _ maxLevel: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _interop.addLoggingChannelWithLevel(loggingChannel, maxLevel)
    }

    /// Removes the specified logging channel from the current logging session.
    /// - Parameter loggingChannel: The logging channel to remove.
    public func removeLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?) throws {
        try _interop.removeLoggingChannel(loggingChannel)
    }

    /// Ends the current logging session and saves it to a file.
    /// - Returns: When this method completes, it returns the new file as a StorageFile. Returns **NULL** if there are no events in the session or if logging has just rolled over into a new file that doesn't contain events yet.
    public func closeAndSaveToFileAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.closeAndSaveToFileAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Ends the current logging session.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _ifileLoggingSessionFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_IFileLoggingSessionFactory>? = nil

    internal static var _ifileLoggingSessionFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_IFileLoggingSessionFactory> {
        get throws {
            try _ifileLoggingSessionFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Diagnostics.FileLoggingSession", id: CWinRT.SWRT_WindowsFoundationDiagnostics_IFileLoggingSessionFactory.iid)
            }
        }
    }
}