// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates Event Tracing for Windows (ETW) events that mark the start and end of a group of related events.
public final class WindowsFoundationDiagnostics_LoggingActivity: WindowsRuntime.WinRTImport<WindowsFoundationDiagnostics_LoggingActivityProjection>, WindowsFoundation_IClosableProtocol, WindowsFoundationDiagnostics_ILoggingTargetProtocol {
    // MARK: Windows.Foundation.Diagnostics.ILoggingActivityFactory members

    public convenience init(_ activityName: Swift.String, _ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingActivityFactory.createLoggingActivity(activityName, loggingChannel)))
    }

    public convenience init(_ activityName: Swift.String, _ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingActivityFactory.createLoggingActivityWithLevel(activityName, loggingChannel, level)))
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingActivity members

    /// Gets the identifier for the current logging activity.
    /// - Returns: The identifier.
    public var id: Foundation.UUID {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the name of the current logging activity.
    /// - Returns: The name.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    // MARK: Windows.Foundation.IClosable members

    /// Ends the current logging activity.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingActivity2 members

    /// Returns the channel associated with this activity.
    /// - Returns: The channel associated with this activity.
    public var channel: WindowsFoundationDiagnostics_LoggingChannel {
        get throws {
            try COM.NullResult.unwrap(_iloggingActivity2.get_Channel())
        }
    }

    /// Marks the activity as closed/disposed and generates a stop event with the specified event name.
    /// - Parameter stopEventName: The name for the stop event.
    public func stopActivity(_ stopEventName: Swift.String) throws {
        try _iloggingActivity2.stopActivity(stopEventName)
    }

    /// Marks the activity as closed/disposed and generates a stop event with the specified event name and fields.
    /// - Parameter stopEventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    public func stopActivity(_ stopEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?) throws {
        try _iloggingActivity2.stopActivityWithFields(stopEventName, fields)
    }

    /// Marks the activity as closed/disposed and generates a stop event with the specified event name, fields, and options.
    /// - Parameter stopEventName: The name for the stop event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter options: The options for this event. Pass **null** to use the default options. The options are for advanced scenarios. The default values are designed to work well for most events.
    public func stopActivity(_ stopEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ options: WindowsFoundationDiagnostics_LoggingOptions?) throws {
        try _iloggingActivity2.stopActivityWithFieldsAndOptions(stopEventName, fields, options)
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingTarget members

    /// Indicates whether at least one session is listening for events from the channel associated with this activity.
    /// - Returns: Returns **true** if at least one session is listening for events from the channel associated with this activity, and otherwise **false**.
    public func isEnabled() throws -> Swift.Bool {
        try _iloggingTarget.isEnabled()
    }

    /// Indicates whether at least one session is listening for events with the specified event severity level from the channel associated with this activity.
    /// - Parameter level: The event severity level.
    /// - Returns: Returns **true** if at least one session is listening for events with the specified level from the channel associated with this activity, and otherwise **false**.
    public func isEnabled(_ level: WindowsFoundationDiagnostics_LoggingLevel) throws -> Swift.Bool {
        try _iloggingTarget.isEnabledWithLevel(level)
    }

    /// Indicates whether at least one session is listening for events with the specified level and keywords from the channel associated with this activity.
    /// - Parameter level: The event severity level.
    /// - Parameter keywords: The keywords. Each bit of the keywords value represents an event category.
    /// - Returns: Returns **true** if at least one session is listening for events with the specified level and keywords from the channel associated with this activity, and otherwise **false**.
    public func isEnabled(_ level: WindowsFoundationDiagnostics_LoggingLevel, _ keywords: Swift.Int64) throws -> Swift.Bool {
        try _iloggingTarget.isEnabledWithLevelAndKeywords(level, keywords)
    }

    /// Logs an event with the specified name.
    /// - Parameter eventName: The name for this event.
    public func logEvent(_ eventName: Swift.String) throws {
        try _iloggingTarget.logEvent(eventName)
    }

    /// Logs an event with the specified name and fields.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?) throws {
        try _iloggingTarget.logEventWithFields(eventName, fields)
    }

    /// Logs an event with the specified name, fields, and level.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The severity level for this event.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _iloggingTarget.logEventWithFieldsAndLevel(eventName, fields, level)
    }

    /// Logs an event with the specified name, fields, level, and options.
    /// - Parameter eventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The severity level for this event.
    /// - Parameter options: The options for this event. Pass **null** to use the default options. The options are for advanced scenarios. The default values are designed to work well for most events.
    public func logEvent(_ eventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel, _ options: WindowsFoundationDiagnostics_LoggingOptions?) throws {
        try _iloggingTarget.logEventWithFieldsAndOptions(eventName, fields, level, options)
    }

    /// Writes an activity start event and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for the start event.
    /// - Returns: An object the represents the new activity.
    public func startActivity(_ startEventName: Swift.String) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivity(startEventName))
    }

    /// Writes an activity start event with fields and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for the start event.
    /// - Parameter fields: The fields for this event.
    /// - Returns: An object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFields(startEventName, fields))
    }

    /// Writes an activity start event with the specified fields and level and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for the start event.
    /// - Parameter fields: The fields for this event. May be **null **.
    /// - Parameter level: The level of detail for this event.
    /// - Returns: An object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFieldsAndLevel(startEventName, fields, level))
    }

    /// Writes an activity start event with the specified fields, level, and options, and creates a **LoggingActivity** object.
    /// - Parameter startEventName: The name for this event.
    /// - Parameter fields: The fields for this event. May be **null**.
    /// - Parameter level: The level of detail for this event.
    /// - Parameter options: The options for this event. Pass **null** to use the default options. The options are for advanced scenarios. The default values are designed to work well for most events.
    /// - Returns: An object that represents the new activity.
    public func startActivity(_ startEventName: Swift.String, _ fields: WindowsFoundationDiagnostics_LoggingFields?, _ level: WindowsFoundationDiagnostics_LoggingLevel, _ options: WindowsFoundationDiagnostics_LoggingOptions?) throws -> WindowsFoundationDiagnostics_LoggingActivity {
        try COM.NullResult.unwrap(_iloggingTarget.startActivityWithFieldsAndOptions(startEventName, fields, level, options))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iloggingActivity2_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivity2>? = nil

    internal var _iloggingActivity2: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivity2> {
        get throws {
            try _iloggingActivity2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivity2.iid).cast(to: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivity2.self)
            }
        }
    }

    private var _iloggingTarget_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget>? = nil

    internal var _iloggingTarget: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget> {
        get throws {
            try _iloggingTarget_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget.iid).cast(to: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingTarget.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _iloggingActivity2_storage?.release()
        _iloggingTarget_storage?.release()
    }

    private static var _iloggingActivityFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivityFactory>? = nil

    internal static var _iloggingActivityFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivityFactory> {
        get throws {
            try _iloggingActivityFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Diagnostics.LoggingActivity", id: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingActivityFactory.iid)
            }
        }
    }
}