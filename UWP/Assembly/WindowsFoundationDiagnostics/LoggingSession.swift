// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the destination of logged messages from LoggingChannel instances.
public final class WindowsFoundationDiagnostics_LoggingSession: WindowsRuntime.WinRTImport<WindowsFoundationDiagnostics_LoggingSessionProjection>, WindowsFoundationDiagnostics_ILoggingSessionProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Foundation.Diagnostics.ILoggingSessionFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iloggingSessionFactory.create(name)))
    }

    // MARK: Windows.Foundation.Diagnostics.ILoggingSession members

    /// Gets the name of the logging session.
    /// - Returns: The session name.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Saves the current logging session to a file.
    /// - Parameter folder: The folder that contains the log file.
    /// - Parameter fileName: The name of the log file.
    /// - Returns: When this method completes, it returns the new file as a StorageFile.
    public func saveToFileAsync(_ folder: WindowsStorage_IStorageFolder?, _ fileName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.saveToFileAsync(folder, fileName))
    }

    /// Adds a logging channel to the current logging session.
    /// - Parameter loggingChannel: The logging channel to add.
    public func addLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?) throws {
        try _interop.addLoggingChannel(loggingChannel)
    }

    /// Adds a logging channel with the specified logging level to the current logging session.
    /// - Parameter loggingChannel: The logging channel to add.
    /// - Parameter maxLevel: The logging level for *loggingChannel*.
    public func addLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?, _ maxLevel: WindowsFoundationDiagnostics_LoggingLevel) throws {
        try _interop.addLoggingChannelWithLevel(loggingChannel, maxLevel)
    }

    /// Removes the specified logging channel from the current logging session.
    /// - Parameter loggingChannel: The logging channel to remove.
    public func removeLoggingChannel(_ loggingChannel: WindowsFoundationDiagnostics_ILoggingChannel?) throws {
        try _interop.removeLoggingChannel(loggingChannel)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Ends the current logging session.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iloggingSessionFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingSessionFactory>? = nil

    internal static var _iloggingSessionFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingSessionFactory> {
        get throws {
            try _iloggingSessionFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Diagnostics.LoggingSession", id: CWinRT.SWRT_WindowsFoundationDiagnostics_ILoggingSessionFactory.iid)
            }
        }
    }
}