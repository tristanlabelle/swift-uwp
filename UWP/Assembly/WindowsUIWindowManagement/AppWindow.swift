// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a system-managed container for the content of an app.
public final class WindowsUIWindowManagement_AppWindow: WindowsRuntime.WinRTImport<WindowsUIWindowManagement_AppWindowProjection> {
    // MARK: Windows.UI.WindowManagement.IAppWindow members

    /// Gets the app content currently attached to the window.
    /// - Returns: The app content currently attached to the window.
    public var content: WindowsUI_UIContentRoot {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets the dispatcher queue for the app window.
    /// - Returns: The dispatcher queue for the app window.
    public var dispatcherQueue: WindowsSystem_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DispatcherQueue())
        }
    }

    /// Gets the frame for the app window.
    /// - Returns: The frame for the app window.
    public var frame: WindowsUIWindowManagement_AppWindowFrame {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Frame())
        }
    }

    /// Gets a value that indicates whether the window can be seen on a display.
    /// - Returns: **true** if the window can be seen on a display; otherwise, **false**.
    public var isVisible: Swift.Bool {
        get throws {
            try _interop.get_IsVisible()
        }
    }

    /// Gets or sets a string that identifies this window for tracking and saving state.
    /// - Returns: A string that identifies this window for tracking and saving state.
    public var persistedStateId: Swift.String {
        get throws {
            try _interop.get_PersistedStateId()
        }
    }

    /// Gets or sets a string that identifies this window for tracking and saving state.
    /// - Returns: A string that identifies this window for tracking and saving state.
    public func persistedStateId(_ value: Swift.String) throws {
        try _interop.put_PersistedStateId(value)
    }

    /// Gets the presenter for the app window.
    /// - Returns: The presenter for the app window.
    public var presenter: WindowsUIWindowManagement_AppWindowPresenter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Presenter())
        }
    }

    /// Gets or sets the displayed title of the app window.
    /// - Returns: The displayed title of the app window.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Gets or sets the displayed title of the app window.
    /// - Returns: The displayed title of the app window.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Gets the title bar of the app window.
    /// - Returns: The title bar of the app window.
    public var titleBar: WindowsUIWindowManagement_AppWindowTitleBar {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TitleBar())
        }
    }

    /// Gets the UI context for the app window.
    /// - Returns: The UI context for the app window.
    public var uicontext: WindowsUI_UIContext {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UIContext())
        }
    }

    /// Gets the windowing environment for the app window.
    /// - Returns: The windowing environment for the app window.
    public var windowingEnvironment: WindowsUIWindowManagement_WindowingEnvironment {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WindowingEnvironment())
        }
    }

    /// Occurs when a property of the app window has changed.
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIWindowManagement_AppWindow?, WindowsUIWindowManagement_AppWindowChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: changed)
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// Occurs after the window starts to close, but before it is closed and before the Closed event occurs.
    public func closeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIWindowManagement_AppWindow?, WindowsUIWindowManagement_AppWindowCloseRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CloseRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closeRequested)
    }

    public func closeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CloseRequested(token)
    }

    /// Occurs when the app window has been closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIWindowManagement_AppWindow?, WindowsUIWindowManagement_AppWindowClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Closes the app window.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func closeAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.closeAsync())
    }

    /// Returns a placement object that describes the app window's display region, offset, and size.
    /// - Returns: A placement object that describes the app window's display region, offset, and size.
    public func getPlacement() throws -> WindowsUIWindowManagement_AppWindowPlacement {
        try COM.NullResult.unwrap(_interop.getPlacement())
    }

    /// Returns the collection of display regions available for the app window.
    /// - Returns: The collection of display regions available for the app window.
    public func getDisplayRegions() throws -> WindowsFoundationCollections_IVectorView<WindowsUIWindowManagement_DisplayRegion?> {
        try COM.NullResult.unwrap(_interop.getDisplayRegions())
    }

    /// Makes a request to position the window in the specified display region.
    /// - Parameter displayRegion: The display region to move the window to.
    public func requestMoveToDisplayRegion(_ displayRegion: WindowsUIWindowManagement_DisplayRegion?) throws {
        try _interop.requestMoveToDisplayRegion(displayRegion)
    }

    /// Makes a request to position the window next to the current view.
    public func requestMoveAdjacentToCurrentView() throws {
        try _interop.requestMoveAdjacentToCurrentView()
    }

    /// Makes a request to position the window next to the specified anchor window.
    /// - Parameter anchorWindow: The window to position this window next to.
    public func requestMoveAdjacentToWindow(_ anchorWindow: WindowsUIWindowManagement_AppWindow?) throws {
        try _interop.requestMoveAdjacentToWindow(anchorWindow)
    }

    /// Makes a request to position the window at the specified offset relative to the anchor window.
    /// - Parameter anchorWindow: The window to position this window relative to.
    /// - Parameter contentOffset: The offset of the window relative to the anchor window.
    public func requestMoveRelativeToWindowContent(_ anchorWindow: WindowsUIWindowManagement_AppWindow?, _ contentOffset: WindowsFoundation_Point) throws {
        try _interop.requestMoveRelativeToWindowContent(anchorWindow, contentOffset)
    }

    /// Makes a request to position the window at the specified offset relative to the current view.
    /// - Parameter contentOffset: The offset of the window relative to the current view.
    public func requestMoveRelativeToCurrentViewContent(_ contentOffset: WindowsFoundation_Point) throws {
        try _interop.requestMoveRelativeToCurrentViewContent(contentOffset)
    }

    /// Makes a request to position the window in the specified display region at the specified offset.
    /// - Parameter displayRegion: The display region to move the window to.
    /// - Parameter displayRegionOffset: The offset of the window in the display region.
    public func requestMoveRelativeToDisplayRegion(_ displayRegion: WindowsUIWindowManagement_DisplayRegion?, _ displayRegionOffset: WindowsFoundation_Point) throws {
        try _interop.requestMoveRelativeToDisplayRegion(displayRegion, displayRegionOffset)
    }

    /// Makes a request to set the window to the specified size.
    /// - Parameter frameSize: The requested size.
    public func requestSize(_ frameSize: WindowsFoundation_Size) throws {
        try _interop.requestSize(frameSize)
    }

    /// Attempts to asynchronously show the current app window.
    /// - Returns: **true** if the window was shown successfully; otherwise, **false**.
    public func tryShowAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryShowAsync())
    }

    // MARK: Windows.UI.WindowManagement.IAppWindowStatics members

    /// Attempts to asynchronously create a new instance of AppWindow.
    /// - Returns: The new instance of AppWindow if it was created successfully.
    public static func tryCreateAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsUIWindowManagement_AppWindow?> {
        try COM.NullResult.unwrap(_iappWindowStatics.tryCreateAsync())
    }

    /// Clears any properties the system has saved for any window PersistedStateId for the given application.
    public static func clearAllPersistedState() throws {
        try _iappWindowStatics.clearAllPersistedState()
    }

    /// Clears any properties the system has saved for the window with the specified ID for the given application.
    /// - Parameter key: The PersistedStateId for the view to be cleared.
    public static func clearPersistedState(_ key: Swift.String) throws {
        try _iappWindowStatics.clearPersistedState(key)
    }

    // MARK: Implementation details

    private static var _iappWindowStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIWindowManagement_IAppWindowStatics>? = nil

    internal static var _iappWindowStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIWindowManagement_IAppWindowStatics> {
        get throws {
            try _iappWindowStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.WindowManagement.AppWindow", id: CWinRT.SWRT_WindowsUIWindowManagement_IAppWindowStatics.iid)
            }
        }
    }
}