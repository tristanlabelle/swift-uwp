// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about the system environments that are available to display the app.
public final class WindowsUIWindowManagement_WindowingEnvironment: WindowsRuntime.WinRTImport<WindowsUIWindowManagement_WindowingEnvironmentProjection> {
    // MARK: Windows.UI.WindowManagement.IWindowingEnvironment members

    /// Gets a value that indicates whether the current windowing environment is available to the app.
    /// - Returns: **true** if the current windowing environment is available to the user; otherwise, **false**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Gets a value that describes the current windowing environment.
    /// - Returns: A value that describes the current windowing environment.
    public var kind: WindowsUIWindowManagement_WindowingEnvironmentKind {
        get throws {
            try _interop.get_Kind()
        }
    }

    /// Occurs when a property of the windowing environment has changed.
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIWindowManagement_WindowingEnvironment?, WindowsUIWindowManagement_WindowingEnvironmentChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: changed)
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// Retrieves the collection of display regions for this windowing environment.
    /// - Returns: The collection of display regions for this windowing environment.
    public func getDisplayRegions() throws -> WindowsFoundationCollections_IVectorView<WindowsUIWindowManagement_DisplayRegion?> {
        try COM.NullResult.unwrap(_interop.getDisplayRegions())
    }

    // MARK: Windows.UI.WindowManagement.IWindowingEnvironmentStatics members

    /// Retrieves a collection of all existing windowing environments in the system.
    /// - Returns: A collection of all existing windowing environments in the system.
    public static func findAll() throws -> WindowsFoundationCollections_IVectorView<WindowsUIWindowManagement_WindowingEnvironment?> {
        try COM.NullResult.unwrap(_iwindowingEnvironmentStatics.findAll())
    }

    /// Retrieves a collection of all existing windowing environments in the system of the specified kind.
    /// - Parameter kind: The kind of windowing environment to find.
    /// - Returns: A collection of all existing windowing environments in the system of the specified kind.
    public static func findAll(_ kind: WindowsUIWindowManagement_WindowingEnvironmentKind) throws -> WindowsFoundationCollections_IVectorView<WindowsUIWindowManagement_WindowingEnvironment?> {
        try COM.NullResult.unwrap(_iwindowingEnvironmentStatics.findAllWithKind(kind))
    }

    // MARK: Implementation details

    private static var _iwindowingEnvironmentStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIWindowManagement_IWindowingEnvironmentStatics>? = nil

    internal static var _iwindowingEnvironmentStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIWindowManagement_IWindowingEnvironmentStatics> {
        get throws {
            try _iwindowingEnvironmentStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.WindowManagement.WindowingEnvironment", id: CWinRT.SWRT_WindowsUIWindowManagement_IWindowingEnvironmentStatics.iid)
            }
        }
    }
}