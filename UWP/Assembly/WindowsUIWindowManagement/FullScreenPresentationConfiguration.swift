// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the full screen configuration for an AppWindowPresenter.
public final class WindowsUIWindowManagement_FullScreenPresentationConfiguration: WindowsRuntime.WinRTImport<WindowsUIWindowManagement_FullScreenPresentationConfigurationProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIWindowManagement_FullScreenPresentationConfigurationProjection.self))
    }

    // MARK: Windows.UI.WindowManagement.IFullScreenPresentationConfiguration members

    /// Gets or sets a value that indicates whether Exclusive Fullscreen Mode is on.
    /// - Returns: **true** if the presentation is in Exclusive Fullscreen Mode; otherwise, **false**.
    public var isExclusive: Swift.Bool {
        get throws {
            try _interop.get_IsExclusive()
        }
    }

    /// Gets or sets a value that indicates whether Exclusive Fullscreen Mode is on.
    /// - Returns: **true** if the presentation is in Exclusive Fullscreen Mode; otherwise, **false**.
    public func isExclusive(_ value: Swift.Bool) throws {
        try _interop.put_IsExclusive(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.WindowManagement.FullScreenPresentationConfiguration", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}