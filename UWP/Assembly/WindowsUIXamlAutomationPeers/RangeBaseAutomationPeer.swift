// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A base class that provides a Microsoft UI Automation peer implementation for types that derive from RangeBase.
open class WindowsUIXamlAutomationPeers_RangeBaseAutomationPeer: WindowsRuntime.WinRTComposableClass, WindowsUIXamlAutomationProvider_IRangeValueProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Peers.IRangeBaseAutomationPeerFactory members

    public convenience init(_ owner: WindowsUIXamlControlsPrimitives_RangeBase?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_RangeBaseAutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._irangeBaseAutomationPeerFactory.createInstanceWithOwner(owner, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IRangeValueProvider members

    /// Gets a value that indicates whether the value of a control is read-only.
    /// - Returns: **true** if the value is read-only; **false** if it can be modified.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _irangeValueProvider.get_IsReadOnly()
        }
    }

    /// Gets the value that is added to or subtracted from the Value property when a large change is made, such as with the PAGE DOWN key.
    /// - Returns: The large-change value supported by the control.
    public var largeChange: Swift.Double {
        get throws {
            try _irangeValueProvider.get_LargeChange()
        }
    }

    /// Gets the maximum range value that is supported by the control.
    /// - Returns: The maximum range value supported by the control.
    public var maximum: Swift.Double {
        get throws {
            try _irangeValueProvider.get_Maximum()
        }
    }

    /// Gets the minimum range value that is supported by the control.
    /// - Returns: The minimum range value supported by the control.
    public var minimum: Swift.Double {
        get throws {
            try _irangeValueProvider.get_Minimum()
        }
    }

    /// Gets the value that is added to or subtracted from the Value property when a small change is made, such as with an arrow key.
    /// - Returns: The small-change value supported by the control.
    public var smallChange: Swift.Double {
        get throws {
            try _irangeValueProvider.get_SmallChange()
        }
    }

    /// Gets the value of the control.
    /// - Returns: The value of the control.
    public var value: Swift.Double {
        get throws {
            try _irangeValueProvider.get_Value()
        }
    }

    /// Sets the value of the control, as an implementation of the IValueProvider pattern.
    /// - Parameter value: The value to set.
    public func setValue(_ value: Swift.Double) throws {
        try _irangeValueProvider.setValue(value)
    }

    // MARK: Implementation details

    private var _irangeBaseAutomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeer>? = nil

    internal var _irangeBaseAutomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeer> {
        get throws {
            try _irangeBaseAutomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeer.self)
            }
        }
    }

    private var _irangeValueProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IRangeValueProvider>? = nil

    internal var _irangeValueProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IRangeValueProvider> {
        get throws {
            try _irangeValueProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IRangeValueProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IRangeValueProvider.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _irangeBaseAutomationPeer_storage?.release()
        _irangeValueProvider_storage?.release()
    }

    private static var _irangeBaseAutomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeerFactory>? = nil

    internal static var _irangeBaseAutomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeerFactory> {
        get throws {
            try _irangeBaseAutomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.RangeBaseAutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IRangeBaseAutomationPeerFactory.iid)
            }
        }
    }
}