// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes AppBar types to Microsoft UI Automation.
open class WindowsUIXamlAutomationPeers_AppBarAutomationPeer: WindowsRuntime.WinRTComposableClass, WindowsUIXamlAutomationProvider_IToggleProviderProtocol, WindowsUIXamlAutomationProvider_IExpandCollapseProviderProtocol, WindowsUIXamlAutomationProvider_IWindowProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Peers.IAppBarAutomationPeerFactory members

    public convenience init(_ owner: WindowsUIXamlControls_AppBar?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_AppBarAutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iappBarAutomationPeerFactory.createInstanceWithOwner(owner, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IToggleProvider members

    /// Retrieves the toggle state of the owner AppBar.
    /// - Returns: The ToggleState of the owner control.
    public var toggleState: WindowsUIXamlAutomation_ToggleState {
        get throws {
            try _itoggleProvider.get_ToggleState()
        }
    }

    /// Cycles through the toggle states of an AppBarAutomationPeer.
    public func toggle() throws {
        try _itoggleProvider.toggle()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider members

    /// Gets the state, expanded or collapsed, of the control.
    /// - Returns: A value of the enumeration.
    public var expandCollapseState: WindowsUIXamlAutomation_ExpandCollapseState {
        get throws {
            try _iexpandCollapseProvider.get_ExpandCollapseState()
        }
    }

    /// Hides all nodes, controls, or content that are descendants of the control.
    public func collapse() throws {
        try _iexpandCollapseProvider.collapse()
    }

    /// Displays all child nodes, controls, or content of the control.
    public func expand() throws {
        try _iexpandCollapseProvider.expand()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IWindowProvider members

    /// Gets the interaction state of the app bar, such as running, closing, and so on.
    /// - Returns: The interaction state of the app bar.
    public var interactionState: WindowsUIXamlAutomation_WindowInteractionState {
        get throws {
            try _iwindowProvider.get_InteractionState()
        }
    }

    /// Gets a Boolean value indicating if the app bar is modal.
    /// - Returns: **true** if the app bar is modal; otherwise, **false**.
    public var isModal: Swift.Bool {
        get throws {
            try _iwindowProvider.get_IsModal()
        }
    }

    /// Gets a Boolean value indicating if the app bar is the topmost element in the z-order of layout.
    /// - Returns: **true** if the app bar is topmost; otherwise, **false**.
    public var isTopmost: Swift.Bool {
        get throws {
            try _iwindowProvider.get_IsTopmost()
        }
    }

    /// Gets a Boolean value that indicates whether the app bar can be maximized.
    /// - Returns: **true** if the app bar can be maximized; otherwise, **false**.
    public var maximizable: Swift.Bool {
        get throws {
            try _iwindowProvider.get_Maximizable()
        }
    }

    /// Gets a Boolean value that indicates whether the app bar can be minimized.
    /// - Returns: **true** if the app bar can be minimized; otherwise, **false**.
    public var minimizable: Swift.Bool {
        get throws {
            try _iwindowProvider.get_Minimizable()
        }
    }

    /// Gets the visual state of the app bar.
    /// - Returns: The visual state of the app bar, as a value of the enumeration.
    public var visualState: WindowsUIXamlAutomation_WindowVisualState {
        get throws {
            try _iwindowProvider.get_VisualState()
        }
    }

    /// Closes the app bar.
    public func close() throws {
        try _iwindowProvider.close()
    }

    /// Changes the visual state of the app bar (such as minimizing or maximizing it).
    /// - Parameter state: The visual state of the app bar to change to, as a value of the enumeration.
    public func setVisualState(_ state: WindowsUIXamlAutomation_WindowVisualState) throws {
        try _iwindowProvider.setVisualState(state)
    }

    /// Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first.
    /// - Parameter milliseconds: The amount of time, in milliseconds, to wait for the associated process to become idle.
    /// - Returns: **true** if the app bar has entered the idle state; **false** if the timeout occurred.
    public func waitForInputIdle(_ milliseconds: Swift.Int32) throws -> Swift.Bool {
        try _iwindowProvider.waitForInputIdle(milliseconds)
    }

    // MARK: Implementation details

    private var _iappBarAutomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeer>? = nil

    internal var _iappBarAutomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeer> {
        get throws {
            try _iappBarAutomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeer.self)
            }
        }
    }

    private var _itoggleProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider>? = nil

    internal var _itoggleProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider> {
        get throws {
            try _itoggleProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider.self)
            }
        }
    }

    private var _iexpandCollapseProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider>? = nil

    internal var _iexpandCollapseProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider> {
        get throws {
            try _iexpandCollapseProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.self)
            }
        }
    }

    private var _iwindowProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider>? = nil

    internal var _iwindowProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider> {
        get throws {
            try _iwindowProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iappBarAutomationPeer_storage?.release()
        _itoggleProvider_storage?.release()
        _iexpandCollapseProvider_storage?.release()
        _iwindowProvider_storage?.release()
    }

    private static var _iappBarAutomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeerFactory>? = nil

    internal static var _iappBarAutomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeerFactory> {
        get throws {
            try _iappBarAutomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.AppBarAutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAppBarAutomationPeerFactory.iid)
            }
        }
    }
}