// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes ScrollViewer types to Microsoft UI Automation.
open class WindowsUIXamlAutomationPeers_ScrollViewerAutomationPeer: WindowsRuntime.WinRTComposableClass, WindowsUIXamlAutomationProvider_IScrollProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Peers.IScrollViewerAutomationPeerFactory members

    public convenience init(_ owner: WindowsUIXamlControls_ScrollViewer?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_ScrollViewerAutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iscrollViewerAutomationPeerFactory.createInstanceWithOwner(owner, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IScrollProvider members

    /// Gets the current horizontal scroll position.
    /// - Returns: The horizontal scroll position as a percentage of the total content area within the control.
    public var horizontalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalScrollPercent()
        }
    }

    /// Gets the current horizontal view size.
    /// - Returns: The horizontal size of the viewable region as a percentage of the total content area within the control.
    public var horizontalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalViewSize()
        }
    }

    /// Gets a value that indicates whether the control can scroll horizontally.
    /// - Returns: **true** if the control can scroll horizontally; otherwise, **false**.
    public var horizontallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_HorizontallyScrollable()
        }
    }

    /// Gets the current vertical scroll position.
    /// - Returns: The vertical scroll position as a percentage of the total content area within the control.
    public var verticalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalScrollPercent()
        }
    }

    /// Gets the vertical view size.
    /// - Returns: The vertical size of the viewable region as a percentage of the total content area within the control.
    public var verticalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalViewSize()
        }
    }

    /// Gets a value that indicates whether the control can scroll vertically.
    /// - Returns: **true** if the control can scroll vertically; otherwise, **false**.
    public var verticallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_VerticallyScrollable()
        }
    }

    /// Scrolls the visible region of the content area horizontally, vertically, or both.
    /// - Parameter horizontalAmount: The horizontal increment that is specific to the control. Pass NoScroll if the control cannot be scrolled in this direction.
    /// - Parameter verticalAmount: The vertical increment that is specific to the control. Pass NoScroll if the control cannot be scrolled in this direction.
    public func scroll(_ horizontalAmount: WindowsUIXamlAutomation_ScrollAmount, _ verticalAmount: WindowsUIXamlAutomation_ScrollAmount) throws {
        try _iscrollProvider.scroll(horizontalAmount, verticalAmount)
    }

    /// Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.
    /// - Parameter horizontalPercent: The horizontal position as a percentage of the content area's total range. Pass NoScroll if the control cannot be scrolled in this direction.
    /// - Parameter verticalPercent: The vertical position as a percentage of the content area's total range. Pass NoScroll if the control cannot be scrolled in this direction.
    public func setScrollPercent(_ horizontalPercent: Swift.Double, _ verticalPercent: Swift.Double) throws {
        try _iscrollProvider.setScrollPercent(horizontalPercent, verticalPercent)
    }

    // MARK: Implementation details

    private var _iscrollViewerAutomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeer>? = nil

    internal var _iscrollViewerAutomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeer> {
        get throws {
            try _iscrollViewerAutomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeer.self)
            }
        }
    }

    private var _iscrollProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider>? = nil

    internal var _iscrollProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider> {
        get throws {
            try _iscrollProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iscrollViewerAutomationPeer_storage?.release()
        _iscrollProvider_storage?.release()
    }

    private static var _iscrollViewerAutomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeerFactory>? = nil

    internal static var _iscrollViewerAutomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeerFactory> {
        get throws {
            try _iscrollViewerAutomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.ScrollViewerAutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IScrollViewerAutomationPeerFactory.iid)
            }
        }
    }
}