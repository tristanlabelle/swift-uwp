// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes ComboBox types to Microsoft UI Automation.
open class WindowsUIXamlAutomationPeers_ComboBoxAutomationPeer: WindowsRuntime.WinRTComposableClass, WindowsUIXamlAutomationProvider_IValueProviderProtocol, WindowsUIXamlAutomationProvider_IExpandCollapseProviderProtocol, WindowsUIXamlAutomationProvider_IWindowProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Peers.IComboBoxAutomationPeerFactory members

    public convenience init(_ owner: WindowsUIXamlControls_ComboBox?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_ComboBoxAutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icomboBoxAutomationPeerFactory.createInstanceWithOwner(owner, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IValueProvider members

    /// Gets a value that specifies whether the value of a control is read-only.
    /// - Returns: **true** if the control value can be set; otherwise, **false**.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _ivalueProvider.get_IsReadOnly()
        }
    }

    /// Gets the value of the control.
    /// - Returns: The value of the control, as a string.
    public var value: Swift.String {
        get throws {
            try _ivalueProvider.get_Value()
        }
    }

    /// Sets the value of a control, as an implementation of the IValueProvider pattern.
    /// - Parameter value: The value to set.
    public func setValue(_ value: Swift.String) throws {
        try _ivalueProvider.setValue(value)
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider members

    /// Gets the state, expanded or collapsed, of the control.
    /// - Returns: A value of the enumeration.
    public var expandCollapseState: WindowsUIXamlAutomation_ExpandCollapseState {
        get throws {
            try _iexpandCollapseProvider.get_ExpandCollapseState()
        }
    }

    /// Hides all nodes, controls, or content that are descendants of the control.
    public func collapse() throws {
        try _iexpandCollapseProvider.collapse()
    }

    /// Displays all child nodes, controls, or content of the control.
    public func expand() throws {
        try _iexpandCollapseProvider.expand()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IWindowProvider members

    /// Gets the interaction state of the ComboBox control.
    /// - Returns: The interaction state of the ComboBox control, as a value of the enumeration.
    public var interactionState: WindowsUIXamlAutomation_WindowInteractionState {
        get throws {
            try _iwindowProvider.get_InteractionState()
        }
    }

    /// Gets a Boolean value indicating if the ComboBox control is modal.
    /// - Returns: A Boolean value indicating if the ComboBox control is modal.
    public var isModal: Swift.Bool {
        get throws {
            try _iwindowProvider.get_IsModal()
        }
    }

    /// Gets a Boolean value indicating if the ComboBox control is topmost.
    /// - Returns: A Boolean value indicating if the ComboBox control is topmost.
    public var isTopmost: Swift.Bool {
        get throws {
            try _iwindowProvider.get_IsTopmost()
        }
    }

    /// Gets a Boolean value indicating if the ComboBox control can be maximized.
    /// - Returns: A Boolean value indicating if the ComboBox control can be maximized.
    public var maximizable: Swift.Bool {
        get throws {
            try _iwindowProvider.get_Maximizable()
        }
    }

    /// Gets a Boolean value indicating if the ComboBox control can be minimized.
    /// - Returns: A Boolean value indicating if the ComboBox control can be minimized.
    public var minimizable: Swift.Bool {
        get throws {
            try _iwindowProvider.get_Minimizable()
        }
    }

    /// Gets the WindowVisualState for the ComboBox control.
    /// - Returns: The WindowVisualState for the ComboBox control, as a value of the enumeration.
    public var visualState: WindowsUIXamlAutomation_WindowVisualState {
        get throws {
            try _iwindowProvider.get_VisualState()
        }
    }

    /// Attempts to close the ComboBox control.
    public func close() throws {
        try _iwindowProvider.close()
    }

    /// Changes the visual state of the ComboBox control.
    /// - Parameter state: The visual state for the ComboBox control, as a value of the enumeration.
    public func setVisualState(_ state: WindowsUIXamlAutomation_WindowVisualState) throws {
        try _iwindowProvider.setVisualState(state)
    }

    /// Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.
    /// - Parameter milliseconds: The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is **Int32.MaxValue**.
    /// - Returns: **true** if the window has entered the idle state; **false** if the time-out occurred.
    public func waitForInputIdle(_ milliseconds: Swift.Int32) throws -> Swift.Bool {
        try _iwindowProvider.waitForInputIdle(milliseconds)
    }

    // MARK: Implementation details

    private var _icomboBoxAutomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeer>? = nil

    internal var _icomboBoxAutomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeer> {
        get throws {
            try _icomboBoxAutomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeer.self)
            }
        }
    }

    private var _ivalueProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IValueProvider>? = nil

    internal var _ivalueProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IValueProvider> {
        get throws {
            try _ivalueProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IValueProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IValueProvider.self)
            }
        }
    }

    private var _iexpandCollapseProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider>? = nil

    internal var _iexpandCollapseProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider> {
        get throws {
            try _iexpandCollapseProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.self)
            }
        }
    }

    private var _iwindowProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider>? = nil

    internal var _iwindowProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider> {
        get throws {
            try _iwindowProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IWindowProvider.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icomboBoxAutomationPeer_storage?.release()
        _ivalueProvider_storage?.release()
        _iexpandCollapseProvider_storage?.release()
        _iwindowProvider_storage?.release()
    }

    private static var _icomboBoxAutomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeerFactory>? = nil

    internal static var _icomboBoxAutomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeerFactory> {
        get throws {
            try _icomboBoxAutomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.ComboBoxAutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IComboBoxAutomationPeerFactory.iid)
            }
        }
    }
}