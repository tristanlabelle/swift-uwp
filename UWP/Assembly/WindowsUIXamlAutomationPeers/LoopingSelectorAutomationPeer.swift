// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes LoopingSelector types to Microsoft UI Automation.
public final class WindowsUIXamlAutomationPeers_LoopingSelectorAutomationPeer: WindowsRuntime.WinRTImport<WindowsUIXamlAutomationPeers_LoopingSelectorAutomationPeerProjection>, WindowsUIXamlAutomationProvider_ISelectionProviderProtocol, WindowsUIXamlAutomationProvider_IItemContainerProviderProtocol, WindowsUIXamlAutomationProvider_IExpandCollapseProviderProtocol, WindowsUIXamlAutomationProvider_IScrollProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Provider.ISelectionProvider members

    /// Gets a value that indicates whether the control allows more than one child element to be selected concurrently.
    /// - Returns: **true** if multiple selection is allowed; otherwise, **false**.
    public var canSelectMultiple: Swift.Bool {
        get throws {
            try _iselectionProvider.get_CanSelectMultiple()
        }
    }

    /// Gets a value that indicates whether the control requires at least one child element to be selected.
    /// - Returns: **true** if selection is required; otherwise, **false**.
    public var isSelectionRequired: Swift.Bool {
        get throws {
            try _iselectionProvider.get_IsSelectionRequired()
        }
    }

    /// Retrieves a Microsoft UI Automation provider for each child element that is selected.
    /// - Returns: A generic list of Microsoft UI Automation providers.
    public func getSelection() throws -> [WindowsUIXamlAutomationProvider_IRawElementProviderSimple?] {
        try _iselectionProvider.getSelection()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IItemContainerProvider members

    /// Retrieves an element by the specified property value.
    /// - Parameter startAfter: The item in the container after which to begin the search.
    /// - Parameter automationProperty: The property that contains the value to retrieve.
    /// - Parameter value: The value to retrieve.
    /// - Returns: The first item that matches the search criterion if such an item exists; otherwise, **null**.
    public func findItemByProperty(_ startAfter: WindowsUIXamlAutomationProvider_IRawElementProviderSimple?, _ automationProperty: WindowsUIXamlAutomation_AutomationProperty?, _ value: WindowsRuntime.IInspectable?) throws -> WindowsUIXamlAutomationProvider_IRawElementProviderSimple {
        try COM.NullResult.unwrap(_iitemContainerProvider.findItemByProperty(startAfter, automationProperty, value))
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IExpandCollapseProvider members

    /// Gets the state, expanded or collapsed, of the control.
    /// - Returns: A value of the enumeration.
    public var expandCollapseState: WindowsUIXamlAutomation_ExpandCollapseState {
        get throws {
            try _iexpandCollapseProvider.get_ExpandCollapseState()
        }
    }

    /// Hides all nodes, controls, or content that are descendants of the control.
    public func collapse() throws {
        try _iexpandCollapseProvider.collapse()
    }

    /// Displays all child nodes, controls, or content of the control.
    public func expand() throws {
        try _iexpandCollapseProvider.expand()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IScrollProvider members

    /// Gets the current horizontal scroll position.
    /// - Returns: The horizontal scroll position as a percentage of the total content area within the control.
    public var horizontalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalScrollPercent()
        }
    }

    /// Gets the current horizontal view size.
    /// - Returns: The horizontal size of the viewable region as a percentage of the total content area within the control.
    public var horizontalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalViewSize()
        }
    }

    /// Gets a value that indicates whether the control can scroll horizontally.
    /// - Returns: **true** if the control can scroll horizontally; otherwise, **false**.
    public var horizontallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_HorizontallyScrollable()
        }
    }

    /// Gets the current vertical scroll position.
    /// - Returns: The vertical scroll position as a percentage of the total content area within the control.
    public var verticalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalScrollPercent()
        }
    }

    /// Gets the current vertical view size.
    /// - Returns: The vertical size of the viewable region as a percentage of the total content area within the control.
    public var verticalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalViewSize()
        }
    }

    /// Gets a value that indicates whether the control can scroll vertically.
    /// - Returns: **true** if the control can scroll vertically; otherwise, **false**.
    public var verticallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_VerticallyScrollable()
        }
    }

    /// Scrolls the visible region of the content area horizontally, vertically, or both.
    /// - Parameter horizontalAmount: The horizontal increment that is specific to the control. Pass NoScroll if the control cannot be scrolled in this direction.
    /// - Parameter verticalAmount: The vertical increment that is specific to the control. Pass NoScroll if the control cannot be scrolled in this direction.
    public func scroll(_ horizontalAmount: WindowsUIXamlAutomation_ScrollAmount, _ verticalAmount: WindowsUIXamlAutomation_ScrollAmount) throws {
        try _iscrollProvider.scroll(horizontalAmount, verticalAmount)
    }

    /// Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.
    /// - Parameter horizontalPercent: The horizontal position as a percentage of the content area's total range. Pass NoScroll if the control cannot be scrolled in this direction.
    /// - Parameter verticalPercent: The vertical position as a percentage of the content area's total range. Pass NoScroll if the control cannot be scrolled in this direction.
    public func setScrollPercent(_ horizontalPercent: Swift.Double, _ verticalPercent: Swift.Double) throws {
        try _iscrollProvider.setScrollPercent(horizontalPercent, verticalPercent)
    }

    // MARK: Implementation details

    private var _iselectionProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionProvider>? = nil

    internal var _iselectionProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionProvider> {
        get throws {
            try _iselectionProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionProvider.self)
            }
        }
    }

    private var _iitemContainerProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IItemContainerProvider>? = nil

    internal var _iitemContainerProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IItemContainerProvider> {
        get throws {
            try _iitemContainerProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IItemContainerProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IItemContainerProvider.self)
            }
        }
    }

    private var _iexpandCollapseProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider>? = nil

    internal var _iexpandCollapseProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider> {
        get throws {
            try _iexpandCollapseProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IExpandCollapseProvider.self)
            }
        }
    }

    private var _iscrollProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider>? = nil

    internal var _iscrollProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider> {
        get throws {
            try _iscrollProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.self)
            }
        }
    }

    deinit {
        _iselectionProvider_storage?.release()
        _iitemContainerProvider_storage?.release()
        _iexpandCollapseProvider_storage?.release()
        _iscrollProvider_storage?.release()
    }
}