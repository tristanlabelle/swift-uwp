// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes MapControl types to Microsoft UI Automation.
public final class WindowsUIXamlAutomationPeers_MapControlAutomationPeer: WindowsRuntime.WinRTImport<WindowsUIXamlAutomationPeers_MapControlAutomationPeerProjection>, WindowsUIXamlAutomationProvider_IScrollProviderProtocol, WindowsUIXamlAutomationProvider_ITransformProvider2Protocol, WindowsUIXamlAutomationProvider_ITransformProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Provider.IScrollProvider members

    /// Gets a Double value indicating the percentage of how far the map has been scrolled horizontally.
    /// - Returns: A Double value indicating the percentage of how far the map has been scrolled horizontally.
    public var horizontalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalScrollPercent()
        }
    }

    /// Gets the horizontal size of the map view.
    /// - Returns: The horizontal size of the map view.
    public var horizontalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_HorizontalViewSize()
        }
    }

    /// Gets a Boolean value indicating if the map is scrollable in a horizontal direction.
    /// - Returns: Boolean value indicating if the map is scrollable in a horizontal direction.
    public var horizontallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_HorizontallyScrollable()
        }
    }

    /// Gets a Double value indicating the percentage of how far the map has been scrolled vertically.
    /// - Returns: A Double value indicating the percentage of how far the map has been scrolled vertically.
    public var verticalScrollPercent: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalScrollPercent()
        }
    }

    /// Gets the vertical size of the map view.
    /// - Returns: The vertical size of the map view.
    public var verticalViewSize: Swift.Double {
        get throws {
            try _iscrollProvider.get_VerticalViewSize()
        }
    }

    /// Gets a Boolean value indicating if the map is scrollable in a vetrical direction.
    /// - Returns: Boolean value indicating if the map is scrollable in a vertical direction.
    public var verticallyScrollable: Swift.Bool {
        get throws {
            try _iscrollProvider.get_VerticallyScrollable()
        }
    }

    /// Scrolls the map by the specified horizontal and vertical amounts.
    /// - Parameter horizontalAmount: The amount to scroll the map horizontally.
    /// - Parameter verticalAmount: The amount to scroll the map vertically.
    public func scroll(_ horizontalAmount: WindowsUIXamlAutomation_ScrollAmount, _ verticalAmount: WindowsUIXamlAutomation_ScrollAmount) throws {
        try _iscrollProvider.scroll(horizontalAmount, verticalAmount)
    }

    /// Sets the percentage that the map is scrolled both horizontally and vertically.
    /// - Parameter horizontalPercent: The percentage that the map is scrolled horizontally.
    /// - Parameter verticalPercent: The percentage that the map is scrolled vertically.
    public func setScrollPercent(_ horizontalPercent: Swift.Double, _ verticalPercent: Swift.Double) throws {
        try _iscrollProvider.setScrollPercent(horizontalPercent, verticalPercent)
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.ITransformProvider2 members

    /// Get a Boolean value indicating if the associated map can be zoomed.
    /// - Returns: A Boolean value indicating if the associated map can be zoomed.
    public var canZoom: Swift.Bool {
        get throws {
            try _itransformProvider2.get_CanZoom()
        }
    }

    /// Gets the maximum zoom level for the associated map.
    /// - Returns: The maximum zoom level for the associated map.
    public var maxZoom: Swift.Double {
        get throws {
            try _itransformProvider2.get_MaxZoom()
        }
    }

    /// Gets the minimum zoom level for the associated map.
    /// - Returns: The minimum zoom level for the associated map.
    public var minZoom: Swift.Double {
        get throws {
            try _itransformProvider2.get_MinZoom()
        }
    }

    /// Gets the zoom level of the associated map, which is a value between 1 and 20 in 2D views.
    /// - Returns: The zoom level of the associated map.
    public var zoomLevel: Swift.Double {
        get throws {
            try _itransformProvider2.get_ZoomLevel()
        }
    }

    /// Zooms the associated map to the specified ZoomLevel.
    /// - Parameter zoom: The ZoomLevel to which to set the associated map.
    public func zoom(_ zoom: Swift.Double) throws {
        try _itransformProvider2.zoom(zoom)
    }

    /// Zooms the viewport of the associated map by the specified ZoomUnit.
    /// - Parameter zoomUnit: The amount to zoom the viewport of the associated map.
    public func zoomByUnit(_ zoomUnit: WindowsUIXamlAutomation_ZoomUnit) throws {
        try _itransformProvider2.zoomByUnit(zoomUnit)
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.ITransformProvider members

    /// Gets a Boolean value indicating if the associated map can be repositioned.
    /// - Returns: A Boolean value indicating if the associated map can be repositioned.
    public var canMove: Swift.Bool {
        get throws {
            try _itransformProvider.get_CanMove()
        }
    }

    /// Gets a Boolean value indicating if the associated map can be resized.
    /// - Returns: A Boolean value indicating if the associated map can be resized.
    public var canResize: Swift.Bool {
        get throws {
            try _itransformProvider.get_CanResize()
        }
    }

    /// Gets a Boolean value indicating if the associated map can be rotated.
    /// - Returns: A Boolean value indicating if the associated map can be rotated.
    public var canRotate: Swift.Bool {
        get throws {
            try _itransformProvider.get_CanRotate()
        }
    }

    /// Moves the map by the specified horizontal and vertical amounts.
    /// - Parameter x: The amount to move the map horizontally.
    /// - Parameter y: The amount to move the map vertically.
    public func move(_ x: Swift.Double, _ y: Swift.Double) throws {
        try _itransformProvider.move(x, y)
    }

    /// Resizes the associated map to the specified width and height.
    /// - Parameter width: The new width for the associated map.
    /// - Parameter height: The new height for the associated map.
    public func resize(_ width: Swift.Double, _ height: Swift.Double) throws {
        try _itransformProvider.resize(width, height)
    }

    /// Rotates the map's camera from its current position.
    /// - Parameter degrees: The degrees that the map's camera rotates in a horizontal clockwise direction.
    public func rotate(_ degrees: Swift.Double) throws {
        try _itransformProvider.rotate(degrees)
    }

    // MARK: Implementation details

    private var _iscrollProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider>? = nil

    internal var _iscrollProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider> {
        get throws {
            try _iscrollProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollProvider.self)
            }
        }
    }

    private var _itransformProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider2>? = nil

    internal var _itransformProvider2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider2> {
        get throws {
            try _itransformProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider2.self)
            }
        }
    }

    private var _itransformProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider>? = nil

    internal var _itransformProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider> {
        get throws {
            try _itransformProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_ITransformProvider.self)
            }
        }
    }

    deinit {
        _iscrollProvider_storage?.release()
        _itransformProvider2_storage?.release()
        _itransformProvider_storage?.release()
    }
}