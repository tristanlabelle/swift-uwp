// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes SemanticZoom types to Microsoft UI Automation.
open class WindowsUIXamlAutomationPeers_SemanticZoomAutomationPeer: WindowsRuntime.WinRTComposableClass, WindowsUIXamlAutomationProvider_IToggleProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Peers.ISemanticZoomAutomationPeerFactory members

    public convenience init(_ owner: WindowsUIXamlControls_SemanticZoom?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_SemanticZoomAutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isemanticZoomAutomationPeerFactory.createInstanceWithOwner(owner, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.IToggleProvider members

    /// Gets a value that indicates whether the Toggle method can be called and result in a toggled view.
    /// - Returns: **true** if calling Toggle will result in a toggled view; otherwise, **false**.
    public var toggleState: WindowsUIXamlAutomation_ToggleState {
        get throws {
            try _itoggleProvider.get_ToggleState()
        }
    }

    /// Cycles through the toggle states of a control.
    public func toggle() throws {
        try _itoggleProvider.toggle()
    }

    // MARK: Implementation details

    private var _isemanticZoomAutomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeer>? = nil

    internal var _isemanticZoomAutomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeer> {
        get throws {
            try _isemanticZoomAutomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeer.self)
            }
        }
    }

    private var _itoggleProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider>? = nil

    internal var _itoggleProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider> {
        get throws {
            try _itoggleProvider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IToggleProvider.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _isemanticZoomAutomationPeer_storage?.release()
        _itoggleProvider_storage?.release()
    }

    private static var _isemanticZoomAutomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeerFactory>? = nil

    internal static var _isemanticZoomAutomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeerFactory> {
        get throws {
            try _isemanticZoomAutomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.SemanticZoomAutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_ISemanticZoomAutomationPeerFactory.iid)
            }
        }
    }
}