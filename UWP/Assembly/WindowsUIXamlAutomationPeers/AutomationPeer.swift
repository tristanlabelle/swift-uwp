// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a base class that exposes the automation peer for an associated owner class to Microsoft UI Automation.
open class WindowsUIXamlAutomationPeers_AutomationPeer: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlAutomationPeers_AutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iautomationPeerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer members

    /// Gets or sets an AutomationPeer that is reported to the automation client as the source for all the events that come from this AutomationPeer. See Remarks.
    /// - Returns: The AutomationPeer that is the source of events.
    public var eventsSource: WindowsUIXamlAutomationPeers_AutomationPeer {
        get throws {
            try COM.NullResult.unwrap(_iautomationPeer.get_EventsSource())
        }
    }

    /// Gets or sets an AutomationPeer that is reported to the automation client as the source for all the events that come from this AutomationPeer. See Remarks.
    /// - Returns: The AutomationPeer that is the source of events.
    public func eventsSource(_ value: WindowsUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer.put_EventsSource(value)
    }

    /// Gets the control pattern that is associated with the specified PatternInterface.
    /// - Parameter patternInterface: A value from the PatternInterface enumeration.
    /// - Returns: The object that implements the pattern interface; null if the peer does not support this interface.
    public func getPattern(_ patternInterface: WindowsUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer.getPattern(patternInterface))
    }

    /// Raises an automation event.
    /// - Parameter eventId: The event identifier for the event to raise, as a value of the enumeration. See AutomationEvents.
    public func raiseAutomationEvent(_ eventId: WindowsUIXamlAutomationPeers_AutomationEvents) throws {
        try _iautomationPeer.raiseAutomationEvent(eventId)
    }

    /// Raises an event to notify the automation client of a changed property value.
    /// - Parameter automationProperty: The property that changed.
    /// - Parameter oldValue: The previous value of the property.
    /// - Parameter newValue: The new value of the property.
    public func raisePropertyChangedEvent(_ automationProperty: WindowsUIXamlAutomation_AutomationProperty?, _ oldValue: WindowsRuntime.IInspectable?, _ newValue: WindowsRuntime.IInspectable?) throws {
        try _iautomationPeer.raisePropertyChangedEvent(automationProperty, oldValue, newValue)
    }

    /// Gets the accelerator key combinations for the object that is associated with the UI Automation peer.
    /// - Returns: The accelerator key.
    public func getAcceleratorKey() throws -> Swift.String {
        try _iautomationPeer.getAcceleratorKey()
    }

    /// Gets the access key for the element that is associated with the automation peer.
    /// - Returns: The access key.
    public func getAccessKey() throws -> Swift.String {
        try _iautomationPeer.getAccessKey()
    }

    /// Gets the control type for the element that is associated with the UI Automation peer.
    /// - Returns: The control type.
    public func getAutomationControlType() throws -> WindowsUIXamlAutomationPeers_AutomationControlType {
        try _iautomationPeer.getAutomationControlType()
    }

    /// Gets the **AutomationId** of the element that is associated with the automation peer.
    /// - Returns: The automation identifier.
    public func getAutomationId() throws -> Swift.String {
        try _iautomationPeer.getAutomationId()
    }

    /// Gets the Rect object that represents the screen coordinates of the element that is associated with the automation peer.
    /// - Returns: The bounding rectangle.
    public func getBoundingRectangle() throws -> WindowsFoundation_Rect {
        try _iautomationPeer.getBoundingRectangle()
    }

    /// Gets the collection of child elements that are represented in the UI Automation tree as immediate child elements of the automation peer.
    /// - Returns: The collection of AutomationPeer objects for child elements.
    public func getChildren() throws -> WindowsFoundationCollections_IVector<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeer.getChildren())
    }

    /// Gets a name that is used with AutomationControlType, to differentiate the control that is represented by this AutomationPeer.
    /// - Returns: The class name.
    public func getClassName() throws -> Swift.String {
        try _iautomationPeer.getClassName()
    }

    /// Gets a point on the element that is associated with the automation peer that responds to a mouse click.
    /// - Returns: A point in the clickable area of the element.
    public func getClickablePoint() throws -> WindowsFoundation_Point {
        try _iautomationPeer.getClickablePoint()
    }

    /// Gets text that describes the functionality of the control that is associated with the automation peer.
    /// - Returns: The help text.
    public func getHelpText() throws -> Swift.String {
        try _iautomationPeer.getHelpText()
    }

    /// Gets text that conveys the visual status of the element that is associated with this automation peer.
    /// - Returns: The item status.
    public func getItemStatus() throws -> Swift.String {
        try _iautomationPeer.getItemStatus()
    }

    /// Gets a string that describes what kind of item an element represents.
    /// - Returns: The kind of item.
    public func getItemType() throws -> Swift.String {
        try _iautomationPeer.getItemType()
    }

    /// Gets the AutomationPeer for the UIElement that is targeted to the element.
    /// - Returns: The AutomationPeer for the element that is targeted by the UIElement.
    public func getLabeledBy() throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getLabeledBy())
    }

    /// Gets a localized string that represents the AutomationControlType value for the control that is associated with this automation peer.
    /// - Returns: The type of the control.
    public func getLocalizedControlType() throws -> Swift.String {
        try _iautomationPeer.getLocalizedControlType()
    }

    /// Gets text that describes the element that is associated with this automation peer. The Microsoft UI Automation  **Name** value is the primary identifier used by most assistive technology when they represent your app's UI by interacting with the Microsoft UI Automation framework.
    /// - Returns: The name of the element that is the peer's owner, as used by assistive technology and other Microsoft UI Automation clients.
    public func getName() throws -> Swift.String {
        try _iautomationPeer.getName()
    }

    /// Gets a value that indicates the explicit control orientation, if any.
    /// - Returns: The orientation of the control as a value of the enumeration.
    public func getOrientation() throws -> WindowsUIXamlAutomationPeers_AutomationOrientation {
        try _iautomationPeer.getOrientation()
    }

    /// Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.
    /// - Returns: **true** if the element has keyboard focus; otherwise, **false**.
    public func hasKeyboardFocus() throws -> Swift.Bool {
        try _iautomationPeer.hasKeyboardFocus()
    }

    /// Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.
    /// - Returns: **true** if the element is a content element; otherwise, **false**.
    public func isContentElement() throws -> Swift.Bool {
        try _iautomationPeer.isContentElement()
    }

    /// Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.
    /// - Returns: **true** if the element is a control; otherwise, **false**.
    public func isControlElement() throws -> Swift.Bool {
        try _iautomationPeer.isControlElement()
    }

    /// Gets a value that indicates whether the element associated with this automation peer supports interaction.
    /// - Returns: **true** if the element supports interaction; otherwise, **false**.
    public func isEnabled() throws -> Swift.Bool {
        try _iautomationPeer.isEnabled()
    }

    /// Gets a value that indicates whether the element can accept keyboard focus.
    /// - Returns: **true** if the element can accept keyboard focus; otherwise, **false**.
    public func isKeyboardFocusable() throws -> Swift.Bool {
        try _iautomationPeer.isKeyboardFocusable()
    }

    /// Gets a value that indicates whether an element is off the screen.
    /// - Returns: **true** if the element is not on the screen; otherwise, **false**.
    public func isOffscreen() throws -> Swift.Bool {
        try _iautomationPeer.isOffscreen()
    }

    /// Gets a value that indicates whether the element contains sensitive content.
    /// - Returns: **true** if the element contains sensitive content such as a password; otherwise, **false**.
    public func isPassword() throws -> Swift.Bool {
        try _iautomationPeer.isPassword()
    }

    /// Gets a value that indicates whether the element that is associated with this peer must be completed on a form.
    /// - Returns: **true** if the element must be completed; otherwise, **false**.
    public func isRequiredForForm() throws -> Swift.Bool {
        try _iautomationPeer.isRequiredForForm()
    }

    /// Sets the keyboard focus on the element that is associated with this automation peer.
    public func setFocus() throws {
        try _iautomationPeer.setFocus()
    }

    /// Gets the AutomationPeer that is the parent of this AutomationPeer.
    /// - Returns: The parent automation peer.
    public func getParent() throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getParent())
    }

    /// Triggers recalculation of the main properties of the AutomationPeer and raises the PropertyChanged notification to the automation client if the properties have changed.
    public func invalidatePeer() throws {
        try _iautomationPeer.invalidatePeer()
    }

    /// Gets an AutomationPeer from the specified point.
    /// - Parameter point: The relative position of the target UI element in the UI.
    /// - Returns: The AutomationPeer for the UI element at the specified point.
    public func getPeerFromPoint(_ point: WindowsFoundation_Point) throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getPeerFromPoint(point))
    }

    /// Gets the live setting notification behavior information for the object that is associated with the UI Automation peer.
    /// - Returns: A value of the enumeration.
    public func getLiveSetting() throws -> WindowsUIXamlAutomationPeers_AutomationLiveSetting {
        try _iautomationPeer.getLiveSetting()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer3 members

    /// Gets the element in the specified direction within the UI automation tree.
    /// - Parameter direction: The specified direction.
    /// - Returns: The element in the specified direction within the UI automation tree.
    public func navigate(_ direction: WindowsUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer3.navigate(direction))
    }

    /// Gets an element from the specified point.
    /// - Parameter pointInWindowCoordinates: The specified point.
    /// - Returns: The element at the specified point.
    public func getElementFromPoint(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer3.getElementFromPoint(pointInWindowCoordinates))
    }

    /// Gets the element that currently has the focus.
    /// - Returns: The element that currently has the focus.
    public func getFocusedElement() throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer3.getFocusedElement())
    }

    /// Shows the available context menu for the owner element.
    public func showContextMenu() throws {
        try _iautomationPeer3.showContextMenu()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetControlledPeers or an equivalent Microsoft UI Automation client API such as getting a property value as identified by **UIA_ControllerForPropertyId**.
    /// - Returns: A list of the controlled peers for the current automation peer.
    public func getControlledPeers() throws -> WindowsFoundationCollections_IVectorView<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeer3.getControlledPeers())
    }

    /// Gets a reference to the list of UI automation annotations for the current automation peer.
    /// - Returns: The list of UI automation annotations.
    public func getAnnotations() throws -> WindowsFoundationCollections_IVector<WindowsUIXamlAutomationPeers_AutomationPeerAnnotation?> {
        try COM.NullResult.unwrap(_iautomationPeer3.getAnnotations())
    }

    /// Sets the AutomationPeer that is the parent of this AutomationPeer.
    /// - Parameter peer: The parent automation peer.
    public func setParent(_ peer: WindowsUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer3.setParent(peer)
    }

    public func raiseTextEditTextChangedEvent(_ automationTextEditChangeType: WindowsUIXamlAutomation_AutomationTextEditChangeType, _ changedData: WindowsFoundationCollections_IVectorView<Swift.String>?) throws {
        try _iautomationPeer3.raiseTextEditTextChangedEvent(automationTextEditChangeType, changedData)
    }

    /// Returns the 1-based integer for the ordinal position in the set for the element that is associated with the automation peer.
    /// - Returns: The 1-based integer for the ordinal position in the set.
    public func getPositionInSet() throws -> Swift.Int32 {
        try _iautomationPeer3.getPositionInSet()
    }

    /// Returns the 1-based integer for the size of the set where the element that is associated with the automation peer is located.
    /// - Returns: The 1-based integer for the size of the set.
    public func getSizeOfSet() throws -> Swift.Int32 {
        try _iautomationPeer3.getSizeOfSet()
    }

    /// Returns the 1-based integer for the level (hierarchy) of the element that is associated with the automation peer.
    /// - Returns: The 1-based integer for the level of the element.
    public func getLevel() throws -> Swift.Int32 {
        try _iautomationPeer3.getLevel()
    }

    /// Raises an event to notify the Microsoft UI Automation core that the tree structure has changed.
    /// - Parameter structureChangeType: The type of change that has occurred.
    /// - Parameter child: The element to which the change has been made.
    public func raiseStructureChangedEvent(_ structureChangeType: WindowsUIXamlAutomationPeers_AutomationStructureChangeType, _ child: WindowsUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer3.raiseStructureChangedEvent(structureChangeType, child)
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer4 members

    /// Gets the landmark type for this automation peer.
    /// - Returns: The landmark type for this automation peer.
    public func getLandmarkType() throws -> WindowsUIXamlAutomationPeers_AutomationLandmarkType {
        try _iautomationPeer4.getLandmarkType()
    }

    /// Gets a localized string that represents the AutomationLandmarkType value for the element that is associated with this automation peer.
    /// - Returns: The landmark type of the element.
    public func getLocalizedLandmarkType() throws -> Swift.String {
        try _iautomationPeer4.getLocalizedLandmarkType()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer5 members

    /// Gets a Boolean value that indicates whether the automation element represents peripheral UI.
    /// - Returns: A Boolean value that indicates whether the automation element represents peripheral UI.
    public func isPeripheral() throws -> Swift.Bool {
        try _iautomationPeer5.isPeripheral()
    }

    /// Gets a Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element.
    /// - Returns: A Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element. The default return value is **true**.
    public func isDataValidForForm() throws -> Swift.Bool {
        try _iautomationPeer5.isDataValidForForm()
    }

    /// Gets a localized string that describes the actual visual appearance or contents of something such as an image or image control.
    /// - Returns: A localized string that describes the actual visual appearance or contents of something such as an image or image control.
    public func getFullDescription() throws -> Swift.String {
        try _iautomationPeer5.getFullDescription()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer6 members

    /// Calls GetCultureCore to get the culture value for the element that is associated with the automation peer.
    /// - Returns: The value of the culture property for the element that is associated with the automation peer.
    public func getCulture() throws -> Swift.Int32 {
        try _iautomationPeer6.getCulture()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer7 members

    /// Initiates a notification event.
    /// - Parameter notificationKind: Specifies the type of the notification.
    /// - Parameter notificationProcessing: Specifies the order in which to process the notification.
    /// - Parameter displayString: A display string describing the event.
    /// - Parameter activityId: A unique non-localized string to identify an action or group of actions. Use this to pass additional information to the event handler.
    public func raiseNotificationEvent(_ notificationKind: WindowsUIXamlAutomationPeers_AutomationNotificationKind, _ notificationProcessing: WindowsUIXamlAutomationPeers_AutomationNotificationProcessing, _ displayString: Swift.String, _ activityId: Swift.String) throws {
        try _iautomationPeer7.raiseNotificationEvent(notificationKind, notificationProcessing, displayString, activityId)
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer8 members

    /// Gets the heading level of the UI Automation element that is associated with this automation peer.
    /// - Returns: The text heading level.
    public func getHeadingLevel() throws -> WindowsUIXamlAutomationPeers_AutomationHeadingLevel {
        try _iautomationPeer8.getHeadingLevel()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeer9 members

    /// Gets a value that indicates whether the element associated with this automation peer is a dialog window.
    /// - Returns: **true** if the element is a dialog; otherwise, **false**.
    public func isDialog() throws -> Swift.Bool {
        try _iautomationPeer9.isDialog()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerProtected members

    /// Gets an AutomationPeer for the specified IRawElementProviderSimple proxy.
    /// - Parameter provider: The class that implements IRawElementProviderSimple.
    /// - Returns: The AutomationPeer.
    public func peerFromProvider(_ provider: WindowsUIXamlAutomationProvider_IRawElementProviderSimple?) throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerProtected.peerFromProvider(provider))
    }

    /// Gets the IRawElementProviderSimple proxy for the specified AutomationPeer.
    /// - Parameter peer: The automation peer.
    /// - Returns: The proxy.
    public func providerFromPeer(_ peer: WindowsUIXamlAutomationPeers_AutomationPeer?) throws -> WindowsUIXamlAutomationProvider_IRawElementProviderSimple {
        try COM.NullResult.unwrap(_iautomationPeerProtected.providerFromPeer(peer))
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides members

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetPattern or an equivalent Microsoft UI Automation client API.
    /// - Parameter patternInterface: A value from the PatternInterface enumeration.
    /// - Returns: The object that implements the pattern interface; **null** if the peer does not support this interface.
    open func getPatternCore(_ patternInterface: WindowsUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getPatternCore(patternInterface))
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAcceleratorKey or an equivalent Microsoft UI Automation client API.
    /// - Returns: The accelerator key.
    open func getAcceleratorKeyCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAcceleratorKeyCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAccessKey or an equivalent Microsoft UI Automation client API.
    /// - Returns: The access key.
    open func getAccessKeyCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAccessKeyCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAutomationControlType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The control type.
    open func getAutomationControlTypeCore() throws -> WindowsUIXamlAutomationPeers_AutomationControlType {
        try _iautomationPeerOverrides.getAutomationControlTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAutomationId or an equivalent Microsoft UI Automation client API.
    /// - Returns: The automation identifier.
    open func getAutomationIdCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAutomationIdCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetBoundingRectangle or an equivalent Microsoft UI Automation client API.
    /// - Returns: The bounding rectangle.
    open func getBoundingRectangleCore() throws -> WindowsFoundation_Rect {
        try _iautomationPeerOverrides.getBoundingRectangleCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetChildren or an equivalent Microsoft UI Automation client API.
    /// - Returns: The collection of AutomationPeer objects for child elements.
    open func getChildrenCore() throws -> WindowsFoundationCollections_IVector<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getChildrenCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API.
    /// - Returns: The class name.
    open func getClassNameCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getClassNameCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetClickablePoint or an equivalent Microsoft UI Automation client API.
    /// - Returns: A point within the clickable area of the element.
    open func getClickablePointCore() throws -> WindowsFoundation_Point {
        try _iautomationPeerOverrides.getClickablePointCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetHelpText or an equivalent Microsoft UI Automation client API.
    /// - Returns: The help text.
    open func getHelpTextCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getHelpTextCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetItemStatus or an equivalent Microsoft UI Automation client API.
    /// - Returns: The item status.
    open func getItemStatusCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getItemStatusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetItemType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The kind of item.
    open func getItemTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getItemTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLabeledBy or an equivalent Microsoft UI Automation client API.
    /// - Returns: The AutomationPeer for the element that is targeted by the UIElement.
    open func getLabeledByCore() throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getLabeledByCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLocalizedControlType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The type of the control, as a string that is localized to be suitable for direct presentation to users by assistive technology.
    open func getLocalizedControlTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getLocalizedControlTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API.
    /// - Returns: The name as used by assistive technology and other Microsoft UI Automation clients.
    open func getNameCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getNameCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetOrientation or an equivalent Microsoft UI Automation client API.
    /// - Returns: The orientation of the control.
    open func getOrientationCore() throws -> WindowsUIXamlAutomationPeers_AutomationOrientation {
        try _iautomationPeerOverrides.getOrientationCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls HasKeyboardFocus or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element has keyboard focus; otherwise, **false**.
    open func hasKeyboardFocusCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.hasKeyboardFocusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsContentElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element is a content element; otherwise, **false**.
    open func isContentElementCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isContentElementCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsControlElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element is a control; otherwise, **false**.
    open func isControlElementCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isControlElementCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsEnabled or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element can be interacted with; otherwise, **false**.
    open func isEnabledCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isEnabledCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsKeyboardFocusable or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element can accept keyboard focus; otherwise, **false**.
    open func isKeyboardFocusableCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isKeyboardFocusableCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsOffscreen or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element is not on the screen; otherwise, **false**.
    open func isOffscreenCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isOffscreenCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsPassword or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element contains sensitive content; otherwise, **false**.
    open func isPasswordCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isPasswordCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsRequiredForForm or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element must be completed; otherwise, **false**.
    open func isRequiredForFormCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isRequiredForFormCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls SetFocus or an equivalent Microsoft UI Automation client API.
    open func setFocusCore() throws {
        try _iautomationPeerOverrides.setFocusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetPeerFromPoint or an equivalent Microsoft UI Automation client API.
    /// - Parameter point: The relative position of the target UI element in the UI.
    /// - Returns: The AutomationPeer for the UI element at the specified point.
    open func getPeerFromPointCore(_ point: WindowsFoundation_Point) throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getPeerFromPointCore(point))
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLiveSetting or an equivalent Microsoft UI Automation client API.
    /// - Returns: A value of the enumeration that reports the live setting notification behavior for a peer implementation.
    open func getLiveSettingCore() throws -> WindowsUIXamlAutomationPeers_AutomationLiveSetting {
        try _iautomationPeerOverrides.getLiveSettingCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides2 members

    /// Provides the peer's behavior when a Microsoft UI Automation client calls ShowContextMenu or an equivalent Microsoft UI Automation client API.
    open func showContextMenuCore() throws {
        try _iautomationPeerOverrides2.showContextMenuCore()
    }

    /// Gets a list of the controlled peers for the current automation peer.
    /// - Returns: A list of the controlled peers for the current automation peer.
    open func getControlledPeersCore() throws -> WindowsFoundationCollections_IVectorView<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides2.getControlledPeersCore())
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides3 members

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls Navigate or an equivalent Microsoft UI Automation client API.
    /// - Parameter direction: The specified direction.
    /// - Returns: The element in the specified direction within the UI automation tree.
    open func navigateCore(_ direction: WindowsUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides3.navigateCore(direction))
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetElementFromPoint or an equivalent Microsoft UI Automation client API.
    /// - Parameter pointInWindowCoordinates: The specified point.
    /// - Returns: The behavior of the peer.
    open func getElementFromPointCore(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides3.getElementFromPointCore(pointInWindowCoordinates))
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetFocusedElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getFocusedElementCore() throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides3.getFocusedElementCore())
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetAnnotations or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getAnnotationsCore() throws -> WindowsFoundationCollections_IVector<WindowsUIXamlAutomationPeers_AutomationPeerAnnotation?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides3.getAnnotationsCore())
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls GetPositionInSet or an equivalent Microsoft UI Automation client API.
    /// - Returns: The peer’s behavior.
    open func getPositionInSetCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides3.getPositionInSetCore()
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls GetSizeOfSet or an equivalent Microsoft UI Automation client API.
    /// - Returns: The peer’s behavior.
    open func getSizeOfSetCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides3.getSizeOfSetCore()
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetLevel or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getLevelCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides3.getLevelCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides4 members

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLandmarkType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The landmark type.
    open func getLandmarkTypeCore() throws -> WindowsUIXamlAutomationPeers_AutomationLandmarkType {
        try _iautomationPeerOverrides4.getLandmarkTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLocalizedLandmarkType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The landmark type of the peer, as a string that is localized to be suitable for direct presentation to users by assistive technology.
    open func getLocalizedLandmarkTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides4.getLocalizedLandmarkTypeCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides5 members

    /// Provides the peer’s behavior when a Microsoft UI Automation client accesses IsPeripheral or an equivalent Microsoft UI Automation client API.
    /// - Returns: A Boolean value that indicates whether the automation element represents peripheral UI.
    open func isPeripheralCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides5.isPeripheralCore()
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client accesses IsDataValidForForm or an equivalent Microsoft UI Automation client API.
    /// - Returns: A Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element.
    open func isDataValidForFormCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides5.isDataValidForFormCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetFullDescription or an equivalent Microsoft UI Automation client API.
    /// - Returns: A localized string that describes the actual visual appearance or contents of something such as an image or image control.
    open func getFullDescriptionCore() throws -> Swift.String {
        try _iautomationPeerOverrides5.getFullDescriptionCore()
    }

    /// Gets a collection of elements that provide more information about the automation element.
    /// - Returns: A collection of elements that provide more information about the automation element.
    open func getDescribedByCore() throws -> WindowsFoundationCollections_IIterable<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides5.getDescribedByCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetFlowsTo or an equivalent Microsoft UI Automation client API.
    /// - Returns: A list of automation elements that suggests the reading order after the current automation element.
    open func getFlowsToCore() throws -> WindowsFoundationCollections_IIterable<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides5.getFlowsToCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetFlowsFrom or an equivalent Microsoft UI Automation client API.
    /// - Returns: A list of automation elements that suggests the reading order before the current automation element.
    open func getFlowsFromCore() throws -> WindowsFoundationCollections_IIterable<WindowsUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides5.getFlowsFromCore())
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides6 members

    /// Gets the culture value for the element that is associated with the automation peer.
    /// - Returns: The value of the culture property for the element that is associated with the automation peer.
    open func getCultureCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides6.getCultureCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides8 members

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetHeadingLevel or an equivalent Microsoft UI Automation client API.
    /// - Returns: The heading level.
    open func getHeadingLevelCore() throws -> WindowsUIXamlAutomationPeers_AutomationHeadingLevel {
        try _iautomationPeerOverrides8.getHeadingLevelCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerOverrides9 members

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsDialog or an equivalent Microsoft UI Automation client API.
    /// - Returns: **true** if the element is a dialog; otherwise, **false**.
    open func isDialogCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides9.isDialogCore()
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerStatics members

    /// Gets a value that indicates whether Microsoft UI Automation reports that a client is listening for the specified event.
    /// - Parameter eventId: One of the enumeration values.
    /// - Returns: **true** if Microsoft UI Automation reports a client is listening for the specified event; otherwise, **false**.
    public static func listenerExists(_ eventId: WindowsUIXamlAutomationPeers_AutomationEvents) throws -> Swift.Bool {
        try _iautomationPeerStatics.listenerExists(eventId)
    }

    // MARK: Windows.UI.Xaml.Automation.Peers.IAutomationPeerStatics3 members

    /// Generates a runtime identifier for the element that is associated with the automation peer.
    /// - Returns: The runtime identifier for the element .
    public static func generateRawElementProviderRuntimeId() throws -> WindowsUIXamlAutomationPeers_RawElementProviderRuntimeId {
        try _iautomationPeerStatics3.generateRawElementProviderRuntimeId()
    }

    // MARK: Implementation details

    private var _iautomationPeer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer>? = nil

    internal var _iautomationPeer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer> {
        get throws {
            try _iautomationPeer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer.self)
            }
        }
    }

    private var _iautomationPeer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer2>? = nil

    internal var _iautomationPeer2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer2> {
        get throws {
            try _iautomationPeer2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer2.self)
            }
        }
    }

    private var _iautomationPeer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer3>? = nil

    internal var _iautomationPeer3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer3> {
        get throws {
            try _iautomationPeer3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer3.self)
            }
        }
    }

    private var _iautomationPeer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer4>? = nil

    internal var _iautomationPeer4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer4> {
        get throws {
            try _iautomationPeer4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer4.self)
            }
        }
    }

    private var _iautomationPeer5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer5>? = nil

    internal var _iautomationPeer5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer5> {
        get throws {
            try _iautomationPeer5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer5.self)
            }
        }
    }

    private var _iautomationPeer6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer6>? = nil

    internal var _iautomationPeer6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer6> {
        get throws {
            try _iautomationPeer6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer6.self)
            }
        }
    }

    private var _iautomationPeer7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer7>? = nil

    internal var _iautomationPeer7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer7> {
        get throws {
            try _iautomationPeer7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer7.self)
            }
        }
    }

    private var _iautomationPeer8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer8>? = nil

    internal var _iautomationPeer8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer8> {
        get throws {
            try _iautomationPeer8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer8.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer8.self)
            }
        }
    }

    private var _iautomationPeer9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer9>? = nil

    internal var _iautomationPeer9: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer9> {
        get throws {
            try _iautomationPeer9_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer9.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer9.self)
            }
        }
    }

    private var _iautomationPeerProtected_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerProtected>? = nil

    internal var _iautomationPeerProtected: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerProtected> {
        get throws {
            try _iautomationPeerProtected_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerProtected.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerProtected.self)
            }
        }
    }

    private var _iautomationPeerOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides>? = nil

    internal var _iautomationPeerOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides> {
        get throws {
            try _iautomationPeerOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides.self)
            }
        }
    }

    private var _iautomationPeerOverrides2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides2>? = nil

    internal var _iautomationPeerOverrides2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides2> {
        get throws {
            try _iautomationPeerOverrides2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides2.self)
            }
        }
    }

    private var _iautomationPeerOverrides3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides3>? = nil

    internal var _iautomationPeerOverrides3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides3> {
        get throws {
            try _iautomationPeerOverrides3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides3.self)
            }
        }
    }

    private var _iautomationPeerOverrides4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides4>? = nil

    internal var _iautomationPeerOverrides4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides4> {
        get throws {
            try _iautomationPeerOverrides4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides4.self)
            }
        }
    }

    private var _iautomationPeerOverrides5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides5>? = nil

    internal var _iautomationPeerOverrides5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides5> {
        get throws {
            try _iautomationPeerOverrides5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides5.self)
            }
        }
    }

    private var _iautomationPeerOverrides6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides6>? = nil

    internal var _iautomationPeerOverrides6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides6> {
        get throws {
            try _iautomationPeerOverrides6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides6.self)
            }
        }
    }

    private var _iautomationPeerOverrides8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides8>? = nil

    internal var _iautomationPeerOverrides8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides8> {
        get throws {
            try _iautomationPeerOverrides8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides8.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides8.self)
            }
        }
    }

    private var _iautomationPeerOverrides9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides9>? = nil

    internal var _iautomationPeerOverrides9: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides9> {
        get throws {
            try _iautomationPeerOverrides9_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides9.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides9.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iautomationPeer_storage?.release()
        _iautomationPeer2_storage?.release()
        _iautomationPeer3_storage?.release()
        _iautomationPeer4_storage?.release()
        _iautomationPeer5_storage?.release()
        _iautomationPeer6_storage?.release()
        _iautomationPeer7_storage?.release()
        _iautomationPeer8_storage?.release()
        _iautomationPeer9_storage?.release()
        _iautomationPeerProtected_storage?.release()
        _iautomationPeerOverrides_storage?.release()
        _iautomationPeerOverrides2_storage?.release()
        _iautomationPeerOverrides3_storage?.release()
        _iautomationPeerOverrides4_storage?.release()
        _iautomationPeerOverrides5_storage?.release()
        _iautomationPeerOverrides6_storage?.release()
        _iautomationPeerOverrides8_storage?.release()
        _iautomationPeerOverrides9_storage?.release()
    }

    private static var _iautomationPeerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerFactory>? = nil

    internal static var _iautomationPeerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerFactory> {
        get throws {
            try _iautomationPeerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.AutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerFactory.iid)
            }
        }
    }

    private static var _iautomationPeerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics>? = nil

    internal static var _iautomationPeerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics> {
        get throws {
            try _iautomationPeerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.AutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics.iid)
            }
        }
    }

    private static var _iautomationPeerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics3>? = nil

    internal static var _iautomationPeerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics3> {
        get throws {
            try _iautomationPeerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Automation.Peers.AutomationPeer", id: CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerStatics3.iid)
            }
        }
    }

    // MARK: Override support

    private var _iautomationPeerOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides2_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides3_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides4_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides5_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides6_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides8_outer: COM.COMExportedInterface = .uninitialized
    private var _iautomationPeerOverrides9_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides.iid {
            if !_iautomationPeerOverrides_outer.isInitialized {
                _iautomationPeerOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides)
            }
            return _iautomationPeerOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides2.iid {
            if !_iautomationPeerOverrides2_outer.isInitialized {
                _iautomationPeerOverrides2_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides2)
            }
            return _iautomationPeerOverrides2_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides3.iid {
            if !_iautomationPeerOverrides3_outer.isInitialized {
                _iautomationPeerOverrides3_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides3)
            }
            return _iautomationPeerOverrides3_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides4.iid {
            if !_iautomationPeerOverrides4_outer.isInitialized {
                _iautomationPeerOverrides4_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides4)
            }
            return _iautomationPeerOverrides4_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides5.iid {
            if !_iautomationPeerOverrides5_outer.isInitialized {
                _iautomationPeerOverrides5_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides5)
            }
            return _iautomationPeerOverrides5_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides6.iid {
            if !_iautomationPeerOverrides6_outer.isInitialized {
                _iautomationPeerOverrides6_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides6)
            }
            return _iautomationPeerOverrides6_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides8.iid {
            if !_iautomationPeerOverrides8_outer.isInitialized {
                _iautomationPeerOverrides8_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides8)
            }
            return _iautomationPeerOverrides8_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlAutomationPeers_IAutomationPeerOverrides9.iid {
            if !_iautomationPeerOverrides9_outer.isInitialized {
                _iautomationPeerOverrides9_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlAutomationPeers_AutomationPeerProjection.VirtualTables.iautomationPeerOverrides9)
            }
            return _iautomationPeerOverrides9_outer.unknownPointer.addingRef()
        }
        return nil
    }
}