// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes LoopingSelectorItem types to Microsoft UI Automation.
public final class WindowsUIXamlAutomationPeers_LoopingSelectorItemAutomationPeer: WindowsRuntime.WinRTImport<WindowsUIXamlAutomationPeers_LoopingSelectorItemAutomationPeerProjection>, WindowsUIXamlAutomationProvider_IScrollItemProviderProtocol, WindowsUIXamlAutomationProvider_ISelectionItemProviderProtocol {
    // MARK: Windows.UI.Xaml.Automation.Provider.IScrollItemProvider members

    /// Scrolls the content area of the parent container in order to display the item within the visible region (viewport) of the container.
    public func scrollIntoView() throws {
        try _iscrollItemProvider.scrollIntoView()
    }

    // MARK: Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider members

    /// Gets a value that indicates whether an item is selected.
    /// - Returns: **true** if the element is selected; otherwise, **false**.
    public var isSelected: Swift.Bool {
        get throws {
            try _iselectionItemProvider.get_IsSelected()
        }
    }

    /// Gets the UI automation provider that implements ISelectionProvider and acts as the container for the calling object.
    /// - Returns: The provider that supports ISelectionProvider.
    public var selectionContainer: WindowsUIXamlAutomationProvider_IRawElementProviderSimple {
        get throws {
            try COM.NullResult.unwrap(_iselectionItemProvider.get_SelectionContainer())
        }
    }

    /// Adds the current element to the collection of selected items.
    public func addToSelection() throws {
        try _iselectionItemProvider.addToSelection()
    }

    /// Removes the current element from the collection of selected items.
    public func removeFromSelection() throws {
        try _iselectionItemProvider.removeFromSelection()
    }

    /// Clears any existing selection and then selects the current element.
    public func select() throws {
        try _iselectionItemProvider.select()
    }

    // MARK: Implementation details

    private var _iscrollItemProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollItemProvider>? = nil

    internal var _iscrollItemProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollItemProvider> {
        get throws {
            try _iscrollItemProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollItemProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_IScrollItemProvider.self)
            }
        }
    }

    private var _iselectionItemProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionItemProvider>? = nil

    internal var _iselectionItemProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionItemProvider> {
        get throws {
            try _iselectionItemProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionItemProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlAutomationProvider_ISelectionItemProvider.self)
            }
        }
    }

    deinit {
        _iscrollItemProvider_storage?.release()
        _iselectionItemProvider_storage?.release()
    }
}