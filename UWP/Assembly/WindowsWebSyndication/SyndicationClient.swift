// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Implements the ISyndicationClient interface which retrieves feeds from a URI asynchronously.
public final class WindowsWebSyndication_SyndicationClient: WindowsRuntime.WinRTImport<WindowsWebSyndication_SyndicationClientProjection>, WindowsWebSyndication_ISyndicationClientProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsWebSyndication_SyndicationClientProjection.self))
    }

    // MARK: Windows.Web.Syndication.ISyndicationClientFactory members

    public convenience init(_ serverCredential: WindowsSecurityCredentials_PasswordCredential?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._isyndicationClientFactory.createSyndicationClient(serverCredential)))
    }

    // MARK: Windows.Web.Syndication.ISyndicationClient members

    /// Gets or sets a **Boolean** value that specifies whether to bypass the cache when retrieving the feed.
    /// - Returns: **TRUE** if the cache should be bypassed; otherwise **FALSE**.
    public var bypassCacheOnRetrieve: Swift.Bool {
        get throws {
            try _interop.get_BypassCacheOnRetrieve()
        }
    }

    /// Gets or sets a **Boolean** value that specifies whether to bypass the cache when retrieving the feed.
    /// - Returns: **TRUE** if the cache should be bypassed; otherwise **FALSE**.
    public func bypassCacheOnRetrieve(_ value: Swift.Bool) throws {
        try _interop.put_BypassCacheOnRetrieve(value)
    }

    /// Gets or sets the maximum number of bytes to buffer when receiving a response from a server.
    /// - Returns: Maximum size and default is **UInt32.MaxValue**.
    public var maxResponseBufferSize: Swift.UInt32 {
        get throws {
            try _interop.get_MaxResponseBufferSize()
        }
    }

    /// Gets or sets the maximum number of bytes to buffer when receiving a response from a server.
    /// - Returns: Maximum size and default is **UInt32.MaxValue**.
    public func maxResponseBufferSize(_ value: Swift.UInt32) throws {
        try _interop.put_MaxResponseBufferSize(value)
    }

    /// Gets or sets the credentials to use when making requests via a proxy.
    /// - Returns: The PasswordCredential to use.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProxyCredential())
        }
    }

    /// Gets or sets the credentials to use when making requests via a proxy.
    /// - Returns: The PasswordCredential to use.
    public func proxyCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.put_ProxyCredential(value)
    }

    /// Gets or sets the credentials to use when making requests to the server.
    /// - Returns: Initally, this value is a username/password tuple. For domain credentials, the username is in domain\user form.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServerCredential())
        }
    }

    /// Gets or sets the credentials to use when making requests to the server.
    /// - Returns: Initally, this value is a username/password tuple. For domain credentials, the username is in domain\user form.
    public func serverCredential(_ value: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _interop.put_ServerCredential(value)
    }

    /// Gets or sets the maximum amount of time, in milliseconds, to wait for any of the asynchronous operations to complete. If the operation is not complete within this amount of time, it will fail with a status code indicating that it timed out.
    /// - Returns: Default value is 30000 (30 seconds). A value of **UInt32.MaxValue** indicates that the syndication client will wait indefinitely for a response.
    public var timeout: Swift.UInt32 {
        get throws {
            try _interop.get_Timeout()
        }
    }

    /// Gets or sets the maximum amount of time, in milliseconds, to wait for any of the asynchronous operations to complete. If the operation is not complete within this amount of time, it will fail with a status code indicating that it timed out.
    /// - Returns: Default value is 30000 (30 seconds). A value of **UInt32.MaxValue** indicates that the syndication client will wait indefinitely for a response.
    public func timeout(_ value: Swift.UInt32) throws {
        try _interop.put_Timeout(value)
    }

    /// Sets an HTTP header for the request. This method can be called multiple times to set multiple headers. When the same header is set multiple times, the values will be concatenated and separated by ",".
    /// - Parameter name: The name of the header.
    /// - Parameter value: The value of the header.
    public func setRequestHeader(_ name: Swift.String, _ value: Swift.String) throws {
        try _interop.setRequestHeader(name, value)
    }

    /// Starts an asynchronous operation to download the syndication feed from the given URI. This method instantiates a SyndicationFeed object from the feed string, which can be in one of the formats specified in SyndicationFormat.
    /// - Parameter uri: The URI from which the feed is downloaded.
    /// - Returns: Contains the results of the operation.
    public func retrieveFeedAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsWebSyndication_SyndicationFeed?, WindowsWebSyndication_RetrievalProgress> {
        try COM.NullResult.unwrap(_interop.retrieveFeedAsync(uri))
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Syndication.SyndicationClient", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _isyndicationClientFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebSyndication_ISyndicationClientFactory>? = nil

    internal static var _isyndicationClientFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebSyndication_ISyndicationClientFactory> {
        get throws {
            try _isyndicationClientFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Syndication.SyndicationClient", id: CWinRT.SWRT_WindowsWebSyndication_ISyndicationClientFactory.iid)
            }
        }
    }
}