// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an easing function that creates an animation that accelerates and/or decelerates using the formula *f* (*t*) = *t**<sup>p</sup>* where *p* is equal to the Power property.
public final class WindowsUIXamlMediaAnimation_PowerEase: WindowsRuntime.WinRTImport<WindowsUIXamlMediaAnimation_PowerEaseProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMediaAnimation_PowerEaseProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IPowerEase members

    /// Gets or sets the exponential power of the animation interpolation. For example, a value of 7 creates an animation interpolation curve that follows the formula *f* (*t*) = *t*<sup>7</sup>.
    /// - Returns: The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.
    public var power: Swift.Double {
        get throws {
            try _interop.get_Power()
        }
    }

    /// Gets or sets the exponential power of the animation interpolation. For example, a value of 7 creates an animation interpolation curve that follows the formula *f* (*t*) = *t*<sup>7</sup>.
    /// - Returns: The exponential power of the animation interpolation. This value must be greater or equal to 0. The default is 2.
    public func power(_ value: Swift.Double) throws {
        try _interop.put_Power(value)
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IPowerEaseStatics members

    /// Identifies the Power dependency property.
    /// - Returns: The identifier for the Power dependency property.
    public static var powerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipowerEaseStatics.get_PowerProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Animation.PowerEase", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ipowerEaseStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IPowerEaseStatics>? = nil

    internal static var _ipowerEaseStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IPowerEaseStatics> {
        get throws {
            try _ipowerEaseStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Animation.PowerEase", id: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IPowerEaseStatics.iid)
            }
        }
    }
}