// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides basic utility methods for processing RepeatBehavior values. C# and Microsoft Visual Basic code should use members of RepeatBehavior instead.
public final class WindowsUIXamlMediaAnimation_RepeatBehaviorHelper: WindowsRuntime.WinRTImport<WindowsUIXamlMediaAnimation_RepeatBehaviorHelperProjection> {
    // MARK: Windows.UI.Xaml.Media.Animation.IRepeatBehaviorHelperStatics members

    /// Gets a static RepeatBehavior that represents the special "Forever" value. C# and Microsoft Visual Basic code should use Forever instead.
    /// - Returns: A static RepeatBehavior that represents the special "Forever" value.
    public static var forever: WindowsUIXamlMediaAnimation_RepeatBehavior {
        get throws {
            try _irepeatBehaviorHelperStatics.get_Forever()
        }
    }

    /// Creates a new RepeatBehavior based on a repeat count. This corresponds to the *int***x** form when provided as XAML attribute value. C# and Microsoft Visual Basic code should use RepeatBehavior(Double) instead.
    /// - Parameter count: The number of times that the target animation should repeat.
    /// - Returns: The created RepeatBehavior, which has a **RepeatBehaviorType** of **Count**.
    public static func fromCount(_ count: Swift.Double) throws -> WindowsUIXamlMediaAnimation_RepeatBehavior {
        try _irepeatBehaviorHelperStatics.fromCount(count)
    }

    /// Creates a new RepeatBehavior based on a timespan. C# and Microsoft Visual Basic code should use RepeatBehavior(TimeSpan) instead.
    /// - Parameter duration: The time span that declares the desired repeat behavior.
    /// - Returns: The created RepeatBehavior, which has a **RepeatBehaviorType** value of **Duration**.
    public static func fromDuration(_ duration: WindowsFoundation_TimeSpan) throws -> WindowsUIXamlMediaAnimation_RepeatBehavior {
        try _irepeatBehaviorHelperStatics.fromDuration(duration)
    }

    /// Returns whether a specified RepeatBehavior has a **RepeatBehaviorType** of **Count** and a nonzero **Count** value. C# and Microsoft Visual Basic code should use HasCount instead.
    /// - Parameter target: The RepeatBehavior to evaluate.
    /// - Returns: **true** if *target* has a **RepeatBehaviorType** of **Count** and a nonzero **Count** value. Otherwise, **false**.
    public static func getHasCount(_ target: WindowsUIXamlMediaAnimation_RepeatBehavior) throws -> Swift.Bool {
        try _irepeatBehaviorHelperStatics.getHasCount(target)
    }

    /// Returns whether a specified RepeatBehavior has a **RepeatBehaviorType** of **Duration** and a nonzero **Duration** value. C# and Microsoft Visual Basic code should use HasDuration instead.
    /// - Parameter target: The RepeatBehavior to evaluate.
    /// - Returns: **true** if *target* has a **RepeatBehaviorType** of **Duration** and a nonzero **Duration** value. Otherwise, **false**.
    public static func getHasDuration(_ target: WindowsUIXamlMediaAnimation_RepeatBehavior) throws -> Swift.Bool {
        try _irepeatBehaviorHelperStatics.getHasDuration(target)
    }

    /// Determines whether two RepeatBehavior values have equivalent values. C# and Microsoft Visual Basic code should use the equality operator instead.
    /// - Parameter target: The first RepeatBehavior to compare.
    /// - Parameter value: The second RepeatBehavior to compare.
    /// - Returns: **true** if *target* and *value* hold equivalent values; otherwise, **false**.
    public static func equals(_ target: WindowsUIXamlMediaAnimation_RepeatBehavior, _ value: WindowsUIXamlMediaAnimation_RepeatBehavior) throws -> Swift.Bool {
        try _irepeatBehaviorHelperStatics.equals(target, value)
    }

    // MARK: Implementation details

    private static var _irepeatBehaviorHelperStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepeatBehaviorHelperStatics>? = nil

    internal static var _irepeatBehaviorHelperStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepeatBehaviorHelperStatics> {
        get throws {
            try _irepeatBehaviorHelperStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Animation.RepeatBehaviorHelper", id: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepeatBehaviorHelperStatics.iid)
            }
        }
    }
}