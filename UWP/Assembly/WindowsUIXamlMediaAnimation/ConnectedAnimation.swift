// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an animation that simultaneously animates the exit of one element and the entrance of another element.
public final class WindowsUIXamlMediaAnimation_ConnectedAnimation: WindowsRuntime.WinRTImport<WindowsUIXamlMediaAnimation_ConnectedAnimationProjection> {
    // MARK: Windows.UI.Xaml.Media.Animation.IConnectedAnimation members

    /// Occurs when the animation is finished.
    public func completed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlMediaAnimation_ConnectedAnimation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Completed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: completed)
    }

    public func completed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Completed(token)
    }

    /// Attempts to start the animation.
    /// - Parameter destination: The element that is animated into view.
    /// - Returns: **true** if the animation started; **false** if the animation has already been started, if it is no longer active, or if the destination element is the same as the source element.
    public func tryStart(_ destination: WindowsUIXaml_UIElement?) throws -> Swift.Bool {
        try _interop.tryStart(destination)
    }

    /// Stops the connected animation.
    public func cancel() throws {
        try _interop.cancel()
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IConnectedAnimation2 members

    /// Gets or sets a value that indicates whether the scale component of the connected animation should be used.
    /// - Returns: **true** if the scale component of the connected animation should be used. otherwise, **false**. The default is **true**.
    public var isScaleAnimationEnabled: Swift.Bool {
        get throws {
            try _iconnectedAnimation2.get_IsScaleAnimationEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the scale component of the connected animation should be used.
    /// - Returns: **true** if the scale component of the connected animation should be used. otherwise, **false**. The default is **true**.
    public func isScaleAnimationEnabled(_ value: Swift.Bool) throws {
        try _iconnectedAnimation2.put_IsScaleAnimationEnabled(value)
    }

    public func tryStart(_ destination: WindowsUIXaml_UIElement?, _ coordinatedElements: WindowsFoundationCollections_IIterable<WindowsUIXaml_UIElement?>?) throws -> Swift.Bool {
        try _iconnectedAnimation2.tryStartWithCoordinatedElements(destination, coordinatedElements)
    }

    /// Sets a custom CompositionAnimation to change the motion of a particular part of the connected animation.
    /// - Parameter component: The part of the connected animation to change.
    /// - Parameter animation: The animation to use in place of the default one.
    public func setAnimationComponent(_ component: WindowsUIXamlMediaAnimation_ConnectedAnimationComponent, _ animation: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _iconnectedAnimation2.setAnimationComponent(component, animation)
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IConnectedAnimation3 members

    /// Gets or sets the configuration that describes the type of connected animation to play.
    /// - Returns: A configuration that describes the type of connected animation to play.
    public var configuration: WindowsUIXamlMediaAnimation_ConnectedAnimationConfiguration {
        get throws {
            try COM.NullResult.unwrap(_iconnectedAnimation3.get_Configuration())
        }
    }

    /// Gets or sets the configuration that describes the type of connected animation to play.
    /// - Returns: A configuration that describes the type of connected animation to play.
    public func configuration(_ value: WindowsUIXamlMediaAnimation_ConnectedAnimationConfiguration?) throws {
        try _iconnectedAnimation3.put_Configuration(value)
    }

    // MARK: Implementation details

    private var _iconnectedAnimation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation2>? = nil

    internal var _iconnectedAnimation2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation2> {
        get throws {
            try _iconnectedAnimation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation2.self)
            }
        }
    }

    private var _iconnectedAnimation3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation3>? = nil

    internal var _iconnectedAnimation3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation3> {
        get throws {
            try _iconnectedAnimation3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IConnectedAnimation3.self)
            }
        }
    }

    deinit {
        _iconnectedAnimation2_storage?.release()
        _iconnectedAnimation3_storage?.release()
    }
}