// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Reacts to layout moves when no context is set and a trigger of *move* is passed.
public final class WindowsUIXamlMediaAnimation_RepositionThemeTransition: WindowsRuntime.WinRTImport<WindowsUIXamlMediaAnimation_RepositionThemeTransitionProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlMediaAnimation_RepositionThemeTransitionProjection.self))
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IRepositionThemeTransition2 members

    /// Gets or sets a value that determines whether the transition staggers rendering of multiple items, or renders all items at once.
    /// - Returns: **true** if the animation staggers rendering of multiple items. **false** if the animation renders all items at once. The default is **true**.
    public var isStaggeringEnabled: Swift.Bool {
        get throws {
            try _irepositionThemeTransition2.get_IsStaggeringEnabled()
        }
    }

    /// Gets or sets a value that determines whether the transition staggers rendering of multiple items, or renders all items at once.
    /// - Returns: **true** if the animation staggers rendering of multiple items. **false** if the animation renders all items at once. The default is **true**.
    public func isStaggeringEnabled(_ value: Swift.Bool) throws {
        try _irepositionThemeTransition2.put_IsStaggeringEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Media.Animation.IRepositionThemeTransitionStatics2 members

    /// Identifies the IsStaggeringEnabled dependency property.
    /// - Returns: The identifier for the IsStaggeringEnabled dependency property.
    public static var isStaggeringEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irepositionThemeTransitionStatics2.get_IsStaggeringEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _irepositionThemeTransition2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransition2>? = nil

    internal var _irepositionThemeTransition2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransition2> {
        get throws {
            try _irepositionThemeTransition2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransition2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransition2.self)
            }
        }
    }

    deinit {
        _irepositionThemeTransition2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Animation.RepositionThemeTransition", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _irepositionThemeTransitionStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransitionStatics2>? = nil

    internal static var _irepositionThemeTransitionStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransitionStatics2> {
        get throws {
            try _irepositionThemeTransitionStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Animation.RepositionThemeTransition", id: CWinRT.SWRT_WindowsUIXamlMediaAnimation_IRepositionThemeTransitionStatics2.iid)
            }
        }
    }
}