// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Enables you to publish messages to proximate devices or subscribe to messages from proximate devices.
public final class WindowsNetworkingProximity_ProximityDevice: WindowsRuntime.WinRTImport<WindowsNetworkingProximity_ProximityDeviceProjection> {
    // MARK: Windows.Networking.Proximity.IProximityDevice members

    /// Gets the transfer rate of a proximity device.
    /// - Returns: The transfer rate of a proximity device.
    public var bitsPerSecond: Swift.UInt64 {
        get throws {
            try _interop.get_BitsPerSecond()
        }
    }

    /// Gets the DeviceInformation Id for a proximity device.
    /// - Returns: The DeviceInformation Id for a proximity device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the maximum size of a published message that this proximity device supports.
    /// - Returns: The maximum size of a published message that this proximity device supports.
    public var maxMessageBytes: Swift.UInt32 {
        get throws {
            try _interop.get_MaxMessageBytes()
        }
    }

    /// Occurs when a device enters the proximate range.
    public func deviceArrived(adding arrivedHandler: WindowsNetworkingProximity_DeviceArrivedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DeviceArrived(arrivedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: deviceArrived)
    }

    public func deviceArrived(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DeviceArrived(cookie)
    }

    /// Occurs when a device leaves the proximate range.
    public func deviceDeparted(adding departedHandler: WindowsNetworkingProximity_DeviceDepartedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DeviceDeparted(departedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: deviceDeparted)
    }

    public func deviceDeparted(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DeviceDeparted(cookie)
    }

    /// Creates a subscription for a specified message type.
    /// - Parameter messageType: The type of message to deliver to this subscription.
    /// - Parameter messageReceivedHandler: The handler that the proximity provider will call when it delivers a message.
    /// - Returns: A unique ID for the subscription.
    public func subscribeForMessage(_ messageType: Swift.String, _ messageReceivedHandler: WindowsNetworkingProximity_MessageReceivedHandler?) throws -> Swift.Int64 {
        try _interop.subscribeForMessage(messageType, messageReceivedHandler)
    }

    /// Publishes a message to subscribers of the specified message type.
    /// - Parameter messageType: The type of message to deliver to subscribers.
    /// - Parameter message: The message to deliver to subscribers.
    /// - Returns: A unique publication ID for the published message. Pass this value to the StopPublishingMessage method to stop publishing the message.
    public func publishMessage(_ messageType: Swift.String, _ message: Swift.String) throws -> Swift.Int64 {
        try _interop.publishMessage(messageType, message)
    }

    /// Publishes a message to subscribers of the specified message type. The specified handler is called when the message has been transmitted.
    /// - Parameter messageType: The type of message to deliver to subscribers.
    /// - Parameter message: The message to deliver to subscribers.
    /// - Parameter messageTransmittedHandler: The handler to call when the message has been transmitted.
    /// - Returns: A unique publication ID for the published message.
    public func publishMessage(_ messageType: Swift.String, _ message: Swift.String, _ messageTransmittedHandler: WindowsNetworkingProximity_MessageTransmittedHandler?) throws -> Swift.Int64 {
        try _interop.publishMessageWithCallback(messageType, message, messageTransmittedHandler)
    }

    /// Publishes to subscribers of the specified message type a message that contains binary data.
    /// - Parameter messageType: The type of message to deliver to subscribers.
    /// - Parameter message: The binary message data to deliver to subscribers.
    /// - Returns: A unique publication ID for the published message.
    public func publishBinaryMessage(_ messageType: Swift.String, _ message: WindowsStorageStreams_IBuffer?) throws -> Swift.Int64 {
        try _interop.publishBinaryMessage(messageType, message)
    }

    /// Publishes a message that contains binary data to subscribers of the specified message type. The specified handler is called when the message has been transmitted.
    /// - Parameter messageType: The type of message to deliver to subscribers.
    /// - Parameter message: The binary message data to deliver to subscribers.
    /// - Parameter messageTransmittedHandler: The handler to call when the message has been transmitted.
    /// - Returns: A unique publication ID for the published message.
    public func publishBinaryMessage(_ messageType: Swift.String, _ message: WindowsStorageStreams_IBuffer?, _ messageTransmittedHandler: WindowsNetworkingProximity_MessageTransmittedHandler?) throws -> Swift.Int64 {
        try _interop.publishBinaryMessageWithCallback(messageType, message, messageTransmittedHandler)
    }

    /// Publishes a Uniform Resource Identifier (URI) to a proximate device.
    /// - Parameter message: The URI to publish.
    /// - Returns: The publication ID of the message.
    public func publishUriMessage(_ message: WindowsFoundation_Uri?) throws -> Swift.Int64 {
        try _interop.publishUriMessage(message)
    }

    /// Publishes a Uniform Resource Identifier (URI) to a proximate device. The specified handler is called when the message has been transmitted.
    /// - Parameter message: The URI to publish.
    /// - Parameter messageTransmittedHandler: The handler to call when the message has been transmitted.
    /// - Returns: The publication ID of the message.
    public func publishUriMessage(_ message: WindowsFoundation_Uri?, _ messageTransmittedHandler: WindowsNetworkingProximity_MessageTransmittedHandler?) throws -> Swift.Int64 {
        try _interop.publishUriMessageWithCallback(message, messageTransmittedHandler)
    }

    /// Cancels a message subscription.
    /// - Parameter subscriptionId: The subscription ID for the message.
    public func stopSubscribingForMessage(_ subscriptionId: Swift.Int64) throws {
        try _interop.stopSubscribingForMessage(subscriptionId)
    }

    /// Stops publishing a message.
    /// - Parameter messageId: The publication ID for the message.
    public func stopPublishingMessage(_ messageId: Swift.Int64) throws {
        try _interop.stopPublishingMessage(messageId)
    }

    // MARK: Windows.Networking.Proximity.IProximityDeviceStatics members

    /// Returns the class selection string that you can use to enumerate proximity devices.
    /// - Returns: The class selection string for proximity devices.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iproximityDeviceStatics.getDeviceSelector()
    }

    /// Creates an instance of a ProximityDevice class and activates the default proximity provider.
    /// - Returns: A new proximity device that uses the default proximity provider. Returns **NULL** if no proximity devices are installed.
    public static func getDefault() throws -> WindowsNetworkingProximity_ProximityDevice {
        try COM.NullResult.unwrap(_iproximityDeviceStatics.getDefault())
    }

    /// Creates an instance of a ProximityDevice class and activates the specified proximity device interface.
    /// - Parameter deviceId: The DeviceInformation Id of a proximity device.
    /// - Returns: A new ProximityDevice that uses the specified proximity device interface. Throws a **System.IO.FileNotFoundException** exception if the specified proximity device interface isunavailable.
    public static func fromId(_ deviceId: Swift.String) throws -> WindowsNetworkingProximity_ProximityDevice {
        try COM.NullResult.unwrap(_iproximityDeviceStatics.fromId(deviceId))
    }

    // MARK: Implementation details

    private static var _iproximityDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingProximity_IProximityDeviceStatics>? = nil

    internal static var _iproximityDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingProximity_IProximityDeviceStatics> {
        get throws {
            try _iproximityDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.Proximity.ProximityDevice", id: CWinRT.SWRT_WindowsNetworkingProximity_IProximityDeviceStatics.iid)
            }
        }
    }
}