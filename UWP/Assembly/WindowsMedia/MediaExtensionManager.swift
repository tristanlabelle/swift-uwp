// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Registers a media parser or codec.
public final class WindowsMedia_MediaExtensionManager: WindowsRuntime.WinRTImport<WindowsMedia_MediaExtensionManagerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMedia_MediaExtensionManagerProjection.self))
    }

    // MARK: Windows.Media.IMediaExtensionManager members

    /// Registers a scheme handler for the specified URL scheme.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the scheme handler. The runtime class must implement the IMediaExtension interface.
    /// - Parameter scheme: The URL scheme that will be recognized to invoke the scheme handler. For example, "myscheme://".
    public func registerSchemeHandler(_ activatableClassId: Swift.String, _ scheme: Swift.String) throws {
        try _interop.registerSchemeHandler(activatableClassId, scheme)
    }

    /// Registers a scheme handler for the specified URL scheme with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the scheme handler. The runtime class must implement the IMediaExtension interface.
    /// - Parameter scheme: The URL scheme that will be recognized to invoke the scheme handler. For example, "myscheme://".
    /// - Parameter configuration: An optional parameter that contains configuration properties for the scheme handler.
    public func registerSchemeHandler(_ activatableClassId: Swift.String, _ scheme: Swift.String, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerSchemeHandlerWithSettings(activatableClassId, scheme, configuration)
    }

    /// Registers a byte-stream handler by file name extension and MIME type.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the byte-stream handler. The runtime class must implement the IMediaExtension interface.
    /// - Parameter fileExtension: The file name extension that is registered for this byte-stream handler.
    /// - Parameter mimeType: The MIME type that is registered for this byte-stream handler.
    public func registerByteStreamHandler(_ activatableClassId: Swift.String, _ fileExtension: Swift.String, _ mimeType: Swift.String) throws {
        try _interop.registerByteStreamHandler(activatableClassId, fileExtension, mimeType)
    }

    /// Registers a byte-stream handler by file name extension and MIME type, with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the byte-stream handler. The runtime class must implement the IMediaExtension interface.
    /// - Parameter fileExtension: The file name extension that is registered for this byte-stream handler.
    /// - Parameter mimeType: The MIME type that is registered for this byte-stream handler.
    /// - Parameter configuration: An optional parameter that contains configuration properties for the byte-stream handler.
    public func registerByteStreamHandler(_ activatableClassId: Swift.String, _ fileExtension: Swift.String, _ mimeType: Swift.String, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerByteStreamHandlerWithSettings(activatableClassId, fileExtension, mimeType, configuration)
    }

    /// Registers an audio decoder for the specified input and output media types.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the audio decoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the audio decoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the audio decoder.
    public func registerAudioDecoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID) throws {
        try _interop.registerAudioDecoder(activatableClassId, inputSubtype, outputSubtype)
    }

    /// Registers an audio decoder for the specified input and output media types with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the audio decoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the audio decoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the audio decoder.
    /// - Parameter configuration: An optional parameter that contains the configuration properties to be passed to the audio decoder.
    public func registerAudioDecoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerAudioDecoderWithSettings(activatableClassId, inputSubtype, outputSubtype, configuration)
    }

    /// Registers an audio encoder for the specified input and output media types.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the audio encoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the audio encoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the audio encoder.
    public func registerAudioEncoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID) throws {
        try _interop.registerAudioEncoder(activatableClassId, inputSubtype, outputSubtype)
    }

    /// Registers an audio encoder for the specified input and output media types with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the audio encoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the audio encoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the audio encoder.
    /// - Parameter configuration: An optional parameter that contains the configuration properties to be passed to the audio encoder.
    public func registerAudioEncoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerAudioEncoderWithSettings(activatableClassId, inputSubtype, outputSubtype, configuration)
    }

    /// Registers an video decoder for the specified input and output media types.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the video decoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the video decoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the video decoder.
    public func registerVideoDecoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID) throws {
        try _interop.registerVideoDecoder(activatableClassId, inputSubtype, outputSubtype)
    }

    /// Registers a video decoder for the specified input and output media types with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the video decoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the video decoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the video decoder.
    /// - Parameter configuration: An optional parameter that contains the configuration properties to be passed to the video decoder.
    public func registerVideoDecoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerVideoDecoderWithSettings(activatableClassId, inputSubtype, outputSubtype, configuration)
    }

    /// Registers a video encoder for the specified input and output media types.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the video encoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the video encoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the video encoder.
    public func registerVideoEncoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID) throws {
        try _interop.registerVideoEncoder(activatableClassId, inputSubtype, outputSubtype)
    }

    /// Registers a video encoder for the specified input and output media types with an optional configuration parameter.
    /// - Parameter activatableClassId: The class identifier of the activatable runtime class of the video encoder. The runtime class must implement the IMediaExtension interface.
    /// - Parameter inputSubtype: The guid identifier of the media type that the video encoder accepts as input.
    /// - Parameter outputSubtype: The guid identifier of the media type that is output by the video encoder.
    /// - Parameter configuration: An optional parameter that contains the configuration properties to be passed to the video encoder.
    public func registerVideoEncoder(_ activatableClassId: Swift.String, _ inputSubtype: Foundation.UUID, _ outputSubtype: Foundation.UUID, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.registerVideoEncoderWithSettings(activatableClassId, inputSubtype, outputSubtype, configuration)
    }

    // MARK: Windows.Media.IMediaExtensionManager2 members

    /// Registers a media extension that provides a background task that decodes media.
    /// - Parameter extension: An object that implements IMediaExtension.
    /// - Parameter connection: An AppServiceConnection  object that represents an endpoint connection for an app service.
    public func registerMediaExtensionForAppService(_ `extension`: WindowsMedia_IMediaExtension?, _ connection: WindowsApplicationModelAppService_AppServiceConnection?) throws {
        try _imediaExtensionManager2.registerMediaExtensionForAppService(extension, connection)
    }

    // MARK: Implementation details

    private var _imediaExtensionManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMedia_IMediaExtensionManager2>? = nil

    internal var _imediaExtensionManager2: COM.COMInterop<CWinRT.SWRT_WindowsMedia_IMediaExtensionManager2> {
        get throws {
            try _imediaExtensionManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMedia_IMediaExtensionManager2.iid).cast(to: CWinRT.SWRT_WindowsMedia_IMediaExtensionManager2.self)
            }
        }
    }

    deinit {
        _imediaExtensionManager2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaExtensionManager", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}