// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an object that enables integrate with the system media transport controls and support for media commands.
public final class WindowsMedia_SystemMediaTransportControls: WindowsRuntime.WinRTImport<WindowsMedia_SystemMediaTransportControlsProjection> {
    // MARK: Windows.Media.ISystemMediaTransportControls members

    /// Gets the display updater for the SystemMediaTransportControls which enable updating the information displayed about the currently playing song.
    /// - Returns: The display updater for the SystemMediaTransportControls.
    public var displayUpdater: WindowsMedia_SystemMediaTransportControlsDisplayUpdater {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DisplayUpdater())
        }
    }

    /// Gets or sets a value that specifies if the channel down button is supported.
    /// - Returns: **true** if the channel down button is supported; otherwise, **false**.
    public var isChannelDownEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsChannelDownEnabled()
        }
    }

    /// Gets or sets a value that specifies if the channel down button is supported.
    /// - Returns: **true** if the channel down button is supported; otherwise, **false**.
    public func isChannelDownEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsChannelDownEnabled(value)
    }

    /// Gets or sets a value that specifies if the channel up button is supported.
    /// - Returns: **true** if the channel up button is supported; otherwise, **false**.
    public var isChannelUpEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsChannelUpEnabled()
        }
    }

    /// Gets or sets a value that specifies if the channel up button is supported.
    /// - Returns: **true** if the channel up button is supported; otherwise, **false**.
    public func isChannelUpEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsChannelUpEnabled(value)
    }

    /// Enables and disables the system media transport controls for the app.
    /// - Returns: **true** if the system transport controls are enabled for the app; otherwise, **false**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Enables and disables the system media transport controls for the app.
    /// - Returns: **true** if the system transport controls are enabled for the app; otherwise, **false**.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsEnabled(value)
    }

    /// Gets or sets a value that specifies if the fast forward button is supported.
    /// - Returns: **true** if the fast forward button is supported; otherwise, **false**.
    public var isFastForwardEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsFastForwardEnabled()
        }
    }

    /// Gets or sets a value that specifies if the fast forward button is supported.
    /// - Returns: **true** if the fast forward button is supported; otherwise, **false**.
    public func isFastForwardEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsFastForwardEnabled(value)
    }

    /// Gets or sets a value that specifies if the next button is supported.
    /// - Returns: **true** if the next button is supported; otherwise, **false**.
    public var isNextEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsNextEnabled()
        }
    }

    /// Gets or sets a value that specifies if the next button is supported.
    /// - Returns: **true** if the next button is supported; otherwise, **false**.
    public func isNextEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsNextEnabled(value)
    }

    /// Gets or sets a value that specifies if the pause button is supported.**true** if the pause button is supported; otherwise, **false**.
    /// - Returns: **true** if the pause button is supported; otherwise, **false**.
    public var isPauseEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPauseEnabled()
        }
    }

    /// Gets or sets a value that specifies if the pause button is supported.**true** if the pause button is supported; otherwise, **false**.
    /// - Returns: **true** if the pause button is supported; otherwise, **false**.
    public func isPauseEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsPauseEnabled(value)
    }

    /// Gets or sets a value that specifies if the play button is supported.
    /// - Returns: **true** if the play is supported; otherwise, **false**.
    public var isPlayEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPlayEnabled()
        }
    }

    /// Gets or sets a value that specifies if the play button is supported.
    /// - Returns: **true** if the play is supported; otherwise, **false**.
    public func isPlayEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsPlayEnabled(value)
    }

    /// Gets or sets a value that specifies if the previous button is supported.
    /// - Returns: **true** if the previous button is supported; otherwise, **false**.
    public var isPreviousEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPreviousEnabled()
        }
    }

    /// Gets or sets a value that specifies if the previous button is supported.
    /// - Returns: **true** if the previous button is supported; otherwise, **false**.
    public func isPreviousEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsPreviousEnabled(value)
    }

    /// Gets or sets a value that specifies if the record button is supported.**true** if the record button is supported; otherwise, **false**.
    /// - Returns: **true** if the record button is supported; otherwise, **false**.
    public var isRecordEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRecordEnabled()
        }
    }

    /// Gets or sets a value that specifies if the record button is supported.**true** if the record button is supported; otherwise, **false**.
    /// - Returns: **true** if the record button is supported; otherwise, **false**.
    public func isRecordEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsRecordEnabled(value)
    }

    /// Gets or sets a value that specifies if the rewind button is supported.
    /// - Returns: **true** if the rewind button is supported; otherwise, **false**.
    public var isRewindEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRewindEnabled()
        }
    }

    /// Gets or sets a value that specifies if the rewind button is supported.
    /// - Returns: **true** if the rewind button is supported; otherwise, **false**.
    public func isRewindEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsRewindEnabled(value)
    }

    /// Gets or sets a value that specifies if the stop button is supported.
    /// - Returns: **true** if the stop button is supported; otherwise, **false**.
    public var isStopEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsStopEnabled()
        }
    }

    /// Gets or sets a value that specifies if the stop button is supported.
    /// - Returns: **true** if the stop button is supported; otherwise, **false**.
    public func isStopEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsStopEnabled(value)
    }

    /// Gets or sets the playback status of the media.
    /// - Returns: The playback status.
    public var playbackStatus: WindowsMedia_MediaPlaybackStatus {
        get throws {
            try _interop.get_PlaybackStatus()
        }
    }

    /// Gets or sets the playback status of the media.
    /// - Returns: The playback status.
    public func playbackStatus(_ value: WindowsMedia_MediaPlaybackStatus) throws {
        try _interop.put_PlaybackStatus(value)
    }

    /// Gets the sound level of the media for the capture and render streams.
    /// - Returns: The sound level.
    public var soundLevel: WindowsMedia_SoundLevel {
        get throws {
            try _interop.get_SoundLevel()
        }
    }

    /// Occurs when a button is pressed on the SystemMediaTransportControls.
    public func buttonPressed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_SystemMediaTransportControlsButtonPressedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ButtonPressed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: buttonPressed)
    }

    public func buttonPressed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ButtonPressed(token)
    }

    /// Occurs when a property on the SystemMediaTransportControls has changed.
    public func propertyChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_SystemMediaTransportControlsPropertyChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PropertyChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: propertyChanged)
    }

    public func propertyChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PropertyChanged(token)
    }

    // MARK: Windows.Media.ISystemMediaTransportControls2 members

    /// Gets or sets a value representing the current auto-repeat mode of the SystemMediaTransportControls.
    /// - Returns: A value representing the current auto-repeat mode.
    public var autoRepeatMode: WindowsMedia_MediaPlaybackAutoRepeatMode {
        get throws {
            try _isystemMediaTransportControls2.get_AutoRepeatMode()
        }
    }

    /// Gets or sets a value representing the current auto-repeat mode of the SystemMediaTransportControls.
    /// - Returns: A value representing the current auto-repeat mode.
    public func autoRepeatMode(_ value: WindowsMedia_MediaPlaybackAutoRepeatMode) throws {
        try _isystemMediaTransportControls2.put_AutoRepeatMode(value)
    }

    /// Gets or sets the playback rate of the SystemMediaTransportControls.
    /// - Returns: The playback rate of the SystemMediaTransportControls.
    public var playbackRate: Swift.Double {
        get throws {
            try _isystemMediaTransportControls2.get_PlaybackRate()
        }
    }

    /// Gets or sets the playback rate of the SystemMediaTransportControls.
    /// - Returns: The playback rate of the SystemMediaTransportControls.
    public func playbackRate(_ value: Swift.Double) throws {
        try _isystemMediaTransportControls2.put_PlaybackRate(value)
    }

    /// Gets or sets a value representing the current shuffle state of the SystemMediaTransportControls.
    /// - Returns: True if the SystemMediaTransportControls have shuffle enabled; otherwise, false.
    public var shuffleEnabled: Swift.Bool {
        get throws {
            try _isystemMediaTransportControls2.get_ShuffleEnabled()
        }
    }

    /// Gets or sets a value representing the current shuffle state of the SystemMediaTransportControls.
    /// - Returns: True if the SystemMediaTransportControls have shuffle enabled; otherwise, false.
    public func shuffleEnabled(_ value: Swift.Bool) throws {
        try _isystemMediaTransportControls2.put_ShuffleEnabled(value)
    }

    /// Occurs when the user modifies the SystemMediaTransportControls auto-repeat mode.
    public func autoRepeatModeChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_AutoRepeatModeChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isystemMediaTransportControls2.add_AutoRepeatModeChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: autoRepeatModeChangeRequested)
    }

    public func autoRepeatModeChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isystemMediaTransportControls2.remove_AutoRepeatModeChangeRequested(token)
    }

    /// Occurs when the user modifies the playback position of the SystemMediaTransportControls.
    public func playbackPositionChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_PlaybackPositionChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isystemMediaTransportControls2.add_PlaybackPositionChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackPositionChangeRequested)
    }

    public func playbackPositionChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isystemMediaTransportControls2.remove_PlaybackPositionChangeRequested(token)
    }

    /// Occurs when the user modifies the SystemMediaTransportControls playback rate.
    public func playbackRateChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_PlaybackRateChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isystemMediaTransportControls2.add_PlaybackRateChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackRateChangeRequested)
    }

    public func playbackRateChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isystemMediaTransportControls2.remove_PlaybackRateChangeRequested(token)
    }

    /// Occurs when the user modifies the SystemMediaTransportControls shuffle state.
    public func shuffleEnabledChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMedia_SystemMediaTransportControls?, WindowsMedia_ShuffleEnabledChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isystemMediaTransportControls2.add_ShuffleEnabledChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shuffleEnabledChangeRequested)
    }

    public func shuffleEnabledChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isystemMediaTransportControls2.remove_ShuffleEnabledChangeRequested(token)
    }

    /// Updates the SystemMediaTransportControls timeline properties with the values in the provided object.
    /// - Parameter timelineProperties: The object representing the new timeline property values.
    public func updateTimelineProperties(_ timelineProperties: WindowsMedia_SystemMediaTransportControlsTimelineProperties?) throws {
        try _isystemMediaTransportControls2.updateTimelineProperties(timelineProperties)
    }

    // MARK: Windows.Media.ISystemMediaTransportControlsStatics members

    /// The system media transport controls for the current view.
    /// - Returns: The system media transport controls for the current view.
    public static func getForCurrentView() throws -> WindowsMedia_SystemMediaTransportControls {
        try COM.NullResult.unwrap(_isystemMediaTransportControlsStatics.getForCurrentView())
    }

    // MARK: Implementation details

    private var _isystemMediaTransportControls2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControls2>? = nil

    internal var _isystemMediaTransportControls2: COM.COMInterop<CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControls2> {
        get throws {
            try _isystemMediaTransportControls2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControls2.iid).cast(to: CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControls2.self)
            }
        }
    }

    deinit {
        _isystemMediaTransportControls2_storage?.release()
    }

    private static var _isystemMediaTransportControlsStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControlsStatics>? = nil

    internal static var _isystemMediaTransportControlsStatics: COM.COMInterop<CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControlsStatics> {
        get throws {
            try _isystemMediaTransportControlsStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.SystemMediaTransportControls", id: CWinRT.SWRT_WindowsMedia_ISystemMediaTransportControlsStatics.iid)
            }
        }
    }
}