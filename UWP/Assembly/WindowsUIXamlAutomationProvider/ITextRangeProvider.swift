// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Exposes methods and properties to support Microsoft UI Automation client access to a span of continuous text in a text container that implements ITextProvider.
public protocol WindowsUIXamlAutomationProvider_ITextRangeProviderProtocol: IInspectableProtocol {
    /// Returns a new ITextRangeProvider that is identical to the original ITextRangeProvider and that inherits all the properties of the original.
    /// - Returns: The new text range. This method never returns null.
    func clone() throws -> WindowsUIXamlAutomationProvider_ITextRangeProvider

    /// Returns a value that indicates whether the start and end points of a text range are the same as another text range.
    /// - Parameter textRangeProvider: A text range to compare to the implementing peer's text range.
    /// - Returns: **true** if the span of both text ranges is identical; otherwise, **false**.
    func compare(_ textRangeProvider: WindowsUIXamlAutomationProvider_ITextRangeProvider?) throws -> Swift.Bool

    /// Returns a value that indicates whether two text ranges have identical endpoints.
    /// - Parameter endpoint: The **Start** or **End** endpoint of the caller.
    /// - Parameter textRangeProvider: The target range for comparison.
    /// - Parameter targetEndpoint: The **Start** or **End** endpoint of the target.
    /// - Returns: Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.
    func compareEndpoints(_ endpoint: WindowsUIXamlAutomationText_TextPatternRangeEndpoint, _ textRangeProvider: WindowsUIXamlAutomationProvider_ITextRangeProvider?, _ targetEndpoint: WindowsUIXamlAutomationText_TextPatternRangeEndpoint) throws -> Swift.Int32

    /// Expands the text range to the specified text unit.
    /// - Parameter unit: The text measure unit.
    func expandToEnclosingUnit(_ unit: WindowsUIXamlAutomationText_TextUnit) throws

    /// Returns a text range subset that has the specified attribute ID and attribute value.
    /// - Parameter attributeId: The attribute ID to search for.
    /// - Parameter value: The attribute value to search for. This value must match the type specified for the attribute.
    /// - Parameter backward: **true** if the last occurring text range should be returned instead of the first; otherwise, **false**.
    /// - Returns: A text range that has a matching attribute ID and attribute value; otherwise **null**.
    func findAttribute(_ attributeId: Swift.Int32, _ value: WindowsRuntime.IInspectable?, _ backward: Swift.Bool) throws -> WindowsUIXamlAutomationProvider_ITextRangeProvider

    /// Returns a text range subset that contains the specified text.
    /// - Parameter text: The text string to search for.
    /// - Parameter backward: **true** to return the last occurring text range instead of the first; otherwise, **false**.
    /// - Parameter ignoreCase: **true** to ignore case; otherwise, **false**.
    /// - Returns: A text range that matches the specified text; otherwise null.
    func findText(_ text: Swift.String, _ backward: Swift.Bool, _ ignoreCase: Swift.Bool) throws -> WindowsUIXamlAutomationProvider_ITextRangeProvider

    /// Retrieves the value of the specified attribute ID across the text range.
    /// - Parameter attributeId: The text attribute ID.
    /// - Returns: Retrieves an object that represents the value of the specified attribute.
    func getAttributeValue(_ attributeId: Swift.Int32) throws -> WindowsRuntime.IInspectable

    /// Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.
    /// - Parameter returnValue: An array of bounding rectangles for each full or partial line of text in a text range. An empty array for a degenerate range. An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window. 
    func getBoundingRectangles(_ returnValue: inout [Swift.Double]) throws

    /// Returns the innermost element that encloses the text range.
    /// - Returns: The enclosing control, typically the text provider that provides the text range. However, if the text provider supports child text elements such as tables or hyperlinks, the enclosing element can be a descendant of the text provider.
    func getEnclosingElement() throws -> WindowsUIXamlAutomationProvider_IRawElementProviderSimple

    /// Retrieves the plain text of the range.
    /// - Parameter maxLength: The maximum length of the string to return. Use â€“ 1 to specify an unlimited length.
    /// - Returns: The plain text of the text range, which might represent a portion of the full string truncated at the specified *maxLength*.
    func getText(_ maxLength: Swift.Int32) throws -> Swift.String

    /// Moves the text range the specified number of text units.
    /// - Parameter unit: The text unit boundary.
    /// - Parameter count: The number of text units to move. A positive value moves the text range forward; a negative value moves the text range backward; and a value of 0 has no effect.
    /// - Returns: The number of units actually moved. This value can be less than the *count* requested if either of the new text range endpoints is greater than or less than the DocumentRange endpoints. This value can be negative if navigation is happening in the backward direction.
    func move(_ unit: WindowsUIXamlAutomationText_TextUnit, _ count: Swift.Int32) throws -> Swift.Int32

    /// Moves one endpoint of the text range the specified number of text units within the document range.
    /// - Parameter endpoint: The endpoint to move.
    /// - Parameter unit: The text measure unit for moving.
    /// - Parameter count: The number of units to move. A positive value moves the endpoint forward. A negative value moves it backward. A value of 0 has no effect.
    /// - Returns: The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.
    func moveEndpointByUnit(_ endpoint: WindowsUIXamlAutomationText_TextPatternRangeEndpoint, _ unit: WindowsUIXamlAutomationText_TextUnit, _ count: Swift.Int32) throws -> Swift.Int32

    /// Moves one endpoint of a text range to the specified endpoint of a second text range.
    /// - Parameter endpoint: The endpoint to move.
    /// - Parameter textRangeProvider: Another range from the same text provider.
    /// - Parameter targetEndpoint: An endpoint on the other range.
    func moveEndpointByRange(_ endpoint: WindowsUIXamlAutomationText_TextPatternRangeEndpoint, _ textRangeProvider: WindowsUIXamlAutomationProvider_ITextRangeProvider?, _ targetEndpoint: WindowsUIXamlAutomationText_TextPatternRangeEndpoint) throws

    /// Highlights text in the text control that corresponds to the start and end endpoints of the text range.
    func select() throws

    /// Adds to the collection of highlighted text in a text container that supports multiple disjoint selections.
    func addToSelection() throws

    /// From the collection of highlighted text in a text container that supports multiple disjoint selections, removes a highlighted section of text that corresponds to the caller's text range endpoints.
    func removeFromSelection() throws

    /// Causes the text control to scroll vertically until the text range is visible in the viewport.
    /// - Parameter alignToTop: **true** if the text control should be scrolled so that the text range is flush with the top of the viewport; **false** if the text range is flush with the bottom of the viewport.
    func scrollIntoView(_ alignToTop: Swift.Bool) throws

    /// Retrieves a collection of all the embedded objects that exist within the text range.
    /// - Returns: A collection of child objects that exist within the range. Child objects that overlap with the text range but are not completely enclosed by it are also included in the collection. Returns an empty collection if no child objects exist.
    func getChildren() throws -> [WindowsUIXamlAutomationProvider_IRawElementProviderSimple?]
}

/// Exposes methods and properties to support Microsoft UI Automation client access to a span of continuous text in a text container that implements ITextProvider.
public typealias WindowsUIXamlAutomationProvider_ITextRangeProvider = any WindowsUIXamlAutomationProvider_ITextRangeProviderProtocol