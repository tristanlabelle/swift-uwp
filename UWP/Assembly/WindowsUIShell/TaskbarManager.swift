// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides methods for pinning applications to the taskbar.
public final class WindowsUIShell_TaskbarManager: WindowsRuntime.WinRTImport<WindowsUIShell_TaskbarManagerProjection> {
    // MARK: Windows.UI.Shell.ITaskbarManager members

    /// Gets whether pinning to the taskbar is allowed.
    /// - Returns: A boolean indicating whether pinning to the taskbar is allowed.
    public var isPinningAllowed: Swift.Bool {
        get throws {
            try _interop.get_IsPinningAllowed()
        }
    }

    /// Gets whether the taskbar is present on the current device.
    /// - Returns: A boolean indicating if the taskbar is present. This will return false on devices where no taskbar is present.
    public var isSupported: Swift.Bool {
        get throws {
            try _interop.get_IsSupported()
        }
    }

    /// Checks if the currently active application is already pinned to the taskbar.
    /// - Returns: A boolean representing whether the current application is pinned to the taskbar.
    public func isCurrentAppPinnedAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.isCurrentAppPinnedAsync())
    }

    /// Checks if the specified application is already pinned to the taskbar.
    /// - Parameter appListEntry: An AppListEntry corresponding to the application to check.
    /// - Returns: A boolean representing whether the specified application is pinned to the taskbar.
    public func isAppListEntryPinnedAsync(_ appListEntry: WindowsApplicationModelCore_AppListEntry?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.isAppListEntryPinnedAsync(appListEntry))
    }

    /// Requests that the currently active application be pinned to the taskbar.
    /// - Returns: A boolean representing whether the application was successfully pinned to the takbar. If the app was already pinned, this will immediately return true.
    public func requestPinCurrentAppAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.requestPinCurrentAppAsync())
    }

    /// Requests that the specified application be pinned to the taskbar.
    /// - Parameter appListEntry: An AppListEntry corresponding to the application to pin to the taskbar.
    /// - Returns: A boolean representing whether the application was successfully pinned to the takbar. If the app was already pinned, this will immediately return true.
    public func requestPinAppListEntryAsync(_ appListEntry: WindowsApplicationModelCore_AppListEntry?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.requestPinAppListEntryAsync(appListEntry))
    }

    // MARK: Windows.UI.Shell.ITaskbarManager2 members

    /// Checks if the specified secondary tile is pinned to taskbar. Requires user approval as described here
    /// - Parameter tileId: The TileId of the SecondaryTile that you want to check is pinned.
    /// - Returns: A boolean representing whether the specified secondary tile is pinned to taskbar.
    public func isSecondaryTilePinnedAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_itaskbarManager2.isSecondaryTilePinnedAsync(tileId))
    }

    /// Requests to pin the specified tile to taskbar. Requires user approval as described here.
    /// - Parameter secondaryTile: The secondary tile to be pinned.
    /// - Returns: A boolean representing whether the tile is pinned to the takbar. If the tile was already pinned, this will update the tile and return true. If pinning wasn't allowed or taskbar isn't supported, this will return false.
    public func requestPinSecondaryTileAsync(_ secondaryTile: WindowsUIStartScreen_SecondaryTile?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_itaskbarManager2.requestPinSecondaryTileAsync(secondaryTile))
    }

    /// Tries to unpin the secondary tile from taskbar. Requires user approval as described here
    /// - Parameter tileId: The TileId of the SecondaryTile you want to unpin.
    /// - Returns: A boolean representing whether the tile is not pinned to taskbar. If unpinning wasn't allowed, this returns false.
    public func tryUnpinSecondaryTileAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_itaskbarManager2.tryUnpinSecondaryTileAsync(tileId))
    }

    // MARK: Windows.UI.Shell.ITaskbarManagerStatics members

    /// Returns the TaskbarManager object active in the current process.
    /// - Returns: The active TaskbarManager object.
    public static func getDefault() throws -> WindowsUIShell_TaskbarManager {
        try COM.NullResult.unwrap(_itaskbarManagerStatics.getDefault())
    }

    // MARK: Implementation details

    private var _itaskbarManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIShell_ITaskbarManager2>? = nil

    internal var _itaskbarManager2: COM.COMInterop<CWinRT.SWRT_WindowsUIShell_ITaskbarManager2> {
        get throws {
            try _itaskbarManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIShell_ITaskbarManager2.iid).cast(to: CWinRT.SWRT_WindowsUIShell_ITaskbarManager2.self)
            }
        }
    }

    deinit {
        _itaskbarManager2_storage?.release()
    }

    private static var _itaskbarManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIShell_ITaskbarManagerStatics>? = nil

    internal static var _itaskbarManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIShell_ITaskbarManagerStatics> {
        get throws {
            try _itaskbarManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Shell.TaskbarManager", id: CWinRT.SWRT_WindowsUIShell_ITaskbarManagerStatics.iid)
            }
        }
    }
}