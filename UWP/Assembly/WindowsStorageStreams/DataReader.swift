// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Reads data from an input stream.
public final class WindowsStorageStreams_DataReader: WindowsRuntime.WinRTImport<WindowsStorageStreams_DataReaderProjection>, WindowsStorageStreams_IDataReaderProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Storage.Streams.IDataReaderFactory members

    public convenience init(_ inputStream: WindowsStorageStreams_IInputStream?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idataReaderFactory.createDataReader(inputStream)))
    }

    // MARK: Windows.Storage.Streams.IDataReader members

    /// Gets or sets the byte order of the data in the input stream.
    /// - Returns: One of the enumeration values.
    public var byteOrder: WindowsStorageStreams_ByteOrder {
        get throws {
            try _interop.get_ByteOrder()
        }
    }

    /// Gets or sets the byte order of the data in the input stream.
    /// - Returns: One of the enumeration values.
    public func byteOrder(_ value: WindowsStorageStreams_ByteOrder) throws {
        try _interop.put_ByteOrder(value)
    }

    /// Gets or sets the read options for the input stream.
    /// - Returns: One of the enumeration values.
    public var inputStreamOptions: WindowsStorageStreams_InputStreamOptions {
        get throws {
            try _interop.get_InputStreamOptions()
        }
    }

    /// Gets or sets the read options for the input stream.
    /// - Returns: One of the enumeration values.
    public func inputStreamOptions(_ value: WindowsStorageStreams_InputStreamOptions) throws {
        try _interop.put_InputStreamOptions(value)
    }

    /// Gets the size of the buffer that has not been read.
    /// - Returns: The size of the buffer that has not been read, in bytes.
    public var unconsumedBufferLength: Swift.UInt32 {
        get throws {
            try _interop.get_UnconsumedBufferLength()
        }
    }

    /// Gets or sets the Unicode character encoding for the input stream.
    /// - Returns: One of the enumeration values.
    public var unicodeEncoding: WindowsStorageStreams_UnicodeEncoding {
        get throws {
            try _interop.get_UnicodeEncoding()
        }
    }

    /// Gets or sets the Unicode character encoding for the input stream.
    /// - Returns: One of the enumeration values.
    public func unicodeEncoding(_ value: WindowsStorageStreams_UnicodeEncoding) throws {
        try _interop.put_UnicodeEncoding(value)
    }

    /// Reads a byte value from the input stream.
    /// - Returns: The value.
    public func readByte() throws -> Swift.UInt8 {
        try _interop.readByte()
    }

    /// Reads an array of byte values from the input stream.
    /// - Parameter value: The array that receives the byte values.
    public func readBytes(_ value: [Swift.UInt8]) throws {
        try _interop.readBytes(value)
    }

    /// Reads a buffer from the input stream.
    /// - Parameter length: The length of the buffer, in bytes.
    /// - Returns: The buffer.
    public func readBuffer(_ length: Swift.UInt32) throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_interop.readBuffer(length))
    }

    /// Reads a Boolean value from the input stream.
    /// - Returns: The value.
    public func readBoolean() throws -> Swift.Bool {
        try _interop.readBoolean()
    }

    /// Reads a GUID value from the input stream.
    /// - Returns: The value.
    public func readGuid() throws -> Foundation.UUID {
        try _interop.readGuid()
    }

    /// Reads a 16-bit integer value from the input stream.
    /// - Returns: The value.
    public func readInt16() throws -> Swift.Int16 {
        try _interop.readInt16()
    }

    /// Reads a 32-bit integer value from the input stream.
    /// - Returns: The value.
    public func readInt32() throws -> Swift.Int32 {
        try _interop.readInt32()
    }

    /// Reads a 64-bit integer value from the input stream.
    /// - Returns: The value.
    public func readInt64() throws -> Swift.Int64 {
        try _interop.readInt64()
    }

    /// Reads a 16-bit unsigned integer from the input stream.
    /// - Returns: The value.
    public func readUInt16() throws -> Swift.UInt16 {
        try _interop.readUInt16()
    }

    /// Reads a 32-bit unsigned integer from the input stream.
    /// - Returns: The value.
    public func readUInt32() throws -> Swift.UInt32 {
        try _interop.readUInt32()
    }

    /// Reads a 64-bit unsigned integer from the input stream.
    /// - Returns: The value.
    public func readUInt64() throws -> Swift.UInt64 {
        try _interop.readUInt64()
    }

    /// Reads a floating-point value from the input stream.
    /// - Returns: The value.
    public func readSingle() throws -> Swift.Float {
        try _interop.readSingle()
    }

    /// Reads a floating-point value from the input stream.
    /// - Returns: The value.
    public func readDouble() throws -> Swift.Double {
        try _interop.readDouble()
    }

    /// Reads a string value from the input stream.
    /// - Parameter codeUnitCount: The length of the string.
    /// - Returns: The value.
    public func readString(_ codeUnitCount: Swift.UInt32) throws -> Swift.String {
        try _interop.readString(codeUnitCount)
    }

    /// Reads a date and time value from the input stream.
    /// - Returns: The value.
    public func readDateTime() throws -> WindowsFoundation_DateTime {
        try _interop.readDateTime()
    }

    /// Reads a time-interval value from the input stream.
    /// - Returns: The value.
    public func readTimeSpan() throws -> WindowsFoundation_TimeSpan {
        try _interop.readTimeSpan()
    }

    /// Loads data from the input stream.
    /// - Parameter count: The count of bytes to load into the intermediate buffer.
    /// - Returns: The asynchronous load data request.
    public func loadAsync(_ count: Swift.UInt32) throws -> WindowsStorageStreams_DataReaderLoadOperation {
        try COM.NullResult.unwrap(_interop.loadAsync(count))
    }

    /// Detaches the buffer that is associated with the data reader. This is useful if you want to retain the buffer after you dispose the data reader.
    /// - Returns: The detached buffer.
    public func detachBuffer() throws -> WindowsStorageStreams_IBuffer {
        try COM.NullResult.unwrap(_interop.detachBuffer())
    }

    /// Detaches the stream that is associated with the data reader.
    /// - Returns: The detached stream.
    public func detachStream() throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_interop.detachStream())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the current stream and releases system resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Storage.Streams.IDataReaderStatics members

    /// Creates a new instance of the data reader with data from the specified buffer.
    /// - Parameter buffer: The buffer.
    /// - Returns: The data reader.
    public static func fromBuffer(_ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsStorageStreams_DataReader {
        try COM.NullResult.unwrap(_idataReaderStatics.fromBuffer(buffer))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _idataReaderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IDataReaderFactory>? = nil

    internal static var _idataReaderFactory: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IDataReaderFactory> {
        get throws {
            try _idataReaderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Streams.DataReader", id: CWinRT.SWRT_WindowsStorageStreams_IDataReaderFactory.iid)
            }
        }
    }

    private static var _idataReaderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IDataReaderStatics>? = nil

    internal static var _idataReaderStatics: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IDataReaderStatics> {
        get throws {
            try _idataReaderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Streams.DataReader", id: CWinRT.SWRT_WindowsStorageStreams_IDataReaderStatics.iid)
            }
        }
    }
}