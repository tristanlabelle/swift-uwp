// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Controls the appearance and behavior of a credential prompt.
public final class WindowsSecurityCredentialsUI_CredentialPickerOptions: WindowsRuntime.WinRTImport<WindowsSecurityCredentialsUI_CredentialPickerOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCredentialsUI_CredentialPickerOptionsProjection.self))
    }

    // MARK: Windows.Security.Credentials.UI.ICredentialPickerOptions members

    /// Gets or sets the option of whether the dialog box is displayed.
    /// - Returns: Gets or sets the option of always displaying the dialog box. The default value is False.
    public var alwaysDisplayDialog: Swift.Bool {
        get throws {
            try _interop.get_AlwaysDisplayDialog()
        }
    }

    /// Gets or sets the option of whether the dialog box is displayed.
    /// - Returns: Gets or sets the option of always displaying the dialog box. The default value is False.
    public func alwaysDisplayDialog(_ value: Swift.Bool) throws {
        try _interop.put_AlwaysDisplayDialog(value)
    }

    /// Gets or sets the authentication protocol.
    /// - Returns: Name of the authentication protocol to use for credential authentication. The default value is Negotiate.
    public var authenticationProtocol: WindowsSecurityCredentialsUI_AuthenticationProtocol {
        get throws {
            try _interop.get_AuthenticationProtocol()
        }
    }

    /// Gets or sets the authentication protocol.
    /// - Returns: Name of the authentication protocol to use for credential authentication. The default value is Negotiate.
    public func authenticationProtocol(_ value: WindowsSecurityCredentialsUI_AuthenticationProtocol) throws {
        try _interop.put_AuthenticationProtocol(value)
    }

    /// Gets or sets whether the caller wants to save the credentials.
    /// - Returns: Gets or sets whether the caller wants to save the credentials. The default value is False.
    public var callerSavesCredential: Swift.Bool {
        get throws {
            try _interop.get_CallerSavesCredential()
        }
    }

    /// Gets or sets whether the caller wants to save the credentials.
    /// - Returns: Gets or sets whether the caller wants to save the credentials. The default value is False.
    public func callerSavesCredential(_ value: Swift.Bool) throws {
        try _interop.put_CallerSavesCredential(value)
    }

    /// Gets or sets the caption text that is displayed to the user.
    /// - Returns: Text that appears in the message header of the dialog box. The default value is the caller's app name.
    public var caption: Swift.String {
        get throws {
            try _interop.get_Caption()
        }
    }

    /// Gets or sets the caption text that is displayed to the user.
    /// - Returns: Text that appears in the message header of the dialog box. The default value is the caller's app name.
    public func caption(_ value: Swift.String) throws {
        try _interop.put_Caption(value)
    }

    /// Gets or sets the option on saving credentials.
    /// - Returns: The option specifies the initial state of the dialog's "Save Credential" check box. The default value is clear (unchecked). This property is ignored if the caller specifies **Hidden** in the CredentialSaveOption enumeration.
    public var credentialSaveOption: WindowsSecurityCredentialsUI_CredentialSaveOption {
        get throws {
            try _interop.get_CredentialSaveOption()
        }
    }

    /// Gets or sets the option on saving credentials.
    /// - Returns: The option specifies the initial state of the dialog's "Save Credential" check box. The default value is clear (unchecked). This property is ignored if the caller specifies **Hidden** in the CredentialSaveOption enumeration.
    public func credentialSaveOption(_ value: WindowsSecurityCredentialsUI_CredentialSaveOption) throws {
        try _interop.put_CredentialSaveOption(value)
    }

    /// Gets or sets whether the authentication protocol is custom rather than a standard authentication protocol.
    /// - Returns: The authentication protocol is custom rather than a standard authentication protocol. The default value is none.
    public var customAuthenticationProtocol: Swift.String {
        get throws {
            try _interop.get_CustomAuthenticationProtocol()
        }
    }

    /// Gets or sets whether the authentication protocol is custom rather than a standard authentication protocol.
    /// - Returns: The authentication protocol is custom rather than a standard authentication protocol. The default value is none.
    public func customAuthenticationProtocol(_ value: Swift.String) throws {
        try _interop.put_CustomAuthenticationProtocol(value)
    }

    /// Gets or sets the error code.
    /// - Returns: If nonzero, represents a Win32 ERROR_* status value that identifies the error information to be formatted and displayed in the dialog box. The default value is ERROR_SUCCESS if no error occurred.
    public var errorCode: Swift.UInt32 {
        get throws {
            try _interop.get_ErrorCode()
        }
    }

    /// Gets or sets the error code.
    /// - Returns: If nonzero, represents a Win32 ERROR_* status value that identifies the error information to be formatted and displayed in the dialog box. The default value is ERROR_SUCCESS if no error occurred.
    public func errorCode(_ value: Swift.UInt32) throws {
        try _interop.put_ErrorCode(value)
    }

    /// Gets or sets the body of text that displays to the user.
    /// - Returns: Text that appears in the message body of the dialog box. The default value is "Enter credentials" or localized equivalent.
    public var message: Swift.String {
        get throws {
            try _interop.get_Message()
        }
    }

    /// Gets or sets the body of text that displays to the user.
    /// - Returns: Text that appears in the message body of the dialog box. The default value is "Enter credentials" or localized equivalent.
    public func message(_ value: Swift.String) throws {
        try _interop.put_Message(value)
    }

    /// Gets or sets whether to fill dialog box fields with previous credentials.
    /// - Returns: Determines whether dialog box fields are filled with previous credentials. The default value is not to prepopulate the fields.
    public var previousCredential: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PreviousCredential())
        }
    }

    /// Gets or sets whether to fill dialog box fields with previous credentials.
    /// - Returns: Determines whether dialog box fields are filled with previous credentials. The default value is not to prepopulate the fields.
    public func previousCredential(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_PreviousCredential(value)
    }

    /// Gets or sets the name of the target computer.
    /// - Returns: Name of the target computer. The default value is the caller's computer.
    public var targetName: Swift.String {
        get throws {
            try _interop.get_TargetName()
        }
    }

    /// Gets or sets the name of the target computer.
    /// - Returns: Name of the target computer. The default value is the caller's computer.
    public func targetName(_ value: Swift.String) throws {
        try _interop.put_TargetName(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Credentials.UI.CredentialPickerOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}