// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An object that describes what controls a session currently has enabled.
public final class WindowsMediaControl_GlobalSystemMediaTransportControlsSessionPlaybackControls: WindowsRuntime.WinRTImport<WindowsMediaControl_GlobalSystemMediaTransportControlsSessionPlaybackControlsProjection> {
    // MARK: Windows.Media.Control.IGlobalSystemMediaTransportControlsSessionPlaybackControls members

    /// Whether the session currently supports ChannelDown.
    /// - Returns: True if channel down is supported; otherwise, false.
    public var isChannelDownEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsChannelDownEnabled()
        }
    }

    /// Whether the session currently supports ChannelUp.
    /// - Returns: True if channel up is supported; otherwise, false.
    public var isChannelUpEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsChannelUpEnabled()
        }
    }

    /// Whether the session currently supports the fast forward command.
    /// - Returns: True if fast forward is supported; otherwise, false.
    public var isFastForwardEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsFastForwardEnabled()
        }
    }

    /// Whether the session currently supports the next command.
    /// - Returns: True if next is supported; otherwise, false.
    public var isNextEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsNextEnabled()
        }
    }

    /// Whether the session currently supports the pause command.
    /// - Returns: True if pause is supported; otherwise, false.
    public var isPauseEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPauseEnabled()
        }
    }

    /// Whether the session currently supports the Play command.
    /// - Returns: True if play is supported; otherwise, false.
    public var isPlayEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPlayEnabled()
        }
    }

    /// Whether the session currently supports the play pause toggle command (where play or pause is picked depending on state).
    /// - Returns: True if play pause toggle is supported; otherwise, false.
    public var isPlayPauseToggleEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPlayPauseToggleEnabled()
        }
    }

    /// Whether the session currently supports changing the playback position.
    /// - Returns: True if playback position is supported; otherwise, false.
    public var isPlaybackPositionEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPlaybackPositionEnabled()
        }
    }

    /// Whether the session currently supports changing the playback rate.
    /// - Returns: True if playback rate is supported; otherwise, false.
    public var isPlaybackRateEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPlaybackRateEnabled()
        }
    }

    /// Whether the session currently supports the previous command.
    /// - Returns: True if previous is supported; otherwise, false.
    public var isPreviousEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPreviousEnabled()
        }
    }

    /// Whether the session currently supports the record command.
    /// - Returns: True if record is supported; otherwise, false.
    public var isRecordEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRecordEnabled()
        }
    }

    /// Whether the session currently supports control of its repeat mode.
    /// - Returns: True if repeat mode is supported; otherwise, false.
    public var isRepeatEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRepeatEnabled()
        }
    }

    /// Whether the session currently supports the rewind command.
    /// - Returns: True if rewind is supported; otherwise, false.
    public var isRewindEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRewindEnabled()
        }
    }

    /// Gets a value indicating whether the session currently allows control of its shuffle state.
    /// - Returns: True if shuffle control is supported; otherwise, false.
    public var isShuffleEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsShuffleEnabled()
        }
    }

    /// Whether the session currently supports the stop command.
    /// - Returns: True if stop is supported; otherwise, false.
    public var isStopEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsStopEnabled()
        }
    }

    // MARK: Implementation details
}