// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a lamp device.
public final class WindowsDevicesLights_Lamp: WindowsRuntime.WinRTImport<WindowsDevicesLights_LampProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Lights.ILamp members

    /// Gets or sets a value indicating the current brightness level of the lamp, where 0.0 is completely off and 1.0 is maximum brightness.
    /// - Returns: A value indicating the current brightness level of the lamp.
    public var brightnessLevel: Swift.Float {
        get throws {
            try _interop.get_BrightnessLevel()
        }
    }

    /// Gets or sets a value indicating the current brightness level of the lamp, where 0.0 is completely off and 1.0 is maximum brightness.
    /// - Returns: A value indicating the current brightness level of the lamp.
    public func brightnessLevel(_ value: Swift.Float) throws {
        try _interop.put_BrightnessLevel(value)
    }

    /// Gets or sets the color of the lamp.
    /// - Returns: The color of the lamp.
    public var color: WindowsUI_Color {
        get throws {
            try _interop.get_Color()
        }
    }

    /// Gets or sets the color of the lamp.
    /// - Returns: The color of the lamp.
    public func color(_ value: WindowsUI_Color) throws {
        try _interop.put_Color(value)
    }

    /// Gets the DeviceInformation Id for a lamp device.
    /// - Returns: The DeviceInformation Id for a lamp device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets a value indicating whether you can set the Color property of the lamp device.
    /// - Returns: True if you can set the Color property of the lamp; otherwise, false.
    public var isColorSettable: Swift.Bool {
        get throws {
            try _interop.get_IsColorSettable()
        }
    }

    /// Gets a value indicating whether the lamp device is enabled.
    /// - Returns: True if the lamp is enabled; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Gets a value indicating whether the lamp device is enabled.
    /// - Returns: True if the lamp is enabled; otherwise, false.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsEnabled(value)
    }

    /// Occurs when the availability of the lamp device changes.
    public func availabilityChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesLights_Lamp?, WindowsDevicesLights_LampAvailabilityChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AvailabilityChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: availabilityChanged)
    }

    public func availabilityChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AvailabilityChanged(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases the lamp device.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Lights.ILampStatics members

    /// Returns the class selection string that you can use to enumerate lamp devices.
    /// - Returns: The class selection string for lamp devices.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ilampStatics.getDeviceSelector()
    }

    /// Gets a Lamp object representing the lamp device with the specified ID.
    /// - Parameter deviceId: The ID of the requested lamp device.
    /// - Returns: An asynchronous operation that returns a Lamp object upon successful completion.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesLights_Lamp?> {
        try COM.NullResult.unwrap(_ilampStatics.fromIdAsync(deviceId))
    }

    /// Gets a Lamp object representing the default lamp for the device.
    /// - Returns: An asynchronous operation that returns a Lamp object upon successful completion.
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesLights_Lamp?> {
        try COM.NullResult.unwrap(_ilampStatics.getDefaultAsync())
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _ilampStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLights_ILampStatics>? = nil

    internal static var _ilampStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLights_ILampStatics> {
        get throws {
            try _ilampStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Lights.Lamp", id: CWinRT.SWRT_WindowsDevicesLights_ILampStatics.iid)
            }
        }
    }
}