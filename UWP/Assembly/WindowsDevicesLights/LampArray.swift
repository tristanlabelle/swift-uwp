// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a LampArray device attached the system.  Currently, only HID LampArrays are supported.
public final class WindowsDevicesLights_LampArray: WindowsRuntime.WinRTImport<WindowsDevicesLights_LampArrayProjection> {
    // MARK: Windows.Devices.Lights.ILampArray members

    /// Gets the logical bounding box encompassing the LampArray.
    /// - Returns: The value of the bounding box.
    public var boundingBox: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_BoundingBox()
        }
    }

    /// Gets or sets the overall brightness of the LampArray, where 0.0 is completely off and 1.0 is maximum brightness.
    /// - Returns: The current brightness level of the LampArray. Default is 1.0.
    public var brightnessLevel: Swift.Double {
        get throws {
            try _interop.get_BrightnessLevel()
        }
    }

    /// Gets or sets the overall brightness of the LampArray, where 0.0 is completely off and 1.0 is maximum brightness.
    /// - Returns: The current brightness level of the LampArray. Default is 1.0.
    public func brightnessLevel(_ value: Swift.Double) throws {
        try _interop.put_BrightnessLevel(value)
    }

    /// Gets the plug and play (PnP) device identifier of the underlying LampArray device.
    /// - Returns: The plug and play (PnP) device identifier of the underlying LampArray device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// The hardware product Id of the underlying device.
    /// - Returns: The hardware product Id.
    public var hardwareProductId: Swift.UInt16 {
        get throws {
            try _interop.get_HardwareProductId()
        }
    }

    /// The hardware vendor Id of the underlying device.
    /// - Returns: The hardware vendor Id.
    public var hardwareVendorId: Swift.UInt16 {
        get throws {
            try _interop.get_HardwareVendorId()
        }
    }

    /// The hardware version of the underlying device.
    /// - Returns: The hardware version.
    public var hardwareVersion: Swift.UInt16 {
        get throws {
            try _interop.get_HardwareVersion()
        }
    }

    /// Gets a value indicating whether the LampArray device is connected to the system.
    /// - Returns: True if the LampArray is connected; otherwise, false.
    public var isConnected: Swift.Bool {
        get throws {
            try _interop.get_IsConnected()
        }
    }

    /// Gets or sets the enabled state.
    /// - Returns: True if the device is enabled; otherwise false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Gets or sets the enabled state.
    /// - Returns: True if the device is enabled; otherwise false.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsEnabled(value)
    }

    /// The LampArrayKind describing this device.
    /// - Returns: The LampArrayKind for the device.
    public var lampArrayKind: WindowsDevicesLights_LampArrayKind {
        get throws {
            try _interop.get_LampArrayKind()
        }
    }

    /// The number of lamps part of this LampArray.
    /// - Returns: The number of lamps in the LampArray.
    public var lampCount: Swift.Int32 {
        get throws {
            try _interop.get_LampCount()
        }
    }

    /// Minimal interval (required by the device) between the system sending two updates for any one lamp.  This is comparable to the effective device refresh rate.
    /// - Returns: The time interval between updates for a lamp.
    public var minUpdateInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MinUpdateInterval()
        }
    }

    /// Boolean indicating whether any lamp is mapped to a virtual key.
    /// - Returns: Returns true if any lamp on the LampArray is mapped to a virtual key.
    public var supportsVirtualKeys: Swift.Bool {
        get throws {
            try _interop.get_SupportsVirtualKeys()
        }
    }

    /// Fetches the LampInfo corresponding to the lamp index.
    /// - Parameter lampIndex: The index. Must be between 0 and LampCount - 1.
    /// - Returns: The LampInfo corresponding to lampIndex.
    public func getLampInfo(_ lampIndex: Swift.Int32) throws -> WindowsDevicesLights_LampInfo {
        try COM.NullResult.unwrap(_interop.getLampInfo(lampIndex))
    }

    /// Searches for all lamp indices that are bound to the specific VirtualKey
    /// - Parameter key: The VirtualKey.
    /// - Returns: Array of all lamp indices that are bound to the specific VirtualKey.  Array is empty if no lamp indices are found bound to the VirtualKey.
    public func getIndicesForKey(_ key: WindowsSystem_VirtualKey) throws -> [Swift.Int32] {
        try _interop.getIndicesForKey(key)
    }

    /// Searches for all lamp indices that are bound to the specified LampPurposes.
    /// - Parameter purposes: The LampPurposes.
    /// - Returns: Array of all lamp indices that are bound to the specific LampPurposes.  Array is empty if no lamp indices are found bound to the LampPurposes.
    public func getIndicesForPurposes(_ purposes: WindowsDevicesLights_LampPurposes) throws -> [Swift.Int32] {
        try _interop.getIndicesForPurposes(purposes)
    }

    /// Sets every lamp belonging to the LampArray to the desired color.
    /// - Parameter desiredColor: Desired color to set every lamp to.
    public func setColor(_ desiredColor: WindowsUI_Color) throws {
        try _interop.setColor(desiredColor)
    }

    /// Sets the lamp corresponding to the index to the desired color.
    /// - Parameter lampIndex: The lamp index.
    /// - Parameter desiredColor: The desired color.
    public func setColorForIndex(_ lampIndex: Swift.Int32, _ desiredColor: WindowsUI_Color) throws {
        try _interop.setColorForIndex(lampIndex, desiredColor)
    }

    /// Sets all lamps specified to the same color.
    /// - Parameter desiredColor: The desired color.
    /// - Parameter lampIndexes: Array of lamp indexes to set.
    public func setSingleColorForIndices(_ desiredColor: WindowsUI_Color, _ lampIndexes: [Swift.Int32]) throws {
        try _interop.setSingleColorForIndices(desiredColor, lampIndexes)
    }

    /// Sets the color for multiple lamps. Position within each array maps lamp index to desired color.
    /// - Parameter desiredColors: Array of desired colors.
    /// - Parameter lampIndexes: Array of corresponding lamp indexes to modify.
    public func setColorsForIndices(_ desiredColors: [WindowsUI_Color], _ lampIndexes: [Swift.Int32]) throws {
        try _interop.setColorsForIndices(desiredColors, lampIndexes)
    }

    /// Sets the color for all lamps that map to the key. Multiple lamps can map to the same key.
    /// - Parameter desiredColor: The desired color.
    /// - Parameter key: The VirtualKey.
    public func setColorsForKey(_ desiredColor: WindowsUI_Color, _ key: WindowsSystem_VirtualKey) throws {
        try _interop.setColorsForKey(desiredColor, key)
    }

    /// Sets the color of multiple lamps, corresponding to mapped keys.  Position within each array maps keys to desired color.
    /// - Parameter desiredColors: Array of desired colors.
    /// - Parameter keys: Array of corresponding VirtualKeys to modify.
    public func setColorsForKeys(_ desiredColors: [WindowsUI_Color], _ keys: [WindowsSystem_VirtualKey]) throws {
        try _interop.setColorsForKeys(desiredColors, keys)
    }

    /// Sets the color of multiple lamps, corresponding to LampPurposes.
    /// - Parameter desiredColor: Array of desired colors.
    /// - Parameter purposes: Array of corresponding LampPurposes to modify.
    public func setColorsForPurposes(_ desiredColor: WindowsUI_Color, _ purposes: WindowsDevicesLights_LampPurposes) throws {
        try _interop.setColorsForPurposes(desiredColor, purposes)
    }

    /// Asynchronously sends a message identified by the message identifer argument.
    /// - Parameter messageId: The identifer of a message.
    /// - Parameter message: An IBuffer representing the message.
    /// - Returns: An asynchronous object, which can be awaited.
    public func sendMessageAsync(_ messageId: Swift.Int32, _ message: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.sendMessageAsync(messageId, message))
    }

    /// Asynchronously retrieves an IBuffer representing the message identified by the message identifer argument.
    /// - Parameter messageId: The identifer of a message.
    /// - Returns: An asynchronous object which, on completion, contains the requested message.
    public func requestMessageAsync(_ messageId: Swift.Int32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.requestMessageAsync(messageId))
    }

    // MARK: Windows.Devices.Lights.ILampArrayStatics members

    /// Retrieves an Advanced Query Syntax (AQS) string encompassing all LampArray devices on the system.
    /// - Returns: An AQS string encompassing all LampArray devices on the system.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ilampArrayStatics.getDeviceSelector()
    }

    /// Retrieves a LampArray object asynchronously for the LampArray device that has the specified plug and play (PnP) device identifier/device instance path.
    /// - Parameter deviceId: The device identifier/device instance path of the device. To obtain the value, get the DeviceInformation.Id property value retrieved from DeviceWatcher
    /// - Returns: Returns an `IAsyncOperation(LampArray)` object that returns the results of the operation.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesLights_LampArray?> {
        try COM.NullResult.unwrap(_ilampArrayStatics.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private static var _ilampArrayStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLights_ILampArrayStatics>? = nil

    internal static var _ilampArrayStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesLights_ILampArrayStatics> {
        get throws {
            try _ilampArrayStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Lights.LampArray", id: CWinRT.SWRT_WindowsDevicesLights_ILampArrayStatics.iid)
            }
        }
    }
}