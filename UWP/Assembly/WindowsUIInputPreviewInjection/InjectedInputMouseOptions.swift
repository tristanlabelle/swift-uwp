// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the various options, or modifiers, used to simulate mouse input through InjectedInputMouseInfo.
public struct WindowsUIInputPreviewInjection_InjectedInputMouseOptions: OptionSet, Hashable, Codable {
    public var rawValue: Swift.UInt32

    public init(rawValue: Swift.UInt32 = 0) {
        self.rawValue = rawValue
    }

    /// No mouse modifier. Default.
    public static let none = Self()

    /// Move (coalesce move messages). If a mouse event occurs and the application has not yet processed the previous mouse event, the previous one is thrown away. See **MoveNoCoalesce**.
    public static let move = Self(rawValue: 1)

    /// Left mouse button pressed.
    public static let leftDown = Self(rawValue: 2)

    /// Left mouse button released.
    public static let leftUp = Self(rawValue: 4)

    /// Right mouse button pressed.
    public static let rightDown = Self(rawValue: 8)

    /// Right mouse button released.
    public static let rightUp = Self(rawValue: 16)

    /// Middle mouse button pressed.
    public static let middleDown = Self(rawValue: 32)

    /// Middle mouse button released.
    public static let middleUp = Self(rawValue: 64)

    /// XBUTTON pressed.
    public static let xdown = Self(rawValue: 128)

    /// XBUTTON released.
    public static let xup = Self(rawValue: 256)

    /// Mouse wheel.
    public static let wheel = Self(rawValue: 2048)

    /// Mouse tilt wheel.
    public static let hwheel = Self(rawValue: 4096)

    /// Move (do not coalesce move messages). The application processes all mouse events since the previously processed mouse event. See **Move**.
    public static let moveNoCoalesce = Self(rawValue: 8192)

    /// Map coordinates to the entire virtual desktop.
    public static let virtualDesk = Self(rawValue: 16384)

    /// Normalized absolute coordinates between 0 and 65,535. If the flag is not set, relative data (the change in position since the last reported position) is used.
    public static let absolute = Self(rawValue: 32768)
}