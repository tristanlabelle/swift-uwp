// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the various options, or modifiers, used to simulate pointer input through InjectedInputMouseInfo, InjectedInputPenInfo, and InjectedInputTouchInfo.
public struct WindowsUIInputPreviewInjection_InjectedInputPointerOptions: OptionSet, Hashable, Codable {
    public var rawValue: Swift.UInt32

    public init(rawValue: Swift.UInt32 = 0) {
        self.rawValue = rawValue
    }

    /// No pointer modifier. Default.
    public static let none = Self()

    /// Indicates the arrival of a new pointer.
    public static let new = Self(rawValue: 1)

    /// Indicates that the pointer continues to exist. When this flag is not set, it indicates the pointer has left detection range.
    public static let inRange = Self(rawValue: 2)

    /// Indicates that the pointer is in contact with the digitizer surface or area. When this flag is not set, it indicates a hovering pointer.
    public static let inContact = Self(rawValue: 4)

    /// Indicates a primary action.
    public static let firstButton = Self(rawValue: 16)

    /// Indicates a secondary action.
    public static let secondButton = Self(rawValue: 32)

    /// Indicates that the pointer can perform actions beyond those available to non-primary pointers. For example, when a primary pointer makes contact with a windowâ€™s surface, it might provide the window an opportunity to activate.
    public static let primary = Self(rawValue: 8192)

    /// Indicates a suggestion from the source device about whether the pointer represents an intended or accidental interaction, which is especially relevant for touch pointers where an accidental interaction (such as with the palm of the hand) can trigger input. The presence of this flag indicates that the source device has high confidence that this input is part of an intended interaction.
    public static let confidence = Self(rawValue: 16384)

    /// Indicates that the pointer is departing in an abnormal manner, such as when the system receives invalid input for the pointer or when a device with active pointers departs abruptly. If the application receiving the input is in a position to do so, it should treat the interaction as not completed and reverse any effects of the pointer.
    public static let canceled = Self(rawValue: 32768)

    /// Indicates that this pointer made contact with the digitizer surface. A touch pointer has this flag set when it is in contact with the digitizer surface.
    public static let pointerDown = Self(rawValue: 65536)

    /// Indicates a simple update that does not include pointer state changes.
    public static let update = Self(rawValue: 131072)

    /// Indicates that this pointer ended contact with the digitizer surface. A touch pointer has this flag set when it ends contact with the digitizer surface.
    public static let pointerUp = Self(rawValue: 262144)

    /// Indicates that this pointer was captured by (associated with) another element and the original element has lost capture.
    public static let captureChanged = Self(rawValue: 2097152)
}