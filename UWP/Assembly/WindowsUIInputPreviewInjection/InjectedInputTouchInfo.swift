// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents programmatically generated touch input.
public final class WindowsUIInputPreviewInjection_InjectedInputTouchInfo: WindowsRuntime.WinRTImport<WindowsUIInputPreviewInjection_InjectedInputTouchInfoProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIInputPreviewInjection_InjectedInputTouchInfoProjection.self))
    }

    // MARK: Windows.UI.Input.Preview.Injection.IInjectedInputTouchInfo members

    /// Gets or sets the bounding box that represents the touch contact area.
    /// - Returns: The contact area in device-independent pixel (DIP). The default is a 0-by-0 rectangle, centered around the pointer PixelLocation.
    public var contact: WindowsUIInputPreviewInjection_InjectedInputRectangle {
        get throws {
            try _interop.get_Contact()
        }
    }

    /// Gets or sets the bounding box that represents the touch contact area.
    /// - Returns: The contact area in device-independent pixel (DIP). The default is a 0-by-0 rectangle, centered around the pointer PixelLocation.
    public func contact(_ value: WindowsUIInputPreviewInjection_InjectedInputRectangle) throws {
        try _interop.put_Contact(value)
    }

    /// Gets or sets the counter-clockwise angle of rotation around the major axis of the pointer device (the z-axis, perpendicular to the surface of the digitizer).
    /// - Returns: The pointer orientation, with a value between 0 and 359, where 0 indicates a touch pointer aligned with the x-axis and pointing from left to right; increasing values indicate degrees of rotation in the counter-clockwise direction. The default is 0.
    public var orientation: Swift.Int32 {
        get throws {
            try _interop.get_Orientation()
        }
    }

    /// Gets or sets the counter-clockwise angle of rotation around the major axis of the pointer device (the z-axis, perpendicular to the surface of the digitizer).
    /// - Returns: The pointer orientation, with a value between 0 and 359, where 0 indicates a touch pointer aligned with the x-axis and pointing from left to right; increasing values indicate degrees of rotation in the counter-clockwise direction. The default is 0.
    public func orientation(_ value: Swift.Int32) throws {
        try _interop.put_Orientation(value)
    }

    /// Gets or sets basic pointer info common to touch input.
    /// - Returns: The pointer info.
    public var pointerInfo: WindowsUIInputPreviewInjection_InjectedInputPointerInfo {
        get throws {
            try _interop.get_PointerInfo()
        }
    }

    /// Gets or sets basic pointer info common to touch input.
    /// - Returns: The pointer info.
    public func pointerInfo(_ value: WindowsUIInputPreviewInjection_InjectedInputPointerInfo) throws {
        try _interop.put_PointerInfo(value)
    }

    /// Gets or sets the force exerted by the pointer device on the surface of the digitizer.
    /// - Returns: The touch contact force exerted on the digitizer surface, normalized to a range between 0 and 1024. The default is 0.
    public var pressure: Swift.Double {
        get throws {
            try _interop.get_Pressure()
        }
    }

    /// Gets or sets the force exerted by the pointer device on the surface of the digitizer.
    /// - Returns: The touch contact force exerted on the digitizer surface, normalized to a range between 0 and 1024. The default is 0.
    public func pressure(_ value: Swift.Double) throws {
        try _interop.put_Pressure(value)
    }

    /// Gets or sets the touch states used to simulate touch input.
    /// - Returns: The touch states used to simulate touch input.
    public var touchParameters: WindowsUIInputPreviewInjection_InjectedInputTouchParameters {
        get throws {
            try _interop.get_TouchParameters()
        }
    }

    /// Gets or sets the touch states used to simulate touch input.
    /// - Returns: The touch states used to simulate touch input.
    public func touchParameters(_ value: WindowsUIInputPreviewInjection_InjectedInputTouchParameters) throws {
        try _interop.put_TouchParameters(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Preview.Injection.InjectedInputTouchInfo", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}