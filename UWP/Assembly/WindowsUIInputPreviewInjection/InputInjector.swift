// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the virtual input device for sending the input data.
public final class WindowsUIInputPreviewInjection_InputInjector: WindowsRuntime.WinRTImport<WindowsUIInputPreviewInjection_InputInjectorProjection> {
    // MARK: Windows.UI.Input.Preview.Injection.IInputInjector members

    public func injectKeyboardInput(_ input: WindowsFoundationCollections_IIterable<WindowsUIInputPreviewInjection_InjectedInputKeyboardInfo?>?) throws {
        try _interop.injectKeyboardInput(input)
    }

    public func injectMouseInput(_ input: WindowsFoundationCollections_IIterable<WindowsUIInputPreviewInjection_InjectedInputMouseInfo?>?) throws {
        try _interop.injectMouseInput(input)
    }

    /// Initializes a virtual touch device that can synthesize input events and provide corresponding input data to the system.
    /// - Parameter visualMode: The type of visual feedback displayed for touch input injection.
    public func initializeTouchInjection(_ visualMode: WindowsUIInputPreviewInjection_InjectedInputVisualizationMode) throws {
        try _interop.initializeTouchInjection(visualMode)
    }

    public func injectTouchInput(_ input: WindowsFoundationCollections_IIterable<WindowsUIInputPreviewInjection_InjectedInputTouchInfo?>?) throws {
        try _interop.injectTouchInput(input)
    }

    /// Shuts down the virtual touch device created with InitializeTouchInjection.
    public func uninitializeTouchInjection() throws {
        try _interop.uninitializeTouchInjection()
    }

    /// Initializes a virtual pen device that can synthesize input events and provide corresponding input data to the system.
    /// - Parameter visualMode: The visual feedback mode for pen input injection.
    public func initializePenInjection(_ visualMode: WindowsUIInputPreviewInjection_InjectedInputVisualizationMode) throws {
        try _interop.initializePenInjection(visualMode)
    }

    /// Sends programmatically generated pen input to the system.
    /// - Parameter input: The pen input specified by InjectedInputPenInfo.
    public func injectPenInput(_ input: WindowsUIInputPreviewInjection_InjectedInputPenInfo?) throws {
        try _interop.injectPenInput(input)
    }

    /// Shuts down the virtual pen device created with InitializePenInjection.
    public func uninitializePenInjection() throws {
        try _interop.uninitializePenInjection()
    }

    /// Sends programmatically generated system shortcuts to the system.
    /// - Parameter shortcut: The system shortcuts.
    public func injectShortcut(_ shortcut: WindowsUIInputPreviewInjection_InjectedInputShortcut) throws {
        try _interop.injectShortcut(shortcut)
    }

    // MARK: Windows.UI.Input.Preview.Injection.IInputInjector2 members

    /// Initializes a virtual gamepad device that can synthesize input events and provide corresponding input data to the system.
    public func initializeGamepadInjection() throws {
        try _iinputInjector2.initializeGamepadInjection()
    }

    /// Sends programmatically generated gamepad input to the system.
    /// - Parameter input: The gamepad input specified by InjectedInputGamepadInfo.
    public func injectGamepadInput(_ input: WindowsUIInputPreviewInjection_InjectedInputGamepadInfo?) throws {
        try _iinputInjector2.injectGamepadInput(input)
    }

    /// Shuts down the virtual gamepad device created with InitializeGamepadInjection.
    public func uninitializeGamepadInjection() throws {
        try _iinputInjector2.uninitializeGamepadInjection()
    }

    // MARK: Windows.UI.Input.Preview.Injection.IInputInjectorStatics members

    /// Attempts to create a new instance of the InputInjector class.
    /// - Returns: If successful, returns a new instance of the InputInjector class. Otherwise, returns null.
    public static func tryCreate() throws -> WindowsUIInputPreviewInjection_InputInjector {
        try COM.NullResult.unwrap(_iinputInjectorStatics.tryCreate())
    }

    // MARK: Windows.UI.Input.Preview.Injection.IInputInjectorStatics2 members

    /// Attempts to create a new instance of the InputInjector class.
    /// - Returns: If successful, returns a new instance of the InputInjector class. Otherwise, returns null.
    public static func tryCreateForAppBroadcastOnly() throws -> WindowsUIInputPreviewInjection_InputInjector {
        try COM.NullResult.unwrap(_iinputInjectorStatics2.tryCreateForAppBroadcastOnly())
    }

    // MARK: Implementation details

    private var _iinputInjector2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjector2>? = nil

    internal var _iinputInjector2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjector2> {
        get throws {
            try _iinputInjector2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjector2.iid).cast(to: CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjector2.self)
            }
        }
    }

    deinit {
        _iinputInjector2_storage?.release()
    }

    private static var _iinputInjectorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics>? = nil

    internal static var _iinputInjectorStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics> {
        get throws {
            try _iinputInjectorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Preview.Injection.InputInjector", id: CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics.iid)
            }
        }
    }

    private static var _iinputInjectorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics2>? = nil

    internal static var _iinputInjectorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics2> {
        get throws {
            try _iinputInjectorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Preview.Injection.InputInjector", id: CWinRT.SWRT_WindowsUIInputPreviewInjection_IInputInjectorStatics2.iid)
            }
        }
    }
}