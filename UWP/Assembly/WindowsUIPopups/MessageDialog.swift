// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a dialog for showing messages to the user.
public final class WindowsUIPopups_MessageDialog: WindowsRuntime.WinRTImport<WindowsUIPopups_MessageDialogProjection> {
    // MARK: Windows.UI.Popups.IMessageDialogFactory members

    public convenience init(_ content: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imessageDialogFactory.create(content)))
    }

    public convenience init(_ content: Swift.String, _ title: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imessageDialogFactory.createWithTitle(content, title)))
    }

    // MARK: Windows.UI.Popups.IMessageDialog members

    /// Gets or sets the index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.
    /// - Returns: The index of the cancel command.
    public var cancelCommandIndex: Swift.UInt32 {
        get throws {
            try _interop.get_CancelCommandIndex()
        }
    }

    /// Gets or sets the index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.
    /// - Returns: The index of the cancel command.
    public func cancelCommandIndex(_ value: Swift.UInt32) throws {
        try _interop.put_CancelCommandIndex(value)
    }

    /// Gets an array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.
    /// - Returns: The commands.
    public var commands: WindowsFoundationCollections_IVector<WindowsUIPopups_IUICommand?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Commands())
        }
    }

    /// Gets or sets the message to be displayed to the user.
    /// - Returns: The message to be displayed to the user.
    public var content: Swift.String {
        get throws {
            try _interop.get_Content()
        }
    }

    /// Gets or sets the message to be displayed to the user.
    /// - Returns: The message to be displayed to the user.
    public func content(_ value: Swift.String) throws {
        try _interop.put_Content(value)
    }

    /// Gets or sets the index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.
    /// - Returns: The index of the default command.
    public var defaultCommandIndex: Swift.UInt32 {
        get throws {
            try _interop.get_DefaultCommandIndex()
        }
    }

    /// Gets or sets the index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.
    /// - Returns: The index of the default command.
    public func defaultCommandIndex(_ value: Swift.UInt32) throws {
        try _interop.put_DefaultCommandIndex(value)
    }

    /// Gets or sets the options for a MessageDialog.
    /// - Returns: The options for the dialog.
    public var options: WindowsUIPopups_MessageDialogOptions {
        get throws {
            try _interop.get_Options()
        }
    }

    /// Gets or sets the options for a MessageDialog.
    /// - Returns: The options for the dialog.
    public func options(_ value: WindowsUIPopups_MessageDialogOptions) throws {
        try _interop.put_Options(value)
    }

    /// Gets or sets the title to display on the dialog, if any.
    /// - Returns: The title to display on the dialog; or, an empty string if no title is set.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Gets or sets the title to display on the dialog, if any.
    /// - Returns: The title to display on the dialog; or, an empty string if no title is set.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Begins an asynchronous operation showing a dialog.
    /// - Returns: An object that represents the asynchronous operation. For more on the async pattern, see Asynchronous programming.
    public func showAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsUIPopups_IUICommand?> {
        try COM.NullResult.unwrap(_interop.showAsync())
    }

    // MARK: Implementation details

    private static var _imessageDialogFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIPopups_IMessageDialogFactory>? = nil

    internal static var _imessageDialogFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIPopups_IMessageDialogFactory> {
        get throws {
            try _imessageDialogFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Popups.MessageDialog", id: CWinRT.SWRT_WindowsUIPopups_IMessageDialogFactory.iid)
            }
        }
    }
}