// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a command separator in a context menu.
public final class WindowsUIPopups_UICommandSeparator: WindowsRuntime.WinRTImport<WindowsUIPopups_UICommandSeparatorProjection>, WindowsUIPopups_IUICommandProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIPopups_UICommandSeparatorProjection.self))
    }

    // MARK: Windows.UI.Popups.IUICommand members

    /// Gets or sets the identifier of the command separator.
    /// - Returns: The identifier of the command separator.
    public var id: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Id())
        }
    }

    /// Gets or sets the identifier of the command separator.
    /// - Returns: The identifier of the command separator.
    public func id(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_Id(value)
    }

    /// Gets or sets the handler for the event that is fired for the command separator.
    /// - Returns: The event handler for the command separator.
    public var invoked: WindowsUIPopups_UICommandInvokedHandler {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Invoked())
        }
    }

    /// Gets or sets the handler for the event that is fired for the command separator.
    /// - Returns: The event handler for the command separator.
    public func invoked(_ value: WindowsUIPopups_UICommandInvokedHandler?) throws {
        try _interop.put_Invoked(value)
    }

    /// Gets or sets the label for the command separator.
    /// - Returns: The label for the command separator.
    public var label: Swift.String {
        get throws {
            try _interop.get_Label()
        }
    }

    /// Gets or sets the label for the command separator.
    /// - Returns: The label for the command separator.
    public func label(_ value: Swift.String) throws {
        try _interop.put_Label(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Popups.UICommandSeparator", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}