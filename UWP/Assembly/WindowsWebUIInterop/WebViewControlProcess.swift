// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This class represents the process that one or more Windows.Web.UI.Interop.WebViewControl classes will live in.
public final class WindowsWebUIInterop_WebViewControlProcess: WindowsRuntime.WinRTImport<WindowsWebUIInterop_WebViewControlProcessProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsWebUIInterop_WebViewControlProcessProjection.self))
    }

    // MARK: Windows.Web.UI.Interop.IWebViewControlProcessFactory members

    public convenience init(_ processOptions: WindowsWebUIInterop_WebViewControlProcessOptions?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwebViewControlProcessFactory.createWithOptions(processOptions)))
    }

    // MARK: Windows.Web.UI.Interop.IWebViewControlProcess members

    /// Gets the enterprise ID of this proces.
    /// - Returns: The enterprise ID of this process.
    public var enterpriseId: Swift.String {
        get throws {
            try _interop.get_EnterpriseId()
        }
    }

    /// Gets a boolean value indicating whether the privateNetworkClientServer capability is enabled in this process.
    /// - Returns: A boolean value indicating whether the privateNetworkClientServer capability is enabled in this process.
    public var isPrivateNetworkClientServerCapabilityEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPrivateNetworkClientServerCapabilityEnabled()
        }
    }

    /// Gets the ID of this process.
    /// - Returns: The ID of this process.
    public var processId: Swift.UInt32 {
        get throws {
            try _interop.get_ProcessId()
        }
    }

    /// Fires when this process is terminated.
    public func processExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsWebUIInterop_WebViewControlProcess?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ProcessExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: processExited)
    }

    public func processExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ProcessExited(token)
    }

    /// Creates a Windows.Web.UI.Interop.WebViewControl within the context of this process.
    /// - Parameter hostWindowHandle: The parent window.
    /// - Parameter bounds: The initial bounds of the window.
    /// - Returns: An asynchronous operation that completes with a Windows.Web.UI.Interop.WebViewControl.
    public func createWebViewControlAsync(_ hostWindowHandle: Swift.Int64, _ bounds: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<WindowsWebUIInterop_WebViewControl?> {
        try COM.NullResult.unwrap(_interop.createWebViewControlAsync(hostWindowHandle, bounds))
    }

    /// Gets a vector containing all the Windows.Web.UI.Interop.WebViewControl objects hosted within this process.
    /// - Returns: A vector containing all the Windows.Web.UI.Interop.WebViewControl objects hosted within this process.
    public func getWebViewControls() throws -> WindowsFoundationCollections_IVectorView<WindowsWebUIInterop_WebViewControl?> {
        try COM.NullResult.unwrap(_interop.getWebViewControls())
    }

    /// Terminates the process.
    public func terminate() throws {
        try _interop.terminate()
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.UI.Interop.WebViewControlProcess", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iwebViewControlProcessFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebUIInterop_IWebViewControlProcessFactory>? = nil

    internal static var _iwebViewControlProcessFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebUIInterop_IWebViewControlProcessFactory> {
        get throws {
            try _iwebViewControlProcessFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.UI.Interop.WebViewControlProcess", id: CWinRT.SWRT_WindowsWebUIInterop_IWebViewControlProcessFactory.iid)
            }
        }
    }
}