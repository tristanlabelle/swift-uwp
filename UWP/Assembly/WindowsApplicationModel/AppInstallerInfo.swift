// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides read-only access to the URI of the .appinstaller XML file location. This allows app developers to retrieve the .appinstaller XML file location when needed by their app.
public final class WindowsApplicationModel_AppInstallerInfo: WindowsRuntime.WinRTImport<WindowsApplicationModel_AppInstallerInfoProjection> {
    // MARK: Windows.ApplicationModel.IAppInstallerInfo members

    /// Provides read-only access to the URI of the .appinstaller XML file location. This allows app developers to retrieve the .appinstaller XML file location when needed by their app.
    /// - Returns: The URI for the XML file location.
    public var uri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Uri())
        }
    }

    // MARK: Windows.ApplicationModel.IAppInstallerInfo2 members

    public var automaticBackgroundTask: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_AutomaticBackgroundTask()
        }
    }

    public var dependencyPackageUris: WindowsFoundationCollections_IVectorView<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallerInfo2.get_DependencyPackageUris())
        }
    }

    public var forceUpdateFromAnyVersion: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_ForceUpdateFromAnyVersion()
        }
    }

    public var hoursBetweenUpdateChecks: Swift.UInt32 {
        get throws {
            try _iappInstallerInfo2.get_HoursBetweenUpdateChecks()
        }
    }

    public var isAutoRepairEnabled: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_IsAutoRepairEnabled()
        }
    }

    public var lastChecked: WindowsFoundation_DateTime {
        get throws {
            try _iappInstallerInfo2.get_LastChecked()
        }
    }

    public var onLaunch: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_OnLaunch()
        }
    }

    public var optionalPackageUris: WindowsFoundationCollections_IVectorView<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallerInfo2.get_OptionalPackageUris())
        }
    }

    public var pausedUntil: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _iappInstallerInfo2.get_PausedUntil()
        }
    }

    public var policySource: WindowsApplicationModel_AppInstallerPolicySource {
        get throws {
            try _iappInstallerInfo2.get_PolicySource()
        }
    }

    public var repairUris: WindowsFoundationCollections_IVectorView<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallerInfo2.get_RepairUris())
        }
    }

    public var showPrompt: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_ShowPrompt()
        }
    }

    public var updateBlocksActivation: Swift.Bool {
        get throws {
            try _iappInstallerInfo2.get_UpdateBlocksActivation()
        }
    }

    public var updateUris: WindowsFoundationCollections_IVectorView<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallerInfo2.get_UpdateUris())
        }
    }

    public var version: WindowsApplicationModel_PackageVersion {
        get throws {
            try _iappInstallerInfo2.get_Version()
        }
    }

    // MARK: Implementation details

    private var _iappInstallerInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IAppInstallerInfo2>? = nil

    internal var _iappInstallerInfo2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IAppInstallerInfo2> {
        get throws {
            try _iappInstallerInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IAppInstallerInfo2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IAppInstallerInfo2.self)
            }
        }
    }

    deinit {
        _iappInstallerInfo2_storage?.release()
    }
}