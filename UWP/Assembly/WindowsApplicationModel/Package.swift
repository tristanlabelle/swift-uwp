// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about a package.
public final class WindowsApplicationModel_Package: WindowsRuntime.WinRTImport<WindowsApplicationModel_PackageProjection> {
    // MARK: Windows.ApplicationModel.IPackage members

    /// Gets the packages on which the current package depends.
    /// - Returns: The packages on which the current package depends.
    public var dependencies: WindowsFoundationCollections_IVectorView<WindowsApplicationModel_Package?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Dependencies())
        }
    }

    /// Gets the package identity of the current package.
    /// - Returns: The package identity.
    public var id: WindowsApplicationModel_PackageId {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Id())
        }
    }

    /// Gets the current package's path in the original install folder for the current package.
    /// - Returns: The current package's path in the original install folder for the current package.
    public var installedLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InstalledLocation())
        }
    }

    /// Indicates whether other packages can declare a dependency on this package.
    /// - Returns: True if other packages can declare a dependency on this package; otherwise false.
    public var isFramework: Swift.Bool {
        get throws {
            try _interop.get_IsFramework()
        }
    }

    // MARK: Windows.ApplicationModel.IPackage2 members

    /// Gets the description of the package.
    /// - Returns: The description of the package.
    public var description: Swift.String {
        get throws {
            try _ipackage2.get_Description()
        }
    }

    /// Gets the display name of the package.
    /// - Returns: The display name.
    public var displayName: Swift.String {
        get throws {
            try _ipackage2.get_DisplayName()
        }
    }

    /// Indicates whether the package is a bundle package.
    /// - Returns: A Boolean value that indicates whether the package is a bundle package. **TRUE** indicates that the package is a bundle package; otherwise **FALSE**.
    public var isBundle: Swift.Bool {
        get throws {
            try _ipackage2.get_IsBundle()
        }
    }

    /// Indicates whether the package is installed in development mode.
    /// - Returns: A Boolean value that indicates whether the package is installed in development mode. **TRUE** indicates that the package is installed in development mode; otherwise **FALSE**.
    public var isDevelopmentMode: Swift.Bool {
        get throws {
            try _ipackage2.get_IsDevelopmentMode()
        }
    }

    /// Indicates whether the package is a resource package.
    /// - Returns: A Boolean value that indicates whether the package is a resource package. **TRUE** indicates that the package is a resource package; otherwise **FALSE**.
    public var isResourcePackage: Swift.Bool {
        get throws {
            try _ipackage2.get_IsResourcePackage()
        }
    }

    /// Gets the logo of the package.
    /// - Returns: The logo of the package.
    public var logo: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ipackage2.get_Logo())
        }
    }

    /// Gets the publisher display name of the package.
    /// - Returns: The publisher display name.
    public var publisherDisplayName: Swift.String {
        get throws {
            try _ipackage2.get_PublisherDisplayName()
        }
    }

    // MARK: Windows.ApplicationModel.IPackage3 members

    /// Gets the date on which the application package was installed or last updated.
    /// - Returns: The date on which the application package was installed or last updated.
    public var installedDate: WindowsFoundation_DateTime {
        get throws {
            try _ipackage3.get_InstalledDate()
        }
    }

    /// Get the current status of the package for the user.
    /// - Returns: The current status of the package for the user.
    public var status: WindowsApplicationModel_PackageStatus {
        get throws {
            try COM.NullResult.unwrap(_ipackage3.get_Status())
        }
    }

    /// Enumerates the packaged apps on the device and returns the list asynchronously. Only apps included in the current package are returned.
    /// - Returns: A list of AppListEntry objects that specify the packaged apps along with their display name, description, and logo.
    public func getAppListEntriesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelCore_AppListEntry?>?> {
        try COM.NullResult.unwrap(_ipackage3.getAppListEntriesAsync())
    }

    // MARK: Windows.ApplicationModel.IPackageWithMetadata members

    /// Windows Phone only. Gets the date the application package was installed on the user's phone.
    /// - Returns: The date the application package was installed on the user's phone.
    public var installDate: WindowsFoundation_DateTime {
        get throws {
            try _ipackageWithMetadata.get_InstallDate()
        }
    }

    /// Windows Phone only. Returns a token that can be used to retrieve the thumbnail image associated with this application package.
    /// - Returns: A token that can be used to retrieve the thumbnail image associated with this application package.
    public func getThumbnailToken() throws -> Swift.String {
        try _ipackageWithMetadata.getThumbnailToken()
    }

    /// Windows Phone only. Launches the specified application.
    /// - Parameter parameters: The navigation URI that specifies the page to launch and optional parameters. Use an empty string to specify the default page for the app.
    public func launch(_ parameters: Swift.String) throws {
        try _ipackageWithMetadata.launch(parameters)
    }

    // MARK: Windows.ApplicationModel.IPackage4 members

    /// Indicates whether the package is optional.
    /// - Returns: Returns **true** if the package is optional; **false** otherwise.
    public var isOptional: Swift.Bool {
        get throws {
            try _ipackage4.get_IsOptional()
        }
    }

    /// How the app package is signed.
    /// - Returns: The signature kind.
    public var signatureKind: WindowsApplicationModel_PackageSignatureKind {
        get throws {
            try _ipackage4.get_SignatureKind()
        }
    }

    /// Ensures that the package has not been modified or tampered with before being loaded.
    /// - Returns: **true** - the package has not been modified; **false** otherwise.
    public func verifyContentIntegrityAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ipackage4.verifyContentIntegrityAsync())
    }

    // MARK: Windows.ApplicationModel.IPackage5 members

    /// Provides information about all of the package content groups in the app and their state, name, whether they are required, and so on.
    /// - Returns: A list of package content group objects.
    public func getContentGroupsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsApplicationModel_PackageContentGroup?>?> {
        try COM.NullResult.unwrap(_ipackage5.getContentGroupsAsync())
    }

    /// Provides information about the package content group such as its state, name, whether it is required, and so on.
    /// - Parameter name: The name of the content group to get.
    /// - Returns: A PackageContentGroup that contains information such as whether the content group is required, its state, the package associated with the content group, and so on.
    public func getContentGroupAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModel_PackageContentGroup?> {
        try COM.NullResult.unwrap(_ipackage5.getContentGroupAsync(name))
    }

    public func stageContentGroupsAsync(_ names: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsApplicationModel_PackageContentGroup?>?> {
        try COM.NullResult.unwrap(_ipackage5.stageContentGroupsAsync(names))
    }

    public func stageContentGroupsAsync(_ names: WindowsFoundationCollections_IIterable<Swift.String>?, _ moveToHeadOfQueue: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsApplicationModel_PackageContentGroup?>?> {
        try COM.NullResult.unwrap(_ipackage5.stageContentGroupsWithPriorityAsync(names, moveToHeadOfQueue))
    }

    /// Sets whether the package is in use or not.
    /// - Parameter inUse: **True** to specify that the package is in use; **false** otherwise.
    /// - Returns: **True** indicates that the operation to set whether the package is in use or not was successful; **false** otherwise.
    public func setInUseAsync(_ inUse: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ipackage5.setInUseAsync(inUse))
    }

    // MARK: Windows.ApplicationModel.IPackage6 members

    /// Returns the .appinstaller XML file location. Use this method when you need to retrieve the .appinstaller XML file location for your app. For example, this is useful if your app needs to share a URI to its associated .appinstaller file. You can optionally add arguments to the URI.
    /// - Returns: The .appinstaller XML file location.
    public func getAppInstallerInfo() throws -> WindowsApplicationModel_AppInstallerInfo {
        try COM.NullResult.unwrap(_ipackage6.getAppInstallerInfo())
    }

    /// The **CheckUpdateAvailabilityAsync** method allows developers to check for updates to the main app package listed in the .appinstaller file. It allows the developer to determine if the updates are required due to .appinstaller policy. This method currently only works for applications installed via .appinstaller files.
    /// - Returns: A PackageUpdateAvailabilityResult that indicates if an application has an update, and if the update is required.
    public func checkUpdateAvailabilityAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModel_PackageUpdateAvailabilityResult?> {
        try COM.NullResult.unwrap(_ipackage6.checkUpdateAvailabilityAsync())
    }

    // MARK: Windows.ApplicationModel.IPackage7 members

    /// Gets either the location of the installed folder or the mutable folder for the installed package, depending on whether the app is declared to be mutable in its package manifest.
    /// - Returns: The location of the installed folder or the mutable folder for the installed package, depending on whether the app is declared to be mutable in its package manifest.
    public var effectiveLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_ipackage7.get_EffectiveLocation())
        }
    }

    /// Gets the current package's path in the mutable folder for the installed package, if the app is declared to be mutable in its package manifest.
    /// - Returns: The location of the mutable folder for the installed package.
    public var mutableLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_ipackage7.get_MutableLocation())
        }
    }

    // MARK: Windows.ApplicationModel.IPackage8 members

    /// Gets the location of the machine-wide or per-user external folder specified in the package manifest for the current package, depending on how the app is installed.
    /// - Returns: The location of the machine-wide or per-user machine-wide external folder specified in the package manifest for the current package, depending on how the app is installed.
    public var effectiveExternalLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_ipackage8.get_EffectiveExternalLocation())
        }
    }

    /// Gets the location of the machine-wide or per-user external folder specified in the package manifest for the current package, depending on how the app is installed.
    /// - Returns: The location of the machine-wide or per-user machine-wide external folder specified in the package manifest for the current package, depending on how the app is installed.
    public var effectiveExternalPath: Swift.String {
        get throws {
            try _ipackage8.get_EffectiveExternalPath()
        }
    }

    /// Gets either the path of the installed folder or the mutable folder for the installed package, depending on whether the app is declared to be mutable in its package manifest.
    /// - Returns: The path of the installed folder or the mutable folder for the installed package, depending on whether the app is declared to be mutable in its package manifest.
    public var effectivePath: Swift.String {
        get throws {
            try _ipackage8.get_EffectivePath()
        }
    }

    /// Gets the current package's path in the original install folder for the current package.
    /// - Returns: The current package's path in the original install folder for the current package.
    public var installedPath: Swift.String {
        get throws {
            try _ipackage8.get_InstalledPath()
        }
    }

    /// Gets a value that indicates whether the application in the current package is a stub application.
    /// - Returns: **TRUE** indicates that the application is a stub application; otherwise, **FALSE**.
    public var isStub: Swift.Bool {
        get throws {
            try _ipackage8.get_IsStub()
        }
    }

    /// Gets the location of the machine-wide external folder specified in the package manifest for the current package.
    /// - Returns: The location of the machine-wide external folder specified in the package manifest for the current package.
    public var machineExternalLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_ipackage8.get_MachineExternalLocation())
        }
    }

    /// Gets the location of the machine-wide external folder specified in the package manifest for the current package.
    /// - Returns: The location of the machine-wide external folder specified in the package manifest for the current package.
    public var machineExternalPath: Swift.String {
        get throws {
            try _ipackage8.get_MachineExternalPath()
        }
    }

    /// Gets the current package's path in the mutable folder for the installed package, if the app is declared to be mutable in its package manifest.
    /// - Returns: The location of the mutable folder for the installed package.
    public var mutablePath: Swift.String {
        get throws {
            try _ipackage8.get_MutablePath()
        }
    }

    /// Gets the location of the per-user external folder specified in the package manifest for the current package.
    /// - Returns: The location of the per-user external folder specified in the package manifest for the current package.
    public var userExternalLocation: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_ipackage8.get_UserExternalLocation())
        }
    }

    /// Gets the path of the per-user external folder specified in the package manifest for the current package.
    /// - Returns: The path of the per-user external folder specified in the package manifest for the current package.
    public var userExternalPath: Swift.String {
        get throws {
            try _ipackage8.get_UserExternalPath()
        }
    }

    /// Gets the application logo of the package as a random access stream.
    /// - Parameter size: The size of the application logo to get.
    /// - Returns: A random access stream that contains the logo.
    public func getLogoAsRandomAccessStreamReference(_ size: WindowsFoundation_Size) throws -> WindowsStorageStreams_RandomAccessStreamReference {
        try COM.NullResult.unwrap(_ipackage8.getLogoAsRandomAccessStreamReference(size))
    }

    /// Enumerates the packaged apps on the device and returns the list synchronously. Only apps included in the current package are returned.
    /// - Returns: A list of AppListEntry objects that specify the packaged apps along with their display name, description, and logo.
    public func getAppListEntries() throws -> WindowsFoundationCollections_IVectorView<WindowsApplicationModelCore_AppListEntry?> {
        try COM.NullResult.unwrap(_ipackage8.getAppListEntries())
    }

    // MARK: Windows.ApplicationModel.IPackageStatics members

    /// Gets the package for the current app.
    /// - Returns: The package.
    public static var current: WindowsApplicationModel_Package {
        get throws {
            try COM.NullResult.unwrap(_ipackageStatics.get_Current())
        }
    }

    // MARK: Implementation details

    private var _ipackage2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage2>? = nil

    internal var _ipackage2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage2> {
        get throws {
            try _ipackage2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage2.self)
            }
        }
    }

    private var _ipackage3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage3>? = nil

    internal var _ipackage3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage3> {
        get throws {
            try _ipackage3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage3.self)
            }
        }
    }

    private var _ipackageWithMetadata_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackageWithMetadata>? = nil

    internal var _ipackageWithMetadata: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackageWithMetadata> {
        get throws {
            try _ipackageWithMetadata_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackageWithMetadata.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackageWithMetadata.self)
            }
        }
    }

    private var _ipackage4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage4>? = nil

    internal var _ipackage4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage4> {
        get throws {
            try _ipackage4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage4.self)
            }
        }
    }

    private var _ipackage5_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage5>? = nil

    internal var _ipackage5: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage5> {
        get throws {
            try _ipackage5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage5.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage5.self)
            }
        }
    }

    private var _ipackage6_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage6>? = nil

    internal var _ipackage6: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage6> {
        get throws {
            try _ipackage6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage6.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage6.self)
            }
        }
    }

    private var _ipackage7_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage7>? = nil

    internal var _ipackage7: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage7> {
        get throws {
            try _ipackage7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage7.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage7.self)
            }
        }
    }

    private var _ipackage8_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage8>? = nil

    internal var _ipackage8: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackage8> {
        get throws {
            try _ipackage8_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModel_IPackage8.iid).cast(to: CWinRT.SWRT_WindowsApplicationModel_IPackage8.self)
            }
        }
    }

    deinit {
        _ipackage2_storage?.release()
        _ipackage3_storage?.release()
        _ipackageWithMetadata_storage?.release()
        _ipackage4_storage?.release()
        _ipackage5_storage?.release()
        _ipackage6_storage?.release()
        _ipackage7_storage?.release()
        _ipackage8_storage?.release()
    }

    private static var _ipackageStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackageStatics>? = nil

    internal static var _ipackageStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModel_IPackageStatics> {
        get throws {
            try _ipackageStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Package", id: CWinRT.SWRT_WindowsApplicationModel_IPackageStatics.iid)
            }
        }
    }
}