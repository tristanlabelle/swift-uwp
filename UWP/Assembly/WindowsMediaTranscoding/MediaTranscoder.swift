// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Transcodes audio and video files.
public final class WindowsMediaTranscoding_MediaTranscoder: WindowsRuntime.WinRTImport<WindowsMediaTranscoding_MediaTranscoderProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaTranscoding_MediaTranscoderProjection.self))
    }

    // MARK: Windows.Media.Transcoding.IMediaTranscoder members

    /// Specifies whether the media transcoder always re-encodes the source.
    /// - Returns: **true** if the media transcoder always re-encodes the source; otherwise **false**. The default value is **false**.
    public var alwaysReencode: Swift.Bool {
        get throws {
            try _interop.get_AlwaysReencode()
        }
    }

    /// Specifies whether the media transcoder always re-encodes the source.
    /// - Returns: **true** if the media transcoder always re-encodes the source; otherwise **false**. The default value is **false**.
    public func alwaysReencode(_ value: Swift.Bool) throws {
        try _interop.put_AlwaysReencode(value)
    }

    /// Specifies whether hardware acceleration is enabled.
    /// - Returns: Set to **true** if enabled, otherwise **false**.
    public var hardwareAccelerationEnabled: Swift.Bool {
        get throws {
            try _interop.get_HardwareAccelerationEnabled()
        }
    }

    /// Specifies whether hardware acceleration is enabled.
    /// - Returns: Set to **true** if enabled, otherwise **false**.
    public func hardwareAccelerationEnabled(_ value: Swift.Bool) throws {
        try _interop.put_HardwareAccelerationEnabled(value)
    }

    /// Gets or sets the time interval to trim from the start of the output.
    /// - Returns: A TimeSpan structure that contains the time interval.
    public var trimStartTime: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TrimStartTime()
        }
    }

    /// Gets or sets the time interval to trim from the start of the output.
    /// - Returns: A TimeSpan structure that contains the time interval.
    public func trimStartTime(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_TrimStartTime(value)
    }

    /// Gets or sets the time interval to trim from the end of the output.
    /// - Returns: A TimeSpan structure that contains the time interval.
    public var trimStopTime: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TrimStopTime()
        }
    }

    /// Gets or sets the time interval to trim from the end of the output.
    /// - Returns: A TimeSpan structure that contains the time interval.
    public func trimStopTime(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_TrimStopTime(value)
    }

    /// Adds the specified audio effect.
    /// - Parameter activatableClassId: The identifier of the audio effect.
    public func addAudioEffect(_ activatableClassId: Swift.String) throws {
        try _interop.addAudioEffect(activatableClassId)
    }

    /// Adds the specified audio effect with configuration properties, and indicates whether the effect is required.
    /// - Parameter activatableClassId: The identifier of the audio effect.
    /// - Parameter effectRequired: Indicates whether the audio effect is required.
    /// - Parameter configuration: Configuration properties for the audio effect.
    public func addAudioEffect(_ activatableClassId: Swift.String, _ effectRequired: Swift.Bool, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.addAudioEffectWithSettings(activatableClassId, effectRequired, configuration)
    }

    /// Adds the specified video effect.
    /// - Parameter activatableClassId: The identifier of the video effect.
    public func addVideoEffect(_ activatableClassId: Swift.String) throws {
        try _interop.addVideoEffect(activatableClassId)
    }

    /// Adds the specified video effect with configuration properties and indicates whether the effect is required.
    /// - Parameter activatableClassId: The identifier of the video effect.
    /// - Parameter effectRequired: Indicates whether the video effect is required.
    /// - Parameter configuration: Configuration properties for the video effect.
    public func addVideoEffect(_ activatableClassId: Swift.String, _ effectRequired: Swift.Bool, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.addVideoEffectWithSettings(activatableClassId, effectRequired, configuration)
    }

    /// Removes all audio and video effects from the transcode session.
    public func clearEffects() throws {
        try _interop.clearEffects()
    }

    /// Asynchronously initializes the trancode operation on the specified file and returns a PrepareTranscodeResult object which can be used to start the transcode operation.
    /// - Parameter source: The source file.
    /// - Parameter destination: The destination file.
    /// - Parameter profile: The profile to use for the operation.
    /// - Returns: When this method completes, a PrepareTranscodeResult object is returned which can be used to start the transcode.
    public func prepareFileTranscodeAsync(_ source: WindowsStorage_IStorageFile?, _ destination: WindowsStorage_IStorageFile?, _ profile: WindowsMediaMediaProperties_MediaEncodingProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaTranscoding_PrepareTranscodeResult?> {
        try COM.NullResult.unwrap(_interop.prepareFileTranscodeAsync(source, destination, profile))
    }

    /// Asynchronously initializes the trancode operation on the specified stream and returns a PrepareTranscodeResult object which can be used to start the transcode operation.
    /// - Parameter source: The source stream.
    /// - Parameter destination: The destination stream.
    /// - Parameter profile: The profile to use for the operation.
    /// - Returns: When this method completes, a PrepareTranscodeResult object is returned which can be used to start the transcode.
    public func prepareStreamTranscodeAsync(_ source: WindowsStorageStreams_IRandomAccessStream?, _ destination: WindowsStorageStreams_IRandomAccessStream?, _ profile: WindowsMediaMediaProperties_MediaEncodingProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaTranscoding_PrepareTranscodeResult?> {
        try COM.NullResult.unwrap(_interop.prepareStreamTranscodeAsync(source, destination, profile))
    }

    // MARK: Windows.Media.Transcoding.IMediaTranscoder2 members

    /// Gets or sets the video processing algorithm which will be used for transcoding.
    /// - Returns: The video processing algorithm.
    public var videoProcessingAlgorithm: WindowsMediaTranscoding_MediaVideoProcessingAlgorithm {
        get throws {
            try _imediaTranscoder2.get_VideoProcessingAlgorithm()
        }
    }

    /// Gets or sets the video processing algorithm which will be used for transcoding.
    /// - Returns: The video processing algorithm.
    public func videoProcessingAlgorithm(_ value: WindowsMediaTranscoding_MediaVideoProcessingAlgorithm) throws {
        try _imediaTranscoder2.put_VideoProcessingAlgorithm(value)
    }

    /// Asynchronously initializes the trancode operation on the specified media source and returns a PrepareTranscodeResult object which can be used to start the transcode operation.
    /// - Parameter source: The media source to perform the transcode operation on.
    /// - Parameter destination: The destination stream for the transcoded media data.
    /// - Parameter profile: The profile to use for the operation.
    /// - Returns: When this method completes, a PrepareTranscodeResult object is returned which can be used to start the transcode.
    public func prepareMediaStreamSourceTranscodeAsync(_ source: WindowsMediaCore_IMediaSource?, _ destination: WindowsStorageStreams_IRandomAccessStream?, _ profile: WindowsMediaMediaProperties_MediaEncodingProfile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaTranscoding_PrepareTranscodeResult?> {
        try COM.NullResult.unwrap(_imediaTranscoder2.prepareMediaStreamSourceTranscodeAsync(source, destination, profile))
    }

    // MARK: Implementation details

    private var _imediaTranscoder2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaTranscoding_IMediaTranscoder2>? = nil

    internal var _imediaTranscoder2: COM.COMInterop<CWinRT.SWRT_WindowsMediaTranscoding_IMediaTranscoder2> {
        get throws {
            try _imediaTranscoder2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaTranscoding_IMediaTranscoder2.iid).cast(to: CWinRT.SWRT_WindowsMediaTranscoding_IMediaTranscoder2.self)
            }
        }
    }

    deinit {
        _imediaTranscoder2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Transcoding.MediaTranscoder", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}