// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a numeric control for a given HID device.
public final class WindowsDevicesHumanInterfaceDevice_HidNumericControlDescription: WindowsRuntime.WinRTImport<WindowsDevicesHumanInterfaceDevice_HidNumericControlDescriptionProjection> {
    // MARK: Windows.Devices.HumanInterfaceDevice.IHidNumericControlDescription members

    /// Gets a Boolean value which indicates whether the control supports a null, or out-of-range, value.
    /// - Returns: True, if the control supports a null value; otherwise, false.
    public var hasNull: Swift.Bool {
        get throws {
            try _interop.get_HasNull()
        }
    }

    /// Gets the identifier for a given numeric control.
    /// - Returns: Identifies the control.
    public var id: Swift.UInt32 {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a value indicating whether the given numeric control values are absolute or relative (change in value from that previously reported).
    /// - Returns: True, if the values are absolute; false if the values are relative.
    public var isAbsolute: Swift.Bool {
        get throws {
            try _interop.get_IsAbsolute()
        }
    }

    /// Gets the highest possible value for the given control.
    /// - Returns: The signed upper bound.
    public var logicalMaximum: Swift.Int32 {
        get throws {
            try _interop.get_LogicalMaximum()
        }
    }

    /// Gets the lowest possible value for the given control.
    /// - Returns: The signed lower bound.
    public var logicalMinimum: Swift.Int32 {
        get throws {
            try _interop.get_LogicalMinimum()
        }
    }

    /// Gets the parent collections for a given numeric control.
    /// - Returns: A vector of **HidCollection** objects.
    public var parentCollections: WindowsFoundationCollections_IVectorView<WindowsDevicesHumanInterfaceDevice_HidCollection?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ParentCollections())
        }
    }

    /// Gets the highest possible value for the given control after scaling is applied to the LogicalMaximum  value.
    /// - Returns: The signed upper bound.
    public var physicalMaximum: Swift.Int32 {
        get throws {
            try _interop.get_PhysicalMaximum()
        }
    }

    /// Gets the lowest possible value for the given control after scaling is applied to the LogicalMinimum value.
    /// - Returns: The signed lower bound.
    public var physicalMinimum: Swift.Int32 {
        get throws {
            try _interop.get_PhysicalMinimum()
        }
    }

    /// Gets the number of reports associated with the given control.
    /// - Returns: The number of reports.
    public var reportCount: Swift.UInt32 {
        get throws {
            try _interop.get_ReportCount()
        }
    }

    /// Gets the report ID of the HID report that contains the usage or usage range for the given numeric control.
    /// - Returns: The report identifier.
    public var reportId: Swift.UInt16 {
        get throws {
            try _interop.get_ReportId()
        }
    }

    /// Gets the size of the data field for the usage in a report.
    /// - Returns: The data field size (in bits).
    public var reportSize: Swift.UInt32 {
        get throws {
            try _interop.get_ReportSize()
        }
    }

    /// Gets the type of HID report associated with the given numeric control.
    /// - Returns: One of the report types: HidFeatureReport, HidInputReport, or HidOutputReport.
    public var reportType: WindowsDevicesHumanInterfaceDevice_HidReportType {
        get throws {
            try _interop.get_ReportType()
        }
    }

    /// Specifies the units of the usage, as described by the USB HID Standard.
    /// - Returns: The usage unit.
    public var unit: Swift.UInt32 {
        get throws {
            try _interop.get_Unit()
        }
    }

    /// Gets the unit exponent for the given numeric control.
    /// - Returns: The unit exponent.
    public var unitExponent: Swift.UInt32 {
        get throws {
            try _interop.get_UnitExponent()
        }
    }

    /// Gets the usage identifier associated with the given numeric control.
    /// - Returns: The usage identifierl.
    public var usageId: Swift.UInt16 {
        get throws {
            try _interop.get_UsageId()
        }
    }

    /// Gets the usage page associated with the given numeric control.
    /// - Returns: The usage page.
    public var usagePage: Swift.UInt16 {
        get throws {
            try _interop.get_UsagePage()
        }
    }

    // MARK: Implementation details
}