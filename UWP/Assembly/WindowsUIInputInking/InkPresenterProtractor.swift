// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a visual stencil, in the form of a protractor for drawing arcs and curves, displayed as a semi-transparent overlay on an InkCanvas.
public final class WindowsUIInputInking_InkPresenterProtractor: WindowsRuntime.WinRTImport<WindowsUIInputInking_InkPresenterProtractorProjection>, WindowsUIInputInking_IInkPresenterStencilProtocol {
    // MARK: Windows.UI.Input.Inking.IInkPresenterProtractorFactory members

    public convenience init(_ inkPresenter: WindowsUIInputInking_InkPresenter?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iinkPresenterProtractorFactory.create(inkPresenter)))
    }

    // MARK: Windows.UI.Input.Inking.IInkPresenterProtractor members

    /// Gets or sets the color of the rays and horizontal marks for the protractor stencil. 
    /// - Returns: The specified color.
    public var accentColor: WindowsUI_Color {
        get throws {
            try _interop.get_AccentColor()
        }
    }

    /// Gets or sets the color of the rays and horizontal marks for the protractor stencil. 
    /// - Returns: The specified color.
    public func accentColor(_ value: WindowsUI_Color) throws {
        try _interop.put_AccentColor(value)
    }

    /// Gets or sets whether the rays are displayed on the protractor stencil. 
    /// - Returns: **true**, if the rays are visible. Otherwise, **false**.
    public var areRaysVisible: Swift.Bool {
        get throws {
            try _interop.get_AreRaysVisible()
        }
    }

    /// Gets or sets whether the rays are displayed on the protractor stencil. 
    /// - Returns: **true**, if the rays are visible. Otherwise, **false**.
    public func areRaysVisible(_ value: Swift.Bool) throws {
        try _interop.put_AreRaysVisible(value)
    }

    /// Gets or sets whether the tick marks are displayed on the protractor stencil. 
    /// - Returns: **true**, if the tick marks are visible. Otherwise, **false**.
    public var areTickMarksVisible: Swift.Bool {
        get throws {
            try _interop.get_AreTickMarksVisible()
        }
    }

    /// Gets or sets whether the tick marks are displayed on the protractor stencil. 
    /// - Returns: **true**, if the tick marks are visible. Otherwise, **false**.
    public func areTickMarksVisible(_ value: Swift.Bool) throws {
        try _interop.put_AreTickMarksVisible(value)
    }

    /// Gets or sets whether the numerical angle is displayed on the protractor stencil. 
    /// - Returns: **true**, if the angle readout is visible. Otherwise, **false**.
    public var isAngleReadoutVisible: Swift.Bool {
        get throws {
            try _interop.get_IsAngleReadoutVisible()
        }
    }

    /// Gets or sets whether the numerical angle is displayed on the protractor stencil. 
    /// - Returns: **true**, if the angle readout is visible. Otherwise, **false**.
    public func isAngleReadoutVisible(_ value: Swift.Bool) throws {
        try _interop.put_IsAngleReadoutVisible(value)
    }

    /// Gets or sets whether the center mark is displayed on the protractor stencil. 
    /// - Returns: **true**, if the center mark is visible. Otherwise, **false**.
    public var isCenterMarkerVisible: Swift.Bool {
        get throws {
            try _interop.get_IsCenterMarkerVisible()
        }
    }

    /// Gets or sets whether the center mark is displayed on the protractor stencil. 
    /// - Returns: **true**, if the center mark is visible. Otherwise, **false**.
    public func isCenterMarkerVisible(_ value: Swift.Bool) throws {
        try _interop.put_IsCenterMarkerVisible(value)
    }

    /// Gets or sets whether the protractor stencil can be resized.
    /// - Returns: **true**, if the stencil can be resized. Otherwise, **false**.
    public var isResizable: Swift.Bool {
        get throws {
            try _interop.get_IsResizable()
        }
    }

    /// Gets or sets whether the protractor stencil can be resized.
    /// - Returns: **true**, if the stencil can be resized. Otherwise, **false**.
    public func isResizable(_ value: Swift.Bool) throws {
        try _interop.put_IsResizable(value)
    }

    /// Gets or sets the radial size of the protractor.
    /// - Returns: The radial size, in Device Independent Pixels (DIPs).
    public var radius: Swift.Double {
        get throws {
            try _interop.get_Radius()
        }
    }

    /// Gets or sets the radial size of the protractor.
    /// - Returns: The radial size, in Device Independent Pixels (DIPs).
    public func radius(_ value: Swift.Double) throws {
        try _interop.put_Radius(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkPresenterStencil members

    /// Gets or sets the background color of the InkPresenterProtractor.
    /// - Returns: The background color of the protractor as an ARGB value. The default is (255, 230, 230, 230).
    public var backgroundColor: WindowsUI_Color {
        get throws {
            try _iinkPresenterStencil.get_BackgroundColor()
        }
    }

    /// Gets or sets the background color of the InkPresenterProtractor.
    /// - Returns: The background color of the protractor as an ARGB value. The default is (255, 230, 230, 230).
    public func backgroundColor(_ value: WindowsUI_Color) throws {
        try _iinkPresenterStencil.put_BackgroundColor(value)
    }

    /// Gets or sets the color of the foreground elements on an InkPresenterProtractor.
    /// - Returns: The foreground color of the protractor as an ARGB value. The default is (255, 0, 0, 0).
    public var foregroundColor: WindowsUI_Color {
        get throws {
            try _iinkPresenterStencil.get_ForegroundColor()
        }
    }

    /// Gets or sets the color of the foreground elements on an InkPresenterProtractor.
    /// - Returns: The foreground color of the protractor as an ARGB value. The default is (255, 0, 0, 0).
    public func foregroundColor(_ value: WindowsUI_Color) throws {
        try _iinkPresenterStencil.put_ForegroundColor(value)
    }

    /// Gets or sets whether the protractor stencil is visible.
    /// - Returns: **true** if the ruler is visible. Otherwise, **false**.
    public var isVisible: Swift.Bool {
        get throws {
            try _iinkPresenterStencil.get_IsVisible()
        }
    }

    /// Gets or sets whether the protractor stencil is visible.
    /// - Returns: **true** if the ruler is visible. Otherwise, **false**.
    public func isVisible(_ value: Swift.Bool) throws {
        try _iinkPresenterStencil.put_IsVisible(value)
    }

    /// Gets the type of stencil to display on the InkCanvas.
    /// - Returns: The type of stencil.
    public var kind: WindowsUIInputInking_InkPresenterStencilKind {
        get throws {
            try _iinkPresenterStencil.get_Kind()
        }
    }

    /// Gets or sets the position and rotation angle of the protractor stencil within the 2-D coordinate space of the InkCanvas.
    /// - Returns: The position and angle of the stencil as a 3*2 floating point matrix.The default position is the origin of the InkCanvas. The default rotation angle is 0 degrees.
    public var transform: WindowsFoundationNumerics_Matrix3x2 {
        get throws {
            try _iinkPresenterStencil.get_Transform()
        }
    }

    /// Gets or sets the position and rotation angle of the protractor stencil within the 2-D coordinate space of the InkCanvas.
    /// - Returns: The position and angle of the stencil as a 3*2 floating point matrix.The default position is the origin of the InkCanvas. The default rotation angle is 0 degrees.
    public func transform(_ value: WindowsFoundationNumerics_Matrix3x2) throws {
        try _iinkPresenterStencil.put_Transform(value)
    }

    // MARK: Implementation details

    private var _iinkPresenterStencil_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenterStencil>? = nil

    internal var _iinkPresenterStencil: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenterStencil> {
        get throws {
            try _iinkPresenterStencil_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkPresenterStencil.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkPresenterStencil.self)
            }
        }
    }

    deinit {
        _iinkPresenterStencil_storage?.release()
    }

    private static var _iinkPresenterProtractorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenterProtractorFactory>? = nil

    internal static var _iinkPresenterProtractorFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenterProtractorFactory> {
        get throws {
            try _iinkPresenterProtractorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Inking.InkPresenterProtractor", id: CWinRT.SWRT_WindowsUIInputInking_IInkPresenterProtractorFactory.iid)
            }
        }
    }
}