// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides properties, methods, and events for managing the input, processing, and rendering of ink input (standard and modified) for an InkCanvas control.
public final class WindowsUIInputInking_InkPresenter: WindowsRuntime.WinRTImport<WindowsUIInputInking_InkPresenterProjection> {
    // MARK: Windows.UI.Input.Inking.IInkPresenter members

    /// Gets or sets the input device type from which input data is collected by the InkPresenter to construct and render an InkStroke. The default is Pen.
    /// - Returns: The input device types.
    public var inputDeviceTypes: WindowsUICore_CoreInputDeviceTypes {
        get throws {
            try _interop.get_InputDeviceTypes()
        }
    }

    /// Gets or sets the input device type from which input data is collected by the InkPresenter to construct and render an InkStroke. The default is Pen.
    /// - Returns: The input device types.
    public func inputDeviceTypes(_ value: WindowsUICore_CoreInputDeviceTypes) throws {
        try _interop.put_InputDeviceTypes(value)
    }

    /// Gets how input is processed by the InkPresenter object.
    /// - Returns: The input behavior.
    public var inputProcessingConfiguration: WindowsUIInputInking_InkInputProcessingConfiguration {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InputProcessingConfiguration())
        }
    }

    /// Gets or sets whether input is enabled for inking.
    /// - Returns: **true** if input is enabled for inking. Otherwise, **false**.
    public var isInputEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsInputEnabled()
        }
    }

    /// Gets or sets whether input is enabled for inking.
    /// - Returns: **true** if input is enabled for inking. Otherwise, **false**.
    public func isInputEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsInputEnabled(value)
    }

    /// Gets or sets an InkStrokeContainer object to store and manage the collection of InkStroke objects rendered by the InkPresenter.
    /// - Returns: Stores and manages one or more InkStroke objects.
    public var strokeContainer: WindowsUIInputInking_InkStrokeContainer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_StrokeContainer())
        }
    }

    /// Gets or sets an InkStrokeContainer object to store and manage the collection of InkStroke objects rendered by the InkPresenter.
    /// - Returns: Stores and manages one or more InkStroke objects.
    public func strokeContainer(_ value: WindowsUIInputInking_InkStrokeContainer?) throws {
        try _interop.put_StrokeContainer(value)
    }

    /// Gets an InkStrokeInput object for managing ink input events.
    /// - Returns: The ink input.
    public var strokeInput: WindowsUIInputInking_InkStrokeInput {
        get throws {
            try COM.NullResult.unwrap(_interop.get_StrokeInput())
        }
    }

    /// Gets input (standard or modified) from the associated InkCanvas control and passes the data through for custom processing by the app. The data is not processed by the InkPresenter.
    /// - Returns: The input from the InkCanvas control.
    public var unprocessedInput: WindowsUIInputInking_InkUnprocessedInput {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UnprocessedInput())
        }
    }

    /// Occurs when one or more ink strokes are processed ("wet" to "dry") by the application thread.
    public func strokesCollected(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInking_InkPresenter?, WindowsUIInputInking_InkStrokesCollectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StrokesCollected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: strokesCollected)
    }

    public func strokesCollected(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StrokesCollected(cookie)
    }

    /// Occurs when an InkStroke object is removed from an InkCanvas control using the pen eraser or the pen tip when Mode is set to Erasing.
    public func strokesErased(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInking_InkPresenter?, WindowsUIInputInking_InkStrokesErasedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StrokesErased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: strokesErased)
    }

    public func strokesErased(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StrokesErased(cookie)
    }

    /// Retrieves the InkDrawingAttributes used by the InkPresenter when rendering a new InkStroke on an InkCanvas control.
    /// - Returns: The drawing attributes applied to a new ink stroke.
    public func copyDefaultDrawingAttributes() throws -> WindowsUIInputInking_InkDrawingAttributes {
        try COM.NullResult.unwrap(_interop.copyDefaultDrawingAttributes())
    }

    /// Sets the InkDrawingAttributes used by the InkPresenter when rendering a new InkStroke on an InkCanvas control.
    /// - Parameter value: The drawing attributes for new ink strokes.
    public func updateDefaultDrawingAttributes(_ value: WindowsUIInputInking_InkDrawingAttributes?) throws {
        try _interop.updateDefaultDrawingAttributes(value)
    }

    /// Indicates that your app requires complete control of ink input rendering. 
    /// - Returns: The object used for custom ink stroke rendering.
    public func activateCustomDrying() throws -> WindowsUIInputInking_InkSynchronizer {
        try COM.NullResult.unwrap(_interop.activateCustomDrying())
    }

    /// Sets the inking behavior of one or more contact points on the associated InkCanvas control.
    /// - Parameter value: The inking behavior of one or more contact points. The default is SimpleSinglePointer.
    public func setPredefinedConfiguration(_ value: WindowsUIInputInking_InkPresenterPredefinedConfiguration) throws {
        try _interop.setPredefinedConfiguration(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkPresenter2 members

    /// Gets or sets how the InkPresenter object handles input (standard and modified) from the associated InkCanvas control when system is in high contrast mode.
    /// - Returns: The ink color (selected or system) that works best against the background color.
    public var highContrastAdjustment: WindowsUIInputInking_InkHighContrastAdjustment {
        get throws {
            try _iinkPresenter2.get_HighContrastAdjustment()
        }
    }

    /// Gets or sets how the InkPresenter object handles input (standard and modified) from the associated InkCanvas control when system is in high contrast mode.
    /// - Returns: The ink color (selected or system) that works best against the background color.
    public func highContrastAdjustment(_ value: WindowsUIInputInking_InkHighContrastAdjustment) throws {
        try _iinkPresenter2.put_HighContrastAdjustment(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkPresenter3 members

    /// Gets which types of secondary input can be processed by the InkPresenter object.
    /// - Returns: The types of secondary input that can be processed.
    public var inputConfiguration: WindowsUIInputInking_InkInputConfiguration {
        get throws {
            try COM.NullResult.unwrap(_iinkPresenter3.get_InputConfiguration())
        }
    }

    // MARK: Implementation details

    private var _iinkPresenter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenter2>? = nil

    internal var _iinkPresenter2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenter2> {
        get throws {
            try _iinkPresenter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkPresenter2.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkPresenter2.self)
            }
        }
    }

    private var _iinkPresenter3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenter3>? = nil

    internal var _iinkPresenter3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkPresenter3> {
        get throws {
            try _iinkPresenter3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkPresenter3.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkPresenter3.self)
            }
        }
    }

    deinit {
        _iinkPresenter2_storage?.release()
        _iinkPresenter3_storage?.release()
    }
}