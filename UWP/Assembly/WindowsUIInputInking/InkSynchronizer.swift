// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages the synchronization of ink input and provides methods for rendering it to the Direct2D device context of your Universal Windows app, instead of the default InkCanvas control. This requires an IInkD2DRenderer object to manage the ink input (see the Complex ink sample ).
public final class WindowsUIInputInking_InkSynchronizer: WindowsRuntime.WinRTImport<WindowsUIInputInking_InkSynchronizerProjection> {
    // MARK: Windows.UI.Input.Inking.IInkSynchronizer members

    /// Initiates a custom "dry" of ink input to the Direct2D device context of your app, instead of the default InkCanvas control. This requires an IInkD2DRenderer object to manage the ink input (see the Complex ink sample ).
    /// - Returns: The collection of "wet" ink strokes to pass to the IInkD2DRenderer object .
    public func beginDry() throws -> WindowsFoundationCollections_IVectorView<WindowsUIInputInking_InkStroke?> {
        try COM.NullResult.unwrap(_interop.beginDry())
    }

    /// Finalizes a custom "dry" of ink input to the Direct2D device context of your app, instead of the default InkCanvas control, and notifies the system that "wet" ink can be removed. This requires an IInkD2DRenderer object to manage the ink input (see the Complex ink sample ).
    public func endDry() throws {
        try _interop.endDry()
    }

    // MARK: Implementation details
}