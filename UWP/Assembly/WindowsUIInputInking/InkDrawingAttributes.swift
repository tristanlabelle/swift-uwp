// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides properties associated with the drawing of an InkStroke.
public final class WindowsUIInputInking_InkDrawingAttributes: WindowsRuntime.WinRTImport<WindowsUIInputInking_InkDrawingAttributesProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIInputInking_InkDrawingAttributesProjection.self))
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributes members

    /// Gets or sets a value that indicates the color of an InkStroke.
    /// - Returns: The ink color as an ARGB value. The default is black (0, 0, 0, 0).
    public var color: WindowsUI_Color {
        get throws {
            try _interop.get_Color()
        }
    }

    /// Gets or sets a value that indicates the color of an InkStroke.
    /// - Returns: The ink color as an ARGB value. The default is black (0, 0, 0, 0).
    public func color(_ value: WindowsUI_Color) throws {
        try _interop.put_Color(value)
    }

    /// Gets or sets a value that indicates whether a Bezier curve or a collection of straight line segments is used to draw an InkStroke.
    /// - Returns: **true** if a Bezier curve is used; otherwise **false**. The default value is **true**.
    public var fitToCurve: Swift.Bool {
        get throws {
            try _interop.get_FitToCurve()
        }
    }

    /// Gets or sets a value that indicates whether a Bezier curve or a collection of straight line segments is used to draw an InkStroke.
    /// - Returns: **true** if a Bezier curve is used; otherwise **false**. The default value is **true**.
    public func fitToCurve(_ value: Swift.Bool) throws {
        try _interop.put_FitToCurve(value)
    }

    /// Gets or sets a value that indicates whether the pressure of the contact on the digitizer surface is ignored when you draw an InkStroke.
    /// - Returns: **true** if pressure is ignored; otherwise **false**. The default value is **false**.
    public var ignorePressure: Swift.Bool {
        get throws {
            try _interop.get_IgnorePressure()
        }
    }

    /// Gets or sets a value that indicates whether the pressure of the contact on the digitizer surface is ignored when you draw an InkStroke.
    /// - Returns: **true** if pressure is ignored; otherwise **false**. The default value is **false**.
    public func ignorePressure(_ value: Swift.Bool) throws {
        try _interop.put_IgnorePressure(value)
    }

    /// Gets or sets a value that indicates the shape of the pen tip when you draw an InkStroke.
    /// - Returns: The shape of the pen/stylus tip. The default is Circle.
    public var penTip: WindowsUIInputInking_PenTipShape {
        get throws {
            try _interop.get_PenTip()
        }
    }

    /// Gets or sets a value that indicates the shape of the pen tip when you draw an InkStroke.
    /// - Returns: The shape of the pen/stylus tip. The default is Circle.
    public func penTip(_ value: WindowsUIInputInking_PenTipShape) throws {
        try _interop.put_PenTip(value)
    }

    /// Gets or sets a value that indicates the dimensions of the pen tip (PenTip ) used to draw an InkStroke.
    /// - Returns: The Width and Height of the pen tip in . The default value for each is 2.The shape of the PenTip can be specified as a Rectangle or a Circle.
    public var size: WindowsFoundation_Size {
        get throws {
            try _interop.get_Size()
        }
    }

    /// Gets or sets a value that indicates the dimensions of the pen tip (PenTip ) used to draw an InkStroke.
    /// - Returns: The Width and Height of the pen tip in . The default value for each is 2.The shape of the PenTip can be specified as a Rectangle or a Circle.
    public func size(_ value: WindowsFoundation_Size) throws {
        try _interop.put_Size(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributes2 members

    /// Gets or sets a value that indicates whether the InkStroke is rendered as a highlighter overlay. The stroke is typically set to a bright color, such as yellow.
    /// - Returns: **true** to render the stroke as a highlighter; otherwise **false**. The default value is **false**.
    public var drawAsHighlighter: Swift.Bool {
        get throws {
            try _iinkDrawingAttributes2.get_DrawAsHighlighter()
        }
    }

    /// Gets or sets a value that indicates whether the InkStroke is rendered as a highlighter overlay. The stroke is typically set to a bright color, such as yellow.
    /// - Returns: **true** to render the stroke as a highlighter; otherwise **false**. The default value is **false**.
    public func drawAsHighlighter(_ value: Swift.Bool) throws {
        try _iinkDrawingAttributes2.put_DrawAsHighlighter(value)
    }

    /// Gets or sets an affine transformation matrix applied to the PenTipShape used for an InkStroke.
    /// - Returns: The 2-D affine transformation matrix. The default is the identity matrix.
    public var penTipTransform: WindowsFoundationNumerics_Matrix3x2 {
        get throws {
            try _iinkDrawingAttributes2.get_PenTipTransform()
        }
    }

    /// Gets or sets an affine transformation matrix applied to the PenTipShape used for an InkStroke.
    /// - Returns: The 2-D affine transformation matrix. The default is the identity matrix.
    public func penTipTransform(_ value: WindowsFoundationNumerics_Matrix3x2) throws {
        try _iinkDrawingAttributes2.put_PenTipTransform(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributes3 members

    /// Gets the InkDrawingAttributes that describe the characteristics of a specific type of InkStroke.
    /// - Returns: The attributes associated with the InkStroke.
    public var kind: WindowsUIInputInking_InkDrawingAttributesKind {
        get throws {
            try _iinkDrawingAttributes3.get_Kind()
        }
    }

    /// Gets an instance of an InkDrawingAttributesPencilProperties object for setting properties characteristic to a pencil stroke.
    /// - Returns: An InkDrawingAttributesPencilProperties used to set pencil stroke properties.
    public var pencilProperties: WindowsUIInputInking_InkDrawingAttributesPencilProperties {
        get throws {
            try COM.NullResult.unwrap(_iinkDrawingAttributes3.get_PencilProperties())
        }
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributes4 members

    /// Gets or sets a value that indicates whether the tilt (tiltx, tilty ) of the contact on the digitizer surface is ignored when you draw an InkStroke.
    /// - Returns: **true** if tilt is ignored; otherwise **false**. The default value is **false**.
    public var ignoreTilt: Swift.Bool {
        get throws {
            try _iinkDrawingAttributes4.get_IgnoreTilt()
        }
    }

    /// Gets or sets a value that indicates whether the tilt (tiltx, tilty ) of the contact on the digitizer surface is ignored when you draw an InkStroke.
    /// - Returns: **true** if tilt is ignored; otherwise **false**. The default value is **false**.
    public func ignoreTilt(_ value: Swift.Bool) throws {
        try _iinkDrawingAttributes4.put_IgnoreTilt(value)
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributes5 members

    /// Gets an instance of a ModelerAttributes object for accessing modeler properties of an ink stroke.
    /// - Returns: A ModelerAttributes object used to process ink stroke rendering properties.
    public var modelerAttributes: WindowsUIInputInking_InkModelerAttributes {
        get throws {
            try COM.NullResult.unwrap(_iinkDrawingAttributes5.get_ModelerAttributes())
        }
    }

    // MARK: Windows.UI.Input.Inking.IInkDrawingAttributesStatics members

    /// Creates an InkDrawingAttributes object for rendering an ink stroke with pencil characteristics.
    /// - Returns: An InkDrawingAttributes object that supports the following properties:
    public static func createForPencil() throws -> WindowsUIInputInking_InkDrawingAttributes {
        try COM.NullResult.unwrap(_iinkDrawingAttributesStatics.createForPencil())
    }

    // MARK: Implementation details

    private var _iinkDrawingAttributes2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes2>? = nil

    internal var _iinkDrawingAttributes2: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes2> {
        get throws {
            try _iinkDrawingAttributes2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes2.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes2.self)
            }
        }
    }

    private var _iinkDrawingAttributes3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes3>? = nil

    internal var _iinkDrawingAttributes3: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes3> {
        get throws {
            try _iinkDrawingAttributes3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes3.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes3.self)
            }
        }
    }

    private var _iinkDrawingAttributes4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes4>? = nil

    internal var _iinkDrawingAttributes4: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes4> {
        get throws {
            try _iinkDrawingAttributes4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes4.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes4.self)
            }
        }
    }

    private var _iinkDrawingAttributes5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes5>? = nil

    internal var _iinkDrawingAttributes5: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes5> {
        get throws {
            try _iinkDrawingAttributes5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes5.iid).cast(to: CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributes5.self)
            }
        }
    }

    deinit {
        _iinkDrawingAttributes2_storage?.release()
        _iinkDrawingAttributes3_storage?.release()
        _iinkDrawingAttributes4_storage?.release()
        _iinkDrawingAttributes5_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Inking.InkDrawingAttributes", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iinkDrawingAttributesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributesStatics>? = nil

    internal static var _iinkDrawingAttributesStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributesStatics> {
        get throws {
            try _iinkDrawingAttributesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Inking.InkDrawingAttributes", id: CWinRT.SWRT_WindowsUIInputInking_IInkDrawingAttributesStatics.iid)
            }
        }
    }
}