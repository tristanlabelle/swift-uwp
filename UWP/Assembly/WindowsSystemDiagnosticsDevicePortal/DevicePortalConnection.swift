// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Handles a connection to the Windows Device Portal.
public final class WindowsSystemDiagnosticsDevicePortal_DevicePortalConnection: WindowsRuntime.WinRTImport<WindowsSystemDiagnosticsDevicePortal_DevicePortalConnectionProjection> {
    // MARK: Windows.System.Diagnostics.DevicePortal.IDevicePortalConnection members

    /// Raised when the connection to the Windows Device Portal is closed. A device portal plugin app must implement a handler for this event.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystemDiagnosticsDevicePortal_DevicePortalConnection?, WindowsSystemDiagnosticsDevicePortal_DevicePortalConnectionClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Raised when a request has been received through the Windows Device Portal server. A device portal plugin app must implement a handler for this event.
    public func requestReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystemDiagnosticsDevicePortal_DevicePortalConnection?, WindowsSystemDiagnosticsDevicePortal_DevicePortalConnectionRequestReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RequestReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: requestReceived)
    }

    public func requestReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RequestReceived(token)
    }

    // MARK: Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnection members

    /// Returns a server-side message WebSocket for use with Device Portal.
    /// - Parameter request: The HTTP request message (found as a property of the **DevicePortalConnectionRequestReceivedEventArgs ** class).
    /// - Returns: A server-side message WebSocket object that can be used with Device Portal.
    public func getServerMessageWebSocketForRequest(_ request: WindowsWebHttp_HttpRequestMessage?) throws -> WindowsNetworkingSockets_ServerMessageWebSocket {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnection.getServerMessageWebSocketForRequest(request))
    }

    /// Returns a server-side message WebSocket for use with Device Portal.
    /// - Parameter request: The HTTP request message (found as a property of the **DevicePortalConnectionRequestReceivedEventArgs ** class).
    /// - Parameter messageType: A **SocketMessageType ** value indicating the type of messaging that this WebSocket will use.
    /// - Parameter protocol: The sub-protocol that this WebSocket will use.
    /// - Returns: A server-side message WebSocket object that can be used with Device Portal.
    public func getServerMessageWebSocketForRequest(_ request: WindowsWebHttp_HttpRequestMessage?, _ messageType: WindowsNetworkingSockets_SocketMessageType, _ `protocol`: Swift.String) throws -> WindowsNetworkingSockets_ServerMessageWebSocket {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnection.getServerMessageWebSocketForRequest2(request, messageType, protocol))
    }

    /// Returns a server-side message WebSocket for use with Device Portal.
    /// - Parameter request: The HTTP request message (found as a property of the **DevicePortalConnectionRequestReceivedEventArgs ** class).
    /// - Parameter messageType: A **SocketMessageType ** value indicating the type of messaging that this WebSocket will use.
    /// - Parameter protocol: The sub-protocol that this WebSocket will use.
    /// - Parameter outboundBufferSizeInBytes: The size, in bytes, of the send buffer to be used for sending data on a **ServerMessageWebSocket ** object.
    /// - Parameter maxMessageSize: The maximum message size, in bytes, for a WebSocket message to be configured on the **ServerMessageWebSocket ** object.
    /// - Parameter receiveMode: A **MessageWebSocketReceiveMode ** value indicating whether this WebSocket will receive either complete or partial messages.
    /// - Returns: A server-side message WebSocket object that can be used with Device Portal.
    public func getServerMessageWebSocketForRequest(_ request: WindowsWebHttp_HttpRequestMessage?, _ messageType: WindowsNetworkingSockets_SocketMessageType, _ `protocol`: Swift.String, _ outboundBufferSizeInBytes: Swift.UInt32, _ maxMessageSize: Swift.UInt32, _ receiveMode: WindowsNetworkingSockets_MessageWebSocketReceiveMode) throws -> WindowsNetworkingSockets_ServerMessageWebSocket {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnection.getServerMessageWebSocketForRequest3(request, messageType, protocol, outboundBufferSizeInBytes, maxMessageSize, receiveMode))
    }

    /// Returns a server-side stream WebSocket for use with Device Portal.
    /// - Parameter request: The HTTP request message (found as a property of the **DevicePortalConnectionRequestReceivedEventArgs ** class).
    /// - Returns: A server-side stream WebSocket object that can be used with Device Portal.
    public func getServerStreamWebSocketForRequest(_ request: WindowsWebHttp_HttpRequestMessage?) throws -> WindowsNetworkingSockets_ServerStreamWebSocket {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnection.getServerStreamWebSocketForRequest(request))
    }

    /// Returns a server-side stream WebSocket for use with Device Portal.
    /// - Parameter request: The HTTP request message (found as a property of the **DevicePortalConnectionRequestReceivedEventArgs ** class).
    /// - Parameter protocol: The sub-protocol that this WebSocket will use.
    /// - Parameter outboundBufferSizeInBytes: The size, in bytes, of the send buffer to be used for sending data on a **ServerMessageWebSocket ** object.
    /// - Parameter noDelay: A boolean value indicating whether Nagle's algorithm is used on this WebSocket object. See the **StreamSocketControl ** class for more information on Nagle's algorithm.
    /// - Returns: A server-side stream WebSocket object that can be used with Device Portal.
    public func getServerStreamWebSocketForRequest(_ request: WindowsWebHttp_HttpRequestMessage?, _ `protocol`: Swift.String, _ outboundBufferSizeInBytes: Swift.UInt32, _ noDelay: Swift.Bool) throws -> WindowsNetworkingSockets_ServerStreamWebSocket {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnection.getServerStreamWebSocketForRequest2(request, protocol, outboundBufferSizeInBytes, noDelay))
    }

    // MARK: Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionStatics members

    /// Initializes an instance of DevicePortalConnection by using the app service connection passed in.
    /// - Parameter appServiceConnection: The AppServiceConnection that was used to launch the background task calling this method.
    /// - Returns: The DevicePortalConnection object.
    public static func getForAppServiceConnection(_ appServiceConnection: WindowsApplicationModelAppService_AppServiceConnection?) throws -> WindowsSystemDiagnosticsDevicePortal_DevicePortalConnection {
        try COM.NullResult.unwrap(_idevicePortalConnectionStatics.getForAppServiceConnection(appServiceConnection))
    }

    // MARK: Implementation details

    private var _idevicePortalWebSocketConnection_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnection>? = nil

    internal var _idevicePortalWebSocketConnection: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnection> {
        get throws {
            try _idevicePortalWebSocketConnection_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnection.iid).cast(to: CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnection.self)
            }
        }
    }

    deinit {
        _idevicePortalWebSocketConnection_storage?.release()
    }

    private static var _idevicePortalConnectionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalConnectionStatics>? = nil

    internal static var _idevicePortalConnectionStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalConnectionStatics> {
        get throws {
            try _idevicePortalConnectionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Diagnostics.DevicePortal.DevicePortalConnection", id: CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalConnectionStatics.iid)
            }
        }
    }
}