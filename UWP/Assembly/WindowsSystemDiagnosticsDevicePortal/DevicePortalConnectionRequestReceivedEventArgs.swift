// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a DevicePortalConnection.RequestReceived event that was raised.
public final class WindowsSystemDiagnosticsDevicePortal_DevicePortalConnectionRequestReceivedEventArgs: WindowsRuntime.WinRTImport<WindowsSystemDiagnosticsDevicePortal_DevicePortalConnectionRequestReceivedEventArgsProjection> {
    // MARK: Windows.System.Diagnostics.DevicePortal.IDevicePortalConnectionRequestReceivedEventArgs members

    /// Gets the HTTP request message for this request.
    /// - Returns: An HttpRequestMessage instance representing the HTTP request coming in through the Windows Device Portal server.
    public var requestMessage: WindowsWebHttp_HttpRequestMessage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RequestMessage())
        }
    }

    /// Gets the HTTP response message for this request.
    /// - Returns: An HttpResponseMessage instance that will contain the device portal plugin's response to an HTTP request. Its properties must be set by the plugin app.
    public var responseMessage: WindowsWebHttp_HttpResponseMessage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ResponseMessage())
        }
    }

    // MARK: Windows.System.Diagnostics.DevicePortal.IDevicePortalWebSocketConnectionRequestReceivedEventArgs members

    /// Gets a value describing whether the request is for WebSocket communication.
    /// - Returns: **True** if a WebSocket is being requested, otherwise **False**.
    public var isWebSocketUpgradeRequest: Swift.Bool {
        get throws {
            try _idevicePortalWebSocketConnectionRequestReceivedEventArgs.get_IsWebSocketUpgradeRequest()
        }
    }

    /// Gets a list of the sub-protocols that the WebSocket is requested to follow.
    /// - Returns: A list of strings representing WebSocket sub-protocols.
    public var webSocketProtocolsRequested: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_idevicePortalWebSocketConnectionRequestReceivedEventArgs.get_WebSocketProtocolsRequested())
        }
    }

    /// Retrieves a deferral object to allow the background task to continue executing while a Device Portal connection is open.
    /// - Returns: The deferral object.
    public func getDeferral() throws -> WindowsFoundation_Deferral {
        try COM.NullResult.unwrap(_idevicePortalWebSocketConnectionRequestReceivedEventArgs.getDeferral())
    }

    // MARK: Implementation details

    private var _idevicePortalWebSocketConnectionRequestReceivedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnectionRequestReceivedEventArgs>? = nil

    internal var _idevicePortalWebSocketConnectionRequestReceivedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnectionRequestReceivedEventArgs> {
        get throws {
            try _idevicePortalWebSocketConnectionRequestReceivedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnectionRequestReceivedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsSystemDiagnosticsDevicePortal_IDevicePortalWebSocketConnectionRequestReceivedEventArgs.self)
            }
        }
    }

    deinit {
        _idevicePortalWebSocketConnectionRequestReceivedEventArgs_storage?.release()
    }
}