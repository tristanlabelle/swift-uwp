// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents accept encoding information used in the **Accept-Encoding** HTTP header on an HTTP request.
public final class WindowsWebHttpHeaders_HttpContentCodingWithQualityHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpContentCodingWithQualityHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueFactory members

    public convenience init(_ contentCoding: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpContentCodingWithQualityHeaderValueFactory.createFromValue(contentCoding)))
    }

    public convenience init(_ contentCoding: Swift.String, _ quality: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpContentCodingWithQualityHeaderValueFactory.createFromValueWithQuality(contentCoding, quality)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue members

    /// Gets the value of the **content-coding** characteristic in the **Accept-Encoding** HTTP header.
    /// - Returns: The value of the **content-coding** characteristic in the **Accept-Encoding** HTTP header.
    public var contentCoding: Swift.String {
        get throws {
            try _interop.get_ContentCoding()
        }
    }

    /// Gets the value of the **qvalue** attribute in the **Accept-Encoding** HTTP header.
    /// - Returns: The value of the **qvalue** attribute in the **Accept-Encoding** HTTP header.
    public var quality: Swift.Double? {
        get throws {
            try _interop.get_Quality()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpContentCodingHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics members

    /// Converts a string to an HttpContentCodingWithQualityHeaderValue instance.
    /// - Parameter input: A string that represents the content coding information in the **Accept-Encoding** HTTP header.
    /// - Returns: An HttpContentCodingWithQualityHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpContentCodingWithQualityHeaderValue {
        try COM.NullResult.unwrap(_ihttpContentCodingWithQualityHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpContentCodingWithQualityHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter contentCodingWithQualityHeaderValue: The HttpContentCodingWithQualityHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpContentCodingWithQualityHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ contentCodingWithQualityHeaderValue: inout WindowsWebHttpHeaders_HttpContentCodingWithQualityHeaderValue?) throws -> Swift.Bool {
        try _ihttpContentCodingWithQualityHeaderValueStatics.tryParse(input, &contentCodingWithQualityHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpContentCodingWithQualityHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueFactory>? = nil

    internal static var _ihttpContentCodingWithQualityHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueFactory> {
        get throws {
            try _ihttpContentCodingWithQualityHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpContentCodingWithQualityHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueStatics>? = nil

    internal static var _ihttpContentCodingWithQualityHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueStatics> {
        get throws {
            try _ihttpContentCodingWithQualityHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpContentCodingWithQualityHeaderValueStatics.iid)
            }
        }
    }
}