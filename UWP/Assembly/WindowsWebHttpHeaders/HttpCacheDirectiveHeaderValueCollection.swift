// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the value of the **Cache-Control** HTTP header on HTTP content associated with an HTTP request or response.
public final class WindowsWebHttpHeaders_HttpCacheDirectiveHeaderValueCollection: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpCacheDirectiveHeaderValueCollectionProjection>, WindowsFoundationCollections_IVectorProtocol, WindowsFoundationCollections_IIterableProtocol, WindowsFoundation_IStringableProtocol {
    public typealias T = WindowsWebHttpHeaders_HttpNameValueHeaderValue?

    // MARK: Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection members

    /// Gets or sets the value of the **max-age** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the max-age directive in the **Cache-Control** HTTP header.
    public var maxAge: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_MaxAge()
        }
    }

    /// Gets or sets the value of the **max-age** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the max-age directive in the **Cache-Control** HTTP header.
    public func maxAge(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_MaxAge(value)
    }

    /// Gets or sets the value of the **max-stale** directive in the **Cache-Control** HTTP header.
    /// - Returns: the value of the **max-stale** directive in the **Cache-Control** HTTP header.
    public var maxStale: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_MaxStale()
        }
    }

    /// Gets or sets the value of the **max-stale** directive in the **Cache-Control** HTTP header.
    /// - Returns: the value of the **max-stale** directive in the **Cache-Control** HTTP header.
    public func maxStale(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_MaxStale(value)
    }

    /// Gets or sets the value of the **min-fresh** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the **min-fresh** directive in the **Cache-Control** HTTP header.
    public var minFresh: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_MinFresh()
        }
    }

    /// Gets or sets the value of the **min-fresh** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the **min-fresh** directive in the **Cache-Control** HTTP header.
    public func minFresh(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_MinFresh(value)
    }

    /// Gets or sets the value of the **s-maxage** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the **s-maxage** directive in the **Cache-Control** HTTP header.
    public var sharedMaxAge: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_SharedMaxAge()
        }
    }

    /// Gets or sets the value of the **s-maxage** directive in the **Cache-Control** HTTP header.
    /// - Returns: The value of the **s-maxage** directive in the **Cache-Control** HTTP header.
    public func sharedMaxAge(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_SharedMaxAge(value)
    }

    /// Parses and adds an entry to the HttpCacheDirectiveHeaderValueCollection.
    /// - Parameter input: The entry to add.
    public func parseAdd(_ input: Swift.String) throws {
        try _interop.parseAdd(input)
    }

    /// Tries to parse and add the specified item to the HttpCacheDirectiveHeaderValueCollection.
    /// - Parameter input: The item to parse and add.
    /// - Returns: **true** if the item successfully parsed and was added; otherwise **false**.
    public func tryParseAdd(_ input: Swift.String) throws -> Swift.Bool {
        try _interop.tryParseAdd(input)
    }

    // MARK: Windows.Foundation.Collections.IVector`1<Windows.Web.Http.Headers.HttpNameValueHeaderValue> members

    /// Gets the number of HttpNameValueHeaderValue objects in the collection.
    /// - Returns: The number of HttpNameValueHeaderValue objects in the HttpCacheDirectiveHeaderValueCollection.
    public var size: Swift.UInt32 {
        get throws {
            try _ivector.get_Size()
        }
    }

    /// Returns the HttpNameValueHeaderValue at the specified index in the collection.
    /// - Parameter index: The zero-based index of a specified item in the HttpCacheDirectiveHeaderValueCollection.
    /// - Returns: The HttpNameValueHeaderValue at the specified index in the HttpCacheDirectiveHeaderValueCollection.
    public func getAt(_ index: Swift.UInt32) throws -> WindowsWebHttpHeaders_HttpNameValueHeaderValue? {
        try _ivector.getAt(index)
    }

    /// Returns an immutable view of the HttpCacheDirectiveHeaderValueCollection.
    /// - Returns: The view of the HttpCacheDirectiveHeaderValueCollection.
    public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        try COM.NullResult.unwrap(_ivector.getView())
    }

    /// Retrieves the index of an HttpNameValueHeaderValue in the collection.
    /// - Parameter value: The HttpNameValueHeaderValue to find in the HttpCacheDirectiveHeaderValueCollection.
    /// - Parameter index: The index of the HttpNameValueHeaderValue in the HttpCacheDirectiveHeaderValueCollection.
    /// - Returns: Indicates whether the item is found.
    public func indexOf(_ value: WindowsWebHttpHeaders_HttpNameValueHeaderValue?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        try _ivector.indexOf(value, &index)
    }

    /// Sets the HttpNameValueHeaderValue at the specified index in the collection.
    /// - Parameter index: The zero-based index at which to set the HttpNameValueHeaderValue.
    /// - Parameter value: The item to set.
    public func setAt(_ index: Swift.UInt32, _ value: WindowsWebHttpHeaders_HttpNameValueHeaderValue?) throws {
        try _ivector.setAt(index, value)
    }

    /// Inserts an HttpNameValueHeaderValue into the collection at the specified index.
    /// - Parameter index: The zero-based index at which *value* should be inserted.
    /// - Parameter value: The object to insert into the collection.
    public func insertAt(_ index: Swift.UInt32, _ value: WindowsWebHttpHeaders_HttpNameValueHeaderValue?) throws {
        try _ivector.insertAt(index, value)
    }

    /// Removes the entry at the specified index from the HttpCacheDirectiveHeaderValueCollection.
    /// - Parameter index: The index of the entry to remove.
    public func removeAt(_ index: Swift.UInt32) throws {
        try _ivector.removeAt(index)
    }

    /// Adds a new HttpNameValueHeaderValue item to the end of the collection.
    /// - Parameter value: The HttpNameValueHeaderValue object to append.
    public func append(_ value: WindowsWebHttpHeaders_HttpNameValueHeaderValue?) throws {
        try _ivector.append(value)
    }

    /// Removes the last HttpNameValueHeaderValue item from the collection.
    public func removeAtEnd() throws {
        try _ivector.removeAtEnd()
    }

    /// Removes all objects from the collection.
    public func clear() throws {
        try _ivector.clear()
    }

    /// Retrieves the HttpNameValueHeaderValue items that start at the specified index in the collection.
    /// - Parameter startIndex: The zero-based index of the start of the HttpNameValueHeaderValue items in the HttpCacheDirectiveHeaderValueCollection.
    /// - Parameter items: An array of HttpNameValueHeaderValue items that start at *startIndex* in the HttpCacheDirectiveHeaderValueCollection.
    /// - Returns: The number of HttpNameValueHeaderValue items retrieved.
    public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsWebHttpHeaders_HttpNameValueHeaderValue?]) throws -> Swift.UInt32 {
        try _ivector.getMany(startIndex, items)
    }

    /// Replaces all the HttpNameValueHeaderValue items in the collection with the specified HttpNameValueHeaderValue items.
    /// - Parameter items: The collection of HttpNameValueHeaderValue items to add to the collection.
    public func replaceAll(_ items: [WindowsWebHttpHeaders_HttpNameValueHeaderValue?]) throws {
        try _ivector.replaceAll(items)
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Web.Http.Headers.HttpNameValueHeaderValue> members

    /// Retrieves an iterator to the first HttpNameValueHeaderValue item in the collection.
    /// - Returns: An object that can be used to enumerate the HttpNameValueHeaderValue items in the collection. The iterator points to the first HttpNameValueHeaderValue item in the HttpCacheDirectiveHeaderValueCollection.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpCacheDirectiveHeaderValueCollection object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Implementation details

    private var _ivector_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVector_WindowsWebHttpHeaders_HttpNameValueHeaderValue>? = nil

    internal var _ivector: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVector_WindowsWebHttpHeaders_HttpNameValueHeaderValue> {
        get throws {
            try _ivector_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IVector_WindowsWebHttpHeaders_HttpNameValueHeaderValue.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IVector_WindowsWebHttpHeaders_HttpNameValueHeaderValue.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsWebHttpHeaders_HttpNameValueHeaderValue>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsWebHttpHeaders_HttpNameValueHeaderValue> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsWebHttpHeaders_HttpNameValueHeaderValue.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsWebHttpHeaders_HttpNameValueHeaderValue.self)
            }
        }
    }

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _ivector_storage?.release()
        _iiterable_storage?.release()
        _istringable_storage?.release()
    }
}