// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents accept language information used in the **Accept-Language** HTTP header on an HTTP request.
public final class WindowsWebHttpHeaders_HttpLanguageRangeWithQualityHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpLanguageRangeWithQualityHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueFactory members

    public convenience init(_ languageRange: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpLanguageRangeWithQualityHeaderValueFactory.createFromLanguageRange(languageRange)))
    }

    public convenience init(_ languageRange: Swift.String, _ quality: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpLanguageRangeWithQualityHeaderValueFactory.createFromLanguageRangeWithQuality(languageRange, quality)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue members

    /// Gets the value of the **language-range** information from the HttpLanguageRangeWithQualityHeaderValue used in the **Accept-Language** HTTP header.
    /// - Returns: The value of the **language-range** information.
    public var languageRange: Swift.String {
        get throws {
            try _interop.get_LanguageRange()
        }
    }

    /// Gets the value of the **qvalue** or quality factor from the HttpLanguageRangeWithQualityHeaderValue used in the **Accept-Language** HTTP header.
    /// - Returns: The value of the **qvalue** or quality factor.
    public var quality: Swift.Double? {
        get throws {
            try _interop.get_Quality()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpLanguageRangeWithQualityHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics members

    /// Converts a string to an HttpLanguageRangeWithQualityHeaderValue instance.
    /// - Parameter input: A string that represents the language-range and quality factor information used in the **Accept-Encoding** HTTP header.
    /// - Returns: An HttpLanguageRangeWithQualityHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpLanguageRangeWithQualityHeaderValue {
        try COM.NullResult.unwrap(_ihttpLanguageRangeWithQualityHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpLanguageRangeWithQualityHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter languageRangeWithQualityHeaderValue: The HttpLanguageRangeWithQualityHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpLanguageRangeWithQualityHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ languageRangeWithQualityHeaderValue: inout WindowsWebHttpHeaders_HttpLanguageRangeWithQualityHeaderValue?) throws -> Swift.Bool {
        try _ihttpLanguageRangeWithQualityHeaderValueStatics.tryParse(input, &languageRangeWithQualityHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpLanguageRangeWithQualityHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueFactory>? = nil

    internal static var _ihttpLanguageRangeWithQualityHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueFactory> {
        get throws {
            try _ihttpLanguageRangeWithQualityHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpLanguageRangeWithQualityHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueStatics>? = nil

    internal static var _ihttpLanguageRangeWithQualityHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueStatics> {
        get throws {
            try _ihttpLanguageRangeWithQualityHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpLanguageRangeWithQualityHeaderValueStatics.iid)
            }
        }
    }
}