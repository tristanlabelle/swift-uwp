// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents authentication information used in the **Proxy-Authenticate** and **WWW-Authenticate** HTTP header values.
public final class WindowsWebHttpHeaders_HttpChallengeHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpChallengeHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpChallengeHeaderValueFactory members

    public convenience init(_ scheme: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpChallengeHeaderValueFactory.createFromScheme(scheme)))
    }

    public convenience init(_ scheme: Swift.String, _ token: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpChallengeHeaderValueFactory.createFromSchemeWithToken(scheme, token)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpChallengeHeaderValue members

    /// Gets the credentials that contain the authentication information of the user agent for the resource being requested.
    /// - Returns: The credentials that contain the authentication information.
    public var parameters: WindowsFoundationCollections_IVector<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parameters())
        }
    }

    /// Gets the scheme to use for authentication.
    /// - Returns: The scheme to use for authentication.
    public var scheme: Swift.String {
        get throws {
            try _interop.get_Scheme()
        }
    }

    /// The **SPNEGO** token to use with the **Negotiate** protocol scheme.
    /// - Returns: The **SPNEGO** token.
    public var token: Swift.String {
        get throws {
            try _interop.get_Token()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpChallengeHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics members

    /// Converts a string to an HttpChallengeHeaderValue instance.
    /// - Parameter input: A string that represents authentication header value information.
    /// - Returns: An HttpChallengeHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpChallengeHeaderValue {
        try COM.NullResult.unwrap(_ihttpChallengeHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpChallengeHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter challengeHeaderValue: The HttpChallengeHeaderValue version of the string.
    /// - Returns: **true** if input is valid HttpChallengeHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ challengeHeaderValue: inout WindowsWebHttpHeaders_HttpChallengeHeaderValue?) throws -> Swift.Bool {
        try _ihttpChallengeHeaderValueStatics.tryParse(input, &challengeHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpChallengeHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueFactory>? = nil

    internal static var _ihttpChallengeHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueFactory> {
        get throws {
            try _ihttpChallengeHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpChallengeHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpChallengeHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueStatics>? = nil

    internal static var _ihttpChallengeHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueStatics> {
        get throws {
            try _ihttpChallengeHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpChallengeHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpChallengeHeaderValueStatics.iid)
            }
        }
    }
}