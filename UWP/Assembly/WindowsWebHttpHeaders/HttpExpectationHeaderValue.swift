// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a token for a particular server behavior required by the client that is used in the **Expect** HTTP header on an HTTP request.
public final class WindowsWebHttpHeaders_HttpExpectationHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpExpectationHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpExpectationHeaderValueFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpExpectationHeaderValueFactory.createFromName(name)))
    }

    public convenience init(_ name: Swift.String, _ value: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpExpectationHeaderValueFactory.createFromNameWithValue(name, value)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpExpectationHeaderValue members

    /// Gets or sets a token that represents a name for a server behavior used in the **Expect** HTTP header.
    /// - Returns: A token that represents the name for a server behavior.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets a set of parameters for a server behavior included in the **Expect** HTTP header.
    /// - Returns: A set of parameters for a server behavior.
    public var parameters: WindowsFoundationCollections_IVector<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parameters())
        }
    }

    /// Gets or sets a value for a server behavior used in the **Expect** HTTP header.
    /// - Returns: A value for a server behavior used in the **Expect** HTTP header.
    public var value: Swift.String {
        get throws {
            try _interop.get_Value()
        }
    }

    /// Gets or sets a value for a server behavior used in the **Expect** HTTP header.
    /// - Returns: A value for a server behavior used in the **Expect** HTTP header.
    public func value(_ value: Swift.String) throws {
        try _interop.put_Value(value)
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpExpectationHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics members

    /// Converts a string to an HttpExpectationHeaderValue instance.
    /// - Parameter input: A string that represents the information in the **Expect** HTTP header.
    /// - Returns: An HttpExpectationHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpExpectationHeaderValue {
        try COM.NullResult.unwrap(_ihttpExpectationHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpCredentialsHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter expectationHeaderValue: The HttpExpectationHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpExpectationHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ expectationHeaderValue: inout WindowsWebHttpHeaders_HttpExpectationHeaderValue?) throws -> Swift.Bool {
        try _ihttpExpectationHeaderValueStatics.tryParse(input, &expectationHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpExpectationHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueFactory>? = nil

    internal static var _ihttpExpectationHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueFactory> {
        get throws {
            try _ihttpExpectationHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpExpectationHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpExpectationHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueStatics>? = nil

    internal static var _ihttpExpectationHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueStatics> {
        get throws {
            try _ihttpExpectationHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpExpectationHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpExpectationHeaderValueStatics.iid)
            }
        }
    }
}