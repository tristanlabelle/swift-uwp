// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents accept information used in the **Accept** HTTP header on an HTTP request.
public final class WindowsWebHttpHeaders_HttpMediaTypeWithQualityHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpMediaTypeWithQualityHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueFactory members

    public convenience init(_ mediaType: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpMediaTypeWithQualityHeaderValueFactory.createFromMediaType(mediaType)))
    }

    public convenience init(_ mediaType: Swift.String, _ quality: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpMediaTypeWithQualityHeaderValueFactory.createFromMediaTypeWithQuality(mediaType, quality)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue members

    /// Gets or sets the character set of the content to accept that is used in the **Accept** HTTP header.
    /// - Returns: The character set of the entity-body.
    public var charSet: Swift.String {
        get throws {
            try _interop.get_CharSet()
        }
    }

    /// Gets or sets the character set of the content to accept that is used in the **Accept** HTTP header.
    /// - Returns: The character set of the entity-body.
    public func charSet(_ value: Swift.String) throws {
        try _interop.put_CharSet(value)
    }

    /// Gets or sets the **media-type** of the content to accept that is used in the **Accept** HTTP header.
    /// - Returns: The **media-type** of the entity-body.
    public var mediaType: Swift.String {
        get throws {
            try _interop.get_MediaType()
        }
    }

    /// Gets or sets the **media-type** of the content to accept that is used in the **Accept** HTTP header.
    /// - Returns: The **media-type** of the entity-body.
    public func mediaType(_ value: Swift.String) throws {
        try _interop.put_MediaType(value)
    }

    /// Gets a set of parameters included in the **Accept** HTTP header.
    /// - Returns: A set of parameters.
    public var parameters: WindowsFoundationCollections_IVector<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parameters())
        }
    }

    /// Get or set the **qvalue** or quality used in the **Accept** HTTP header.
    /// - Returns: The **qvalue** or quality.
    public var quality: Swift.Double? {
        get throws {
            try _interop.get_Quality()
        }
    }

    /// Get or set the **qvalue** or quality used in the **Accept** HTTP header.
    /// - Returns: The **qvalue** or quality.
    public func quality(_ value: Swift.Double?) throws {
        try _interop.put_Quality(value)
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpMediaTypeWithQualityHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics members

    /// Converts a string to an HttpMediaTypeWithQualityHeaderValue instance.
    /// - Parameter input: A string that represents the media-type, character set, and quality information used in the **Accept** HTTP header.
    /// - Returns: An HttpMediaTypeWithQualityHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpMediaTypeWithQualityHeaderValue {
        try COM.NullResult.unwrap(_ihttpMediaTypeWithQualityHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpMediaTypeWithQualityHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter mediaTypeWithQualityHeaderValue: The HttpMediaTypeWithQualityHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpMediaTypeWithQualityHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ mediaTypeWithQualityHeaderValue: inout WindowsWebHttpHeaders_HttpMediaTypeWithQualityHeaderValue?) throws -> Swift.Bool {
        try _ihttpMediaTypeWithQualityHeaderValueStatics.tryParse(input, &mediaTypeWithQualityHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpMediaTypeWithQualityHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueFactory>? = nil

    internal static var _ihttpMediaTypeWithQualityHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueFactory> {
        get throws {
            try _ihttpMediaTypeWithQualityHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpMediaTypeWithQualityHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueStatics>? = nil

    internal static var _ihttpMediaTypeWithQualityHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueStatics> {
        get throws {
            try _ihttpMediaTypeWithQualityHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeWithQualityHeaderValueStatics.iid)
            }
        }
    }
}