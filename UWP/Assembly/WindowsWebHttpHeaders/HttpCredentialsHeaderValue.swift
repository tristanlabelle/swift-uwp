// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the value of the **Authorization** or **Proxy-Authorization** HTTP header on an HTTP request.
public final class WindowsWebHttpHeaders_HttpCredentialsHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpCredentialsHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpCredentialsHeaderValueFactory members

    public convenience init(_ scheme: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpCredentialsHeaderValueFactory.createFromScheme(scheme)))
    }

    public convenience init(_ scheme: Swift.String, _ token: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpCredentialsHeaderValueFactory.createFromSchemeWithToken(scheme, token)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpCredentialsHeaderValue members

    /// Gets a set of name/value pairs included in the **Authorization** or **Proxy-Authorization** HTTP header.
    /// - Returns: A set of name/value pairs.
    public var parameters: WindowsFoundationCollections_IVector<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parameters())
        }
    }

    /// Gets the scheme to use for authentication.
    /// - Returns: The scheme to use for authentication.
    public var scheme: Swift.String {
        get throws {
            try _interop.get_Scheme()
        }
    }

    /// Gets the user token information used in the **Authorization** or **Proxy-Authorization** HTTP header.
    /// - Returns: The user token information in the **Authorization** or **Proxy-Authorization** HTTP header.
    public var token: Swift.String {
        get throws {
            try _interop.get_Token()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpCredentialsHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics members

    /// Converts a string to an HttpCredentialsHeaderValue instance.
    /// - Parameter input: A string that represents the credential information in the **Authorization** or **Proxy-Authorization** HTTP header.
    /// - Returns: An HttpCredentialsHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpCredentialsHeaderValue {
        try COM.NullResult.unwrap(_ihttpCredentialsHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpCredentialsHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter credentialsHeaderValue: The HttpCredentialsHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpCredentialsHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ credentialsHeaderValue: inout WindowsWebHttpHeaders_HttpCredentialsHeaderValue?) throws -> Swift.Bool {
        try _ihttpCredentialsHeaderValueStatics.tryParse(input, &credentialsHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpCredentialsHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueFactory>? = nil

    internal static var _ihttpCredentialsHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueFactory> {
        get throws {
            try _ihttpCredentialsHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpCredentialsHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpCredentialsHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueStatics>? = nil

    internal static var _ihttpCredentialsHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueStatics> {
        get throws {
            try _ihttpCredentialsHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpCredentialsHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpCredentialsHeaderValueStatics.iid)
            }
        }
    }
}