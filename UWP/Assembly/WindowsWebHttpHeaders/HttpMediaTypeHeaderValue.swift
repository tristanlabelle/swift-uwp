// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the value of the **Content-Type** HTTP header on the HTTP content in a request or a response.
public final class WindowsWebHttpHeaders_HttpMediaTypeHeaderValue: WindowsRuntime.WinRTImport<WindowsWebHttpHeaders_HttpMediaTypeHeaderValueProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueFactory members

    public convenience init(_ mediaType: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpMediaTypeHeaderValueFactory.create(mediaType)))
    }

    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue members

    /// Gets or sets the character set of the entity-body used in the **Content-Type** HTTP header.
    /// - Returns: The character set of the entity-body.
    public var charSet: Swift.String {
        get throws {
            try _interop.get_CharSet()
        }
    }

    /// Gets or sets the character set of the entity-body used in the **Content-Type** HTTP header.
    /// - Returns: The character set of the entity-body.
    public func charSet(_ value: Swift.String) throws {
        try _interop.put_CharSet(value)
    }

    /// Gets or sets the **media-type** of the entity-body used in the **Content-Type** HTTP header.
    /// - Returns: The **media-type** of the entity-body.
    public var mediaType: Swift.String {
        get throws {
            try _interop.get_MediaType()
        }
    }

    /// Gets or sets the **media-type** of the entity-body used in the **Content-Type** HTTP header.
    /// - Returns: The **media-type** of the entity-body.
    public func mediaType(_ value: Swift.String) throws {
        try _interop.put_MediaType(value)
    }

    /// Gets a set of parameters included in the **Content-Type** HTTP header.
    /// - Returns: A set of parameters.
    public var parameters: WindowsFoundationCollections_IVector<WindowsWebHttpHeaders_HttpNameValueHeaderValue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parameters())
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpMediaTypeHeaderValue object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics members

    /// Converts a string to an HttpMediaTypeHeaderValue instance.
    /// - Parameter input: A string that represents the media-type and character set information used in the **Content-Type** HTTP header.
    /// - Returns: An HttpMediaTypeHeaderValue instance.
    public static func parse(_ input: Swift.String) throws -> WindowsWebHttpHeaders_HttpMediaTypeHeaderValue {
        try COM.NullResult.unwrap(_ihttpMediaTypeHeaderValueStatics.parse(input))
    }

    /// Determines whether a string is valid HttpMediaTypeHeaderValue information.
    /// - Parameter input: The string to validate.
    /// - Parameter mediaTypeHeaderValue: The HttpMediaTypeHeaderValue version of the string.
    /// - Returns: **true** if *input* is valid HttpMediaTypeHeaderValue information; otherwise, **false**.
    public static func tryParse(_ input: Swift.String, _ mediaTypeHeaderValue: inout WindowsWebHttpHeaders_HttpMediaTypeHeaderValue?) throws -> Swift.Bool {
        try _ihttpMediaTypeHeaderValueStatics.tryParse(input, &mediaTypeHeaderValue)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpMediaTypeHeaderValueFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueFactory>? = nil

    internal static var _ihttpMediaTypeHeaderValueFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueFactory> {
        get throws {
            try _ihttpMediaTypeHeaderValueFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpMediaTypeHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueFactory.iid)
            }
        }
    }

    private static var _ihttpMediaTypeHeaderValueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueStatics>? = nil

    internal static var _ihttpMediaTypeHeaderValueStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueStatics> {
        get throws {
            try _ihttpMediaTypeHeaderValueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.Headers.HttpMediaTypeHeaderValue", id: CWinRT.SWRT_WindowsWebHttpHeaders_IHttpMediaTypeHeaderValueStatics.iid)
            }
        }
    }
}