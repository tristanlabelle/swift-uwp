// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides operations that an app can perform on a task list that it has not created.
public final class WindowsApplicationModelUserDataTasks_UserDataTaskListLimitedWriteOperations: WindowsRuntime.WinRTImport<WindowsApplicationModelUserDataTasks_UserDataTaskListLimitedWriteOperationsProjection> {
    // MARK: Windows.ApplicationModel.UserDataTasks.IUserDataTaskListLimitedWriteOperations members

    /// Asynchronously attempts to mark a task as completed.
    /// - Parameter userDataTaskId: The ID of the task to mark as completed.
    /// - Returns: The ID of the task marked as completed.
    public func tryCompleteTaskAsync(_ userDataTaskId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.tryCompleteTaskAsync(userDataTaskId))
    }

    /// Asynchronously attempts to create or update a task.
    /// - Parameter userDataTask: The task to create or update.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryCreateOrUpdateTaskAsync(_ userDataTask: WindowsApplicationModelUserDataTasks_UserDataTask?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryCreateOrUpdateTaskAsync(userDataTask))
    }

    /// Asynchronously attempts to delete a task.
    /// - Parameter userDataTaskId: The ID of the task to delete.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func tryDeleteTaskAsync(_ userDataTaskId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryDeleteTaskAsync(userDataTaskId))
    }

    /// Asynchronously attempts to skip the current instance of a reoccurring task and move to the next instance.
    /// - Parameter userDataTaskId: The ID of the reoccurring task.
    /// - Returns: A Boolean value indicating if the operation was successful.
    public func trySkipOccurrenceAsync(_ userDataTaskId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySkipOccurrenceAsync(userDataTaskId))
    }

    // MARK: Implementation details
}