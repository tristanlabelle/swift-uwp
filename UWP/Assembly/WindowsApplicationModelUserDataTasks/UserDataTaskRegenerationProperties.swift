// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents how often a task occurs.
public final class WindowsApplicationModelUserDataTasks_UserDataTaskRegenerationProperties: WindowsRuntime.WinRTImport<WindowsApplicationModelUserDataTasks_UserDataTaskRegenerationPropertiesProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelUserDataTasks_UserDataTaskRegenerationPropertiesProjection.self))
    }

    // MARK: Windows.ApplicationModel.UserDataTasks.IUserDataTaskRegenerationProperties members

    /// Gets or sets the interval between occurrences of a task. Interval is of type UInt32 and has a default value of 1. For daily, the interval is the number of days in between, for weekly, the number of weeks, and so on.
    /// - Returns: The interval on which a task occurs.
    public var interval: Swift.Int32 {
        get throws {
            try _interop.get_Interval()
        }
    }

    /// Gets or sets the interval between occurrences of a task. Interval is of type UInt32 and has a default value of 1. For daily, the interval is the number of days in between, for weekly, the number of weeks, and so on.
    /// - Returns: The interval on which a task occurs.
    public func interval(_ value: Swift.Int32) throws {
        try _interop.put_Interval(value)
    }

    /// Gets or sets the number of times a task recurs. Occurrences is of type IReference(UInt32) and is **NULL** by default. Occurrences is mutually exclusive with Until.
    /// - Returns: The number of times a task recurs.
    public var occurrences: Swift.Int32? {
        get throws {
            try _interop.get_Occurrences()
        }
    }

    /// Gets or sets the number of times a task recurs. Occurrences is of type IReference(UInt32) and is **NULL** by default. Occurrences is mutually exclusive with Until.
    /// - Returns: The number of times a task recurs.
    public func occurrences(_ value: Swift.Int32?) throws {
        try _interop.put_Occurrences(value)
    }

    /// Gets or sets a UserDataTaskRecurrenceUnit -typed value that indicates the frequency for which the task occurs.
    /// - Returns: A UserDataTaskRecurrenceUnit -typed value that indicates the frequency for which the task occurs.
    public var unit: WindowsApplicationModelUserDataTasks_UserDataTaskRegenerationUnit {
        get throws {
            try _interop.get_Unit()
        }
    }

    /// Gets or sets a UserDataTaskRecurrenceUnit -typed value that indicates the frequency for which the task occurs.
    /// - Returns: A UserDataTaskRecurrenceUnit -typed value that indicates the frequency for which the task occurs.
    public func unit(_ value: WindowsApplicationModelUserDataTasks_UserDataTaskRegenerationUnit) throws {
        try _interop.put_Unit(value)
    }

    /// Gets or sets the date and time until which a task is valid. Until is of type IReference(DateTime) and is **NULL** by default. Until is mutually exclusive with Occurrences.
    /// - Returns: The date and time until which a task is valid.
    public var until: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_Until()
        }
    }

    /// Gets or sets the date and time until which a task is valid. Until is of type IReference(DateTime) and is **NULL** by default. Until is mutually exclusive with Occurrences.
    /// - Returns: The date and time until which a task is valid.
    public func until(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _interop.put_Until(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.UserDataTasks.UserDataTaskRegenerationProperties", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}