// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains read-only configuration settings for the MediaCapture object.
public final class WindowsMediaCapture_MediaCaptureSettings: WindowsRuntime.WinRTImport<WindowsMediaCapture_MediaCaptureSettingsProjection> {
    // MARK: Windows.Media.Capture.IMediaCaptureSettings members

    /// Gets the DeviceInformation.Id of the microphone.
    /// - Returns: The DeviceInformation.Id of the microphone.
    public var audioDeviceId: Swift.String {
        get throws {
            try _interop.get_AudioDeviceId()
        }
    }

    /// Gets the stream that is used for photo capture.
    /// - Returns: The stream that is used for photo capture.
    public var photoCaptureSource: WindowsMediaCapture_PhotoCaptureSource {
        get throws {
            try _interop.get_PhotoCaptureSource()
        }
    }

    /// Gets the streaming mode.
    /// - Returns: The streaming mode.
    public var streamingCaptureMode: WindowsMediaCapture_StreamingCaptureMode {
        get throws {
            try _interop.get_StreamingCaptureMode()
        }
    }

    /// Gets a value that indicates which video streams are independent of each other.
    /// - Returns: A value of VideoDeviceCharacteristic that indicates which video streams are independent pf each other.
    public var videoDeviceCharacteristic: WindowsMediaCapture_VideoDeviceCharacteristic {
        get throws {
            try _interop.get_VideoDeviceCharacteristic()
        }
    }

    /// Gets the DeviceInformation.Id of the video camera.
    /// - Returns: The DeviceInformation.Id of the video camera.
    public var videoDeviceId: Swift.String {
        get throws {
            try _interop.get_VideoDeviceId()
        }
    }

    // MARK: Windows.Media.Capture.IMediaCaptureSettings2 members

    /// Gets the audio processing mode.
    /// - Returns: The audio processing mode.
    public var audioProcessing: WindowsMedia_AudioProcessing {
        get throws {
            try _imediaCaptureSettings2.get_AudioProcessing()
        }
    }

    /// Gets a value that indicates if the device’s region requires that a sound be played when a photo or video is captured.
    /// - Returns: **true** if the device’s region requires that a sound be played when a photo or video is captured; otherwise, **false**. An app may play a sound during photo or video capture even if it is not required by the device’s region.
    public var cameraSoundRequiredForRegion: Swift.Bool {
        get throws {
            try _imediaCaptureSettings2.get_CameraSoundRequiredForRegion()
        }
    }

    /// Gets a value that indicates if the capture device supports recording video and taking a photo sequence at the same time.
    /// - Returns: **true** if the capture device supports concurrently recording video and capturing a photo sequence; otherwise, **false**.
    public var concurrentRecordAndPhotoSequenceSupported: Swift.Bool {
        get throws {
            try _imediaCaptureSettings2.get_ConcurrentRecordAndPhotoSequenceSupported()
        }
    }

    /// Gets a value that indicates if the capture device supports recording video and taking a photo at the same time.
    /// - Returns: **true** if the capture device supports concurrently recording video and capturing a photo; otherwise, **false**.
    public var concurrentRecordAndPhotoSupported: Swift.Bool {
        get throws {
            try _imediaCaptureSettings2.get_ConcurrentRecordAndPhotoSupported()
        }
    }

    /// Gets the horizontal 35mm equivalent focal length of the camera lens on the capture device.
    /// - Returns: The horizontal 35mm equivalent focal length of the camera lens.
    public var horizontal35mmEquivalentFocalLength: Swift.UInt32? {
        get throws {
            try _imediaCaptureSettings2.get_Horizontal35mmEquivalentFocalLength()
        }
    }

    /// Gets the media category of the media.
    /// - Returns: The media category
    public var mediaCategory: WindowsMediaCapture_MediaCategory {
        get throws {
            try _imediaCaptureSettings2.get_MediaCategory()
        }
    }

    /// Gets the pitch offset of the camera in degrees.
    /// - Returns: The pitch offset in degrees.
    public var pitchOffsetDegrees: Swift.Int32? {
        get throws {
            try _imediaCaptureSettings2.get_PitchOffsetDegrees()
        }
    }

    /// Gets the vertical 35mm equivalent focal length of the camera lens on the capture device.
    /// - Returns: The vertical 35mm equivalent focal length of the camera lens.
    public var vertical35mmEquivalentFocalLength: Swift.UInt32? {
        get throws {
            try _imediaCaptureSettings2.get_Vertical35mmEquivalentFocalLength()
        }
    }

    // MARK: Windows.Media.Capture.IMediaCaptureSettings3 members

    /// Gets an IDirect3DDevice representing the Direct3D device instance being used by the associated MediaCapture object.
    /// - Returns: An IDirect3DDevice representing the Direct3D device instance being used by the associated MediaCapture object.
    public var direct3D11Device: WindowsGraphicsDirectXDirect3D11_IDirect3DDevice {
        get throws {
            try COM.NullResult.unwrap(_imediaCaptureSettings3.get_Direct3D11Device())
        }
    }

    // MARK: Implementation details

    private var _imediaCaptureSettings2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings2>? = nil

    internal var _imediaCaptureSettings2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings2> {
        get throws {
            try _imediaCaptureSettings2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings2.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings2.self)
            }
        }
    }

    private var _imediaCaptureSettings3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings3>? = nil

    internal var _imediaCaptureSettings3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings3> {
        get throws {
            try _imediaCaptureSettings3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings3.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureSettings3.self)
            }
        }
    }

    deinit {
        _imediaCaptureSettings2_storage?.release()
        _imediaCaptureSettings3_storage?.release()
    }
}