// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides methods for taking a low lag media recording.
public final class WindowsMediaCapture_LowLagMediaRecording: WindowsRuntime.WinRTImport<WindowsMediaCapture_LowLagMediaRecordingProjection> {
    // MARK: Windows.Media.Capture.ILowLagMediaRecording members

    /// Asynchronously starts the low lag media recording.
    /// - Returns: Object that is used to control the asynchronous operation.
    public func startAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Asynchronously stops the low lag media recording.
    /// - Returns: Object that is used to control the asynchronous operation.
    public func stopAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.stopAsync())
    }

    /// Asynchronously releases the LowLagMediaRecording object and resources used by the media recording operation.
    /// - Returns: Object that is used to control the asynchronous operation.
    public func finishAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.finishAsync())
    }

    // MARK: Windows.Media.Capture.ILowLagMediaRecording2 members

    /// Pauses an ongoing low lag media record operation.
    /// - Parameter behavior: A value indicating whether the media capture hardware resources should be preserved or released while recording is paused.
    /// - Returns: An asynchronous action.
    public func pauseAsync(_ behavior: WindowsMediaDevices_MediaCapturePauseBehavior) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ilowLagMediaRecording2.pauseAsync(behavior))
    }

    /// Resumes a paused low lag recording operation.
    /// - Returns: An asynchronous action.
    public func resumeAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ilowLagMediaRecording2.resumeAsync())
    }

    // MARK: Windows.Media.Capture.ILowLagMediaRecording3 members

    /// Pauses an ongoing low lag media record operation and provides a MediaCapturePauseResult that can be used to help the user align the camera with the last captured frame when resuming recording.
    /// - Parameter behavior: A value indicating whether the media capture hardware resources should be preserved or released while recording is paused.
    /// - Returns: An asynchronous action that returns a MediaCapturePauseResult upon completion.
    public func pauseWithResultAsync(_ behavior: WindowsMediaDevices_MediaCapturePauseBehavior) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_MediaCapturePauseResult?> {
        try COM.NullResult.unwrap(_ilowLagMediaRecording3.pauseWithResultAsync(behavior))
    }

    /// Asynchronously stops the low lag media recording and provides a MediaCaptureStopResult that can be used to help the user align the camera with the last captured frame when restarting recording.
    /// - Returns: An asynchronous action that returns a MediaCaptureStopResult upon completion.
    public func stopWithResultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_MediaCaptureStopResult?> {
        try COM.NullResult.unwrap(_ilowLagMediaRecording3.stopWithResultAsync())
    }

    // MARK: Implementation details

    private var _ilowLagMediaRecording2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording2>? = nil

    internal var _ilowLagMediaRecording2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording2> {
        get throws {
            try _ilowLagMediaRecording2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording2.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording2.self)
            }
        }
    }

    private var _ilowLagMediaRecording3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording3>? = nil

    internal var _ilowLagMediaRecording3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording3> {
        get throws {
            try _ilowLagMediaRecording3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording3.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_ILowLagMediaRecording3.self)
            }
        }
    }

    deinit {
        _ilowLagMediaRecording2_storage?.release()
        _ilowLagMediaRecording3_storage?.release()
    }
}