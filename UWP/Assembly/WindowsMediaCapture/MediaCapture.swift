// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for capturing photos, audio, and videos from a capture device, such as a webcam.
public final class WindowsMediaCapture_MediaCapture: WindowsRuntime.WinRTImport<WindowsMediaCapture_MediaCaptureProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaCapture_MediaCaptureProjection.self))
    }

    // MARK: Windows.Media.Capture.IMediaCapture members

    /// Gets an object that controls settings for the microphone.
    /// - Returns: An AudioDeviceController object that controls settings for the microphone.
    public var audioDeviceController: WindowsMediaDevices_AudioDeviceController {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AudioDeviceController())
        }
    }

    /// Gets the configuration settings for the MediaCapture object.
    /// - Returns: A MediaCaptureSettings object that contains the settings.
    public var mediaCaptureSettings: WindowsMediaCapture_MediaCaptureSettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaCaptureSettings())
        }
    }

    /// Gets an object that controls settings for the video camera.
    /// - Returns: A VideoDeviceController object.
    public var videoDeviceController: WindowsMediaDevices_VideoDeviceController {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoDeviceController())
        }
    }

    /// Raised when an error occurs during media capture.
    public func failed(adding errorEventHandler: WindowsMediaCapture_MediaCaptureFailedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Failed(errorEventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: failed)
    }

    public func failed(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Failed(eventCookie)
    }

    /// Occurs when the record limit is exceeded.
    public func recordLimitationExceeded(adding recordLimitationExceededEventHandler: WindowsMediaCapture_RecordLimitationExceededEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RecordLimitationExceeded(recordLimitationExceededEventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: recordLimitationExceeded)
    }

    public func recordLimitationExceeded(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RecordLimitationExceeded(eventCookie)
    }

    /// Initializes the MediaCapture object, using default settings.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func initializeAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.initializeAsync())
    }

    /// Initializes the MediaCapture object.
    /// - Parameter mediaCaptureInitializationSettings: The initialization settings.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func initializeAsync(_ mediaCaptureInitializationSettings: WindowsMediaCapture_MediaCaptureInitializationSettings?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.initializeWithSettingsAsync(mediaCaptureInitializationSettings))
    }

    /// Starts recording asynchronously to a storage file.
    /// - Parameter encodingProfile: The encoding profile for the recording.
    /// - Parameter file: The storage file where the image is saved.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func startRecordToStorageFileAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startRecordToStorageFileAsync(encodingProfile, file))
    }

    /// Starts recording to a random-access stream.
    /// - Parameter encodingProfile: The encoding profile for the recording.
    /// - Parameter stream: The stream where the image data is written.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func startRecordToStreamAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startRecordToStreamAsync(encodingProfile, stream))
    }

    /// Start recording to a custom media sink using the specified encoding profile.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customMediaSink: The media extension for the custom media sink.
    /// - Returns: An object that is used to control the asynchronous operation.
    public func startRecordToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customMediaSink: WindowsMedia_IMediaExtension?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startRecordToCustomSinkAsync(encodingProfile, customMediaSink))
    }

    /// Start recording to a custom media sink using the specified encoding profile and sink settings.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customSinkActivationId: The activatable class ID of the media extension for the custom media sink.
    /// - Parameter customSinkSettings: Contains properties of the media extension.
    /// - Returns: An object that is used to control the asynchronous operation.
    public func startRecordToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customSinkActivationId: Swift.String, _ customSinkSettings: WindowsFoundationCollections_IPropertySet?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startRecordToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings))
    }

    /// Stops recording.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func stopRecordAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.stopRecordAsync())
    }

    /// Captures a photo to a storage file.
    /// - Parameter type: The encoding properties for the output image.
    /// - Parameter file: The storage file where the image is saved.
    /// - Returns: Returns an IAsyncAction object that is used to control the asynchronous operation.
    public func capturePhotoToStorageFileAsync(_ type: WindowsMediaMediaProperties_ImageEncodingProperties?, _ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.capturePhotoToStorageFileAsync(type, file))
    }

    /// Captures a photo to a random-access stream.
    /// - Parameter type: The encoding properties for the output image.
    /// - Parameter stream: The stream where the image data is written.
    /// - Returns: Returns an IAsyncAction object that is used to control the asynchronous operation.
    public func capturePhotoToStreamAsync(_ type: WindowsMediaMediaProperties_ImageEncodingProperties?, _ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.capturePhotoToStreamAsync(type, stream))
    }

    /// Adds an audio or video effect.
    /// - Parameter mediaStreamType: Specifies the streams to which the effect will be applied.
    /// - Parameter effectActivationID: The class identifier of the activatable runtime class that implements the effect. The runtime class must implement the IMediaExtension interface.
    /// - Parameter effectSettings: Configuration parameters for the effect.
    /// - Returns: Returns an IAsyncAction object that is used to control the asynchronous operation.
    public func addEffectAsync(_ mediaStreamType: WindowsMediaCapture_MediaStreamType, _ effectActivationID: Swift.String, _ effectSettings: WindowsFoundationCollections_IPropertySet?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.addEffectAsync(mediaStreamType, effectActivationID, effectSettings))
    }

    /// Removes all audio and video effects from a stream.
    /// - Parameter mediaStreamType: The stream from which to remove the effects.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func clearEffectsAsync(_ mediaStreamType: WindowsMediaCapture_MediaStreamType) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.clearEffectsAsync(mediaStreamType))
    }

    /// Sets an encoding property.
    /// - Parameter mediaStreamType: The type of media data the stream represents, such as video or audio.
    /// - Parameter propertyId: The encoding property to set.
    /// - Parameter propertyValue: The new value of the encoding property.
    public func setEncoderProperty(_ mediaStreamType: WindowsMediaCapture_MediaStreamType, _ propertyId: Foundation.UUID, _ propertyValue: WindowsRuntime.IInspectable?) throws {
        try _interop.setEncoderProperty(mediaStreamType, propertyId, propertyValue)
    }

    /// Gets the value of an encoding property.
    /// - Parameter mediaStreamType: Specifies the stream to query for the encoding property.
    /// - Parameter propertyId: The encoding property to retrieve.
    /// - Returns: Returns the value of the encoding property.
    public func getEncoderProperty(_ mediaStreamType: WindowsMediaCapture_MediaStreamType, _ propertyId: Foundation.UUID) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_interop.getEncoderProperty(mediaStreamType, propertyId))
    }

    /// Enables or disables horizontal mirroring of the video preview stream. This is not the preferred method for mirroring. See the Remarks section below for details.
    /// - Parameter value: True to enable mirroring; false to disable mirroring.
    public func setPreviewMirroring(_ value: Swift.Bool) throws {
        try _interop.setPreviewMirroring(value)
    }

    /// Queries whether the video stream is mirrored horizontally.
    /// - Returns: True if mirroring is enabled; false otherwise.
    public func getPreviewMirroring() throws -> Swift.Bool {
        try _interop.getPreviewMirroring()
    }

    /// Rotates the video preview stream.
    /// - Parameter value: The amount by which to rotate the video.
    public func setPreviewRotation(_ value: WindowsMediaCapture_VideoRotation) throws {
        try _interop.setPreviewRotation(value)
    }

    /// Gets the rotation of the video preview stream.
    /// - Returns: The amount by which the video preview stream is rotated.
    public func getPreviewRotation() throws -> WindowsMediaCapture_VideoRotation {
        try _interop.getPreviewRotation()
    }

    /// Rotates the recorded video.
    /// - Parameter value: The amount by which to rotate the video.
    public func setRecordRotation(_ value: WindowsMediaCapture_VideoRotation) throws {
        try _interop.setRecordRotation(value)
    }

    /// Gets the rotation of the recorded video.
    /// - Returns: The amount by which the recorded video is rotated.
    public func getRecordRotation() throws -> WindowsMediaCapture_VideoRotation {
        try _interop.getRecordRotation()
    }

    // MARK: Windows.Media.Capture.IMediaCaptureVideoPreview members

    /// Starts preview.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func startPreviewAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCaptureVideoPreview.startPreviewAsync())
    }

    /// Starts sending a preview stream to a custom media sink using the specified encoding profile.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customMediaSink: The media extension for the custom media sink.
    /// - Returns: An object that is used to control the asynchronous operation.
    public func startPreviewToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customMediaSink: WindowsMedia_IMediaExtension?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCaptureVideoPreview.startPreviewToCustomSinkAsync(encodingProfile, customMediaSink))
    }

    /// Starts sending a preview stream to a custom media sink using the specified encoding profile and sink settings.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customSinkActivationId: The activatable class ID of the media extension for the custom media sink.
    /// - Parameter customSinkSettings: Contains properties of the media extension.
    /// - Returns: An object that is used to control the asynchronous operation.
    public func startPreviewToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customSinkActivationId: Swift.String, _ customSinkSettings: WindowsFoundationCollections_IPropertySet?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCaptureVideoPreview.startPreviewToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings))
    }

    /// Stops preview.
    /// - Returns: Returns a IAsyncAction object that is used to control the asynchronous operation.
    public func stopPreviewAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCaptureVideoPreview.stopPreviewAsync())
    }

    // MARK: Windows.Media.Capture.IMediaCapture2 members

    /// Initializes the low lag recording using the specified file to store the recording. This method provides the LowLagMediaRecording object used to managed the recording.
    /// - Parameter encodingProfile: The encoding profile for the recording.
    /// - Parameter file: The storage file where the image is saved.
    /// - Returns: When this method completes, a LowLagMediaRecording object is returned which can be used to start the photo capture.
    public func prepareLowLagRecordToStorageFileAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagMediaRecording?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagRecordToStorageFileAsync(encodingProfile, file))
    }

    /// Initializes the low lag recording using the specified random-access stream to store the recording. This method provides the LowLagMediaRecording object used to managed the recording.
    /// - Parameter encodingProfile: The encoding profile for the recording.
    /// - Parameter stream: The stream where the image data is written.
    /// - Returns: When this method completes, a LowLagMediaRecording object is returned which can be used to start the photo capture.
    public func prepareLowLagRecordToStreamAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagMediaRecording?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagRecordToStreamAsync(encodingProfile, stream))
    }

    /// Initializes the low lag recording using the specified custom sink to store the recording. This method provides the LowLagMediaRecording object used to managed the capture.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customMediaSink: The media extension for the custom media sink.
    /// - Returns: When this method completes, a LowLagMediaRecording object is returned which can be used to start the photo capture.
    public func prepareLowLagRecordToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customMediaSink: WindowsMedia_IMediaExtension?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagMediaRecording?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagRecordToCustomSinkAsync(encodingProfile, customMediaSink))
    }

    /// Initializes the low lag recording using the specified custom sink to store the recording. This method provides the LowLagMediaRecording object used to managed the recording.
    /// - Parameter encodingProfile: The encoding profile to use for the recording.
    /// - Parameter customSinkActivationId: The activatable class ID of the media extension for the custom media sink.
    /// - Parameter customSinkSettings: Contains properties of the media extension.
    /// - Returns: When this method completes, a LowLagMediaRecording object is returned which can be used to start the photo capture.
    public func prepareLowLagRecordToCustomSinkAsync(_ encodingProfile: WindowsMediaMediaProperties_MediaEncodingProfile?, _ customSinkActivationId: Swift.String, _ customSinkSettings: WindowsFoundationCollections_IPropertySet?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagMediaRecording?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagRecordToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings))
    }

    /// Initializes the low shutter lag photo capture and provides the LowLagPhotoCapture object used to manage the recording.
    /// - Parameter type: The encoding profile used for the image.
    /// - Returns: When this method completes, a LowLagPhotoCapture object is returned which can be used to start the photo capture.
    public func prepareLowLagPhotoCaptureAsync(_ type: WindowsMediaMediaProperties_ImageEncodingProperties?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagPhotoCapture?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagPhotoCaptureAsync(type))
    }

    /// Initializes the low shutter lag photo sequence capture and provides the LowLagPhotoSequenceCapture object used to manage the recording.
    /// - Parameter type: The encoding profile used for the image.
    /// - Returns: When this method completes, a LowLagPhotoSequenceCapture object is returned which can be used to start the photo sequence capture.
    public func prepareLowLagPhotoSequenceCaptureAsync(_ type: WindowsMediaMediaProperties_ImageEncodingProperties?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_LowLagPhotoSequenceCapture?> {
        try COM.NullResult.unwrap(_imediaCapture2.prepareLowLagPhotoSequenceCaptureAsync(type))
    }

    /// Asynchronously sets the media encoding properties.
    /// - Parameter mediaStreamType: The type of media data the stream represents, such as video or audio.
    /// - Parameter mediaEncodingProperties: The properties for the media encoding.
    /// - Parameter encoderProperties: The properties for the encoder.
    /// - Returns: Object that is used to control the asynchronous operation.
    public func setEncodingPropertiesAsync(_ mediaStreamType: WindowsMediaCapture_MediaStreamType, _ mediaEncodingProperties: WindowsMediaMediaProperties_IMediaEncodingProperties?, _ encoderProperties: WindowsMediaMediaProperties_MediaPropertySet?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCapture2.setEncodingPropertiesAsync(mediaStreamType, mediaEncodingProperties, encoderProperties))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the media capture object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Capture.IMediaCapture3 members

    /// Occurs when the capture device changes focus.
    public func focusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCapture?, WindowsMediaCapture_MediaCaptureFocusChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaCapture3.add_FocusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: focusChanged)
    }

    public func focusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaCapture3.remove_FocusChanged(token)
    }

    /// Occurs when a photo confirmation frame is captured.
    public func photoConfirmationCaptured(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCapture?, WindowsMediaCapture_PhotoConfirmationCapturedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaCapture3.add_PhotoConfirmationCaptured(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: photoConfirmationCaptured)
    }

    public func photoConfirmationCaptured(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaCapture3.remove_PhotoConfirmationCaptured(token)
    }

    /// Initializes the variable photo sequence capture and provides the VariablePhotoSequenceCapture object used to manage the recording.
    /// - Parameter type: The encoding profile used for the image.
    /// - Returns: When this method completes, a VariablePhotoSequenceCapture object is returned which can be used to start the photo sequence capture.
    public func prepareVariablePhotoSequenceCaptureAsync(_ type: WindowsMediaMediaProperties_ImageEncodingProperties?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureCore_VariablePhotoSequenceCapture?> {
        try COM.NullResult.unwrap(_imediaCapture3.prepareVariablePhotoSequenceCaptureAsync(type))
    }

    // MARK: Windows.Media.Capture.IMediaCapture4 members

    /// Gets the current stream state of the camera stream.
    /// - Returns: The current stream state of the camera stream.
    public var cameraStreamState: WindowsMediaDevices_CameraStreamState {
        get throws {
            try _imediaCapture4.get_CameraStreamState()
        }
    }

    /// Gets a value that indicates the current thermal status of the capture device.
    /// - Returns: A value that indicates the current thermal status of the capture device.
    public var thermalStatus: WindowsMediaCapture_MediaCaptureThermalStatus {
        get throws {
            try _imediaCapture4.get_ThermalStatus()
        }
    }

    /// Occurs when the state of the camera stream changes.
    public func cameraStreamStateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCapture?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaCapture4.add_CameraStreamStateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cameraStreamStateChanged)
    }

    public func cameraStreamStateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaCapture4.remove_CameraStreamStateChanged(token)
    }

    /// Occurs when the thermal status of the capture device changes.
    public func thermalStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCapture?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaCapture4.add_ThermalStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: thermalStatusChanged)
    }

    public func thermalStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaCapture4.remove_ThermalStatusChanged(token)
    }

    /// Adds an audio effect to the capture pipeline.
    /// - Parameter definition: The object containing the definition of the effect to be added.
    /// - Returns: An asynchronous operation that returns an IMediaExtension upon successful completion.
    public func addAudioEffectAsync(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws -> WindowsFoundation_IAsyncOperation<WindowsMedia_IMediaExtension?> {
        try COM.NullResult.unwrap(_imediaCapture4.addAudioEffectAsync(definition))
    }

    /// Adds a video effect to the capture pipeline.
    /// - Parameter definition: The object containing the definition of the effect to be added.
    /// - Parameter mediaStreamType: Specifies the streams to which the effect will be applied.
    /// - Returns: An asynchronous operation that returns an IMediaExtension upon successful completion.
    public func addVideoEffectAsync(_ definition: WindowsMediaEffects_IVideoEffectDefinition?, _ mediaStreamType: WindowsMediaCapture_MediaStreamType) throws -> WindowsFoundation_IAsyncOperation<WindowsMedia_IMediaExtension?> {
        try COM.NullResult.unwrap(_imediaCapture4.addVideoEffectAsync(definition, mediaStreamType))
    }

    /// Pauses an ongoing record operation.
    /// - Parameter behavior: A value indicating whether the media capture hardware resources should be preserved or released while recording is paused.
    /// - Returns: An asynchronous action.
    public func pauseRecordAsync(_ behavior: WindowsMediaDevices_MediaCapturePauseBehavior) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCapture4.pauseRecordAsync(behavior))
    }

    /// Resumes a paused recording operation.
    /// - Returns: An asynchronous operation.
    public func resumeRecordAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCapture4.resumeRecordAsync())
    }

    /// Gets a preview frame from the capture device.
    /// - Returns: An asynchronous operation that returns a VideoFrame on successful completion.
    public func getPreviewFrameAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMedia_VideoFrame?> {
        try COM.NullResult.unwrap(_imediaCapture4.getPreviewFrameAsync())
    }

    /// Gets a preview frame from the capture device, copied into the provided destination VideoFrame and converted into the destination frame's format.
    /// - Parameter destination: The video frame into which the preview frame will be copied.
    /// - Returns: An asynchronous operation that returns a VideoFrame on successful completion.
    public func getPreviewFrameAsync(_ destination: WindowsMedia_VideoFrame?) throws -> WindowsFoundation_IAsyncOperation<WindowsMedia_VideoFrame?> {
        try COM.NullResult.unwrap(_imediaCapture4.getPreviewFrameCopyAsync(destination))
    }

    /// Initializes the advanced photo capture and provides the AdvancedPhotoCapture object used to manage the recording.
    /// - Parameter encodingProperties: The encoding properties used for the resulting image.
    /// - Returns: An asynchronous operation that returns an AdvancedPhotoCapture object on successful completion.
    public func prepareAdvancedPhotoCaptureAsync(_ encodingProperties: WindowsMediaMediaProperties_ImageEncodingProperties?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_AdvancedPhotoCapture?> {
        try COM.NullResult.unwrap(_imediaCapture4.prepareAdvancedPhotoCaptureAsync(encodingProperties))
    }

    // MARK: Windows.Media.Capture.IMediaCapture5 members

    /// Gets a read-only dictionary of MediaFrameSource objects that can be used simultaneously to acquire media frames.
    /// - Returns: A read-only dictionary of MediaFrameSource objects that can be used simultaneously to acquire media frames.
    public var frameSources: WindowsFoundationCollections_IMapView<Swift.String, WindowsMediaCaptureFrames_MediaFrameSource?> {
        get throws {
            try COM.NullResult.unwrap(_imediaCapture5.get_FrameSources())
        }
    }

    /// Removes the specified effect from the capture pipeline.
    /// - Parameter effect: The effect to remove from the capture pipeline.
    /// - Returns: Returns an IAsyncAction object that is used to control the asynchronous operation.
    public func removeEffectAsync(_ effect: WindowsMedia_IMediaExtension?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaCapture5.removeEffectAsync(effect))
    }

    /// Pauses an ongoing media record operation and provides a MediaCapturePauseResult that can be used to help the user align the camera with the last captured frame when resuming recording.
    /// - Parameter behavior: A value indicating whether the media capture hardware resources should be preserved or released while recording is paused.
    /// - Returns: An asynchronous action that returns a MediaCapturePauseResult upon completion.
    public func pauseRecordWithResultAsync(_ behavior: WindowsMediaDevices_MediaCapturePauseBehavior) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_MediaCapturePauseResult?> {
        try COM.NullResult.unwrap(_imediaCapture5.pauseRecordWithResultAsync(behavior))
    }

    /// Asynchronously stops the media recording and provides a MediaCaptureStopResult that can be used to help the user align the camera with the last captured frame when restarting recording.
    /// - Returns: An asynchronous action that returns a MediaCaptureStopResult upon completion.
    public func stopRecordWithResultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCapture_MediaCaptureStopResult?> {
        try COM.NullResult.unwrap(_imediaCapture5.stopRecordWithResultAsync())
    }

    /// Creates a MediaFrameReader that is used to acquire frames from a MediaFrameSource.
    /// - Parameter inputSource: The media frame source from which the reader will acquire frames.
    /// - Returns: An asynchronous operation that returns a MediaFrameReader on completion.
    public func createFrameReaderAsync(_ inputSource: WindowsMediaCaptureFrames_MediaFrameSource?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameReader?> {
        try COM.NullResult.unwrap(_imediaCapture5.createFrameReaderAsync(inputSource))
    }

    /// Creates a MediaFrameReader that is used to acquire frames with the specified media encoding subtype from a MediaFrameSource.
    /// - Parameter inputSource: The media frame source from which the reader will acquire frames.
    /// - Parameter outputSubtype: A string specifying the requested media encoding subtype for the frames acquired by the frame reader. This value must be one of the strings defined by the properties of the MediaEncodingSubtypes class.
    /// - Returns: An asynchronous operation that returns a MediaFrameReader on completion.
    public func createFrameReaderAsync(_ inputSource: WindowsMediaCaptureFrames_MediaFrameSource?, _ outputSubtype: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameReader?> {
        try COM.NullResult.unwrap(_imediaCapture5.createFrameReaderWithSubtypeAsync(inputSource, outputSubtype))
    }

    /// Creates a MediaFrameReader that is used to acquire frames with the specified media encoding subtype and size from a MediaFrameSource.
    /// - Parameter inputSource: The media frame source from which the reader will acquire frames.
    /// - Parameter outputSubtype: A string specifying the requested media encoding subtype for the frames acquired by the frame reader. This value must be one of the strings defined by the properties of the MediaEncodingSubtypes class.
    /// - Parameter outputSize: An object specifying the requested size for the frames acquired by the frame reader.
    /// - Returns: An asynchronous operation that returns a MediaFrameReader on completion.
    public func createFrameReaderAsync(_ inputSource: WindowsMediaCaptureFrames_MediaFrameSource?, _ outputSubtype: Swift.String, _ outputSize: WindowsGraphicsImaging_BitmapSize) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameReader?> {
        try COM.NullResult.unwrap(_imediaCapture5.createFrameReaderWithSubtypeAndSizeAsync(inputSource, outputSubtype, outputSize))
    }

    // MARK: Windows.Media.Capture.IMediaCapture6 members

    /// Occurs when the exclusive control status of the capture device changes.
    public func captureDeviceExclusiveControlStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCapture?, WindowsMediaCapture_MediaCaptureDeviceExclusiveControlStatusChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaCapture6.add_CaptureDeviceExclusiveControlStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: captureDeviceExclusiveControlStatusChanged)
    }

    public func captureDeviceExclusiveControlStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaCapture6.remove_CaptureDeviceExclusiveControlStatusChanged(token)
    }

    public func createMultiSourceFrameReaderAsync(_ inputSources: WindowsFoundationCollections_IIterable<WindowsMediaCaptureFrames_MediaFrameSource?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MultiSourceMediaFrameReader?> {
        try COM.NullResult.unwrap(_imediaCapture6.createMultiSourceFrameReaderAsync(inputSources))
    }

    // MARK: Windows.Media.Capture.IMediaCapture7 members

    /// Creates a new instance of the MediaCaptureRelativePanelWatcher class, which monitors the panel associated with the provided DisplayRegion, so that the app receives notifications when the relative location of the panel changes.
    /// - Parameter captureMode: A value from the StreamingCaptureMode enumeration enumeration.
    /// - Parameter displayRegion: A DisplayRegion for which the associated panel is monitored for changes. Typically this display region will be the camera view finder UI element, so that the app is alerted if the relative location of the panel containing the view finder changes.
    /// - Returns: A new instance of the MediaCaptureRelativePanelWatcher class.
    public func createRelativePanelWatcher(_ captureMode: WindowsMediaCapture_StreamingCaptureMode, _ displayRegion: WindowsUIWindowManagement_DisplayRegion?) throws -> WindowsMediaCapture_MediaCaptureRelativePanelWatcher {
        try COM.NullResult.unwrap(_imediaCapture7.createRelativePanelWatcher(captureMode, displayRegion))
    }

    // MARK: Windows.Media.Capture.IMediaCaptureStatics members

    /// Gets a boolean value indicating whether video profiles are supported by the specified video capture device.
    /// - Parameter videoDeviceId: The identifier of the video device for which supported video profile support is queried. For information on getting the video device ID, see DeviceInformation.FindAllAsync.
    /// - Returns: True if video profiles are supported; otherwise, false.
    public static func isVideoProfileSupported(_ videoDeviceId: Swift.String) throws -> Swift.Bool {
        try _imediaCaptureStatics.isVideoProfileSupported(videoDeviceId)
    }

    /// Retrieves the list of all video profiles supported by the specified video capture device.
    /// - Parameter videoDeviceId: The identifier of the video device for which supported video profiles are queried. For information on getting the video device ID, see DeviceInformation.FindAllAsync.
    /// - Returns: The list of video profiles supported by the specified video capture device.
    public static func findAllVideoProfiles(_ videoDeviceId: Swift.String) throws -> WindowsFoundationCollections_IVectorView<WindowsMediaCapture_MediaCaptureVideoProfile?> {
        try COM.NullResult.unwrap(_imediaCaptureStatics.findAllVideoProfiles(videoDeviceId))
    }

    /// Retrieves the list of video profiles supported by the specified video capture device that can be used while another profile is used on a different capture device.
    /// - Parameter videoDeviceId: The identifier of the video device for which supported video profiles are queried. For information on getting the video device ID, see DeviceInformation.FindAllAsync.
    /// - Returns: The list of video profiles supported by the specified video capture device that support concurrency.
    public static func findConcurrentProfiles(_ videoDeviceId: Swift.String) throws -> WindowsFoundationCollections_IVectorView<WindowsMediaCapture_MediaCaptureVideoProfile?> {
        try COM.NullResult.unwrap(_imediaCaptureStatics.findConcurrentProfiles(videoDeviceId))
    }

    /// Retrieves the list of all video profiles supported by the specified video capture device that match the specified KnownVideoProfile value.
    /// - Parameter videoDeviceId: The identifier of the video device for which supported video profiles are queried. For information on getting the video device ID, see DeviceInformation.FindAllAsync.
    /// - Parameter name: A value specifying one of the profile names known by the system.
    /// - Returns: The list of video profiles supported by the specified video capture device that match the specified known profile name.
    public static func findKnownVideoProfiles(_ videoDeviceId: Swift.String, _ name: WindowsMediaCapture_KnownVideoProfile) throws -> WindowsFoundationCollections_IVectorView<WindowsMediaCapture_MediaCaptureVideoProfile?> {
        try COM.NullResult.unwrap(_imediaCaptureStatics.findKnownVideoProfiles(videoDeviceId, name))
    }

    // MARK: Implementation details

    private var _imediaCaptureVideoPreview_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureVideoPreview>? = nil

    internal var _imediaCaptureVideoPreview: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureVideoPreview> {
        get throws {
            try _imediaCaptureVideoPreview_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureVideoPreview.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureVideoPreview.self)
            }
        }
    }

    private var _imediaCapture2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture2>? = nil

    internal var _imediaCapture2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture2> {
        get throws {
            try _imediaCapture2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture2.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _imediaCapture3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture3>? = nil

    internal var _imediaCapture3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture3> {
        get throws {
            try _imediaCapture3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture3.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture3.self)
            }
        }
    }

    private var _imediaCapture4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture4>? = nil

    internal var _imediaCapture4: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture4> {
        get throws {
            try _imediaCapture4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture4.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture4.self)
            }
        }
    }

    private var _imediaCapture5_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture5>? = nil

    internal var _imediaCapture5: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture5> {
        get throws {
            try _imediaCapture5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture5.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture5.self)
            }
        }
    }

    private var _imediaCapture6_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture6>? = nil

    internal var _imediaCapture6: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture6> {
        get throws {
            try _imediaCapture6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture6.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture6.self)
            }
        }
    }

    private var _imediaCapture7_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture7>? = nil

    internal var _imediaCapture7: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCapture7> {
        get throws {
            try _imediaCapture7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCapture_IMediaCapture7.iid).cast(to: CWinRT.SWRT_WindowsMediaCapture_IMediaCapture7.self)
            }
        }
    }

    deinit {
        _imediaCaptureVideoPreview_storage?.release()
        _imediaCapture2_storage?.release()
        _iclosable_storage?.release()
        _imediaCapture3_storage?.release()
        _imediaCapture4_storage?.release()
        _imediaCapture5_storage?.release()
        _imediaCapture6_storage?.release()
        _imediaCapture7_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Capture.MediaCapture", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imediaCaptureStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureStatics>? = nil

    internal static var _imediaCaptureStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureStatics> {
        get throws {
            try _imediaCaptureStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Capture.MediaCapture", id: CWinRT.SWRT_WindowsMediaCapture_IMediaCaptureStatics.iid)
            }
        }
    }
}