// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a full window UI for capturing audio, video, and photos from a camera. As well as controls for trimming video, time delayed capture, and camera settings.
public final class WindowsMediaCapture_CameraCaptureUI: WindowsRuntime.WinRTImport<WindowsMediaCapture_CameraCaptureUIProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaCapture_CameraCaptureUIProjection.self))
    }

    // MARK: Windows.Media.Capture.ICameraCaptureUI members

    /// Provides settings for capturing photos. The settings include aspect ratio, image size, format, resolution, and whether or not cropping is allowed by the user interface (UI).
    /// - Returns: An object containing settings for capturing photos.
    public var photoSettings: WindowsMediaCapture_CameraCaptureUIPhotoCaptureSettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PhotoSettings())
        }
    }

    /// Provides settings for capturing videos. The settings include format, maximum resolution, maximum duration, and whether or not to allow trimming.
    /// - Returns: An object that provides settings for capturing videos.
    public var videoSettings: WindowsMediaCapture_CameraCaptureUIVideoCaptureSettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoSettings())
        }
    }

    /// Launches the CameraCaptureUI user interface.
    /// - Parameter mode: Specifies whether the user interface that will be shown allows the user to capture a photo, capture a video, or capture both photos and videos.
    /// - Returns: When this operation completes, a StorageFile object is returned.
    public func captureFileAsync(_ mode: WindowsMediaCapture_CameraCaptureUIMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.captureFileAsync(mode))
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Capture.CameraCaptureUI", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}