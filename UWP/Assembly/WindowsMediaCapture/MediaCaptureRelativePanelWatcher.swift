// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Monitors the panel associated with a DisplayRegion, so that the app receives notifications when the relative location of the panel changes.
public final class WindowsMediaCapture_MediaCaptureRelativePanelWatcher: WindowsRuntime.WinRTImport<WindowsMediaCapture_MediaCaptureRelativePanelWatcherProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Capture.IMediaCaptureRelativePanelWatcher members

    /// Gets the relative panel that the MediaCaptureRelativePanelWatcher monitors for changes.
    /// - Returns: A value from the Windows.Devices.Enumeration.Panel enumeration, indicating the relative panel that the MediaCaptureRelativePanelWatcher monitors for changes.
    public var relativePanel: WindowsDevicesEnumeration_Panel {
        get throws {
            try _interop.get_RelativePanel()
        }
    }

    /// Raised when the relative location of the panel being monitored by the MediaCaptureRelativePanelWatcher changes.
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCapture_MediaCaptureRelativePanelWatcher?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: changed)
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// Starts the MediaCaptureRelativePanelWatcher monitoring of the relative panel location of the associated DisplayRegion.
    public func start() throws {
        try _interop.start()
    }

    /// Stops the MediaCaptureRelativePanelWatcher monitoring of the relative panel location of the associated DisplayRegion.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the relative panel watcher and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }
}