// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a holographic scene, with one or more holographic cameras rendering its content.
public final class WindowsGraphicsHolographic_HolographicSpace: WindowsRuntime.WinRTImport<WindowsGraphicsHolographic_HolographicSpaceProjection> {
    // MARK: Windows.Graphics.Holographic.IHolographicSpace members

    /// Gets the identifier of the graphics adapter to be used when displaying holographic content to the default HolographicDisplay.
    /// - Returns: The identifier.
    public var primaryAdapterId: WindowsGraphicsHolographic_HolographicAdapterId {
        get throws {
            try _interop.get_PrimaryAdapterId()
        }
    }

    /// Occurs when a HolographicCamera is added to the current HolographicSpace.
    public func cameraAdded(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsHolographic_HolographicSpace?, WindowsGraphicsHolographic_HolographicSpaceCameraAddedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CameraAdded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cameraAdded)
    }

    public func cameraAdded(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CameraAdded(cookie)
    }

    /// Occurs when a HolographicCamera is removed from the current HolographicSpace.
    public func cameraRemoved(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsHolographic_HolographicSpace?, WindowsGraphicsHolographic_HolographicSpaceCameraRemovedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CameraRemoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cameraRemoved)
    }

    public func cameraRemoved(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CameraRemoved(cookie)
    }

    /// Assigns the IDirect3DDevice that will display holographic content. An error will occur if the app creates an inappropriate device.
    /// - Parameter value: The Direct3D device.
    public func setDirect3D11Device(_ value: WindowsGraphicsDirectXDirect3D11_IDirect3DDevice?) throws {
        try _interop.setDirect3D11Device(value)
    }

    /// Creates a HolographicFrame for the next frame to display.
    /// - Returns: The next frame.
    public func createNextFrame() throws -> WindowsGraphicsHolographic_HolographicFrame {
        try COM.NullResult.unwrap(_interop.createNextFrame())
    }

    // MARK: Windows.Graphics.Holographic.IHolographicSpace2 members

    /// Describes whether the user is present within the headset to view and interact with this HolographicSpace.
    /// - Returns: The user presence.
    public var userPresence: WindowsGraphicsHolographic_HolographicSpaceUserPresence {
        get throws {
            try _iholographicSpace2.get_UserPresence()
        }
    }

    /// Occurs when the user's presence within the headset or ability to view and interact with this HolographicSpace changes.
    public func userPresenceChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsHolographic_HolographicSpace?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iholographicSpace2.add_UserPresenceChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: userPresenceChanged)
    }

    public func userPresenceChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iholographicSpace2.remove_UserPresenceChanged(token)
    }

    /// Blocks the current thread until the right time to begin rendering the next frame.
    public func waitForNextFrameReady() throws {
        try _iholographicSpace2.waitForNextFrameReady()
    }

    /// Blocks the current thread until the right time to begin rendering the next frame, with the specified head start.
    /// - Parameter requestedHeadStartDuration: The amount of extra head start time to wake up early.
    public func waitForNextFrameReadyWithHeadStart(_ requestedHeadStartDuration: WindowsFoundation_TimeSpan) throws {
        try _iholographicSpace2.waitForNextFrameReadyWithHeadStart(requestedHeadStartDuration)
    }

    /// Creates an object to monitor an independent stream of frame presentation reports from this HolographicSpace.
    /// - Parameter maxQueuedReports: The maximum number of frame reports that can queue up without being read before reports are discarded.
    /// - Returns: The frame presentation monitor.
    public func createFramePresentationMonitor(_ maxQueuedReports: Swift.UInt32) throws -> WindowsGraphicsHolographic_HolographicFramePresentationMonitor {
        try COM.NullResult.unwrap(_iholographicSpace2.createFramePresentationMonitor(maxQueuedReports))
    }

    // MARK: Windows.Graphics.Holographic.IHolographicSpace3 members

    /// Creates a HolographicFrameScanoutMonitor that allows Windows Mixed Reality applications to monitor detailed performance and timing information about the platform in real time.
    /// - Parameter maxQueuedReports: The maximum number of HolographicFrameScanoutReport objects that will be buffered by the system at any one time.
    /// - Returns: The created HolographicFrameScanoutMonitor.
    public func createFrameScanoutMonitor(_ maxQueuedReports: Swift.UInt32) throws -> WindowsGraphicsHolographic_HolographicFrameScanoutMonitor {
        try COM.NullResult.unwrap(_iholographicSpace3.createFrameScanoutMonitor(maxQueuedReports))
    }

    // MARK: Windows.Graphics.Holographic.IHolographicSpaceStatics3 members

    /// Gets whether the current system has been configured by the user for Mixed Reality headsets.
    /// - Returns: Whether headsets are configured by the user.
    public static var isConfigured: Swift.Bool {
        get throws {
            try _iholographicSpaceStatics3.get_IsConfigured()
        }
    }

    // MARK: Windows.Graphics.Holographic.IHolographicSpaceStatics2 members

    /// Gets whether a Mixed Reality headset is ready for holographic rendering.
    /// - Returns: Whether a headset is ready.
    public static var isAvailable: Swift.Bool {
        get throws {
            try _iholographicSpaceStatics2.get_IsAvailable()
        }
    }

    /// Gets whether the current system supports Mixed Reality headsets.
    /// - Returns: Whether headsets are supported.
    public static var isSupported: Swift.Bool {
        get throws {
            try _iholographicSpaceStatics2.get_IsSupported()
        }
    }

    /// Occurs when a configured and ready Mixed Reality headset is attached or detached from the system.
    public static func isAvailableChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iholographicSpaceStatics2.add_IsAvailableChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isAvailableChanged)
    }

    public static func isAvailableChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iholographicSpaceStatics2.remove_IsAvailableChanged(token)
    }

    // MARK: Windows.Graphics.Holographic.IHolographicSpaceStatics members

    /// Creates a HolographicSpace that corresponds with the specified window's CoreApplicationView.
    /// - Parameter window: The window to create a HolographicSpace for.
    /// - Returns: The HolographicSpace.
    public static func createForCoreWindow(_ window: WindowsUICore_CoreWindow?) throws -> WindowsGraphicsHolographic_HolographicSpace {
        try COM.NullResult.unwrap(_iholographicSpaceStatics.createForCoreWindow(window))
    }

    // MARK: Implementation details

    private var _iholographicSpace2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace2>? = nil

    internal var _iholographicSpace2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace2> {
        get throws {
            try _iholographicSpace2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace2.iid).cast(to: CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace2.self)
            }
        }
    }

    private var _iholographicSpace3_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace3>? = nil

    internal var _iholographicSpace3: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace3> {
        get throws {
            try _iholographicSpace3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace3.iid).cast(to: CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpace3.self)
            }
        }
    }

    deinit {
        _iholographicSpace2_storage?.release()
        _iholographicSpace3_storage?.release()
    }

    private static var _iholographicSpaceStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics3>? = nil

    internal static var _iholographicSpaceStatics3: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics3> {
        get throws {
            try _iholographicSpaceStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Holographic.HolographicSpace", id: CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics3.iid)
            }
        }
    }

    private static var _iholographicSpaceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics2>? = nil

    internal static var _iholographicSpaceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics2> {
        get throws {
            try _iholographicSpaceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Holographic.HolographicSpace", id: CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics2.iid)
            }
        }
    }

    private static var _iholographicSpaceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics>? = nil

    internal static var _iholographicSpaceStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics> {
        get throws {
            try _iholographicSpaceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Holographic.HolographicSpace", id: CWinRT.SWRT_WindowsGraphicsHolographic_IHolographicSpaceStatics.iid)
            }
        }
    }
}