// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the Microsoft GS wavetable software synthesizer, included in Windows. This synthesizer provides a Roland GS sound set, which includes and extends the General MIDI sound set.
public final class WindowsDevicesMidi_MidiSynthesizer: WindowsRuntime.WinRTImport<WindowsDevicesMidi_MidiSynthesizerProjection>, WindowsDevicesMidi_IMidiOutPortProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Midi.IMidiSynthesizer members

    /// Gets the audio output device being used by this instance of the Microsoft MIDI synthesizer.
    /// - Returns: An object that represents the audio output device. Use the methods and properties of this object to further identify the device.
    public var audioDevice: WindowsDevicesEnumeration_DeviceInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AudioDevice())
        }
    }

    /// Gets or sets the output volume of this instance of the Microsoft MIDI synthesizer.
    /// - Returns: The synthesizer's output volume, a number between 0 and 1, inclusive.
    public var volume: Swift.Double {
        get throws {
            try _interop.get_Volume()
        }
    }

    /// Gets or sets the output volume of this instance of the Microsoft MIDI synthesizer.
    /// - Returns: The synthesizer's output volume, a number between 0 and 1, inclusive.
    public func volume(_ value: Swift.Double) throws {
        try _interop.put_Volume(value)
    }

    // MARK: Windows.Devices.Midi.IMidiOutPort members

    /// Gets the device ID of the Microsoft MIDI synthesizer. Note that all instances of the synthesizer have the same ID.
    /// - Returns: The device ID of this instance of the Microsoft MIDI synthesizer.
    public var deviceId: Swift.String {
        get throws {
            try _imidiOutPort.get_DeviceId()
        }
    }

    /// Sends a MIDI message through the Microsoft MIDI synthesizer's out port.
    /// - Parameter midiMessage: The MIDI message to send.
    public func sendMessage(_ midiMessage: WindowsDevicesMidi_IMidiMessage?) throws {
        try _imidiOutPort.sendMessage(midiMessage)
    }

    /// Sends an array of bytes through the synthesizer's out port. This enables you to send your data as a byte array instead of as a defined MIDI message.
    /// - Parameter midiData: The array of bytes to send.
    public func sendBuffer(_ midiData: WindowsStorageStreams_IBuffer?) throws {
        try _imidiOutPort.sendBuffer(midiData)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes this instance of the Microsoft MIDI synthesizer. It is a best practice for the caller to use this method to clear resources used by the MIDI object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Midi.IMidiSynthesizerStatics members

    /// Creates a new instance of the Microsoft MIDI synthesizer that uses the system's default audio output device.
    /// - Returns: An instance of the Windows MIDI synthesizer.
    public static func createAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesMidi_MidiSynthesizer?> {
        try COM.NullResult.unwrap(_imidiSynthesizerStatics.createAsync())
    }

    /// Creates a new instance of the Microsoft MIDI synthesizer with a specified audio output device.
    /// - Parameter audioDevice: The audio output device.
    /// - Returns: An instance of the Microsoft MIDI synthesizer.
    public static func createAsync(_ audioDevice: WindowsDevicesEnumeration_DeviceInformation?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesMidi_MidiSynthesizer?> {
        try COM.NullResult.unwrap(_imidiSynthesizerStatics.createFromAudioDeviceAsync(audioDevice))
    }

    /// Determines whether a particular device is an instance of the Microsoft MIDI synthesizer. When all MIDI out ports on the system are enumerated, this method can be used to identify which of them is the Microsoft MIDI synthesizer.
    /// - Parameter midiDevice: An object that represents the device in question.
    /// - Returns: **True** if the device is the Microsoft MIDI synthesizer; otherwise, **false**.
    public static func isSynthesizer(_ midiDevice: WindowsDevicesEnumeration_DeviceInformation?) throws -> Swift.Bool {
        try _imidiSynthesizerStatics.isSynthesizer(midiDevice)
    }

    // MARK: Implementation details

    private var _imidiOutPort_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiOutPort>? = nil

    internal var _imidiOutPort: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiOutPort> {
        get throws {
            try _imidiOutPort_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesMidi_IMidiOutPort.iid).cast(to: CWinRT.SWRT_WindowsDevicesMidi_IMidiOutPort.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _imidiOutPort_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _imidiSynthesizerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiSynthesizerStatics>? = nil

    internal static var _imidiSynthesizerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiSynthesizerStatics> {
        get throws {
            try _imidiSynthesizerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Midi.MidiSynthesizer", id: CWinRT.SWRT_WindowsDevicesMidi_IMidiSynthesizerStatics.iid)
            }
        }
    }
}