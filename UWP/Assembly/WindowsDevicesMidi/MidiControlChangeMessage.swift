// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a MIDI message that specifies a control change.
public final class WindowsDevicesMidi_MidiControlChangeMessage: WindowsRuntime.WinRTImport<WindowsDevicesMidi_MidiControlChangeMessageProjection>, WindowsDevicesMidi_IMidiMessageProtocol {
    // MARK: Windows.Devices.Midi.IMidiControlChangeMessageFactory members

    public convenience init(_ channel: Swift.UInt8, _ controller: Swift.UInt8, _ controlValue: Swift.UInt8) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imidiControlChangeMessageFactory.createMidiControlChangeMessage(channel, controller, controlValue)))
    }

    // MARK: Windows.Devices.Midi.IMidiControlChangeMessage members

    /// Gets the channel from 0-15 that this message applies to.
    /// - Returns: The channel from 0-15 that this message applies to.
    public var channel: Swift.UInt8 {
        get throws {
            try _interop.get_Channel()
        }
    }

    /// Gets the value from 0-127 to apply to the controller.
    /// - Returns: The value from 0-127 to apply to the controller.
    public var controlValue: Swift.UInt8 {
        get throws {
            try _interop.get_ControlValue()
        }
    }

    /// Gets controller from 0-127 to receive this message.
    /// - Returns: The controller from 0-127 to receive this message.
    public var controller: Swift.UInt8 {
        get throws {
            try _interop.get_Controller()
        }
    }

    // MARK: Windows.Devices.Midi.IMidiMessage members

    /// Gets the array of bytes associated with the MIDI message, including status byte.
    /// - Returns: The array of bytes associated with the MIDI message.
    public var rawData: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_imidiMessage.get_RawData())
        }
    }

    /// Gets the duration from when the MidiInPort was created to the time the message was received. For messages being sent to a MidiOutPort, this value has no meaning.
    /// - Returns: The duration from when the MidiInPort was created to the time the message was received.
    public var timestamp: WindowsFoundation_TimeSpan {
        get throws {
            try _imidiMessage.get_Timestamp()
        }
    }

    /// Gets the type of this MIDI message.
    /// - Returns: The MIDI message type.
    public var type: WindowsDevicesMidi_MidiMessageType {
        get throws {
            try _imidiMessage.get_Type()
        }
    }

    // MARK: Implementation details

    private var _imidiMessage_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiMessage>? = nil

    internal var _imidiMessage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiMessage> {
        get throws {
            try _imidiMessage_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesMidi_IMidiMessage.iid).cast(to: CWinRT.SWRT_WindowsDevicesMidi_IMidiMessage.self)
            }
        }
    }

    deinit {
        _imidiMessage_storage?.release()
    }

    private static var _imidiControlChangeMessageFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiControlChangeMessageFactory>? = nil

    internal static var _imidiControlChangeMessageFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesMidi_IMidiControlChangeMessageFactory> {
        get throws {
            try _imidiControlChangeMessageFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Midi.MidiControlChangeMessage", id: CWinRT.SWRT_WindowsDevicesMidi_IMidiControlChangeMessageFactory.iid)
            }
        }
    }
}