// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Base class for clipping objects such as InsetClip.
open class WindowsUIComposition_CompositionClip: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Composition.ICompositionClip2 members

    /// The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip.
    /// - Returns: The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip. An AnchorPoint value of (0, 0) refers to the top-left corner of the untransformed clip and a value of (1, 1) refers to the bottom-right corner. Negative values and values greater than one are accepted but will result in an AnchorPoint that is outside the boundaries of the original, untransformed clip.
    public var anchorPoint: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_AnchorPoint()
        }
    }

    /// The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip.
    /// - Returns: The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip. An AnchorPoint value of (0, 0) refers to the top-left corner of the untransformed clip and a value of (1, 1) refers to the bottom-right corner. Negative values and values greater than one are accepted but will result in an AnchorPoint that is outside the boundaries of the original, untransformed clip.
    public func anchorPoint(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_AnchorPoint(value)
    }

    /// The point about which rotation or scaling occurs.
    /// - Returns: The point about which rotation or scaling occurs. Value is in pixels within the local coordinate space of the visual on which the clip is applied.
    public var centerPoint: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_CenterPoint()
        }
    }

    /// The point about which rotation or scaling occurs.
    /// - Returns: The point about which rotation or scaling occurs. Value is in pixels within the local coordinate space of the visual on which the clip is applied.
    public func centerPoint(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_CenterPoint(value)
    }

    /// The offset of the clip relative to the visual on which the clip is applied.
    /// - Returns: The offset of the clip relative to the visual on which the clip is applied. By default, the Offset value on a clip is (0, 0).
    public var offset: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_Offset()
        }
    }

    /// The offset of the clip relative to the visual on which the clip is applied.
    /// - Returns: The offset of the clip relative to the visual on which the clip is applied. By default, the Offset value on a clip is (0, 0).
    public func offset(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_Offset(value)
    }

    /// The angle of rotation applied to the clip, in radians.
    /// - Returns: The angle of rotation applied to the clip, in radians. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngle values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in degrees, use CompositionClip.RotationAngleInDegrees.
    public var rotationAngle: Swift.Float {
        get throws {
            try _icompositionClip2.get_RotationAngle()
        }
    }

    /// The angle of rotation applied to the clip, in radians.
    /// - Returns: The angle of rotation applied to the clip, in radians. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngle values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in degrees, use CompositionClip.RotationAngleInDegrees.
    public func rotationAngle(_ value: Swift.Float) throws {
        try _icompositionClip2.put_RotationAngle(value)
    }

    /// The angle of rotation applied to the clip, in degrees.
    /// - Returns: The angle of rotation applied to the clip, in degrees. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngleInDegrees values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in radians, use CompositionClip.RotationAngle.
    public var rotationAngleInDegrees: Swift.Float {
        get throws {
            try _icompositionClip2.get_RotationAngleInDegrees()
        }
    }

    /// The angle of rotation applied to the clip, in degrees.
    /// - Returns: The angle of rotation applied to the clip, in degrees. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngleInDegrees values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in radians, use CompositionClip.RotationAngle.
    public func rotationAngleInDegrees(_ value: Swift.Float) throws {
        try _icompositionClip2.put_RotationAngleInDegrees(value)
    }

    /// The scale to apply to the clip.
    /// - Returns: The scale to apply to the clip. The scale value is a multiplier of the clip's size. By default, the Scale value on a clip is (1, 1).
    public var scale: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_Scale()
        }
    }

    /// The scale to apply to the clip.
    /// - Returns: The scale to apply to the clip. The scale value is a multiplier of the clip's size. By default, the Scale value on a clip is (1, 1).
    public func scale(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_Scale(value)
    }

    /// The 3x2 transformation matrix to apply to the clip.
    /// - Returns: The transformation matrix to apply to the clip. By default, the TransformMatrix is set to:
    public var transformMatrix: WindowsFoundationNumerics_Matrix3x2 {
        get throws {
            try _icompositionClip2.get_TransformMatrix()
        }
    }

    /// The 3x2 transformation matrix to apply to the clip.
    /// - Returns: The transformation matrix to apply to the clip. By default, the TransformMatrix is set to:
    public func transformMatrix(_ value: WindowsFoundationNumerics_Matrix3x2) throws {
        try _icompositionClip2.put_TransformMatrix(value)
    }

    // MARK: Implementation details

    private var _icompositionClip_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClip>? = nil

    internal var _icompositionClip: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClip> {
        get throws {
            try _icompositionClip_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionClip.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionClip.self)
            }
        }
    }

    private var _icompositionClip2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClip2>? = nil

    internal var _icompositionClip2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClip2> {
        get throws {
            try _icompositionClip2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionClip2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionClip2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIComposition_ICompositionClip>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icompositionClip_storage?.release()
        _icompositionClip2_storage?.release()
    }

    private static var _icompositionClipFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClipFactory>? = nil

    internal static var _icompositionClipFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionClipFactory> {
        get throws {
            try _icompositionClipFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionClip", id: CWinRT.SWRT_WindowsUIComposition_ICompositionClipFactory.iid)
            }
        }
    }
}