// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A drop shadow cast by a SpriteVisual or LayerVisual.
public final class WindowsUIComposition_DropShadow: WindowsRuntime.WinRTImport<WindowsUIComposition_DropShadowProjection> {
    // MARK: Windows.UI.Composition.IDropShadow members

    /// The radius of the Gaussian blur used to generate the shadow. Animatable.
    /// - Returns: The radius of the Gaussian blur used to generate the shadow. Defaults to 9.0f. Specifying a value of 0 will result in no blur occurring.
    public var blurRadius: Swift.Float {
        get throws {
            try _interop.get_BlurRadius()
        }
    }

    /// The radius of the Gaussian blur used to generate the shadow. Animatable.
    /// - Returns: The radius of the Gaussian blur used to generate the shadow. Defaults to 9.0f. Specifying a value of 0 will result in no blur occurring.
    public func blurRadius(_ value: Swift.Float) throws {
        try _interop.put_BlurRadius(value)
    }

    /// The color of the shadow. Animatable.
    /// - Returns: The color of the shadow. Default color is Colors.Black.
    public var color: WindowsUI_Color {
        get throws {
            try _interop.get_Color()
        }
    }

    /// The color of the shadow. Animatable.
    /// - Returns: The color of the shadow. Default color is Colors.Black.
    public func color(_ value: WindowsUI_Color) throws {
        try _interop.put_Color(value)
    }

    /// Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush. Animatable.
    /// - Returns: Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush.
    public var mask: WindowsUIComposition_CompositionBrush {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Mask())
        }
    }

    /// Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush. Animatable.
    /// - Returns: Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush.
    public func mask(_ value: WindowsUIComposition_CompositionBrush?) throws {
        try _interop.put_Mask(value)
    }

    /// Offset of the shadow relative to its SpriteVisual. Animatable.
    /// - Returns: Offset of the shadow relative to its SpriteVisual.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Offset()
        }
    }

    /// Offset of the shadow relative to its SpriteVisual. Animatable.
    /// - Returns: Offset of the shadow relative to its SpriteVisual.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Offset(value)
    }

    /// The opacity of the shadow. Animatable.
    /// - Returns: The opacity of the shadow.
    public var opacity: Swift.Float {
        get throws {
            try _interop.get_Opacity()
        }
    }

    /// The opacity of the shadow. Animatable.
    /// - Returns: The opacity of the shadow.
    public func opacity(_ value: Swift.Float) throws {
        try _interop.put_Opacity(value)
    }

    // MARK: Windows.UI.Composition.IDropShadow2 members

    /// Used to define the shadow masking policy to be used for the shadow.
    /// - Returns: The masking policy to apply to the shadow.
    public var sourcePolicy: WindowsUIComposition_CompositionDropShadowSourcePolicy {
        get throws {
            try _idropShadow2.get_SourcePolicy()
        }
    }

    /// Used to define the shadow masking policy to be used for the shadow.
    /// - Returns: The masking policy to apply to the shadow.
    public func sourcePolicy(_ value: WindowsUIComposition_CompositionDropShadowSourcePolicy) throws {
        try _idropShadow2.put_SourcePolicy(value)
    }

    // MARK: Implementation details

    private var _idropShadow2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IDropShadow2>? = nil

    internal var _idropShadow2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IDropShadow2> {
        get throws {
            try _idropShadow2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IDropShadow2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IDropShadow2.self)
            }
        }
    }

    deinit {
        _idropShadow2_storage?.release()
    }
}