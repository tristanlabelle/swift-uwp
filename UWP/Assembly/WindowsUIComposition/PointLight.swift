// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A point source of light that emanates light in all directions.
public final class WindowsUIComposition_PointLight: WindowsRuntime.WinRTImport<WindowsUIComposition_PointLightProjection> {
    // MARK: Windows.UI.Composition.IPointLight members

    /// Color of the light.
    /// - Returns: Color of the light.
    public var color: WindowsUI_Color {
        get throws {
            try _interop.get_Color()
        }
    }

    /// Color of the light.
    /// - Returns: Color of the light.
    public func color(_ value: WindowsUI_Color) throws {
        try _interop.put_Color(value)
    }

    /// The constant coefficient in the light's attenuation equation. Controls light intensity.
    /// - Returns: The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public var constantAttenuation: Swift.Float {
        get throws {
            try _interop.get_ConstantAttenuation()
        }
    }

    /// The constant coefficient in the light's attenuation equation. Controls light intensity.
    /// - Returns: The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public func constantAttenuation(_ value: Swift.Float) throws {
        try _interop.put_ConstantAttenuation(value)
    }

    /// The Visual used to determine the light's offset. The light's offset property is relative to this Visual's coordinate space.
    /// - Returns: The Visual used to determine the light's offset.
    public var coordinateSpace: WindowsUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CoordinateSpace())
        }
    }

    /// The Visual used to determine the light's offset. The light's offset property is relative to this Visual's coordinate space.
    /// - Returns: The Visual used to determine the light's offset.
    public func coordinateSpace(_ value: WindowsUIComposition_Visual?) throws {
        try _interop.put_CoordinateSpace(value)
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls-off with distance.
    /// - Returns: The linear coefficient in the light's attenuation equation that determines how the light falls-off with distance. Range is from 0 to infinity.
    public var linearAttenuation: Swift.Float {
        get throws {
            try _interop.get_LinearAttenuation()
        }
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls-off with distance.
    /// - Returns: The linear coefficient in the light's attenuation equation that determines how the light falls-off with distance. Range is from 0 to infinity.
    public func linearAttenuation(_ value: Swift.Float) throws {
        try _interop.put_LinearAttenuation(value)
    }

    /// Offset of the light source relative to its coordinate space Visual.
    /// - Returns: Offset of the light source relative to its coordinate space Visual.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Offset()
        }
    }

    /// Offset of the light source relative to its coordinate space Visual.
    /// - Returns: Offset of the light source relative to its coordinate space Visual.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Offset(value)
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance.
    /// - Returns: The quadratic portion of the attenuation equation that determines how the light falls off with distance. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public var quadraticAttenuation: Swift.Float {
        get throws {
            try _interop.get_QuadraticAttenuation()
        }
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance.
    /// - Returns: The quadratic portion of the attenuation equation that determines how the light falls off with distance. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public func quadraticAttenuation(_ value: Swift.Float) throws {
        try _interop.put_QuadraticAttenuation(value)
    }

    // MARK: Windows.UI.Composition.IPointLight2 members

    /// Gets or sets the intensity of the light.
    /// - Returns: The intensity of the light.
    public var intensity: Swift.Float {
        get throws {
            try _ipointLight2.get_Intensity()
        }
    }

    /// Gets or sets the intensity of the light.
    /// - Returns: The intensity of the light.
    public func intensity(_ value: Swift.Float) throws {
        try _ipointLight2.put_Intensity(value)
    }

    // MARK: Windows.UI.Composition.IPointLight3 members

    /// Gets or sets the maximum range at which this light is effective.
    /// - Returns: The maximum range at which this light is effective. The default is 0.0.
    public var maxAttenuationCutoff: Swift.Float {
        get throws {
            try _ipointLight3.get_MaxAttenuationCutoff()
        }
    }

    /// Gets or sets the maximum range at which this light is effective.
    /// - Returns: The maximum range at which this light is effective. The default is 0.0.
    public func maxAttenuationCutoff(_ value: Swift.Float) throws {
        try _ipointLight3.put_MaxAttenuationCutoff(value)
    }

    /// Gets or sets the minimum range at which this light is effective.
    /// - Returns: The minimum range at which this light is effective. The default is 0.0.
    public var minAttenuationCutoff: Swift.Float {
        get throws {
            try _ipointLight3.get_MinAttenuationCutoff()
        }
    }

    /// Gets or sets the minimum range at which this light is effective.
    /// - Returns: The minimum range at which this light is effective. The default is 0.0.
    public func minAttenuationCutoff(_ value: Swift.Float) throws {
        try _ipointLight3.put_MinAttenuationCutoff(value)
    }

    // MARK: Implementation details

    private var _ipointLight2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IPointLight2>? = nil

    internal var _ipointLight2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IPointLight2> {
        get throws {
            try _ipointLight2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IPointLight2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IPointLight2.self)
            }
        }
    }

    private var _ipointLight3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IPointLight3>? = nil

    internal var _ipointLight3: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IPointLight3> {
        get throws {
            try _ipointLight3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IPointLight3.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IPointLight3.self)
            }
        }
    }

    deinit {
        _ipointLight2_storage?.release()
        _ipointLight3_storage?.release()
    }
}