// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Base class of the composition API representing a node in the visual tree structure.
open class WindowsUIComposition_CompositionObject: WindowsRuntime.WinRTComposableClass, WindowsFoundation_IClosableProtocol, WindowsUIComposition_IAnimationObjectProtocol {
    // MARK: Windows.UI.Composition.ICompositionObject members

    /// The Compositor used to create this CompositionObject.
    /// - Returns: The Compositor used to create this CompositionObject.
    public var compositor: WindowsUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Compositor())
        }
    }

    /// The dispatcher for the CompositionObject.
    /// - Returns: The dispatcher for the CompositionObject.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Dispatcher())
        }
    }

    /// The collection of properties associated with the CompositionObject.
    /// - Returns: The collection of properties associated with the CompositionObject.
    public var properties: WindowsUIComposition_CompositionPropertySet {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Properties())
        }
    }

    /// Connects an animation with the specified property of the object and starts the animation.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public func startAnimation(_ propertyName: Swift.String, _ animation: WindowsUIComposition_CompositionAnimation?) throws {
        try _icompositionObject.startAnimation(propertyName, animation)
    }

    /// Disconnects an animation from the specified property and stops the animation.
    /// - Parameter propertyName: The name of the property to disconnect the animation from.
    public func stopAnimation(_ propertyName: Swift.String) throws {
        try _icompositionObject.stopAnimation(propertyName)
    }

    // MARK: Windows.UI.Composition.ICompositionObject2 members

    /// A string to associate with the CompositionObject.
    /// - Returns: A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public var comment: Swift.String {
        get throws {
            try _icompositionObject2.get_Comment()
        }
    }

    /// A string to associate with the CompositionObject.
    /// - Returns: A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public func comment(_ value: Swift.String) throws {
        try _icompositionObject2.put_Comment(value)
    }

    /// The collection of implicit animations attached to this object.
    /// - Returns: The collection of implicit animations attached to this object.
    public var implicitAnimations: WindowsUIComposition_ImplicitAnimationCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject2.get_ImplicitAnimations())
        }
    }

    /// The collection of implicit animations attached to this object.
    /// - Returns: The collection of implicit animations attached to this object.
    public func implicitAnimations(_ value: WindowsUIComposition_ImplicitAnimationCollection?) throws {
        try _icompositionObject2.put_ImplicitAnimations(value)
    }

    /// Starts an animation group.
    /// - Parameter value: The animation group to start.
    public func startAnimationGroup(_ value: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.startAnimationGroup(value)
    }

    /// Stops an animation group.
    /// - Parameter value: The animation group to stop.
    public func stopAnimationGroup(_ value: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.stopAnimationGroup(value)
    }

    // MARK: Windows.UI.Composition.ICompositionObject3 members

    /// Gets the DispatcherQueue for the CompostionObject.
    /// - Returns: The DispatcherQueue for the CompostionObject.
    public var dispatcherQueue: WindowsSystem_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject3.get_DispatcherQueue())
        }
    }

    // MARK: Windows.UI.Composition.ICompositionObject4 members

    /// Returns an AnimationController for the animation running on the specified property.
    /// - Parameter propertyName: The property being animated.
    /// - Returns: An instance of AnimationController for the specified animation, or **null** if the animation is not found.
    public func tryGetAnimationController(_ propertyName: Swift.String) throws -> WindowsUIComposition_AnimationController {
        try COM.NullResult.unwrap(_icompositionObject4.tryGetAnimationController(propertyName))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the CompositionObject and releases system resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.UI.Composition.IAnimationObject members

    /// Defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter propertyInfo: Information about the property to be animated.
    public func populatePropertyInfo(_ propertyName: Swift.String, _ propertyInfo: WindowsUIComposition_AnimationPropertyInfo?) throws {
        try _ianimationObject.populatePropertyInfo(propertyName, propertyInfo)
    }

    // MARK: Windows.UI.Composition.ICompositionObjectStatics members

    /// Connects an animation with the specified property of the target object and starts the animation.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationWithIAnimationObject(_ target: WindowsUIComposition_IAnimationObject?, _ propertyName: Swift.String, _ animation: WindowsUIComposition_CompositionAnimation?) throws {
        try _icompositionObjectStatics.startAnimationWithIAnimationObject(target, propertyName, animation)
    }

    /// Starts an animation group on the specified target.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationGroupWithIAnimationObject(_ target: WindowsUIComposition_IAnimationObject?, _ animation: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObjectStatics.startAnimationGroupWithIAnimationObject(target, animation)
    }

    // MARK: Implementation details

    private var _icompositionObject_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject>? = nil

    internal var _icompositionObject: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject> {
        get throws {
            try _icompositionObject_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionObject.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionObject.self)
            }
        }
    }

    private var _icompositionObject2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject2>? = nil

    internal var _icompositionObject2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject2> {
        get throws {
            try _icompositionObject2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionObject2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionObject2.self)
            }
        }
    }

    private var _icompositionObject3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject3>? = nil

    internal var _icompositionObject3: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject3> {
        get throws {
            try _icompositionObject3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionObject3.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionObject3.self)
            }
        }
    }

    private var _icompositionObject4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject4>? = nil

    internal var _icompositionObject4: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObject4> {
        get throws {
            try _icompositionObject4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionObject4.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionObject4.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _ianimationObject_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IAnimationObject>? = nil

    internal var _ianimationObject: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IAnimationObject> {
        get throws {
            try _ianimationObject_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IAnimationObject.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IAnimationObject.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIComposition_ICompositionObject>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icompositionObject_storage?.release()
        _icompositionObject2_storage?.release()
        _icompositionObject3_storage?.release()
        _icompositionObject4_storage?.release()
        _iclosable_storage?.release()
        _ianimationObject_storage?.release()
    }

    private static var _icompositionObjectFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObjectFactory>? = nil

    internal static var _icompositionObjectFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObjectFactory> {
        get throws {
            try _icompositionObjectFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionObject", id: CWinRT.SWRT_WindowsUIComposition_ICompositionObjectFactory.iid)
            }
        }
    }

    private static var _icompositionObjectStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObjectStatics>? = nil

    internal static var _icompositionObjectStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionObjectStatics> {
        get throws {
            try _icompositionObjectStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionObject", id: CWinRT.SWRT_WindowsUIComposition_ICompositionObjectStatics.iid)
            }
        }
    }
}