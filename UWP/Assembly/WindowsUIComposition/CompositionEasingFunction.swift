// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Base class for interpolator functions to use with KeyFrameAnimations.
open class WindowsUIComposition_CompositionEasingFunction: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Composition.ICompositionEasingFunctionStatics members

    public static func createCubicBezierEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ controlPoint1: WindowsFoundationNumerics_Vector2, _ controlPoint2: WindowsFoundationNumerics_Vector2) throws -> WindowsUIComposition_CubicBezierEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createCubicBezierEasingFunction(owner, controlPoint1, controlPoint2))
    }

    public static func createLinearEasingFunction(_ owner: WindowsUIComposition_Compositor?) throws -> WindowsUIComposition_LinearEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createLinearEasingFunction(owner))
    }

    public static func createStepEasingFunction(_ owner: WindowsUIComposition_Compositor?) throws -> WindowsUIComposition_StepEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createStepEasingFunction(owner))
    }

    public static func createStepEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ stepCount: Swift.Int32) throws -> WindowsUIComposition_StepEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createStepEasingFunctionWithStepCount(owner, stepCount))
    }

    public static func createBackEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode, _ amplitude: Swift.Float) throws -> WindowsUIComposition_BackEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createBackEasingFunction(owner, mode, amplitude))
    }

    public static func createBounceEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode, _ bounces: Swift.Int32, _ bounciness: Swift.Float) throws -> WindowsUIComposition_BounceEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createBounceEasingFunction(owner, mode, bounces, bounciness))
    }

    public static func createCircleEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode) throws -> WindowsUIComposition_CircleEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createCircleEasingFunction(owner, mode))
    }

    public static func createElasticEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode, _ oscillations: Swift.Int32, _ springiness: Swift.Float) throws -> WindowsUIComposition_ElasticEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createElasticEasingFunction(owner, mode, oscillations, springiness))
    }

    public static func createExponentialEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode, _ exponent: Swift.Float) throws -> WindowsUIComposition_ExponentialEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createExponentialEasingFunction(owner, mode, exponent))
    }

    public static func createPowerEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode, _ power: Swift.Float) throws -> WindowsUIComposition_PowerEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createPowerEasingFunction(owner, mode, power))
    }

    public static func createSineEasingFunction(_ owner: WindowsUIComposition_Compositor?, _ mode: WindowsUIComposition_CompositionEasingFunctionMode) throws -> WindowsUIComposition_SineEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createSineEasingFunction(owner, mode))
    }

    // MARK: Implementation details

    private var _icompositionEasingFunction_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunction>? = nil

    internal var _icompositionEasingFunction: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunction> {
        get throws {
            try _icompositionEasingFunction_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunction.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunction.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunction>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icompositionEasingFunction_storage?.release()
    }

    private static var _icompositionEasingFunctionFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionFactory>? = nil

    internal static var _icompositionEasingFunctionFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionFactory> {
        get throws {
            try _icompositionEasingFunctionFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionEasingFunction", id: CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionFactory.iid)
            }
        }
    }

    private static var _icompositionEasingFunctionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionStatics>? = nil

    internal static var _icompositionEasingFunctionStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionStatics> {
        get throws {
            try _icompositionEasingFunctionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionEasingFunction", id: CWinRT.SWRT_WindowsUIComposition_ICompositionEasingFunctionStatics.iid)
            }
        }
    }
}