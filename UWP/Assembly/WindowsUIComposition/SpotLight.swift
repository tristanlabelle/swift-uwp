// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A light source that casts inner and outer cones of light. For example, a flashlight.
public final class WindowsUIComposition_SpotLight: WindowsRuntime.WinRTImport<WindowsUIComposition_SpotLightProjection> {
    // MARK: Windows.UI.Composition.ISpotLight members

    /// The constant coefficient in the light's attenuation equation. Controls light intensity. Animatable.
    /// - Returns: The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public var constantAttenuation: Swift.Float {
        get throws {
            try _interop.get_ConstantAttenuation()
        }
    }

    /// The constant coefficient in the light's attenuation equation. Controls light intensity. Animatable.
    /// - Returns: The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public func constantAttenuation(_ value: Swift.Float) throws {
        try _interop.put_ConstantAttenuation(value)
    }

    /// The Visual used to determine the light's direction and offset. The light's offset and direction properties are relative to this Visual's coordinate space.
    /// - Returns: The visual the light's offset is relative to.
    public var coordinateSpace: WindowsUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CoordinateSpace())
        }
    }

    /// The Visual used to determine the light's direction and offset. The light's offset and direction properties are relative to this Visual's coordinate space.
    /// - Returns: The visual the light's offset is relative to.
    public func coordinateSpace(_ value: WindowsUIComposition_Visual?) throws {
        try _interop.put_CoordinateSpace(value)
    }

    /// The direction in which the light is pointing, specified relative to its CoordinateSpace Visual.
    /// - Returns: The direction in which the light is pointing, specified relative to its coordinate space Visual.
    public var direction: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Direction()
        }
    }

    /// The direction in which the light is pointing, specified relative to its CoordinateSpace Visual.
    /// - Returns: The direction in which the light is pointing, specified relative to its coordinate space Visual.
    public func direction(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Direction(value)
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Returns: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians.
    public var innerConeAngle: Swift.Float {
        get throws {
            try _interop.get_InnerConeAngle()
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Returns: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians.
    public func innerConeAngle(_ value: Swift.Float) throws {
        try _interop.put_InnerConeAngle(value)
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees. Animatable.
    /// - Returns: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees.
    public var innerConeAngleInDegrees: Swift.Float {
        get throws {
            try _interop.get_InnerConeAngleInDegrees()
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees. Animatable.
    /// - Returns: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees.
    public func innerConeAngleInDegrees(_ value: Swift.Float) throws {
        try _interop.put_InnerConeAngleInDegrees(value)
    }

    /// Color of the spotlight's inner cone. Animatable.
    /// - Returns: Color of the spotlight's inner cone.
    public var innerConeColor: WindowsUI_Color {
        get throws {
            try _interop.get_InnerConeColor()
        }
    }

    /// Color of the spotlight's inner cone. Animatable.
    /// - Returns: Color of the spotlight's inner cone.
    public func innerConeColor(_ value: WindowsUI_Color) throws {
        try _interop.put_InnerConeColor(value)
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Returns: The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Range is from 0 to infinity.
    public var linearAttenuation: Swift.Float {
        get throws {
            try _interop.get_LinearAttenuation()
        }
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Returns: The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Range is from 0 to infinity.
    public func linearAttenuation(_ value: Swift.Float) throws {
        try _interop.put_LinearAttenuation(value)
    }

    /// Offset of the light source relative to its CoordinateSpace Visual. Animatable.
    /// - Returns: Offset of the light source relative to its coordinate space Visual.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Offset()
        }
    }

    /// Offset of the light source relative to its CoordinateSpace Visual. Animatable.
    /// - Returns: Offset of the light source relative to its coordinate space Visual.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Offset(value)
    }

    /// The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Returns: The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. The value must be between 0 and pi.
    public var outerConeAngle: Swift.Float {
        get throws {
            try _interop.get_OuterConeAngle()
        }
    }

    /// The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Returns: The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. The value must be between 0 and pi.
    public func outerConeAngle(_ value: Swift.Float) throws {
        try _interop.put_OuterConeAngle(value)
    }

    /// The semi-vertical angle, in degrees, of the SpotLight's outer cone. Animatable.
    /// - Returns: The semi-vertical angle, in degrees, of the SpotLight's outer cone.
    public var outerConeAngleInDegrees: Swift.Float {
        get throws {
            try _interop.get_OuterConeAngleInDegrees()
        }
    }

    /// The semi-vertical angle, in degrees, of the SpotLight's outer cone. Animatable.
    /// - Returns: The semi-vertical angle, in degrees, of the SpotLight's outer cone.
    public func outerConeAngleInDegrees(_ value: Swift.Float) throws {
        try _interop.put_OuterConeAngleInDegrees(value)
    }

    /// The color of the spotlight's outer cone. Animatable.
    /// - Returns: The color of the spotlight's outer cone.
    public var outerConeColor: WindowsUI_Color {
        get throws {
            try _interop.get_OuterConeColor()
        }
    }

    /// The color of the spotlight's outer cone. Animatable.
    /// - Returns: The color of the spotlight's outer cone.
    public func outerConeColor(_ value: WindowsUI_Color) throws {
        try _interop.put_OuterConeColor(value)
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Returns: The quadratic coefficient in the light's attenuation equation. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public var quadraticAttenuation: Swift.Float {
        get throws {
            try _interop.get_QuadraticAttenuation()
        }
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Returns: The quadratic coefficient in the light's attenuation equation. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public func quadraticAttenuation(_ value: Swift.Float) throws {
        try _interop.put_QuadraticAttenuation(value)
    }

    // MARK: Windows.UI.Composition.ISpotLight2 members

    /// Gets or sets the intensity of the light in the spotlight's inner cone.
    /// - Returns: The intensity of the light.
    public var innerConeIntensity: Swift.Float {
        get throws {
            try _ispotLight2.get_InnerConeIntensity()
        }
    }

    /// Gets or sets the intensity of the light in the spotlight's inner cone.
    /// - Returns: The intensity of the light.
    public func innerConeIntensity(_ value: Swift.Float) throws {
        try _ispotLight2.put_InnerConeIntensity(value)
    }

    /// Gets or sets the intensity of the light in the spotlight's outer cone.
    /// - Returns: The intensity of the light.
    public var outerConeIntensity: Swift.Float {
        get throws {
            try _ispotLight2.get_OuterConeIntensity()
        }
    }

    /// Gets or sets the intensity of the light in the spotlight's outer cone.
    /// - Returns: The intensity of the light.
    public func outerConeIntensity(_ value: Swift.Float) throws {
        try _ispotLight2.put_OuterConeIntensity(value)
    }

    // MARK: Windows.UI.Composition.ISpotLight3 members

    /// Gets or sets the maximum range at which this light is effective.
    /// - Returns: The maximum range at which this light is effective. The default is 0.0.
    public var maxAttenuationCutoff: Swift.Float {
        get throws {
            try _ispotLight3.get_MaxAttenuationCutoff()
        }
    }

    /// Gets or sets the maximum range at which this light is effective.
    /// - Returns: The maximum range at which this light is effective. The default is 0.0.
    public func maxAttenuationCutoff(_ value: Swift.Float) throws {
        try _ispotLight3.put_MaxAttenuationCutoff(value)
    }

    /// Gets or sets the minimum range at which this light is effective.
    /// - Returns: The minimum range at which this light is effective. The default is 0.0.
    public var minAttenuationCutoff: Swift.Float {
        get throws {
            try _ispotLight3.get_MinAttenuationCutoff()
        }
    }

    /// Gets or sets the minimum range at which this light is effective.
    /// - Returns: The minimum range at which this light is effective. The default is 0.0.
    public func minAttenuationCutoff(_ value: Swift.Float) throws {
        try _ispotLight3.put_MinAttenuationCutoff(value)
    }

    // MARK: Implementation details

    private var _ispotLight2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ISpotLight2>? = nil

    internal var _ispotLight2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ISpotLight2> {
        get throws {
            try _ispotLight2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ISpotLight2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ISpotLight2.self)
            }
        }
    }

    private var _ispotLight3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ISpotLight3>? = nil

    internal var _ispotLight3: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ISpotLight3> {
        get throws {
            try _ispotLight3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ISpotLight3.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ISpotLight3.self)
            }
        }
    }

    deinit {
        _ispotLight2_storage?.release()
        _ispotLight3_storage?.release()
    }
}