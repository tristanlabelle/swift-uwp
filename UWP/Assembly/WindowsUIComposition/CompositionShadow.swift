// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Base class for shadows that can be applied to a SpriteVisual.
open class WindowsUIComposition_CompositionShadow: WindowsRuntime.WinRTComposableClass {
    // MARK: Implementation details

    private var _icompositionShadow_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionShadow>? = nil

    internal var _icompositionShadow: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionShadow> {
        get throws {
            try _icompositionShadow_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionShadow.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionShadow.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIComposition_ICompositionShadow>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icompositionShadow_storage?.release()
    }

    private static var _icompositionShadowFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionShadowFactory>? = nil

    internal static var _icompositionShadowFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionShadowFactory> {
        get throws {
            try _icompositionShadowFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionShadow", id: CWinRT.SWRT_WindowsUIComposition_ICompositionShadowFactory.iid)
            }
        }
    }
}