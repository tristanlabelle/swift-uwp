// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Base class for a light source that can target a UI scene.
open class WindowsUIComposition_CompositionLight: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Composition.ICompositionLight members

    /// The collection of Visuals targeted by the light.
    /// - Returns: The collection of Visuals targeted by the light.
    public var targets: WindowsUIComposition_VisualUnorderedCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionLight.get_Targets())
        }
    }

    // MARK: Windows.UI.Composition.ICompositionLight2 members

    /// Gets a collection of Visuals that are not targeted by the light.
    /// - Returns: The collection of Visuals that are not targeted by the light.
    public var exclusionsFromTargets: WindowsUIComposition_VisualUnorderedCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionLight2.get_ExclusionsFromTargets())
        }
    }

    // MARK: Windows.UI.Composition.ICompositionLight3 members

    /// Gets or sets a value that determines whether the composition light is on.
    /// - Returns: **true** if the light is on; otherwise, **false**. The default is **true**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _icompositionLight3.get_IsEnabled()
        }
    }

    /// Gets or sets a value that determines whether the composition light is on.
    /// - Returns: **true** if the light is on; otherwise, **false**. The default is **true**.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _icompositionLight3.put_IsEnabled(value)
    }

    // MARK: Implementation details

    private var _icompositionLight_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight>? = nil

    internal var _icompositionLight: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight> {
        get throws {
            try _icompositionLight_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionLight.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionLight.self)
            }
        }
    }

    private var _icompositionLight2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight2>? = nil

    internal var _icompositionLight2: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight2> {
        get throws {
            try _icompositionLight2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionLight2.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionLight2.self)
            }
        }
    }

    private var _icompositionLight3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight3>? = nil

    internal var _icompositionLight3: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLight3> {
        get throws {
            try _icompositionLight3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_ICompositionLight3.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_ICompositionLight3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIComposition_ICompositionLight>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icompositionLight_storage?.release()
        _icompositionLight2_storage?.release()
        _icompositionLight3_storage?.release()
    }

    private static var _icompositionLightFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLightFactory>? = nil

    internal static var _icompositionLightFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_ICompositionLightFactory> {
        get throws {
            try _icompositionLightFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.CompositionLight", id: CWinRT.SWRT_WindowsUIComposition_ICompositionLightFactory.iid)
            }
        }
    }
}