// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains information for the entire Document Object Model. This interface represents a single node in the document tree. While all objects that implement this interface expose methods for dealing with children, not all objects that implement this interface may have children.
public protocol WindowsDataXmlDom_IXmlNodeProtocol: WindowsDataXmlDom_IXmlNodeSelectorProtocol, WindowsDataXmlDom_IXmlNodeSerializerProtocol {
    /// Gets the list of attributes of this node.
    /// - Returns: The attributes for this node.
    var attributes: WindowsDataXmlDom_XmlNamedNodeMap { get throws }

    /// Gets a list of children in the current node.
    /// - Returns: The list of child nodes.
    var childNodes: WindowsDataXmlDom_XmlNodeList { get throws }

    /// Gets the first child node.
    /// - Returns: The first child node. This property returns NULL if there are no children.
    var firstChild: WindowsDataXmlDom_IXmlNode { get throws }

    /// Gets the last child node.
    /// - Returns: The last child node. This property is NULL if there are no children.
    var lastChild: WindowsDataXmlDom_IXmlNode { get throws }

    /// Gets the local name, which is the local part of a qualified name. This is called the local part in Namespaces in XML.
    /// - Returns: The local name.
    var localName: WindowsRuntime.IInspectable { get throws }

    /// Returns the Uniform Resource Identifier (URI) for the namespace.
    /// - Returns: The Uri for the namespace. This refers to the "uuu" portion of the namespace declaration xmlns:nnn="uuu".
    var namespaceUri: WindowsRuntime.IInspectable { get throws }

    /// Gets the next sibling of the node in the parent's child list.
    /// - Returns: The right sibling of this node.
    var nextSibling: WindowsDataXmlDom_IXmlNode { get throws }

    /// Returns the qualified name for attribute, document type, element, entity, or notation nodes. Returns a fixed string for all other node types.
    /// - Returns: The qualified node name, which varies depending on the node type.
    var nodeName: Swift.String { get throws }

    /// Gets the XML Document Object Model (DOM) node type, which determines valid values and whether the node can have child nodes.
    /// - Returns: The node type.
    var nodeType: WindowsDataXmlDom_NodeType { get throws }

    /// Gets or sets the text associated with the node.
    /// - Returns: The text associated with the node.
    var nodeValue: WindowsRuntime.IInspectable { get throws }
    func nodeValue(_ value: WindowsRuntime.IInspectable?) throws

    /// Returns the root of the document that contains the node.
    /// - Returns: The parent document that represents the root of the document.
    var ownerDocument: WindowsDataXmlDom_XmlDocument { get throws }

    /// Gets the parent node of the node instance.
    /// - Returns: The parent node.
    var parentNode: WindowsDataXmlDom_IXmlNode { get throws }

    /// Gets or sets the namespace prefix.
    /// - Returns: The namespace prefix specified on the element, attribute, or entity reference. For example, for the element <xxx:yyy>, this property returns xxx. It returns an empty string, "", if no prefix is specified.
    var prefix: WindowsRuntime.IInspectable { get throws }
    func prefix(_ value: WindowsRuntime.IInspectable?) throws

    /// Gets the previous sibling of the node in the parent's child list.
    /// - Returns: The left sibling of this node.
    var previousSibling: WindowsDataXmlDom_IXmlNode { get throws }

    /// Determines whether a node has children.
    /// - Returns: True if this node has children; otherwise false.
    func hasChildNodes() throws -> Swift.Bool

    /// Inserts a child node to the left of the specified node, or at the end of the list.
    /// - Parameter newChild: The address of the new node to be inserted. The node passed here must be a valid child of the current XML DOM document node. For example, if the current node is an attribute, you cannot pass another attribute in the *newChild* parameter, because an attribute cannot have an attribute as a child. If *newChild* is a DOCUMENT_FRAGMENT node type, all its children are inserted in order before *referenceChild*.
    /// - Parameter referenceChild: The reference node. The node specified is where the *newChild* node is to be inserted to the left as the preceding sibling in the child list. The node passed here must be a either a child node of the current node or null. If the value is null, the *newChild* node is inserted at the end of the child list. If the *referenceChild* node is not a child of the current node, an error is returned.
    /// - Returns: On success, the child node that was inserted. If null, no object is created.
    func insertBefore(_ newChild: WindowsDataXmlDom_IXmlNode?, _ referenceChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode

    /// Replaces the specified old child node with the supplied new child node.
    /// - Parameter newChild: The new child that is to replace the old child. If null, the *referenceChild* parameter is removed without a replacement.
    /// - Parameter referenceChild: The old child that is to be replaced by the new child.
    /// - Returns: The old child that is replaced. If null, no object is created.
    func replaceChild(_ newChild: WindowsDataXmlDom_IXmlNode?, _ referenceChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode

    /// Removes the specified child node from the list of children and returns it.
    /// - Parameter childNode: The child node to be removed from the list of children of this node.
    /// - Returns: The removed child node. If null, the *childNode* object is not removed.
    func removeChild(_ childNode: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode

    /// Appends a new child node as the last child of the node.
    /// - Parameter newChild: The new child node to be appended to the end of the list of children of this node.
    /// - Returns: The new child node successfully appended to the list. If null, no object is created.
    func appendChild(_ newChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode

    /// Clones a new node.
    /// - Parameter deep: A flag that indicates whether to recursively clone all nodes that are descendants of this node. If true, this method creates a clone of the complete tree below this node. If false, this method clones this node and its attributes only.
    /// - Returns: The newly created clone node.
    func cloneNode(_ deep: Swift.Bool) throws -> WindowsDataXmlDom_IXmlNode

    /// Normalizes all descendant elements by combining two or more adjacent text nodes into one unified text node.
    func normalize() throws
}

/// Contains information for the entire Document Object Model. This interface represents a single node in the document tree. While all objects that implement this interface expose methods for dealing with children, not all objects that implement this interface may have children.
public typealias WindowsDataXmlDom_IXmlNode = any WindowsDataXmlDom_IXmlNodeProtocol