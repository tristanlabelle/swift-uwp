// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the top level of the XML source. This class includes members for retrieving and creating all other XML objects.
public final class WindowsDataXmlDom_XmlDocument: WindowsRuntime.WinRTImport<WindowsDataXmlDom_XmlDocumentProjection>, WindowsDataXmlDom_IXmlNodeProtocol, WindowsDataXmlDom_IXmlNodeSerializerProtocol, WindowsDataXmlDom_IXmlNodeSelectorProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDataXmlDom_XmlDocumentProjection.self))
    }

    // MARK: Windows.Data.Xml.Dom.IXmlDocument members

    /// For XML, this property gets the address of the node that specifies the DTD. This property returns Null for HTML documents and XML documents without a DTD.
    /// - Returns: The document type.
    public var doctype: WindowsDataXmlDom_XmlDocumentType {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Doctype())
        }
    }

    /// Gets the root element of the document.
    /// - Returns: The root element of the document.
    public var documentElement: WindowsDataXmlDom_XmlElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DocumentElement())
        }
    }

    /// Returns the URL for the last loaded XML document.
    /// - Returns: The URL for the last loaded XML document.
    public var documentUri: Swift.String {
        get throws {
            try _interop.get_DocumentUri()
        }
    }

    /// Gets the Implementation object for the document.
    /// - Returns: The Implementation object for the document.
    public var implementation: WindowsDataXmlDom_XmlDomImplementation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Implementation())
        }
    }

    /// Creates an element node using the specified name.
    /// - Parameter tagName: The name for the new element node. The string is case-sensitive. This name is subsequently available as the element node's NodeName property.
    /// - Returns: The newly created object.
    public func createElement(_ tagName: Swift.String) throws -> WindowsDataXmlDom_XmlElement {
        try COM.NullResult.unwrap(_interop.createElement(tagName))
    }

    /// Creates an empty XmlDocumentFragment object.
    /// - Returns: The newly created object.
    public func createDocumentFragment() throws -> WindowsDataXmlDom_XmlDocumentFragment {
        try COM.NullResult.unwrap(_interop.createDocumentFragment())
    }

    /// Creates a text node that contains the supplied data.
    /// - Parameter data: The value to be supplied to the new text object's NodeValue.
    /// - Returns: The created text node.
    public func createTextNode(_ data: Swift.String) throws -> WindowsDataXmlDom_XmlText {
        try COM.NullResult.unwrap(_interop.createTextNode(data))
    }

    /// Creates a comment node that contains the supplied data.
    /// - Parameter data: The value to be supplied to the new comment object's NodeValue.
    /// - Returns: The newly created comment node.
    public func createComment(_ data: Swift.String) throws -> WindowsDataXmlDom_XmlComment {
        try COM.NullResult.unwrap(_interop.createComment(data))
    }

    /// Creates a processing instruction node that contains the supplied target and data.
    /// - Parameter target: The target part of the processing instruction. It supplies the NodeName property of the new object.
    /// - Parameter data: The remainder of the processing instruction preceding the closing** ?>** characters. It supplies the NodeValue property for the new object.
    /// - Returns: The newly created object.
    public func createProcessingInstruction(_ target: Swift.String, _ data: Swift.String) throws -> WindowsDataXmlDom_XmlProcessingInstruction {
        try COM.NullResult.unwrap(_interop.createProcessingInstruction(target, data))
    }

    /// Creates a new attribute with the specified name.
    /// - Parameter name: The name of the new attribute object. This name is subsequently available as the new node's NodeName property.
    /// - Returns: The newly created attribute.
    public func createAttribute(_ name: Swift.String) throws -> WindowsDataXmlDom_XmlAttribute {
        try COM.NullResult.unwrap(_interop.createAttribute(name))
    }

    /// Creates a new XmlEntityReference object.
    /// - Parameter name: The name of the entity referenced. This name is subsequently available as the new object's NodeName property.
    /// - Returns: The newly created object.
    public func createEntityReference(_ name: Swift.String) throws -> WindowsDataXmlDom_XmlEntityReference {
        try COM.NullResult.unwrap(_interop.createEntityReference(name))
    }

    /// Returns a collection of elements that have the specified name.
    /// - Parameter tagName: The element name to find. The value "*" returns all elements in the document.
    /// - Returns: The collection of elements that match the specified name.
    public func getElementsByTagName(_ tagName: Swift.String) throws -> WindowsDataXmlDom_XmlNodeList {
        try COM.NullResult.unwrap(_interop.getElementsByTagName(tagName))
    }

    /// Creates a CDATA section node that contains the supplied data.
    /// - Parameter data: The value to be supplied to the new CDATA section object's NodeValue property.
    /// - Returns: The newly created object.
    public func createCDataSection(_ data: Swift.String) throws -> WindowsDataXmlDom_XmlCDataSection {
        try COM.NullResult.unwrap(_interop.createCDataSection(data))
    }

    /// Creates a new attribute with the specified namespace and name.
    /// - Parameter namespaceUri: The name of the desired namespace or a null value if no namespace is desired.
    /// - Parameter qualifiedName: The name of the new attribute object. This name is subsequently available as the new node's NodeName property.
    /// - Returns: The newly created attribute.
    public func createAttributeNS(_ namespaceUri: WindowsRuntime.IInspectable?, _ qualifiedName: Swift.String) throws -> WindowsDataXmlDom_XmlAttribute {
        try COM.NullResult.unwrap(_interop.createAttributeNS(namespaceUri, qualifiedName))
    }

    /// Creates an element node using the specified namespace and name.
    /// - Parameter namespaceUri: The name of the desired namespace or a null value if no namespace is desired.
    /// - Parameter qualifiedName: The name for the new element node. It is case-sensitive. This name is subsequently available as the element node's NodeName property.
    /// - Returns: The newly created object.
    public func createElementNS(_ namespaceUri: WindowsRuntime.IInspectable?, _ qualifiedName: Swift.String) throws -> WindowsDataXmlDom_XmlElement {
        try COM.NullResult.unwrap(_interop.createElementNS(namespaceUri, qualifiedName))
    }

    /// Returns the element that matches the ID attribute.
    /// - Parameter elementId: The ID to match.
    /// - Returns: The element that matches the supplied ID. If no elements match, this method returns Null.
    public func getElementById(_ elementId: Swift.String) throws -> WindowsDataXmlDom_XmlElement {
        try COM.NullResult.unwrap(_interop.getElementById(elementId))
    }

    /// Imports a node from another document to this document.
    /// - Parameter node: The object to be cloned.
    /// - Parameter deep: If true, any children of node will be cloned as well. If false, no children of the node will be cloned.
    /// - Returns: The imported node.
    public func importNode(_ node: WindowsDataXmlDom_IXmlNode?, _ deep: Swift.Bool) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_interop.importNode(node, deep))
    }

    // MARK: Windows.Data.Xml.Dom.IXmlNode members

    /// Gets the list of attributes of this node.
    /// - Returns: The attributes for this node.
    public var attributes: WindowsDataXmlDom_XmlNamedNodeMap {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_Attributes())
        }
    }

    /// Gets a list of children in the current node.
    /// - Returns: The list of child nodes.
    public var childNodes: WindowsDataXmlDom_XmlNodeList {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_ChildNodes())
        }
    }

    /// Gets the first child node.
    /// - Returns: The first child node. This property returns NULL if there are no children.
    public var firstChild: WindowsDataXmlDom_IXmlNode {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_FirstChild())
        }
    }

    /// Gets the last child node.
    /// - Returns: The last child node. This property is NULL if there are no children.
    public var lastChild: WindowsDataXmlDom_IXmlNode {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_LastChild())
        }
    }

    /// Gets the local name, which is the local part of a qualified name. This is called the local part in Namespaces in XML.
    /// - Returns: The local name.
    public var localName: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_LocalName())
        }
    }

    /// Returns the Uniform Resource Identifier (URI) for the namespace.
    /// - Returns: The Uri for the namespace. This refers to the "uuu" portion of the namespace declaration xmlns:nnn="uuu".
    public var namespaceUri: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_NamespaceUri())
        }
    }

    /// Gets the next sibling of the node in the parent's child list. This property is not applicable to this class.
    /// - Returns: The right sibling of this node.
    public var nextSibling: WindowsDataXmlDom_IXmlNode {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_NextSibling())
        }
    }

    /// Returns the qualified name for attribute, document type, element, entity, or notation nodes. Returns a fixed string for all other node types.
    /// - Returns: The qualified node name, which varies depending on the node type.
    public var nodeName: Swift.String {
        get throws {
            try _ixmlNode.get_NodeName()
        }
    }

    /// Gets the XML Document Object Model (DOM) node type, which determines valid values and whether the node can have child nodes.
    /// - Returns: The node type.
    public var nodeType: WindowsDataXmlDom_NodeType {
        get throws {
            try _ixmlNode.get_NodeType()
        }
    }

    /// Gets or sets the text associated with the node.
    /// - Returns: The text associated with the node.
    public var nodeValue: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_NodeValue())
        }
    }

    /// Gets or sets the text associated with the node.
    /// - Returns: The text associated with the node.
    public func nodeValue(_ value: WindowsRuntime.IInspectable?) throws {
        try _ixmlNode.put_NodeValue(value)
    }

    /// Returns the root of the document that contains the node.
    /// - Returns: The parent document that represents the root of the document.
    public var ownerDocument: WindowsDataXmlDom_XmlDocument {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_OwnerDocument())
        }
    }

    /// Gets the parent node of the node instance.
    /// - Returns: This property returns NULL.
    public var parentNode: WindowsDataXmlDom_IXmlNode {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_ParentNode())
        }
    }

    /// Gets or sets the namespace prefix.
    /// - Returns: The namespace prefix specified on the element, attribute, or entity reference. For example, for the element <xxx:yyy>, this property returns xxx. It returns an empty string, "", if no prefix is specified.
    public var prefix: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_Prefix())
        }
    }

    /// Gets or sets the namespace prefix.
    /// - Returns: The namespace prefix specified on the element, attribute, or entity reference. For example, for the element <xxx:yyy>, this property returns xxx. It returns an empty string, "", if no prefix is specified.
    public func prefix(_ value: WindowsRuntime.IInspectable?) throws {
        try _ixmlNode.put_Prefix(value)
    }

    /// Gets the previous sibling of the node in the parent's child list. This property is not applicable to this class.
    /// - Returns: The left sibling of this node.
    public var previousSibling: WindowsDataXmlDom_IXmlNode {
        get throws {
            try COM.NullResult.unwrap(_ixmlNode.get_PreviousSibling())
        }
    }

    /// Determines whether a node has children.
    /// - Returns: True if this node has children; otherwise false.
    public func hasChildNodes() throws -> Swift.Bool {
        try _ixmlNode.hasChildNodes()
    }

    /// Inserts a child node to the left of the specified node, or at the end of the child node list.
    /// - Parameter newChild: The address of the new node to be inserted. The node passed here must be a valid child of the current XML DOM document node. For example, if the current node is an attribute, you cannot pass another attribute in the *newChild* parameter, because an attribute cannot have an attribute as a child. If *newChild* is a DOCUMENT_FRAGMENT node type, all its children are inserted in order before *referenceChild*.
    /// - Parameter referenceChild: The reference node. The node specified is where the *newChild* node is to be inserted to the left as the preceding sibling in the child list. The node passed here must be a either a child node of the current node or null. If the value is null, the *newChild* node is inserted at the end of the child list. If the *referenceChild* node is not a child of the current node, an error is returned.
    /// - Returns: On success, the child node that was inserted. If null, no object is created.
    public func insertBefore(_ newChild: WindowsDataXmlDom_IXmlNode?, _ referenceChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNode.insertBefore(newChild, referenceChild))
    }

    /// Replaces the specified old child node with the supplied new child node.
    /// - Parameter newChild: The new child that is to replace the old child. If null, the *referenceChild* parameter is removed without a replacement.
    /// - Parameter referenceChild: The old child that is to be replaced by the new child.
    /// - Returns: The old child that is replaced. If null, no object is created.
    public func replaceChild(_ newChild: WindowsDataXmlDom_IXmlNode?, _ referenceChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNode.replaceChild(newChild, referenceChild))
    }

    /// Removes the specified child node from the list of children and returns it.
    /// - Parameter childNode: The child node to be removed from the list of children of this node.
    /// - Returns: The removed child node. If null, the *childNode* object is not removed.
    public func removeChild(_ childNode: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNode.removeChild(childNode))
    }

    /// Appends a new child node as the last child of the node.
    /// - Parameter newChild: The new child node to be appended to the end of the list of children of this node.
    /// - Returns: The new child node successfully appended to the list. If null, no object is created.
    public func appendChild(_ newChild: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNode.appendChild(newChild))
    }

    /// Clones a new node.
    /// - Parameter deep: A flag that indicates whether to recursively clone all nodes that are descendants of this node. If true, this method creates a clone of the complete tree below this node. If false, this method clones this node and its attributes only.
    /// - Returns: The newly created clone node.
    public func cloneNode(_ deep: Swift.Bool) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNode.cloneNode(deep))
    }

    /// Normalizes all descendant elements by combining two or more adjacent text nodes into one unified text node.
    public func normalize() throws {
        try _ixmlNode.normalize()
    }

    // MARK: Windows.Data.Xml.Dom.IXmlNodeSerializer members

    /// Gets the text from inside the XML.
    /// - Returns: The text from inside the XML. Returns an empty string if there is no text.
    public var innerText: Swift.String {
        get throws {
            try _ixmlNodeSerializer.get_InnerText()
        }
    }

    /// Gets the text from inside the XML.
    /// - Returns: The text from inside the XML. Returns an empty string if there is no text.
    public func innerText(_ value: Swift.String) throws {
        try _ixmlNodeSerializer.put_InnerText(value)
    }

    /// Returns the XML representation of the node and all its descendants.
    /// - Returns: The XML representation of the node and all its descendants.
    public func getXml() throws -> Swift.String {
        try _ixmlNodeSerializer.getXml()
    }

    // MARK: Windows.Data.Xml.Dom.IXmlNodeSelector members

    /// Applies the specified pattern-matching operation to this node's context and returns the first matching node.
    /// - Parameter xpath: Specifies an XPath expression.
    /// - Returns: The first node that matches the given pattern-matching operation. If no nodes match the expression, the method returns a null value.
    public func selectSingleNode(_ xpath: Swift.String) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNodeSelector.selectSingleNode(xpath))
    }

    /// Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as an XmlNodeList.
    /// - Parameter xpath: Specifies an XPath expression.
    /// - Returns: The collection of nodes selected by applying the given pattern-matching operation. If no nodes are selected, this method returns an empty collection.
    public func selectNodes(_ xpath: Swift.String) throws -> WindowsDataXmlDom_XmlNodeList {
        try COM.NullResult.unwrap(_ixmlNodeSelector.selectNodes(xpath))
    }

    /// Applies the specified pattern-matching operation to this node's context and returns the first matching node.
    /// - Parameter xpath: Specifies an XPath expression.
    /// - Parameter namespaces: Contains a string that specifies the namespaces to use in XPath expressions when it is necessary to define new namespaces externally. Namespaces are defined in the XML style, as a space-separated list of namespace declaration attributes. You can use this property to set the default namespace as well.
    /// - Returns: The first node that matches the given pattern-matching operation. If no nodes match the expression, this method returns a null value.
    public func selectSingleNodeNS(_ xpath: Swift.String, _ namespaces: WindowsRuntime.IInspectable?) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_ixmlNodeSelector.selectSingleNodeNS(xpath, namespaces))
    }

    /// Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as an XmlNodeList.
    /// - Parameter xpath: Specifies an XPath expression.
    /// - Parameter namespaces: Contains a string that specifies namespaces for use in XPath expressions when it is necessary to define new namespaces externally. Namespaces are defined in the XML style, as a space-separated list of namespace declaration attributes. You can use this property to set the default namespace as well.
    /// - Returns: The collection of nodes selected by applying the given pattern-matching operation. If no nodes are selected, returns an empty collection.
    public func selectNodesNS(_ xpath: Swift.String, _ namespaces: WindowsRuntime.IInspectable?) throws -> WindowsDataXmlDom_XmlNodeList {
        try COM.NullResult.unwrap(_ixmlNodeSelector.selectNodesNS(xpath, namespaces))
    }

    // MARK: Windows.Data.Xml.Dom.IXmlDocumentIO members

    /// Loads an XML document using the supplied string. The document is parsed using the default parser settings.
    /// - Parameter xml: The XML string to load into this XML document object. This string can contain an entire XML document or a well-formed fragment.
    public func loadXml(_ xml: Swift.String) throws {
        try _ixmlDocumentIO.loadXml(xml)
    }

    /// Loads an XML document using the supplied string. The document is parsed using the settings provided.
    /// - Parameter xml: The XML string to load into this XML document object. This string can contain an entire XML document or a well-formed fragment.
    /// - Parameter loadSettings: The settings for parsing the document.
    public func loadXml(_ xml: Swift.String, _ loadSettings: WindowsDataXmlDom_XmlLoadSettings?) throws {
        try _ixmlDocumentIO.loadXmlWithSettings(xml, loadSettings)
    }

    /// Asynchronously saves an XML document to the specified file.
    /// - Parameter file: The file to save the document to.
    /// - Returns: The object that must be used to start the operation.
    public func saveToFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ixmlDocumentIO.saveToFileAsync(file))
    }

    // MARK: Windows.Data.Xml.Dom.IXmlDocumentIO2 members

    /// Loads an XML document using the buffer. The document is parsed using the default parser settings.
    /// - Parameter buffer: The buffer to load into this XML document object. This buffer can contain an entire XML document or a well-formed fragment.
    public func loadXmlFromBuffer(_ buffer: WindowsStorageStreams_IBuffer?) throws {
        try _ixmlDocumentIO2.loadXmlFromBuffer(buffer)
    }

    /// Loads an XML document using the buffer. The document is parsed using the settings provided.
    /// - Parameter buffer: The buffer to load into this XML document object. This buffer can contain an entire XML document or a well-formed fragment.
    /// - Parameter loadSettings: The settings for parsing the document.
    public func loadXmlFromBuffer(_ buffer: WindowsStorageStreams_IBuffer?, _ loadSettings: WindowsDataXmlDom_XmlLoadSettings?) throws {
        try _ixmlDocumentIO2.loadXmlFromBufferWithSettings(buffer, loadSettings)
    }

    // MARK: Windows.Data.Xml.Dom.IXmlDocumentStatics members

    /// Asynchronously loads an XML document from the specified location. The document is parsed using the default parser settings.
    /// - Parameter uri: A URL that specifies the location of the XML file.
    /// - Returns: The object that must be used to start the operation.
    public static func loadFromUriAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataXmlDom_XmlDocument?> {
        try COM.NullResult.unwrap(_ixmlDocumentStatics.loadFromUriAsync(uri))
    }

    /// Asynchronously loads an XML document from the specified location. The document is parsed using the provided settings.
    /// - Parameter uri: A URL that specifies the location of the XML file.
    /// - Parameter loadSettings: Customizes parser behavior.
    /// - Returns: An object that must be used to start the operation.
    public static func loadFromUriAsync(_ uri: WindowsFoundation_Uri?, _ loadSettings: WindowsDataXmlDom_XmlLoadSettings?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataXmlDom_XmlDocument?> {
        try COM.NullResult.unwrap(_ixmlDocumentStatics.loadFromUriWithSettingsAsync(uri, loadSettings))
    }

    /// Asynchronously loads an XML document from the specified file. The document is parsed using the default parser settings.
    /// - Parameter file: The file from which to load the document.
    /// - Returns: The object that must be used to start the operation.
    public static func loadFromFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataXmlDom_XmlDocument?> {
        try COM.NullResult.unwrap(_ixmlDocumentStatics.loadFromFileAsync(file))
    }

    /// Asynchronously loads an XML document from the specified file. The document is parsed using the provided settings.
    /// - Parameter file: The file from which to load the document.
    /// - Parameter loadSettings: Settings for customizing parser behavior.
    /// - Returns: The object that must be used to start the operation.
    public static func loadFromFileAsync(_ file: WindowsStorage_IStorageFile?, _ loadSettings: WindowsDataXmlDom_XmlLoadSettings?) throws -> WindowsFoundation_IAsyncOperation<WindowsDataXmlDom_XmlDocument?> {
        try COM.NullResult.unwrap(_ixmlDocumentStatics.loadFromFileWithSettingsAsync(file, loadSettings))
    }

    // MARK: Implementation details

    private var _ixmlNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNode>? = nil

    internal var _ixmlNode: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNode> {
        get throws {
            try _ixmlNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlDom_IXmlNode.iid).cast(to: CWinRT.SWRT_WindowsDataXmlDom_IXmlNode.self)
            }
        }
    }

    private var _ixmlNodeSerializer_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSerializer>? = nil

    internal var _ixmlNodeSerializer: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSerializer> {
        get throws {
            try _ixmlNodeSerializer_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSerializer.iid).cast(to: CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSerializer.self)
            }
        }
    }

    private var _ixmlNodeSelector_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSelector>? = nil

    internal var _ixmlNodeSelector: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSelector> {
        get throws {
            try _ixmlNodeSelector_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSelector.iid).cast(to: CWinRT.SWRT_WindowsDataXmlDom_IXmlNodeSelector.self)
            }
        }
    }

    private var _ixmlDocumentIO_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO>? = nil

    internal var _ixmlDocumentIO: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO> {
        get throws {
            try _ixmlDocumentIO_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO.iid).cast(to: CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO.self)
            }
        }
    }

    private var _ixmlDocumentIO2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO2>? = nil

    internal var _ixmlDocumentIO2: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO2> {
        get throws {
            try _ixmlDocumentIO2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO2.iid).cast(to: CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentIO2.self)
            }
        }
    }

    deinit {
        _ixmlNode_storage?.release()
        _ixmlNodeSerializer_storage?.release()
        _ixmlNodeSelector_storage?.release()
        _ixmlDocumentIO_storage?.release()
        _ixmlDocumentIO2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Xml.Dom.XmlDocument", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ixmlDocumentStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentStatics>? = nil

    internal static var _ixmlDocumentStatics: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentStatics> {
        get throws {
            try _ixmlDocumentStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Xml.Dom.XmlDocument", id: CWinRT.SWRT_WindowsDataXmlDom_IXmlDocumentStatics.iid)
            }
        }
    }
}