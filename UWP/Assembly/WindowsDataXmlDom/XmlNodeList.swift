// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a collection of nodes.
public final class WindowsDataXmlDom_XmlNodeList: WindowsRuntime.WinRTImport<WindowsDataXmlDom_XmlNodeListProjection>, WindowsFoundationCollections_IVectorViewProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias T = WindowsDataXmlDom_IXmlNode?

    // MARK: Windows.Data.Xml.Dom.IXmlNodeList members

    /// Gets the length of the list.
    /// - Returns: The length of the list. The range of valid child node indices is 0 to length-1 inclusive.
    public var length: Swift.UInt32 {
        get throws {
            try _interop.get_Length()
        }
    }

    /// Returns the item in the list at the specified index.
    /// - Parameter index: The zero-based index of the requested item.
    /// - Returns: The requested item. This method returns NULL if the index is not valid.
    public func item(_ index: Swift.UInt32) throws -> WindowsDataXmlDom_IXmlNode {
        try COM.NullResult.unwrap(_interop.item(index))
    }

    // MARK: Windows.Foundation.Collections.IVectorView`1<Windows.Data.Xml.Dom.IXmlNode> members

    /// Gets the number of elements in the vector view.
    /// - Returns: The number of elements in the vector view.
    public var size: Swift.UInt32 {
        get throws {
            try _ivectorView.get_Size()
        }
    }

    /// Returns the item at the specified index in the vector view.
    /// - Parameter index: The zero-based index of the item in the vector view to return.
    /// - Returns: The item in the vector view at the specified index.
    public func getAt(_ index: Swift.UInt32) throws -> WindowsDataXmlDom_IXmlNode? {
        try _ivectorView.getAt(index)
    }

    /// Returns the index of a specified item in the vector.
    /// - Parameter value: The item to find in the vector.
    /// - Parameter index: The zero-based index of the item if found. Zero is returned if the item is not found.
    /// - Returns: TRUE if the item is found; otherwise, FALSE if the item is not found.
    public func indexOf(_ value: WindowsDataXmlDom_IXmlNode?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        try _ivectorView.indexOf(value, &index)
    }

    /// Returns the items that start at the specified index of the vector view.
    /// - Parameter startIndex: The zero-based index of the start of the items in the vector to return.
    /// - Parameter items: The items in the vector view that start at *startIndex*.
    /// - Returns: The number of items returned.
    public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsDataXmlDom_IXmlNode?]) throws -> Swift.UInt32 {
        try _ivectorView.getMany(startIndex, items)
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Data.Xml.Dom.IXmlNode> members

    /// Returns an iterator that iterates over the items in the collection.
    /// - Returns: The iterator.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDataXmlDom_IXmlNode?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _ivectorView_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsDataXmlDom_IXmlNode>? = nil

    internal var _ivectorView: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsDataXmlDom_IXmlNode> {
        get throws {
            try _ivectorView_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsDataXmlDom_IXmlNode.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsDataXmlDom_IXmlNode.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsDataXmlDom_IXmlNode>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsDataXmlDom_IXmlNode> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsDataXmlDom_IXmlNode.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsDataXmlDom_IXmlNode.self)
            }
        }
    }

    deinit {
        _ivectorView_storage?.release()
        _iiterable_storage?.release()
    }
}