// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a single connection between a Miracast Receiver and a Miracast Transmitter.
public final class WindowsMediaMiracast_MiracastReceiverConnection: WindowsRuntime.WinRTImport<WindowsMediaMiracast_MiracastReceiverConnectionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Miracast.IMiracastReceiverConnection members

    /// Gets the channel for transmitting mouse cursor images from a Miracast Transmitter to a Miracast Receiver.
    /// - Returns: The cursor image channel.
    public var cursorImageChannel: WindowsMediaMiracast_MiracastReceiverCursorImageChannel {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CursorImageChannel())
        }
    }

    /// Gets the devices from which the Miracast Receiver can collect input and transmit to the Miracast Transmitter.
    /// - Returns: A MiracastReceiverInputDevices representing the input devices.
    public var inputDevices: WindowsMediaMiracast_MiracastReceiverInputDevices {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InputDevices())
        }
    }

    /// Gets a MiracastReceiverStreamControl object, which is used for controlling properties of the audio and video streams.
    /// - Returns: The **MiracastReceiverStreamControl** object.
    public var streamControl: WindowsMediaMiracast_MiracastReceiverStreamControl {
        get throws {
            try COM.NullResult.unwrap(_interop.get_StreamControl())
        }
    }

    /// Gets an MiracastTransmitter object representing the Miracast Transmitter that initiated the connection.
    /// - Returns: The Miracast Transmitter.
    public var transmitter: WindowsMediaMiracast_MiracastTransmitter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Transmitter())
        }
    }

    /// Closes the connection and immediately disconnects the connected MiracastTransmitter.
    /// - Parameter reason: A value from the MiracastReceiverDisconnectReason enumeration specifying the reason for disconnecting the Miracast Transmitter.
    public func disconnect(_ reason: WindowsMediaMiracast_MiracastReceiverDisconnectReason) throws {
        try _interop.disconnect(reason)
    }

    /// Closes the connection and immediately disconnects the connected MiracastTransmitter.
    /// - Parameter reason: A value from the MiracastReceiverDisconnectReason enumeration specifying the reason for disconnecting the Miracast Transmitter.
    /// - Parameter message: A human-readable message, stating a reason for disconnecting the Miracast Transmitter.
    public func disconnect(_ reason: WindowsMediaMiracast_MiracastReceiverDisconnectReason, _ message: Swift.String) throws {
        try _interop.disconnectWithMessage(reason, message)
    }

    /// Requests the Miracast Transmitter to pause streaming audio and video data to the Receiver. The connection remains established.
    public func pause() throws {
        try _interop.pause()
    }

    /// Asynchronously requests the Miracast Transmitter to pause streaming audio and video data to the Receiver. The connection remains established.
    /// - Returns: An asynchronous operation.
    public func pauseAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.pauseAsync())
    }

    /// Requests the Miracast Transmitter to resume streaming audio and video data to the MiracastReceiver.
    public func resume() throws {
        try _interop.resume()
    }

    /// Requests the Miracast Transmitter to resume streaming audio and video data to the MiracastReceiver.
    /// - Returns: An asynchronous operation.
    public func resumeAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.resumeAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the connection and immediately disconnects the associated MiracastTransmitter from this connection.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }
}