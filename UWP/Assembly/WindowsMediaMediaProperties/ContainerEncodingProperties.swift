// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a media container format.
public final class WindowsMediaMediaProperties_ContainerEncodingProperties: WindowsRuntime.WinRTImport<WindowsMediaMediaProperties_ContainerEncodingPropertiesProjection>, WindowsMediaMediaProperties_IMediaEncodingPropertiesProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaMediaProperties_ContainerEncodingPropertiesProjection.self))
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProperties members

    /// Gets additional format properties for the media container.
    /// - Returns: A property set that contains format properties.
    public var properties: WindowsMediaMediaProperties_MediaPropertySet {
        get throws {
            try COM.NullResult.unwrap(_imediaEncodingProperties.get_Properties())
        }
    }

    /// Gets or sets the subtype of the media container.
    /// - Returns: The subtype.
    public var subtype: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Subtype()
        }
    }

    /// Gets or sets the subtype of the media container.
    /// - Returns: The subtype.
    public func subtype(_ value: Swift.String) throws {
        try _imediaEncodingProperties.put_Subtype(value)
    }

    /// Gets the format type.
    /// - Returns: The format type. For media containers, the format type is "Container".
    public var type: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Type()
        }
    }

    // MARK: Windows.Media.MediaProperties.IContainerEncodingProperties2 members

    /// Creates a copy of the **ContainerEncodingProperties** object.
    /// - Returns: A copy of the **ContainerEncodingProperties** object.
    public func copy() throws -> WindowsMediaMediaProperties_ContainerEncodingProperties {
        try COM.NullResult.unwrap(_icontainerEncodingProperties2.copy())
    }

    // MARK: Implementation details

    private var _imediaEncodingProperties_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties>? = nil

    internal var _imediaEncodingProperties: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties> {
        get throws {
            try _imediaEncodingProperties_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.self)
            }
        }
    }

    private var _icontainerEncodingProperties2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IContainerEncodingProperties2>? = nil

    internal var _icontainerEncodingProperties2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IContainerEncodingProperties2> {
        get throws {
            try _icontainerEncodingProperties2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IContainerEncodingProperties2.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IContainerEncodingProperties2.self)
            }
        }
    }

    deinit {
        _imediaEncodingProperties_storage?.release()
        _icontainerEncodingProperties2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.ContainerEncodingProperties", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}