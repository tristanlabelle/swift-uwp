// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the encoding properties of an audio stream.
public final class WindowsMediaMediaProperties_AudioEncodingProperties: WindowsRuntime.WinRTImport<WindowsMediaMediaProperties_AudioEncodingPropertiesProjection>, WindowsMediaMediaProperties_IMediaEncodingPropertiesProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaMediaProperties_AudioEncodingPropertiesProjection.self))
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingProperties members

    /// Gets or sets the audio bit rate.
    /// - Returns: The average bit rate of the audio stream, in bits per second.
    public var bitrate: Swift.UInt32 {
        get throws {
            try _interop.get_Bitrate()
        }
    }

    /// Gets or sets the audio bit rate.
    /// - Returns: The average bit rate of the audio stream, in bits per second.
    public func bitrate(_ value: Swift.UInt32) throws {
        try _interop.put_Bitrate(value)
    }

    /// Gets or sets the number of bits per audio sample.
    /// - Returns: The number of bits per audio sample.
    public var bitsPerSample: Swift.UInt32 {
        get throws {
            try _interop.get_BitsPerSample()
        }
    }

    /// Gets or sets the number of bits per audio sample.
    /// - Returns: The number of bits per audio sample.
    public func bitsPerSample(_ value: Swift.UInt32) throws {
        try _interop.put_BitsPerSample(value)
    }

    /// Gets or sets the number of audio channels.
    /// - Returns: The number of audio channels.
    public var channelCount: Swift.UInt32 {
        get throws {
            try _interop.get_ChannelCount()
        }
    }

    /// Gets or sets the number of audio channels.
    /// - Returns: The number of audio channels.
    public func channelCount(_ value: Swift.UInt32) throws {
        try _interop.put_ChannelCount(value)
    }

    /// Gets or sets audio sampling rate.
    /// - Returns: The number of audio samples per second.
    public var sampleRate: Swift.UInt32 {
        get throws {
            try _interop.get_SampleRate()
        }
    }

    /// Gets or sets audio sampling rate.
    /// - Returns: The number of audio samples per second.
    public func sampleRate(_ value: Swift.UInt32) throws {
        try _interop.put_SampleRate(value)
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProperties members

    /// Gets additional format properties for the audio stream.
    /// - Returns: A property set that contains format properties.
    public var properties: WindowsMediaMediaProperties_MediaPropertySet {
        get throws {
            try COM.NullResult.unwrap(_imediaEncodingProperties.get_Properties())
        }
    }

    /// Gets or sets the subtype of the format.
    /// - Returns: The subtype.
    public var subtype: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Subtype()
        }
    }

    /// Gets or sets the subtype of the format.
    /// - Returns: The subtype.
    public func subtype(_ value: Swift.String) throws {
        try _imediaEncodingProperties.put_Subtype(value)
    }

    /// Gets the format type.
    /// - Returns: The format type. For audio streams, the format type is "Audio".
    public var type: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Type()
        }
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingPropertiesWithFormatUserData members

    /// Sets the media format user data.
    /// - Parameter value: The media data to set.
    public func setFormatUserData(_ value: [Swift.UInt8]) throws {
        try _iaudioEncodingPropertiesWithFormatUserData.setFormatUserData(value)
    }

    /// Gets the media format user data.
    /// - Parameter value: Receives the media format data.
    public func getFormatUserData(_ value: inout [Swift.UInt8]) throws {
        try _iaudioEncodingPropertiesWithFormatUserData.getFormatUserData(&value)
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingProperties2 members

    /// Gets a value indicating whether the audio is encoded with spatial audio information.
    /// - Returns: True if the audio is encoded with spatial audio information; otherwise, false.
    public var isSpatial: Swift.Bool {
        get throws {
            try _iaudioEncodingProperties2.get_IsSpatial()
        }
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingProperties3 members

    /// Creates a copy of the **AudioEncodingProperties** object.
    /// - Returns: A copy of the **AudioEncodingProperties** object.
    public func copy() throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingProperties3.copy())
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics2 members

    /// Creates an instance of AudioEncodingProperties for Apple Lossless Audio Codec (ALAC) audio.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitsPerSample: The number of bits per sample.
    /// - Returns: The audio encoding properties.
    public static func createAlac(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitsPerSample: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics2.createAlac(sampleRate, channelCount, bitsPerSample))
    }

    /// Creates an instance of AudioEncodingProperties for Free Lossless Audio Codec (FLAC) audio.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitsPerSample: The number of bits per sample.
    /// - Returns: The audio encoding properties.
    public static func createFlac(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitsPerSample: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics2.createFlac(sampleRate, channelCount, bitsPerSample))
    }

    // MARK: Windows.Media.MediaProperties.IAudioEncodingPropertiesStatics members

    /// Creates an instance of AudioEncodingProperties for Advanced Audio Coding (AAC) audio.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitrate: The audio bit rate.
    /// - Returns: The audio encoding properties.
    public static func createAac(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitrate: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics.createAac(sampleRate, channelCount, bitrate))
    }

    /// Creates an instance of AudioEncodingProperties for Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitrate: The audio bit rate.
    /// - Returns: The audio encoding properties.
    public static func createAacAdts(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitrate: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics.createAacAdts(sampleRate, channelCount, bitrate))
    }

    /// Creates an instance of AudioEncodingProperties for MPEG Audio Layer-3 (MP3) audio.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitrate: The audio bit rate.
    /// - Returns: The audio encoding properties.
    public static func createMp3(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitrate: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics.createMp3(sampleRate, channelCount, bitrate))
    }

    /// Creates an instance of AudioEncodingProperties for Pulse Code Modulation (PCM) audio.
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitsPerSample: The audio bit depth.
    /// - Returns: The audio encoding properties.
    public static func createPcm(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitsPerSample: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics.createPcm(sampleRate, channelCount, bitsPerSample))
    }

    /// Creates an instance of AudioEncodingProperties for Windows Media Audio (WMA).
    /// - Parameter sampleRate: The audio sampling rate.
    /// - Parameter channelCount: The number of audio channels.
    /// - Parameter bitrate: The audio bit rate.
    /// - Returns: The audio encoding properties.
    public static func createWma(_ sampleRate: Swift.UInt32, _ channelCount: Swift.UInt32, _ bitrate: Swift.UInt32) throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioEncodingPropertiesStatics.createWma(sampleRate, channelCount, bitrate))
    }

    // MARK: Implementation details

    private var _imediaEncodingProperties_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties>? = nil

    internal var _imediaEncodingProperties: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties> {
        get throws {
            try _imediaEncodingProperties_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.self)
            }
        }
    }

    private var _iaudioEncodingPropertiesWithFormatUserData_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesWithFormatUserData>? = nil

    internal var _iaudioEncodingPropertiesWithFormatUserData: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesWithFormatUserData> {
        get throws {
            try _iaudioEncodingPropertiesWithFormatUserData_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesWithFormatUserData.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesWithFormatUserData.self)
            }
        }
    }

    private var _iaudioEncodingProperties2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties2>? = nil

    internal var _iaudioEncodingProperties2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties2> {
        get throws {
            try _iaudioEncodingProperties2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties2.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties2.self)
            }
        }
    }

    private var _iaudioEncodingProperties3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties3>? = nil

    internal var _iaudioEncodingProperties3: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties3> {
        get throws {
            try _iaudioEncodingProperties3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties3.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingProperties3.self)
            }
        }
    }

    deinit {
        _imediaEncodingProperties_storage?.release()
        _iaudioEncodingPropertiesWithFormatUserData_storage?.release()
        _iaudioEncodingProperties2_storage?.release()
        _iaudioEncodingProperties3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.AudioEncodingProperties", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iaudioEncodingPropertiesStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics2>? = nil

    internal static var _iaudioEncodingPropertiesStatics2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics2> {
        get throws {
            try _iaudioEncodingPropertiesStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.AudioEncodingProperties", id: CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics2.iid)
            }
        }
    }

    private static var _iaudioEncodingPropertiesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics>? = nil

    internal static var _iaudioEncodingPropertiesStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics> {
        get throws {
            try _iaudioEncodingPropertiesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.AudioEncodingProperties", id: CWinRT.SWRT_WindowsMediaMediaProperties_IAudioEncodingPropertiesStatics.iid)
            }
        }
    }
}