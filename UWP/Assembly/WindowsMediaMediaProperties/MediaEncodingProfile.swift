// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the encoding profile for an audio or video file. The encoding profile includes descriptions of the audio and video encoding formats, and a description of the media container.
public final class WindowsMediaMediaProperties_MediaEncodingProfile: WindowsRuntime.WinRTImport<WindowsMediaMediaProperties_MediaEncodingProfileProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaMediaProperties_MediaEncodingProfileProjection.self))
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfile members

    /// Gets or sets the encoding properties for the audio stream.
    /// - Returns: The encoding properties of the audio stream. If the profile does not contain an audio stream, the value is **null**.
    public var audio: WindowsMediaMediaProperties_AudioEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Audio())
        }
    }

    /// Gets or sets the encoding properties for the audio stream.
    /// - Returns: The encoding properties of the audio stream. If the profile does not contain an audio stream, the value is **null**.
    public func audio(_ value: WindowsMediaMediaProperties_AudioEncodingProperties?) throws {
        try _interop.put_Audio(value)
    }

    /// Gets or sets the properties of the media container.
    /// - Returns: The properties of the media container.
    public var container: WindowsMediaMediaProperties_ContainerEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Container())
        }
    }

    /// Gets or sets the properties of the media container.
    /// - Returns: The properties of the media container.
    public func container(_ value: WindowsMediaMediaProperties_ContainerEncodingProperties?) throws {
        try _interop.put_Container(value)
    }

    /// Gets or sets the encoding properties for the video stream.
    /// - Returns: The encoding properties of the video stream. If the profile does not contain a video stream, the value is **null**.
    public var video: WindowsMediaMediaProperties_VideoEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Video())
        }
    }

    /// Gets or sets the encoding properties for the video stream.
    /// - Returns: The encoding properties of the video stream. If the profile does not contain a video stream, the value is **null**.
    public func video(_ value: WindowsMediaMediaProperties_VideoEncodingProperties?) throws {
        try _interop.put_Video(value)
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfile2 members

    public func setAudioTracks(_ value: WindowsFoundationCollections_IIterable<WindowsMediaCore_AudioStreamDescriptor?>?) throws {
        try _imediaEncodingProfile2.setAudioTracks(value)
    }

    /// Retrieves the list of AudioStreamDescriptor objects describing the audio streams included in the **MediaEncodingProfile**.
    /// - Returns: A list of AudioStreamDescriptor objects.
    public func getAudioTracks() throws -> WindowsFoundationCollections_IVector<WindowsMediaCore_AudioStreamDescriptor?> {
        try COM.NullResult.unwrap(_imediaEncodingProfile2.getAudioTracks())
    }

    public func setVideoTracks(_ value: WindowsFoundationCollections_IIterable<WindowsMediaCore_VideoStreamDescriptor?>?) throws {
        try _imediaEncodingProfile2.setVideoTracks(value)
    }

    /// Retrieves the list of VideoStreamDescriptor objects describing the video streams included in the **MediaEncodingProfile**.
    /// - Returns: A list of VideoStreamDescriptor objects.
    public func getVideoTracks() throws -> WindowsFoundationCollections_IVector<WindowsMediaCore_VideoStreamDescriptor?> {
        try COM.NullResult.unwrap(_imediaEncodingProfile2.getVideoTracks())
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfile3 members

    public func setTimedMetadataTracks(_ value: WindowsFoundationCollections_IIterable<WindowsMediaCore_TimedMetadataStreamDescriptor?>?) throws {
        try _imediaEncodingProfile3.setTimedMetadataTracks(value)
    }

    /// Retrieves the list of TimedMetadataStreamDescriptor objects describing the timed metadata streams included in the **MediaEncodingProfile**.
    /// - Returns: A list of TimedMetadataStreamDescriptor objects.
    public func getTimedMetadataTracks() throws -> WindowsFoundationCollections_IVector<WindowsMediaCore_TimedMetadataStreamDescriptor?> {
        try COM.NullResult.unwrap(_imediaEncodingProfile3.getTimedMetadataTracks())
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfileStatics members

    /// Creates an encoding profile for AAC audio.
    /// - Parameter quality: Specifies whether to create a profile with a low bit rate, medium bit rate, or high bit rate.
    /// - Returns: Returns a media encoding profile.
    public static func createM4a(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createM4a(quality))
    }

    /// Creates an encoding profile for MP3 (MPEG-1 layer 3) audio.
    /// - Parameter quality: Specifies whether to create a profile with a low bit rate, medium bit rate, or high bit rate.
    /// - Returns: Returns a media encoding profile.
    public static func createMp3(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createMp3(quality))
    }

    /// Creates an encoding profile for Windows Media Audio (WMA).
    /// - Parameter quality: Specifies whether to create a profile with a low bit rate, medium bit rate, or high bit rate.
    /// - Returns: Returns a media encoding profile.
    public static func createWma(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createWma(quality))
    }

    /// Creates an encoding profile for H.264 video.
    /// - Parameter quality: Specifies the video resolution of the profile.
    /// - Returns: Returns a media encoding profile.
    public static func createMp4(_ quality: WindowsMediaMediaProperties_VideoEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createMp4(quality))
    }

    /// Creates an encoding profile for Windows Media Video (WMV).
    /// - Parameter quality: Specifies the video resolution of the profile.
    /// - Returns: Returns a media encoding profile.
    public static func createWmv(_ quality: WindowsMediaMediaProperties_VideoEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createWmv(quality))
    }

    /// Creates an encoding profile from an existing media file.
    /// - Parameter file: The media file from which to create the profile.
    /// - Returns: An object that is used to control the asynchronous operation.
    public static func createFromFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaMediaProperties_MediaEncodingProfile?> {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createFromFileAsync(file))
    }

    /// Creates an encoding profile from a stream that contains media data.
    /// - Parameter stream: The media stream from which to create the profile.
    /// - Returns: An object that is used to control the asynchronous operation.
    public static func createFromStreamAsync(_ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaMediaProperties_MediaEncodingProfile?> {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics.createFromStreamAsync(stream))
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfileStatics2 members

    /// Creates an instance of MediaEncodingProfile for WAV
    /// - Parameter quality: The audio encoding quality.
    /// - Returns: The media encoding profile.
    public static func createWav(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics2.createWav(quality))
    }

    /// Creates an instance of MediaEncodingProfile for AVI.
    /// - Parameter quality: The video quality.
    /// - Returns: The media encoding profile.
    public static func createAvi(_ quality: WindowsMediaMediaProperties_VideoEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics2.createAvi(quality))
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProfileStatics3 members

    /// Creates an instance of MediaEncodingProfile for Apple Lossless Audio Codec (ALAC) audio.
    /// - Parameter quality: The ecoding quality.
    /// - Returns: The media encoding profile.
    public static func createAlac(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics3.createAlac(quality))
    }

    /// Creates an instance of MediaEncodingProfile for Free Lossless Audio Codec (FLAC) audio.
    /// - Parameter quality: The ecoding quality.
    /// - Returns: The media encoding profile.
    public static func createFlac(_ quality: WindowsMediaMediaProperties_AudioEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics3.createFlac(quality))
    }

    /// Creates an instance of MediaEncodingProfile for High Efficiency Video Coding (HEVC) video, also known as H.265 video.
    /// - Parameter quality: The video quality.
    /// - Returns: The media encoding profile.
    public static func createHevc(_ quality: WindowsMediaMediaProperties_VideoEncodingQuality) throws -> WindowsMediaMediaProperties_MediaEncodingProfile {
        try COM.NullResult.unwrap(_imediaEncodingProfileStatics3.createHevc(quality))
    }

    // MARK: Implementation details

    private var _imediaEncodingProfile2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile2>? = nil

    internal var _imediaEncodingProfile2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile2> {
        get throws {
            try _imediaEncodingProfile2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile2.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile2.self)
            }
        }
    }

    private var _imediaEncodingProfile3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile3>? = nil

    internal var _imediaEncodingProfile3: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile3> {
        get throws {
            try _imediaEncodingProfile3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile3.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfile3.self)
            }
        }
    }

    deinit {
        _imediaEncodingProfile2_storage?.release()
        _imediaEncodingProfile3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.MediaEncodingProfile", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imediaEncodingProfileStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics>? = nil

    internal static var _imediaEncodingProfileStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics> {
        get throws {
            try _imediaEncodingProfileStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.MediaEncodingProfile", id: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics.iid)
            }
        }
    }

    private static var _imediaEncodingProfileStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics2>? = nil

    internal static var _imediaEncodingProfileStatics2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics2> {
        get throws {
            try _imediaEncodingProfileStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.MediaEncodingProfile", id: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics2.iid)
            }
        }
    }

    private static var _imediaEncodingProfileStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics3>? = nil

    internal static var _imediaEncodingProfileStatics3: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics3> {
        get throws {
            try _imediaEncodingProfileStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.MediaEncodingProfile", id: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProfileStatics3.iid)
            }
        }
    }
}