// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the encoding properties of a video stream.
public final class WindowsMediaMediaProperties_VideoEncodingProperties: WindowsRuntime.WinRTImport<WindowsMediaMediaProperties_VideoEncodingPropertiesProjection>, WindowsMediaMediaProperties_IMediaEncodingPropertiesProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaMediaProperties_VideoEncodingPropertiesProjection.self))
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingProperties members

    /// Gets or sets the video bit rate.
    /// - Returns: The average bit rate of the video stream, in bits per second.
    public var bitrate: Swift.UInt32 {
        get throws {
            try _interop.get_Bitrate()
        }
    }

    /// Gets or sets the video bit rate.
    /// - Returns: The average bit rate of the video stream, in bits per second.
    public func bitrate(_ value: Swift.UInt32) throws {
        try _interop.put_Bitrate(value)
    }

    /// Gets or sets the video frame rate.
    /// - Returns: The frame rate, in frames per second.
    public var frameRate: WindowsMediaMediaProperties_MediaRatio {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FrameRate())
        }
    }

    /// Gets or sets the video image height.
    /// - Returns: The height of the video image, in pixels.
    public var height: Swift.UInt32 {
        get throws {
            try _interop.get_Height()
        }
    }

    /// Gets or sets the video image height.
    /// - Returns: The height of the video image, in pixels.
    public func height(_ value: Swift.UInt32) throws {
        try _interop.put_Height(value)
    }

    /// Gets or sets the pixel aspect ratio.
    /// - Returns: The pixel aspect ratio.
    public var pixelAspectRatio: WindowsMediaMediaProperties_MediaRatio {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PixelAspectRatio())
        }
    }

    /// Gets or sets the video image width.
    /// - Returns: The width of the video image, in pixels.
    public var width: Swift.UInt32 {
        get throws {
            try _interop.get_Width()
        }
    }

    /// Gets or sets the video image width.
    /// - Returns: The width of the video image, in pixels.
    public func width(_ value: Swift.UInt32) throws {
        try _interop.put_Width(value)
    }

    // MARK: Windows.Media.MediaProperties.IMediaEncodingProperties members

    /// Gets additional format properties for the video stream.
    /// - Returns: A property set that contains format properties.
    public var properties: WindowsMediaMediaProperties_MediaPropertySet {
        get throws {
            try COM.NullResult.unwrap(_imediaEncodingProperties.get_Properties())
        }
    }

    /// Gets or sets the subtype of the format.
    /// - Returns: The subtype.
    public var subtype: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Subtype()
        }
    }

    /// Gets or sets the subtype of the format.
    /// - Returns: The subtype.
    public func subtype(_ value: Swift.String) throws {
        try _imediaEncodingProperties.put_Subtype(value)
    }

    /// Gets the format type.
    /// - Returns: The format type. For video streams, the format type is "Video".
    public var type: Swift.String {
        get throws {
            try _imediaEncodingProperties.get_Type()
        }
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingProperties2 members

    /// Gets or sets the media format profile.
    /// - Returns: The media format profile.
    public var profileId: Swift.Int32 {
        get throws {
            try _ivideoEncodingProperties2.get_ProfileId()
        }
    }

    /// Gets or sets the media format profile.
    /// - Returns: The media format profile.
    public func profileId(_ value: Swift.Int32) throws {
        try _ivideoEncodingProperties2.put_ProfileId(value)
    }

    /// Sets the media format user data.
    /// - Parameter value: The media data to set.
    public func setFormatUserData(_ value: [Swift.UInt8]) throws {
        try _ivideoEncodingProperties2.setFormatUserData(value)
    }

    /// Gets the media format user data.
    /// - Parameter value: Receives the media format data.
    public func getFormatUserData(_ value: inout [Swift.UInt8]) throws {
        try _ivideoEncodingProperties2.getFormatUserData(&value)
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingProperties3 members

    /// Gets a value indicating the stereoscopic video packing mode of the video stream.
    /// - Returns: The stereoscopic video packing mode of the video stream.
    public var stereoscopicVideoPackingMode: WindowsMediaMediaProperties_StereoscopicVideoPackingMode {
        get throws {
            try _ivideoEncodingProperties3.get_StereoscopicVideoPackingMode()
        }
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingProperties4 members

    /// Gets a value that specifies the spherical video format of a video frame.
    /// - Returns: The spherical video format of a video frame.
    public var sphericalVideoFrameFormat: WindowsMediaMediaProperties_SphericalVideoFrameFormat {
        get throws {
            try _ivideoEncodingProperties4.get_SphericalVideoFrameFormat()
        }
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingProperties5 members

    /// Creates a copy of the **VideoEncodingProperties** object.
    /// - Returns: A copy of the **VideoEncodingProperties** object.
    public func copy() throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_ivideoEncodingProperties5.copy())
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics2 members

    /// Creates an instance of VideoEncodingProperties for High Efficiency Video Coding (HEVC).
    /// - Returns: The video encoding properties.
    public static func createHevc() throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_ivideoEncodingPropertiesStatics2.createHevc())
    }

    // MARK: Windows.Media.MediaProperties.IVideoEncodingPropertiesStatics members

    /// Creates an instance of VideoEncodingProperties for a H.263 video.
    /// - Returns: The video encoding properties.
    public static func createH264() throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_ivideoEncodingPropertiesStatics.createH264())
    }

    /// Creates an instance of VideoEncodingProperties for a MPEG-2 video.
    /// - Returns: The video encoding properties.
    public static func createMpeg2() throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_ivideoEncodingPropertiesStatics.createMpeg2())
    }

    /// Creates an instance of VideoEncodingProperties for a uncompressed video.
    /// - Parameter subtype: The media subtype of the format.
    /// - Parameter width: The video image width.
    /// - Parameter height: The video image height.
    /// - Returns: The video encoding properties.
    public static func createUncompressed(_ subtype: Swift.String, _ width: Swift.UInt32, _ height: Swift.UInt32) throws -> WindowsMediaMediaProperties_VideoEncodingProperties {
        try COM.NullResult.unwrap(_ivideoEncodingPropertiesStatics.createUncompressed(subtype, width, height))
    }

    // MARK: Implementation details

    private var _imediaEncodingProperties_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties>? = nil

    internal var _imediaEncodingProperties: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties> {
        get throws {
            try _imediaEncodingProperties_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IMediaEncodingProperties.self)
            }
        }
    }

    private var _ivideoEncodingProperties2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties2>? = nil

    internal var _ivideoEncodingProperties2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties2> {
        get throws {
            try _ivideoEncodingProperties2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties2.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties2.self)
            }
        }
    }

    private var _ivideoEncodingProperties3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties3>? = nil

    internal var _ivideoEncodingProperties3: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties3> {
        get throws {
            try _ivideoEncodingProperties3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties3.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties3.self)
            }
        }
    }

    private var _ivideoEncodingProperties4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties4>? = nil

    internal var _ivideoEncodingProperties4: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties4> {
        get throws {
            try _ivideoEncodingProperties4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties4.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties4.self)
            }
        }
    }

    private var _ivideoEncodingProperties5_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties5>? = nil

    internal var _ivideoEncodingProperties5: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties5> {
        get throws {
            try _ivideoEncodingProperties5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties5.iid).cast(to: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingProperties5.self)
            }
        }
    }

    deinit {
        _imediaEncodingProperties_storage?.release()
        _ivideoEncodingProperties2_storage?.release()
        _ivideoEncodingProperties3_storage?.release()
        _ivideoEncodingProperties4_storage?.release()
        _ivideoEncodingProperties5_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.VideoEncodingProperties", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ivideoEncodingPropertiesStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics2>? = nil

    internal static var _ivideoEncodingPropertiesStatics2: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics2> {
        get throws {
            try _ivideoEncodingPropertiesStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.VideoEncodingProperties", id: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics2.iid)
            }
        }
    }

    private static var _ivideoEncodingPropertiesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics>? = nil

    internal static var _ivideoEncodingPropertiesStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics> {
        get throws {
            try _ivideoEncodingPropertiesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.MediaProperties.VideoEncodingProperties", id: CWinRT.SWRT_WindowsMediaMediaProperties_IVideoEncodingPropertiesStatics.iid)
            }
        }
    }
}