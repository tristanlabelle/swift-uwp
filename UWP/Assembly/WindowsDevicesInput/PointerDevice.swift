// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports the ability to identify the connected pointer devices and determine their capabilities.
public final class WindowsDevicesInput_PointerDevice: WindowsRuntime.WinRTImport<WindowsDevicesInput_PointerDeviceProjection> {
    // MARK: Windows.Devices.Input.IPointerDevice members

    /// Gets a value indicating whether the pointer device is an integrated device. For example, a video display with an integrated touch digitizer compared to an external pen/stylus digitizer.
    /// - Returns: True if the pointer device is integrated; otherwise, false.
    public var isIntegrated: Swift.Bool {
        get throws {
            try _interop.get_IsIntegrated()
        }
    }

    /// Gets a value indicating the maximum number of contacts supported by the input device.
    /// - Returns: The number of contacts.
    public var maxContacts: Swift.UInt32 {
        get throws {
            try _interop.get_MaxContacts()
        }
    }

    /// Gets the coordinates of the bounding rectangle supported by the input device.
    /// - Returns: The bounding rectangle at 96 dots per inch (dpi).
    public var physicalDeviceRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_PhysicalDeviceRect()
        }
    }

    /// Gets the pointer device type.
    /// - Returns: A pointer device type.
    public var pointerDeviceType: WindowsDevicesInput_PointerDeviceType {
        get throws {
            try _interop.get_PointerDeviceType()
        }
    }

    /// Gets the screen coordinates that are mapped to the bounding rectangle supported by the input device.
    /// - Returns: The screen coordinates, in device-independent pixel (DIP).
    public var screenRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_ScreenRect()
        }
    }

    /// Gets a collection containing the supported pointer device usages.
    /// - Returns: A collection containing the supported pointer device usages.
    public var supportedUsages: WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDeviceUsage> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedUsages())
        }
    }

    // MARK: Windows.Devices.Input.IPointerDevice2 members

    /// Gets the maximum number of hover contacts supported by the input device.
    /// - Returns: The default value is 0.
    public var maxPointersWithZDistance: Swift.UInt32 {
        get throws {
            try _ipointerDevice2.get_MaxPointersWithZDistance()
        }
    }

    // MARK: Windows.Devices.Input.IPointerDeviceStatics members

    /// Gets information about the pointer device associated with the specified input pointer ID.
    /// - Parameter pointerId: The ID of the pointer input.
    /// - Returns: The PointerDevice object that represents the associated pointer device.
    public static func getPointerDevice(_ pointerId: Swift.UInt32) throws -> WindowsDevicesInput_PointerDevice {
        try COM.NullResult.unwrap(_ipointerDeviceStatics.getPointerDevice(pointerId))
    }

    /// Gets information about the pointer devices attached to the system.
    /// - Returns: The collection of PointerDevice objects that represent the pointer devices attached to the system.
    public static func getPointerDevices() throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDevice?> {
        try COM.NullResult.unwrap(_ipointerDeviceStatics.getPointerDevices())
    }

    // MARK: Implementation details

    private var _ipointerDevice2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInput_IPointerDevice2>? = nil

    internal var _ipointerDevice2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInput_IPointerDevice2> {
        get throws {
            try _ipointerDevice2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesInput_IPointerDevice2.iid).cast(to: CWinRT.SWRT_WindowsDevicesInput_IPointerDevice2.self)
            }
        }
    }

    deinit {
        _ipointerDevice2_storage?.release()
    }

    private static var _ipointerDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInput_IPointerDeviceStatics>? = nil

    internal static var _ipointerDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesInput_IPointerDeviceStatics> {
        get throws {
            try _ipointerDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Input.PointerDevice", id: CWinRT.SWRT_WindowsDevicesInput_IPointerDeviceStatics.iid)
            }
        }
    }
}