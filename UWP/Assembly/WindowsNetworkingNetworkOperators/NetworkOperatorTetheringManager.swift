// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This interface exposes the methods and properties used to control and configure tethering capabilities for a specific network account.
public final class WindowsNetworkingNetworkOperators_NetworkOperatorTetheringManager: WindowsRuntime.WinRTImport<WindowsNetworkingNetworkOperators_NetworkOperatorTetheringManagerProjection> {
    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager members

    /// Gets the current number of connected clients on the tethering network.
    /// - Returns: The current number of clients.
    public var clientCount: Swift.UInt32 {
        get throws {
            try _interop.get_ClientCount()
        }
    }

    /// Gets the maximum number of client connections over a tethered network.
    /// - Returns: The maximum number of client connections
    public var maxClientCount: Swift.UInt32 {
        get throws {
            try _interop.get_MaxClientCount()
        }
    }

    /// Gets the current operational state of the tethering feature. Possible values are defined by TetheringOperationalState
    /// - Returns: The current operational state.
    public var tetheringOperationalState: WindowsNetworkingNetworkOperators_TetheringOperationalState {
        get throws {
            try _interop.get_TetheringOperationalState()
        }
    }

    /// Gets the current access point configuration for a network account as defined by a NetworkOperatorTetheringAccessPointConfiguration object.
    /// - Returns: Indicates the network account id and specifies the pass-phrase used for authentication when establishing a connection over the tethering network.
    public func getCurrentAccessPointConfiguration() throws -> WindowsNetworkingNetworkOperators_NetworkOperatorTetheringAccessPointConfiguration {
        try COM.NullResult.unwrap(_interop.getCurrentAccessPointConfiguration())
    }

    /// Use this method to provide tethering network configuration details for the tethering network.
    /// - Parameter configuration: Provides a network account ID (SSID) and specifies the passphrase used for authentication when establishing a tethered network connection.
    /// - Returns: The asynchronous action.
    public func configureAccessPointAsync(_ configuration: WindowsNetworkingNetworkOperators_NetworkOperatorTetheringAccessPointConfiguration?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.configureAccessPointAsync(configuration))
    }

    /// Establishes the tethering network.
    /// - Returns: The result of the tethering network operation.
    public func startTetheringAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_NetworkOperatorTetheringOperationResult?> {
        try COM.NullResult.unwrap(_interop.startTetheringAsync())
    }

    /// Shuts down the tethering network.
    /// - Returns: The result of the tethering network operation.
    public func stopTetheringAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_NetworkOperatorTetheringOperationResult?> {
        try COM.NullResult.unwrap(_interop.stopTetheringAsync())
    }

    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringClientManager members

    /// Retrieves a list of tethering clients for this NetworkOperatorTetheringManager.
    /// - Returns: A list of clients.
    public func getTetheringClients() throws -> WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_NetworkOperatorTetheringClient?> {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringClientManager.getTetheringClients())
    }

    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics3 members

    /// Creates a NetworkOperatorTetheringManager using the given profile as the public interface, and on the given NetworkAdapter as the private interface.
    /// - Parameter profile: Connection profile to be used.
    /// - Parameter adapter: The network adapter where the connection is shared. The shared connection will be controlled by the NetworkOperatorTetheringManager.
    /// - Returns: The resulting manager object.
    public static func createFromConnectionProfile(_ profile: WindowsNetworkingConnectivity_ConnectionProfile?, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsNetworkingNetworkOperators_NetworkOperatorTetheringManager {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringManagerStatics3.createFromConnectionProfileWithTargetAdapter(profile, adapter))
    }

    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4 members

    /// Gets a value indicating whether the *NoConnections* timeout is enabled. If enabled, tethering turns off automatically in 5 minutes after the last peer of the tethering connection goes away.
    /// - Returns: `true` if the *NoConnections* timeout is enabled, otherwise `false`.
    public static func isNoConnectionsTimeoutEnabled() throws -> Swift.Bool {
        try _inetworkOperatorTetheringManagerStatics4.isNoConnectionsTimeoutEnabled()
    }

    /// Enables the *NoConnections* timeout. This means that tethering turns off automatically in 5 minutes after the last peer of the tethering connection goes away.
    public static func enableNoConnectionsTimeout() throws {
        try _inetworkOperatorTetheringManagerStatics4.enableNoConnectionsTimeout()
    }

    /// Asynchronously enables the *NoConnections* timeout. This means that tethering turns off automatically in 5 minutes after the last peer of the tethering connection goes away.
    /// - Returns: An asynchronous object, which you can await.
    public static func enableNoConnectionsTimeoutAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringManagerStatics4.enableNoConnectionsTimeoutAsync())
    }

    /// Disables the *NoConnections* timeout.
    public static func disableNoConnectionsTimeout() throws {
        try _inetworkOperatorTetheringManagerStatics4.disableNoConnectionsTimeout()
    }

    /// Asynchronously disables the *NoConnections* timeout.
    /// - Returns: An asynchronous object, which you can await.
    public static func disableNoConnectionsTimeoutAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringManagerStatics4.disableNoConnectionsTimeoutAsync())
    }

    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics members

    /// Indicates if a device is capable of creating a tethering network. Possible values are defined by TetheringCapability.
    /// - Parameter networkAccountId: The network account ID.
    /// - Returns: The tethering capabilities of a network account.
    public static func getTetheringCapability(_ networkAccountId: Swift.String) throws -> WindowsNetworkingNetworkOperators_TetheringCapability {
        try _inetworkOperatorTetheringManagerStatics.getTetheringCapability(networkAccountId)
    }

    /// Creates an instance of NetworkOperatorTetheringManager for a specific network account using the provided network account ID for the mobile broadband device.
    /// - Parameter networkAccountId: The network account ID.
    /// - Returns: A NetworkOperatorTetheringManager object.
    public static func createFromNetworkAccountId(_ networkAccountId: Swift.String) throws -> WindowsNetworkingNetworkOperators_NetworkOperatorTetheringManager {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringManagerStatics.createFromNetworkAccountId(networkAccountId))
    }

    // MARK: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics2 members

    /// Gets tethering capabilities, based on the given connection profile.
    /// - Parameter profile: Connection profile to be checked.
    /// - Returns: Tethering capabilities of the connection profile.
    public static func getTetheringCapabilityFromConnectionProfile(_ profile: WindowsNetworkingConnectivity_ConnectionProfile?) throws -> WindowsNetworkingNetworkOperators_TetheringCapability {
        try _inetworkOperatorTetheringManagerStatics2.getTetheringCapabilityFromConnectionProfile(profile)
    }

    /// Creates a NetworkOperatorTetheringManager using the given profile as the public interface and Wi-Fi as the private interface.
    /// - Parameter profile: Connection profile to be used.
    /// - Returns: The resulting manager object.
    public static func createFromConnectionProfile(_ profile: WindowsNetworkingConnectivity_ConnectionProfile?) throws -> WindowsNetworkingNetworkOperators_NetworkOperatorTetheringManager {
        try COM.NullResult.unwrap(_inetworkOperatorTetheringManagerStatics2.createFromConnectionProfile(profile))
    }

    // MARK: Implementation details

    private var _inetworkOperatorTetheringClientManager_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringClientManager>? = nil

    internal var _inetworkOperatorTetheringClientManager: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringClientManager> {
        get throws {
            try _inetworkOperatorTetheringClientManager_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringClientManager.iid).cast(to: CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringClientManager.self)
            }
        }
    }

    deinit {
        _inetworkOperatorTetheringClientManager_storage?.release()
    }

    private static var _inetworkOperatorTetheringManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics3>? = nil

    internal static var _inetworkOperatorTetheringManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics3> {
        get throws {
            try _inetworkOperatorTetheringManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager", id: CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics3.iid)
            }
        }
    }

    private static var _inetworkOperatorTetheringManagerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics4>? = nil

    internal static var _inetworkOperatorTetheringManagerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics4> {
        get throws {
            try _inetworkOperatorTetheringManagerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager", id: CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics4.iid)
            }
        }
    }

    private static var _inetworkOperatorTetheringManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics>? = nil

    internal static var _inetworkOperatorTetheringManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics> {
        get throws {
            try _inetworkOperatorTetheringManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager", id: CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics.iid)
            }
        }
    }

    private static var _inetworkOperatorTetheringManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics2>? = nil

    internal static var _inetworkOperatorTetheringManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics2> {
        get throws {
            try _inetworkOperatorTetheringManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager", id: CWinRT.SWRT_WindowsNetworkingNetworkOperators_INetworkOperatorTetheringManagerStatics2.iid)
            }
        }
    }
}