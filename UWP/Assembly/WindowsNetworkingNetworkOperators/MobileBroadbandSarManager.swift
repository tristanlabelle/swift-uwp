// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the SAR configuration properties and the control method to change them on the device.
public final class WindowsNetworkingNetworkOperators_MobileBroadbandSarManager: WindowsRuntime.WinRTImport<WindowsNetworkingNetworkOperators_MobileBroadbandSarManagerProjection> {
    // MARK: Windows.Networking.NetworkOperators.IMobileBroadbandSarManager members

    /// Gets the collection of current SAR configuration models for each antenna on the device. 
    /// - Returns: The collection of current SAR configuration models for each antenna on the device.
    public var antennas: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandAntennaSar?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Antennas())
        }
    }

    /// Gets the time window of the hysteresis timer that is used to determine antenna's transmission state.
    /// - Returns: The time window of the hysteresis timer.
    public var hysteresisTimerPeriod: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_HysteresisTimerPeriod()
        }
    }

    /// Gets a value indicating whether SAR backoff functionality is enabled on the device.
    /// - Returns: True if SAR backoff functionality is enabled; otherwise, false.
    public var isBackoffEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsBackoffEnabled()
        }
    }

    /// Gets a value indicating if SAR configuration is controlled by device hardware.
    /// - Returns: True if SAR configuration is controlled by device hardware; otherwise, false.
    public var isSarControlledByHardware: Swift.Bool {
        get throws {
            try _interop.get_IsSarControlledByHardware()
        }
    }

    /// Gets a value indicating if WiFi and cellular SAR are integrated in the device.
    /// - Returns: True if WiFi and cellular SAR are integrated in the device; otherwise, false.
    public var isWiFiHardwareIntegrated: Swift.Bool {
        get throws {
            try _interop.get_IsWiFiHardwareIntegrated()
        }
    }

    /// Occurs when there is notification received from device that indicate a change in the current transmission state.
    public func transmissionStateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsNetworkingNetworkOperators_MobileBroadbandSarManager?, WindowsNetworkingNetworkOperators_MobileBroadbandTransmissionStateChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TransmissionStateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: transmissionStateChanged)
    }

    public func transmissionStateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TransmissionStateChanged(token)
    }

    /// Enables SAR backoff functionality on the device.
    /// - Returns: An asynchronous action.
    public func enableBackoffAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.enableBackoffAsync())
    }

    /// Disables SAR backoff functionality on the device.
    /// - Returns: An asynchronous action.
    public func disableBackoffAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.disableBackoffAsync())
    }

    public func setConfigurationAsync(_ antennas: WindowsFoundationCollections_IIterable<WindowsNetworkingNetworkOperators_MobileBroadbandAntennaSar?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setConfigurationAsync(antennas))
    }

    /// Sets the device back to hardware control mode. The relevant SAR configuration values are reset to the hardware default settings.
    /// - Returns: An asynchronous action.
    public func revertSarToHardwareControlAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.revertSarToHardwareControlAsync())
    }

    /// Sets the hysteresis timer (1-5 seconds) used to determine if transmission activity is idle.
    /// - Parameter timerPeriod: /**  The time-window size ranging from 1 to 5 seconds.
    /// - Returns: An asynchronous action.
    public func setTransmissionStateChangedHysteresisAsync(_ timerPeriod: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setTransmissionStateChangedHysteresisAsync(timerPeriod))
    }

    /// Gets a value that indicates whether the modem is transmitting or idle.
    /// - Returns: True if the modem is transmitting; otherwise, it is idle.
    public func getIsTransmittingAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.getIsTransmittingAsync())
    }

    /// Starts monitoring the transmission state change on the device.
    public func startTransmissionStateMonitoring() throws {
        try _interop.startTransmissionStateMonitoring()
    }

    /// Stops monitoring the transmission state change on the device.
    public func stopTransmissionStateMonitoring() throws {
        try _interop.stopTransmissionStateMonitoring()
    }

    // MARK: Implementation details
}