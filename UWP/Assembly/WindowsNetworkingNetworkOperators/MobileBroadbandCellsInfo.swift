// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Retrieves the serving and neighboring network cell information including respective signal strength and cell tower identification information.
public final class WindowsNetworkingNetworkOperators_MobileBroadbandCellsInfo: WindowsRuntime.WinRTImport<WindowsNetworkingNetworkOperators_MobileBroadbandCellsInfoProjection> {
    // MARK: Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo members

    /// Gets a read-only array of neighboring [**MobileBroadbandCellCdma**](mobilebroadbandcellcdma.md containing all CDMA providers.
    /// - Returns: A read-only array of neighboring [**MobileBroadbandCellCdma**](mobilebroadbandcellcdma.md containing all CDMA providers.
    public var neighboringCellsCdma: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellCdma?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NeighboringCellsCdma())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellGsm containing all GSM providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellGsm containing all GSM providers.
    public var neighboringCellsGsm: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellGsm?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NeighboringCellsGsm())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellLte containing all LTE providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellLte containing all LTE providers.
    public var neighboringCellsLte: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellLte?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NeighboringCellsLte())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellTdscdma containing all TDSCMA providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellTdscdma containing all TDSCMA providers.
    public var neighboringCellsTdscdma: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellTdscdma?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NeighboringCellsTdscdma())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellUmts containing all UMTS providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellUmts containing all UMTS providers.
    public var neighboringCellsUmts: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellUmts?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NeighboringCellsUmts())
        }
    }

    /// Gets a read-only array of serving MobileBroadbandCellCdma containing all CDMA providers.
    /// - Returns: A read-only array of serving MobileBroadbandCellCdma containing all CDMA providers.
    public var servingCellsCdma: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellCdma?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServingCellsCdma())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellGsm containing all GSM providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellGsm containing all GSM providers.
    public var servingCellsGsm: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellGsm?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServingCellsGsm())
        }
    }

    /// Gets a read-only array of neighboring MobileBroadbandCellLte containing all LTE providers.
    /// - Returns: A read-only array of neighboring MobileBroadbandCellLte containing all LTE providers.
    public var servingCellsLte: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellLte?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServingCellsLte())
        }
    }

    /// Gets a read-only array of serving MobileBroadbandCellTdscdma containing all TDSCMA providers.
    /// - Returns: A read-only array of serving MobileBroadbandCellTdscdma containing all TDSCMA providers.
    public var servingCellsTdscdma: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellTdscdma?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServingCellsTdscdma())
        }
    }

    /// Gets a read-only array of serving MobileBroadbandCellUmts containing all UMTS providers.
    /// - Returns: A read-only array of serving MobileBroadbandCellUmts containing all UMTS providers.
    public var servingCellsUmts: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellUmts?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServingCellsUmts())
        }
    }

    // MARK: Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2 members

    public var neighboringCellsNR: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellNR?> {
        get throws {
            try COM.NullResult.unwrap(_imobileBroadbandCellsInfo2.get_NeighboringCellsNR())
        }
    }

    public var servingCellsNR: WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_MobileBroadbandCellNR?> {
        get throws {
            try COM.NullResult.unwrap(_imobileBroadbandCellsInfo2.get_ServingCellsNR())
        }
    }

    // MARK: Implementation details

    private var _imobileBroadbandCellsInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IMobileBroadbandCellsInfo2>? = nil

    internal var _imobileBroadbandCellsInfo2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IMobileBroadbandCellsInfo2> {
        get throws {
            try _imobileBroadbandCellsInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingNetworkOperators_IMobileBroadbandCellsInfo2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingNetworkOperators_IMobileBroadbandCellsInfo2.self)
            }
        }
    }

    deinit {
        _imobileBroadbandCellsInfo2_storage?.release()
    }
}