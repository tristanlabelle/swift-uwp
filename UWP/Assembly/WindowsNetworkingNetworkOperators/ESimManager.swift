// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A class that you can use to construct an ESimWatcher, and to obtain service information.
public enum WindowsNetworkingNetworkOperators_ESimManager {
    // MARK: Windows.Networking.NetworkOperators.IESimManagerStatics members

    /// Gets service information for the eSIM manager object.
    /// - Returns: Service information for the eSIM manager object.
    public static var serviceInfo: WindowsNetworkingNetworkOperators_ESimServiceInfo {
        get throws {
            try COM.NullResult.unwrap(_iesimManagerStatics.get_ServiceInfo())
        }
    }

    /// Occurs when a property of the service information object changes.
    public static func serviceInfoChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iesimManagerStatics.add_ServiceInfoChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: serviceInfoChanged)
    }

    public static func serviceInfoChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iesimManagerStatics.remove_ServiceInfoChanged(token)
    }

    /// Attempts to create a new instance of the ESimWatcher class.
    /// - Returns: A new instance of the ESimWatcher class, or `null` if the caller's user security identifier (SID) is not authorized by the Windows service that handles eSIM-related operation requests.
    public static func tryCreateESimWatcher() throws -> WindowsNetworkingNetworkOperators_ESimWatcher {
        try COM.NullResult.unwrap(_iesimManagerStatics.tryCreateESimWatcher())
    }

    // MARK: Implementation details

    private static var _iesimManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESimManagerStatics>? = nil

    internal static var _iesimManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESimManagerStatics> {
        get throws {
            try _iesimManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.NetworkOperators.ESimManager", id: CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESimManagerStatics.iid)
            }
        }
    }
}