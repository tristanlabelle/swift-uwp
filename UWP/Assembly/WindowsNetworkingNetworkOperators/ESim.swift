// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A class that represents an embedded SIM (eSIM, or eUICC). An eSIM stores one or more identities (eSIM profiles) belonging to one or more mobile network operators (MNOs). An eSIM is not a form factor; it's a way to manage SIM profiles.
public final class WindowsNetworkingNetworkOperators_ESim: WindowsRuntime.WinRTImport<WindowsNetworkingNetworkOperators_ESimProjection> {
    // MARK: Windows.Networking.NetworkOperators.IESim members

    /// Gets the available memory on the SIM card in whole bytes.
    /// - Returns: The available memory on the SIM card in whole bytes.
    public var availableMemoryInBytes: Swift.Int32? {
        get throws {
            try _interop.get_AvailableMemoryInBytes()
        }
    }

    /// Gets the eSIM ID (EID).
    /// - Returns: The eSIM ID (EID).
    public var eid: Swift.String {
        get throws {
            try _interop.get_Eid()
        }
    }

    /// Gets the eSIM firmware version.
    /// - Returns: The eSIM firmware version.
    public var firmwareVersion: Swift.String {
        get throws {
            try _interop.get_FirmwareVersion()
        }
    }

    /// Gets the device identifier, or DeviceInformation Id, of the network MobileBroadbandModem device that carries the eSIM.
    /// - Returns: The device id of the device that carries the eSIM.
    public var mobileBroadbandModemDeviceId: Swift.String {
        get throws {
            try _interop.get_MobileBroadbandModemDeviceId()
        }
    }

    /// Gets the policy for the eSIM, regarding whether the eSIM should be shown on the Local User Interface (LUI) for eSIM management.
    /// - Returns: The policy for the eSIM, regarding whether the eSIM should be shown on the LUI for eSIM management.
    public var policy: WindowsNetworkingNetworkOperators_ESimPolicy {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Policy())
        }
    }

    /// Gets the state of the eSIM, which indicates the presence and working status of the eSIM.
    /// - Returns: The state (presence and working status) of the eSIM.
    public var state: WindowsNetworkingNetworkOperators_ESimState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Occurs when the collection of eSIM profiles changes, or when a property of one of the profiles in the collection changes.
    public func profileChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsNetworkingNetworkOperators_ESim?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ProfileChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: profileChanged)
    }

    public func profileChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ProfileChanged(token)
    }

    /// Gets the set of profiles stored on the eSIM.
    /// - Returns: Zero, one, or more profiles stored on the eSIM.
    public func getProfiles() throws -> WindowsFoundationCollections_IVectorView<WindowsNetworkingNetworkOperators_ESimProfile?> {
        try COM.NullResult.unwrap(_interop.getProfiles())
    }

    /// Asynchronously deletes the specified eSIM profile.
    /// - Parameter profileId: The identification number (an ICCID) of the eSIM profile to delete.
    /// - Returns: An asynchronous delete operation. On successful completion, contains an ESimOperationResult object representing the result of the delete operation.
    public func deleteProfileAsync(_ profileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_ESimOperationResult?> {
        try COM.NullResult.unwrap(_interop.deleteProfileAsync(profileId))
    }

    /// Asynchronously downloads installation metadata for the eSIM profile that corresponds to the specified activation code.
    /// - Parameter activationCode: The activation code for the eSIM profile installation metadata to download.
    /// - Returns: An asynchronous download operation. On successful completion, contains an ESimDownloadProfileMetadataResult object representing the result of the download operation.
    public func downloadProfileMetadataAsync(_ activationCode: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_ESimDownloadProfileMetadataResult?> {
        try COM.NullResult.unwrap(_interop.downloadProfileMetadataAsync(activationCode))
    }

    /// Asynchronously resets the eSIM.
    /// - Returns: An asynchronous reset operation. On successful completion, contains an ESimOperationResult object representing the result of the reset operation.
    public func resetAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_ESimOperationResult?> {
        try COM.NullResult.unwrap(_interop.resetAsync())
    }

    // MARK: Windows.Networking.NetworkOperators.IESim2 members

    /// Performs an eSIM profile discovery operation using the default SMDS address.
    /// - Returns: An ESimDiscoverResult object representing the result of the operation.
    public func discover() throws -> WindowsNetworkingNetworkOperators_ESimDiscoverResult {
        try COM.NullResult.unwrap(_iesim2.discover())
    }

    /// Performs an eSIM profile discovery operation for the supplied RSP server address and matching ID.
    /// - Parameter serverAddress: A string containing an RSP server address. If `serverAddress` is empty, the API uses the default SMDS address.
    /// - Parameter matchingId: A string containing the matching ID.
    /// - Returns: An ESimDiscoverResult object representing the result of the operation.
    public func discover(_ serverAddress: Swift.String, _ matchingId: Swift.String) throws -> WindowsNetworkingNetworkOperators_ESimDiscoverResult {
        try COM.NullResult.unwrap(_iesim2.discoverWithServerAddressAndMatchingId(serverAddress, matchingId))
    }

    /// Asynchronously performs an eSIM profile discovery operation using the default SMDS address.
    /// - Returns: An ESimDiscoverResult object representing the result of the operation.
    public func discoverAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_ESimDiscoverResult?> {
        try COM.NullResult.unwrap(_iesim2.discoverAsync())
    }

    /// Asynchronously performs an eSIM profile discovery operation for the supplied RSP server address and matching ID.
    /// - Parameter serverAddress: A string containing an RSP server address. If `serverAddress` is empty, the API uses the default SMDS address.
    /// - Parameter matchingId: A string containing the matching ID.
    /// - Returns: An ESimDiscoverResult object representing the result of the operation.
    public func discoverAsync(_ serverAddress: Swift.String, _ matchingId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingNetworkOperators_ESimDiscoverResult?> {
        try COM.NullResult.unwrap(_iesim2.discoverWithServerAddressAndMatchingIdAsync(serverAddress, matchingId))
    }

    // MARK: Implementation details

    private var _iesim2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESim2>? = nil

    internal var _iesim2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESim2> {
        get throws {
            try _iesim2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESim2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingNetworkOperators_IESim2.self)
            }
        }
    }

    deinit {
        _iesim2_storage?.release()
    }
}