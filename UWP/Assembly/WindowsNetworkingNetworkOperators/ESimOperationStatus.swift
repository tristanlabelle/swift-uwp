// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines constants that specify the status of an ESimOperationResult object.
public struct WindowsNetworkingNetworkOperators_ESimOperationStatus: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Indicates that the operation was successful.
    public static let success = Self()

    /// Indicates that the operation was not authorized.
    public static let notAuthorized = Self(rawValue: 1)

    /// Indicates that the specified eSIM profile was not found.
    public static let notFound = Self(rawValue: 2)

    /// Indicates that the operation violates policy.
    public static let policyViolation = Self(rawValue: 3)

    /// Indicates that there is not enough storage space on the card to complete the operation.
    public static let insufficientSpaceOnCard = Self(rawValue: 4)

    /// Indicates that a server failure occurred during the operation.
    public static let serverFailure = Self(rawValue: 5)

    /// Indicates that the server could not be reached during the operation.
    public static let serverNotReachable = Self(rawValue: 6)

    /// Indicates that user consent was not granted within the timeout period of the operation.
    public static let timeoutWaitingForUserConsent = Self(rawValue: 7)

    /// Indicates that the wrong confirmation code was supplied during the operation.
    public static let incorrectConfirmationCode = Self(rawValue: 8)

    /// Indicates that the wrong confirmation code was supplied during the operation, and that no more retries are permitted.
    public static let confirmationCodeMaxRetriesExceeded = Self(rawValue: 9)

    /// Indicates that the SIM card has been removed.
    public static let cardRemoved = Self(rawValue: 10)

    /// Indicates that the SIM card is busy.
    public static let cardBusy = Self(rawValue: 11)

    /// Indicates a status that's not accounted for by a more specific status.
    public static let other = Self(rawValue: 12)

    /// Indicates that a card error occurred that prevented the download/install/other operation from completing successfully.
    public static let cardGeneralFailure = Self(rawValue: 13)

    /// Indicates that a confirmation code is needed in order to download the eSIM profile.
    public static let confirmationCodeMissing = Self(rawValue: 14)

    /// Indicates that the matching ID from the activation code or discovered event was refused.
    public static let invalidMatchingId = Self(rawValue: 15)

    /// Indicates that an eSIM profile compatible with this device could not be found. For example, a profile was found that requires LTE support, but the device only supports 3G.
    public static let noEligibleProfileForThisDevice = Self(rawValue: 16)

    /// Indicates that the operation aborted.
    public static let operationAborted = Self(rawValue: 17)

    /// Indicates that an eSIM profile on the mobile operator (MO) server is already allocated for a different eSIM EID than the one the device has.
    public static let eidMismatch = Self(rawValue: 18)

    /// Indicates that the user is trying to download an eSIM profile that has already been claimed/downloaded.
    public static let profileNotAvailableForNewBinding = Self(rawValue: 19)

    /// Indicates that the eSIM profile is available, but it is not yet marked as released for download by the mobile operator (MO). You can only download a released profile, so the MO needs to mark the profile as released.
    public static let profileNotReleasedByOperator = Self(rawValue: 20)

    /// Indicates that the operation is not allowed for the eSIM profile class.
    public static let operationProhibitedByProfileClass = Self(rawValue: 21)

    /// Indicates that an eSIM profile could not be found.
    public static let profileNotPresent = Self(rawValue: 22)

    /// Indicates that no corresponding request could be found.
    public static let noCorrespondingRequest = Self(rawValue: 23)
    public static let timeoutWaitingForResponse = Self(rawValue: 24)
    public static let iccidAlreadyExists = Self(rawValue: 25)
    public static let profileProcessingError = Self(rawValue: 26)
    public static let serverNotTrusted = Self(rawValue: 27)
    public static let profileDownloadMaxRetriesExceeded = Self(rawValue: 28)
}