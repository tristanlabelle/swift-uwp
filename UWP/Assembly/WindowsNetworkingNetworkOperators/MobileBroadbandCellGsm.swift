// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents GSM network provider/cell information including identifications as well as its respective signal strength.
public final class WindowsNetworkingNetworkOperators_MobileBroadbandCellGsm: WindowsRuntime.WinRTImport<WindowsNetworkingNetworkOperators_MobileBroadbandCellGsmProjection> {
    // MARK: Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm members

    /// Gets the base station ID. 
    /// - Returns: The base station ID.
    public var baseStationId: Swift.Int32? {
        get throws {
            try _interop.get_BaseStationId()
        }
    }

    /// Gets the cell ID.
    /// - Returns: The cell ID.
    public var cellId: Swift.Int32? {
        get throws {
            try _interop.get_CellId()
        }
    }

    /// Gets the Absolute Radio Frequency Channel Number for serving cell.
    /// - Returns: The Absolute Radio Frequency Channel Number for serving cell.
    public var channelNumber: Swift.Int32? {
        get throws {
            try _interop.get_ChannelNumber()
        }
    }

    /// Gets the Location Area Code (LAC).
    /// - Returns: The Location Area Code (LAC).
    public var locationAreaCode: Swift.Int32? {
        get throws {
            try _interop.get_LocationAreaCode()
        }
    }

    /// Gets a concatenated string of MCC and MNC
    /// - Returns: The provider ID.
    public var providerId: Swift.String {
        get throws {
            try _interop.get_ProviderId()
        }
    }

    /// Gets the received signal strength in dB.
    /// - Returns: The received signal strength, in dB.
    public var receivedSignalStrengthInDBm: Swift.Double? {
        get throws {
            try _interop.get_ReceivedSignalStrengthInDBm()
        }
    }

    /// Gets the Timing Advance in bit periods, where a bit period is 48/13us.
    /// - Returns: The Timing Advance in bit periods.
    public var timingAdvanceInBitPeriods: Swift.Int32? {
        get throws {
            try _interop.get_TimingAdvanceInBitPeriods()
        }
    }

    // MARK: Implementation details
}