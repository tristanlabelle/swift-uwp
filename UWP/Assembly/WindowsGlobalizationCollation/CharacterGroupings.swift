// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the set of character groups and the functionality to get the label for any given string.
public final class WindowsGlobalizationCollation_CharacterGroupings: WindowsRuntime.WinRTImport<WindowsGlobalizationCollation_CharacterGroupingsProjection>, WindowsFoundationCollections_IVectorViewProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias T = WindowsGlobalizationCollation_CharacterGrouping?

    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsGlobalizationCollation_CharacterGroupingsProjection.self))
    }

    // MARK: Windows.Globalization.Collation.ICharacterGroupingsFactory members

    public convenience init(_ language: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icharacterGroupingsFactory.create(language)))
    }

    // MARK: Windows.Globalization.Collation.ICharacterGroupings members

    /// Gets the label under which the provided text falls.
    /// - Parameter text: The string for which to get the label.
    /// - Returns: If successful, this method returns the label. Otherwise, it returns the input value.
    public func lookup(_ text: Swift.String) throws -> Swift.String {
        try _interop.lookup(text)
    }

    // MARK: Windows.Foundation.Collections.IVectorView`1<Windows.Globalization.Collation.CharacterGrouping> members

    /// Gets the number of CharacterGrouping objects in the set of character groups.
    /// - Returns: The number of objects in the set.
    public var size: Swift.UInt32 {
        get throws {
            try _ivectorView.get_Size()
        }
    }

    /// Returns the CharacterGrouping at the specified index in the set of character groups.
    /// - Parameter index: The zero-based index of the CharacterGrouping in the set to return.
    /// - Returns: The CharacterGrouping at the specified index.
    public func getAt(_ index: Swift.UInt32) throws -> WindowsGlobalizationCollation_CharacterGrouping? {
        try _ivectorView.getAt(index)
    }

    /// Returns the index of a specified CharacterGrouping object in the set of character groups.
    /// - Parameter value: The CharacterGrouping object to find in the set.
    /// - Parameter index: The zero-based index of the CharacterGrouping object, if found. The method returns zero if the object is not found.
    /// - Returns: True if the object is found, otherwise false.
    public func indexOf(_ value: WindowsGlobalizationCollation_CharacterGrouping?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        try _ivectorView.indexOf(value, &index)
    }

    /// Returns the CharacterGrouping objects that start at the specified index in the set of character groups.
    /// - Parameter startIndex: The zero-based index of the start of the CharacterGrouping objects in the set to return.
    /// - Parameter items: The CharacterGrouping objects in the set that start at *startIndex*.
    /// - Returns: The number of objects returned.
    public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsGlobalizationCollation_CharacterGrouping?]) throws -> Swift.UInt32 {
        try _ivectorView.getMany(startIndex, items)
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Globalization.Collation.CharacterGrouping> members

    /// Returns an iterator to enumerate the items in the set of character groups.
    /// - Returns: The iterator. The current position of the iterator is index 0, or the end of the set of character groups if the set is empty.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsGlobalizationCollation_CharacterGrouping?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _ivectorView_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsGlobalizationCollation_CharacterGrouping>? = nil

    internal var _ivectorView: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsGlobalizationCollation_CharacterGrouping> {
        get throws {
            try _ivectorView_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsGlobalizationCollation_CharacterGrouping.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IVectorView_WindowsGlobalizationCollation_CharacterGrouping.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsGlobalizationCollation_CharacterGrouping>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsGlobalizationCollation_CharacterGrouping> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsGlobalizationCollation_CharacterGrouping.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsGlobalizationCollation_CharacterGrouping.self)
            }
        }
    }

    deinit {
        _ivectorView_storage?.release()
        _iiterable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.Collation.CharacterGroupings", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _icharacterGroupingsFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationCollation_ICharacterGroupingsFactory>? = nil

    internal static var _icharacterGroupingsFactory: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationCollation_ICharacterGroupingsFactory> {
        get throws {
            try _icharacterGroupingsFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.Collation.CharacterGroupings", id: CWinRT.SWRT_WindowsGlobalizationCollation_ICharacterGroupingsFactory.iid)
            }
        }
    }
}