// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to information about a device's battery and power supply status.
public enum WindowsSystemPower_PowerManager {
    // MARK: Windows.System.Power.IPowerManagerStatics members

    /// Gets the device's battery status.
    /// - Returns: The device's battery status.
    public static var batteryStatus: WindowsSystemPower_BatteryStatus {
        get throws {
            try _ipowerManagerStatics.get_BatteryStatus()
        }
    }

    /// Gets the devices's battery saver status, indicating when to save energy.
    /// - Returns: The status of battery saver.
    public static var energySaverStatus: WindowsSystemPower_EnergySaverStatus {
        get throws {
            try _ipowerManagerStatics.get_EnergySaverStatus()
        }
    }

    /// Gets the device's power supply status.
    /// - Returns: The device's power supply status.
    public static var powerSupplyStatus: WindowsSystemPower_PowerSupplyStatus {
        get throws {
            try _ipowerManagerStatics.get_PowerSupplyStatus()
        }
    }

    /// Gets the total percentage of charge remaining from all batteries connected to the device.
    /// - Returns: The total percentage of charge remaining from all batteries connected to the device.
    public static var remainingChargePercent: Swift.Int32 {
        get throws {
            try _ipowerManagerStatics.get_RemainingChargePercent()
        }
    }

    /// Gets the total runtime remaining from all batteries connected to the device.
    /// - Returns: The total runtime remaining from all batteries connected to the device.
    public static var remainingDischargeTime: WindowsFoundation_TimeSpan {
        get throws {
            try _ipowerManagerStatics.get_RemainingDischargeTime()
        }
    }

    /// Occurs when BatteryStatus changes.
    public static func batteryStatusChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipowerManagerStatics.add_BatteryStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: batteryStatusChanged)
    }

    public static func batteryStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipowerManagerStatics.remove_BatteryStatusChanged(token)
    }

    /// Occurs when EnergySaverStatus changes.
    public static func energySaverStatusChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipowerManagerStatics.add_EnergySaverStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: energySaverStatusChanged)
    }

    public static func energySaverStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipowerManagerStatics.remove_EnergySaverStatusChanged(token)
    }

    /// Occurs when the PowerSupplyStatus changes.
    public static func powerSupplyStatusChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipowerManagerStatics.add_PowerSupplyStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: powerSupplyStatusChanged)
    }

    public static func powerSupplyStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipowerManagerStatics.remove_PowerSupplyStatusChanged(token)
    }

    /// Occurs when RemainingChargePercent changes.
    public static func remainingChargePercentChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipowerManagerStatics.add_RemainingChargePercentChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: remainingChargePercentChanged)
    }

    public static func remainingChargePercentChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipowerManagerStatics.remove_RemainingChargePercentChanged(token)
    }

    /// Occurs when RemainingDischargeTime changes.
    public static func remainingDischargeTimeChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipowerManagerStatics.add_RemainingDischargeTimeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: remainingDischargeTimeChanged)
    }

    public static func remainingDischargeTimeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipowerManagerStatics.remove_RemainingDischargeTimeChanged(token)
    }

    // MARK: Implementation details

    private static var _ipowerManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemPower_IPowerManagerStatics>? = nil

    internal static var _ipowerManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemPower_IPowerManagerStatics> {
        get throws {
            try _ipowerManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Power.PowerManager", id: CWinRT.SWRT_WindowsSystemPower_IPowerManagerStatics.iid)
            }
        }
    }
}