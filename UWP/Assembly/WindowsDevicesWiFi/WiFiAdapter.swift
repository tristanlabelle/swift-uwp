// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Use this class to enumerate local Wi-Fi adapters, initiate Wi-Fi scans, enumerate scan results, and to connect or disconnect individual adapters.
public final class WindowsDevicesWiFi_WiFiAdapter: WindowsRuntime.WinRTImport<WindowsDevicesWiFi_WiFiAdapterProjection> {
    // MARK: Windows.Devices.WiFi.IWiFiAdapter members

    /// Gets information about a Wi-Fi adapter.
    /// - Returns: An instance of Windows.Networking.Connectivity.NetworkAdapter representing this adapter.
    public var networkAdapter: WindowsNetworkingConnectivity_NetworkAdapter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NetworkAdapter())
        }
    }

    /// Gets a list of available networks populated by the last Wi-Fi scan on this WiFiNetworkAdapter.
    /// - Returns: A list of available networks.
    public var networkReport: WindowsDevicesWiFi_WiFiNetworkReport {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NetworkReport())
        }
    }

    /// Event raised when a scan completes on this Wi-Fi adapter. This event cannot be raised from a background task.
    public func availableNetworksChanged(adding args: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFi_WiFiAdapter?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AvailableNetworksChanged(args)
        return WindowsRuntime.EventRegistration(token: _token, remover: availableNetworksChanged)
    }

    public func availableNetworksChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AvailableNetworksChanged(eventCookie)
    }

    /// Directs this adapter to initiate an asynchronous network scan.
    /// - Returns: An asynchronous scan operation. On successful completion, returns a list of networks scanned by this adapter.
    public func scanAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.scanAsync())
    }

    /// Connect this Wi-Fi device to the specified network, with the specified reconnection policy.
    /// - Parameter availableNetwork: Describes the Wi-Fi network to be connected.
    /// - Parameter reconnectionKind: Specifies how to reconnect if the connection is lost.
    /// - Returns: An asynchronous connect operation. On successful conclusion of the operation, returns an object that describes the result of the connect operation.
    public func connectAsync(_ availableNetwork: WindowsDevicesWiFi_WiFiAvailableNetwork?, _ reconnectionKind: WindowsDevicesWiFi_WiFiReconnectionKind) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiConnectionResult?> {
        try COM.NullResult.unwrap(_interop.connectAsync(availableNetwork, reconnectionKind))
    }

    /// Connect this Wi-Fi device to the specified network, with the specified passphrase and reconnection policy.
    /// - Parameter availableNetwork: Specifies the Wi-Fi network to connect to.
    /// - Parameter reconnectionKind: Describes how to reconnect to the network if connection is lost.
    /// - Parameter passwordCredential: The passphrase to be used to connect to the access point.
    /// - Returns: An asynchronous connect operation. On successful conclusion of the operation, returns an object that describes the result of the connect operation.
    public func connectAsync(_ availableNetwork: WindowsDevicesWiFi_WiFiAvailableNetwork?, _ reconnectionKind: WindowsDevicesWiFi_WiFiReconnectionKind, _ passwordCredential: WindowsSecurityCredentials_PasswordCredential?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiConnectionResult?> {
        try COM.NullResult.unwrap(_interop.connectWithPasswordCredentialAsync(availableNetwork, reconnectionKind, passwordCredential))
    }

    /// Connect this Wi-Fi device to a hidden network, with the given passphrase and reconnection policy.
    /// - Parameter availableNetwork: Describes the Wi-Fi network to connect to.
    /// - Parameter reconnectionKind: Describes how to reconnect to the network if connection is lost.
    /// - Parameter passwordCredential: Password or other credential to use to connect to the network.
    /// - Parameter ssid: When the network SSID is hidden, use this parameter to provide the SSID.
    /// - Returns: An asynchronous connect operation. On successful conclusion of the operation, returns an object that describes the result of the connect operation.
    public func connectAsync(_ availableNetwork: WindowsDevicesWiFi_WiFiAvailableNetwork?, _ reconnectionKind: WindowsDevicesWiFi_WiFiReconnectionKind, _ passwordCredential: WindowsSecurityCredentials_PasswordCredential?, _ ssid: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiConnectionResult?> {
        try COM.NullResult.unwrap(_interop.connectWithPasswordCredentialAndSsidAsync(availableNetwork, reconnectionKind, passwordCredential, ssid))
    }

    /// Disconnects any active Wi-Fi connection through this adapter.
    public func disconnect() throws {
        try _interop.disconnect()
    }

    // MARK: Windows.Devices.WiFi.IWiFiAdapter2 members

    /// Performs WPS discovery to query the WPS methods supported by the network.
    /// - Parameter availableNetwork: An available Wi-Fi network. See WiFiAvailableNetwork class.
    /// - Returns: On successful completion, returns a WiFiWpsConfigurationResult.
    public func getWpsConfigurationAsync(_ availableNetwork: WindowsDevicesWiFi_WiFiAvailableNetwork?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiWpsConfigurationResult?> {
        try COM.NullResult.unwrap(_iwiFiAdapter2.getWpsConfigurationAsync(availableNetwork))
    }

    /// Connect this Wi-Fi device to a hidden network, with the given passphrase, connection method, and reconnection policy.
    /// - Parameter availableNetwork: Specifies the Wi-Fi network to connect to.
    /// - Parameter reconnectionKind: Specifies how to reconnect if the connection is lost.
    /// - Parameter passwordCredential: The passphrase to be used to connect to the access point.
    /// - Parameter ssid: When the network SSID is hidden, use this parameter to provide the SSID.
    /// - Parameter connectionMethod: A WiFiConnectionMethod enumeration member indicating the connection method.
    /// - Returns: An asynchronous connect operation. On successful conclusion of the operation, returns an object that describes the result of the connect operation.
    public func connectAsync(_ availableNetwork: WindowsDevicesWiFi_WiFiAvailableNetwork?, _ reconnectionKind: WindowsDevicesWiFi_WiFiReconnectionKind, _ passwordCredential: WindowsSecurityCredentials_PasswordCredential?, _ ssid: Swift.String, _ connectionMethod: WindowsDevicesWiFi_WiFiConnectionMethod) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiConnectionResult?> {
        try COM.NullResult.unwrap(_iwiFiAdapter2.connectWithPasswordCredentialAndSsidAndConnectionMethodAsync(availableNetwork, reconnectionKind, passwordCredential, ssid, connectionMethod))
    }

    // MARK: Windows.Devices.WiFi.IWiFiAdapterStatics members

    /// A static method that initiates an asynchronous operation to enumerate all Wi-Fi adapters in the system.
    /// - Returns: An asynchronous enumeration operation. On successful completion, returns a list of available Wi-Fi adapters.
    public static func findAllAdaptersAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesWiFi_WiFiAdapter?>?> {
        try COM.NullResult.unwrap(_iwiFiAdapterStatics.findAllAdaptersAsync())
    }

    /// A static method that returns an Advanced Query Syntax (AQS) string to be used to enumerate Wi-Fi adapters using Windows.Devices.Enumeration.DeviceInformation.FindAllAsync and related methods.
    /// - Returns: An identifier to be used to enumerate Wi-Fi devices.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iwiFiAdapterStatics.getDeviceSelector()
    }

    /// A static method that initiates an asynchronous operation to get a WiFiAdapter object.
    /// - Parameter deviceId: The Device ID of the Wi-Fi adapter to be retrieved. Obtain a Device ID through the Windows.Devices.Enumeration namespace.
    /// - Returns: An asynchronous get operation. On successful completion, returns a WiFiAdapter object specific to the requested Device ID.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiAdapter?> {
        try COM.NullResult.unwrap(_iwiFiAdapterStatics.fromIdAsync(deviceId))
    }

    /// A static method for determining whether the current user can access any of the Wi-Fi adapters on this device.
    /// - Returns: An asynchronous access operation. On successful completion, returns a status enumeration value describing whether the current user can access any Wi-Fi adapter.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFi_WiFiAccessStatus> {
        try COM.NullResult.unwrap(_iwiFiAdapterStatics.requestAccessAsync())
    }

    // MARK: Implementation details

    private var _iwiFiAdapter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapter2>? = nil

    internal var _iwiFiAdapter2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapter2> {
        get throws {
            try _iwiFiAdapter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapter2.iid).cast(to: CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapter2.self)
            }
        }
    }

    deinit {
        _iwiFiAdapter2_storage?.release()
    }

    private static var _iwiFiAdapterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapterStatics>? = nil

    internal static var _iwiFiAdapterStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapterStatics> {
        get throws {
            try _iwiFiAdapterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.WiFi.WiFiAdapter", id: CWinRT.SWRT_WindowsDevicesWiFi_IWiFiAdapterStatics.iid)
            }
        }
    }
}