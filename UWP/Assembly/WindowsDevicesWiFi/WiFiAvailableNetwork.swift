// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes an available Wi-Fi network.
public final class WindowsDevicesWiFi_WiFiAvailableNetwork: WindowsRuntime.WinRTImport<WindowsDevicesWiFi_WiFiAvailableNetworkProjection> {
    // MARK: Windows.Devices.WiFi.IWiFiAvailableNetwork members

    /// Gets the interval between 802.11 Beacon frames used by this network.
    /// - Returns: A TimeSpan representing the interval between beacons on this network.
    public var beaconInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_BeaconInterval()
        }
    }

    /// Gets the MAC address of the access point.
    /// - Returns: The MAC address of the access point, formatted as xx:xx:xx:xx:xx:xx with always lower-case characters.
    public var bssid: Swift.String {
        get throws {
            try _interop.get_Bssid()
        }
    }

    /// Gets the channel center frequency of the band on which the 802.11 Beacon or Probe Response was received.
    /// - Returns: The channel center frequency of the band on which the 802.11 Beacon or Probe Response frame was received. The value of this property is in units of kilohertz (kHz). Note that this member is only valid for PHY types that are not frequency-hopping spread spectrum (FHSS). In all other cases the value returned is zero.
    public var channelCenterFrequencyInKilohertz: Swift.Int32 {
        get throws {
            try _interop.get_ChannelCenterFrequencyInKilohertz()
        }
    }

    /// Gets a value indicating whether this network originates from a Wi-Fi Direct access point.
    /// - Returns: When true, the network is originated by a Wi-Fi Direct access point. Otherwise, it is not.
    public var isWiFiDirect: Swift.Bool {
        get throws {
            try _interop.get_IsWiFiDirect()
        }
    }

    /// Gets a value describing the kind of network being described.
    /// - Returns: A WiFiNetworkKind enumeration member indicating the BSS network type.
    public var networkKind: WindowsDevicesWiFi_WiFiNetworkKind {
        get throws {
            try _interop.get_NetworkKind()
        }
    }

    /// Gets the signal strength of the network.
    /// - Returns: The signal strength, expressed in dBm.
    public var networkRssiInDecibelMilliwatts: Swift.Double {
        get throws {
            try _interop.get_NetworkRssiInDecibelMilliwatts()
        }
    }

    /// Gets a value describing the kind of PHY used by this network.
    /// - Returns: A WiFiPhyKind value indicating the PHY kind of the network.
    public var phyKind: WindowsDevicesWiFi_WiFiPhyKind {
        get throws {
            try _interop.get_PhyKind()
        }
    }

    /// Gets the security configuration of the network.
    /// - Returns: An Instance of Windows.Networking.Connectivity.NetworkSecuritySettings describing the security configuration of the network.
    public var securitySettings: WindowsNetworkingConnectivity_NetworkSecuritySettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SecuritySettings())
        }
    }

    /// Gets the strength of the signal as a number of bars.
    /// - Returns: The current number of signal bars displayed by the Windows UI for the network.
    public var signalBars: Swift.UInt8 {
        get throws {
            try _interop.get_SignalBars()
        }
    }

    /// Gets the SSID (name) of the network.
    /// - Returns: The network SSID.
    public var ssid: Swift.String {
        get throws {
            try _interop.get_Ssid()
        }
    }

    /// Gets the uptime value reported by the network.
    /// - Returns: TimeSpan value representing the value of the Timestamp field from the 802.11 Beacon or Probe Response frame received by the wireless LAN interface.
    public var uptime: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Uptime()
        }
    }

    // MARK: Implementation details
}