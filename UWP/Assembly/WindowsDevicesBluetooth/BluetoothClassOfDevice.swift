// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality to determine the Bluetooth Class Of Device (Bluetooth COD) information for a device.
public final class WindowsDevicesBluetooth_BluetoothClassOfDevice: WindowsRuntime.WinRTImport<WindowsDevicesBluetooth_BluetoothClassOfDeviceProjection> {
    // MARK: Windows.Devices.Bluetooth.IBluetoothClassOfDevice members

    /// Gets the Major Class code of the Bluetooth device.
    /// - Returns: One of the enumeration values that specifies the device's Major Class code.
    public var majorClass: WindowsDevicesBluetooth_BluetoothMajorClass {
        get throws {
            try _interop.get_MajorClass()
        }
    }

    /// Gets the Minor Class code of the device.
    /// - Returns: One of the enumeration values that specifies the device's Minor Class code.
    public var minorClass: WindowsDevicesBluetooth_BluetoothMinorClass {
        get throws {
            try _interop.get_MinorClass()
        }
    }

    /// Gets the Bluetooth Class Of Device information, represented as an integer value.
    /// - Returns: The Bluetooth Class Of Device information, represented as a raw integer value.
    public var rawValue: Swift.UInt32 {
        get throws {
            try _interop.get_RawValue()
        }
    }

    /// Gets the service capabilities of the device.
    /// - Returns: One of the enumeration values that specifies the service capabilities of the device.
    public var serviceCapabilities: WindowsDevicesBluetooth_BluetoothServiceCapabilities {
        get throws {
            try _interop.get_ServiceCapabilities()
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothClassOfDeviceStatics members

    /// Creates a BluetoothClassOfDevice object from a raw integer value representing the Major Class, Minor Class and Service Capabilities of the device.
    /// - Parameter rawValue: The raw integer value from which to create the BluetoothClassOfDevice object.
    /// - Returns: A BluetoothClassOfDevice object.
    public static func fromRawValue(_ rawValue: Swift.UInt32) throws -> WindowsDevicesBluetooth_BluetoothClassOfDevice {
        try COM.NullResult.unwrap(_ibluetoothClassOfDeviceStatics.fromRawValue(rawValue))
    }

    /// Creates a BluetoothClassOfDevice object by supplying values for BluetoothMajorClass, BluetoothMinorClass and BluetoothClassOfDevice.
    /// - Parameter majorClass: One of the enumeration values that specifies the device's main function.
    /// - Parameter minorClass: One of the enumeration values that specifies the minor class value to be used.
    /// - Parameter serviceCapabilities: One of the enumeration values that specifies the service the device supports.
    /// - Returns: A BluetoothClassOfDevice object.
    public static func fromParts(_ majorClass: WindowsDevicesBluetooth_BluetoothMajorClass, _ minorClass: WindowsDevicesBluetooth_BluetoothMinorClass, _ serviceCapabilities: WindowsDevicesBluetooth_BluetoothServiceCapabilities) throws -> WindowsDevicesBluetooth_BluetoothClassOfDevice {
        try COM.NullResult.unwrap(_ibluetoothClassOfDeviceStatics.fromParts(majorClass, minorClass, serviceCapabilities))
    }

    // MARK: Implementation details

    private static var _ibluetoothClassOfDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothClassOfDeviceStatics>? = nil

    internal static var _ibluetoothClassOfDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothClassOfDeviceStatics> {
        get throws {
            try _ibluetoothClassOfDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothClassOfDevice", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothClassOfDeviceStatics.iid)
            }
        }
    }
}