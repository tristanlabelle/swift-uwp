// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Indicates the appearance category code of the Bluetooth LE device.
public enum WindowsDevicesBluetooth_BluetoothLEAppearanceCategories {
    // MARK: Windows.Devices.Bluetooth.IBluetoothLEAppearanceCategoriesStatics members

    /// Gets the barcode scanner appearance category code.
    /// - Returns: The appearance category code for a barcode scanner Bluetooth LE device.
    public static var barcodeScanner: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_BarcodeScanner()
        }
    }

    /// Gets the blood pressure appearance category code.
    /// - Returns: The appearance category code for a blood pressure Bluetooth LE device.
    public static var bloodPressure: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_BloodPressure()
        }
    }

    /// Gets the clock appearance category code.
    /// - Returns: The appearance category code for a clock Bluetooth LE device.
    public static var clock: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Clock()
        }
    }

    /// Gets the computer appearance category code.
    /// - Returns: The appearance category code for a computer Bluetooth LE device.
    public static var computer: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Computer()
        }
    }

    /// Gets the cycling appearance category code.
    /// - Returns: The appearance category code for a cycling Bluetooth LE device.
    public static var cycling: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Cycling()
        }
    }

    /// Gets the display appearance category code.
    /// - Returns: The appearance category code for a display Bluetooth LE device.
    public static var display: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Display()
        }
    }

    /// Gets the eye glasses appearance category code.
    /// - Returns: The appearance category code for an eye glasses Bluetooth LE device.
    public static var eyeGlasses: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_EyeGlasses()
        }
    }

    /// Gets the glucose meter appearance category code.
    /// - Returns: The appearance category code for a glucose meter Bluetooth LE device.
    public static var glucoseMeter: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_GlucoseMeter()
        }
    }

    /// Gets the heart rate appearance category code.
    /// - Returns: The appearance category code for a heart rate Bluetooth LE device.
    public static var heartRate: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_HeartRate()
        }
    }

    /// Gets the human interface device appearance category code.
    /// - Returns: The appearance category code for a human interface device Bluetooth LE device.
    public static var humanInterfaceDevice: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_HumanInterfaceDevice()
        }
    }

    /// Gets the key ring appearance category code.
    /// - Returns: The appearance category code for a key ring Bluetooth LE device.
    public static var keyring: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Keyring()
        }
    }

    /// Gets the media player appearance category code.
    /// - Returns: The appearance category code for a media player Bluetooth LE device.
    public static var mediaPlayer: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_MediaPlayer()
        }
    }

    /// Gets the outdoor sport activity appearance category code.
    /// - Returns: The appearance category code for an outdoor sport activity Bluetooth LE device.
    public static var outdoorSportActivity: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_OutdoorSportActivity()
        }
    }

    /// Gets the phone appearance category code.
    /// - Returns: The appearance category code for a phone Bluetooth LE device.
    public static var phone: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Phone()
        }
    }

    /// Gets the pulse oximeter appearance category code.
    /// - Returns: The appearance category code for a pulse oximeter Bluetooth LE device.
    public static var pulseOximeter: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_PulseOximeter()
        }
    }

    /// Gets the remote control appearance category code.
    /// - Returns: The appearance category code for a remote control Bluetooth LE device.
    public static var remoteControl: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_RemoteControl()
        }
    }

    /// Gets the running or walking appearance category code.
    /// - Returns: The appearance category code for a running or walking Bluetooth LE device.
    public static var runningWalking: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_RunningWalking()
        }
    }

    /// Gets the tag appearance category code.
    /// - Returns: The appearance category code for a tag Bluetooth LE device.
    public static var tag: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Tag()
        }
    }

    /// Gets the thermometer appearance category code.
    /// - Returns: The appearance category code for a thermometer Bluetooth LE device.
    public static var thermometer: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Thermometer()
        }
    }

    /// Gets the uncategorized appearance category code.
    /// - Returns: The appearance category code for an uncategorized Bluetooth LE device.
    public static var uncategorized: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Uncategorized()
        }
    }

    /// Gets the watch appearance category code.
    /// - Returns: The appearance category code for a watch Bluetooth LE device.
    public static var watch: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_Watch()
        }
    }

    /// Gets the weight scale appearance category code.
    /// - Returns: The appearance category code for a weight scale Bluetooth LE device.
    public static var weightScale: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics.get_WeightScale()
        }
    }

    // MARK: Implementation details

    private static var _ibluetoothLEAppearanceCategoriesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceCategoriesStatics>? = nil

    internal static var _ibluetoothLEAppearanceCategoriesStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceCategoriesStatics> {
        get throws {
            try _ibluetoothLEAppearanceCategoriesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceCategoriesStatics.iid)
            }
        }
    }
}