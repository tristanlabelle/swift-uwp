// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Bluetooth device.
public final class WindowsDevicesBluetooth_BluetoothDevice: WindowsRuntime.WinRTImport<WindowsDevicesBluetooth_BluetoothDeviceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Bluetooth.IBluetoothDevice members

    /// Gets the device address.
    /// - Returns: The device address.
    public var bluetoothAddress: Swift.UInt64 {
        get throws {
            try _interop.get_BluetoothAddress()
        }
    }

    /// Gets the Bluetooth Class Of Device information of the device.
    /// - Returns: The Bluetooth Class Of Device information of the device.
    public var classOfDevice: WindowsDevicesBluetooth_BluetoothClassOfDevice {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ClassOfDevice())
        }
    }

    /// Gets the connection status of the device.
    /// - Returns: One of the BluetoothConnectionStatus enumeration values that specifies the connection status of the device.
    public var connectionStatus: WindowsDevicesBluetooth_BluetoothConnectionStatus {
        get throws {
            try _interop.get_ConnectionStatus()
        }
    }

    /// Gets the device ID that came from the Windows.Devices.Enumeration.DeviceInformation.Id
    /// - Returns: The ID of the device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the HostName of the device.
    /// - Returns: The HostName of the device.
    public var hostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_HostName())
        }
    }

    /// Gets the Name of the device.
    /// - Returns: The name of the device.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets the read-only list of RFCOMM services supported by the device.
    /// - Returns: The read-only list of RFCOMM services supported by the device.
    public var rfcommServices: WindowsFoundationCollections_IVectorView<WindowsDevicesBluetoothRfcomm_RfcommDeviceService?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RfcommServices())
        }
    }

    /// Gets the read-only list of Service Discovery Protocol (SDP) records for the device.
    /// - Returns: The read-only list of Service Discovery Protocol (SDP) records for the device.
    public var sdpRecords: WindowsFoundationCollections_IVectorView<WindowsStorageStreams_IBuffer?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SdpRecords())
        }
    }

    /// Occurs when the connection status of the device has changed.
    public func connectionStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ConnectionStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: connectionStatusChanged)
    }

    public func connectionStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ConnectionStatusChanged(token)
    }

    /// Occurs when the name of the device has changed.
    public func nameChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_NameChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: nameChanged)
    }

    public func nameChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_NameChanged(token)
    }

    /// Occurs when the list SDP records for the device has changed.
    public func sdpRecordsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SdpRecordsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sdpRecordsChanged)
    }

    public func sdpRecordsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SdpRecordsChanged(token)
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDevice2 members

    /// Gets the DeviceInformation object for the Bluetooth device.
    /// - Returns: The device information.
    public var deviceInformation: WindowsDevicesEnumeration_DeviceInformation {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothDevice2.get_DeviceInformation())
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDevice3 members

    /// The current **DeviceAccessInformation** object for the device. Used to check and monitor access changes to the device.
    /// - Returns: The current **DeviceAccessInformation** object for the device.
    public var deviceAccessInformation: WindowsDevicesEnumeration_DeviceAccessInformation {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothDevice3.get_DeviceAccessInformation())
        }
    }

    /// Used to request explicit access to the Bluetooth device. This invokes Device Consent and must be called on the UI thread.
    /// - Returns: After the asynchronous operation completes, returns a DeviceAccessStatus enumeration value.
    public func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesEnumeration_DeviceAccessStatus> {
        try COM.NullResult.unwrap(_ibluetoothDevice3.requestAccessAsync())
    }

    /// Retrieves all Rfcomm Services on the remote Bluetooth Device.
    /// - Returns: After the asynchronous operation completes, returns a RfcommDeviceServicesResult object.
    public func getRfcommServicesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothDevice3.getRfcommServicesAsync())
    }

    /// Retrieves all cached Rfcomm Services on the remote Bluetooth Device.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: After the asynchronous operation completes, returns a RfcommDeviceServicesResult object.
    public func getRfcommServicesAsync(_ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothDevice3.getRfcommServicesWithCacheModeAsync(cacheMode))
    }

    /// Retrieves all Rfcomm Services on the Remote Bluetooth Device matching the specified RfcommServiceId.
    /// - Parameter serviceId: The Rfcomm service id.
    /// - Returns: After the asynchronous operation completes, returns an RfcommDeviceServicesResult object.
    public func getRfcommServicesForIdAsync(_ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothDevice3.getRfcommServicesForIdAsync(serviceId))
    }

    /// Retrieves all cached Rfcomm Services on the Remote Bluetooth Device matching the specified RfcommServiceId.
    /// - Parameter serviceId: The Rfcomm service id.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: After the asynchronous operation completes, returns an RfcommDeviceServicesResult object.
    public func getRfcommServicesForIdAsync(_ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?, _ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothDevice3.getRfcommServicesForIdWithCacheModeAsync(serviceId, cacheMode))
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDevice4 members

    /// Gets the bluetooth device ID.
    /// - Returns: The bluetooth device ID.
    public var bluetoothDeviceId: WindowsDevicesBluetooth_BluetoothDeviceId {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothDevice4.get_BluetoothDeviceId())
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDevice5 members

    /// Gets a boolean indicating whether the BluetoothDevice was paired using a Secure Connection.
    /// - Returns: A boolean indicating whether the BluetoothDevice was paired using a Secure Connection.
    public var wasSecureConnectionUsedForPairing: Swift.Bool {
        get throws {
            try _ibluetoothDevice5.get_WasSecureConnectionUsedForPairing()
        }
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the Bluetooth device.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDeviceStatics2 members

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for Bluetooth devices that are either paired or unpaired. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects.
    /// - Parameter pairingState: The current pairing state for Bluetooth devices used for constructing the AQS string. Bluetooth devices can be either paired (true) or unpaired (false). The AQS Filter string will request scanning to be performed when the pairingState is false.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromPairingState(_ pairingState: Swift.Bool) throws -> Swift.String {
        try _ibluetoothDeviceStatics2.getDeviceSelectorFromPairingState(pairingState)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for Bluetooth devices with the indicated BluetoothConnectionStatus. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects with the indicated Bluetooth connection status.
    /// - Parameter connectionStatus: The connection status used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromConnectionStatus(_ connectionStatus: WindowsDevicesBluetooth_BluetoothConnectionStatus) throws -> Swift.String {
        try _ibluetoothDeviceStatics2.getDeviceSelectorFromConnectionStatus(connectionStatus)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for the Bluetooth device name. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects containing the specified Bluetooth device name.
    /// - Parameter deviceName: The Bluetooth device name used for constructing the AQS string.
    /// - Returns: An AQS string that is passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromDeviceName(_ deviceName: Swift.String) throws -> Swift.String {
        try _ibluetoothDeviceStatics2.getDeviceSelectorFromDeviceName(deviceName)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string from a 64-bit address that represents a Bluetooth device. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects.
    /// - Parameter bluetoothAddress: A 64-bit Bluetooth device address used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromBluetoothAddress(_ bluetoothAddress: Swift.UInt64) throws -> Swift.String {
        try _ibluetoothDeviceStatics2.getDeviceSelectorFromBluetoothAddress(bluetoothAddress)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string from a BluetoothClassOfDevice object. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects.
    /// - Parameter classOfDevice: The class of device used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromClassOfDevice(_ classOfDevice: WindowsDevicesBluetooth_BluetoothClassOfDevice?) throws -> Swift.String {
        try _ibluetoothDeviceStatics2.getDeviceSelectorFromClassOfDevice(classOfDevice)
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothDeviceStatics members

    /// Returns a BluetoothDevice object identified by the given DeviceId.
    /// - Parameter deviceId: The DeviceId value that identifies the BluetoothDevice instance.
    /// - Returns: After the asynchronous operation completes, returns the BluetoothDevice object identified by the given DeviceId.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothDevice?> {
        try COM.NullResult.unwrap(_ibluetoothDeviceStatics.fromIdAsync(deviceId))
    }

    /// Returns a BluetoothDevice object identified by the given HostName.
    /// - Parameter hostName: The HostName that identifies the BluetoothDevice instance.
    /// - Returns: After the asynchronous operation completes, returns the BluetoothDevice object identified by the given HostName.
    public static func fromHostNameAsync(_ hostName: WindowsNetworking_HostName?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothDevice?> {
        try COM.NullResult.unwrap(_ibluetoothDeviceStatics.fromHostNameAsync(hostName))
    }

    /// Returns a BluetoothDevice object for the given BluetoothAddress.
    /// - Parameter address: The address of the Bluetooth device.
    /// - Returns: After the asynchronous operation completes, returns the BluetoothDevice object with the given BluetoothAddress or null if the address does not resolve to a valid device.
    public static func fromBluetoothAddressAsync(_ address: Swift.UInt64) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothDevice?> {
        try COM.NullResult.unwrap(_ibluetoothDeviceStatics.fromBluetoothAddressAsync(address))
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of this device. This string is passed to the FindAllAsync or CreateWatcher method.
    /// - Returns: The device selector for this device.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibluetoothDeviceStatics.getDeviceSelector()
    }

    // MARK: Implementation details

    private var _ibluetoothDevice2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice2>? = nil

    internal var _ibluetoothDevice2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice2> {
        get throws {
            try _ibluetoothDevice2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice2.self)
            }
        }
    }

    private var _ibluetoothDevice3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice3>? = nil

    internal var _ibluetoothDevice3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice3> {
        get throws {
            try _ibluetoothDevice3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice3.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice3.self)
            }
        }
    }

    private var _ibluetoothDevice4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice4>? = nil

    internal var _ibluetoothDevice4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice4> {
        get throws {
            try _ibluetoothDevice4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice4.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice4.self)
            }
        }
    }

    private var _ibluetoothDevice5_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice5>? = nil

    internal var _ibluetoothDevice5: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice5> {
        get throws {
            try _ibluetoothDevice5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice5.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDevice5.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ibluetoothDevice2_storage?.release()
        _ibluetoothDevice3_storage?.release()
        _ibluetoothDevice4_storage?.release()
        _ibluetoothDevice5_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _ibluetoothDeviceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics2>? = nil

    internal static var _ibluetoothDeviceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics2> {
        get throws {
            try _ibluetoothDeviceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothDevice", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics2.iid)
            }
        }
    }

    private static var _ibluetoothDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics>? = nil

    internal static var _ibluetoothDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics> {
        get throws {
            try _ibluetoothDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothDevice", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothDeviceStatics.iid)
            }
        }
    }
}