// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Indicates the Minor Class code of the device. These are interpreted in the context of the Major Class codes.
public struct WindowsDevicesBluetooth_BluetoothMinorClass: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Use when a Minor Class code has not been assigned.
    public static let uncategorized = Self()

    /// A computer desktop.
    public static let computerDesktop = Self(rawValue: 1)

    /// A computer server.
    public static let computerServer = Self(rawValue: 2)

    /// A laptop computer.
    public static let computerLaptop = Self(rawValue: 3)

    /// A handheld PC/PDA.
    public static let computerHandheld = Self(rawValue: 4)

    /// A palm-sized PC/PDA.
    public static let computerPalmSize = Self(rawValue: 5)

    /// A wearable, watch-sized, computer.
    public static let computerWearable = Self(rawValue: 6)

    /// A tablet computer.
    public static let computerTablet = Self(rawValue: 7)

    /// A cell phone.
    public static let phoneCellular = Self(rawValue: 1)

    /// A cordless phone.
    public static let phoneCordless = Self(rawValue: 2)

    /// A smartphone.
    public static let phoneSmartPhone = Self(rawValue: 3)

    /// A wired modem or voice gateway.
    public static let phoneWired = Self(rawValue: 4)

    /// Common ISDN access.
    public static let phoneIsdn = Self(rawValue: 5)

    /// Fully available.
    public static let networkFullyAvailable = Self()

    /// 1% to 17% utilized.
    public static let networkUsed01To17Percent = Self(rawValue: 8)

    /// 17% to 33% utilized.
    public static let networkUsed17To33Percent = Self(rawValue: 16)

    /// 335 to 50% utilized.
    public static let networkUsed33To50Percent = Self(rawValue: 24)

    /// 50% to 67% utilized.
    public static let networkUsed50To67Percent = Self(rawValue: 32)

    /// 67% to 83% utilized.
    public static let networkUsed67To83Percent = Self(rawValue: 40)

    /// 83% to 99% utilized.
    public static let networkUsed83To99Percent = Self(rawValue: 48)

    /// Network service is not available.
    public static let networkNoServiceAvailable = Self(rawValue: 56)

    /// A wearable headset device.
    public static let audioVideoWearableHeadset = Self(rawValue: 1)

    /// A hands-free device.
    public static let audioVideoHandsFree = Self(rawValue: 2)

    /// A microphone.
    public static let audioVideoMicrophone = Self(rawValue: 4)

    /// A loudspeaker.
    public static let audioVideoLoudspeaker = Self(rawValue: 5)

    /// Headphones.
    public static let audioVideoHeadphones = Self(rawValue: 6)

    /// Portable audio device.
    public static let audioVideoPortableAudio = Self(rawValue: 7)

    /// A car audio device.
    public static let audioVideoCarAudio = Self(rawValue: 8)

    /// A set-top box.
    public static let audioVideoSetTopBox = Self(rawValue: 9)

    /// A HiFi audio device.
    public static let audioVideoHifiAudioDevice = Self(rawValue: 10)

    /// A VCR.
    public static let audioVideoVcr = Self(rawValue: 11)

    /// A video camera.
    public static let audioVideoVideoCamera = Self(rawValue: 12)

    /// A camcorder.
    public static let audioVideoCamcorder = Self(rawValue: 13)

    /// A video monitor.
    public static let audioVideoVideoMonitor = Self(rawValue: 14)

    /// A video display and loudspeaker.
    public static let audioVideoVideoDisplayAndLoudspeaker = Self(rawValue: 15)

    /// A video conferencing device.
    public static let audioVideoVideoConferencing = Self(rawValue: 16)

    /// A gaming console or toy.
    public static let audioVideoGamingOrToy = Self(rawValue: 18)

    /// A joystick.
    public static let peripheralJoystick = Self(rawValue: 1)

    /// A gamepad.
    public static let peripheralGamepad = Self(rawValue: 2)

    /// A remote control.
    public static let peripheralRemoteControl = Self(rawValue: 3)

    /// A sensing device.
    public static let peripheralSensing = Self(rawValue: 4)

    /// A digitizer tablet.
    public static let peripheralDigitizerTablet = Self(rawValue: 5)

    /// A card reader.
    public static let peripheralCardReader = Self(rawValue: 6)

    /// A digital pen.
    public static let peripheralDigitalPen = Self(rawValue: 7)

    /// A handheld scanner for bar codes, RFID, etc
    public static let peripheralHandheldScanner = Self(rawValue: 8)

    /// A handheld gesture input device, such as a "wand" form factor device.
    public static let peripheralHandheldGesture = Self(rawValue: 9)

    /// A wristwatch.
    public static let wearableWristwatch = Self(rawValue: 1)

    /// A pager.
    public static let wearablePager = Self(rawValue: 2)

    /// A jacket.
    public static let wearableJacket = Self(rawValue: 3)

    /// A helmet.
    public static let wearableHelmet = Self(rawValue: 4)

    /// Glasses.
    public static let wearableGlasses = Self(rawValue: 5)

    /// A robot.
    public static let toyRobot = Self(rawValue: 1)

    /// A vehicle.
    public static let toyVehicle = Self(rawValue: 2)

    /// A doll or action figure.
    public static let toyDoll = Self(rawValue: 3)

    /// A controller.
    public static let toyController = Self(rawValue: 4)

    /// A game.
    public static let toyGame = Self(rawValue: 5)

    /// A blood pressure monitor.
    public static let healthBloodPressureMonitor = Self(rawValue: 1)

    /// A thermometer.
    public static let healthThermometer = Self(rawValue: 2)

    /// A weighing scale.
    public static let healthWeighingScale = Self(rawValue: 3)

    /// A glucose meter.
    public static let healthGlucoseMeter = Self(rawValue: 4)

    /// A pulse oximeter.
    public static let healthPulseOximeter = Self(rawValue: 5)

    /// A heart rate or pulse monitor.
    public static let healthHeartRateMonitor = Self(rawValue: 6)

    /// A health data display.
    public static let healthHealthDataDisplay = Self(rawValue: 7)

    /// A step counter.
    public static let healthStepCounter = Self(rawValue: 8)

    /// A body composition analyzer.
    public static let healthBodyCompositionAnalyzer = Self(rawValue: 9)

    /// A peak flow monitor.
    public static let healthPeakFlowMonitor = Self(rawValue: 10)

    /// A medication monitor.
    public static let healthMedicationMonitor = Self(rawValue: 11)

    /// A knee prosthesis.
    public static let healthKneeProsthesis = Self(rawValue: 12)

    /// An ankle prosthesis.
    public static let healthAnkleProsthesis = Self(rawValue: 13)

    /// A generic health manager.
    public static let healthGenericHealthManager = Self(rawValue: 14)

    /// A personal mobility device.
    public static let healthPersonalMobilityDevice = Self(rawValue: 15)
}