// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Bluetooth adapter.
public final class WindowsDevicesBluetooth_BluetoothAdapter: WindowsRuntime.WinRTImport<WindowsDevicesBluetooth_BluetoothAdapterProjection> {
    // MARK: Windows.Devices.Bluetooth.IBluetoothAdapter members

    /// Gets the device address.
    /// - Returns: The device address.
    public var bluetoothAddress: Swift.UInt64 {
        get throws {
            try _interop.get_BluetoothAddress()
        }
    }

    /// Gets the device ID.
    /// - Returns: The ID of the device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets a boolean indicating if the adapter supports advertisement offload.
    /// - Returns: Gets a boolean indicating if the adapter supports advertisement offload.
    public var isAdvertisementOffloadSupported: Swift.Bool {
        get throws {
            try _interop.get_IsAdvertisementOffloadSupported()
        }
    }

    /// Gets a boolean indicating if the adapater supports LowEnergy central role.
    /// - Returns: Gets a boolean indicating if the adapater supports LowEnergy central role.
    public var isCentralRoleSupported: Swift.Bool {
        get throws {
            try _interop.get_IsCentralRoleSupported()
        }
    }

    /// Gets a boolean indicating if the adapter supports the Bluetooth Classic transport type.
    /// - Returns: Gets a boolean indicating if the adapter supports the Bluetooth Classic transport type.
    public var isClassicSupported: Swift.Bool {
        get throws {
            try _interop.get_IsClassicSupported()
        }
    }

    /// Gets a boolean indicating if the adapater supports LowEnergy Bluetooth Transport type.
    /// - Returns: Gets a boolean indicating if the adapater supports LowEnergy Bluetooth Transport type.
    public var isLowEnergySupported: Swift.Bool {
        get throws {
            try _interop.get_IsLowEnergySupported()
        }
    }

    /// Gets a boolean indicating if the adapater supports LowEnergy peripheral role.
    /// - Returns: Gets a boolean indicating if the adapater supports LowEnergy peripheral role.
    public var isPeripheralRoleSupported: Swift.Bool {
        get throws {
            try _interop.get_IsPeripheralRoleSupported()
        }
    }

    /// Gets the radio represented by this Bluetooth adapter.
    /// - Returns: Returns an asynchronous operation that completes with the Radio.
    public func getRadioAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesRadios_Radio?> {
        try COM.NullResult.unwrap(_interop.getRadioAsync())
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothAdapter2 members

    /// Gets or sets a value indicating whether Secure Connections are supported for classic paired Bluetooth devices.
    /// - Returns: Indicates whether Secure Connections are supported for classic paired Bluetooth devices.
    public var areClassicSecureConnectionsSupported: Swift.Bool {
        get throws {
            try _ibluetoothAdapter2.get_AreClassicSecureConnectionsSupported()
        }
    }

    /// Gets or sets a value indicating whether Secure Connections are supported for paired Bluetooth LE devices.
    /// - Returns: Indicates whether Secure Connections are supported for classic paired Bluetooth devices.
    public var areLowEnergySecureConnectionsSupported: Swift.Bool {
        get throws {
            try _ibluetoothAdapter2.get_AreLowEnergySecureConnectionsSupported()
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothAdapter3 members

    /// Indicates whether the adapter supports the 5.0 Extended Advertising format.
    /// - Returns: Indicates whether extended advertisements are supported on this adapter.
    public var isExtendedAdvertisingSupported: Swift.Bool {
        get throws {
            try _ibluetoothAdapter3.get_IsExtendedAdvertisingSupported()
        }
    }

    /// Indicates the maximum length of an advertisement that can be published by this adapter.
    /// - Returns: The maximum advertisement length of this adapter.
    public var maxAdvertisementDataLength: Swift.UInt32 {
        get throws {
            try _ibluetoothAdapter3.get_MaxAdvertisementDataLength()
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothAdapterStatics members

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of this adapter. This string is passed to the FindAllAsync or CreateWatcher method.
    /// - Returns: Returns an AQS string.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibluetoothAdapterStatics.getDeviceSelector()
    }

    /// Gets a BluetoothAdapter object identified by the given DeviceId.
    /// - Parameter deviceId: The DeviceId value that identifies the BluetoothAdapter instance. This is a composite string combining registry information that includes the MatchingDeviceId, the MAC address, and a GUID representing a device class. This is different than Windows.Devices.Enumeration.DeviceInformation.Id. However, both contain the MAC address of the Bluetooth radio device embedded within the identifier string.
    /// - Returns: After the asynchronous operation completes, returns the BluetoothAdapter object identified by the given DeviceId.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothAdapter?> {
        try COM.NullResult.unwrap(_ibluetoothAdapterStatics.fromIdAsync(deviceId))
    }

    /// Gets the default BluetoothAdapter.
    /// - Returns: An asynchronous operation that completes with a BluetoothAdapter.
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothAdapter?> {
        try COM.NullResult.unwrap(_ibluetoothAdapterStatics.getDefaultAsync())
    }

    // MARK: Implementation details

    private var _ibluetoothAdapter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter2>? = nil

    internal var _ibluetoothAdapter2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter2> {
        get throws {
            try _ibluetoothAdapter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter2.self)
            }
        }
    }

    private var _ibluetoothAdapter3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter3>? = nil

    internal var _ibluetoothAdapter3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter3> {
        get throws {
            try _ibluetoothAdapter3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter3.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapter3.self)
            }
        }
    }

    deinit {
        _ibluetoothAdapter2_storage?.release()
        _ibluetoothAdapter3_storage?.release()
    }

    private static var _ibluetoothAdapterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapterStatics>? = nil

    internal static var _ibluetoothAdapterStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapterStatics> {
        get throws {
            try _ibluetoothAdapterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothAdapter", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothAdapterStatics.iid)
            }
        }
    }
}