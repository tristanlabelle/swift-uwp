// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Groups parameters used to configure received signal strength indicator (RSSI)-based filtering.
public final class WindowsDevicesBluetooth_BluetoothSignalStrengthFilter: WindowsRuntime.WinRTImport<WindowsDevicesBluetooth_BluetoothSignalStrengthFilterProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesBluetooth_BluetoothSignalStrengthFilterProjection.self))
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothSignalStrengthFilter members

    /// The minimum received signal strength indicator (RSSI) value in dBm on which RSSI events will be propagated or considered in range if the previous events were considered out of range.
    /// - Returns: The minimum RSSI value in dBm on which RSSI events will be propagated or considered in range.
    public var inRangeThresholdInDBm: Swift.Int16? {
        get throws {
            try _interop.get_InRangeThresholdInDBm()
        }
    }

    /// The minimum received signal strength indicator (RSSI) value in dBm on which RSSI events will be propagated or considered in range if the previous events were considered out of range.
    /// - Returns: The minimum RSSI value in dBm on which RSSI events will be propagated or considered in range.
    public func inRangeThresholdInDBm(_ value: Swift.Int16?) throws {
        try _interop.put_InRangeThresholdInDBm(value)
    }

    /// The minimum received signal strength indicator (RSSI) value in dBm on which RSSI events will be considered out of range.
    /// - Returns: The minimum RSSI value in dBm on which RSSI events will be considered out of range.
    public var outOfRangeThresholdInDBm: Swift.Int16? {
        get throws {
            try _interop.get_OutOfRangeThresholdInDBm()
        }
    }

    /// The minimum received signal strength indicator (RSSI) value in dBm on which RSSI events will be considered out of range.
    /// - Returns: The minimum RSSI value in dBm on which RSSI events will be considered out of range.
    public func outOfRangeThresholdInDBm(_ value: Swift.Int16?) throws {
        try _interop.put_OutOfRangeThresholdInDBm(value)
    }

    /// The timeout for a received signal strength indicator (RSSI) event to be considered out of range.
    /// - Returns: The timeout for an RSSI event to be considered out of range.
    public var outOfRangeTimeout: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_OutOfRangeTimeout()
        }
    }

    /// The timeout for a received signal strength indicator (RSSI) event to be considered out of range.
    /// - Returns: The timeout for an RSSI event to be considered out of range.
    public func outOfRangeTimeout(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_OutOfRangeTimeout(value)
    }

    /// The interval at which received signal strength indicator (RSSI) events are sampled.
    /// - Returns: The interval at which RSSI events are sampled.
    public var samplingInterval: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_SamplingInterval()
        }
    }

    /// The interval at which received signal strength indicator (RSSI) events are sampled.
    /// - Returns: The interval at which RSSI events are sampled.
    public func samplingInterval(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_SamplingInterval(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}