// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Bluetooth LE device.
public final class WindowsDevicesBluetooth_BluetoothLEDevice: WindowsRuntime.WinRTImport<WindowsDevicesBluetooth_BluetoothLEDeviceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice members

    /// Gets the device address.
    /// - Returns: The address of the device.
    public var bluetoothAddress: Swift.UInt64 {
        get throws {
            try _interop.get_BluetoothAddress()
        }
    }

    /// Gets the connection status of the device.
    /// - Returns: One of the BluetoothConnectionStatus enumeration values that specifies the connection status of the device.
    public var connectionStatus: WindowsDevicesBluetooth_BluetoothConnectionStatus {
        get throws {
            try _interop.get_ConnectionStatus()
        }
    }

    /// Gets the device Id.
    /// - Returns: The Id of the device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the read-only list of GATT services supported by the device.
    /// - Returns: The read-only list of GATT services supported by this Bluetooth LE device.
    public var gattServices: WindowsFoundationCollections_IVectorView<WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceService?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_GattServices())
        }
    }

    /// Gets the name of the Bluetooth LE device.
    /// - Returns: The name of the Bluetooth LE device.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Occurs when the connection status for the device has changed.
    public func connectionStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothLEDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ConnectionStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: connectionStatusChanged)
    }

    public func connectionStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ConnectionStatusChanged(token)
    }

    /// Occurs when the list of GATT services supported by the device has changed.
    public func gattServicesChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothLEDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_GattServicesChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gattServicesChanged)
    }

    public func gattServicesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_GattServicesChanged(token)
    }

    /// Occurs when the name of the device has changed.
    public func nameChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothLEDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_NameChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: nameChanged)
    }

    public func nameChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_NameChanged(token)
    }

    /// Returns the GATT service with the given service Id.
    /// - Parameter serviceUuid: The service Id of the GATT service.
    /// - Returns: The GATT service represented by the given service Id.
    public func getGattService(_ serviceUuid: Foundation.UUID) throws -> WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceService {
        try COM.NullResult.unwrap(_interop.getGattService(serviceUuid))
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice2 members

    /// Gets the BluetoothLEAppearance object for the Bluetooth LE device.
    /// - Returns: The appearance for the Bluetooth LE device.
    public var appearance: WindowsDevicesBluetooth_BluetoothLEAppearance {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothLEDevice2.get_Appearance())
        }
    }

    /// Gets the address type for the Bluetooth LE device.
    /// - Returns: The address type.
    public var bluetoothAddressType: WindowsDevicesBluetooth_BluetoothAddressType {
        get throws {
            try _ibluetoothLEDevice2.get_BluetoothAddressType()
        }
    }

    /// Gets the device information for the Bluetooth LE device.
    /// - Returns: A DeviceInformation object representing the device information.
    public var deviceInformation: WindowsDevicesEnumeration_DeviceInformation {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothLEDevice2.get_DeviceInformation())
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice3 members

    /// Gets the DeviceAccessInformation.
    /// - Returns: Gets the DeviceAccessInformation.
    public var deviceAccessInformation: WindowsDevicesEnumeration_DeviceAccessInformation {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothLEDevice3.get_DeviceAccessInformation())
        }
    }

    /// Requests access to the Bluetooth LowEnergy device.
    /// - Returns: Returns an asynchronous operation that completes with a DeviceAccessStatus.
    public func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesEnumeration_DeviceAccessStatus> {
        try COM.NullResult.unwrap(_ibluetoothLEDevice3.requestAccessAsync())
    }

    /// Gets the GattDeviceServices for this Bluetooth LowEnergy device.
    /// - Returns: Returns an asynchronous operation that completes with a GattDeviceServicesResult.
    public func getGattServicesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothLEDevice3.getGattServicesAsync())
    }

    /// Returns the GattDeviceServices for this Bluetooth LowEnergy device with the specified cache mode.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: Returns an asynchronous operation that completes with a GattDeviceServicesResult.
    public func getGattServicesAsync(_ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothLEDevice3.getGattServicesWithCacheModeAsync(cacheMode))
    }

    /// Returns the GattDeviceServices for the Bluetooth LowEnergy device with the specified UUID.
    /// - Parameter serviceUuid: The service UUID.
    public func getGattServicesForUuidAsync(_ serviceUuid: Foundation.UUID) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothLEDevice3.getGattServicesForUuidAsync(serviceUuid))
    }

    /// Returns the GattDeviceServices for the Bluetooth LowEnergy device with the specified UUID.
    /// - Parameter serviceUuid: The service UUID.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: Returns an asynchronous operation that completes with a GattDeviceServicesResult.
    public func getGattServicesForUuidAsync(_ serviceUuid: Foundation.UUID, _ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothGenericAttributeProfile_GattDeviceServicesResult?> {
        try COM.NullResult.unwrap(_ibluetoothLEDevice3.getGattServicesForUuidWithCacheModeAsync(serviceUuid, cacheMode))
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice4 members

    /// Gets the bluetooth device ID.
    /// - Returns: The bluetooth device ID.
    public var bluetoothDeviceId: WindowsDevicesBluetooth_BluetoothDeviceId {
        get throws {
            try COM.NullResult.unwrap(_ibluetoothLEDevice4.get_BluetoothDeviceId())
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice5 members

    /// Gets a boolean indicating whether the BluetoothLEDevice was paired using a Secure Connection.
    /// - Returns: A boolean indicating whether the BluetoothLEDevice was paired using a Secure Connection.
    public var wasSecureConnectionUsedForPairing: Swift.Bool {
        get throws {
            try _ibluetoothLEDevice5.get_WasSecureConnectionUsedForPairing()
        }
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDevice6 members

    public func connectionParametersChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothLEDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibluetoothLEDevice6.add_ConnectionParametersChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: connectionParametersChanged)
    }

    public func connectionParametersChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibluetoothLEDevice6.remove_ConnectionParametersChanged(token)
    }

    public func connectionPhyChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesBluetooth_BluetoothLEDevice?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibluetoothLEDevice6.add_ConnectionPhyChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: connectionPhyChanged)
    }

    public func connectionPhyChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibluetoothLEDevice6.remove_ConnectionPhyChanged(token)
    }

    public func getConnectionParameters() throws -> WindowsDevicesBluetooth_BluetoothLEConnectionParameters {
        try COM.NullResult.unwrap(_ibluetoothLEDevice6.getConnectionParameters())
    }

    public func getConnectionPhy() throws -> WindowsDevicesBluetooth_BluetoothLEConnectionPhy {
        try COM.NullResult.unwrap(_ibluetoothLEDevice6.getConnectionPhy())
    }

    public func requestPreferredConnectionParameters(_ preferredConnectionParameters: WindowsDevicesBluetooth_BluetoothLEPreferredConnectionParameters?) throws -> WindowsDevicesBluetooth_BluetoothLEPreferredConnectionParametersRequest {
        try COM.NullResult.unwrap(_ibluetoothLEDevice6.requestPreferredConnectionParameters(preferredConnectionParameters))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes this Bluetooth LE device. This may close the connection to the device if this is the only app with a connection.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics2 members

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for Bluetooth LE devices that are either paired or unpaired. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects.
    /// - Parameter pairingState: The current pairing state for Bluetooth LE devices used for constructing the AQS string. Bluetooth LE devices can be either paired (true) or unpaired (false). The AQS Filter string will request scanning to be performed when the pairingState is false.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromPairingState(_ pairingState: Swift.Bool) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromPairingState(pairingState)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for Bluetooth LE devices with the indicated BluetoothConnectionStatus. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects with the indicated Bluetooth connection status.
    /// - Parameter connectionStatus: The connection status used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromConnectionStatus(_ connectionStatus: WindowsDevicesBluetooth_BluetoothConnectionStatus) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromConnectionStatus(connectionStatus)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string that contains a query for the Bluetooth LE device name. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects containing the specified Bluetooth LE device name.
    /// - Parameter deviceName: The Bluetooth LE device name used for constructing the AQS string.
    /// - Returns: An AQS string that is passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromDeviceName(_ deviceName: Swift.String) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromDeviceName(deviceName)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string from a 64-bit address that represents a Bluetooth LE device. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects.
    /// - Parameter bluetoothAddress: A 64-bit Bluetooth LE device address used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromBluetoothAddress(_ bluetoothAddress: Swift.UInt64) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromBluetoothAddress(bluetoothAddress)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string from a 64-bit address and address type that represents a Bluetooth LE device. The AQS string is passed into the CreateWatcher method.
    /// - Parameter bluetoothAddress: A 64-bit Bluetooth LE device address used for constructing the AQS string.
    /// - Parameter bluetoothAddressType: The Bluetooth LE device address type.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromBluetoothAddress(_ bluetoothAddress: Swift.UInt64, _ bluetoothAddressType: WindowsDevicesBluetooth_BluetoothAddressType) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromBluetoothAddressWithBluetoothAddressType(bluetoothAddress, bluetoothAddressType)
    }

    /// Creates an Advanced Query Syntax (AQS) filter string from a BluetoothLEAppearance object. The AQS string is passed into the CreateWatcher method to return a collection of DeviceInformation objects with the specified appearance.
    /// - Parameter appearance: The Bluetooth LE appearance used for constructing the AQS string.
    /// - Returns: An AQS string that can be passed as a parameter to the CreateWatcher method.
    public static func getDeviceSelectorFromAppearance(_ appearance: WindowsDevicesBluetooth_BluetoothLEAppearance?) throws -> Swift.String {
        try _ibluetoothLEDeviceStatics2.getDeviceSelectorFromAppearance(appearance)
    }

    /// Returns a BluetoothLEDevice object representing the peer device with the given address and address type. See **Remarks**.
    /// - Parameter bluetoothAddress: A BluetoothAddress value containing the 64-bit address of the peer Bluetooth LE device.
    /// - Parameter bluetoothAddressType: A BluetoothAddressType value containing the address type of the peer Bluetooth LE device.
    /// - Returns: Returns an object representing an asynchronous operation. When that object completes, it contains a BluetoothLEDevice object representing the peer device with the given address and address type.
    public static func fromBluetoothAddressAsync(_ bluetoothAddress: Swift.UInt64, _ bluetoothAddressType: WindowsDevicesBluetooth_BluetoothAddressType) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothLEDevice?> {
        try COM.NullResult.unwrap(_ibluetoothLEDeviceStatics2.fromBluetoothAddressWithBluetoothAddressTypeAsync(bluetoothAddress, bluetoothAddressType))
    }

    // MARK: Windows.Devices.Bluetooth.IBluetoothLEDeviceStatics members

    /// Returns a BluetoothLEDevice object for the given Id. See **Remarks**.
    /// - Parameter deviceId: The Id of the Bluetooth LE device.
    /// - Returns: After the asynchronous operation completes, returns the BluetoothLEDevice object with the given Id.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothLEDevice?> {
        try COM.NullResult.unwrap(_ibluetoothLEDeviceStatics.fromIdAsync(deviceId))
    }

    /// Returns a BluetoothLEDevice object representing the peer Bluetooth LE device with the given address. See **Remarks**.
    /// - Parameter bluetoothAddress: A BluetoothAddress value containing the 64-bit address of the peer Bluetooth LE device.
    /// - Returns: Returns an object representing an asynchronous operation. When that object completes, it contains a BluetoothLEDevice object representing the peer Bluetooth LE device with the given address.
    public static func fromBluetoothAddressAsync(_ bluetoothAddress: Swift.UInt64) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetooth_BluetoothLEDevice?> {
        try COM.NullResult.unwrap(_ibluetoothLEDeviceStatics.fromBluetoothAddressAsync(bluetoothAddress))
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying all Bluetooth Low Energy (LE) devices. This string is passed to the FindAllAsync or CreateWatcher method in order to get a list of Bluetooth LE devices.
    /// - Returns: The device selector for this device.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibluetoothLEDeviceStatics.getDeviceSelector()
    }

    // MARK: Implementation details

    private var _ibluetoothLEDevice2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice2>? = nil

    internal var _ibluetoothLEDevice2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice2> {
        get throws {
            try _ibluetoothLEDevice2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice2.self)
            }
        }
    }

    private var _ibluetoothLEDevice3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice3>? = nil

    internal var _ibluetoothLEDevice3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice3> {
        get throws {
            try _ibluetoothLEDevice3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice3.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice3.self)
            }
        }
    }

    private var _ibluetoothLEDevice4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice4>? = nil

    internal var _ibluetoothLEDevice4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice4> {
        get throws {
            try _ibluetoothLEDevice4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice4.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice4.self)
            }
        }
    }

    private var _ibluetoothLEDevice5_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice5>? = nil

    internal var _ibluetoothLEDevice5: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice5> {
        get throws {
            try _ibluetoothLEDevice5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice5.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice5.self)
            }
        }
    }

    private var _ibluetoothLEDevice6_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice6>? = nil

    internal var _ibluetoothLEDevice6: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice6> {
        get throws {
            try _ibluetoothLEDevice6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice6.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDevice6.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ibluetoothLEDevice2_storage?.release()
        _ibluetoothLEDevice3_storage?.release()
        _ibluetoothLEDevice4_storage?.release()
        _ibluetoothLEDevice5_storage?.release()
        _ibluetoothLEDevice6_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _ibluetoothLEDeviceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics2>? = nil

    internal static var _ibluetoothLEDeviceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics2> {
        get throws {
            try _ibluetoothLEDeviceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothLEDevice", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics2.iid)
            }
        }
    }

    private static var _ibluetoothLEDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics>? = nil

    internal static var _ibluetoothLEDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics> {
        get throws {
            try _ibluetoothLEDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothLEDevice", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEDeviceStatics.iid)
            }
        }
    }
}