// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Indicates the appearance subcategory code of the Bluetooth LE device. For more info on how sub categories map to categories, see the Bluetooth Specification.
public enum WindowsDevicesBluetooth_BluetoothLEAppearanceSubcategories {
    // MARK: Windows.Devices.Bluetooth.IBluetoothLEAppearanceSubcategoriesStatics members

    /// Gets the pulse barcode scanner appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a barcode scanner Bluetooth LE device.
    public static var barcodeScanner: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_BarcodeScanner()
        }
    }

    /// Gets the blood pressure arm appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.BloodPressure appearance category.
    /// - Returns: The appearance subcategory code for a blood pressure arm Bluetooth LE device.
    public static var bloodPressureArm: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_BloodPressureArm()
        }
    }

    /// Gets the blood pressure wrist appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.BloodPressure appearance category.
    /// - Returns: The appearance subcategory code for a blood pressure wrist Bluetooth LE device.
    public static var bloodPressureWrist: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_BloodPressureWrist()
        }
    }

    /// Gets the card reader appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a card reader Bluetooth LE device.
    public static var cardReader: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CardReader()
        }
    }

    /// Gets the cycling cadence sensor appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.Cycling appearance category.
    /// - Returns: The appearance subcategory code for a cycling cadence sensor Bluetooth LE device.
    public static var cyclingCadenceSensor: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CyclingCadenceSensor()
        }
    }

    /// Gets the cycling computer appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.Cycling appearance category.
    /// - Returns: The appearance subcategory code for a cycling computer Bluetooth LE device.
    public static var cyclingComputer: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CyclingComputer()
        }
    }

    /// Gets the cycling power sensor appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.Cycling appearance category.
    /// - Returns: The appearance subcategory code for a cycling power sensor Bluetooth LE device.
    public static var cyclingPowerSensor: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CyclingPowerSensor()
        }
    }

    /// Gets the cycling speed cadence sensor appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.Cycling appearance category.
    /// - Returns: The appearance subcategory code for a cycling speed cadence sensor Bluetooth LE device.
    public static var cyclingSpeedCadenceSensor: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CyclingSpeedCadenceSensor()
        }
    }

    /// Gets the cycling speed sensor appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.Cycling appearance category.
    /// - Returns: The appearance subcategory code for a cycling speed sensor Bluetooth LE device.
    public static var cyclingSpeedSensor: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_CyclingSpeedSensor()
        }
    }

    /// Gets the digital pen appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a digital pen Bluetooth LE device.
    public static var digitalPen: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_DigitalPen()
        }
    }

    /// Gets the digitizer tablet appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a digitizer tablet Bluetooth LE device.
    public static var digitizerTablet: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_DigitizerTablet()
        }
    }

    /// Gets the gamepad appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a gamepad Bluetooth LE device.
    public static var gamepad: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_Gamepad()
        }
    }

    /// Gets the generic appearance subcategory code.
    /// - Returns: The appearance subcategory code for a generic Bluetooth LE device.
    public static var generic: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_Generic()
        }
    }

    /// Gets the heart rate belt appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HeartRate appearance category.
    /// - Returns: The appearance subcategory code for a heart rate belt Bluetooth LE device.
    public static var heartRateBelt: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_HeartRateBelt()
        }
    }

    /// Gets the joystick appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a joystick Bluetooth LE device.
    public static var joystick: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_Joystick()
        }
    }

    /// Gets the keyboard appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a keyboard Bluetooth LE device.
    public static var keyboard: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_Keyboard()
        }
    }

    /// Gets the location display appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.OutdoorSportActivity appearance category.
    /// - Returns: The appearance subcategory code for a location display Bluetooth LE device.
    public static var locationDisplay: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_LocationDisplay()
        }
    }

    /// Gets the location navigation display appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.OutdoorSportActivity appearance category.
    /// - Returns: The appearance subcategory code for a location navigation display Bluetooth LE device.
    public static var locationNavigationDisplay: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_LocationNavigationDisplay()
        }
    }

    /// Gets the location navigation pod appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.OutdoorSportActivity appearance category.
    /// - Returns: The appearance subcategory code for a location navigation pod Bluetooth LE device.
    public static var locationNavigationPod: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_LocationNavigationPod()
        }
    }

    /// Gets the location pod appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.OutdoorSportActivity appearance category.
    /// - Returns: The appearance subcategory code for a location pod Bluetooth LE device.
    public static var locationPod: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_LocationPod()
        }
    }

    /// Gets the mouse appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.HumanInterfaceDevice appearance category.
    /// - Returns: The appearance subcategory code for a mouse Bluetooth LE device.
    public static var mouse: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_Mouse()
        }
    }

    /// Gets the oximeter fingertip appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.PulseOximeter appearance category.
    /// - Returns: The appearance subcategory code for a oximeter fingertip Bluetooth LE device.
    public static var oximeterFingertip: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_OximeterFingertip()
        }
    }

    /// Gets the oximeter wrist worn appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.PulseOximeter appearance category.
    /// - Returns: The appearance subcategory code for a oximeter wrist worn Bluetooth LE device.
    public static var oximeterWristWorn: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_OximeterWristWorn()
        }
    }

    /// Gets the running or walking in shoe appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.RunningWalking appearance category.
    /// - Returns: The appearance subcategory code for a running or walking in shoe Bluetooth LE device.
    public static var runningWalkingInShoe: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_RunningWalkingInShoe()
        }
    }

    /// Gets the running or walking on hip appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.RunningWalking appearance category.
    /// - Returns: The appearance subcategory code for a running or walking on hip Bluetooth LE device.
    public static var runningWalkingOnHip: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_RunningWalkingOnHip()
        }
    }

    /// Gets the running or walking on shoe appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.RunningWalking appearance category.
    /// - Returns: The appearance subcategory code for a running or walking on shoe Bluetooth LE device.
    public static var runningWalkingOnShoe: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_RunningWalkingOnShoe()
        }
    }

    /// Gets the sports watch appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.RunningWalking appearance category.
    /// - Returns: The appearance subcategory code for a sports watch Bluetooth LE device.
    public static var sportsWatch: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_SportsWatch()
        }
    }

    /// Gets the ear thermometer appearance subcategory code. This is only applicable for Bluetooth LE devices that are part of the BluetoothLEAppearanceCategories.RunningWalking appearance category.
    /// - Returns: The appearance subcategory code for a ear thermometer Bluetooth LE device.
    public static var thermometerEar: Swift.UInt16 {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics.get_ThermometerEar()
        }
    }

    // MARK: Implementation details

    private static var _ibluetoothLEAppearanceSubcategoriesStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceSubcategoriesStatics>? = nil

    internal static var _ibluetoothLEAppearanceSubcategoriesStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceSubcategoriesStatics> {
        get throws {
            try _ibluetoothLEAppearanceSubcategoriesStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories", id: CWinRT.SWRT_WindowsDevicesBluetooth_IBluetoothLEAppearanceSubcategoriesStatics.iid)
            }
        }
    }
}