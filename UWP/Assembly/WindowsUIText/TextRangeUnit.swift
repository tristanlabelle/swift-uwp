// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the units to use when navigating a text range.
public struct WindowsUIText_TextRangeUnit: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// A single character.
    public static let character = Self()

    /// A span of alphanumeric characters, an end of paragraph, or punctuation that includes any blanks that follow.
    public static let word = Self(rawValue: 1)

    /// A string of text that meets the following criteria:
    public static let sentence = Self(rawValue: 2)

    /// A string of text terminated by an end-of-paragraph mark, such as carriage return/line feed (CR/LF), carriage return (CR), vertical tab(VT), line feed (LF), form feed (FF), or the Unicode paragraph separator (0x2029).
    public static let paragraph = Self(rawValue: 3)

    /// A single line of text on a display, provided that the display is associated with the range. If no display is associated with a range, **Line** is treated as **Paragraph**. A selection automatically has a display.
    public static let line = Self(rawValue: 4)

    /// A story, which is a contiguous range of text in a document. For example, a story can contain one of the various parts of a document, such as the main text of a document, headers and footers, footnotes, or annotations. In a rich edit control, there is only one story per document, although a client can use multiple documents to represent multiple stories.
    public static let story = Self(rawValue: 5)

    /// The contents of a screen. Typically, a screen is the amount of content associated with the Page Up or Page Down key.
    public static let screen = Self(rawValue: 6)

    /// A section.
    public static let section = Self(rawValue: 7)

    /// The characters between the upper-left and lower-right corners of the window.
    public static let window = Self(rawValue: 8)

    /// A text run of characters that all have identical character formatting properties.
    public static let characterFormat = Self(rawValue: 9)

    /// A text run of characters that all have identical paragraph formatting properties.
    public static let paragraphFormat = Self(rawValue: 10)

    /// An embedded object.
    public static let object = Self(rawValue: 11)

    /// A paragraph that is ended by a carriage return (CR) or carriage return/line feed (CR/LF).
    public static let hardParagraph = Self(rawValue: 12)

    /// A complex-script cluster (occurs, for example, in Indic scripts).
    public static let cluster = Self(rawValue: 13)

    /// Bold text.
    public static let bold = Self(rawValue: 14)

    /// Italic text.
    public static let italic = Self(rawValue: 15)

    /// Underlined text.
    public static let underline = Self(rawValue: 16)

    /// Strikethrough text.
    public static let strikethrough = Self(rawValue: 17)

    /// Protected text.
    public static let protectedText = Self(rawValue: 18)

    /// Hyperlink text.
    public static let link = Self(rawValue: 19)

    /// Text in small caps.
    public static let smallCaps = Self(rawValue: 20)

    /// Text in all uppercase.
    public static let allCaps = Self(rawValue: 21)

    /// Hidden text.
    public static let hidden = Self(rawValue: 22)

    /// Outline text.
    public static let outline = Self(rawValue: 23)

    /// Shadow text.
    public static let shadow = Self(rawValue: 24)

    /// Imprinted (engraved) text.
    public static let imprint = Self(rawValue: 25)

    /// Disabled text.
    public static let disabled = Self(rawValue: 26)

    /// Revised text.
    public static let revised = Self(rawValue: 27)

    /// Text in the subscript character format.
    public static let `subscript` = Self(rawValue: 28)

    /// Text in the superscript character format.
    public static let superscript = Self(rawValue: 29)

    /// Text is in a font-bound font. That is, characters that can't be displayed with the current font were assigned a different font that could display the characters.
    public static let fontBound = Self(rawValue: 30)

    /// Characters in one or more contiguous, friendly-name hyperlinks. To work with single links that might be adjacent, use the **Link** unit.
    public static let linkProtected = Self(rawValue: 31)

    /// ContentLink text.
    public static let contentLink = Self(rawValue: 32)
}