// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a rich text document that can be loaded, saved, and edited.
public final class WindowsUIText_RichEditTextDocument: WindowsRuntime.WinRTImport<WindowsUIText_RichEditTextDocumentProjection>, WindowsUIText_ITextDocumentProtocol {
    // MARK: Windows.UI.Text.ITextDocument members

    /// Gets or sets the caret type.
    /// - Returns: The caret type.
    public var caretType: WindowsUIText_CaretType {
        get throws {
            try _interop.get_CaretType()
        }
    }

    /// Gets or sets the caret type.
    /// - Returns: The caret type.
    public func caretType(_ value: WindowsUIText_CaretType) throws {
        try _interop.put_CaretType(value)
    }

    /// Gets or sets the default tab spacing.
    /// - Returns: The default tab spacing.
    public var defaultTabStop: Swift.Float {
        get throws {
            try _interop.get_DefaultTabStop()
        }
    }

    /// Gets or sets the default tab spacing.
    /// - Returns: The default tab spacing.
    public func defaultTabStop(_ value: Swift.Float) throws {
        try _interop.put_DefaultTabStop(value)
    }

    /// Gets the active text selection.
    /// - Returns: The active text selection.
    public var selection: WindowsUIText_ITextSelection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Selection())
        }
    }

    /// Gets or sets the maximum number of actions that can be stored in the undo queue.
    /// - Returns: The maximum number of undo actions.
    public var undoLimit: Swift.UInt32 {
        get throws {
            try _interop.get_UndoLimit()
        }
    }

    /// Gets or sets the maximum number of actions that can be stored in the undo queue.
    /// - Returns: The maximum number of undo actions.
    public func undoLimit(_ value: Swift.UInt32) throws {
        try _interop.put_UndoLimit(value)
    }

    /// Determines whether document content can be copied to the Clipboard.
    /// - Returns: **true** if copying to the Clipboard is allowed; otherwise, **false**.
    public func canCopy() throws -> Swift.Bool {
        try _interop.canCopy()
    }

    /// Determines whether the Clipboard has content that can be pasted into the document.
    /// - Returns: **true** if the Clipboard has content that can be pasted into the document; otherwise, **false**.
    public func canPaste() throws -> Swift.Bool {
        try _interop.canPaste()
    }

    /// Determines whether one or more redo operations exist.
    /// - Returns: **true** if one or more redo operations exist; otherwise, **false**.
    public func canRedo() throws -> Swift.Bool {
        try _interop.canRedo()
    }

    /// Determines whether one or more undo operations exist.
    /// - Returns: **true** if one or more undo operations exist; otherwise, **false**.
    public func canUndo() throws -> Swift.Bool {
        try _interop.canUndo()
    }

    /// Decrements an internal counter that controls whether text updates are displayed immediately or batched.
    /// - Returns: The value of the internal counter.
    public func applyDisplayUpdates() throws -> Swift.Int32 {
        try _interop.applyDisplayUpdates()
    }

    /// Increments an internal counter that controls whether text updates are displayed immediately or batched.
    /// - Returns: The value of the internal counter.
    public func batchDisplayUpdates() throws -> Swift.Int32 {
        try _interop.batchDisplayUpdates()
    }

    /// Turns on undo grouping.
    public func beginUndoGroup() throws {
        try _interop.beginUndoGroup()
    }

    /// Turns off undo grouping.
    public func endUndoGroup() throws {
        try _interop.endUndoGroup()
    }

    /// Retrieves the default character formatting attributes of the document.
    /// - Returns: The default character formatting attributes.
    public func getDefaultCharacterFormat() throws -> WindowsUIText_ITextCharacterFormat {
        try COM.NullResult.unwrap(_interop.getDefaultCharacterFormat())
    }

    /// Retrieves the default paragraph formatting attributes of the document.
    /// - Returns: The default paragraph formatting attributes.
    public func getDefaultParagraphFormat() throws -> WindowsUIText_ITextParagraphFormat {
        try COM.NullResult.unwrap(_interop.getDefaultParagraphFormat())
    }

    /// Retrieves a new text range for the active story of the document.
    /// - Parameter startPosition: The starting position of the new text range, relative to the beginning of the story.
    /// - Parameter endPosition: The ending position of the new text range.
    /// - Returns: The new text range.
    public func getRange(_ startPosition: Swift.Int32, _ endPosition: Swift.Int32) throws -> WindowsUIText_ITextRange {
        try COM.NullResult.unwrap(_interop.getRange(startPosition, endPosition))
    }

    /// Retrieves the degenerate (empty) text range at, or nearest to, a particular point on the screen.
    /// - Parameter point: The location of the point on the screen, in screen coordinates.
    /// - Parameter options: The alignment type of the specified *point*.
    /// - Returns: The new text range.
    public func getRangeFromPoint(_ point: WindowsFoundation_Point, _ options: WindowsUIText_PointOptions) throws -> WindowsUIText_ITextRange {
        try COM.NullResult.unwrap(_interop.getRangeFromPoint(point, options))
    }

    /// Gets the text in the active story (document).
    /// - Parameter options: The text retrieval options.
    /// - Parameter value: The text in the active story.
    public func getText(_ options: WindowsUIText_TextGetOptions, _ value: inout Swift.String) throws {
        try _interop.getText(options, &value)
    }

    /// Loads a document from a stream.
    /// - Parameter options: The text options to use for the loading the document.
    /// - Parameter value: The random access stream that contains the document.
    public func loadFromStream(_ options: WindowsUIText_TextSetOptions, _ value: WindowsStorageStreams_IRandomAccessStream?) throws {
        try _interop.loadFromStream(options, value)
    }

    /// Reverses the most recent undo operation.
    public func redo() throws {
        try _interop.redo()
    }

    /// Saves the document to a stream.
    /// - Parameter options: The text options for saving the document.
    /// - Parameter value: The random access stream for saving the document.
    public func saveToStream(_ options: WindowsUIText_TextGetOptions, _ value: WindowsStorageStreams_IRandomAccessStream?) throws {
        try _interop.saveToStream(options, value)
    }

    /// Sets the default character formatting attributes of the document.
    /// - Parameter value: The new default character formatting attributes.
    public func setDefaultCharacterFormat(_ value: WindowsUIText_ITextCharacterFormat?) throws {
        try _interop.setDefaultCharacterFormat(value)
    }

    /// Sets the default paragraph formatting attributes of the document.
    /// - Parameter value: The default paragraph formatting attributes.
    public func setDefaultParagraphFormat(_ value: WindowsUIText_ITextParagraphFormat?) throws {
        try _interop.setDefaultParagraphFormat(value)
    }

    /// Sets the text of the document.
    /// - Parameter options: Options that control how the text is inserted into the document.
    /// - Parameter value: The new text.
    public func setText(_ options: WindowsUIText_TextSetOptions, _ value: Swift.String) throws {
        try _interop.setText(options, value)
    }

    /// Undoes the most recent undo group.
    public func undo() throws {
        try _interop.undo()
    }

    // MARK: Windows.UI.Text.ITextDocument2 members

    /// Gets or sets a value that indicates whether trailing white space is taken into account when text is aligned.
    /// - Returns: **true** if trailing whitespace is taken into account when text is aligned; **false** if trailing whitespace is ignored. The default is **false**.
    public var alignmentIncludesTrailingWhitespace: Swift.Bool {
        get throws {
            try _itextDocument2.get_AlignmentIncludesTrailingWhitespace()
        }
    }

    /// Gets or sets a value that indicates whether trailing white space is taken into account when text is aligned.
    /// - Returns: **true** if trailing whitespace is taken into account when text is aligned; **false** if trailing whitespace is ignored. The default is **false**.
    public func alignmentIncludesTrailingWhitespace(_ value: Swift.Bool) throws {
        try _itextDocument2.put_AlignmentIncludesTrailingWhitespace(value)
    }

    /// Gets or sets a value that indicates whether character spacing is applied to the last character in a line.
    /// - Returns: **true** if spacing is applied to the last character in a line of text; otherwise, **false**. The default is **false**.
    public var ignoreTrailingCharacterSpacing: Swift.Bool {
        get throws {
            try _itextDocument2.get_IgnoreTrailingCharacterSpacing()
        }
    }

    /// Gets or sets a value that indicates whether character spacing is applied to the last character in a line.
    /// - Returns: **true** if spacing is applied to the last character in a line of text; otherwise, **false**. The default is **false**.
    public func ignoreTrailingCharacterSpacing(_ value: Swift.Bool) throws {
        try _itextDocument2.put_IgnoreTrailingCharacterSpacing(value)
    }

    // MARK: Windows.UI.Text.ITextDocument3 members

    /// Empties the undo and redo buffers.
    public func clearUndoRedoHistory() throws {
        try _itextDocument3.clearUndoRedoHistory()
    }

    // MARK: Windows.UI.Text.ITextDocument4 members

    /// Sets the RichEditBox content to the specified MathML.
    /// - Parameter value: The MathML content for the RichEditBox.
    public func setMath(_ value: Swift.String) throws {
        try _itextDocument4.setMath(value)
    }

    /// Retrieves the RichEditBox content as MathML.
    /// - Parameter value: The RichEditBox content as MathML.
    public func getMath(_ value: inout Swift.String) throws {
        try _itextDocument4.getMath(&value)
    }

    /// Configures a RichEditBox to interpret input based on the specified math mode.
    /// - Parameter mode: Specifies whether a RichEditBox interprets input as  (MathML ) or text.
    public func setMathMode(_ mode: WindowsUIText_RichEditMathMode) throws {
        try _itextDocument4.setMathMode(mode)
    }

    // MARK: Implementation details

    private var _itextDocument2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument2>? = nil

    internal var _itextDocument2: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument2> {
        get throws {
            try _itextDocument2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIText_ITextDocument2.iid).cast(to: CWinRT.SWRT_WindowsUIText_ITextDocument2.self)
            }
        }
    }

    private var _itextDocument3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument3>? = nil

    internal var _itextDocument3: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument3> {
        get throws {
            try _itextDocument3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIText_ITextDocument3.iid).cast(to: CWinRT.SWRT_WindowsUIText_ITextDocument3.self)
            }
        }
    }

    private var _itextDocument4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument4>? = nil

    internal var _itextDocument4: COM.COMInterop<CWinRT.SWRT_WindowsUIText_ITextDocument4> {
        get throws {
            try _itextDocument4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIText_ITextDocument4.iid).cast(to: CWinRT.SWRT_WindowsUIText_ITextDocument4.self)
            }
        }
    }

    deinit {
        _itextDocument2_storage?.release()
        _itextDocument3_storage?.release()
        _itextDocument4_storage?.release()
    }
}