// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines the default paragraph formatting attributes of a document, or the current paragraph formatting attributes of a text range.
public protocol WindowsUIText_ITextParagraphFormatProtocol: IInspectableProtocol {
    /// Gets or sets the paragraph alignment.
    /// - Returns: The paragraph alignment value.
    var alignment: WindowsUIText_ParagraphAlignment { get throws }
    func alignment(_ value: WindowsUIText_ParagraphAlignment) throws

    /// Gets the amount used to indent the first line of a paragraph relative to the left indent.
    /// - Returns: The first line indentation amount, in floating-point points.
    var firstLineIndent: Swift.Float { get throws }

    /// Gets or sets whether page breaks are allowed in paragraphs.
    /// - Returns: A value that indicates whether page breaks are allowed.
    var keepTogether: WindowsUIText_FormatEffect { get throws }
    func keepTogether(_ value: WindowsUIText_FormatEffect) throws

    /// Gets or sets whether page breaks are allowed between paragraphs in a range.
    /// - Returns: The value that indicates whether page breaks are allowed.
    var keepWithNext: WindowsUIText_FormatEffect { get throws }
    func keepWithNext(_ value: WindowsUIText_FormatEffect) throws

    /// Gets the amount used to indent all lines except the first line of a paragraph.
    /// - Returns: The amount of left indentation, in floating-point points. Indentation is relative to the left margin.
    var leftIndent: Swift.Float { get throws }

    /// Gets the paragraph line-spacing value.
    /// - Returns: The line spacing value. The meaning depends on the value of the LineSpacingRule property. The line spacing value is in floating-point points except when the line-spacing rule is **Multiple** or **Percent**.
    var lineSpacing: Swift.Float { get throws }

    /// Gets the paragraph line-spacing rule.
    /// - Returns: The paragraph line-spacing rule.
    var lineSpacingRule: WindowsUIText_LineSpacingRule { get throws }

    /// Gets or sets the alignment to use for bulleted and numbered lists.
    /// - Returns: The alignment for bulleted and numbered lists.
    var listAlignment: WindowsUIText_MarkerAlignment { get throws }
    func listAlignment(_ value: WindowsUIText_MarkerAlignment) throws

    /// Gets or sets the list level index used with paragraphs.
    /// - Returns: The list level index. It can be a value of 0 or higher, as described in the following table. <table>
    var listLevelIndex: Swift.Int32 { get throws }
    func listLevelIndex(_ value: Swift.Int32) throws

    /// Gets or sets the starting value or code of a list numbering sequence.
    /// - Returns: The starting value or code of a list numbering sequence.
    var listStart: Swift.Int32 { get throws }
    func listStart(_ value: Swift.Int32) throws

    /// Gets or sets the style used to mark the item paragraphs in a list.
    /// - Returns: The style used to mark the item paragraphs.
    var listStyle: WindowsUIText_MarkerStyle { get throws }
    func listStyle(_ value: WindowsUIText_MarkerStyle) throws

    /// Gets or sets the list tab setting, which is the distance between the first indent and the start of the text on the first line.
    /// - Returns: The list tab setting.
    var listTab: Swift.Float { get throws }
    func listTab(_ value: Swift.Float) throws

    /// Gets or sets the kind of characters used to mark the item paragraphs in a list.
    /// - Returns: The kind of characters used to mark the item paragraphs.
    var listType: WindowsUIText_MarkerType { get throws }
    func listType(_ value: WindowsUIText_MarkerType) throws

    /// Gets or sets whether paragraph numbering is suppressed.
    /// - Returns: A value that indicates whether line numbering is suppressed.
    var noLineNumber: WindowsUIText_FormatEffect { get throws }
    func noLineNumber(_ value: WindowsUIText_FormatEffect) throws

    /// Gets or sets whether there is a page break before a paragraph.
    /// - Returns: A value that indicates whether there is page break.
    var pageBreakBefore: WindowsUIText_FormatEffect { get throws }
    func pageBreakBefore(_ value: WindowsUIText_FormatEffect) throws

    /// Gets or sets the right margin of a paragraph.
    /// - Returns: The size of the right margin, in floating-point points.
    var rightIndent: Swift.Float { get throws }
    func rightIndent(_ value: Swift.Float) throws

    /// Gets or sets whether the paragraph uses right-to-left formatting.
    /// - Returns: A value that indicates whether the paragraph uses right-to-left formatting.
    var rightToLeft: WindowsUIText_FormatEffect { get throws }
    func rightToLeft(_ value: WindowsUIText_FormatEffect) throws

    /// Gets or sets the amount of vertical space that follows a paragraph.
    /// - Returns: The amount of vertical space, in floating-point points.
    var spaceAfter: Swift.Float { get throws }
    func spaceAfter(_ value: Swift.Float) throws

    /// Gets or sets the amount of vertical space above a paragraph.
    /// - Returns: The amount of vertical space, in floating-point points.
    var spaceBefore: Swift.Float { get throws }
    func spaceBefore(_ value: Swift.Float) throws

    /// Gets or sets the paragraph style.
    /// - Returns: The paragraph style.
    var style: WindowsUIText_ParagraphStyle { get throws }
    func style(_ value: WindowsUIText_ParagraphStyle) throws

    /// Retrieves the tab count.
    /// - Returns: The tab count.
    var tabCount: Swift.Int32 { get throws }

    /// Gets or sets whether widow and orphan suppression is on or off.
    /// - Returns: The state of widow and orphan suppression.
    var widowControl: WindowsUIText_FormatEffect { get throws }
    func widowControl(_ value: WindowsUIText_FormatEffect) throws

    /// Adds a new tab at the specified position.
    /// - Parameter position: The position of the new tab, in floating-point points relative to the left side of the page for left-to-right paragraphs, or the right side of the page for right-to-left paragraphs. A maximum of 63 tabs are allowed. Tabs beyond the page are ignored. Negative tabs are not valid.
    /// - Parameter align: The alignment option for the tab position.
    /// - Parameter leader: The character used to fill the space taken by a tab character.
    func addTab(_ position: Swift.Float, _ align: WindowsUIText_TabAlignment, _ leader: WindowsUIText_TabLeader) throws

    /// Clears all tabs, reverting to equally spaced tabs with the default tab spacing.
    func clearAllTabs() throws

    /// Deletes the tab at the specified position.
    /// - Parameter position: The position of the tab to delete, in floating-point points.
    func deleteTab(_ position: Swift.Float) throws

    /// Creates a new object that is identical to this paragraph format object.
    /// - Returns: The duplicate paragraph format object.
    func getClone() throws -> WindowsUIText_ITextParagraphFormat

    /// Retrieves information about the specified tab.
    /// - Parameter index: The zero-based index of the tab to retrieve.
    /// - Parameter position: The tab's position, in floating-point points. This parameter is zero if the tab does not exist.
    /// - Parameter align: The alignment option for the tab position.
    /// - Parameter leader: The character used to fill the space taken by a tab character.
    func getTab(_ index: Swift.Int32, _ position: inout Swift.Float, _ align: inout WindowsUIText_TabAlignment, _ leader: inout WindowsUIText_TabLeader) throws

    /// Determines whether this paragraph format object has the same properties as the specified paragraph format object.
    /// - Parameter format: The paragraph format object to compare against.
    /// - Returns: True if the objects have the same properties, or false if they don't.
    func isEqual(_ format: WindowsUIText_ITextParagraphFormat?) throws -> Swift.Bool

    /// Sets the paragraph formatting by copying another paragraph formatting object.
    /// - Parameter format: The paragraph formatting to apply.
    func setClone(_ format: WindowsUIText_ITextParagraphFormat?) throws

    /// Sets the first-line indent, the left indent, and the right indent for a paragraph.
    /// - Parameter start: The indent of the first line in a paragraph, relative to the left indent. The value is in floating-point points and can be positive or negative.
    /// - Parameter left: The left indent of all lines except the first line in a paragraph, relative to the left margin. The value is in floating-point points and can be positive or negative.
    /// - Parameter right: The right indent of all lines in a paragraph, relative to the right margin. The value is in floating-point points and can be positive or negative. This value is optional.
    func setIndents(_ start: Swift.Float, _ left: Swift.Float, _ right: Swift.Float) throws

    /// Sets the paragraph line-spacing rule and the amount of line spacing for a paragraph.
    /// - Parameter rule: The new line-spacing rule.
    /// - Parameter spacing: The new line spacing amount. If the line-spacing *rule* interprets the *spacing* value as a linear dimension, *spacing* is given in floating-point points.
    func setLineSpacing(_ rule: WindowsUIText_LineSpacingRule, _ spacing: Swift.Float) throws
}

/// Defines the default paragraph formatting attributes of a document, or the current paragraph formatting attributes of a text range.
public typealias WindowsUIText_ITextParagraphFormat = any WindowsUIText_ITextParagraphFormatProtocol