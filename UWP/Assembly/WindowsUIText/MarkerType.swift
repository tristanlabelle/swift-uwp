// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the kind of characters used to mark the item paragraphs in a list.
public struct WindowsUIText_MarkerType: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// The list type is not defined.
    public static let undefined = Self()

    /// Not a list paragraph.
    public static let none = Self(rawValue: 1)

    /// The list uses bullets (character code 0x2022).
    public static let bullet = Self(rawValue: 2)

    /// The list is numbered with Arabic numerals (0, 1, 2, ...).
    public static let arabic = Self(rawValue: 3)

    /// The list is ordered with lowercase letters (a, b, c, ...).
    public static let lowercaseEnglishLetter = Self(rawValue: 4)

    /// The list is ordered with uppercase letters (A, B, C, ...).
    public static let uppercaseEnglishLetter = Self(rawValue: 5)

    /// The list is ordered with lowercase Roman letters (i, ii, iii, ...).
    public static let lowercaseRoman = Self(rawValue: 6)

    /// The list is ordered with uppercase Roman letters (I, II, III, ...).
    public static let uppercaseRoman = Self(rawValue: 7)

    /// The value returned by ITextParagraphFormat.ListStart is treated as the first code in a Unicode sequence.
    public static let unicodeSequence = Self(rawValue: 8)

    /// The list is ordered with Unicode circled numbers <img alt="Unicode numbers in a circle." src="./windows.ui.text/images/unicodecirclednumbers.png" />
    public static let circledNumber = Self(rawValue: 9)

    /// The list is ordered with Wingdings black circled digits <img alt="Circled black digits." src="./windows.ui.text/images/wingdingblackcircleddigits.png" />
    public static let blackCircleWingding = Self(rawValue: 10)

    /// The list is ordered with Wingdings white circled digits <img alt="White digits in a black circle." src="./windows.ui.text/images/wingdingwhitecircleddigits.png" />
    public static let whiteCircleWingding = Self(rawValue: 11)

    /// Full-width ASCII (０, １, ２, ３, …).
    public static let arabicWide = Self(rawValue: 12)

    /// Chinese with 十 only in items 10 through 99 (一, 二, 三, 四, …).
    public static let simplifiedChinese = Self(rawValue: 13)

    /// Chinese with 十 only in items 10 through 19.
    public static let traditionalChinese = Self(rawValue: 14)

    /// Chinese with a full-width period, no 十.
    public static let japanSimplifiedChinese = Self(rawValue: 15)

    /// Chinese with no 十.
    public static let japanKorea = Self(rawValue: 16)

    /// Arabic alphabetic ( أ ,ب ,ت ,ث ,…).
    public static let arabicDictionary = Self(rawValue: 17)

    /// Arabic abjadi ( أ ,ب ,ج ,د ,…).
    public static let arabicAbjad = Self(rawValue: 18)

    /// Hebrew alphabet (א, ב, ג, ד, …).
    public static let hebrew = Self(rawValue: 19)

    /// Thai alphabetic (ก, ข,ค, ง, …).
    public static let thaiAlphabetic = Self(rawValue: 20)

    /// Thai numbers (๑, ๒,๓, ๔, …).
    public static let thaiNumeric = Self(rawValue: 21)

    /// Devanāgarī vowels (अ, आ, इ, ई, …).
    public static let devanagariVowel = Self(rawValue: 22)

    /// Devanāgarī consonants (क, ख, ग, घ, …).
    public static let devanagariConsonant = Self(rawValue: 23)

    /// Devanāgarī numbers (१, २, ३, ४, …).
    public static let devanagariNumeric = Self(rawValue: 24)
}