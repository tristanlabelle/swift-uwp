// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a timed metadata track. The track contains a list of IMediaCue objects and raises events at the beginning and end of the time window of each cue.
public final class WindowsMediaCore_TimedMetadataTrack: WindowsRuntime.WinRTImport<WindowsMediaCore_TimedMetadataTrackProjection>, WindowsMediaCore_IMediaTrackProtocol {
    // MARK: Windows.Media.Core.ITimedMetadataTrackFactory members

    public convenience init(_ id: Swift.String, _ language: Swift.String, _ kind: WindowsMediaCore_TimedMetadataKind) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._itimedMetadataTrackFactory.create(id, language, kind)))
    }

    // MARK: Windows.Media.Core.ITimedMetadataTrack members

    /// Gets the list of media cues in the TimedMetadataTrack that are currently active. A cue is considered active after its StartTime has been reached until its Duration has been exceeded.
    /// - Returns: The list of media cues in the TimedMetadataTrack that are currently active.
    public var activeCues: WindowsFoundationCollections_IVectorView<WindowsMediaCore_IMediaCue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ActiveCues())
        }
    }

    /// Gets a read-only list of the media cues in the TimedMetadataTrack.
    /// - Returns: A read-only list of the media cues in the timed metadata track.
    public var cues: WindowsFoundationCollections_IVectorView<WindowsMediaCore_IMediaCue?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Cues())
        }
    }

    /// Gets the custom string value containing routing information for cues.
    /// - Returns: The custom string value containing routing information for cues.
    public var dispatchType: Swift.String {
        get throws {
            try _interop.get_DispatchType()
        }
    }

    /// Gets a value indicating the kind of metadata contained in the track.
    /// - Returns: A value indicating the kind of metadata contained in the track.
    public var timedMetadataKind: WindowsMediaCore_TimedMetadataKind {
        get throws {
            try _interop.get_TimedMetadataKind()
        }
    }

    /// Occurs when a media time window of a media cue is entered. The time window is defined by the StartTime and Duration of the cue.
    public func cueEntered(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_TimedMetadataTrack?, WindowsMediaCore_MediaCueEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CueEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cueEntered)
    }

    public func cueEntered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CueEntered(token)
    }

    /// Occurs when a media time window of a media cue is exited. The time window is defined by the StartTime and Duration of the cue.
    public func cueExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_TimedMetadataTrack?, WindowsMediaCore_MediaCueEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CueExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cueExited)
    }

    public func cueExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CueExited(token)
    }

    /// Raised when an error occurs with the TimedMetadataTrack.
    public func trackFailed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_TimedMetadataTrack?, WindowsMediaCore_TimedMetadataTrackFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TrackFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: trackFailed)
    }

    public func trackFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TrackFailed(token)
    }

    /// Adds the specified media cue to the TimedMetadataTrack.
    /// - Parameter cue: The media cue to add.
    public func addCue(_ cue: WindowsMediaCore_IMediaCue?) throws {
        try _interop.addCue(cue)
    }

    /// Removes the specified media cue from the TimedMetadataTrack.
    /// - Parameter cue: The media cue to remove.
    public func removeCue(_ cue: WindowsMediaCore_IMediaCue?) throws {
        try _interop.removeCue(cue)
    }

    // MARK: Windows.Media.Core.IMediaTrack members

    /// Gets the identifier for the timed metadata track.
    /// - Returns: The identifier for the track.
    public var id: Swift.String {
        get throws {
            try _imediaTrack.get_Id()
        }
    }

    /// Gets or sets the label for the timed metadata track.
    /// - Returns: The label for the timed metadata track.
    public var label: Swift.String {
        get throws {
            try _imediaTrack.get_Label()
        }
    }

    /// Gets or sets the label for the timed metadata track.
    /// - Returns: The label for the timed metadata track.
    public func label(_ value: Swift.String) throws {
        try _imediaTrack.put_Label(value)
    }

    /// Gets a string indicating the language of the timed metadata track.
    /// - Returns: A string indicating the language of the timed metadata track.
    public var language: Swift.String {
        get throws {
            try _imediaTrack.get_Language()
        }
    }

    /// Gets a value specifying the type of the media track. For TimedMetadataTrack this value will always be MediaTrackKind.TimedMetadata.
    /// - Returns: A value specifying the type of the media track.
    public var trackKind: WindowsMediaCore_MediaTrackKind {
        get throws {
            try _imediaTrack.get_TrackKind()
        }
    }

    // MARK: Windows.Media.Core.ITimedMetadataTrack2 members

    /// Gets the name of the TimedMetadataTrack.
    /// - Returns: The name of the TimedMetadataTrack.
    public var name: Swift.String {
        get throws {
            try _itimedMetadataTrack2.get_Name()
        }
    }

    /// Gets the MediaPlaybackItem containing the TimedMetadataTrack.
    /// - Returns: The MediaPlaybackItem containing the TimedMetadataTrack.
    public var playbackItem: WindowsMediaPlayback_MediaPlaybackItem {
        get throws {
            try COM.NullResult.unwrap(_itimedMetadataTrack2.get_PlaybackItem())
        }
    }

    // MARK: Implementation details

    private var _imediaTrack_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaTrack>? = nil

    internal var _imediaTrack: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaTrack> {
        get throws {
            try _imediaTrack_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaTrack.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaTrack.self)
            }
        }
    }

    private var _itimedMetadataTrack2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrack2>? = nil

    internal var _itimedMetadataTrack2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrack2> {
        get throws {
            try _itimedMetadataTrack2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrack2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrack2.self)
            }
        }
    }

    deinit {
        _imediaTrack_storage?.release()
        _itimedMetadataTrack2_storage?.release()
    }

    private static var _itimedMetadataTrackFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackFactory>? = nil

    internal static var _itimedMetadataTrackFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackFactory> {
        get throws {
            try _itimedMetadataTrackFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.TimedMetadataTrack", id: CWinRT.SWRT_WindowsMediaCore_ITimedMetadataTrackFactory.iid)
            }
        }
    }
}