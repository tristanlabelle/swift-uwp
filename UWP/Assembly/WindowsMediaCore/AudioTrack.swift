// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an audio track.
public final class WindowsMediaCore_AudioTrack: WindowsRuntime.WinRTImport<WindowsMediaCore_AudioTrackProjection>, WindowsMediaCore_IMediaTrackProtocol {
    // MARK: Windows.Media.Core.IMediaTrack members

    /// Gets the identifier for the audio track.
    /// - Returns: The identifier for the audio track.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets the label for the audio track.
    /// - Returns: The label for the audio track.
    public var label: Swift.String {
        get throws {
            try _interop.get_Label()
        }
    }

    /// Gets or sets the label for the audio track.
    /// - Returns: The label for the audio track.
    public func label(_ value: Swift.String) throws {
        try _interop.put_Label(value)
    }

    /// Gets a string indicating the language of the audio track.
    /// - Returns: A string indicating the language of the audio track.
    public var language: Swift.String {
        get throws {
            try _interop.get_Language()
        }
    }

    /// Gets a value indicating the type of data the track contains. For AudioTrack objects, this value is always MediaTrackKind.Audio.
    /// - Returns: A value indicating the type of data the track contains.
    public var trackKind: WindowsMediaCore_MediaTrackKind {
        get throws {
            try _interop.get_TrackKind()
        }
    }

    // MARK: Windows.Media.Core.IAudioTrack members

    /// Gets the name of the AudioTrack.
    /// - Returns: The name of the AudioTrack.
    public var name: Swift.String {
        get throws {
            try _iaudioTrack.get_Name()
        }
    }

    /// Gets the MediaPlaybackItem containing the AudioTrack.
    /// - Returns: The MediaPlaybackItem containing the AudioTrack.
    public var playbackItem: WindowsMediaPlayback_MediaPlaybackItem {
        get throws {
            try COM.NullResult.unwrap(_iaudioTrack.get_PlaybackItem())
        }
    }

    /// Gets support information for the AudioTrack. This information includes the status of the audio decoder, information about any audio degradation applied by the decoder, and the status of the MediaSource with which the audio track is associated.
    /// - Returns: The support information for the AudioTrack.
    public var supportInfo: WindowsMediaCore_AudioTrackSupportInfo {
        get throws {
            try COM.NullResult.unwrap(_iaudioTrack.get_SupportInfo())
        }
    }

    /// Occurs when an AudioTrack fails to open.
    public func openFailed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_AudioTrack?, WindowsMediaCore_AudioTrackOpenFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iaudioTrack.add_OpenFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: openFailed)
    }

    public func openFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iaudioTrack.remove_OpenFailed(token)
    }

    /// Gets the audio encoding properties for an AudioTrack.
    /// - Returns: The audio encoding properties of the AudioTrack.
    public func getEncodingProperties() throws -> WindowsMediaMediaProperties_AudioEncodingProperties {
        try COM.NullResult.unwrap(_iaudioTrack.getEncodingProperties())
    }

    // MARK: Implementation details

    private var _iaudioTrack_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioTrack>? = nil

    internal var _iaudioTrack: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioTrack> {
        get throws {
            try _iaudioTrack_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IAudioTrack.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IAudioTrack.self)
            }
        }
    }

    deinit {
        _iaudioTrack_storage?.release()
    }
}