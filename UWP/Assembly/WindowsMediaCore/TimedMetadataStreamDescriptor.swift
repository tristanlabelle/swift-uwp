// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a description a timed metada media stream.
public final class WindowsMediaCore_TimedMetadataStreamDescriptor: WindowsRuntime.WinRTImport<WindowsMediaCore_TimedMetadataStreamDescriptorProjection>, WindowsMediaCore_IMediaStreamDescriptor2Protocol, WindowsMediaCore_IMediaStreamDescriptorProtocol {
    // MARK: Windows.Media.Core.ITimedMetadataStreamDescriptorFactory members

    public convenience init(_ encodingProperties: WindowsMediaMediaProperties_TimedMetadataEncodingProperties?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._itimedMetadataStreamDescriptorFactory.create(encodingProperties)))
    }

    // MARK: Windows.Media.Core.IMediaStreamDescriptor members

    /// Gets a value indicating whether the stream is currently in use by a MediaStreamSource.
    /// - Returns: **true** if the stream is currently in use by a MediaStreamSource; otherwise, **false**.
    public var isSelected: Swift.Bool {
        get throws {
            try _interop.get_IsSelected()
        }
    }

    /// Gets or sets the RFC-1766 language code for the stream.
    /// - Returns: The RFC-1766 language code for the stream.
    public var language: Swift.String {
        get throws {
            try _interop.get_Language()
        }
    }

    /// Gets or sets the RFC-1766 language code for the stream.
    /// - Returns: The RFC-1766 language code for the stream.
    public func language(_ value: Swift.String) throws {
        try _interop.put_Language(value)
    }

    /// Gets or sets the name of the stream.
    /// - Returns: The name of the stream.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets or sets the name of the stream.
    /// - Returns: The name of the stream.
    public func name(_ value: Swift.String) throws {
        try _interop.put_Name(value)
    }

    // MARK: Windows.Media.Core.ITimedMetadataStreamDescriptor members

    /// Gets an object describing the encoding properties for the timed metadata stream.
    /// - Returns: The encoding properties on the timed metadata stream.
    public var encodingProperties: WindowsMediaMediaProperties_TimedMetadataEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_itimedMetadataStreamDescriptor.get_EncodingProperties())
        }
    }

    /// Creates a copy of the TimedMetadataStreamDescriptor.
    /// - Returns: A copy of the TimedMetadataStreamDescriptor.
    public func copy() throws -> WindowsMediaCore_TimedMetadataStreamDescriptor {
        try COM.NullResult.unwrap(_itimedMetadataStreamDescriptor.copy())
    }

    // MARK: Windows.Media.Core.IMediaStreamDescriptor2 members

    /// Gets or sets an app-defined label that identifies a timed metadata stream in a MediaEncodingProfile that contains multiple streams.
    /// - Returns: An app-defined label that identifies a timed metadata stream.
    public var label: Swift.String {
        get throws {
            try _imediaStreamDescriptor2.get_Label()
        }
    }

    /// Gets or sets an app-defined label that identifies a timed metadata stream in a MediaEncodingProfile that contains multiple streams.
    /// - Returns: An app-defined label that identifies a timed metadata stream.
    public func label(_ value: Swift.String) throws {
        try _imediaStreamDescriptor2.put_Label(value)
    }

    // MARK: Implementation details

    private var _itimedMetadataStreamDescriptor_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptor>? = nil

    internal var _itimedMetadataStreamDescriptor: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptor> {
        get throws {
            try _itimedMetadataStreamDescriptor_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptor.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptor.self)
            }
        }
    }

    private var _imediaStreamDescriptor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2>? = nil

    internal var _imediaStreamDescriptor2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2> {
        get throws {
            try _imediaStreamDescriptor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2.self)
            }
        }
    }

    deinit {
        _itimedMetadataStreamDescriptor_storage?.release()
        _imediaStreamDescriptor2_storage?.release()
    }

    private static var _itimedMetadataStreamDescriptorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptorFactory>? = nil

    internal static var _itimedMetadataStreamDescriptorFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptorFactory> {
        get throws {
            try _itimedMetadataStreamDescriptorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.TimedMetadataStreamDescriptor", id: CWinRT.SWRT_WindowsMediaCore_ITimedMetadataStreamDescriptorFactory.iid)
            }
        }
    }
}