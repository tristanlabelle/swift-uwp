// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a media source that delivers media samples directly to the media pipeline.
public final class WindowsMediaCore_MediaStreamSource: WindowsRuntime.WinRTImport<WindowsMediaCore_MediaStreamSourceProjection>, WindowsMediaCore_IMediaSourceProtocol {
    // MARK: Windows.Media.Core.IMediaStreamSourceFactory members

    public convenience init(_ descriptor: WindowsMediaCore_IMediaStreamDescriptor?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imediaStreamSourceFactory.createFromDescriptor(descriptor)))
    }

    public convenience init(_ descriptor: WindowsMediaCore_IMediaStreamDescriptor?, _ descriptor2: WindowsMediaCore_IMediaStreamDescriptor?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imediaStreamSourceFactory.createFromDescriptors(descriptor, descriptor2)))
    }

    // MARK: Windows.Media.Core.IMediaStreamSource members

    /// Gets or sets the amount of data that is buffered by the MediaStreamSource.
    /// - Returns: The duration of the buffer which corresponds to the number of MediaStreamSamples the MediaStreamSource requests. The default value is 3 seconds.
    public var bufferTime: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_BufferTime()
        }
    }

    /// Gets or sets the amount of data that is buffered by the MediaStreamSource.
    /// - Returns: The duration of the buffer which corresponds to the number of MediaStreamSamples the MediaStreamSource requests. The default value is 3 seconds.
    public func bufferTime(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_BufferTime(value)
    }

    /// Gets or sets whether or not the application supports changing its position in the media time-line.
    /// - Returns: **true** if the application supports changing its position in the media time-line; otherwise, **false**. The default value is **false**.
    public var canSeek: Swift.Bool {
        get throws {
            try _interop.get_CanSeek()
        }
    }

    /// Gets or sets whether or not the application supports changing its position in the media time-line.
    /// - Returns: **true** if the application supports changing its position in the media time-line; otherwise, **false**. The default value is **false**.
    public func canSeek(_ value: Swift.Bool) throws {
        try _interop.put_CanSeek(value)
    }

    /// Gets or sets the duration of the media time-line.
    /// - Returns: The duration of the media time-line. The default value is 0.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets the duration of the media time-line.
    /// - Returns: The duration of the media time-line. The default value is 0.
    public func duration(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Duration(value)
    }

    /// Gets or sets the Digital Rights Management (DRM)MediaProtectionManager used to protect the media.
    /// - Returns: The media protection manager.
    public var mediaProtectionManager: WindowsMediaProtection_MediaProtectionManager {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaProtectionManager())
        }
    }

    /// Gets or sets the Digital Rights Management (DRM)MediaProtectionManager used to protect the media.
    /// - Returns: The media protection manager.
    public func mediaProtectionManager(_ value: WindowsMediaProtection_MediaProtectionManager?) throws {
        try _interop.put_MediaProtectionManager(value)
    }

    /// Gets the music properties which are used for music-related metadata.
    /// - Returns: The music properties.
    public var musicProperties: WindowsStorageFileProperties_MusicProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MusicProperties())
        }
    }

    /// Gets or sets the thumbnail which is a reference to a stream for a video thumbnail image or music album art.
    /// - Returns: The reference to the thumbnail stream.
    public var thumbnail: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Thumbnail())
        }
    }

    /// Gets or sets the thumbnail which is a reference to a stream for a video thumbnail image or music album art.
    /// - Returns: The reference to the thumbnail stream.
    public func thumbnail(_ value: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _interop.put_Thumbnail(value)
    }

    /// Gets the video properties which are used for video related metadata.
    /// - Returns: The video properties.
    public var videoProperties: WindowsStorageFileProperties_VideoProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoProperties())
        }
    }

    /// Occurs when the MediaStreamSource is shutting down.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsMediaCore_MediaStreamSourceClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Occurs when the MediaStreamSource is paused and stops requesting MediaStreamSample objects for an unspecified period of time, but is expected to resume requesting MediaStreamSample objects from the current position.
    public func paused(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Paused(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paused)
    }

    public func paused(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Paused(token)
    }

    /// Occurs when the MediaStreamSource request a MediaStreamSample for a specified stream.
    public func sampleRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsMediaCore_MediaStreamSourceSampleRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SampleRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sampleRequested)
    }

    public func sampleRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SampleRequested(token)
    }

    /// Occurs when the MediaStreamSource is ready to start requesting MediaStreamSample objects. The event can specify a position in the media time-line from which the first MediaStreamSample should be delivered.
    public func starting(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsMediaCore_MediaStreamSourceStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Starting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: starting)
    }

    public func starting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Starting(token)
    }

    /// Occurs when the MediaStreamSource will stop requesting MediaStreamSample objects for a certain stream and will start requesting MediaStreamSample objects from a different stream instead.
    public func switchStreamsRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsMediaCore_MediaStreamSourceSwitchStreamsRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SwitchStreamsRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: switchStreamsRequested)
    }

    public func switchStreamsRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SwitchStreamsRequested(token)
    }

    /// Notifies the MediaStreamSource that an error has occurred which is preventing the application from continuing to deliver data to the MediaStreamSource.
    /// - Parameter errorStatus: The cause of the error.
    public func notifyError(_ errorStatus: WindowsMediaCore_MediaStreamSourceErrorStatus) throws {
        try _interop.notifyError(errorStatus)
    }

    /// Adds a new stream descriptor to the MediaStreamSource.
    /// - Parameter descriptor: The descriptor to add.
    public func addStreamDescriptor(_ descriptor: WindowsMediaCore_IMediaStreamDescriptor?) throws {
        try _interop.addStreamDescriptor(descriptor)
    }

    /// Sets the range of data that the application is currently buffering.
    /// - Parameter startOffset: The smallest time stamp of a MediaStreamSample buffered by the application.
    /// - Parameter endOffset: The largest time stamp of a MediaStreamSample buffered by the application.
    public func setBufferedRange(_ startOffset: WindowsFoundation_TimeSpan, _ endOffset: WindowsFoundation_TimeSpan) throws {
        try _interop.setBufferedRange(startOffset, endOffset)
    }

    /// Adds a Digital Rights Management (DRM) protection key which is used by the MediaProtectionManager to encrypt and decrypt the specified stream.
    /// - Parameter streamDescriptor: The stream the key is used to encrypt and decrypt.
    /// - Parameter keyIdentifier: The key used to encrypt and decrypt the stream.
    /// - Parameter licenseData: The Digital Rights Management (DRM) licence for the media.
    public func addProtectionKey(_ streamDescriptor: WindowsMediaCore_IMediaStreamDescriptor?, _ keyIdentifier: [Swift.UInt8], _ licenseData: [Swift.UInt8]) throws {
        try _interop.addProtectionKey(streamDescriptor, keyIdentifier, licenseData)
    }

    // MARK: Windows.Media.Core.IMediaStreamSource2 members

    /// Occurs when a sample from the MediaStreamSource is rendered.
    public func sampleRendered(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaStreamSource?, WindowsMediaCore_MediaStreamSourceSampleRenderedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaStreamSource2.add_SampleRendered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sampleRendered)
    }

    public func sampleRendered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaStreamSource2.remove_SampleRendered(token)
    }

    // MARK: Windows.Media.Core.IMediaStreamSource3 members

    /// Gets the maxiumum supported playback rate for the **MediaStreamSource**.
    /// - Returns: The maxiumum supported playback rate for the **MediaStreamSource**.
    public var maxSupportedPlaybackRate: Swift.Double? {
        get throws {
            try _imediaStreamSource3.get_MaxSupportedPlaybackRate()
        }
    }

    /// Gets the maxiumum supported playback rate for the **MediaStreamSource**.
    /// - Returns: The maxiumum supported playback rate for the **MediaStreamSource**.
    public func maxSupportedPlaybackRate(_ value: Swift.Double?) throws {
        try _imediaStreamSource3.put_MaxSupportedPlaybackRate(value)
    }

    // MARK: Windows.Media.Core.IMediaStreamSource4 members

    /// Gets or sets a value indicating whether the media content being processed is live.
    /// - Returns: True if the media content is live; otherwise false.
    public var isLive: Swift.Bool {
        get throws {
            try _imediaStreamSource4.get_IsLive()
        }
    }

    /// Gets or sets a value indicating whether the media content being processed is live.
    /// - Returns: True if the media content is live; otherwise false.
    public func isLive(_ value: Swift.Bool) throws {
        try _imediaStreamSource4.put_IsLive(value)
    }

    // MARK: Implementation details

    private var _imediaSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource>? = nil

    internal var _imediaSource: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource> {
        get throws {
            try _imediaSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaSource.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaSource.self)
            }
        }
    }

    private var _imediaStreamSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource2>? = nil

    internal var _imediaStreamSource2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource2> {
        get throws {
            try _imediaStreamSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource2.self)
            }
        }
    }

    private var _imediaStreamSource3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource3>? = nil

    internal var _imediaStreamSource3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource3> {
        get throws {
            try _imediaStreamSource3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource3.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource3.self)
            }
        }
    }

    private var _imediaStreamSource4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource4>? = nil

    internal var _imediaStreamSource4: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource4> {
        get throws {
            try _imediaStreamSource4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource4.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamSource4.self)
            }
        }
    }

    deinit {
        _imediaSource_storage?.release()
        _imediaStreamSource2_storage?.release()
        _imediaStreamSource3_storage?.release()
        _imediaStreamSource4_storage?.release()
    }

    private static var _imediaStreamSourceFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSourceFactory>? = nil

    internal static var _imediaStreamSourceFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamSourceFactory> {
        get throws {
            try _imediaStreamSourceFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MediaStreamSource", id: CWinRT.SWRT_WindowsMediaCore_IMediaStreamSourceFactory.iid)
            }
        }
    }
}