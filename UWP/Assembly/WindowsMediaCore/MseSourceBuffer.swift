// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a media source extensions (MSE) source buffer.
public final class WindowsMediaCore_MseSourceBuffer: WindowsRuntime.WinRTImport<WindowsMediaCore_MseSourceBufferProjection> {
    // MARK: Windows.Media.Core.IMseSourceBuffer members

    /// Gets and sets the append-window-end interval.
    /// - Returns: The interval value.
    public var appendWindowEnd: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_AppendWindowEnd()
        }
    }

    /// Gets and sets the append-window-end interval.
    /// - Returns: The interval value.
    public func appendWindowEnd(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_AppendWindowEnd(value)
    }

    /// Gets and sets the append-window-start interval.
    /// - Returns: The interval value.
    public var appendWindowStart: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_AppendWindowStart()
        }
    }

    /// Gets and sets the append-window-start interval.
    /// - Returns: The interval value.
    public func appendWindowStart(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_AppendWindowStart(value)
    }

    /// Gets how the MseSourceBuffer object is buffered.
    /// - Returns: The buffered value in terms of a MseTimeRange.
    public var buffered: WindowsFoundationCollections_IVectorView<WindowsMediaCore_MseTimeRange> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Buffered())
        }
    }

    /// Gets a value indicating whether the buffer is updating.
    /// - Returns: True if the buffer is updating; otherwise, false.
    public var isUpdating: Swift.Bool {
        get throws {
            try _interop.get_IsUpdating()
        }
    }

    /// Gets and sets how the MseSourceBuffer object appends a buffer.
    /// - Returns: A MseAppendMode -typed value that specifies how MseSourceBuffer appends a buffer.
    public var mode: WindowsMediaCore_MseAppendMode {
        get throws {
            try _interop.get_Mode()
        }
    }

    /// Gets and sets how the MseSourceBuffer object appends a buffer.
    /// - Returns: A MseAppendMode -typed value that specifies how MseSourceBuffer appends a buffer.
    public func mode(_ value: WindowsMediaCore_MseAppendMode) throws {
        try _interop.put_Mode(value)
    }

    /// Gets and sets the timestamp offset into the MseSourceBuffer object.
    /// - Returns: The timestamp offset value.
    public var timestampOffset: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_TimestampOffset()
        }
    }

    /// Gets and sets the timestamp offset into the MseSourceBuffer object.
    /// - Returns: The timestamp offset value.
    public func timestampOffset(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_TimestampOffset(value)
    }

    /// Occurs when the MseSourceBuffer is aborted.
    public func aborted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseSourceBuffer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Aborted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: aborted)
    }

    public func aborted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Aborted(token)
    }

    /// Occurs when the MseSourceBuffer has an error.
    public func errorOccurred(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseSourceBuffer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ErrorOccurred(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: errorOccurred)
    }

    public func errorOccurred(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ErrorOccurred(token)
    }

    /// Occurs when the MseSourceBuffer update has ended.
    public func updateEnded(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseSourceBuffer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_UpdateEnded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: updateEnded)
    }

    public func updateEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_UpdateEnded(token)
    }

    /// Occurs when the MseSourceBuffer update is starting.
    public func updateStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseSourceBuffer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_UpdateStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: updateStarting)
    }

    public func updateStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_UpdateStarting(token)
    }

    /// Occurs when the MseSourceBuffer is updated.
    public func updated(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseSourceBuffer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Updated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: updated)
    }

    public func updated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Updated(token)
    }

    /// Appends a buffer to the MseSourceBuffer object.
    /// - Parameter buffer: The buffer to append.
    public func appendBuffer(_ buffer: WindowsStorageStreams_IBuffer?) throws {
        try _interop.appendBuffer(buffer)
    }

    /// Appends a stream to the MseSourceBuffer object.
    /// - Parameter stream: The stream to append.
    public func appendStream(_ stream: WindowsStorageStreams_IInputStream?) throws {
        try _interop.appendStream(stream)
    }

    /// Appends a stream to the MseSourceBuffer object.
    /// - Parameter stream: The stream to append.
    /// - Parameter maxSize: The maximum size of the stream.
    public func appendStream(_ stream: WindowsStorageStreams_IInputStream?, _ maxSize: Swift.UInt64) throws {
        try _interop.appendStreamMaxSize(stream, maxSize)
    }

    /// Aborts media source extensions (MSE) source buffer.
    public func abort() throws {
        try _interop.abort()
    }

    public func remove(_ start: WindowsFoundation_TimeSpan, _ end: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.remove(start, end)
    }

    // MARK: Implementation details
}