// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a media source extensions (MSE) stream source.
public final class WindowsMediaCore_MseStreamSource: WindowsRuntime.WinRTImport<WindowsMediaCore_MseStreamSourceProjection>, WindowsMediaCore_IMediaSourceProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaCore_MseStreamSourceProjection.self))
    }

    // MARK: Windows.Media.Core.IMseStreamSource members

    /// Gets the list of media source extensions (MSE) source buffers that are active on the stream source.
    /// - Returns: The list of MSE source buffers that are active.
    public var activeSourceBuffers: WindowsMediaCore_MseSourceBufferList {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ActiveSourceBuffers())
        }
    }

    /// Gets and sets the duration of the stream source.
    /// - Returns: The duration of the stream source.
    public var duration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets and sets the duration of the stream source.
    /// - Returns: The duration of the stream source.
    public func duration(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_Duration(value)
    }

    /// Gets a value that specifies the ready state of the MseStreamSource.
    /// - Returns: A MseReadyState -typed value that specifies the ready state of the MseStreamSource.
    public var readyState: WindowsMediaCore_MseReadyState {
        get throws {
            try _interop.get_ReadyState()
        }
    }

    /// Gets the list of media source extensions (MSE) source buffers on the stream source.
    /// - Returns: The list of MSE source buffers.
    public var sourceBuffers: WindowsMediaCore_MseSourceBufferList {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SourceBuffers())
        }
    }

    /// Occurs when the MseStreamSource is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseStreamSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Occurs when the MseStreamSource is ended.
    public func ended(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseStreamSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Ended(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: ended)
    }

    public func ended(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Ended(token)
    }

    /// Occurs when the MseStreamSource is opened.
    public func opened(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MseStreamSource?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Opened(token)
    }

    /// Adds a source buffer to the stream source.
    /// - Parameter mimeType: A string that describes the source buffer's MIME type.
    /// - Returns: The MseSourceBuffer object for the source buffer added.
    public func addSourceBuffer(_ mimeType: Swift.String) throws -> WindowsMediaCore_MseSourceBuffer {
        try COM.NullResult.unwrap(_interop.addSourceBuffer(mimeType))
    }

    /// Removes a source buffer from the stream source.
    /// - Parameter buffer: The MseSourceBuffer object for the source buffer removed.
    public func removeSourceBuffer(_ buffer: WindowsMediaCore_MseSourceBuffer?) throws {
        try _interop.removeSourceBuffer(buffer)
    }

    /// Specifies the status at the end of stream.
    /// - Parameter status: A MseEndOfStreamStatus -typed value that specifies the status at the end of stream.
    public func endOfStream(_ status: WindowsMediaCore_MseEndOfStreamStatus) throws {
        try _interop.endOfStream(status)
    }

    // MARK: Windows.Media.Core.IMseStreamSource2 members

    /// Gets or sets the seekable time range for a Media Source Extension.
    /// - Returns: The time range within which the user can seek during media playback.
    public var liveSeekableRange: WindowsFoundation_IReference<WindowsMediaCore_MseTimeRange>? {
        get throws {
            try _imseStreamSource2.get_LiveSeekableRange()
        }
    }

    /// Gets or sets the seekable time range for a Media Source Extension.
    /// - Returns: The time range within which the user can seek during media playback.
    public func liveSeekableRange(_ value: WindowsFoundation_IReference<WindowsMediaCore_MseTimeRange>?) throws {
        try _imseStreamSource2.put_LiveSeekableRange(value)
    }

    // MARK: Windows.Media.Core.IMseStreamSourceStatics members

    /// Specifies whether a content type is supported.
    /// - Parameter contentType: A string that describes the content type.
    /// - Returns: **true** if the content type specified by *contentType* is supported; otherwise, **false**.
    public static func isContentTypeSupported(_ contentType: Swift.String) throws -> Swift.Bool {
        try _imseStreamSourceStatics.isContentTypeSupported(contentType)
    }

    // MARK: Implementation details

    private var _imediaSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource>? = nil

    internal var _imediaSource: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource> {
        get throws {
            try _imediaSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaSource.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaSource.self)
            }
        }
    }

    private var _imseStreamSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMseStreamSource2>? = nil

    internal var _imseStreamSource2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMseStreamSource2> {
        get throws {
            try _imseStreamSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMseStreamSource2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMseStreamSource2.self)
            }
        }
    }

    deinit {
        _imediaSource_storage?.release()
        _imseStreamSource2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MseStreamSource", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imseStreamSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMseStreamSourceStatics>? = nil

    internal static var _imseStreamSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMseStreamSourceStatics> {
        get throws {
            try _imseStreamSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MseStreamSource", id: CWinRT.SWRT_WindowsMediaCore_IMseStreamSourceStatics.iid)
            }
        }
    }
}