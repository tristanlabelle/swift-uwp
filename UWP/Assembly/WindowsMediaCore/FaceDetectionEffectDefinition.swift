// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the definition of a face detection video effect.
public final class WindowsMediaCore_FaceDetectionEffectDefinition: WindowsRuntime.WinRTImport<WindowsMediaCore_FaceDetectionEffectDefinitionProjection>, WindowsMediaEffects_IVideoEffectDefinitionProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaCore_FaceDetectionEffectDefinitionProjection.self))
    }

    // MARK: Windows.Media.Effects.IVideoEffectDefinition members

    /// Gets a string containing the activatable class ID of the face detection effect definition.
    /// - Returns: The activatable class ID of the face detection effect definition.
    public var activatableClassId: Swift.String {
        get throws {
            try _interop.get_ActivatableClassId()
        }
    }

    /// Gets the set of properties for configuring the FaceDetectionEffectDefinition object.
    /// - Returns: The set of properties for configuring the FaceDetectionEffectDefinition object.
    public var properties: WindowsFoundationCollections_IPropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    // MARK: Windows.Media.Core.IFaceDetectionEffectDefinition members

    /// Gets or sets a value that prioritizes the speed of face detection and the quality of detection results.
    /// - Returns: A value that prioritizes the speed of face detection and the quality of detection results.
    public var detectionMode: WindowsMediaCore_FaceDetectionMode {
        get throws {
            try _ifaceDetectionEffectDefinition.get_DetectionMode()
        }
    }

    /// Gets or sets a value that prioritizes the speed of face detection and the quality of detection results.
    /// - Returns: A value that prioritizes the speed of face detection and the quality of detection results.
    public func detectionMode(_ value: WindowsMediaCore_FaceDetectionMode) throws {
        try _ifaceDetectionEffectDefinition.put_DetectionMode(value)
    }

    /// Gets or sets a value indicating whether synchronous face detection is enabled.
    /// - Returns: True if synchronous face detection is enabled; otherwise, false.
    public var synchronousDetectionEnabled: Swift.Bool {
        get throws {
            try _ifaceDetectionEffectDefinition.get_SynchronousDetectionEnabled()
        }
    }

    /// Gets or sets a value indicating whether synchronous face detection is enabled.
    /// - Returns: True if synchronous face detection is enabled; otherwise, false.
    public func synchronousDetectionEnabled(_ value: Swift.Bool) throws {
        try _ifaceDetectionEffectDefinition.put_SynchronousDetectionEnabled(value)
    }

    // MARK: Implementation details

    private var _ifaceDetectionEffectDefinition_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IFaceDetectionEffectDefinition>? = nil

    internal var _ifaceDetectionEffectDefinition: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IFaceDetectionEffectDefinition> {
        get throws {
            try _ifaceDetectionEffectDefinition_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IFaceDetectionEffectDefinition.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IFaceDetectionEffectDefinition.self)
            }
        }
    }

    deinit {
        _ifaceDetectionEffectDefinition_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.FaceDetectionEffectDefinition", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}