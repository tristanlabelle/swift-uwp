// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a description an audio media stream.
public final class WindowsMediaCore_AudioStreamDescriptor: WindowsRuntime.WinRTImport<WindowsMediaCore_AudioStreamDescriptorProjection>, WindowsMediaCore_IMediaStreamDescriptorProtocol, WindowsMediaCore_IMediaStreamDescriptor2Protocol {
    // MARK: Windows.Media.Core.IAudioStreamDescriptorFactory members

    public convenience init(_ encodingProperties: WindowsMediaMediaProperties_AudioEncodingProperties?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iaudioStreamDescriptorFactory.create(encodingProperties)))
    }

    // MARK: Windows.Media.Core.IAudioStreamDescriptor members

    /// Gets an object describing the encoding properties for the audio stream. These properties include the sample rate and channel count of the audio.
    /// - Returns: The encoding properties on the audio stream.
    public var encodingProperties: WindowsMediaMediaProperties_AudioEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_EncodingProperties())
        }
    }

    // MARK: Windows.Media.Core.IMediaStreamDescriptor members

    /// Gets a value indicating whether the stream is currently in use by a MediaStreamSource.
    /// - Returns: **true** if the stream is currently in use by a MediaStreamSource; otherwise, **false**.
    public var isSelected: Swift.Bool {
        get throws {
            try _imediaStreamDescriptor.get_IsSelected()
        }
    }

    /// Gets or sets the RFC-1766 language code for the stream.
    /// - Returns: The RFC-1766 language code for the stream.
    public var language: Swift.String {
        get throws {
            try _imediaStreamDescriptor.get_Language()
        }
    }

    /// Gets or sets the RFC-1766 language code for the stream.
    /// - Returns: The RFC-1766 language code for the stream.
    public func language(_ value: Swift.String) throws {
        try _imediaStreamDescriptor.put_Language(value)
    }

    /// Gets or sets the name of the stream.
    /// - Returns: The name of the stream.
    public var name: Swift.String {
        get throws {
            try _imediaStreamDescriptor.get_Name()
        }
    }

    /// Gets or sets the name of the stream.
    /// - Returns: The name of the stream.
    public func name(_ value: Swift.String) throws {
        try _imediaStreamDescriptor.put_Name(value)
    }

    // MARK: Windows.Media.Core.IAudioStreamDescriptor2 members

    /// Gets or sets the number of samples inserted at the beginning of the audio stream by the encoder as padding. Use this property to explicitly set the padding size the system will use to implement gapless playback for the audio stream.
    /// - Returns: The number of samples inserted at the beginning of the audio stream by the encoder as padding.
    public var leadingEncoderPadding: Swift.UInt32? {
        get throws {
            try _iaudioStreamDescriptor2.get_LeadingEncoderPadding()
        }
    }

    /// Gets or sets the number of samples inserted at the beginning of the audio stream by the encoder as padding. Use this property to explicitly set the padding size the system will use to implement gapless playback for the audio stream.
    /// - Returns: The number of samples inserted at the beginning of the audio stream by the encoder as padding.
    public func leadingEncoderPadding(_ value: Swift.UInt32?) throws {
        try _iaudioStreamDescriptor2.put_LeadingEncoderPadding(value)
    }

    /// Gets or sets the number of samples inserted at the end of the audio stream by the encoder as padding. Use this property to explicitly set the padding size the system will use to implement gapless playback for the audio stream.
    /// - Returns: The number of samples inserted at the end of the audio stream by the encoder as padding.
    public var trailingEncoderPadding: Swift.UInt32? {
        get throws {
            try _iaudioStreamDescriptor2.get_TrailingEncoderPadding()
        }
    }

    /// Gets or sets the number of samples inserted at the end of the audio stream by the encoder as padding. Use this property to explicitly set the padding size the system will use to implement gapless playback for the audio stream.
    /// - Returns: The number of samples inserted at the end of the audio stream by the encoder as padding.
    public func trailingEncoderPadding(_ value: Swift.UInt32?) throws {
        try _iaudioStreamDescriptor2.put_TrailingEncoderPadding(value)
    }

    // MARK: Windows.Media.Core.IMediaStreamDescriptor2 members

    /// Gets or sets an app-defined label that identifies an audio stream in a MediaEncodingProfile that contains multiple streams.
    /// - Returns: An app-defined label that identifies an audio stream
    public var label: Swift.String {
        get throws {
            try _imediaStreamDescriptor2.get_Label()
        }
    }

    /// Gets or sets an app-defined label that identifies an audio stream in a MediaEncodingProfile that contains multiple streams.
    /// - Returns: An app-defined label that identifies an audio stream
    public func label(_ value: Swift.String) throws {
        try _imediaStreamDescriptor2.put_Label(value)
    }

    // MARK: Windows.Media.Core.IAudioStreamDescriptor3 members

    /// Creates a copy of the AudioStreamDescriptor.
    /// - Returns: A copy of the AudioStreamDescriptor.
    public func copy() throws -> WindowsMediaCore_AudioStreamDescriptor {
        try COM.NullResult.unwrap(_iaudioStreamDescriptor3.copy())
    }

    // MARK: Implementation details

    private var _imediaStreamDescriptor_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor>? = nil

    internal var _imediaStreamDescriptor: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor> {
        get throws {
            try _imediaStreamDescriptor_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor.self)
            }
        }
    }

    private var _iaudioStreamDescriptor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor2>? = nil

    internal var _iaudioStreamDescriptor2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor2> {
        get throws {
            try _iaudioStreamDescriptor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor2.self)
            }
        }
    }

    private var _imediaStreamDescriptor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2>? = nil

    internal var _imediaStreamDescriptor2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2> {
        get throws {
            try _imediaStreamDescriptor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaStreamDescriptor2.self)
            }
        }
    }

    private var _iaudioStreamDescriptor3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor3>? = nil

    internal var _iaudioStreamDescriptor3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor3> {
        get throws {
            try _iaudioStreamDescriptor3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor3.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptor3.self)
            }
        }
    }

    deinit {
        _imediaStreamDescriptor_storage?.release()
        _iaudioStreamDescriptor2_storage?.release()
        _imediaStreamDescriptor2_storage?.release()
        _iaudioStreamDescriptor3_storage?.release()
    }

    private static var _iaudioStreamDescriptorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptorFactory>? = nil

    internal static var _iaudioStreamDescriptorFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptorFactory> {
        get throws {
            try _iaudioStreamDescriptorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.AudioStreamDescriptor", id: CWinRT.SWRT_WindowsMediaCore_IAudioStreamDescriptorFactory.iid)
            }
        }
    }
}