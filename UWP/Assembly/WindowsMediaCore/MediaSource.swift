// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a media source. Provides a common way to reference media from different sources and exposes a common model for accessing media data regardless of the underlying media format.
public final class WindowsMediaCore_MediaSource: WindowsRuntime.WinRTImport<WindowsMediaCore_MediaSourceProjection>, WindowsFoundation_IClosableProtocol, WindowsMediaPlayback_IMediaPlaybackSourceProtocol {
    // MARK: Windows.Media.Core.IMediaSource2 members

    /// Gets a set of properties that can be used to associate app-specific data with a MediaSource.
    /// - Returns: A set of properties that can be used to associate app-specific data with a MediaSource.
    public var customProperties: WindowsFoundationCollections_ValueSet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CustomProperties())
        }
    }

    /// Gets the duration of the content in the MediaSource.
    /// - Returns: The duration of the content in the MediaSource.
    public var duration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// A collection of external timed metadata tracks associated with the MediaSource.
    /// - Returns: The collection of external timed metadata tracks.
    public var externalTimedMetadataTracks: WindowsFoundationCollections_IObservableVector<WindowsMediaCore_TimedMetadataTrack?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ExternalTimedMetadataTracks())
        }
    }

    /// A collection of external timed text sources associated with the MediaSource.
    /// - Returns: The collection of external timed text sources.
    public var externalTimedTextSources: WindowsFoundationCollections_IObservableVector<WindowsMediaCore_TimedTextSource?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ExternalTimedTextSources())
        }
    }

    /// Gets a value indicating whether the media source is currently open.
    /// - Returns: True if the media source is open; otherwise, false.
    public var isOpen: Swift.Bool {
        get throws {
            try _interop.get_IsOpen()
        }
    }

    /// Occurs when a MediaSource open operation completes.
    public func openOperationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaSource?, WindowsMediaCore_MediaSourceOpenOperationCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_OpenOperationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: openOperationCompleted)
    }

    public func openOperationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_OpenOperationCompleted(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the MediaSource.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Core.IMediaSource3 members

    /// Gets the current state of the MediaSource.
    /// - Returns: The current state of the MediaSource.
    public var state: WindowsMediaCore_MediaSourceState {
        get throws {
            try _imediaSource3.get_State()
        }
    }

    /// Occurs when the current state of the MediaSource changes.
    public func stateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaSource?, WindowsMediaCore_MediaSourceStateChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaSource3.add_StateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stateChanged)
    }

    public func stateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaSource3.remove_StateChanged(token)
    }

    /// Resets the internal state of the MediaSource.
    public func reset() throws {
        try _imediaSource3.reset()
    }

    // MARK: Windows.Media.Core.IMediaSource4 members

    /// Gets the AdaptiveMediaSource associated with the **MediaSource**.
    /// - Returns: The AdaptiveMediaSource associated with the **MediaSource**.
    public var adaptiveMediaSource: WindowsMediaStreamingAdaptive_AdaptiveMediaSource {
        get throws {
            try COM.NullResult.unwrap(_imediaSource4.get_AdaptiveMediaSource())
        }
    }

    /// Gets the MediaStreamSource associated with the **MediaSource**.
    /// - Returns: The MediaStreamSource associated with the **MediaSource**.
    public var mediaStreamSource: WindowsMediaCore_MediaStreamSource {
        get throws {
            try COM.NullResult.unwrap(_imediaSource4.get_MediaStreamSource())
        }
    }

    /// Gets the MseStreamSource associated with the **MediaSource**.
    /// - Returns: The MseStreamSource associated with the **MediaSource**.
    public var mseStreamSource: WindowsMediaCore_MseStreamSource {
        get throws {
            try COM.NullResult.unwrap(_imediaSource4.get_MseStreamSource())
        }
    }

    /// Gets the URI associated with the **MediaSource**.
    /// - Returns: The URI associated with the **MediaSource**.
    public var uri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_imediaSource4.get_Uri())
        }
    }

    /// opens the backing data source for the **MediaSource** and reads the metadata and track information.
    /// - Returns: An asynchronous action.
    public func openAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_imediaSource4.openAsync())
    }

    // MARK: Windows.Media.Core.IMediaSource5 members

    /// Retrieves the DownloadOperation with which the **MediaSource** is associated
    public var downloadOperation: WindowsNetworkingBackgroundTransfer_DownloadOperation {
        get throws {
            try COM.NullResult.unwrap(_imediaSource5.get_DownloadOperation())
        }
    }

    // MARK: Windows.Media.Core.IMediaSourceStatics members

    /// Creates an instance of MediaSource from the provided AdaptiveMediaSource.
    /// - Parameter mediaSource: The AdaptiveMediaSource from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromAdaptiveMediaSource(_ mediaSource: WindowsMediaStreamingAdaptive_AdaptiveMediaSource?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromAdaptiveMediaSource(mediaSource))
    }

    /// Creates an instance of MediaSource from the provided MediaStreamSource.
    /// - Parameter mediaSource: The MediaStreamSource from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromMediaStreamSource(_ mediaSource: WindowsMediaCore_MediaStreamSource?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromMediaStreamSource(mediaSource))
    }

    /// Creates an instance of MediaSource from the provided MseStreamSource.
    /// - Parameter mediaSource: The MediaStreamSource from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromMseStreamSource(_ mediaSource: WindowsMediaCore_MseStreamSource?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromMseStreamSource(mediaSource))
    }

    /// Creates an instance of MediaSource from the provided IMediaSource.
    /// - Parameter mediaSource: The IMediaSource from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromIMediaSource(_ mediaSource: WindowsMediaCore_IMediaSource?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromIMediaSource(mediaSource))
    }

    /// Creates an instance of MediaSource from the provided IStorageFile.
    /// - Parameter file: The IStorageFile from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromStorageFile(_ file: WindowsStorage_IStorageFile?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromStorageFile(file))
    }

    /// Creates an instance of MediaSource from the provided IRandomAccessStream.
    /// - Parameter stream: The stream from which the MediaSource is created.
    /// - Parameter contentType: The MIME type of the contents of the stream.
    /// - Returns: The new media source.
    public static func createFromStream(_ stream: WindowsStorageStreams_IRandomAccessStream?, _ contentType: Swift.String) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromStream(stream, contentType))
    }

    /// Creates an instance of MediaSource from the provided IRandomAccessStreamReference.
    /// - Parameter stream: The stream reference from which the MediaSource is created.
    /// - Parameter contentType: The MIME type of the contents of the stream.
    /// - Returns: The new media source.
    public static func createFromStreamReference(_ stream: WindowsStorageStreams_IRandomAccessStreamReference?, _ contentType: Swift.String) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromStreamReference(stream, contentType))
    }

    /// Creates an instance of MediaSource from the provided Uri.
    /// - Parameter uri: The URI from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromUri(_ uri: WindowsFoundation_Uri?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics.createFromUri(uri))
    }

    // MARK: Windows.Media.Core.IMediaSourceStatics3 members

    /// Creates an instance of MediaSource from the provided AdaptiveMediaSource.
    /// - Parameter frameSource: The AdaptiveMediaSource from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromMediaFrameSource(_ frameSource: WindowsMediaCaptureFrames_MediaFrameSource?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics3.createFromMediaFrameSource(frameSource))
    }

    // MARK: Windows.Media.Core.IMediaSourceStatics2 members

    /// Creates an instance of MediaSource from the provided MediaBinder.
    /// - Parameter binder: The MediaBinder with which the **MediaSource** is associated.
    /// - Returns: The new media source.
    public static func createFromMediaBinder(_ binder: WindowsMediaCore_MediaBinder?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics2.createFromMediaBinder(binder))
    }

    // MARK: Windows.Media.Core.IMediaSourceStatics4 members

    /// Creates an instance of MediaSource from the provided DownloadOperation.
    /// - Parameter downloadOperation: The DownloadOperation from which the MediaSource is created.
    /// - Returns: The new media source.
    public static func createFromDownloadOperation(_ downloadOperation: WindowsNetworkingBackgroundTransfer_DownloadOperation?) throws -> WindowsMediaCore_MediaSource {
        try COM.NullResult.unwrap(_imediaSourceStatics4.createFromDownloadOperation(downloadOperation))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _imediaPlaybackSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource>? = nil

    internal var _imediaPlaybackSource: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource> {
        get throws {
            try _imediaPlaybackSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource.self)
            }
        }
    }

    private var _imediaSource3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource3>? = nil

    internal var _imediaSource3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource3> {
        get throws {
            try _imediaSource3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaSource3.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaSource3.self)
            }
        }
    }

    private var _imediaSource4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource4>? = nil

    internal var _imediaSource4: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource4> {
        get throws {
            try _imediaSource4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaSource4.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaSource4.self)
            }
        }
    }

    private var _imediaSource5_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource5>? = nil

    internal var _imediaSource5: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSource5> {
        get throws {
            try _imediaSource5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaSource5.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaSource5.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _imediaPlaybackSource_storage?.release()
        _imediaSource3_storage?.release()
        _imediaSource4_storage?.release()
        _imediaSource5_storage?.release()
    }

    private static var _imediaSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics>? = nil

    internal static var _imediaSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics> {
        get throws {
            try _imediaSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MediaSource", id: CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics.iid)
            }
        }
    }

    private static var _imediaSourceStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics3>? = nil

    internal static var _imediaSourceStatics3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics3> {
        get throws {
            try _imediaSourceStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MediaSource", id: CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics3.iid)
            }
        }
    }

    private static var _imediaSourceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics2>? = nil

    internal static var _imediaSourceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics2> {
        get throws {
            try _imediaSourceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MediaSource", id: CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics2.iid)
            }
        }
    }

    private static var _imediaSourceStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics4>? = nil

    internal static var _imediaSourceStatics4: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics4> {
        get throws {
            try _imediaSourceStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Core.MediaSource", id: CWinRT.SWRT_WindowsMediaCore_IMediaSourceStatics4.iid)
            }
        }
    }
}