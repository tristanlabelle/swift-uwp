// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the Binding event and methods for binding media content to the associated MediaSource.
public final class WindowsMediaCore_MediaBindingEventArgs: WindowsRuntime.WinRTImport<WindowsMediaCore_MediaBindingEventArgsProjection> {
    // MARK: Windows.Media.Core.IMediaBindingEventArgs members

    /// Gets the MediaBinder associated with the binding event.
    /// - Returns: The MediaBinder associated with the binding event.
    public var mediaBinder: WindowsMediaCore_MediaBinder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaBinder())
        }
    }

    /// Occurs when the binding operation is cancelled.
    public func canceled(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCore_MediaBindingEventArgs?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Canceled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: canceled)
    }

    public func canceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Canceled(token)
    }

    /// Informs the system that the app might continue to perform work after the Binding event handler returns.
    /// - Returns: The requested deferral.
    public func getDeferral() throws -> WindowsFoundation_Deferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    /// Sets the URI of the media content to be bound to the MediaSource.
    /// - Parameter uri: The URI of the media content to be bound.
    public func setUri(_ uri: WindowsFoundation_Uri?) throws {
        try _interop.setUri(uri)
    }

    /// Sets the media content to be bound to the MediaSource.
    /// - Parameter stream: A stream containing the media content.
    /// - Parameter contentType: A string specifying the content type of the media content.
    public func setStream(_ stream: WindowsStorageStreams_IRandomAccessStream?, _ contentType: Swift.String) throws {
        try _interop.setStream(stream, contentType)
    }

    /// Binds a media content stream reference to the MediaSource associated with the event.
    /// - Parameter stream: A stream reference containing the media content to be bound.
    /// - Parameter contentType: A string specifying the content type of the media content.
    public func setStreamReference(_ stream: WindowsStorageStreams_IRandomAccessStreamReference?, _ contentType: Swift.String) throws {
        try _interop.setStreamReference(stream, contentType)
    }

    // MARK: Windows.Media.Core.IMediaBindingEventArgs2 members

    /// Binds an adaptive media source to the MediaSource associated with the event.
    /// - Parameter mediaSource: The AdaptiveMediaSource representing the media content.
    public func setAdaptiveMediaSource(_ mediaSource: WindowsMediaStreamingAdaptive_AdaptiveMediaSource?) throws {
        try _imediaBindingEventArgs2.setAdaptiveMediaSource(mediaSource)
    }

    /// Binds a storage file to the MediaSource associated with the event.
    /// - Parameter file: The StorageFile containing media content.
    public func setStorageFile(_ file: WindowsStorage_IStorageFile?) throws {
        try _imediaBindingEventArgs2.setStorageFile(file)
    }

    // MARK: Windows.Media.Core.IMediaBindingEventArgs3 members

    /// Binds a DownloadOperation to the MediaSource associated with the event.
    /// - Parameter downloadOperation: The **DownloadOperation** to bind to the **MediaSource**.
    public func setDownloadOperation(_ downloadOperation: WindowsNetworkingBackgroundTransfer_DownloadOperation?) throws {
        try _imediaBindingEventArgs3.setDownloadOperation(downloadOperation)
    }

    // MARK: Implementation details

    private var _imediaBindingEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs2>? = nil

    internal var _imediaBindingEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs2> {
        get throws {
            try _imediaBindingEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs2.self)
            }
        }
    }

    private var _imediaBindingEventArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs3>? = nil

    internal var _imediaBindingEventArgs3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs3> {
        get throws {
            try _imediaBindingEventArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs3.iid).cast(to: CWinRT.SWRT_WindowsMediaCore_IMediaBindingEventArgs3.self)
            }
        }
    }

    deinit {
        _imediaBindingEventArgs2_storage?.release()
        _imediaBindingEventArgs3_storage?.release()
    }
}