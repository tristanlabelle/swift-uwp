// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Derives information from the USB endpoint descriptor of the endpoint, such as type, direction, and endpoint number. This object also gets the specific endpoint descriptors based on the type of endpoint. For an explanation of an endpoint descriptor, see Section 9.6.5 in the Universal Serial Bus Specification:
public final class WindowsDevicesUsb_UsbEndpointDescriptor: WindowsRuntime.WinRTImport<WindowsDevicesUsb_UsbEndpointDescriptorProjection> {
    // MARK: Windows.Devices.Usb.IUsbEndpointDescriptor members

    /// Gets an object that represents the endpoint descriptor for the USB bulk IN endpoint.
    /// - Returns: A UsbBulkInEndpointDescriptor object that describes the USB bulk IN endpoint.
    public var asBulkInEndpointDescriptor: WindowsDevicesUsb_UsbBulkInEndpointDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AsBulkInEndpointDescriptor())
        }
    }

    /// Gets an object that represents the endpoint descriptor for the USB bulk OUT endpoint.
    /// - Returns: A UsbBulkOutEndpointDescriptor that describes the USB bulk OUT endpoint.
    public var asBulkOutEndpointDescriptor: WindowsDevicesUsb_UsbBulkOutEndpointDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AsBulkOutEndpointDescriptor())
        }
    }

    /// Gets an object that represents the endpoint descriptor for the USB interrupt IN endpoint.
    /// - Returns: An UsbInterruptInEndpointDescriptor that describes the USB interrupt IN endpoint.
    public var asInterruptInEndpointDescriptor: WindowsDevicesUsb_UsbInterruptInEndpointDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AsInterruptInEndpointDescriptor())
        }
    }

    /// Gets an object that represents the endpoint descriptor for the USB interrupt OUT endpoint.
    /// - Returns: An UsbInterruptOutEndpointDescriptor object that describes the interrupt OUT endpoint.
    public var asInterruptOutEndpointDescriptor: WindowsDevicesUsb_UsbInterruptOutEndpointDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AsInterruptOutEndpointDescriptor())
        }
    }

    /// Gets the direction of the USB endpoint.
    /// - Returns: A UsbTransferDirection value that indicates the direction of the endpoint. This value is Bit 7 of the **bEndpointAddress** field of an endpoint descriptor. For information, see Table 9-13 in the Universal Serial Bus Specification (version 2.0) or Table 9-18 in the Universal Serial Bus 3.0 Specification.
    public var direction: WindowsDevicesUsb_UsbTransferDirection {
        get throws {
            try _interop.get_Direction()
        }
    }

    /// Gets the USB endpoint number.
    /// - Returns: The USB endpoint number. That number is in Bit 3...0 of the **bEndpointAddress** field of an endpoint descriptor. For information, see Table 9-13 in the Universal Serial Bus Specification (version 2.0) or Table 9-18 in the Universal Serial Bus 3.0 Specification.
    public var endpointNumber: Swift.UInt8 {
        get throws {
            try _interop.get_EndpointNumber()
        }
    }

    /// Gets the type of USB endpoint.
    /// - Returns: A UsbEndpointType constant that indicates the type of USB endpoint. This value is Bit 1...0 of the **bmAttributes** field of an endpoint descriptor. For information, see Table 9-13 in the Universal Serial Bus Specification (version 2.0) or Table 9-18 in the Universal Serial Bus 3.0 Specification.
    public var endpointType: WindowsDevicesUsb_UsbEndpointType {
        get throws {
            try _interop.get_EndpointType()
        }
    }

    // MARK: Windows.Devices.Usb.IUsbEndpointDescriptorStatics members

    /// Retrieves the USB endpoint descriptor in a UsbEndpointDescriptor object that is contained in a UsbDescriptor object.
    /// - Parameter descriptor: The UsbDescriptor object to parse.
    /// - Parameter parsed: Receives a UsbEndpointDescriptor object.
    /// - Returns: True, if the specified UsbDescriptor object is a USB endpoint descriptor. Otherwise, false.
    public static func tryParse(_ descriptor: WindowsDevicesUsb_UsbDescriptor?, _ parsed: inout WindowsDevicesUsb_UsbEndpointDescriptor?) throws -> Swift.Bool {
        try _iusbEndpointDescriptorStatics.tryParse(descriptor, &parsed)
    }

    /// Parses the specified USB descriptor and returns the USB endpoint descriptor in a UsbEndpointDescriptor object.
    /// - Parameter descriptor: A UsbDescriptor object that contains the USB endpoint descriptor.
    /// - Returns: A UsbEndpointDescriptor object that contains the USB endpoint descriptor.
    public static func parse(_ descriptor: WindowsDevicesUsb_UsbDescriptor?) throws -> WindowsDevicesUsb_UsbEndpointDescriptor {
        try COM.NullResult.unwrap(_iusbEndpointDescriptorStatics.parse(descriptor))
    }

    // MARK: Implementation details

    private static var _iusbEndpointDescriptorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesUsb_IUsbEndpointDescriptorStatics>? = nil

    internal static var _iusbEndpointDescriptorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesUsb_IUsbEndpointDescriptorStatics> {
        get throws {
            try _iusbEndpointDescriptorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Usb.UsbEndpointDescriptor", id: CWinRT.SWRT_WindowsDevicesUsb_IUsbEndpointDescriptorStatics.iid)
            }
        }
    }
}