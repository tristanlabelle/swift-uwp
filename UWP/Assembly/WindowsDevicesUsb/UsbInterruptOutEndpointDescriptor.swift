// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The endpoint descriptor for a USB interrupt OUT endpoint. The descriptor specifies the endpoint type, direction, number and also the maximum number of bytes that can be written to the endpoint, in a single transfer. The app can also get information about how often the host polls the endpoint to send data.
public final class WindowsDevicesUsb_UsbInterruptOutEndpointDescriptor: WindowsRuntime.WinRTImport<WindowsDevicesUsb_UsbInterruptOutEndpointDescriptorProjection> {
    // MARK: Windows.Devices.Usb.IUsbInterruptOutEndpointDescriptor members

    /// Gets the USB endpoint number of the interrupt OUT endpoint.
    /// - Returns: The USB endpoint number.
    public var endpointNumber: Swift.UInt8 {
        get throws {
            try _interop.get_EndpointNumber()
        }
    }

    /// Gets the poling interval of the USB interrupt endpoint.
    /// - Returns: The poling interval of the USB interrupt endpoint.
    public var interval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Interval()
        }
    }

    /// Gets the maximum number of bytes that can be sent to or received from this endpoint.
    /// - Returns: Indicates the maximum packet size of the endpoint. This value is the **wMaxPacketSize** field value of the endpoint descriptor. For information, see Table 9-13 in the Universal Serial Bus Specification (version 2.0) or Table 9-18 in the Universal Serial Bus 3.0 Specification.
    public var maxPacketSize: Swift.UInt32 {
        get throws {
            try _interop.get_MaxPacketSize()
        }
    }

    /// Gets the object that represents the pipe that the host opens to communicate with the interrupt OUT endpoint.
    /// - Returns: An UsbInterruptInPipe object that is the pipe for the interrupt OUT endpoint.
    public var pipe: WindowsDevicesUsb_UsbInterruptOutPipe {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Pipe())
        }
    }

    // MARK: Implementation details
}