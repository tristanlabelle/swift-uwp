// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a USB device. The object provides methods and properties that an app can use to find the device (in the system) with which the app wants to communicate, and sends IN and OUT control transfers to the device.
public final class WindowsDevicesUsb_UsbDevice: WindowsRuntime.WinRTImport<WindowsDevicesUsb_UsbDeviceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Usb.IUsbDevice members

    /// Gets an object that represents a USB configuration including all interfaces and their endpoints.
    /// - Returns: A UsbConfiguration object that contains information about a USB configuration including the configuration descriptor and array of all USB interfaces in that configuration.
    public var configuration: WindowsDevicesUsb_UsbConfiguration {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Configuration())
        }
    }

    /// Gets the object that represents the default or the first interface in a USB configuration.
    /// - Returns: A UsbInterface object that represents the default or the first interface in a USB configuration.
    public var defaultInterface: WindowsDevicesUsb_UsbInterface {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DefaultInterface())
        }
    }

    /// Gets the object that represents the USB device descriptor.
    /// - Returns: A UsbDeviceDescriptor that represents the USB device descriptor.
    public var deviceDescriptor: WindowsDevicesUsb_UsbDeviceDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeviceDescriptor())
        }
    }

    /// Starts a USB control transfer to send data to the default control endpoint of the device.
    /// - Parameter setupPacket: A UsbSetupPacket object that contains the setup packet for the control transfer.
    /// - Parameter buffer: A caller-supplied buffer that contains the transfer data.
    /// - Returns: Returns an IAsyncOperation(UInt32) object that returns the results of the operation.
    public func sendControlOutTransferAsync(_ setupPacket: WindowsDevicesUsb_UsbSetupPacket?, _ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_interop.sendControlOutTransferAsync(setupPacket, buffer))
    }

    /// Starts a zero-length USB control transfer that writes to the default control endpoint of the device.
    /// - Parameter setupPacket: A UsbSetupPacket object that contains the setup packet for the control transfer.
    /// - Returns: Returns an IAsyncOperation(UInt32) object that returns the results of the operation.
    public func sendControlOutTransferAsync(_ setupPacket: WindowsDevicesUsb_UsbSetupPacket?) throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_interop.sendControlOutTransferAsyncNoBuffer(setupPacket))
    }

    /// Starts a USB control transfer to receive data from the default control endpoint of the device.
    /// - Parameter setupPacket: A UsbSetupPacket object that contains the setup packet for the control transfer.
    /// - Parameter buffer: A caller-supplied buffer that contains transfer data.
    /// - Returns: Returns an IAsyncOperation(IBuffer) object that returns the results of the operation.
    public func sendControlInTransferAsync(_ setupPacket: WindowsDevicesUsb_UsbSetupPacket?, _ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.sendControlInTransferAsync(setupPacket, buffer))
    }

    /// Starts a zero-length USB control transfer that reads from the default control endpoint of the device.
    /// - Parameter setupPacket: A UsbSetupPacket object that contains the setup packet for the control transfer.
    /// - Returns: Returns an IAsyncOperation(IBuffer) object that returns the results of the operation.
    public func sendControlInTransferAsync(_ setupPacket: WindowsDevicesUsb_UsbSetupPacket?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.sendControlInTransferAsyncNoBuffer(setupPacket))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases the reference to the UsbDevice object that was previously obtained by calling FromIdAsync.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Usb.IUsbDeviceStatics members

    /// Gets an Advanced Query Syntax (AQS) string, based on vendor, product, and device interface GUID identifiers, specified by the app. The app passes the string to DeviceInformation.FindAllAsync in order to find a specific type of USB device.
    /// - Parameter vendorId: Specifies the vendor identifier for the device as assigned by the USB specification committee. Possible values are 0 through 0xffff.
    /// - Parameter productId: Specifies the product identifier. This value is assigned by the manufacturer and is device-specific. Possible values are 0 through 0xffff.
    /// - Parameter winUsbInterfaceClass: The device interface GUID exposed by the Winusb.sys driver. See the remarks section.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelector(_ vendorId: Swift.UInt32, _ productId: Swift.UInt32, _ winUsbInterfaceClass: Foundation.UUID) throws -> Swift.String {
        try _iusbDeviceStatics.getDeviceSelector(vendorId, productId, winUsbInterfaceClass)
    }

    /// Gets an Advanced Query Syntax (AQS) string, based on the device interface GUID identifier, specified by the app. The app passes the string to DeviceInformation.FindAllAsync in order to find a specific type of USB device.
    /// - Parameter winUsbInterfaceClass: The device interface GUID exposed by the Winusb.sys driver. See the remarks section.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelector(_ winUsbInterfaceClass: Foundation.UUID) throws -> Swift.String {
        try _iusbDeviceStatics.getDeviceSelectorGuidOnly(winUsbInterfaceClass)
    }

    /// Gets an Advanced Query Syntax (AQS) string, based on vendor and product identifiers, specified by the app. The app passes the string to DeviceInformation.FindAllAsync in order to find a specific type of USB device.
    /// - Parameter vendorId: Specifies the vendor identifier for the device as assigned by the USB specification committee. Possible values are 0 through 0xffff.
    /// - Parameter productId: Specifies the product identifier. This value is assigned by the manufacturer and is device-specific. Possible values are 0 through 0xffff.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelector(_ vendorId: Swift.UInt32, _ productId: Swift.UInt32) throws -> Swift.String {
        try _iusbDeviceStatics.getDeviceSelectorVidPidOnly(vendorId, productId)
    }

    /// Gets an Advanced Query Syntax (AQS) string that the app can pass to DeviceInformation.FindAllAsync in order to find a specific type of USB device.
    /// - Parameter usbClass: A UsbDeviceClass object for the device class specified by the app.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceClassSelector(_ usbClass: WindowsDevicesUsb_UsbDeviceClass?) throws -> Swift.String {
        try _iusbDeviceStatics.getDeviceClassSelector(usbClass)
    }

    /// Starts an asynchronous operation that creates a UsbDevice object.
    /// - Parameter deviceId: The device instance path of the device. To obtain that value, get the DeviceInformation.Id property value.
    /// - Returns: Returns an IAsyncOperation(UsbDevice) object that returns the results of the operation.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesUsb_UsbDevice?> {
        try COM.NullResult.unwrap(_iusbDeviceStatics.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iusbDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesUsb_IUsbDeviceStatics>? = nil

    internal static var _iusbDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesUsb_IUsbDeviceStatics> {
        get throws {
            try _iusbDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Usb.UsbDevice", id: CWinRT.SWRT_WindowsDevicesUsb_IUsbDeviceStatics.iid)
            }
        }
    }
}