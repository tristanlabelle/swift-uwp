// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a way for the app to get an Advanced Query Syntax (AQS) string by specifying the class code, subclass code, and the protocol code defined by the device. The properties in this class are passed in the call to GetDeviceClassSelector.
public final class WindowsDevicesUsb_UsbDeviceClass: WindowsRuntime.WinRTImport<WindowsDevicesUsb_UsbDeviceClassProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesUsb_UsbDeviceClassProjection.self))
    }

    // MARK: Windows.Devices.Usb.IUsbDeviceClass members

    /// Gets or sets the class code of the device.
    /// - Returns: The device class code.
    public var classCode: Swift.UInt8 {
        get throws {
            try _interop.get_ClassCode()
        }
    }

    /// Gets or sets the class code of the device.
    /// - Returns: The device class code.
    public func classCode(_ value: Swift.UInt8) throws {
        try _interop.put_ClassCode(value)
    }

    /// Gets or sets the protocol code of the device.
    /// - Returns: The protocol code of the device.
    public var protocolCode: Swift.UInt8? {
        get throws {
            try _interop.get_ProtocolCode()
        }
    }

    /// Gets or sets the protocol code of the device.
    /// - Returns: The protocol code of the device.
    public func protocolCode(_ value: Swift.UInt8?) throws {
        try _interop.put_ProtocolCode(value)
    }

    /// Gets or sets the subclass code of the device.
    /// - Returns: The subclass code of the device.
    public var subclassCode: Swift.UInt8? {
        get throws {
            try _interop.get_SubclassCode()
        }
    }

    /// Gets or sets the subclass code of the device.
    /// - Returns: The subclass code of the device.
    public func subclassCode(_ value: Swift.UInt8?) throws {
        try _interop.put_SubclassCode(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Usb.UsbDeviceClass", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}