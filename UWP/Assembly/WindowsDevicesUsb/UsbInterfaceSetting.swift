// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about an alternate setting and select that setting. The app can get the USB interface descriptors for the setting and its endpoints, and determine whether this setting is currently selected.
public final class WindowsDevicesUsb_UsbInterfaceSetting: WindowsRuntime.WinRTImport<WindowsDevicesUsb_UsbInterfaceSettingProjection> {
    // MARK: Windows.Devices.Usb.IUsbInterfaceSetting members

    /// Gets an array of objects that represent descriptors associated with USB bulk IN endpoints that are defined in the alternate setting.
    /// - Returns: An array of UsbBulkInEndpointDescriptor objects.
    public var bulkInEndpoints: WindowsFoundationCollections_IVectorView<WindowsDevicesUsb_UsbBulkInEndpointDescriptor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BulkInEndpoints())
        }
    }

    /// Gets an array of objects that represent descriptors associated with USB bulk OUT endpoints that are defined in the alternate setting.
    /// - Returns: An array of UsbBulkOutEndpointDescriptor objects.
    public var bulkOutEndpoints: WindowsFoundationCollections_IVectorView<WindowsDevicesUsb_UsbBulkOutEndpointDescriptor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BulkOutEndpoints())
        }
    }

    /// Gets an array of objects that represent descriptors associated with the alternate setting.
    /// - Returns: An array of UsbDescriptor objects that represent the interface descriptor associated with the alternate setting.
    public var descriptors: WindowsFoundationCollections_IVectorView<WindowsDevicesUsb_UsbDescriptor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Descriptors())
        }
    }

    /// Gets an object that represents the descriptor that describes the alternate setting.
    /// - Returns: A UsbInterfaceDescriptor object that has the full descriptor for the alternate setting. Requirements
    public var interfaceDescriptor: WindowsDevicesUsb_UsbInterfaceDescriptor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InterfaceDescriptor())
        }
    }

    /// Gets an array of objects that represent descriptors associated with USB interrupt IN endpoints that are defined in the alternate setting.
    /// - Returns: An array of UsbInterruptInEndpointDescriptor objects.
    public var interruptInEndpoints: WindowsFoundationCollections_IVectorView<WindowsDevicesUsb_UsbInterruptInEndpointDescriptor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InterruptInEndpoints())
        }
    }

    /// Gets an array of objects that represent descriptors associated with USB interrupt OUT endpoints that are defined in the alternate setting.
    /// - Returns: An array of UsbInterruptInEndpointDescriptor objects.
    public var interruptOutEndpoints: WindowsFoundationCollections_IVectorView<WindowsDevicesUsb_UsbInterruptOutEndpointDescriptor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InterruptOutEndpoints())
        }
    }

    /// Determines whether the alternate setting is currently selected.
    /// - Returns: True, if the alternate setting is currently selected; otherwise, false.
    public var selected: Swift.Bool {
        get throws {
            try _interop.get_Selected()
        }
    }

    /// Selects the alternate setting as the current setting in the USB interface.
    /// - Returns: An IAsyncAction object that is used to control the asynchronous operation.
    public func selectSettingAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.selectSettingAsync())
    }

    // MARK: Implementation details
}