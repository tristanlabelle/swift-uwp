// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Start screen manager object.
public final class WindowsUIStartScreen_StartScreenManager: WindowsRuntime.WinRTImport<WindowsUIStartScreen_StartScreenManagerProjection> {
    // MARK: Windows.UI.StartScreen.IStartScreenManager members

    /// Gets the user associated with the current Start screen.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_interop.get_User())
        }
    }

    /// Checks if the app can be pinned to the current Start screen.
    public func supportsAppListEntry(_ appListEntry: WindowsApplicationModelCore_AppListEntry?) throws -> Swift.Bool {
        try _interop.supportsAppListEntry(appListEntry)
    }

    /// Checks if the app is currently pinned to the Start screen.
    public func containsAppListEntryAsync(_ appListEntry: WindowsApplicationModelCore_AppListEntry?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.containsAppListEntryAsync(appListEntry))
    }

    /// Requests to pin the app to the current Start screen. Depending on the device family, this must be called on the UI thread, and will display a dialog asking the user to confirm they would like to pin the app.
    public func requestAddAppListEntryAsync(_ appListEntry: WindowsApplicationModelCore_AppListEntry?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.requestAddAppListEntryAsync(appListEntry))
    }

    // MARK: Windows.UI.StartScreen.IStartScreenManager2 members

    /// Checks if the specified secondary tile is pinned to Start.
    /// - Parameter tileId: The TileId of the SecondaryTile that you want to check is pinned.
    /// - Returns: A boolean representing whether the specified secondary tile is pinned to Start.
    public func containsSecondaryTileAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_istartScreenManager2.containsSecondaryTileAsync(tileId))
    }

    /// Tries to remove the specified secondary tile from Start.
    /// - Parameter tileId: The TileId of the SecondaryTile you want to remove.
    /// - Returns: A boolean representing whether the tile is not on Start. If removing wasn't allowed, this returns false.
    public func tryRemoveSecondaryTileAsync(_ tileId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_istartScreenManager2.tryRemoveSecondaryTileAsync(tileId))
    }

    // MARK: Windows.UI.StartScreen.IStartScreenManagerStatics members

    /// Gets the current Start screen manager.
    public static func getDefault() throws -> WindowsUIStartScreen_StartScreenManager {
        try COM.NullResult.unwrap(_istartScreenManagerStatics.getDefault())
    }

    /// Gets the Start screen manager for a specific user.
    public static func getForUser(_ user: WindowsSystem_User?) throws -> WindowsUIStartScreen_StartScreenManager {
        try COM.NullResult.unwrap(_istartScreenManagerStatics.getForUser(user))
    }

    // MARK: Implementation details

    private var _istartScreenManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManager2>? = nil

    internal var _istartScreenManager2: COM.COMInterop<CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManager2> {
        get throws {
            try _istartScreenManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManager2.iid).cast(to: CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManager2.self)
            }
        }
    }

    deinit {
        _istartScreenManager2_storage?.release()
    }

    private static var _istartScreenManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManagerStatics>? = nil

    internal static var _istartScreenManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManagerStatics> {
        get throws {
            try _istartScreenManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.StartScreen.StartScreenManager", id: CWinRT.SWRT_WindowsUIStartScreen_IStartScreenManagerStatics.iid)
            }
        }
    }
}