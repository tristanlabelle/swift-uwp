// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data when an app is activated to show the details of an appointment.
public final class WindowsApplicationModelActivation_AppointmentsProviderShowAppointmentDetailsActivatedEventArgs: WindowsRuntime.WinRTImport<WindowsApplicationModelActivation_AppointmentsProviderShowAppointmentDetailsActivatedEventArgsProjection>, WindowsApplicationModelActivation_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgsProtocol, WindowsApplicationModelActivation_IAppointmentsProviderActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsWithUserProtocol {
    // MARK: Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs members

    /// Gets the start date of the appointment instance for which the app should display details.
    /// - Returns: The start date of the appointment instance for which the app should display details.
    public var instanceStartDate: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_InstanceStartDate()
        }
    }

    /// Gets the local identifier of the appointment for which the app should display details.
    /// - Returns: The local identifier of the appointment for which the app should display details.
    public var localId: Swift.String {
        get throws {
            try _interop.get_LocalId()
        }
    }

    /// Gets the roaming identifier of the appointment for which the app should display details.
    /// - Returns: The roaming identifier of the appointment for which the app should display details.
    public var roamingId: Swift.String {
        get throws {
            try _interop.get_RoamingId()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs members

    /// Gets the action to be performed by the appointments provider.
    /// - Returns: The action to be performed by the appointments provider.
    public var verb: Swift.String {
        get throws {
            try _iappointmentsProviderActivatedEventArgs.get_Verb()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgs members

    /// Gets the activation type.
    /// - Returns: The ActivationKind.AppointmentsProvider enumeration value.
    public var kind: WindowsApplicationModelActivation_ActivationKind {
        get throws {
            try _iactivatedEventArgs.get_Kind()
        }
    }

    /// Gets the execution state of the app before it was activated.
    /// - Returns: The execution state of the app before it was activated.
    public var previousExecutionState: WindowsApplicationModelActivation_ApplicationExecutionState {
        get throws {
            try _iactivatedEventArgs.get_PreviousExecutionState()
        }
    }

    /// Gets the splash screen object, which provides information about the transition from the splash screen to the activated app.
    /// - Returns: The object that provides splash screen information.
    public var splashScreen: WindowsApplicationModelActivation_SplashScreen {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgs.get_SplashScreen())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser members

    /// Gets the user that the app was activated for.
    /// - Returns: The user that the app was activated for.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsWithUser.get_User())
        }
    }

    // MARK: Implementation details

    private var _iappointmentsProviderActivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IAppointmentsProviderActivatedEventArgs>? = nil

    internal var _iappointmentsProviderActivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IAppointmentsProviderActivatedEventArgs> {
        get throws {
            try _iappointmentsProviderActivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IAppointmentsProviderActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IAppointmentsProviderActivatedEventArgs.self)
            }
        }
    }

    private var _iactivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs>? = nil

    internal var _iactivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs> {
        get throws {
            try _iactivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.self)
            }
        }
    }

    private var _iactivatedEventArgsWithUser_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser>? = nil

    internal var _iactivatedEventArgsWithUser: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser> {
        get throws {
            try _iactivatedEventArgsWithUser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.self)
            }
        }
    }

    deinit {
        _iappointmentsProviderActivatedEventArgs_storage?.release()
        _iactivatedEventArgs_storage?.release()
        _iactivatedEventArgsWithUser_storage?.release()
    }
}