// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about the activated event that fires when the user searches the app from the Search charm and the app isn't the main app on screen.
public final class WindowsApplicationModelActivation_SearchActivatedEventArgs: WindowsRuntime.WinRTImport<WindowsApplicationModelActivation_SearchActivatedEventArgsProjection>, WindowsApplicationModelActivation_ISearchActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsProtocol, WindowsApplicationModelActivation_IApplicationViewActivatedEventArgsProtocol, WindowsApplicationModelActivation_ISearchActivatedEventArgsWithLinguisticDetailsProtocol, WindowsApplicationModelActivation_IViewSwitcherProviderProtocol, WindowsApplicationModelActivation_IActivatedEventArgsWithUserProtocol {
    // MARK: Windows.ApplicationModel.Activation.ISearchActivatedEventArgs members

    /// Gets the Internet Engineering Task Force (IETF) language tag (BCP 47 standard) that identifies the language currently associated with the user's text input device.
    /// - Returns: The Internet Engineering Task Force (IETF) BCP 47 standard language tag.
    public var language: Swift.String {
        get throws {
            try _interop.get_Language()
        }
    }

    /// Gets the text that the user wants the app to search for. The user entered this text into the search box of the search pane.
    /// - Returns: The text to search for.
    public var queryText: Swift.String {
        get throws {
            try _interop.get_QueryText()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgs members

    /// Gets the activation type.
    /// - Returns: The ActivationKind.Search enumeration value.
    public var kind: WindowsApplicationModelActivation_ActivationKind {
        get throws {
            try _iactivatedEventArgs.get_Kind()
        }
    }

    /// Gets the execution state of the app before it was activated.
    /// - Returns: One of the ApplicationExecutionState enumeration values.
    public var previousExecutionState: WindowsApplicationModelActivation_ApplicationExecutionState {
        get throws {
            try _iactivatedEventArgs.get_PreviousExecutionState()
        }
    }

    /// Gets a SplashScreen object that provides information about the transition from the splash screen to the activated app.
    /// - Returns: The object that provides splash screen information.
    public var splashScreen: WindowsApplicationModelActivation_SplashScreen {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgs.get_SplashScreen())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs members

    /// Gets the identifier for the currently shown app view.
    /// - Returns: The identifier for the currently shown app view.
    public var currentlyShownApplicationViewId: Swift.Int32 {
        get throws {
            try _iapplicationViewActivatedEventArgs.get_CurrentlyShownApplicationViewId()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.ISearchActivatedEventArgsWithLinguisticDetails members

    /// Gets a SearchPaneQueryLinguisticDetails object that provides info about query text that the user enters through an Input Method Editor (IME).
    /// - Returns: The object that provides info about query text.
    public var linguisticDetails: WindowsApplicationModelSearch_SearchPaneQueryLinguisticDetails {
        get throws {
            try COM.NullResult.unwrap(_isearchActivatedEventArgsWithLinguisticDetails.get_LinguisticDetails())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IViewSwitcherProvider members

    /// Gets the view switcher object that allows you to set the view for the application.
    /// - Returns: Use the ActivationViewSwitcher to show or switch the view in response to the activation. The value will be **null** in hosted scenarios such as Share and File Picker activations.
    public var viewSwitcher: WindowsUIViewManagement_ActivationViewSwitcher {
        get throws {
            try COM.NullResult.unwrap(_iviewSwitcherProvider.get_ViewSwitcher())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser members

    /// Gets the user that the app was activated for.
    /// - Returns: The user that the app was activated for.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsWithUser.get_User())
        }
    }

    // MARK: Implementation details

    private var _iactivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs>? = nil

    internal var _iactivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs> {
        get throws {
            try _iactivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.self)
            }
        }
    }

    private var _iapplicationViewActivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs>? = nil

    internal var _iapplicationViewActivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs> {
        get throws {
            try _iapplicationViewActivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.self)
            }
        }
    }

    private var _isearchActivatedEventArgsWithLinguisticDetails_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_ISearchActivatedEventArgsWithLinguisticDetails>? = nil

    internal var _isearchActivatedEventArgsWithLinguisticDetails: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_ISearchActivatedEventArgsWithLinguisticDetails> {
        get throws {
            try _isearchActivatedEventArgsWithLinguisticDetails_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_ISearchActivatedEventArgsWithLinguisticDetails.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_ISearchActivatedEventArgsWithLinguisticDetails.self)
            }
        }
    }

    private var _iviewSwitcherProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider>? = nil

    internal var _iviewSwitcherProvider: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider> {
        get throws {
            try _iviewSwitcherProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider.self)
            }
        }
    }

    private var _iactivatedEventArgsWithUser_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser>? = nil

    internal var _iactivatedEventArgsWithUser: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser> {
        get throws {
            try _iactivatedEventArgsWithUser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.self)
            }
        }
    }

    deinit {
        _iactivatedEventArgs_storage?.release()
        _iapplicationViewActivatedEventArgs_storage?.release()
        _isearchActivatedEventArgsWithLinguisticDetails_storage?.release()
        _iviewSwitcherProvider_storage?.release()
        _iactivatedEventArgsWithUser_storage?.release()
    }
}