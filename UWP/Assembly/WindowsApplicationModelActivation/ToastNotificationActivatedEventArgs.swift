// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about an event that occurs when the app is activated because a user tapped on the body of a toast notification or performed an action inside a toast notification.
public final class WindowsApplicationModelActivation_ToastNotificationActivatedEventArgs: WindowsRuntime.WinRTImport<WindowsApplicationModelActivation_ToastNotificationActivatedEventArgsProjection>, WindowsApplicationModelActivation_IToastNotificationActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsWithUserProtocol, WindowsApplicationModelActivation_IApplicationViewActivatedEventArgsProtocol {
    // MARK: Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs members

    /// Gets the arguments that the app can retrieve after it is activated through an interactive toast notification.
    /// - Returns: The arguments that the app can retrieve after it is activated through an interactive toast notification. The value of this property is defined previously in the XML that describes the data to deliver for the toast notification. The following elements and attributes of that XML define the value:
    public var argument: Swift.String {
        get throws {
            try _interop.get_Argument()
        }
    }

    /// Gets a set of values that you can use to obtain the user input from an interactive toast notification.
    /// - Returns: A set of values that you can use to obtain the user input from an interactive toast notification.
    public var userInput: WindowsFoundationCollections_ValueSet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UserInput())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgs members

    /// Gets the reason for the activation of the app for this event.
    /// - Returns: The reason for the activation of the app for this event. For the event that occurs when the app is activated because a user tapped on the body of a toast notification or performed an action inside a toast notification, this value is **ActivationKind.ToastNotification**.
    public var kind: WindowsApplicationModelActivation_ActivationKind {
        get throws {
            try _iactivatedEventArgs.get_Kind()
        }
    }

    /// Gets the execution state of the app before the app was activated because a user tapped on the body of a toast notification or performed an action inside a toast notification.
    /// - Returns: The execution state of the app before the app was activated because a user tapped on the body of a toast notification or performed an action inside a toast notification.
    public var previousExecutionState: WindowsApplicationModelActivation_ApplicationExecutionState {
        get throws {
            try _iactivatedEventArgs.get_PreviousExecutionState()
        }
    }

    /// Gets the splash screen object that provides information about the transition from the splash screen to the activated app.
    /// - Returns: The splash screen object that provides information about the transition from the splash screen to the activated app.
    public var splashScreen: WindowsApplicationModelActivation_SplashScreen {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgs.get_SplashScreen())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser members

    /// Gets the user the app was activated for.
    /// - Returns: The user the app was activated for.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsWithUser.get_User())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs members

    /// Gets the identifier for the currently shown app view.
    /// - Returns: The identifier for the currently shown app view.
    public var currentlyShownApplicationViewId: Swift.Int32 {
        get throws {
            try _iapplicationViewActivatedEventArgs.get_CurrentlyShownApplicationViewId()
        }
    }

    // MARK: Implementation details

    private var _iactivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs>? = nil

    internal var _iactivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs> {
        get throws {
            try _iactivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.self)
            }
        }
    }

    private var _iactivatedEventArgsWithUser_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser>? = nil

    internal var _iactivatedEventArgsWithUser: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser> {
        get throws {
            try _iactivatedEventArgsWithUser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.self)
            }
        }
    }

    private var _iapplicationViewActivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs>? = nil

    internal var _iapplicationViewActivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs> {
        get throws {
            try _iapplicationViewActivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.self)
            }
        }
    }

    deinit {
        _iactivatedEventArgs_storage?.release()
        _iactivatedEventArgsWithUser_storage?.release()
        _iapplicationViewActivatedEventArgs_storage?.release()
    }
}