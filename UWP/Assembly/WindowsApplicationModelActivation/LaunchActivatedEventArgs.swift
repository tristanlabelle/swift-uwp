// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides event information when an app is launched.
public final class WindowsApplicationModelActivation_LaunchActivatedEventArgs: WindowsRuntime.WinRTImport<WindowsApplicationModelActivation_LaunchActivatedEventArgsProjection>, WindowsApplicationModelActivation_ILaunchActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsProtocol, WindowsApplicationModelActivation_IApplicationViewActivatedEventArgsProtocol, WindowsApplicationModelActivation_IPrelaunchActivatedEventArgsProtocol, WindowsApplicationModelActivation_IViewSwitcherProviderProtocol, WindowsApplicationModelActivation_ILaunchActivatedEventArgs2Protocol, WindowsApplicationModelActivation_IActivatedEventArgsWithUserProtocol {
    // MARK: Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs members

    /// Gets the arguments that are passed to the app during its launch activation.
    /// - Returns: The list of arguments. This value can be used to control the behavior of the app when it is launched through a secondary tile or through a toast.
    public var arguments: Swift.String {
        get throws {
            try _interop.get_Arguments()
        }
    }

    /// Gets the ID of the tile that was invoked to launch the app.
    /// - Returns: The ID of the tile that launched the app. If the app's main tile was used, this value is "App". If a secondary tile is used, the SecondaryTile.TileId value, assigned to the secondary tile when it was created, is returned.
    public var tileId: Swift.String {
        get throws {
            try _interop.get_TileId()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgs members

    /// Gets the reason that this app is being activated.
    /// - Returns: One of the enumeration values.
    public var kind: WindowsApplicationModelActivation_ActivationKind {
        get throws {
            try _iactivatedEventArgs.get_Kind()
        }
    }

    /// Gets the execution state of the app before this activation.
    /// - Returns: One of the enumeration values.
    public var previousExecutionState: WindowsApplicationModelActivation_ApplicationExecutionState {
        get throws {
            try _iactivatedEventArgs.get_PreviousExecutionState()
        }
    }

    /// Gets the splash screen object that provides information about the transition from the splash screen to the activated app.
    /// - Returns: The object that provides splash screen information.
    public var splashScreen: WindowsApplicationModelActivation_SplashScreen {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgs.get_SplashScreen())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs members

    /// Gets the identifier for the currently shown app view.
    /// - Returns: The identifier for the currently shown app view.
    public var currentlyShownApplicationViewId: Swift.Int32 {
        get throws {
            try _iapplicationViewActivatedEventArgs.get_CurrentlyShownApplicationViewId()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs members

    /// Indicates whether the app was pre-launched.
    /// - Returns: Indicates whether the app was pre-launched. **TRUE** indicates it was; otherwise, **FALSE**.
    public var prelaunchActivated: Swift.Bool {
        get throws {
            try _iprelaunchActivatedEventArgs.get_PrelaunchActivated()
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IViewSwitcherProvider members

    /// Gets the view switcher object that allows you to set the view for the application.
    /// - Returns: The view switcher
    public var viewSwitcher: WindowsUIViewManagement_ActivationViewSwitcher {
        get throws {
            try COM.NullResult.unwrap(_iviewSwitcherProvider.get_ViewSwitcher())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2 members

    /// Gets additional information that is provided when the user launches your app from a tile. This will be **null** if the app is not launched from its tile or if the app is launched on a platform that doesn't support this property.
    /// - Returns: Information about the tile that launched the app.
    public var tileActivatedInfo: WindowsApplicationModelActivation_TileActivatedInfo {
        get throws {
            try COM.NullResult.unwrap(_ilaunchActivatedEventArgs2.get_TileActivatedInfo())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser members

    /// Gets the user that the app was activated for.
    /// - Returns: The user that the app was activated for.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsWithUser.get_User())
        }
    }

    // MARK: Implementation details

    private var _iactivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs>? = nil

    internal var _iactivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs> {
        get throws {
            try _iactivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.self)
            }
        }
    }

    private var _iapplicationViewActivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs>? = nil

    internal var _iapplicationViewActivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs> {
        get throws {
            try _iapplicationViewActivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IApplicationViewActivatedEventArgs.self)
            }
        }
    }

    private var _iprelaunchActivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IPrelaunchActivatedEventArgs>? = nil

    internal var _iprelaunchActivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IPrelaunchActivatedEventArgs> {
        get throws {
            try _iprelaunchActivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IPrelaunchActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IPrelaunchActivatedEventArgs.self)
            }
        }
    }

    private var _iviewSwitcherProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider>? = nil

    internal var _iviewSwitcherProvider: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider> {
        get throws {
            try _iviewSwitcherProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IViewSwitcherProvider.self)
            }
        }
    }

    private var _ilaunchActivatedEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_ILaunchActivatedEventArgs2>? = nil

    internal var _ilaunchActivatedEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_ILaunchActivatedEventArgs2> {
        get throws {
            try _ilaunchActivatedEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_ILaunchActivatedEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_ILaunchActivatedEventArgs2.self)
            }
        }
    }

    private var _iactivatedEventArgsWithUser_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser>? = nil

    internal var _iactivatedEventArgsWithUser: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser> {
        get throws {
            try _iactivatedEventArgsWithUser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.self)
            }
        }
    }

    deinit {
        _iactivatedEventArgs_storage?.release()
        _iapplicationViewActivatedEventArgs_storage?.release()
        _iprelaunchActivatedEventArgs_storage?.release()
        _iviewSwitcherProvider_storage?.release()
        _ilaunchActivatedEventArgs2_storage?.release()
        _iactivatedEventArgsWithUser_storage?.release()
    }
}