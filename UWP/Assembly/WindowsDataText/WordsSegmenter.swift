// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A segmenter class that is able to segment provided text into words or word stems (depending on the particular language).
public final class WindowsDataText_WordsSegmenter: WindowsRuntime.WinRTImport<WindowsDataText_WordsSegmenterProjection> {
    // MARK: Windows.Data.Text.IWordsSegmenterFactory members

    public convenience init(_ language: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwordsSegmenterFactory.createWithLanguage(language)))
    }

    // MARK: Windows.Data.Text.IWordsSegmenter members

    /// Gets the language of the rules used by this WordsSegmenter object.
    /// - Returns: The BCP-47 language tag of the rules employed.
    public var resolvedLanguage: Swift.String {
        get throws {
            try _interop.get_ResolvedLanguage()
        }
    }

    /// Determines and returns the word or word stem which contains or follows a specified index into the provided text.
    /// - Parameter text: Provided text from which the word or word stem is to be returned.
    /// - Parameter startIndex: A zero-based index into *text*. It must be less than the length of *text*.
    /// - Returns: A WordSegment that represents the word or word stem.
    public func getTokenAt(_ text: Swift.String, _ startIndex: Swift.UInt32) throws -> WindowsDataText_WordSegment {
        try COM.NullResult.unwrap(_interop.getTokenAt(text, startIndex))
    }

    /// Determines and returns all of the words or word stems in the provided text.
    /// - Parameter text: Provided text containing words or word stems to be returned.
    /// - Returns: A collection of WordSegment objects that represent the words or word stems.
    public func getTokens(_ text: Swift.String) throws -> WindowsFoundationCollections_IVectorView<WindowsDataText_WordSegment?> {
        try COM.NullResult.unwrap(_interop.getTokens(text))
    }

    /// Calls the provided handler with two iterators that iterate through the words prior to and following a given index into the provided text.
    /// - Parameter text: Provided text containing words to be returned.
    /// - Parameter startIndex: A zero-based index into *text*. It must be less than the length of *text*.
    /// - Parameter handler: The function that receives the iterators.
    public func tokenize(_ text: Swift.String, _ startIndex: Swift.UInt32, _ handler: WindowsDataText_WordSegmentsTokenizingHandler?) throws {
        try _interop.tokenize(text, startIndex, handler)
    }

    // MARK: Implementation details

    private static var _iwordsSegmenterFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataText_IWordsSegmenterFactory>? = nil

    internal static var _iwordsSegmenterFactory: COM.COMInterop<CWinRT.SWRT_WindowsDataText_IWordsSegmenterFactory> {
        get throws {
            try _iwordsSegmenterFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Text.WordsSegmenter", id: CWinRT.SWRT_WindowsDataText_IWordsSegmenterFactory.iid)
            }
        }
    }
}