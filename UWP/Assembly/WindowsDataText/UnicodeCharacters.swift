// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a way for apps to get information about Unicode characters, per the Unicode Standard Annex #44.
public enum WindowsDataText_UnicodeCharacters {
    // MARK: Windows.Data.Text.IUnicodeCharactersStatics members

    /// Returns the supplementary Unicode character for the specified high and low surrogate pair.
    /// - Parameter highSurrogate: The high surrogate value. This must be in the proper range: 0xD800 <= *highSurrogate* <= 0xDBFF.
    /// - Parameter lowSurrogate: The low surrogate value. This must be in the proper range: 0xDC00 <= *lowSurrogate* <= 0xDFFF.
    /// - Returns: The supplementary Unicode character.
    public static func getCodepointFromSurrogatePair(_ highSurrogate: Swift.UInt32, _ lowSurrogate: Swift.UInt32) throws -> Swift.UInt32 {
        try _iunicodeCharactersStatics.getCodepointFromSurrogatePair(highSurrogate, lowSurrogate)
    }

    /// Returns the high and low surrogate pair values for the specified supplementary Unicode character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Parameter highSurrogate: The high surrogate value returned.
    /// - Parameter lowSurrogate: The low surrogate value returned.
    public static func getSurrogatePairFromCodepoint(_ codepoint: Swift.UInt32, _ highSurrogate: inout Swift.Unicode.UTF16.CodeUnit, _ lowSurrogate: inout Swift.Unicode.UTF16.CodeUnit) throws {
        try _iunicodeCharactersStatics.getSurrogatePairFromCodepoint(codepoint, &highSurrogate, &lowSurrogate)
    }

    /// Determines if a specified Unicode character is a high surrogate.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a high surrogate; otherwise **FALSE**.
    public static func isHighSurrogate(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isHighSurrogate(codepoint)
    }

    /// Determines if a specified Unicode character is a low surrogate.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a low surrogate; otherwise **FALSE**.
    public static func isLowSurrogate(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isLowSurrogate(codepoint)
    }

    /// Determines if a specified Unicode character is a supplementary character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a supplementary character; otherwise **FALSE**.
    public static func isSupplementary(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isSupplementary(codepoint)
    }

    /// Determines if a specified codepoint is a non-character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a non-character; otherwise **FALSE**.
    public static func isNoncharacter(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isNoncharacter(codepoint)
    }

    /// Determines if a specified Unicode character can be considered whitespace.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is whitespace; otherwise **FALSE**.
    public static func isWhitespace(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isWhitespace(codepoint)
    }

    /// Determines if a specified Unicode character can be considered alphabetic.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is alphabetic; otherwise **FALSE**.
    public static func isAlphabetic(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isAlphabetic(codepoint)
    }

    /// Determines if a specified Unicode character can be considered cased (uppercase, lowercase or titlecase).
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is cased; otherwise **FALSE**.
    public static func isCased(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isCased(codepoint)
    }

    /// Determines if a specified Unicode character can be considered an upper case character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is an upper case character; otherwise **FALSE**.
    public static func isUppercase(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isUppercase(codepoint)
    }

    /// Determines if a specified Unicode character can be considered a lower case character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a lower case character; otherwise **FALSE**.
    public static func isLowercase(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isLowercase(codepoint)
    }

    /// Determines if a specified Unicode character can be considered the start character of an identifier in programming.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is the start character of an identifier in programming; otherwise **FALSE**.
    public static func isIdStart(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isIdStart(codepoint)
    }

    /// Determines if a specified Unicode character can be considered a continuation character of an identifier in programming.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is a continuation character of an identifier in programming; otherwise **FALSE**.
    public static func isIdContinue(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isIdContinue(codepoint)
    }

    /// Determines if a specified Unicode character can be considered the beginning of a grapheme.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* is the beginning of a grapheme; otherwise **FALSE**.
    public static func isGraphemeBase(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isGraphemeBase(codepoint)
    }

    /// Determines if a specified Unicode character can be considered to continue a previous grapheme.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: **TRUE** if *codepoint* continues the previous grapheme; otherwise **FALSE**.
    public static func isGraphemeExtend(_ codepoint: Swift.UInt32) throws -> Swift.Bool {
        try _iunicodeCharactersStatics.isGraphemeExtend(codepoint)
    }

    /// Returns the UnicodeNumericType of the specified Unicode character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: The Unicode numeric type for *codepoint*.
    public static func getNumericType(_ codepoint: Swift.UInt32) throws -> WindowsDataText_UnicodeNumericType {
        try _iunicodeCharactersStatics.getNumericType(codepoint)
    }

    /// Returns the UnicodeGeneralCategory of the specified Unicode character.
    /// - Parameter codepoint: A Unicode character. This must be in the proper range: 0 <= *codepoint* <= 0x10FFFF.
    /// - Returns: The Unicode general category for *codepoint*.
    public static func getGeneralCategory(_ codepoint: Swift.UInt32) throws -> WindowsDataText_UnicodeGeneralCategory {
        try _iunicodeCharactersStatics.getGeneralCategory(codepoint)
    }

    // MARK: Implementation details

    private static var _iunicodeCharactersStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataText_IUnicodeCharactersStatics>? = nil

    internal static var _iunicodeCharactersStatics: COM.COMInterop<CWinRT.SWRT_WindowsDataText_IUnicodeCharactersStatics> {
        get throws {
            try _iunicodeCharactersStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Text.UnicodeCharacters", id: CWinRT.SWRT_WindowsDataText_IUnicodeCharactersStatics.iid)
            }
        }
    }
}