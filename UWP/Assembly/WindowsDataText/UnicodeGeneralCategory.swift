// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines the Unicode general category of a character.
public struct WindowsDataText_UnicodeGeneralCategory: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Uppercase letter. Signified by the Unicode designation "Lu" (letter, uppercase).
    public static let uppercaseLetter = Self()

    /// Lowercase letter. Signified by the Unicode designation "Ll" (letter, lowercase).
    public static let lowercaseLetter = Self(rawValue: 1)

    /// Titlecase letter. Signified by the Unicode designation "Lt" (letter, titlecase).
    public static let titlecaseLetter = Self(rawValue: 2)

    /// Modifier letter character, which is a free-standing spacing character that indicates modifications of a preceding letter. Signified by the Unicode designation "Lm" (letter, modifier).
    public static let modifierLetter = Self(rawValue: 3)

    /// Letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter. Signified by the Unicode designation "Lo" (letter, other).
    public static let otherLetter = Self(rawValue: 4)

    /// Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn" (mark, nonspacing),
    public static let nonspacingMark = Self(rawValue: 5)

    /// Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark, spacing combining).
    public static let spacingCombiningMark = Self(rawValue: 6)

    /// Enclosing mark character, which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark, enclosing).
    public static let enclosingMark = Self(rawValue: 7)

    /// Decimal digit character, which is a character in the range 0 through 9. Signified by the Unicode designation "Nd" (number, decimal digit).
    public static let decimalDigitNumber = Self(rawValue: 8)

    /// Number represented by a letter, instead of a decimal digit. For example, the Roman numeral for five, which is "V". The indicator is signified by the Unicode designation "Nl" (number, letter).
    public static let letterNumber = Self(rawValue: 9)

    /// Number that is neither a decimal digit nor a letter number. For example, the fraction 1/2. The indicator is signified by the Unicode designation "No" (number, other).
    public static let otherNumber = Self(rawValue: 10)

    /// Space character, which has no glyph but is not a control or format character. Signified by the Unicode designation "Zs" (separator, space).
    public static let spaceSeparator = Self(rawValue: 11)

    /// Character that is used to separate lines of text. Signified by the Unicode designation "Zl" (separator, line).
    public static let lineSeparator = Self(rawValue: 12)

    /// Character that is used to separate paragraphs. Signified by the Unicode designation "Zp" (separator, paragraph).
    public static let paragraphSeparator = Self(rawValue: 13)

    /// Control code character, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F. Signified by the Unicode designation "Cc" (other, control).
    public static let control = Self(rawValue: 14)

    /// Format character that affects the layout of text or the operation of text processes, but is not normally rendered. Signified by the Unicode designation "Cf" (other, format).
    public static let format = Self(rawValue: 15)

    /// High surrogate or low surrogate character. Surrogate code values are in the range U+D800 through U+DFFF. Signified by the Unicode designation "Cs" (other, surrogate).
    public static let surrogate = Self(rawValue: 16)

    /// Private-use character, with a Unicode value in the range U+E000 through U+F8FF. Signified by the Unicode designation "Co" (other, private use).
    public static let privateUse = Self(rawValue: 17)

    /// Connector punctuation character that connects two characters. Signified by the Unicode designation "Pc" (punctuation, connector).
    public static let connectorPunctuation = Self(rawValue: 18)

    /// Dash or hyphen character. Signified by the Unicode designation "Pd" (punctuation, dash).
    public static let dashPunctuation = Self(rawValue: 19)

    /// Opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Ps" (punctuation, open).
    public static let openPunctuation = Self(rawValue: 20)

    /// Closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces. Signified by the Unicode designation "Pe" (punctuation, close).
    public static let closePunctuation = Self(rawValue: 21)

    /// Opening or initial quotation mark character. Signified by the Unicode designation "Pi" (punctuation, initial quote).
    public static let initialQuotePunctuation = Self(rawValue: 22)

    /// Closing or final quotation mark character. Signified by the Unicode designation "Pf" (punctuation, final quote).
    public static let finalQuotePunctuation = Self(rawValue: 23)

    /// Punctuation character that is not a connector, a dash, open punctuation, close punctuation, an initial quote, or a final quote. Signified by the Unicode designation "Po" (punctuation, other).
    public static let otherPunctuation = Self(rawValue: 24)

    /// Mathematical symbol character, such as "+" or "=". Signified by the Unicode designation "Sm" (symbol, math).
    public static let mathSymbol = Self(rawValue: 25)

    /// Currency symbol character. Signified by the Unicode designation "Sc" (symbol, currency).
    public static let currencySymbol = Self(rawValue: 26)

    /// Modifier symbol character, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator. The indicator is signified by the Unicode designation "Sk" (symbol, modifier).
    public static let modifierSymbol = Self(rawValue: 27)

    /// Symbol character that is not a mathematical symbol, a currency symbol or a modifier symbol. Signified by the Unicode designation "So" (symbol, other).
    public static let otherSymbol = Self(rawValue: 28)

    /// Character that is not assigned to any Unicode category. Signified by the Unicode code designation "Cn" (other, not assigned).
    public static let notAssigned = Self(rawValue: 29)
}