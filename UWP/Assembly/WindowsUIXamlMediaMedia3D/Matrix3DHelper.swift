// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides static utilities for Matrix3D. C# and Microsoft Visual Basic code should use members of Matrix3D instead.
public final class WindowsUIXamlMediaMedia3D_Matrix3DHelper: WindowsRuntime.WinRTImport<WindowsUIXamlMediaMedia3D_Matrix3DHelperProjection> {
    // MARK: Windows.UI.Xaml.Media.Media3D.IMatrix3DHelperStatics members

    /// Gets a static constructed Matrix3D where the values established are representative of an **Identity** transform. C# and Microsoft Visual Basic code should use Identity instead.
    /// - Returns: A static constructed Matrix3D where the values established are representative of an **Identity** transform.
    public static var identity: WindowsUIXamlMediaMedia3D_Matrix3D {
        get throws {
            try _imatrix3DHelperStatics.get_Identity()
        }
    }

    /// Multiplies the specified matrices. C# and Microsoft Visual Basic code should use the multiplication operator instead. 
    /// - Parameter matrix1: The first matrix to multiply.
    /// - Parameter matrix2: The second matrix to multiply.
    /// - Returns: A new Matrix3D that is the result of multiplication.
    public static func multiply(_ matrix1: WindowsUIXamlMediaMedia3D_Matrix3D, _ matrix2: WindowsUIXamlMediaMedia3D_Matrix3D) throws -> WindowsUIXamlMediaMedia3D_Matrix3D {
        try _imatrix3DHelperStatics.multiply(matrix1, matrix2)
    }

    /// Defines a new Matrix3D value, using element values for each of the possible values of a Matrix3D structure. C# and Microsoft Visual Basic code should use Matrix3D constructor instead.
    /// - Parameter m11: The value to set for **M11** of the Matrix3D.
    /// - Parameter m12: The value to set for **M12** of the Matrix3D..
    /// - Parameter m13: The value to set for **M13** of the Matrix3D.
    /// - Parameter m14: The value to set for **M14** of the Matrix3D.
    /// - Parameter m21: The value to set for **M21** of the Matrix3D.
    /// - Parameter m22: The value to set for **M22** of the Matrix3D.
    /// - Parameter m23: The value to set for **M23** of the Matrix3D.
    /// - Parameter m24: The value to set for **M24** of the Matrix3D.
    /// - Parameter m31: The value to set for **M31** of the Matrix3D.
    /// - Parameter m32: The value to set for **M32** of the Matrix3D.
    /// - Parameter m33: The value to set for **M33** of the Matrix3D.
    /// - Parameter m34: The value to set for **M34** of the Matrix3D.
    /// - Parameter offsetX: The value to set for **OffsetX** (row 4, column 1) of the Matrix3D.
    /// - Parameter offsetY: The value to set for **OffsetY** (row 4, column 2) of the Matrix3D.
    /// - Parameter offsetZ: The value to set for **OffsetZ** (row 4, column 3) of the Matrix3D.
    /// - Parameter m44: The value to set for **M44** of the Matrix3D.
    /// - Returns: The created Matrix3D.
    public static func fromElements(_ m11: Swift.Double, _ m12: Swift.Double, _ m13: Swift.Double, _ m14: Swift.Double, _ m21: Swift.Double, _ m22: Swift.Double, _ m23: Swift.Double, _ m24: Swift.Double, _ m31: Swift.Double, _ m32: Swift.Double, _ m33: Swift.Double, _ m34: Swift.Double, _ offsetX: Swift.Double, _ offsetY: Swift.Double, _ offsetZ: Swift.Double, _ m44: Swift.Double) throws -> WindowsUIXamlMediaMedia3D_Matrix3D {
        try _imatrix3DHelperStatics.fromElements(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44)
    }

    /// Returns whether the provided Matrix3D is invertible. C# and Microsoft Visual Basic code should use HasInverse instead.
    /// - Parameter target: The target Matrix3D to evaluate.
    /// - Returns: **true** if the Matrix3D has an inverse; otherwise, **false**.
    public static func getHasInverse(_ target: WindowsUIXamlMediaMedia3D_Matrix3D) throws -> Swift.Bool {
        try _imatrix3DHelperStatics.getHasInverse(target)
    }

    /// Returns whether the provided Matrix3D represents an **Identity** transform. C# and Microsoft Visual Basic code should use IsIdentity instead.
    /// - Parameter target: The target Matrix3D to evaluate.
    /// - Returns: **true** if the Matrix3D represents an **Identity** transform; otherwise, **false**.
    public static func getIsIdentity(_ target: WindowsUIXamlMediaMedia3D_Matrix3D) throws -> Swift.Bool {
        try _imatrix3DHelperStatics.getIsIdentity(target)
    }

    /// Returns a potentially new Matrix3D value that represents the inversion of the provided Matrix3D. C# and Microsoft Visual Basic code should use Invert instead.
    /// - Parameter target: The target Matrix3D to evaluate.
    /// - Returns: The inversion result Matrix3D.
    public static func invert(_ target: WindowsUIXamlMediaMedia3D_Matrix3D) throws -> WindowsUIXamlMediaMedia3D_Matrix3D {
        try _imatrix3DHelperStatics.invert(target)
    }

    // MARK: Implementation details

    private static var _imatrix3DHelperStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaMedia3D_IMatrix3DHelperStatics>? = nil

    internal static var _imatrix3DHelperStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlMediaMedia3D_IMatrix3DHelperStatics> {
        get throws {
            try _imatrix3DHelperStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Media.Media3D.Matrix3DHelper", id: CWinRT.SWRT_WindowsUIXamlMediaMedia3D_IMatrix3DHelperStatics.iid)
            }
        }
    }
}