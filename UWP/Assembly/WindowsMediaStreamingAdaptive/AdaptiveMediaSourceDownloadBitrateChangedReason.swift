// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the reason that the download bitrate changed. This value is used for the AdaptiveMediaSource.DownloadBitrateChanged event.
public struct WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDownloadBitrateChangedReason: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// The estimated InboundBitsPerSecond was large enough to allow switching to a higher bitrate.
    public static let sufficientInboundBitsPerSecond = Self()

    /// The estimated InboundBitsPerSecond dropped, which required switching to a lower bitrate to avoid stalls in playback.
    public static let insufficientInboundBitsPerSecond = Self(rawValue: 1)

    /// The amount of data buffered ahead of the playback position dropped enough that a change in download bitrate was required in order to avoid stalling playback while rebuffering.
    public static let lowBufferLevel = Self(rawValue: 2)

    /// The bitrate changed as a result of seeking to a new position.  The system may switch to a lower bitrate temporarily in order to refill the buffer and resume playback faster.
    public static let positionChanged = Self(rawValue: 3)

    /// The bitrate changed as a result of a track selection change.  The system may switch to a lower bitrate temporarily in order to refill the buffer for the new track and resume playback faster.
    public static let trackSelectionChanged = Self(rawValue: 4)

    /// The bitrate changed as a result of the app changing one of the properties on the AdaptiveMediaSource such as the DesiredMinBitrate, DesiredMaxBitrate, or InitialBitrate.
    public static let desiredBitratesChanged = Self(rawValue: 5)

    /// The bitrate changed as a result of an error occurring with the previously selected bitrate. If there is a missing resource, or corruption is detected, or a download times out, the system may switch to a different bitrate in order to fill the buffer at the current download position to avoid gaps in playback.
    public static let errorInPreviousBitrate = Self(rawValue: 6)
}