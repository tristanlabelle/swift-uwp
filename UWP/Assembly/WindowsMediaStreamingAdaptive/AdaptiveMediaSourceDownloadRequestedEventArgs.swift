// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the DownloadRequested event.
public final class WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDownloadRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDownloadRequestedEventArgsProjection> {
    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs members

    /// Gets the byte range length of the media download request.
    /// - Returns: The byte range length of the media download request.
    public var resourceByteRangeLength: Swift.UInt64? {
        get throws {
            try _interop.get_ResourceByteRangeLength()
        }
    }

    /// Gets the byte range offset of the media download request.
    /// - Returns: The byte range offset of the media download request.
    public var resourceByteRangeOffset: Swift.UInt64? {
        get throws {
            try _interop.get_ResourceByteRangeOffset()
        }
    }

    /// Gets the resource type of the media download request.
    /// - Returns: The resource type of the media download request.
    public var resourceType: WindowsMediaStreamingAdaptive_AdaptiveMediaSourceResourceType {
        get throws {
            try _interop.get_ResourceType()
        }
    }

    /// Gets the resource URI of the media download request.
    /// - Returns: The resource URI of the media download request.
    public var resourceUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ResourceUri())
        }
    }

    /// Gets an AdaptiveMediaSourceDownloadResult object representing the result of the media download request.
    /// - Returns: The result of the media download request.
    public var result: WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDownloadResult {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Result())
        }
    }

    /// Gets a deferral that can be used to defer the completion of the DownloadRequested event so that the app can asynchronously download media content.
    /// - Returns: A deferral that can be used to defer the completion of the DownloadRequested event.
    public func getDeferral() throws -> WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDownloadRequestedDeferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs2 members

    /// Gets a time span representing the position within the timeline of the media segment to which the event applies.
    /// - Returns: A time span representing the position within the timeline of the media segment to which the event applies.
    public var position: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs2.get_Position()
        }
    }

    /// Gets a locally-unique identifier for the web request associated with the event.
    /// - Returns: A locally-unique identifier for the web request associated with the event.
    public var requestId: Swift.Int32 {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs2.get_RequestId()
        }
    }

    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDownloadRequestedEventArgs3 members

    /// Gets a string representing the content type associated with the event.
    /// - Returns: The content type associated with the event.
    public var resourceContentType: Swift.String {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs3.get_ResourceContentType()
        }
    }

    /// Gets a TimeSpan representing the duration of the resource associated with the event.
    /// - Returns: The duration of the resource associated with the event.
    public var resourceDuration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs3.get_ResourceDuration()
        }
    }

    // MARK: Implementation details

    private var _iadaptiveMediaSourceDownloadRequestedEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs2>? = nil

    internal var _iadaptiveMediaSourceDownloadRequestedEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs2> {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs2.self)
            }
        }
    }

    private var _iadaptiveMediaSourceDownloadRequestedEventArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs3>? = nil

    internal var _iadaptiveMediaSourceDownloadRequestedEventArgs3: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs3> {
        get throws {
            try _iadaptiveMediaSourceDownloadRequestedEventArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs3.iid).cast(to: CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDownloadRequestedEventArgs3.self)
            }
        }
    }

    deinit {
        _iadaptiveMediaSourceDownloadRequestedEventArgs2_storage?.release()
        _iadaptiveMediaSourceDownloadRequestedEventArgs3_storage?.release()
    }
}