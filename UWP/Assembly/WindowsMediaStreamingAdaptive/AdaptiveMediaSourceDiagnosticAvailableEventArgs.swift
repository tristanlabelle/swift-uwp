// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the DiagnosticAvailable event which is raised when diagnostic information for the adaptive media source becomes available.
public final class WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDiagnosticAvailableEventArgs: WindowsRuntime.WinRTImport<WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDiagnosticAvailableEventArgsProjection> {
    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs members

    /// Gets the bitrate of the web request to which the diagnostic information applies.
    /// - Returns: The bitrate of the web request to which the diagnostic information applies.
    public var bitrate: Swift.UInt32? {
        get throws {
            try _interop.get_Bitrate()
        }
    }

    /// Gets a value indicating the type of diagnostic that is associated with the event.
    /// - Returns: A value indicating the type of diagnostic that is associated with the event.
    public var diagnosticType: WindowsMediaStreamingAdaptive_AdaptiveMediaSourceDiagnosticType {
        get throws {
            try _interop.get_DiagnosticType()
        }
    }

    /// Gets the presentation playback position associated with the event.
    /// - Returns: The presentation playback position associated with the event.
    public var position: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets a locally-unique identifier for the web request associated with the event.
    /// - Returns: A locally-unique identifier for the web request associated with the event.
    public var requestId: Swift.Int32? {
        get throws {
            try _interop.get_RequestId()
        }
    }

    /// Gets the resource byte range length of the web request to which the diagnostic information applies.
    /// - Returns: The resource byte range length of the web request to which the diagnostic information applies.
    public var resourceByteRangeLength: Swift.UInt64? {
        get throws {
            try _interop.get_ResourceByteRangeLength()
        }
    }

    /// Gets the resource byte range offset of the web request to which the diagnostic information applies.
    /// - Returns: The resource byte range offset of the web request to which the diagnostic information applies.
    public var resourceByteRangeOffset: Swift.UInt64? {
        get throws {
            try _interop.get_ResourceByteRangeOffset()
        }
    }

    /// Gets the resource type of the web request to which the diagnostic information applies.
    /// - Returns: The resource type of the web request to which the diagnostic information applies.
    public var resourceType: WindowsFoundation_IReference<WindowsMediaStreamingAdaptive_AdaptiveMediaSourceResourceType>? {
        get throws {
            try _interop.get_ResourceType()
        }
    }

    /// Gets the resource URI of the web request to which the diagnostic information applies.
    /// - Returns: The resource URI of the web request to which the diagnostic information applies.
    public var resourceUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ResourceUri())
        }
    }

    /// Gets the segment ID of the media segment to which the diagnostic information applies.
    /// - Returns: The segment ID of the media segment to which the diagnostic information applies.
    public var segmentId: Swift.UInt64? {
        get throws {
            try _interop.get_SegmentId()
        }
    }

    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs2 members

    /// Gets the extended error code associated with the event.
    /// - Returns: The extended error code associated with the event.
    public var extendedError: COM.HResult {
        get throws {
            try _iadaptiveMediaSourceDiagnosticAvailableEventArgs2.get_ExtendedError()
        }
    }

    // MARK: Windows.Media.Streaming.Adaptive.IAdaptiveMediaSourceDiagnosticAvailableEventArgs3 members

    /// Gets a string representing the content type associated with the event.
    /// - Returns: The content type associated with the event.
    public var resourceContentType: Swift.String {
        get throws {
            try _iadaptiveMediaSourceDiagnosticAvailableEventArgs3.get_ResourceContentType()
        }
    }

    /// Gets a TimeSpan representing the duration of the resource associated with the event.
    /// - Returns: The duration of the resource associated with the event.
    public var resourceDuration: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _iadaptiveMediaSourceDiagnosticAvailableEventArgs3.get_ResourceDuration()
        }
    }

    // MARK: Implementation details

    private var _iadaptiveMediaSourceDiagnosticAvailableEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs2>? = nil

    internal var _iadaptiveMediaSourceDiagnosticAvailableEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs2> {
        get throws {
            try _iadaptiveMediaSourceDiagnosticAvailableEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs2.self)
            }
        }
    }

    private var _iadaptiveMediaSourceDiagnosticAvailableEventArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3>? = nil

    internal var _iadaptiveMediaSourceDiagnosticAvailableEventArgs3: COM.COMInterop<CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3> {
        get throws {
            try _iadaptiveMediaSourceDiagnosticAvailableEventArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3.iid).cast(to: CWinRT.SWRT_WindowsMediaStreamingAdaptive_IAdaptiveMediaSourceDiagnosticAvailableEventArgs3.self)
            }
        }
    }

    deinit {
        _iadaptiveMediaSourceDiagnosticAvailableEventArgs2_storage?.release()
        _iadaptiveMediaSourceDiagnosticAvailableEventArgs3_storage?.release()
    }
}