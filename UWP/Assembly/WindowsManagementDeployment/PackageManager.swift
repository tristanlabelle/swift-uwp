// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages the software available to a user.
public final class WindowsManagementDeployment_PackageManager: WindowsRuntime.WinRTImport<WindowsManagementDeployment_PackageManagerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsManagementDeployment_PackageManagerProjection.self))
    }

    // MARK: Windows.Management.Deployment.IPackageManager members

    public func addPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.addPackageAsync(packageUri, dependencyPackageUris, deploymentOptions))
    }

    public func updatePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.updatePackageAsync(packageUri, dependencyPackageUris, deploymentOptions))
    }

    /// Removes a package for the current user asynchronously and receives progress and status messages on the removal operation. Dependency packages are also removed for the user if no other packages installed for the user depend on them.
    /// - Parameter packageFullName: A string representation of the package identity to identify the package to be removed.
    /// - Returns: The status of the deployment request. The DeploymentResult contains the final returned value of the deployment operation, once it is completed. The DeploymentProgress can be used to obtain the percentage of completion over the entire course of the deployment operation.
    public func removePackageAsync(_ packageFullName: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.removePackageAsync(packageFullName))
    }

    public func stagePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.stagePackageAsync(packageUri, dependencyPackageUris))
    }

    public func registerPackageAsync(_ manifestUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.registerPackageAsync(manifestUri, dependencyPackageUris, deploymentOptions))
    }

    /// Retrieves information about a specified family of packages installed across all users.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location.
    public func findPackages() throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackages())
    }

    /// Finds all packages installed for the specified user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is **string.Empty**, the packages are retrieved for the current user.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location.
    public func findPackagesForUser(_ userSecurityId: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityId(userSecurityId))
    }

    /// Finds all installed packages with the specified name and publisher.
    /// - Parameter packageName: The package name. This parameter cannot be **null**.
    /// - Parameter packagePublisher: The package publisher. This parameter cannot be **null**.
    /// - Returns: If the method succeeds, an enumerable collection of package objects with the same package name and publisher name is returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified name and publisher are found, this method returns an empty list.
    public func findPackages(_ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByNamePublisher(packageName, packagePublisher))
    }

    /// Retrieves information about all packages with the specified package name and publisher name, installed for a specific user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is an empty string (""), the packages are retrieved for the current user.
    /// - Parameter packageName: The package name. This parameter cannot be **null**.
    /// - Parameter packagePublisher: The package publisher. This parameter cannot be **null**.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified name and publisher are found, this method returns an empty list.
    public func findPackagesForUser(_ userSecurityId: Swift.String, _ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdNamePublisher(userSecurityId, packageName, packagePublisher))
    }

    /// Finds the users who have installed the specified package.
    /// - Parameter packageFullName: The full name of the package. This parameter cannot be **null**.
    /// - Returns: If the method succeeds, an enumerable collection of package user information objects is returned. Each PackageUserInformation object in this collection contains the user security identifier (user SID) of a user for whom the specified package is installed. If no packages with the specified package full name are found, this method returns an empty list.
    public func findUsers(_ packageFullName: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsManagementDeployment_PackageUserInformation?> {
        try COM.NullResult.unwrap(_interop.findUsers(packageFullName))
    }

    /// Sets the state of a package, for example, to usable, tampered with, and so on.
    /// - Parameter packageFullName: The full name of the package.
    /// - Parameter packageState: One of the enumeration values.
    public func setPackageState(_ packageFullName: Swift.String, _ packageState: WindowsManagementDeployment_PackageState) throws {
        try _interop.setPackageState(packageFullName, packageState)
    }

    /// Retrieves information about the specified package installed for any user.
    /// - Parameter packageFullName: The full name of the package. This parameter cannot be null.
    /// - Returns: If this method succeeds it returns a package object that contains information about the specified package, including but not limited to its name, publisher, version, and install location. If the specified package is not found, this method returns **null**.
    public func findPackage(_ packageFullName: Swift.String) throws -> WindowsApplicationModel_Package {
        try COM.NullResult.unwrap(_interop.findPackageByPackageFullName(packageFullName))
    }

    /// Cleans up a specified package for a specified user. Used to cleanup packages installed for a user after their user profile is deleted.
    /// - Parameter packageName: The package name.
    /// - Parameter userSecurityId: The user security identifier (SID).
    /// - Returns: The status of the deployment request. The DeploymentResult contains the final returned value of the deployment operation, once it is completed. The DeploymentProgress can be used to obtain the percentage of completion over the entire course of the deployment operation.
    public func cleanupPackageForUserAsync(_ packageName: Swift.String, _ userSecurityId: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_interop.cleanupPackageForUserAsync(packageName, userSecurityId))
    }

    /// Retrieves information about a specified family of packages installed across all users.
    /// - Parameter packageFamilyName: The package family name. This parameter cannot be **null**.
    /// - Returns: If the method succeeds, an enumerable collection of package objects with the same package family name will be returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified package family name are found, this method returns an empty list.
    public func findPackages(_ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByPackageFamilyName(packageFamilyName))
    }

    /// Retrieves information about a specified family of packages installed for a specific user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is String.Empty, the packages are retrieved for the current user.
    /// - Parameter packageFamilyName: The family name of packages to find. This parameter cannot be **null**.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each Package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified package family name are found, this method returns an empty list.
    public func findPackagesForUser(_ userSecurityId: Swift.String, _ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdPackageFamilyName(userSecurityId, packageFamilyName))
    }

    /// Retrieves information about a specific package installed for a specific user or for all users.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is string.Empty, the packages are retrieved for the current user.
    /// - Parameter packageFullName: The full name of the package.
    /// - Returns: The package.
    public func findPackageForUser(_ userSecurityId: Swift.String, _ packageFullName: Swift.String) throws -> WindowsApplicationModel_Package {
        try COM.NullResult.unwrap(_interop.findPackageByUserSecurityIdPackageFullName(userSecurityId, packageFullName))
    }

    // MARK: Windows.Management.Deployment.IPackageManager2 members

    /// Removes a package for the current user asynchronously and receives progress and status messages on the removal operation. Dependency packages are also removed for the user if no other packages installed for the user depend on them.
    /// - Parameter packageFullName: A string representation of the package identity to identify the package to be removed.
    /// - Parameter removalOptions: A RemovalOptions -typed value that modifies the removal operation.
    /// - Returns: A pointer that receives the address of an object that implements the IAsyncOperationWithProgress interface.
    public func removePackageAsync(_ packageFullName: Swift.String, _ removalOptions: WindowsManagementDeployment_RemovalOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager2.removePackageWithOptionsAsync(packageFullName, removalOptions))
    }

    public func stagePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager2.stagePackageWithOptionsAsync(packageUri, dependencyPackageUris, deploymentOptions))
    }

    public func registerPackageByFullNameAsync(_ mainPackageFullName: Swift.String, _ dependencyPackageFullNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager2.registerPackageByFullNameAsync(mainPackageFullName, dependencyPackageFullNames, deploymentOptions))
    }

    /// Retrieves information about specific package types that are installed across all users.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesWithPackageTypes(_ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesWithPackageTypes(packageTypes))
    }

    /// Finds packages of specific types that are installed for the specified user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is **null**, the packages are retrieved for the current user. Any user SID other than that of current user requires administrative privileges.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesByUserSecurityIdWithPackageTypes(userSecurityId, packageTypes))
    }

    /// Finds all installed packages of specific types with the specified name and publisher.
    /// - Parameter packageName: The package name. This parameter can't be **null**.
    /// - Parameter packagePublisher: The package publisher. This parameter can't be **null**.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects with the same package name and publisher name is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified name and publisher are found, this method returns an empty list. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesWithPackageTypes(_ packageName: Swift.String, _ packagePublisher: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesByNamePublisherWithPackageTypes(packageName, packagePublisher, packageTypes))
    }

    /// Retrieves information about packages of specific types with the specified package name and publisher name, installed for a specific user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is **null**, the packages are retrieved for the current user. Any user SID other than that of current user requires administrative privileges.
    /// - Parameter packageName: The package name. This parameter can't be **null**.
    /// - Parameter packagePublisher: The package publisher. This parameter can't be **null**.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified package publisher and family name are found, this method returns an empty list. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageName: Swift.String, _ packagePublisher: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesByUserSecurityIdNamePublisherWithPackageTypes(userSecurityId, packageName, packagePublisher, packageTypes))
    }

    /// Retrieves information about a specified family of packages and specific package types that are installed across all users.
    /// - Parameter packageFamilyName: The package family name. This parameter can't be **null**.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects with the same package family name is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified package family name are found, this method returns an empty list. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesWithPackageTypes(_ packageFamilyName: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesByPackageFamilyNameWithPackageTypes(packageFamilyName, packageTypes))
    }

    /// Retrieves information about a specified family of packages and of specific types that are installed for the specified user.
    /// - Parameter userSecurityId: The user security identifier (SID). If this parameter is **String.Empty**, the packages are retrieved for the current user. Any user SID other than that of current user requires administrative privileges.
    /// - Parameter packageFamilyName: The family name of packages to find. This parameter can't be **null**.
    /// - Parameter packageTypes: A combination of PackageTypes -typed values that are combined by using a bitwise OR operation. The resulting value specifies the types of packages to be included in the result set.
    /// - Returns: If the method succeeds, an enumerable collection of package objects is returned. Each package object in this collection contains information about the package, including but not limited to its name, publisher, version, and install location. If no packages with the specified package family name are found, this method returns an empty list. The *packageTypes* parameter determines the types of packages to return.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageFamilyName: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IIterable<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager2.findPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(userSecurityId, packageFamilyName, packageTypes))
    }

    /// Stages a package's roaming data to the system without registering the package. Call this method after staging the package but before registering the package for a particular user.
    /// - Parameter packageFullName: The full name of the package.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func stageUserDataAsync(_ packageFullName: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager2.stageUserDataAsync(packageFullName))
    }

    // MARK: Windows.Management.Deployment.IPackageManager3 members

    /// Creates a new volume. The caller must be a member of the administrators group.
    /// - Parameter packageStorePath: The absolute path of the package store.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperation** interface and returns the newly added PackageVolume.
    public func addPackageVolumeAsync(_ packageStorePath: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsManagementDeployment_PackageVolume?> {
        try COM.NullResult.unwrap(_ipackageManager3.addPackageVolumeAsync(packageStorePath))
    }

    public func addPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.addPackageToVolumeAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume))
    }

    /// Clears the status of a package.
    /// - Parameter packageFullName: The full name of the package.
    /// - Parameter status: One of the enumeration values that specifies the status to clear.
    public func clearPackageStatus(_ packageFullName: Swift.String, _ status: WindowsManagementDeployment_PackageStatus) throws {
        try _ipackageManager3.clearPackageStatus(packageFullName, status)
    }

    public func registerPackageAsync(_ manifestUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ appDataVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.registerPackageWithAppDataVolumeAsync(manifestUri, dependencyPackageUris, deploymentOptions, appDataVolume))
    }

    /// Gets the specified volume.
    /// - Parameter volumeName: The volume media ID, which is a GUID value.
    /// - Returns: The requested volume.
    public func findPackageVolume(_ volumeName: Swift.String) throws -> WindowsManagementDeployment_PackageVolume {
        try COM.NullResult.unwrap(_ipackageManager3.findPackageVolumeByName(volumeName))
    }

    /// Gets all the known volumes, regardless of their current state.
    /// - Returns: All the known volumes, regardless of their current state.
    public func findPackageVolumes() throws -> WindowsFoundationCollections_IIterable<WindowsManagementDeployment_PackageVolume?> {
        try COM.NullResult.unwrap(_ipackageManager3.findPackageVolumes())
    }

    /// Gets the default package volume, which is the target of deployment operations such as the AddPackageAsync method.
    /// - Returns: The default package volume, which is the target of deployment operations such as the AddPackageAsync method.
    public func getDefaultPackageVolume() throws -> WindowsManagementDeployment_PackageVolume {
        try COM.NullResult.unwrap(_ipackageManager3.getDefaultPackageVolume())
    }

    /// Moves the specified package to the specified volume using the specified deployment options.
    /// - Parameter packageFullName: The full name of the package to move.
    /// - Parameter deploymentOptions: One of the enumeration values that specifies a deployment option.
    /// - Parameter targetVolume: The target volume.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func movePackageToVolumeAsync(_ packageFullName: Swift.String, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.movePackageToVolumeAsync(packageFullName, deploymentOptions, targetVolume))
    }

    /// Removes the specified volume.
    /// - Parameter volume: The volume to remove.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func removePackageVolumeAsync(_ volume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.removePackageVolumeAsync(volume))
    }

    /// Sets the default package volume, which is the target of deployment operations such as the AddPackageAsync method.
    /// - Parameter volume: The default package volume, which is the target of deployment operations such as the AddPackageAsync method.
    public func setDefaultPackageVolume(_ volume: WindowsManagementDeployment_PackageVolume?) throws {
        try _ipackageManager3.setDefaultPackageVolume(volume)
    }

    /// Sets the status of the specified package.
    /// - Parameter packageFullName: The full name of the package.
    /// - Parameter status: One of the enumeration values that describes the status of the package.
    public func setPackageStatus(_ packageFullName: Swift.String, _ status: WindowsManagementDeployment_PackageStatus) throws {
        try _ipackageManager3.setPackageStatus(packageFullName, status)
    }

    /// Sets the specified volume to an offline state. The caller must be a member of the administrators group.
    /// - Parameter packageVolume: The volume to take offline.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func setPackageVolumeOfflineAsync(_ packageVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.setPackageVolumeOfflineAsync(packageVolume))
    }

    /// Sets the specified volume to an online state. The caller must be a member of the administrators group.
    /// - Parameter packageVolume: The volume to bring online.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func setPackageVolumeOnlineAsync(_ packageVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.setPackageVolumeOnlineAsync(packageVolume))
    }

    public func stagePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.stagePackageToVolumeAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume))
    }

    /// Stages a package's roaming data to the system without registering the package. Call this method after staging the package but before registering the package for a particular user.
    /// - Parameter packageFullName: The full name of the package.
    /// - Parameter deploymentOptions: A bitwise combination of enumeration values from the DeploymentOptions enumeration that specify deployment options.
    /// - Returns: An object that the caller can observe to track progress and completion for the call. The object implements the **IAsyncOperationWithProgress** pattern.
    public func stageUserDataAsync(_ packageFullName: Swift.String, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager3.stageUserDataWithOptionsAsync(packageFullName, deploymentOptions))
    }

    // MARK: Windows.Management.Deployment.IPackageManager4 members

    /// Gets the package volumes on the device.
    /// - Returns: Returns an asynchronous operation that completes with the package volumes.
    public func getPackageVolumesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsManagementDeployment_PackageVolume?>?> {
        try COM.NullResult.unwrap(_ipackageManager4.getPackageVolumesAsync())
    }

    // MARK: Windows.Management.Deployment.IPackageManager5 members

    /// Get the debugging settings for package deployment.
    /// - Returns: The debugging settings for package deployment.
    public var debugSettings: WindowsManagementDeployment_PackageManagerDebugSettings {
        get throws {
            try COM.NullResult.unwrap(_ipackageManager5.get_DebugSettings())
        }
    }

    public func addPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ externalPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager5.addPackageToVolumeAndOptionalPackagesAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris))
    }

    public func stagePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ externalPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager5.stagePackageToVolumeAndOptionalPackagesAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris))
    }

    public func registerPackageByFamilyNameAsync(_ mainPackageFamilyName: Swift.String, _ dependencyPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ appDataVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager5.registerPackageByFamilyNameAndOptionalPackagesAsync(mainPackageFamilyName, dependencyPackageFamilyNames, deploymentOptions, appDataVolume, optionalPackageFamilyNames))
    }

    // MARK: Windows.Management.Deployment.IPackageManager6 members

    /// Enables an app package to be installed for all users on a device.
    /// - Parameter packageFamilyName: The FamilyName of the app package to be installed.
    /// - Returns: The progress and the result of the app package deployment.
    public func provisionPackageForAllUsersAsync(_ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.provisionPackageForAllUsersAsync(packageFamilyName))
    }

    /// Allows single or multiple app packages to be installed with an .appinstaller file.
    /// - Parameter appInstallerFileUri: A Uri to the .appinstaller file.
    /// - Parameter options: The options as specified in AddPackageByAppInstallerOptions.
    /// - Parameter targetVolume: The volume that the package is installed to.
    public func addPackageByAppInstallerFileAsync(_ appInstallerFileUri: WindowsFoundation_Uri?, _ options: WindowsManagementDeployment_AddPackageByAppInstallerOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.addPackageByAppInstallerFileAsync(appInstallerFileUri, options, targetVolume))
    }

    /// Allows single or multiple app packages to be installed with an .appinstaller file. This will perform a SmartScreen filter and user verification before installing the app package(s).
    /// - Parameter appInstallerFileUri: A Uri to the .appinstaller file.
    /// - Parameter options: The options as specified in AddPackageByAppInstallerOptions.
    /// - Parameter targetVolume: The volume that the package is installed to.
    public func requestAddPackageByAppInstallerFileAsync(_ appInstallerFileUri: WindowsFoundation_Uri?, _ options: WindowsManagementDeployment_AddPackageByAppInstallerOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.requestAddPackageByAppInstallerFileAsync(appInstallerFileUri, options, targetVolume))
    }

    public func addPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ options: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ packageUrisToInstall: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ relatedPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.addPackageToVolumeAndRelatedSetAsync(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris))
    }

    public func stagePackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ options: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ packageUrisToInstall: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ relatedPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.stagePackageToVolumeAndRelatedSetAsync(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris))
    }

    public func requestAddPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ relatedPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager6.requestAddPackageAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris))
    }

    // MARK: Windows.Management.Deployment.IPackageManager7 members

    public func requestAddPackageAsync(_ packageUri: WindowsFoundation_Uri?, _ dependencyPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ deploymentOptions: WindowsManagementDeployment_DeploymentOptions, _ targetVolume: WindowsManagementDeployment_PackageVolume?, _ optionalPackageFamilyNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ relatedPackageUris: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?, _ packageUrisToInstall: WindowsFoundationCollections_IIterable<WindowsFoundation_Uri?>?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager7.requestAddPackageAndRelatedSetAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris, packageUrisToInstall))
    }

    // MARK: Windows.Management.Deployment.IPackageManager8 members

    /// Deprovisions an app package so new users on the device will no longer have the app automatically installed.
    /// - Parameter packageFamilyName: The package family name of the package to be deprovisioned.
    /// - Returns: An async operation with the current DeploymentProgress status.
    public func deprovisionPackageForAllUsersAsync(_ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager8.deprovisionPackageForAllUsersAsync(packageFamilyName))
    }

    // MARK: Windows.Management.Deployment.IPackageManager9 members

    /// Gets the list of all installed packages on the device.
    /// - Returns: The list of all installed packages on the device.
    public func findProvisionedPackages() throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_ipackageManager9.findProvisionedPackages())
    }

    /// Adds a package (the main package) and any additional dependency packages for the current user, using the specified deployment options.
    /// - Parameter packageUri: The URI of the package to add. The URI must follow the file URI scheme (file://) since the only supported URI schemes are local file paths and local network paths.
    /// - Parameter options: The package deployment options for the operation.
    /// - Returns: The status of the deployment request. The DeploymentResult contains the final returned value of the deployment operation, once it is completed. The DeploymentProgress can be used to obtain the percentage of completion over the entire course of the deployment operation.
    public func addPackageByUriAsync(_ packageUri: WindowsFoundation_Uri?, _ options: WindowsManagementDeployment_AddPackageOptions?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager9.addPackageByUriAsync(packageUri, options))
    }

    /// Stages a package to the system without registering it, using the specified deployment options.
    /// - Parameter packageUri: The source URI of the main package.
    /// - Parameter options: The package deployment options for the operation.
    /// - Returns: The status of the deployment request. The DeploymentResult contains the final returned value of the deployment operation, once it is completed. The DeploymentProgress can be used to obtain the percentage of completion over the entire course of the deployment operation.
    public func stagePackageByUriAsync(_ packageUri: WindowsFoundation_Uri?, _ options: WindowsManagementDeployment_StagePackageOptions?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager9.stagePackageByUriAsync(packageUri, options))
    }

    /// Registers a package (the main package) and its dependency packages for the current user, using the specified deployment options.
    /// - Parameter manifestUri: The URI of the manifest for the main package.
    /// - Parameter options: The package registration options for the operation.
    /// - Returns: The status of the deployment request. The DeploymentResult contains the final returned value of the deployment operation, once it is completed. The DeploymentProgress can be used to obtain the percentage of completion over the entire course of the deployment operation.
    public func registerPackageByUriAsync(_ manifestUri: WindowsFoundation_Uri?, _ options: WindowsManagementDeployment_RegisterPackageOptions?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager9.registerPackageByUriAsync(manifestUri, options))
    }

    public func registerPackagesByFullNameAsync(_ packageFullNames: WindowsFoundationCollections_IIterable<Swift.String>?, _ options: WindowsManagementDeployment_RegisterPackageOptions?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager9.registerPackagesByFullNameAsync(packageFullNames, options))
    }

    /// Sets a value that indicates whether the specified app package currently prefers to run as a full app or a stub app.
    /// - Parameter packageFamilyName: The family name of the app package to configure.
    /// - Parameter useStub: A value that indicates whether the specified app package currently prefers to run as a full app or a stub app.
    public func setPackageStubPreference(_ packageFamilyName: Swift.String, _ useStub: WindowsManagementDeployment_PackageStubPreference) throws {
        try _ipackageManager9.setPackageStubPreference(packageFamilyName, useStub)
    }

    /// Gets a value that indicates whether the specified app package currently prefers to run as a full app or a stub app.
    /// - Parameter packageFamilyName: The family name of the app package to query.
    /// - Returns: A value that indicates whether the specified app package currently prefers to run as a full app or a stub app.
    public func getPackageStubPreference(_ packageFamilyName: Swift.String) throws -> WindowsManagementDeployment_PackageStubPreference {
        try _ipackageManager9.getPackageStubPreference(packageFamilyName)
    }

    // MARK: Windows.Management.Deployment.IPackageManager10 members

    public func provisionPackageForAllUsersAsync(_ mainPackageFamilyName: Swift.String, _ options: WindowsManagementDeployment_PackageAllUserProvisioningOptions?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsManagementDeployment_DeploymentResult?, WindowsManagementDeployment_DeploymentProgress> {
        try COM.NullResult.unwrap(_ipackageManager10.provisionPackageForAllUsersWithOptionsAsync(mainPackageFamilyName, options))
    }

    // MARK: Implementation details

    private var _ipackageManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager2>? = nil

    internal var _ipackageManager2: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager2> {
        get throws {
            try _ipackageManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager2.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager2.self)
            }
        }
    }

    private var _ipackageManager3_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager3>? = nil

    internal var _ipackageManager3: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager3> {
        get throws {
            try _ipackageManager3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager3.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager3.self)
            }
        }
    }

    private var _ipackageManager4_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager4>? = nil

    internal var _ipackageManager4: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager4> {
        get throws {
            try _ipackageManager4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager4.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager4.self)
            }
        }
    }

    private var _ipackageManager5_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager5>? = nil

    internal var _ipackageManager5: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager5> {
        get throws {
            try _ipackageManager5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager5.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager5.self)
            }
        }
    }

    private var _ipackageManager6_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager6>? = nil

    internal var _ipackageManager6: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager6> {
        get throws {
            try _ipackageManager6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager6.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager6.self)
            }
        }
    }

    private var _ipackageManager7_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager7>? = nil

    internal var _ipackageManager7: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager7> {
        get throws {
            try _ipackageManager7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager7.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager7.self)
            }
        }
    }

    private var _ipackageManager8_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager8>? = nil

    internal var _ipackageManager8: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager8> {
        get throws {
            try _ipackageManager8_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager8.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager8.self)
            }
        }
    }

    private var _ipackageManager9_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager9>? = nil

    internal var _ipackageManager9: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager9> {
        get throws {
            try _ipackageManager9_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager9.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager9.self)
            }
        }
    }

    private var _ipackageManager10_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager10>? = nil

    internal var _ipackageManager10: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageManager10> {
        get throws {
            try _ipackageManager10_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageManager10.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageManager10.self)
            }
        }
    }

    deinit {
        _ipackageManager2_storage?.release()
        _ipackageManager3_storage?.release()
        _ipackageManager4_storage?.release()
        _ipackageManager5_storage?.release()
        _ipackageManager6_storage?.release()
        _ipackageManager7_storage?.release()
        _ipackageManager8_storage?.release()
        _ipackageManager9_storage?.release()
        _ipackageManager10_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Management.Deployment.PackageManager", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}