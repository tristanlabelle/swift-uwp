// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a package storage volume.
public final class WindowsManagementDeployment_PackageVolume: WindowsRuntime.WinRTImport<WindowsManagementDeployment_PackageVolumeProjection> {
    // MARK: Windows.Management.Deployment.IPackageVolume members

    /// Describes whether a volume is in an offline state.
    /// - Returns: true if the volume is in an offline state; otherwise, false.
    public var isOffline: Swift.Bool {
        get throws {
            try _interop.get_IsOffline()
        }
    }

    /// Describes whether a volume is an internal system volume mapped to the %SYSTEMDRIVER% environment variable.
    /// - Returns: true if the volume is an internal system volume mapped to the %SYSTEMDRIVER% environment variable; otherwise, false.
    public var isSystemVolume: Swift.Bool {
        get throws {
            try _interop.get_IsSystemVolume()
        }
    }

    /// Gets the path of the last known volume mount point.
    /// - Returns: The path of the last known volume mount point.
    public var mountPoint: Swift.String {
        get throws {
            try _interop.get_MountPoint()
        }
    }

    /// Gets the media ID of the volume.
    /// - Returns: The media ID of the volume.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets the absolute path for the package store on the volume.
    /// - Returns: The absolute path for the package store on the volume.
    public var packageStorePath: Swift.String {
        get throws {
            try _interop.get_PackageStorePath()
        }
    }

    /// Gets a value that specifies whether the volume supports the creation of hard links in its file system.
    /// - Returns: true if the volume supports the creation of hard links in its file system; otherwise, false.
    public var supportsHardLinks: Swift.Bool {
        get throws {
            try _interop.get_SupportsHardLinks()
        }
    }

    /// Gets a collection of info about all installed instances of all packages for all registered users.
    /// - Returns: A collection of info about the specified packages.
    public func findPackages() throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackages())
    }

    /// Gets a collection of info about all installed instances of the specified package from the specified publisher for all registered users.
    /// - Parameter packageName: The full name of the package.
    /// - Parameter packagePublisher: The publisher of the package.
    /// - Returns: A collection of info about the specified packages.
    public func findPackages(_ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByNamePublisher(packageName, packagePublisher))
    }

    /// Gets a collection of info about all installed instances of the specified package for all registered users.
    /// - Parameter packageFamilyName: The package family name of the package.
    /// - Returns: A collection of info about the specified packages.
    public func findPackages(_ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByPackageFamilyName(packageFamilyName))
    }

    /// Gets a collection of info about all installed instances of all packages with the specified package types for all registered users.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesWithPackageTypes(_ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesWithPackageTypes(packageTypes))
    }

    /// Gets a collection of info about all installed instances of the specified package from the specified publisher with the specified package types for all registered users.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Parameter packageName: The full name of the package.
    /// - Parameter packagePublisher: The publisher of the package.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesWithPackageTypes(_ packageTypes: WindowsManagementDeployment_PackageTypes, _ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByNamePublisherWithPackagesTypes(packageTypes, packageName, packagePublisher))
    }

    /// Gets a collection of info about all installed instances of the specified package with the specified package types for all registered users.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Parameter packageFamilyName: The package family name.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesWithPackageTypes(_ packageTypes: WindowsManagementDeployment_PackageTypes, _ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByPackageFamilyNameWithPackageTypes(packageTypes, packageFamilyName))
    }

    /// Gets a collection of info about all installed instances of the specified package for all registered users.
    /// - Parameter packageFullName: The full name of the package.
    /// - Returns: A collection of info about all installed instances of the specified package for all registered users.
    public func findPackage(_ packageFullName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackageByPackageFullName(packageFullName))
    }

    /// Gets a collection of info about all installed instances of all packages for the specified user or users.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUser(_ userSecurityId: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityId(userSecurityId))
    }

    /// Gets a collection of info about all installed instances of the specified package from the specified publisher for the specified user or users.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageName: The full name of the package.
    /// - Parameter packagePublisher: The publisher of the package.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUser(_ userSecurityId: Swift.String, _ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdNamePublisher(userSecurityId, packageName, packagePublisher))
    }

    /// Gets a collection of info about all installed instances of the specified package for the specified user or users.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageFamilyName: The package family name.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUser(_ userSecurityId: Swift.String, _ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdPackageFamilyName(userSecurityId, packageFamilyName))
    }

    /// Gets a collection of info about all installed instances of all packages for the specified user or users and with the specified package types.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdWithPackageTypes(userSecurityId, packageTypes))
    }

    /// Gets a collection of info about all installed instances of the specified package for the specified user or users and with the specified package types.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Parameter packageName: The full name of the package.
    /// - Parameter packagePublisher: The publisher of the package.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes, _ packageName: Swift.String, _ packagePublisher: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdNamePublisherWithPackageTypes(userSecurityId, packageTypes, packageName, packagePublisher))
    }

    /// Gets a collection of info about all installed instances of the specified package for the specified user or users and with the specified package types.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageTypes: A bitwise combination of the enumeration values that specifies the types of packages to return.
    /// - Parameter packageFamilyName: The package family name.
    /// - Returns: A collection of info about the specified packages.
    public func findPackagesForUserWithPackageTypes(_ userSecurityId: Swift.String, _ packageTypes: WindowsManagementDeployment_PackageTypes, _ packageFamilyName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypes(userSecurityId, packageTypes, packageFamilyName))
    }

    /// Gets a collection of info about the installed instances of the specified package for the specified user or users.
    /// - Parameter userSecurityId: The security identifier (SID) of the user or users. An empty string denotes the current user. The Everyone SID (S-1-1-0) denotes all users. Any SID other than that of the current user requires administrative privileges.
    /// - Parameter packageFullName: The full name of the package.
    /// - Returns: A collection of info about all installed instances of the specified package for the specified user or users.
    public func findPackageForUser(_ userSecurityId: Swift.String, _ packageFullName: Swift.String) throws -> WindowsFoundationCollections_IVector<WindowsApplicationModel_Package?> {
        try COM.NullResult.unwrap(_interop.findPackageByUserSecurityIdPackageFullName(userSecurityId, packageFullName))
    }

    // MARK: Windows.Management.Deployment.IPackageVolume2 members

    /// Gets a boolean that indicates if APPX installing is supported.
    /// - Returns: The boolean that indicates that APPX installing is supported.
    public var isAppxInstallSupported: Swift.Bool {
        get throws {
            try _ipackageVolume2.get_IsAppxInstallSupported()
        }
    }

    /// Gets a boolean that indicates if full-trust packages are supported.
    /// - Returns: A boolean that indicates if full-trust packages are supported.
    public var isFullTrustPackageSupported: Swift.Bool {
        get throws {
            try _ipackageVolume2.get_IsFullTrustPackageSupported()
        }
    }

    /// Gets the available space.
    /// - Returns: Returns an asynchronous operation that will complete with the available space.
    public func getAvailableSpaceAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.UInt64> {
        try COM.NullResult.unwrap(_ipackageVolume2.getAvailableSpaceAsync())
    }

    // MARK: Implementation details

    private var _ipackageVolume2_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageVolume2>? = nil

    internal var _ipackageVolume2: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IPackageVolume2> {
        get throws {
            try _ipackageVolume2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IPackageVolume2.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IPackageVolume2.self)
            }
        }
    }

    deinit {
        _ipackageVolume2_storage?.release()
    }
}