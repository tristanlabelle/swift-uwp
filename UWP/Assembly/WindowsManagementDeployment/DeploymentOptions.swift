// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the package deployment options.
public struct WindowsManagementDeployment_DeploymentOptions: OptionSet, Hashable, Codable {
    public var rawValue: Swift.UInt32

    public init(rawValue: Swift.UInt32 = 0) {
        self.rawValue = rawValue
    }

    /// The default behavior is used.
    public static let none = Self()

    /// If this package, or any package that depends on this package, is currently in use, the processes associated with the package are shut down forcibly so that registration can continue.
    public static let forceApplicationShutdown = Self(rawValue: 1)

    /// When you set this option, the app is installed in development mode. For info about development mode, see **Remarks**. Use this option to enable key app development scenarios.You can't use this option in conjunction with a bundle package. If you use this option with a bundle package, your call returns ERROR_INSTALL_FAILED.
    public static let developmentMode = Self(rawValue: 2)

    /// When you set this option, the app is instructed to skip resource applicability checks. This effectively stages or registers all resource packages that a user passes in to the command, which forces applicability for all packages contained in a bundle. If a user passes in a bundle, all contained resource packages will be registered. Windows only.
    public static let installAllResources = Self(rawValue: 32)

    /// If this package is currently in use, the processes associated with the package are shut down forcibly so that registration can continue.
    public static let forceTargetApplicationShutdown = Self(rawValue: 64)

    /// When you set this option, only the required content group will be staged. An app can be installed as a package with the required content group alone.
    public static let requiredContentGroupOnly = Self(rawValue: 256)

    /// Force a specific version of a package to be staged/registered, regardless of if a higher version is already staged/registered.
    public static let forceUpdateFromAnyVersion = Self(rawValue: 262144)

    /// In the case of a failed deployment, do not remove files that have been created on the target machine during the install process.
    public static let retainFilesOnFailure = Self(rawValue: 2097152)

    /// When you set this option, the package will be staged in place. This field is useful for notifying the system to prepare for app registration in virtual desktop scenarios.
    public static let stageInPlace = Self(rawValue: 4194304)
}