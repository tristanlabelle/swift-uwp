// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the result of a deployment request.
public final class WindowsManagementDeployment_DeploymentResult: WindowsRuntime.WinRTImport<WindowsManagementDeployment_DeploymentResultProjection> {
    // MARK: Windows.Management.Deployment.IDeploymentResult members

    /// Gets the activity identifier used to look up an event in Windows Event Viewer. Gets the activity identifier used to look up an event. All events of a deployment operation are logged with the same **activityId**.
    /// - Returns: The activity identifier.
    public var activityId: Foundation.UUID {
        get throws {
            try _interop.get_ActivityId()
        }
    }

    /// Gets extended error text for the error if the deployment operation is not successful.
    /// - Returns: The extended error text.
    public var errorText: Swift.String {
        get throws {
            try _interop.get_ErrorText()
        }
    }

    /// The extended error code can be used to distinguish a specific error condition which needs to be handled differently from the general error indicated by the return code. The extended error code may provide a more specific reason for the failure that caused the general error. Also, it usually corresponds directly to the specific message in the ErrorText.
    /// - Returns: The error code.
    public var extendedErrorCode: COM.HResult {
        get throws {
            try _interop.get_ExtendedErrorCode()
        }
    }

    // MARK: Windows.Management.Deployment.IDeploymentResult2 members

    /// Describes whether or not the package is fully registered and ready to use.
    /// - Returns: true if the package is registered; otherwise, false.
    public var isRegistered: Swift.Bool {
        get throws {
            try _ideploymentResult2.get_IsRegistered()
        }
    }

    // MARK: Implementation details

    private var _ideploymentResult2_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IDeploymentResult2>? = nil

    internal var _ideploymentResult2: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IDeploymentResult2> {
        get throws {
            try _ideploymentResult2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsManagementDeployment_IDeploymentResult2.iid).cast(to: CWinRT.SWRT_WindowsManagementDeployment_IDeploymentResult2.self)
            }
        }
    }

    deinit {
        _ideploymentResult2_storage?.release()
    }
}