// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

public final class WindowsManagementDeployment_AppInstallerManager: WindowsRuntime.WinRTImport<WindowsManagementDeployment_AppInstallerManagerProjection> {
    // MARK: Windows.Management.Deployment.IAppInstallerManager members

    public func setAutoUpdateSettings(_ packageFamilyName: Swift.String, _ appInstallerInfo: WindowsManagementDeployment_AutoUpdateSettingsOptions?) throws {
        try _interop.setAutoUpdateSettings(packageFamilyName, appInstallerInfo)
    }

    public func clearAutoUpdateSettings(_ packageFamilyName: Swift.String) throws {
        try _interop.clearAutoUpdateSettings(packageFamilyName)
    }

    public func pauseAutoUpdatesUntil(_ packageFamilyName: Swift.String, _ dateTime: WindowsFoundation_DateTime) throws {
        try _interop.pauseAutoUpdatesUntil(packageFamilyName, dateTime)
    }

    // MARK: Windows.Management.Deployment.IAppInstallerManagerStatics members

    public static func getDefault() throws -> WindowsManagementDeployment_AppInstallerManager {
        try COM.NullResult.unwrap(_iappInstallerManagerStatics.getDefault())
    }

    public static func getForSystem() throws -> WindowsManagementDeployment_AppInstallerManager {
        try COM.NullResult.unwrap(_iappInstallerManagerStatics.getForSystem())
    }

    // MARK: Implementation details

    private static var _iappInstallerManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IAppInstallerManagerStatics>? = nil

    internal static var _iappInstallerManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsManagementDeployment_IAppInstallerManagerStatics> {
        get throws {
            try _iappInstallerManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Management.Deployment.AppInstallerManager", id: CWinRT.SWRT_WindowsManagementDeployment_IAppInstallerManagerStatics.iid)
            }
        }
    }
}