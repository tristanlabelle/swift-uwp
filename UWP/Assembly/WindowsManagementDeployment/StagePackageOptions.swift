// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the deployment options that you can configure when you use the StagePackageByUriAsync method to stage a package.
public final class WindowsManagementDeployment_StagePackageOptions: WindowsRuntime.WinRTImport<WindowsManagementDeployment_StagePackageOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsManagementDeployment_StagePackageOptionsProjection.self))
    }

    // MARK: Windows.Management.Deployment.IStagePackageOptions members

    /// Gets or sets a value that indicates whether to allow an unsigned package to be added.
    /// - Returns: **TRUE** indicates that an unsigned package can be added; otherwise, **FALSE**.
    public var allowUnsigned: Swift.Bool {
        get throws {
            try _interop.get_AllowUnsigned()
        }
    }

    /// Gets or sets a value that indicates whether to allow an unsigned package to be added.
    /// - Returns: **TRUE** indicates that an unsigned package can be added; otherwise, **FALSE**.
    public func allowUnsigned(_ value: Swift.Bool) throws {
        try _interop.put_AllowUnsigned(value)
    }

    /// Gets the list of URIs of the dependency packages to stage.
    /// - Returns: The list of URIs of the dependency packages to stage.
    public var dependencyPackageUris: WindowsFoundationCollections_IVector<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DependencyPackageUris())
        }
    }

    /// Gets or sets a value that indicates whether the app is installed in developer mode.
    /// - Returns: **TRUE** to install the app in developer mode; otherwise, **FALSE**.
    public var developerMode: Swift.Bool {
        get throws {
            try _interop.get_DeveloperMode()
        }
    }

    /// Gets or sets a value that indicates whether the app is installed in developer mode.
    /// - Returns: **TRUE** to install the app in developer mode; otherwise, **FALSE**.
    public func developerMode(_ value: Swift.Bool) throws {
        try _interop.put_DeveloperMode(value)
    }

    /// Gets or sets the URI of an external disk location outside of the MSIX package where the package manifest can reference application content.
    /// - Returns: The URI of an external disk location outside of the MSIX package where the package manifest can reference application content.
    public var externalLocationUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ExternalLocationUri())
        }
    }

    /// Gets or sets the URI of an external disk location outside of the MSIX package where the package manifest can reference application content.
    /// - Returns: The URI of an external disk location outside of the MSIX package where the package manifest can reference application content.
    public func externalLocationUri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_ExternalLocationUri(value)
    }

    /// Gets or sets a value that indicates whether to force a specific version of a package to be staged/registered, regardless of if a higher version is already staged/registered.
    /// - Returns: **TRUE** forces a specific version of a package to be staged/registered, regardless of if a higher version is already staged/registered; otherwise, **FALSE**.
    public var forceUpdateFromAnyVersion: Swift.Bool {
        get throws {
            try _interop.get_ForceUpdateFromAnyVersion()
        }
    }

    /// Gets or sets a value that indicates whether to force a specific version of a package to be staged/registered, regardless of if a higher version is already staged/registered.
    /// - Returns: **TRUE** forces a specific version of a package to be staged/registered, regardless of if a higher version is already staged/registered; otherwise, **FALSE**.
    public func forceUpdateFromAnyVersion(_ value: Swift.Bool) throws {
        try _interop.put_ForceUpdateFromAnyVersion(value)
    }

    /// Gets or sets a value that indicates whether the app skips resource applicability checks. This effectively stages or registers all resource packages that a user passes in to the command, which forces applicability for all packages contained in a bundle. If a user passes in a bundle, all contained resource packages will be registered.
    /// - Returns: **TRUE** instructs the app to skip all resource applicability checks and stages or registers all resource packages; otherwise, **FALSE**.
    public var installAllResources: Swift.Bool {
        get throws {
            try _interop.get_InstallAllResources()
        }
    }

    /// Gets or sets a value that indicates whether the app skips resource applicability checks. This effectively stages or registers all resource packages that a user passes in to the command, which forces applicability for all packages contained in a bundle. If a user passes in a bundle, all contained resource packages will be registered.
    /// - Returns: **TRUE** instructs the app to skip all resource applicability checks and stages or registers all resource packages; otherwise, **FALSE**.
    public func installAllResources(_ value: Swift.Bool) throws {
        try _interop.put_InstallAllResources(value)
    }

    /// Gets the list of package family names from the main bundle to be registered.
    /// - Returns: The list of package family names from the main bundle to be registered.
    public var optionalPackageFamilyNames: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OptionalPackageFamilyNames())
        }
    }

    /// Gets the list of URIs of related optional packages to be updated to the same version as the new optional packages.
    /// - Returns: The list of URIs of related optional packages to be updated to the same version as the new optional packages.
    public var optionalPackageUris: WindowsFoundationCollections_IVector<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OptionalPackageUris())
        }
    }

    /// Gets the list of URIs of related optional packages to be updated to the same version as the new optional packages.
    /// - Returns: The list of URIs of related optional packages to be updated to the same version as the new optional packages.
    public var relatedPackageUris: WindowsFoundationCollections_IVector<WindowsFoundation_Uri?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RelatedPackageUris())
        }
    }

    /// Gets or sets a value that indicates whether only the required content group will be staged. An app can be installed as a package with the required content group alone.
    /// - Returns: **TRUE** indicates that only the required content group will be staged; otherwise, **FALSE**.
    public var requiredContentGroupOnly: Swift.Bool {
        get throws {
            try _interop.get_RequiredContentGroupOnly()
        }
    }

    /// Gets or sets a value that indicates whether only the required content group will be staged. An app can be installed as a package with the required content group alone.
    /// - Returns: **TRUE** indicates that only the required content group will be staged; otherwise, **FALSE**.
    public func requiredContentGroupOnly(_ value: Swift.Bool) throws {
        try _interop.put_RequiredContentGroupOnly(value)
    }

    /// Gets or sets a value that indicates whether to stage the package in place.
    /// - Returns: **TRUE** indicates that the package will be staged in place; otherwise, **FALSE**.
    public var stageInPlace: Swift.Bool {
        get throws {
            try _interop.get_StageInPlace()
        }
    }

    /// Gets or sets a value that indicates whether to stage the package in place.
    /// - Returns: **TRUE** indicates that the package will be staged in place; otherwise, **FALSE**.
    public func stageInPlace(_ value: Swift.Bool) throws {
        try _interop.put_StageInPlace(value)
    }

    /// Gets or sets the stub options for the package.
    /// - Returns: The stub options for the package.
    public var stubPackageOption: WindowsManagementDeployment_StubPackageOption {
        get throws {
            try _interop.get_StubPackageOption()
        }
    }

    /// Gets or sets the stub options for the package.
    /// - Returns: The stub options for the package.
    public func stubPackageOption(_ value: WindowsManagementDeployment_StubPackageOption) throws {
        try _interop.put_StubPackageOption(value)
    }

    /// Gets or sets the volume to which the package is staged.
    /// - Returns: The volume to which the package is staged.
    public var targetVolume: WindowsManagementDeployment_PackageVolume {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TargetVolume())
        }
    }

    /// Gets or sets the volume to which the package is staged.
    /// - Returns: The volume to which the package is staged.
    public func targetVolume(_ value: WindowsManagementDeployment_PackageVolume?) throws {
        try _interop.put_TargetVolume(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Management.Deployment.StagePackageOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}