// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides simplified access to app resources such as app UI strings.
public final class WindowsApplicationModelResources_ResourceLoader: WindowsRuntime.WinRTImport<WindowsApplicationModelResources_ResourceLoaderProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelResources_ResourceLoaderProjection.self))
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoaderFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iresourceLoaderFactory.createResourceLoaderByName(name)))
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoader members

    /// Returns the most appropriate string value of a resource, specified by resource identifier, for the default ResourceContext of the view in which the ResourceLoader was obtained using ResourceLoader.GetForCurrentView.
    /// - Parameter resource: The resource identifier of the resource to be resolved.
    /// - Returns: The most appropriate string value of the specified resource for the default ResourceContext.
    public func getString(_ resource: Swift.String) throws -> Swift.String {
        try _interop.getString(resource)
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoader2 members

    /// Returns the most appropriate string value of a resource, specified by a Uniform Resource Identifier (URI) resource identifier, for the default ResourceContext of the currently running app.
    /// - Parameter uri: A Uniform Resource Identifier (URI) that represents the resource to be retrieved.
    /// - Returns: The most appropriate string value of the specified resource for the default ResourceContext.
    public func getStringForUri(_ uri: WindowsFoundation_Uri?) throws -> Swift.String {
        try _iresourceLoader2.getStringForUri(uri)
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoaderStatics2 members

    /// Gets a ResourceLoader object for the Resources subtree of the currently running app's main ResourceMap. This ResourceLoader uses a default context associated with the current view.
    /// - Returns: A resource loader for the Resources subtree of the currently running app's main ResourceMap.
    public static func getForCurrentView() throws -> WindowsApplicationModelResources_ResourceLoader {
        try COM.NullResult.unwrap(_iresourceLoaderStatics2.getForCurrentView())
    }

    /// Gets a ResourceLoader object for the specified ResourceMap. This ResourceLoader uses a default context associated with the current view.
    /// - Parameter name: The resource identifier of the ResourceMap that the new resource loader uses for unqualified resource references. The loader can then retrieve resources relative to those references.
    /// - Returns: A resource loader for the specified ResourceMap.
    public static func getForCurrentView(_ name: Swift.String) throws -> WindowsApplicationModelResources_ResourceLoader {
        try COM.NullResult.unwrap(_iresourceLoaderStatics2.getForCurrentViewWithName(name))
    }

    /// Gets a ResourceLoader object for the Resources subtree of the currently running app's main ResourceMap. This ResourceLoader uses a default context that's not associated with any view.
    /// - Returns: A resource loader for the Resources subtree of the currently running app's main ResourceMap. This ResourceLoader uses a default context that's not associated with any view. You can't use this ResourceLoader to retrieve any resource that has resource candidates qualified for scale.
    public static func getForViewIndependentUse() throws -> WindowsApplicationModelResources_ResourceLoader {
        try COM.NullResult.unwrap(_iresourceLoaderStatics2.getForViewIndependentUse())
    }

    /// Gets a ResourceLoader object for the specified ResourceMap. This ResourceLoader uses a default context that's not associated with any view.
    /// - Parameter name: The resource identifier of the ResourceMap that the new resource loader uses for unqualified resource references. The loader can then retrieve resources relative to those references.
    /// - Returns: A resource loader for the Resources subtree of the currently running app's main ResourceMap. This ResourceLoader uses a default context that's not associated with any view. You can't use this ResourceLoader to retrieve any resource that has resource candidates qualified for scale.
    public static func getForViewIndependentUse(_ name: Swift.String) throws -> WindowsApplicationModelResources_ResourceLoader {
        try COM.NullResult.unwrap(_iresourceLoaderStatics2.getForViewIndependentUseWithName(name))
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoaderStatics3 members

    /// Gets a ResourceLoader object for the specified UIContext.
    /// - Parameter context: The UI context for which to get the ResourceLoader.
    /// - Returns: A resource loader for the specified UIContext.
    public static func getForUIContext(_ context: WindowsUI_UIContext?) throws -> WindowsApplicationModelResources_ResourceLoader {
        try COM.NullResult.unwrap(_iresourceLoaderStatics3.getForUIContext(context))
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoaderStatics members

    /// Returns the most appropriate string value of a resource, specified as a Uri for a resource identifier, for the default ResourceContext of the currently running app.
    /// - Parameter uri: A Uri that represents the resource to be retrieved.
    /// - Returns: The most appropriate string value of the specified resource for the default ResourceContext.
    public static func getStringForReference(_ uri: WindowsFoundation_Uri?) throws -> Swift.String {
        try _iresourceLoaderStatics.getStringForReference(uri)
    }

    // MARK: Windows.ApplicationModel.Resources.IResourceLoaderStatics4 members

    public static func getDefaultPriPath(_ packageFullName: Swift.String) throws -> Swift.String {
        try _iresourceLoaderStatics4.getDefaultPriPath(packageFullName)
    }

    // MARK: Implementation details

    private var _iresourceLoader2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoader2>? = nil

    internal var _iresourceLoader2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoader2> {
        get throws {
            try _iresourceLoader2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoader2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoader2.self)
            }
        }
    }

    deinit {
        _iresourceLoader2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iresourceLoaderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderFactory>? = nil

    internal static var _iresourceLoaderFactory: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderFactory> {
        get throws {
            try _iresourceLoaderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderFactory.iid)
            }
        }
    }

    private static var _iresourceLoaderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics2>? = nil

    internal static var _iresourceLoaderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics2> {
        get throws {
            try _iresourceLoaderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics2.iid)
            }
        }
    }

    private static var _iresourceLoaderStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics3>? = nil

    internal static var _iresourceLoaderStatics3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics3> {
        get throws {
            try _iresourceLoaderStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics3.iid)
            }
        }
    }

    private static var _iresourceLoaderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics>? = nil

    internal static var _iresourceLoaderStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics> {
        get throws {
            try _iresourceLoaderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics.iid)
            }
        }
    }

    private static var _iresourceLoaderStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics4>? = nil

    internal static var _iresourceLoaderStatics4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics4> {
        get throws {
            try _iresourceLoaderStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Resources.ResourceLoader", id: CWinRT.SWRT_WindowsApplicationModelResources_IResourceLoaderStatics4.iid)
            }
        }
    }
}