// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An allocator that can create PerceptionFrames directly which can be written into or copied from Windows::Media::VideoFrame into a PerceptionFrame.
public final class WindowsDevicesPerceptionProvider_PerceptionVideoFrameAllocator: WindowsRuntime.WinRTImport<WindowsDevicesPerceptionProvider_PerceptionVideoFrameAllocatorProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Perception.Provider.IPerceptionVideoFrameAllocatorFactory members

    public convenience init(_ maxOutstandingFrameCountForWrite: Swift.UInt32, _ format: WindowsGraphicsImaging_BitmapPixelFormat, _ resolution: WindowsFoundation_Size, _ alpha: WindowsGraphicsImaging_BitmapAlphaMode) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iperceptionVideoFrameAllocatorFactory.create(maxOutstandingFrameCountForWrite, format, resolution, alpha)))
    }

    // MARK: Windows.Devices.Perception.Provider.IPerceptionVideoFrameAllocator members

    /// Creates an empty PerceptionFrame with the properties specified when creating the PerceptionVideoFrameAllocator.
    /// - Returns: The empty frame with the properties specified when creating the PerceptionVideoFrameAllocator.
    public func allocateFrame() throws -> WindowsDevicesPerceptionProvider_PerceptionFrame {
        try COM.NullResult.unwrap(_interop.allocateFrame())
    }

    /// Creates a deep copy of the video FrameProvider with the bytes already filled in with the resulting PerceptionFrame.
    /// - Parameter frame: The input frame from which to copy the pixel data.
    /// - Returns: The resulting filled PerceptionFrame.
    public func copyFromVideoFrame(_ frame: WindowsMedia_VideoFrame?) throws -> WindowsDevicesPerceptionProvider_PerceptionFrame {
        try COM.NullResult.unwrap(_interop.copyFromVideoFrame(frame))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases system resources that are exposed by a Windows Runtime object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iperceptionVideoFrameAllocatorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerceptionProvider_IPerceptionVideoFrameAllocatorFactory>? = nil

    internal static var _iperceptionVideoFrameAllocatorFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPerceptionProvider_IPerceptionVideoFrameAllocatorFactory> {
        get throws {
            try _iperceptionVideoFrameAllocatorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Perception.Provider.PerceptionVideoFrameAllocator", id: CWinRT.SWRT_WindowsDevicesPerceptionProvider_IPerceptionVideoFrameAllocatorFactory.iid)
            }
        }
    }
}