// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A specific set of properties describing a unique IPerceptionFrameProvider.
public final class WindowsDevicesPerceptionProvider_PerceptionFrameProviderInfo: WindowsRuntime.WinRTImport<WindowsDevicesPerceptionProvider_PerceptionFrameProviderInfoProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesPerceptionProvider_PerceptionFrameProviderInfoProjection.self))
    }

    // MARK: Windows.Devices.Perception.Provider.IPerceptionFrameProviderInfo members

    /// Gets or sets the descriptor of the kind of FrameProvider categorically, for example, "com.contoso.depthcamera.x500".
    /// - Returns: The descriptor of the kind of FrameProvider categorically, for example, "com.contoso.depthcamera.x500".
    public var deviceKind: Swift.String {
        get throws {
            try _interop.get_DeviceKind()
        }
    }

    /// Gets or sets the descriptor of the kind of FrameProvider categorically, for example, "com.contoso.depthcamera.x500".
    /// - Returns: The descriptor of the kind of FrameProvider categorically, for example, "com.contoso.depthcamera.x500".
    public func deviceKind(_ value: Swift.String) throws {
        try _interop.put_DeviceKind(value)
    }

    /// Gets or sets the friendly name for the device, for example, "Contoso Depth Camera x500".
    /// - Returns: The friendly name for the device.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets or sets the friendly name for the device, for example, "Contoso Depth Camera x500".
    /// - Returns: The friendly name for the device.
    public func displayName(_ value: Swift.String) throws {
        try _interop.put_DisplayName(value)
    }

    /// Gets or sets the type of frames the device creates.
    /// - Returns: The type of frames the device creates. Must be one of: IKnownPerceptionFrameKind::Color, IKnownPerceptionFrameKind::Depth, or IKnownPerceptionFrameKind::Infrared.
    public var frameKind: Swift.String {
        get throws {
            try _interop.get_FrameKind()
        }
    }

    /// Gets or sets the type of frames the device creates.
    /// - Returns: The type of frames the device creates. Must be one of: IKnownPerceptionFrameKind::Color, IKnownPerceptionFrameKind::Depth, or IKnownPerceptionFrameKind::Infrared.
    public func frameKind(_ value: Swift.String) throws {
        try _interop.put_FrameKind(value)
    }

    /// Gets or sets a value indicating whether the device enumerates via FindAllAsync or device-added events on source watchers.
    /// - Returns: True if the device enumerates via FindAllAsync or device added events on source watchers; otherwise, false. If false, the device will only be accessible via FromIdAsync. If false, the device will enumerate as a Face Authentication source, if registered via PerceptionFrameProviderManagerService::RegisterFaceAuthenticationGroup().
    public var hidden: Swift.Bool {
        get throws {
            try _interop.get_Hidden()
        }
    }

    /// Gets or sets a value indicating whether the device enumerates via FindAllAsync or device-added events on source watchers.
    /// - Returns: True if the device enumerates via FindAllAsync or device added events on source watchers; otherwise, false. If false, the device will only be accessible via FromIdAsync. If false, the device will enumerate as a Face Authentication source, if registered via PerceptionFrameProviderManagerService::RegisterFaceAuthenticationGroup().
    public func hidden(_ value: Swift.Bool) throws {
        try _interop.put_Hidden(value)
    }

    /// Gets or sets the unique identifier of the IPerceptionFrameProvider.
    /// - Returns: The unique identifier of the IPerceptionFrameProvider, for example, a GUID, or "com.contoso.depthcamera.x500.serialNumber1234".
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets the unique identifier of the IPerceptionFrameProvider.
    /// - Returns: The unique identifier of the IPerceptionFrameProvider, for example, a GUID, or "com.contoso.depthcamera.x500.serialNumber1234".
    public func id(_ value: Swift.String) throws {
        try _interop.put_Id(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Perception.Provider.PerceptionFrameProviderInfo", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}