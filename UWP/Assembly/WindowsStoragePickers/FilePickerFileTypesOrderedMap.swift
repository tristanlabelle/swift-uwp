// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a collection of display names mapped to the associated file types (extensions). Each element in this collection maps a display name to a corresponding collection of file name extensions. The key is a single string, the value is a list/vector of strings representing one or more extension choices.
public final class WindowsStoragePickers_FilePickerFileTypesOrderedMap: WindowsRuntime.WinRTImport<WindowsStoragePickers_FilePickerFileTypesOrderedMapProjection>, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias K = Swift.String
    public typealias V = WindowsFoundationCollections_IVector<Swift.String>?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVector<Swift.String>?>?

    // MARK: Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.Collections.IVector`1<String>> members

    /// Gets the number of items in the mapped collection of display names and associated file types.
    /// - Returns: The number of items in the mapped collection.
    public var size: Swift.UInt32 {
        get throws {
            try _interop.get_Size()
        }
    }

    /// Returns the item at the specified key in the mapped collection of display names and associated file types.
    /// - Parameter key: The key to use to locate the item.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> WindowsFoundationCollections_IVector<Swift.String>? {
        try _interop.lookup(key)
    }

    /// Determines whether the mapped collection of display names and associated file types contains the specified key.
    /// - Parameter key: The key.
    /// - Returns: True if the key is found; otherwise, false.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _interop.hasKey(key)
    }

    /// Returns an immutable view of the collection of display names and associated file types.
    /// - Returns: The view of the collection.
    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsFoundationCollections_IVector<Swift.String>?> {
        try COM.NullResult.unwrap(_interop.getView())
    }

    /// Inserts or replaces an item in the map.
    /// - Parameter key: The key associated with the item to insert.
    /// - Parameter value: The item to insert.
    /// - Returns: True if an item with the specified key is an existing item that was replaced; otherwise, false.
    public func insert(_ key: Swift.String, _ value: WindowsFoundationCollections_IVector<Swift.String>?) throws -> Swift.Bool {
        try _interop.insert(key, value)
    }

    /// Removes an item from the mapped collection of display names and associated file types.
    /// - Parameter key: The key associated with the item to remove.
    public func remove(_ key: Swift.String) throws {
        try _interop.remove(key)
    }

    /// Removes all display names and associated file name extensions from the collection.
    public func clear() throws {
        try _interop.clear()
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVector`1<String>>> members

    /// Retrieves an iterator that iterates through the display names and associated file types in the collection.
    /// - Returns: The iterator.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVector<Swift.String>?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVector_String>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVector_String> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVector_String.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVector_String.self)
            }
        }
    }

    deinit {
        _iiterable_storage?.release()
    }
}