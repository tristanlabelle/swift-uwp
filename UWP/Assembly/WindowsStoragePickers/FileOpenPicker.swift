// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a UI element that lets the user choose and open files.
public final class WindowsStoragePickers_FileOpenPicker: WindowsRuntime.WinRTImport<WindowsStoragePickers_FileOpenPickerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsStoragePickers_FileOpenPickerProjection.self))
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPicker members

    /// Gets or sets the label text of the file open picker's commit button.
    /// - Returns: The label text.
    public var commitButtonText: Swift.String {
        get throws {
            try _interop.get_CommitButtonText()
        }
    }

    /// Gets or sets the label text of the file open picker's commit button.
    /// - Returns: The label text.
    public func commitButtonText(_ value: Swift.String) throws {
        try _interop.put_CommitButtonText(value)
    }

    /// Gets the collection of file types that the file open picker displays.
    /// - Returns: A fileExtensionVector object that contains a collection of file types (file name extensions) , such as ".doc" and ".png". File name extensions are stored in this array as string objects.
    public var fileTypeFilter: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FileTypeFilter())
        }
    }

    /// Gets or sets the settings identifier associated with the state of the file open picker.
    /// - Returns: The settings identifier.
    public var settingsIdentifier: Swift.String {
        get throws {
            try _interop.get_SettingsIdentifier()
        }
    }

    /// Gets or sets the settings identifier associated with the state of the file open picker.
    /// - Returns: The settings identifier.
    public func settingsIdentifier(_ value: Swift.String) throws {
        try _interop.put_SettingsIdentifier(value)
    }

    /// Gets or sets the initial location where the file open picker looks for files to present to the user.
    /// - Returns: The identifier of the starting location.
    public var suggestedStartLocation: WindowsStoragePickers_PickerLocationId {
        get throws {
            try _interop.get_SuggestedStartLocation()
        }
    }

    /// Gets or sets the initial location where the file open picker looks for files to present to the user.
    /// - Returns: The identifier of the starting location.
    public func suggestedStartLocation(_ value: WindowsStoragePickers_PickerLocationId) throws {
        try _interop.put_SuggestedStartLocation(value)
    }

    /// Gets or sets the view mode that the file open picker uses to display items.
    /// - Returns: The view mode.
    public var viewMode: WindowsStoragePickers_PickerViewMode {
        get throws {
            try _interop.get_ViewMode()
        }
    }

    /// Gets or sets the view mode that the file open picker uses to display items.
    /// - Returns: The view mode.
    public func viewMode(_ value: WindowsStoragePickers_PickerViewMode) throws {
        try _interop.put_ViewMode(value)
    }

    /// Shows the file picker so that the user can pick one file.
    /// - Returns: When the call to this method completes successfully, it returns a StorageFile object that represents the file that the user picked.
    public func pickSingleFileAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.pickSingleFileAsync())
    }

    /// Shows the file picker so that the user can pick multiple files. (UWP app)
    /// - Returns: When the call to this method completes successfully, it returns a filePickerSelectedFilesArray object that contains all the files that were picked by the user. Picked files in this array are represented by storageFile objects.
    public func pickMultipleFilesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
        try COM.NullResult.unwrap(_interop.pickMultipleFilesAsync())
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPicker2 members

    /// Gets a set of values to be populated by the app before PickSingleFileAndContinue or PickMultipleFilesAndContinue operation that deactivates the app in order to provide context when the app is activated. (Windows Phone 8.x app)
    /// - Returns: A set of values to be populated by the app before PickSingleFileAndContinue or PickMultipleFilesAndContinue operation.
    public var continuationData: WindowsFoundationCollections_ValueSet {
        get throws {
            try COM.NullResult.unwrap(_ifileOpenPicker2.get_ContinuationData())
        }
    }

    /// Shows the file picker so that the user can pick one file, potentially deactivating the app and reactivating it when the operation is complete. (Windows Phone 8.x app)
    public func pickSingleFileAndContinue() throws {
        try _ifileOpenPicker2.pickSingleFileAndContinue()
    }

    /// **Obsolete as of Windows 10; use PickSingleFolderAsync instead.** Shows the file picker so that the user can pick multiple files, deactivating and the app and reactivating it when the operation is complete. (Windows Phone 8.x app)
    public func pickMultipleFilesAndContinue() throws {
        try _ifileOpenPicker2.pickMultipleFilesAndContinue()
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPickerWithOperationId members

    /// Shows the file picker so that the user can pick one file.
    /// - Parameter pickerOperationId: This argument is ignored and has no effect.
    /// - Returns: When the call to this method completes successfully, it returns a StorageFile object that represents the file that the user picked.
    public func pickSingleFileAsync(_ pickerOperationId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_ifileOpenPickerWithOperationId.pickSingleFileAsync(pickerOperationId))
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPicker3 members

    /// Gets info about the user for which the FileOpenPicker was created. Use this property for multi-user applications.
    /// - Returns: The user for which the FileOpenPicker was created.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_ifileOpenPicker3.get_User())
        }
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPickerStatics members

    /// Resumes the picking operation to retrieve the user-selected file if the user navigates away from the app after the picker operation has completed and the app is suspended.
    /// - Returns: When the call to this method completes successfully, it returns a StorageFile object that represents the file that the user picked.
    public static func resumePickSingleFileAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_ifileOpenPickerStatics.resumePickSingleFileAsync())
    }

    // MARK: Windows.Storage.Pickers.IFileOpenPickerStatics2 members

    /// Creates a FileOpenPicker that is scoped to the personal directory of the specified user. Use this method for multi-user applications.
    /// - Parameter user: The user for which to create the FileOpenPicker.
    /// - Returns: The new FileOpenPicker that was created.
    public static func createForUser(_ user: WindowsSystem_User?) throws -> WindowsStoragePickers_FileOpenPicker {
        try COM.NullResult.unwrap(_ifileOpenPickerStatics2.createForUser(user))
    }

    // MARK: Implementation details

    private var _ifileOpenPicker2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker2>? = nil

    internal var _ifileOpenPicker2: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker2> {
        get throws {
            try _ifileOpenPicker2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker2.iid).cast(to: CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker2.self)
            }
        }
    }

    private var _ifileOpenPickerWithOperationId_storage: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerWithOperationId>? = nil

    internal var _ifileOpenPickerWithOperationId: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerWithOperationId> {
        get throws {
            try _ifileOpenPickerWithOperationId_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerWithOperationId.iid).cast(to: CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerWithOperationId.self)
            }
        }
    }

    private var _ifileOpenPicker3_storage: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker3>? = nil

    internal var _ifileOpenPicker3: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker3> {
        get throws {
            try _ifileOpenPicker3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker3.iid).cast(to: CWinRT.SWRT_WindowsStoragePickers_IFileOpenPicker3.self)
            }
        }
    }

    deinit {
        _ifileOpenPicker2_storage?.release()
        _ifileOpenPickerWithOperationId_storage?.release()
        _ifileOpenPicker3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Pickers.FileOpenPicker", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ifileOpenPickerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics>? = nil

    internal static var _ifileOpenPickerStatics: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics> {
        get throws {
            try _ifileOpenPickerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Pickers.FileOpenPicker", id: CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics.iid)
            }
        }
    }

    private static var _ifileOpenPickerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics2>? = nil

    internal static var _ifileOpenPickerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics2> {
        get throws {
            try _ifileOpenPickerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Pickers.FileOpenPicker", id: CWinRT.SWRT_WindowsStoragePickers_IFileOpenPickerStatics2.iid)
            }
        }
    }
}