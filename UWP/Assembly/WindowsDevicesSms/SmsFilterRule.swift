// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes an SMS filtering rule.
public final class WindowsDevicesSms_SmsFilterRule: WindowsRuntime.WinRTImport<WindowsDevicesSms_SmsFilterRuleProjection> {
    // MARK: Windows.Devices.Sms.ISmsFilterRuleFactory members

    public convenience init(_ messageType: WindowsDevicesSms_SmsMessageType) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ismsFilterRuleFactory.createFilterRule(messageType)))
    }

    // MARK: Windows.Devices.Sms.ISmsFilterRule members

    /// A list of broadcast channels that match this rule.
    /// - Returns: List of broadcast channel identifiers that match this rule.
    public var broadcastChannels: WindowsFoundationCollections_IVector<Swift.Int32> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BroadcastChannels())
        }
    }

    /// Gets a list of broadcast types for an SMS message that matches this rule.
    /// - Returns: Enumeration values for broadcast types that match this rule.
    public var broadcastTypes: WindowsFoundationCollections_IVector<WindowsDevicesSms_SmsBroadcastType> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BroadcastTypes())
        }
    }

    /// The cellular class identifier for SMS messages that match this rule.
    /// - Returns: The enumeration value for the cellular class that matches this rule.
    public var cellularClass: WindowsDevicesSms_CellularClass {
        get throws {
            try _interop.get_CellularClass()
        }
    }

    /// The cellular class identifier for SMS messages that match this rule.
    /// - Returns: The enumeration value for the cellular class that matches this rule.
    public func cellularClass(_ value: WindowsDevicesSms_CellularClass) throws {
        try _interop.put_CellularClass(value)
    }

    /// Gets a list of device identifiers for an SMS message that matches this rule.
    /// - Returns: List of device identifiers for the message.
    public var deviceIds: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeviceIds())
        }
    }

    /// Gets the IMSI prefixes for an SMS message that matches this rule.
    /// - Returns: A list of IMSI prefixes.
    public var imsiPrefixes: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ImsiPrefixes())
        }
    }

    /// Gets the message type of an SMS message that matches this filter rule.
    /// - Returns: An enumeration value specifying the message type.
    public var messageType: WindowsDevicesSms_SmsMessageType {
        get throws {
            try _interop.get_MessageType()
        }
    }

    /// Gets a list of port numbers associated with the SMS message that matches this rule.
    /// - Returns: List of port numbers.
    public var portNumbers: WindowsFoundationCollections_IVector<Swift.Int32> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PortNumbers())
        }
    }

    /// Gets a list of protocol identifiers associated with the SMS message that matches this rule..
    /// - Returns: List of protocol identifiers.
    public var protocolIds: WindowsFoundationCollections_IVector<Swift.Int32> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProtocolIds())
        }
    }

    /// Gets the sender numbers associated with an SMS message that matches this rule.
    /// - Returns: List of sender numbers.
    public var senderNumbers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SenderNumbers())
        }
    }

    /// Gets the list of teleservice identifiers for an SMS message that matches this rule.
    /// - Returns: Teleservice identifiers.
    public var teleserviceIds: WindowsFoundationCollections_IVector<Swift.Int32> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TeleserviceIds())
        }
    }

    /// Gets a list of the text message prefixes for an SMS message that matches this filter.
    /// - Returns: List of text message prefixes.
    public var textMessagePrefixes: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TextMessagePrefixes())
        }
    }

    /// Gets a list of WAP application identifiers for the SMS message that matches this rule.
    /// - Returns: List of WAP application identifiers.
    public var wapApplicationIds: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WapApplicationIds())
        }
    }

    /// Gets a list of WAP content types for the SMS message that matches this rule.
    /// - Returns: List of WAP content types.
    public var wapContentTypes: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WapContentTypes())
        }
    }

    // MARK: Implementation details

    private static var _ismsFilterRuleFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsFilterRuleFactory>? = nil

    internal static var _ismsFilterRuleFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsFilterRuleFactory> {
        get throws {
            try _ismsFilterRuleFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sms.SmsFilterRule", id: CWinRT.SWRT_WindowsDevicesSms_ISmsFilterRuleFactory.iid)
            }
        }
    }
}