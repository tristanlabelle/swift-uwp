// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The interface for manipulating an SMS Application message. Application messages are those which cannot be characterized as any other message type.
public final class WindowsDevicesSms_SmsAppMessage: WindowsRuntime.WinRTImport<WindowsDevicesSms_SmsAppMessageProjection>, WindowsDevicesSms_ISmsMessageBaseProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesSms_SmsAppMessageProjection.self))
    }

    // MARK: Windows.Devices.Sms.ISmsAppMessage members

    /// Reads or writes the binary part of the Application message.
    /// - Returns: Binary data part of the Application message.
    public var binaryBody: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BinaryBody())
        }
    }

    /// Reads or writes the binary part of the Application message.
    /// - Returns: Binary data part of the Application message.
    public func binaryBody(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_BinaryBody(value)
    }

    /// The plain text body of the message.
    /// - Returns: The plain text body of the message.
    public var body: Swift.String {
        get throws {
            try _interop.get_Body()
        }
    }

    /// The plain text body of the message.
    /// - Returns: The plain text body of the message.
    public func body(_ value: Swift.String) throws {
        try _interop.put_Body(value)
    }

    /// The number to be dialed in reply to a received SMS message.
    /// - Returns: The number to be dialed in reply to a received SMS message. Available only for 3GPP2 messages.
    public var callbackNumber: Swift.String {
        get throws {
            try _interop.get_CallbackNumber()
        }
    }

    /// The number to be dialed in reply to a received SMS message.
    /// - Returns: The number to be dialed in reply to a received SMS message. Available only for 3GPP2 messages.
    public func callbackNumber(_ value: Swift.String) throws {
        try _interop.put_CallbackNumber(value)
    }

    /// The encoding used to send the message.
    /// - Returns: The encoding used to send the message.
    public var encoding: WindowsDevicesSms_SmsEncoding {
        get throws {
            try _interop.get_Encoding()
        }
    }

    /// The encoding used to send the message.
    /// - Returns: The encoding used to send the message.
    public func encoding(_ value: WindowsDevicesSms_SmsEncoding) throws {
        try _interop.put_Encoding(value)
    }

    /// The telephone number of the sender of the message.
    /// - Returns: The telephone number of the sender of the message.
    public var from: Swift.String {
        get throws {
            try _interop.get_From()
        }
    }

    /// Indicates whether an SMS delivery status report was sent by the SMSC.
    /// - Returns: For a received message, indicates whether an SMS delivery status report was sent by the SMSC. For a sent message, determines whether an SMS delivery status report is requested.
    public var isDeliveryNotificationEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDeliveryNotificationEnabled()
        }
    }

    /// Indicates whether an SMS delivery status report was sent by the SMSC.
    /// - Returns: For a received message, indicates whether an SMS delivery status report was sent by the SMSC. For a sent message, determines whether an SMS delivery status report is requested.
    public func isDeliveryNotificationEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDeliveryNotificationEnabled(value)
    }

    /// The port number of the message.
    /// - Returns: The port number of the message.
    public var portNumber: Swift.Int32 {
        get throws {
            try _interop.get_PortNumber()
        }
    }

    /// The port number of the message.
    /// - Returns: The port number of the message.
    public func portNumber(_ value: Swift.Int32) throws {
        try _interop.put_PortNumber(value)
    }

    /// The Protocol identifier for the message.
    /// - Returns: The Protocol identifier for the message. (3GPP2 only.)
    public var protocolId: Swift.Int32 {
        get throws {
            try _interop.get_ProtocolId()
        }
    }

    /// The Protocol identifier for the message.
    /// - Returns: The Protocol identifier for the message. (3GPP2 only.)
    public func protocolId(_ value: Swift.Int32) throws {
        try _interop.put_ProtocolId(value)
    }

    /// The retry attempt count for the message.
    /// - Returns: The retry attempt count for the message. Set the maximum number of retries for outgoing messages, or get the number of retries for a received message.
    public var retryAttemptCount: Swift.Int32 {
        get throws {
            try _interop.get_RetryAttemptCount()
        }
    }

    /// The retry attempt count for the message.
    /// - Returns: The retry attempt count for the message. Set the maximum number of retries for outgoing messages, or get the number of retries for a received message.
    public func retryAttemptCount(_ value: Swift.Int32) throws {
        try _interop.put_RetryAttemptCount(value)
    }

    /// The Teleservice identifier for the message.
    /// - Returns: The Teleservice identifier for the message.
    public var teleserviceId: Swift.Int32 {
        get throws {
            try _interop.get_TeleserviceId()
        }
    }

    /// The Teleservice identifier for the message.
    /// - Returns: The Teleservice identifier for the message.
    public func teleserviceId(_ value: Swift.Int32) throws {
        try _interop.put_TeleserviceId(value)
    }

    /// The timestamp of the message.
    /// - Returns: The timestamp of the message. If the message is constructed locally, then the **Timestamp** value is determined locally. If the message was received from the network, the value is determined by the service center.
    public var timestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    /// The telephone number of the recipient of this message.
    /// - Returns: The telephone number of the recipient of this message.
    public var to: Swift.String {
        get throws {
            try _interop.get_To()
        }
    }

    /// The telephone number of the recipient of this message.
    /// - Returns: The telephone number of the recipient of this message.
    public func to(_ value: Swift.String) throws {
        try _interop.put_To(value)
    }

    // MARK: Windows.Devices.Sms.ISmsMessageBase members

    /// The class of the cellular device that received the message.
    /// - Returns: The class of the cellular device that received the message.
    public var cellularClass: WindowsDevicesSms_CellularClass {
        get throws {
            try _ismsMessageBase.get_CellularClass()
        }
    }

    /// The device ID of the device that received the message.
    /// - Returns: The device ID of the device that received the message.
    public var deviceId: Swift.String {
        get throws {
            try _ismsMessageBase.get_DeviceId()
        }
    }

    /// The message class of the message.
    /// - Returns: The message class of the message.
    public var messageClass: WindowsDevicesSms_SmsMessageClass {
        get throws {
            try _ismsMessageBase.get_MessageClass()
        }
    }

    /// The message type of the message.
    /// - Returns: The message type of the message.
    public var messageType: WindowsDevicesSms_SmsMessageType {
        get throws {
            try _ismsMessageBase.get_MessageType()
        }
    }

    /// Gets the ICCID (Integrated Circuit Card Identifier) of the SIM that received the message.
    /// - Returns: The ICCID of the SIM.
    public var simIccId: Swift.String {
        get throws {
            try _ismsMessageBase.get_SimIccId()
        }
    }

    // MARK: Implementation details

    private var _ismsMessageBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase>? = nil

    internal var _ismsMessageBase: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase> {
        get throws {
            try _ismsMessageBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.iid).cast(to: CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.self)
            }
        }
    }

    deinit {
        _ismsMessageBase_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sms.SmsAppMessage", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}