// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Extends the SmsDevice class, and supports the operation of a mobile broadband SMS device.
public final class WindowsDevicesSms_SmsDevice2: WindowsRuntime.WinRTImport<WindowsDevicesSms_SmsDevice2Projection> {
    // MARK: Windows.Devices.Sms.ISmsDevice2 members

    /// Gets the phone number associated with the SMS device. The phone number can be used to associate incoming messages with the account and possibly an external storage mechanism such as an account inbox.
    /// - Returns: A string representation of the account phone number.
    public var accountPhoneNumber: Swift.String {
        get throws {
            try _interop.get_AccountPhoneNumber()
        }
    }

    /// Returns the cellular class of the SMS device. The class can be used to determine which encodings are appropriate or which device limitations are in effect.
    /// - Returns: An enumerated value indicating the device's cellular class.
    public var cellularClass: WindowsDevicesSms_CellularClass {
        get throws {
            try _interop.get_CellularClass()
        }
    }

    /// The device ID of the device represented by this instance.
    /// - Returns: String representation of the device ID.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Returns the SMS device's status, which indicates whether the device is ready, or not. It also indicates what type of problem exists if the device is not ready.
    /// - Returns: An enumerated value that indicates the readiness of an SMS device to engage in cellular network traffic operations.
    public var deviceStatus: WindowsDevicesSms_SmsDeviceStatus {
        get throws {
            try _interop.get_DeviceStatus()
        }
    }

    /// The parent device ID of this device.
    /// - Returns: A string representation of the device ID of the parent to this device.
    public var parentDeviceId: Swift.String {
        get throws {
            try _interop.get_ParentDeviceId()
        }
    }

    /// Gets or sets the SMSC address of this device.
    /// - Returns: A string representation of the SMSC address of this device.
    public var smscAddress: Swift.String {
        get throws {
            try _interop.get_SmscAddress()
        }
    }

    /// Gets or sets the SMSC address of this device.
    /// - Returns: A string representation of the SMSC address of this device.
    public func smscAddress(_ value: Swift.String) throws {
        try _interop.put_SmscAddress(value)
    }

    /// Sets an event handler to be called when the status of the SMS device changes.
    public func deviceStatusChanged(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsDevicesSms_SmsDevice2?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DeviceStatusChanged(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: deviceStatusChanged)
    }

    public func deviceStatusChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DeviceStatusChanged(eventCookie)
    }

    /// Estimates the transmitted message length of the specified text message. The estimate can be useful to clients that want to give an indication of how many messages will be sent on the network to carry the text of the full message.
    /// - Parameter message: A reference to the SMS text message to measure.
    /// - Returns: A reference to an SmsEncodedLength structure that is populated with the length information.
    public func calculateLength(_ message: WindowsDevicesSms_ISmsMessageBase?) throws -> WindowsDevicesSms_SmsEncodedLength {
        try _interop.calculateLength(message)
    }

    /// Asynchronously sends a message using the SMS device. The method is asynchronous because the send operation might not occur instantaneously. The message operation object is returned immediately.
    /// - Parameter message: A reference to an object that implements the ISmsMessageBase interface. The message can be in text or binary format.
    /// - Returns: The message operation object.
    public func sendMessageAndGetResultAsync(_ message: WindowsDevicesSms_ISmsMessageBase?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSms_SmsSendMessageResult?> {
        try COM.NullResult.unwrap(_interop.sendMessageAndGetResultAsync(message))
    }

    // MARK: Windows.Devices.Sms.ISmsDevice2Statics members

    /// Retrieves the class selection string that can be used to enumerate SMS devices.
    /// - Returns: A reference to an Advanced Query Syntax (AQS) string that identifies an SMS device.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ismsDevice2Statics.getDeviceSelector()
    }

    /// Creates an instance of SmsDevice2 for a device that received an SMS message.
    /// - Parameter deviceId: A string representation of the device ID of the device that received an SMS message.
    /// - Returns: An instance of SmsDevice2 initialized for the device with the given ID.
    public static func fromId(_ deviceId: Swift.String) throws -> WindowsDevicesSms_SmsDevice2 {
        try COM.NullResult.unwrap(_ismsDevice2Statics.fromId(deviceId))
    }

    /// Creates an instance of SmsDevice2 associated with the default SMS device.
    /// - Returns: An instance of SmsDevice2 initialized for the default SMS device.
    public static func getDefault() throws -> WindowsDevicesSms_SmsDevice2 {
        try COM.NullResult.unwrap(_ismsDevice2Statics.getDefault())
    }

    /// Creates an instance of SmsDevice2 for a device, given the device ID of the parent device.
    /// - Parameter parentDeviceId: The device ID of the parent device.
    /// - Returns: An instance of SmsDevice2 initialized for the device with the given parent ID.
    public static func fromParentId(_ parentDeviceId: Swift.String) throws -> WindowsDevicesSms_SmsDevice2 {
        try COM.NullResult.unwrap(_ismsDevice2Statics.fromParentId(parentDeviceId))
    }

    // MARK: Implementation details

    private static var _ismsDevice2Statics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsDevice2Statics>? = nil

    internal static var _ismsDevice2Statics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsDevice2Statics> {
        get throws {
            try _ismsDevice2Statics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sms.SmsDevice2", id: CWinRT.SWRT_WindowsDevicesSms_ISmsDevice2Statics.iid)
            }
        }
    }
}