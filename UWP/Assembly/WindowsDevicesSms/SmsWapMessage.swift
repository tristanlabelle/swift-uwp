// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an SMS WAP push message.
public final class WindowsDevicesSms_SmsWapMessage: WindowsRuntime.WinRTImport<WindowsDevicesSms_SmsWapMessageProjection>, WindowsDevicesSms_ISmsMessageBaseProtocol {
    // MARK: Windows.Devices.Sms.ISmsWapMessage members

    /// Gets the value of the X-Wap-Application-Id header of the SmsWapMessage.
    /// - Returns: The value of the X-Wap-Application-Id header.
    public var applicationId: Swift.String {
        get throws {
            try _interop.get_ApplicationId()
        }
    }

    /// Gets the binary body of the blob in the SmsWapMessage.
    /// - Returns: The binary body of the blob in the message.
    public var binaryBody: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BinaryBody())
        }
    }

    /// Gets the value of the **Content-Type** header in the SmsWapMessage. Header parameters can be found in the Headers property.
    /// - Returns: The value of the **Content-Type** header in the message.
    public var contentType: Swift.String {
        get throws {
            try _interop.get_ContentType()
        }
    }

    /// Gets the phone number of the sender of the SmsWapMessage.
    /// - Returns: The phone number of the sender of the message.
    public var from: Swift.String {
        get throws {
            try _interop.get_From()
        }
    }

    /// Gets the header name-value pairs of the WAP push message.
    /// - Returns: The header name-value pairs of the WAP push message.
    public var headers: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Headers())
        }
    }

    /// Gets the timestamp of the SmsWapMessage.
    /// - Returns: The timestamp of the message.
    public var timestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    /// Gets the recipient phone number of this SmsWapMessage.
    /// - Returns: The recipient phone number of this message.
    public var to: Swift.String {
        get throws {
            try _interop.get_To()
        }
    }

    // MARK: Windows.Devices.Sms.ISmsMessageBase members

    /// Gets the cellular class of the SMS device that received the message.
    /// - Returns: The cellular class of the SMS device that received the message.
    public var cellularClass: WindowsDevicesSms_CellularClass {
        get throws {
            try _ismsMessageBase.get_CellularClass()
        }
    }

    /// Gets the device information ID of the SmsDevice that receives the SmsWapMessage.
    /// - Returns: The device information ID of the SmsDevice that receives the SmsWapMessage.
    public var deviceId: Swift.String {
        get throws {
            try _ismsMessageBase.get_DeviceId()
        }
    }

    /// Gets the message class of the SmsWapMessage.
    /// - Returns: The message class of the SmsWapMessage.
    public var messageClass: WindowsDevicesSms_SmsMessageClass {
        get throws {
            try _ismsMessageBase.get_MessageClass()
        }
    }

    /// Gets the message type of the SmsWapMessage.
    /// - Returns: The message type.
    public var messageType: WindowsDevicesSms_SmsMessageType {
        get throws {
            try _ismsMessageBase.get_MessageType()
        }
    }

    /// Gets the ICCID (Integrated Circuit Card Identifier) of the SIM that received the message.
    /// - Returns: The ICCID of the SIM.
    public var simIccId: Swift.String {
        get throws {
            try _ismsMessageBase.get_SimIccId()
        }
    }

    // MARK: Implementation details

    private var _ismsMessageBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase>? = nil

    internal var _ismsMessageBase: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase> {
        get throws {
            try _ismsMessageBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.iid).cast(to: CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.self)
            }
        }
    }

    deinit {
        _ismsMessageBase_storage?.release()
    }
}