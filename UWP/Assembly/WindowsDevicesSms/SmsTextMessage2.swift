// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates a decoded SMS text message. Prefer this class to the older SmsTextMessage class.
public final class WindowsDevicesSms_SmsTextMessage2: WindowsRuntime.WinRTImport<WindowsDevicesSms_SmsTextMessage2Projection>, WindowsDevicesSms_ISmsMessageBaseProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesSms_SmsTextMessage2Projection.self))
    }

    // MARK: Windows.Devices.Sms.ISmsTextMessage2 members

    /// Gets or sets the body of the text message.
    /// - Returns: The plain text body of the message, as a string.
    public var body: Swift.String {
        get throws {
            try _interop.get_Body()
        }
    }

    /// Gets or sets the body of the text message.
    /// - Returns: The plain text body of the message, as a string.
    public func body(_ value: Swift.String) throws {
        try _interop.put_Body(value)
    }

    /// Gets or sets the callback number for the message.
    /// - Returns: The callback number as a string.
    public var callbackNumber: Swift.String {
        get throws {
            try _interop.get_CallbackNumber()
        }
    }

    /// Gets or sets the callback number for the message.
    /// - Returns: The callback number as a string.
    public func callbackNumber(_ value: Swift.String) throws {
        try _interop.put_CallbackNumber(value)
    }

    /// Gets or sets the encoding scheme used for the message.
    /// - Returns: An enumeration value specifying the encoding scheme used in a received message, or the scheme to be used in a message that will be sent.
    public var encoding: WindowsDevicesSms_SmsEncoding {
        get throws {
            try _interop.get_Encoding()
        }
    }

    /// Gets or sets the encoding scheme used for the message.
    /// - Returns: An enumeration value specifying the encoding scheme used in a received message, or the scheme to be used in a message that will be sent.
    public func encoding(_ value: WindowsDevicesSms_SmsEncoding) throws {
        try _interop.put_Encoding(value)
    }

    /// gets the phone number of the sender of the message.
    /// - Returns: The sender's phone number, as a string.
    public var from: Swift.String {
        get throws {
            try _interop.get_From()
        }
    }

    /// Gets or sets whether text message delivery notification is enabled for this message.
    /// - Returns: True indicates that text message delivery notification is enabled. False indicates no notification.
    public var isDeliveryNotificationEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDeliveryNotificationEnabled()
        }
    }

    /// Gets or sets whether text message delivery notification is enabled for this message.
    /// - Returns: True indicates that text message delivery notification is enabled. False indicates no notification.
    public func isDeliveryNotificationEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDeliveryNotificationEnabled(value)
    }

    /// Gets the protocol identifier for the message.
    /// - Returns: Gets an integer which identifies the protocol.
    public var protocolId: Swift.Int32 {
        get throws {
            try _interop.get_ProtocolId()
        }
    }

    /// Gets or sets the number of retry attempts for the message.
    /// - Returns: The number of retry attempts to be attempted for a sent message, or that were required to send a received message.
    public var retryAttemptCount: Swift.Int32 {
        get throws {
            try _interop.get_RetryAttemptCount()
        }
    }

    /// Gets or sets the number of retry attempts for the message.
    /// - Returns: The number of retry attempts to be attempted for a sent message, or that were required to send a received message.
    public func retryAttemptCount(_ value: Swift.Int32) throws {
        try _interop.put_RetryAttemptCount(value)
    }

    /// Gets the teleservice identifier associated with this message.
    /// - Returns: The teleservice identifier.
    public var teleserviceId: Swift.Int32 {
        get throws {
            try _interop.get_TeleserviceId()
        }
    }

    /// The timestamp of this message.
    /// - Returns: The timestamp. Based on local time for a constructed message, or on the service center timestamp for a received message.
    public var timestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    /// Gets or sets the recipient phone number for the message.
    /// - Returns: The destination phone number.
    public var to: Swift.String {
        get throws {
            try _interop.get_To()
        }
    }

    /// Gets or sets the recipient phone number for the message.
    /// - Returns: The destination phone number.
    public func to(_ value: Swift.String) throws {
        try _interop.put_To(value)
    }

    // MARK: Windows.Devices.Sms.ISmsMessageBase members

    /// Gets the cellular class of the message.
    /// - Returns: An enumeration value specifying the cellular class of the message (GSM or CDMA).
    public var cellularClass: WindowsDevicesSms_CellularClass {
        get throws {
            try _ismsMessageBase.get_CellularClass()
        }
    }

    /// Gets the device identifier for the device associated with the SMS text message.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _ismsMessageBase.get_DeviceId()
        }
    }

    /// Gets the message class of the message.
    /// - Returns: An enumeration value, set according to the network, for the message class of the message.
    public var messageClass: WindowsDevicesSms_SmsMessageClass {
        get throws {
            try _ismsMessageBase.get_MessageClass()
        }
    }

    /// Gets the message type of the message.
    /// - Returns: An enumeration value indicating the message type.
    public var messageType: WindowsDevicesSms_SmsMessageType {
        get throws {
            try _ismsMessageBase.get_MessageType()
        }
    }

    /// Gets the ICCID (Integrated Circuit Card Identifier) of the SIM that received the message.
    /// - Returns: The ICCID of the SIM.
    public var simIccId: Swift.String {
        get throws {
            try _ismsMessageBase.get_SimIccId()
        }
    }

    // MARK: Implementation details

    private var _ismsMessageBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase>? = nil

    internal var _ismsMessageBase: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase> {
        get throws {
            try _ismsMessageBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.iid).cast(to: CWinRT.SWRT_WindowsDevicesSms_ISmsMessageBase.self)
            }
        }
    }

    deinit {
        _ismsMessageBase_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sms.SmsTextMessage2", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}