// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a material that uses Physically Based Rendering (PBR).
open class WindowsUICompositionScenes_ScenePbrMaterial: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Composition.Scenes.IScenePbrMaterial members

    /// Gets or sets the alpha cutoff for the material.
    /// - Returns: The alpha cutoff for the material.
    public var alphaCutoff: Swift.Float {
        get throws {
            try _iscenePbrMaterial.get_AlphaCutoff()
        }
    }

    /// Gets or sets the alpha cutoff for the material.
    /// - Returns: The alpha cutoff for the material.
    public func alphaCutoff(_ value: Swift.Float) throws {
        try _iscenePbrMaterial.put_AlphaCutoff(value)
    }

    /// Gets or sets the alpha mode for the material.
    /// - Returns: The alpha mode for the material.
    public var alphaMode: WindowsUICompositionScenes_SceneAlphaMode {
        get throws {
            try _iscenePbrMaterial.get_AlphaMode()
        }
    }

    /// Gets or sets the alpha mode for the material.
    /// - Returns: The alpha mode for the material.
    public func alphaMode(_ value: WindowsUICompositionScenes_SceneAlphaMode) throws {
        try _iscenePbrMaterial.put_AlphaMode(value)
    }

    /// Gets or sets the material's emissive value.
    /// - Returns: The material's emissive value.
    public var emissiveFactor: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iscenePbrMaterial.get_EmissiveFactor()
        }
    }

    /// Gets or sets the material's emissive value.
    /// - Returns: The material's emissive value.
    public func emissiveFactor(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iscenePbrMaterial.put_EmissiveFactor(value)
    }

    /// Gets or sets the input for the material's emissive value.
    /// - Returns: The input for the material's emissive value.
    public var emissiveInput: WindowsUICompositionScenes_SceneMaterialInput {
        get throws {
            try COM.NullResult.unwrap(_iscenePbrMaterial.get_EmissiveInput())
        }
    }

    /// Gets or sets the input for the material's emissive value.
    /// - Returns: The input for the material's emissive value.
    public func emissiveInput(_ value: WindowsUICompositionScenes_SceneMaterialInput?) throws {
        try _iscenePbrMaterial.put_EmissiveInput(value)
    }

    /// Gets or sets a value that indicates whether the material has two sides.
    /// - Returns: **true** if the material has two sides, **false** if the material has one side.
    public var isDoubleSided: Swift.Bool {
        get throws {
            try _iscenePbrMaterial.get_IsDoubleSided()
        }
    }

    /// Gets or sets a value that indicates whether the material has two sides.
    /// - Returns: **true** if the material has two sides, **false** if the material has one side.
    public func isDoubleSided(_ value: Swift.Bool) throws {
        try _iscenePbrMaterial.put_IsDoubleSided(value)
    }

    /// Gets or sets the input for material's normal.
    /// - Returns: The input for for material's base normal.
    public var normalInput: WindowsUICompositionScenes_SceneMaterialInput {
        get throws {
            try COM.NullResult.unwrap(_iscenePbrMaterial.get_NormalInput())
        }
    }

    /// Gets or sets the input for material's normal.
    /// - Returns: The input for for material's base normal.
    public func normalInput(_ value: WindowsUICompositionScenes_SceneMaterialInput?) throws {
        try _iscenePbrMaterial.put_NormalInput(value)
    }

    /// Gets or sets the normal scale for the material.
    /// - Returns: The normal scale for the material.
    public var normalScale: Swift.Float {
        get throws {
            try _iscenePbrMaterial.get_NormalScale()
        }
    }

    /// Gets or sets the normal scale for the material.
    /// - Returns: The normal scale for the material.
    public func normalScale(_ value: Swift.Float) throws {
        try _iscenePbrMaterial.put_NormalScale(value)
    }

    /// Gets or sets the input for the material's occlusion.
    /// - Returns: The input for the material's occlusion.
    public var occlusionInput: WindowsUICompositionScenes_SceneMaterialInput {
        get throws {
            try COM.NullResult.unwrap(_iscenePbrMaterial.get_OcclusionInput())
        }
    }

    /// Gets or sets the input for the material's occlusion.
    /// - Returns: The input for the material's occlusion.
    public func occlusionInput(_ value: WindowsUICompositionScenes_SceneMaterialInput?) throws {
        try _iscenePbrMaterial.put_OcclusionInput(value)
    }

    /// Gets or sets the occlusion strength.
    /// - Returns: The occlusion strength.
    public var occlusionStrength: Swift.Float {
        get throws {
            try _iscenePbrMaterial.get_OcclusionStrength()
        }
    }

    /// Gets or sets the occlusion strength.
    /// - Returns: The occlusion strength.
    public func occlusionStrength(_ value: Swift.Float) throws {
        try _iscenePbrMaterial.put_OcclusionStrength(value)
    }

    // MARK: Implementation details

    private var _iscenePbrMaterial_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterial>? = nil

    internal var _iscenePbrMaterial: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterial> {
        get throws {
            try _iscenePbrMaterial_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterial.iid).cast(to: CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterial.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterial>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iscenePbrMaterial_storage?.release()
    }

    private static var _iscenePbrMaterialFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterialFactory>? = nil

    internal static var _iscenePbrMaterialFactory: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterialFactory> {
        get throws {
            try _iscenePbrMaterialFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.Scenes.ScenePbrMaterial", id: CWinRT.SWRT_WindowsUICompositionScenes_IScenePbrMaterialFactory.iid)
            }
        }
    }
}