// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an instance of a service on a Bluetooth BR device.
public final class WindowsDevicesBluetoothRfcomm_RfcommDeviceService: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothRfcomm_RfcommDeviceServiceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService members

    /// Gets the connection host name of the RFCOMM service instance, which is used to connect to the remote device.
    /// - Returns: The HostName object of the RFCOMM service instance.
    public var connectionHostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ConnectionHostName())
        }
    }

    /// Gets the connection service name of the RFCOMM service instance, which is used to connect to the remote device.
    /// - Returns: The ServiceName object of the RFCOMM service instance.
    public var connectionServiceName: Swift.String {
        get throws {
            try _interop.get_ConnectionServiceName()
        }
    }

    /// Gets the maximum SocketProtectionLevel supported by this RFCOMM service instance.
    /// - Returns: The maximum SocketProtectionLevel of the RFCOMM service instance. This level can be passed to StreamSocket.ConnectAsync to upgrade the RFCOMM link protection level.
    public var maxProtectionLevel: WindowsNetworkingSockets_SocketProtectionLevel {
        get throws {
            try _interop.get_MaxProtectionLevel()
        }
    }

    /// Gets the current SocketProtectionLevel of the RFCOMM service instance.
    /// - Returns: The current SocketProtectionLevel of the remote RFCOMM service instance.
    public var protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel {
        get throws {
            try _interop.get_ProtectionLevel()
        }
    }

    /// Gets the RfcommServiceId of this RFCOMM service instance.
    /// - Returns: The RfcommServiceId of the RFCOMM service instance.
    public var serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServiceId())
        }
    }

    /// Gets the cached SDP attributes of the RFCOMM service instance.
    /// - Returns: The SDP attributes of the RFCOMM service instance.
    public func getSdpRawAttributesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMapView<Swift.UInt32, WindowsStorageStreams_IBuffer?>?> {
        try COM.NullResult.unwrap(_interop.getSdpRawAttributesAsync())
    }

    /// Gets the SDP attributes of the RFCOMM service instance.
    /// - Parameter cacheMode: Indicates whether SDP attributes should be retrieved from the cache or from the device.
    /// - Returns: The SDP attributes of the RFCOMM service instance.
    public func getSdpRawAttributesAsync(_ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMapView<Swift.UInt32, WindowsStorageStreams_IBuffer?>?> {
        try COM.NullResult.unwrap(_interop.getSdpRawAttributesWithCacheModeAsync(cacheMode))
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService2 members

    /// Gets the BluetoothDevice object describing the device associated with the current RfcommDeviceService object.
    /// - Returns: The BluetoothDevice object describing the device associated with the current RfcommDeviceService object.
    public var device: WindowsDevicesBluetooth_BluetoothDevice {
        get throws {
            try COM.NullResult.unwrap(_irfcommDeviceService2.get_Device())
        }
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the RFCOMM device.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceService3 members

    /// The device access information. Used to check and monitor access.
    /// - Returns: Gets the current DeviceAccessInformation for the service.
    public var deviceAccessInformation: WindowsDevicesEnumeration_DeviceAccessInformation {
        get throws {
            try COM.NullResult.unwrap(_irfcommDeviceService3.get_DeviceAccessInformation())
        }
    }

    /// Used to request explicit access to the Rfcomm service. This invokes Device Consent and must be called on the UI thread. By default, unpaired devices do not require consent, while paired devices do. FromIdAsync will only display a consent prompt when called for a paired device. RequestAccessAsync allows the app to make the access request explicit in the event where the device may become paired in the future through other uses of the device.
    /// - Returns: After the async operation completes, returns a DeviceAccessStatus object.
    public func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesEnumeration_DeviceAccessStatus> {
        try COM.NullResult.unwrap(_irfcommDeviceService3.requestAccessAsync())
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics members

    /// Gets an RfcommDeviceService object from a DeviceInformation Id for an RFCOMM service instance.
    /// - Parameter deviceId: The DeviceInformation Id that identifies the RFCOMM service instance. This id can be retrieved from Windows.Devices.Enumeration.
    /// - Returns: The RfcommDeviceService object that represents the RFCOMM service instance.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommDeviceService?> {
        try COM.NullResult.unwrap(_irfcommDeviceServiceStatics.fromIdAsync(deviceId))
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of an RFCOMM service. This string is passed to the CreateWatcher method.
    /// - Parameter serviceId: The service id for which to query.
    /// - Returns: An AQS string for identifying RFCOMM service instances.
    public static func getDeviceSelector(_ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?) throws -> Swift.String {
        try _irfcommDeviceServiceStatics.getDeviceSelector(serviceId)
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommDeviceServiceStatics2 members

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of all Rfcomm services on a remote Bluetooth device.
    /// - Parameter bluetoothDevice: The remote bluetooth device.
    /// - Returns: The AQS string for identifying instances of all Rfcomm services on a remote Bluetooth device.
    public static func getDeviceSelectorForBluetoothDevice(_ bluetoothDevice: WindowsDevicesBluetooth_BluetoothDevice?) throws -> Swift.String {
        try _irfcommDeviceServiceStatics2.getDeviceSelectorForBluetoothDevice(bluetoothDevice)
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying cached instances of all Rfcomm services on a remote Bluetooth device.
    /// - Parameter bluetoothDevice: The remote Bluetooth device.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: The AQS string for identifying cached instances of all Rfcomm services on a remote Bluetooth device.
    public static func getDeviceSelectorForBluetoothDevice(_ bluetoothDevice: WindowsDevicesBluetooth_BluetoothDevice?, _ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> Swift.String {
        try _irfcommDeviceServiceStatics2.getDeviceSelectorForBluetoothDeviceWithCacheMode(bluetoothDevice, cacheMode)
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of Rfcomm services on a remote Bluetooth device.
    /// - Parameter bluetoothDevice: The remote Bluetooth device.
    /// - Parameter serviceId: The service ID.
    /// - Returns: The AQS string for identifying instances of Rfcomm services.
    public static func getDeviceSelectorForBluetoothDeviceAndServiceId(_ bluetoothDevice: WindowsDevicesBluetooth_BluetoothDevice?, _ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?) throws -> Swift.String {
        try _irfcommDeviceServiceStatics2.getDeviceSelectorForBluetoothDeviceAndServiceId(bluetoothDevice, serviceId)
    }

    /// Gets an Advanced Query Syntax (AQS) string for identifying instances of Rfcomm services on a remote Bluetooth device.
    /// - Parameter bluetoothDevice: The remote bluetooth device.
    /// - Parameter serviceId: The service ID.
    /// - Parameter cacheMode: The cache mode.
    /// - Returns: The AQS string for identifying instances of Rfcomm services.
    public static func getDeviceSelectorForBluetoothDeviceAndServiceId(_ bluetoothDevice: WindowsDevicesBluetooth_BluetoothDevice?, _ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?, _ cacheMode: WindowsDevicesBluetooth_BluetoothCacheMode) throws -> Swift.String {
        try _irfcommDeviceServiceStatics2.getDeviceSelectorForBluetoothDeviceAndServiceIdWithCacheMode(bluetoothDevice, serviceId, cacheMode)
    }

    // MARK: Implementation details

    private var _irfcommDeviceService2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService2>? = nil

    internal var _irfcommDeviceService2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService2> {
        get throws {
            try _irfcommDeviceService2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _irfcommDeviceService3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService3>? = nil

    internal var _irfcommDeviceService3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService3> {
        get throws {
            try _irfcommDeviceService3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService3.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceService3.self)
            }
        }
    }

    deinit {
        _irfcommDeviceService2_storage?.release()
        _iclosable_storage?.release()
        _irfcommDeviceService3_storage?.release()
    }

    private static var _irfcommDeviceServiceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics>? = nil

    internal static var _irfcommDeviceServiceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics> {
        get throws {
            try _irfcommDeviceServiceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService", id: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics.iid)
            }
        }
    }

    private static var _irfcommDeviceServiceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics2>? = nil

    internal static var _irfcommDeviceServiceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics2> {
        get throws {
            try _irfcommDeviceServiceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService", id: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommDeviceServiceStatics2.iid)
            }
        }
    }
}