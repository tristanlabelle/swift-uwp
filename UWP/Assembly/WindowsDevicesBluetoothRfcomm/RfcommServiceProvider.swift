// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an instance of a local RFCOMM service.
public final class WindowsDevicesBluetoothRfcomm_RfcommServiceProvider: WindowsRuntime.WinRTImport<WindowsDevicesBluetoothRfcomm_RfcommServiceProviderProjection> {
    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider members

    /// Gets a collection of SDP attributes for advertising.
    /// - Returns: The collection of SDP attributes for advertising.
    public var sdpRawAttributes: WindowsFoundationCollections_IMap<Swift.UInt32, WindowsStorageStreams_IBuffer?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SdpRawAttributes())
        }
    }

    /// Gets the RfcommServiceId of this local RFCOMM service instance.
    /// - Returns: The RfcommServiceId of the local RFCOMM service instance.
    public var serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServiceId())
        }
    }

    /// Begins advertising the SDP attributes.
    /// - Parameter listener: The StreamSocketListener that is listening for incoming connections.
    public func startAdvertising(_ listener: WindowsNetworkingSockets_StreamSocketListener?) throws {
        try _interop.startAdvertising(listener)
    }

    /// Stops advertising the SDP attributes.
    public func stopAdvertising() throws {
        try _interop.stopAdvertising()
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProvider2 members

    /// Begins advertising the SDP attributes.
    /// - Parameter listener: The StreamSocketListener that is listening for incoming connections.
    /// - Parameter radioDiscoverable: Indicates whether the radio is discoverable (true) or not (false).
    public func startAdvertising(_ listener: WindowsNetworkingSockets_StreamSocketListener?, _ radioDiscoverable: Swift.Bool) throws {
        try _irfcommServiceProvider2.startAdvertisingWithRadioDiscoverability(listener, radioDiscoverable)
    }

    // MARK: Windows.Devices.Bluetooth.Rfcomm.IRfcommServiceProviderStatics members

    /// Gets a RfcommServiceProvider object from a DeviceInformation Id for a RFCOMM service instance.
    /// - Parameter serviceId: The RfcommServiceId to be hosted locally.
    /// - Returns: The RfcommServiceProvider object that represents the local RFCOMM service instance.
    public static func createAsync(_ serviceId: WindowsDevicesBluetoothRfcomm_RfcommServiceId?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesBluetoothRfcomm_RfcommServiceProvider?> {
        try COM.NullResult.unwrap(_irfcommServiceProviderStatics.createAsync(serviceId))
    }

    // MARK: Implementation details

    private var _irfcommServiceProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProvider2>? = nil

    internal var _irfcommServiceProvider2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProvider2> {
        get throws {
            try _irfcommServiceProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProvider2.iid).cast(to: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProvider2.self)
            }
        }
    }

    deinit {
        _irfcommServiceProvider2_storage?.release()
    }

    private static var _irfcommServiceProviderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProviderStatics>? = nil

    internal static var _irfcommServiceProviderStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProviderStatics> {
        get throws {
            try _irfcommServiceProviderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider", id: CWinRT.SWRT_WindowsDevicesBluetoothRfcomm_IRfcommServiceProviderStatics.iid)
            }
        }
    }
}