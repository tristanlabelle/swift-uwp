// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a service that source apps can call to access contact data for a specific user.
public final class WindowsApplicationModelContacts_ContactManagerForUser: WindowsRuntime.WinRTImport<WindowsApplicationModelContacts_ContactManagerForUserProjection> {
    // MARK: Windows.ApplicationModel.Contacts.IContactManagerForUser members

    /// Gets or sets the display name order for contacts.
    /// - Returns: The display name order for contacts.
    public var systemDisplayNameOrder: WindowsApplicationModelContacts_ContactNameOrder {
        get throws {
            try _interop.get_SystemDisplayNameOrder()
        }
    }

    /// Gets or sets the display name order for contacts.
    /// - Returns: The display name order for contacts.
    public func systemDisplayNameOrder(_ value: WindowsApplicationModelContacts_ContactNameOrder) throws {
        try _interop.put_SystemDisplayNameOrder(value)
    }

    /// Gets or sets the sort order for contacts. For example, sort by last name or first name.
    /// - Returns: The sort order.
    public var systemSortOrder: WindowsApplicationModelContacts_ContactNameOrder {
        get throws {
            try _interop.get_SystemSortOrder()
        }
    }

    /// Gets or sets the sort order for contacts. For example, sort by last name or first name.
    /// - Returns: The sort order.
    public func systemSortOrder(_ value: WindowsApplicationModelContacts_ContactNameOrder) throws {
        try _interop.put_SystemSortOrder(value)
    }

    /// Gets the User represented by this contact manager.
    /// - Returns: The User represented by this contact manager.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_interop.get_User())
        }
    }

    /// Asynchronously converts a Contact to a vCard.
    /// - Parameter contact: The Contact to convert.
    /// - Returns: A stream containing the vCard data.
    public func convertContactToVCardAsync(_ contact: WindowsApplicationModelContacts_Contact?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_RandomAccessStreamReference?> {
        try COM.NullResult.unwrap(_interop.convertContactToVCardAsync(contact))
    }

    /// Asynchronously converts a Contact to a vCard.
    /// - Parameter contact: The Contact to convert.
    /// - Parameter maxBytes: The maximum size for the vCard in bytes.
    /// - Returns: A stream containing the vCard data.
    public func convertContactToVCardAsync(_ contact: WindowsApplicationModelContacts_Contact?, _ maxBytes: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_RandomAccessStreamReference?> {
        try COM.NullResult.unwrap(_interop.convertContactToVCardAsyncWithMaxBytes(contact, maxBytes))
    }

    /// Asynchronously converts a vCard to a Contact.
    /// - Parameter vCard: A stream containing the vCard data.
    /// - Returns: The converted Contact.
    public func convertVCardToContactAsync(_ vCard: WindowsStorageStreams_IRandomAccessStreamReference?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelContacts_Contact?> {
        try COM.NullResult.unwrap(_interop.convertVCardToContactAsync(vCard))
    }

    /// Asynchronously returns the ContactStore from the system.
    /// - Parameter accessType: Specifies the access type, such as **AllContactsReadOnly** for all accounts or **AppContactsReadWrite** for the calling app's accounts.
    /// - Returns: Returns the ContactStore.
    public func requestStoreAsync(_ accessType: WindowsApplicationModelContacts_ContactStoreAccessType) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelContacts_ContactStore?> {
        try COM.NullResult.unwrap(_interop.requestStoreAsync(accessType))
    }

    /// Asynchronously returns the ContactAnnotationStore from the system.
    /// - Parameter accessType: Specifies the access type, such as **AllAnnotationsReadWrite** for all annotations or **AppAnnotationsReadWrite** for the calling app's annotations.
    /// - Returns: Returns the ContactAnnotationStore.
    public func requestAnnotationStoreAsync(_ accessType: WindowsApplicationModelContacts_ContactAnnotationStoreAccessType) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelContacts_ContactAnnotationStore?> {
        try COM.NullResult.unwrap(_interop.requestAnnotationStoreAsync(accessType))
    }

    // MARK: Windows.ApplicationModel.Contacts.IContactManagerForUser2 members

    /// Queries the operating system for a user’s contact and shows the contact data in a full contact card.
    /// - Parameter contact: The object that represents the contact that the app wants to display the contact card for.*contact* must contain at least an Id, Emails, or a phone number from a Phones list to query the user’s contact database to retrieve a matching contact to display. Id has higher priority for querying. If an Id matches, the rest of query parameters will be ignored for matching purposes. If an Id does not find a match, the query uses the rest of query parameters.
    /// - Parameter fullContactCardOptions: Specifies how to display the full contact card.
    public func showFullContactCard(_ contact: WindowsApplicationModelContacts_Contact?, _ fullContactCardOptions: WindowsApplicationModelContacts_FullContactCardOptions?) throws {
        try _icontactManagerForUser2.showFullContactCard(contact, fullContactCardOptions)
    }

    // MARK: Implementation details

    private var _icontactManagerForUser2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelContacts_IContactManagerForUser2>? = nil

    internal var _icontactManagerForUser2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelContacts_IContactManagerForUser2> {
        get throws {
            try _icontactManagerForUser2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelContacts_IContactManagerForUser2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelContacts_IContactManagerForUser2.self)
            }
        }
    }

    deinit {
        _icontactManagerForUser2_storage?.release()
    }
}