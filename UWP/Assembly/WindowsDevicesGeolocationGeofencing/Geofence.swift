// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the functionality to define a geofence (a geographical area of interest) to monitor.
public final class WindowsDevicesGeolocationGeofencing_Geofence: WindowsRuntime.WinRTImport<WindowsDevicesGeolocationGeofencing_GeofenceProjection> {
    // MARK: Windows.Devices.Geolocation.Geofencing.IGeofenceFactory members

    public convenience init(_ id: Swift.String, _ geoshape: WindowsDevicesGeolocation_IGeoshape?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeofenceFactory.create(id, geoshape)))
    }

    public convenience init(_ id: Swift.String, _ geoshape: WindowsDevicesGeolocation_IGeoshape?, _ monitoredStates: WindowsDevicesGeolocationGeofencing_MonitoredGeofenceStates, _ singleUse: Swift.Bool) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeofenceFactory.createWithMonitorStates(id, geoshape, monitoredStates, singleUse)))
    }

    public convenience init(_ id: Swift.String, _ geoshape: WindowsDevicesGeolocation_IGeoshape?, _ monitoredStates: WindowsDevicesGeolocationGeofencing_MonitoredGeofenceStates, _ singleUse: Swift.Bool, _ dwellTime: WindowsFoundation_TimeSpan) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeofenceFactory.createWithMonitorStatesAndDwellTime(id, geoshape, monitoredStates, singleUse, dwellTime)))
    }

    public convenience init(_ id: Swift.String, _ geoshape: WindowsDevicesGeolocation_IGeoshape?, _ monitoredStates: WindowsDevicesGeolocationGeofencing_MonitoredGeofenceStates, _ singleUse: Swift.Bool, _ dwellTime: WindowsFoundation_TimeSpan, _ startTime: WindowsFoundation_DateTime, _ duration: WindowsFoundation_TimeSpan) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeofenceFactory.createWithMonitorStatesDwellTimeStartTimeAndDuration(id, geoshape, monitoredStates, singleUse, dwellTime, startTime, duration)))
    }

    // MARK: Windows.Devices.Geolocation.Geofencing.IGeofence members

    /// Gets the time window, beginning after the StartTime, during which the Geofence is monitored.
    /// - Returns: The time window, beginning after the StartTime, during which the Geofence is monitored.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// The minimum time that a position has to be inside or outside of the Geofence in order for the notification to be triggered.
    /// - Returns: The minimum time that a position has to be inside or outside of the geofence in order for the notification to be triggered.
    public var dwellTime: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_DwellTime()
        }
    }

    /// The shape of the geofence region.
    /// - Returns: The shape of the geofence region.
    public var geoshape: WindowsDevicesGeolocation_IGeoshape {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Geoshape())
        }
    }

    /// The id of the Geofence.
    /// - Returns: The id of the geofence.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Indicates the states that the Geofence is being monitored for.
    /// - Returns: The states that the geofence is being monitored for.
    public var monitoredStates: WindowsDevicesGeolocationGeofencing_MonitoredGeofenceStates {
        get throws {
            try _interop.get_MonitoredStates()
        }
    }

    /// Indicates whether the Geofence should be triggered once or multiple times.
    /// - Returns: **True** indicates the geofence should be monitored only for one use. **False** indicates the geofence should be monitored for multiple uses.
    public var singleUse: Swift.Bool {
        get throws {
            try _interop.get_SingleUse()
        }
    }

    /// The time to start monitoring the Geofence.
    /// - Returns: The time to start monitoring the geofence. The default value is 0, which is the beginning of time, epoch.
    public var startTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_StartTime()
        }
    }

    // MARK: Implementation details

    private static var _igeofenceFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocationGeofencing_IGeofenceFactory>? = nil

    internal static var _igeofenceFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocationGeofencing_IGeofenceFactory> {
        get throws {
            try _igeofenceFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.Geofencing.Geofence", id: CWinRT.SWRT_WindowsDevicesGeolocationGeofencing_IGeofenceFactory.iid)
            }
        }
    }
}