// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Retrieves standard HTTP methods such as GET and POST and creates new HTTP methods.
public final class WindowsWebHttp_HttpMethod: WindowsRuntime.WinRTImport<WindowsWebHttp_HttpMethodProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Web.Http.IHttpMethodFactory members

    public convenience init(_ method: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihttpMethodFactory.create(method)))
    }

    // MARK: Windows.Web.Http.IHttpMethod members

    /// Gets the HTTP method.
    /// - Returns: An HTTP method represented as a String.
    public var method: Swift.String {
        get throws {
            try _interop.get_Method()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the current HttpMethod object.
    /// - Returns: A string that represents the current object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Web.Http.IHttpMethodStatics members

    /// Gets the HTTP DELETE method.
    /// - Returns: The HTTP DELETE method.
    public static var delete: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Delete())
        }
    }

    /// Gets the HTTP GET method.
    /// - Returns: The HTTP GET method.
    public static var get: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Get())
        }
    }

    /// Gets the HTTP HEAD method.
    /// - Returns: The HTTP HEAD method.
    public static var head: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Head())
        }
    }

    /// Gets the HTTP OPTIONS method.
    /// - Returns: The HTTP OPTIONS method.
    public static var options: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Options())
        }
    }

    /// Gets the HTTP PATCH method,
    /// - Returns: The HTTP PATCH method.
    public static var patch: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Patch())
        }
    }

    /// Gets the HTTP POST method.
    /// - Returns: The HTTP POST method.
    public static var post: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Post())
        }
    }

    /// Gets the HTTP PUT method.
    /// - Returns: The HTTP PUT method.
    public static var put: WindowsWebHttp_HttpMethod {
        get throws {
            try COM.NullResult.unwrap(_ihttpMethodStatics.get_Put())
        }
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihttpMethodFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttp_IHttpMethodFactory>? = nil

    internal static var _ihttpMethodFactory: COM.COMInterop<CWinRT.SWRT_WindowsWebHttp_IHttpMethodFactory> {
        get throws {
            try _ihttpMethodFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.HttpMethod", id: CWinRT.SWRT_WindowsWebHttp_IHttpMethodFactory.iid)
            }
        }
    }

    private static var _ihttpMethodStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsWebHttp_IHttpMethodStatics>? = nil

    internal static var _ihttpMethodStatics: COM.COMInterop<CWinRT.SWRT_WindowsWebHttp_IHttpMethodStatics> {
        get throws {
            try _ihttpMethodStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Web.Http.HttpMethod", id: CWinRT.SWRT_WindowsWebHttp_IHttpMethodStatics.iid)
            }
        }
    }
}