// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// The message that is spoken by **Cortana** and shown on the **Cortana** canvas.
public final class WindowsApplicationModelVoiceCommands_VoiceCommandUserMessage: WindowsRuntime.WinRTImport<WindowsApplicationModelVoiceCommands_VoiceCommandUserMessageProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelVoiceCommands_VoiceCommandUserMessageProjection.self))
    }

    // MARK: Windows.ApplicationModel.VoiceCommands.IVoiceCommandUserMessage members

    /// Gets or sets the message that is shown on the **Cortana** canvas.
    /// - Returns: + An informative statement on progress, completion, and error screens (see ReportProgressAsync, ReportSuccessAsync, ReportFailureAsync ).
    public var displayMessage: Swift.String {
        get throws {
            try _interop.get_DisplayMessage()
        }
    }

    /// Gets or sets the message that is shown on the **Cortana** canvas.
    /// - Returns: + An informative statement on progress, completion, and error screens (see ReportProgressAsync, ReportSuccessAsync, ReportFailureAsync ).
    public func displayMessage(_ value: Swift.String) throws {
        try _interop.put_DisplayMessage(value)
    }

    /// The message that is spoken by **Cortana**.
    /// - Returns: + An informative statement on progress, completion, and error screens (see ReportProgressAsync, ReportSuccessAsync, ReportFailureAsync ).
    public var spokenMessage: Swift.String {
        get throws {
            try _interop.get_SpokenMessage()
        }
    }

    /// The message that is spoken by **Cortana**.
    /// - Returns: + An informative statement on progress, completion, and error screens (see ReportProgressAsync, ReportSuccessAsync, ReportFailureAsync ).
    public func spokenMessage(_ value: Swift.String) throws {
        try _interop.put_SpokenMessage(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.VoiceCommands.VoiceCommandUserMessage", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}