// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a picker flyout that contains a list of remote devices for the user to choose from.
public final class WindowsMediaDialProtocol_DialDevicePicker: WindowsRuntime.WinRTImport<WindowsMediaDialProtocol_DialDevicePickerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaDialProtocol_DialDevicePickerProjection.self))
    }

    // MARK: Windows.Media.DialProtocol.IDialDevicePicker members

    /// Used to change the colors of the picker.
    /// - Returns: The color of the picker.
    public var appearance: WindowsDevicesEnumeration_DevicePickerAppearance {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Appearance())
        }
    }

    /// Gets the filter used to choose what devices to show in the picker.
    /// - Returns: The dial device picker filter.
    public var filter: WindowsMediaDialProtocol_DialDevicePickerFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Filter())
        }
    }

    /// Indicates that the device picker was light dismissed, which means that the user clicked or touched anywhere other than the picker UI, and so the picker will be closed.
    public func dialDevicePickerDismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaDialProtocol_DialDevicePicker?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DialDevicePickerDismissed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dialDevicePickerDismissed)
    }

    public func dialDevicePickerDismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DialDevicePickerDismissed(token)
    }

    /// Indicates that the user selected a device from the picker.
    public func dialDeviceSelected(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaDialProtocol_DialDevicePicker?, WindowsMediaDialProtocol_DialDeviceSelectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DialDeviceSelected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dialDeviceSelected)
    }

    public func dialDeviceSelected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DialDeviceSelected(token)
    }

    /// Indicates that the user clicked on the disconnect button in the picker.
    public func disconnectButtonClicked(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaDialProtocol_DialDevicePicker?, WindowsMediaDialProtocol_DialDisconnectButtonClickedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DisconnectButtonClicked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: disconnectButtonClicked)
    }

    public func disconnectButtonClicked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DisconnectButtonClicked(token)
    }

    /// Displays the picker to the user. When called, the picker flies out from an edge of the provided rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to show.
    public func show(_ selection: WindowsFoundation_Rect) throws {
        try _interop.show(selection)
    }

    /// Displays the picker to the user. When called, the picker flies out from the specified edge of the provided rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to show.
    /// - Parameter preferredPlacement: The edge from which you want the picker to show.
    public func show(_ selection: WindowsFoundation_Rect, _ preferredPlacement: WindowsUIPopups_Placement) throws {
        try _interop.showWithPlacement(selection, preferredPlacement)
    }

    /// Shows the picker. Call this method directly to show to show the picker, instead of showing it in response to an event.
    /// - Parameter selection: The rectangle from which to show the picker.
    /// - Returns: The device the user selected from the picker.
    public func pickSingleDialDeviceAsync(_ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaDialProtocol_DialDevice?> {
        try COM.NullResult.unwrap(_interop.pickSingleDialDeviceAsync(selection))
    }

    /// Shows the picker. Call this method directly to show to show the picker, instead of showing it in response to an event.
    /// - Parameter selection: The rectangle from which to show the picker.
    /// - Parameter preferredPlacement: The edge of the rectangle from which to show the picker.
    /// - Returns: The DialDevice object selected.
    public func pickSingleDialDeviceAsync(_ selection: WindowsFoundation_Rect, _ preferredPlacement: WindowsUIPopups_Placement) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaDialProtocol_DialDevice?> {
        try COM.NullResult.unwrap(_interop.pickSingleDialDeviceAsyncWithPlacement(selection, preferredPlacement))
    }

    /// Hides the picker.
    public func hide() throws {
        try _interop.hide()
    }

    /// Updates the picker UI to reflect the status fo a given remote device.
    /// - Parameter device: The remote device whose status you want to display.
    /// - Parameter status: The status you want displayed.
    public func setDisplayStatus(_ device: WindowsMediaDialProtocol_DialDevice?, _ status: WindowsMediaDialProtocol_DialDeviceDisplayStatus) throws {
        try _interop.setDisplayStatus(device, status)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.DialProtocol.DialDevicePicker", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}