// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the remote device capable of running DIAL apps.
public final class WindowsMediaDialProtocol_DialDevice: WindowsRuntime.WinRTImport<WindowsMediaDialProtocol_DialDeviceProjection> {
    // MARK: Windows.Media.DialProtocol.IDialDevice members

    /// Gets the remote device's ID. You can use this ID with the Windows.Devices.Enumeration APIs as well.
    /// - Returns: The ID of the remote device.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Creates a new DialApp object. This method does not establish a connection to the device or validate that the app exists. That is done when any function is called on the resulting DialApp object.
    /// - Parameter appName: The name of the app. This becomes the AppName property of the new object.
    /// - Returns: The DialApp object for the app.
    public func getDialApp(_ appName: Swift.String) throws -> WindowsMediaDialProtocol_DialApp {
        try COM.NullResult.unwrap(_interop.getDialApp(appName))
    }

    // MARK: Windows.Media.DialProtocol.IDialDevice2 members

    /// Gets the friendly name for the DIAL device.
    /// - Returns: The friendly name for the DIAL device.
    public var friendlyName: Swift.String {
        get throws {
            try _idialDevice2.get_FriendlyName()
        }
    }

    /// Gets a stream containing the thumbnail image for the DIAL device.
    /// - Returns: A stream containing the thumbnail image for the DIAL device.
    public var thumbnail: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_idialDevice2.get_Thumbnail())
        }
    }

    // MARK: Windows.Media.DialProtocol.IDialDeviceStatics members

    /// Returns an AQS filter string to be used with the Windows.Devices.Enumeration APIs (such as the CreateWatcher API) for a given Dial app.
    /// - Parameter appName: The name of the app.
    /// - Returns: The AQS filter.
    public static func getDeviceSelector(_ appName: Swift.String) throws -> Swift.String {
        try _idialDeviceStatics.getDeviceSelector(appName)
    }

    /// Returns a DialDevice object for a given a device ID (acquired from a query using the Windows.Devices.Enumeration APIs).
    /// - Parameter value: The ID of the device you want a DialDevice object for.
    /// - Returns: The DialDevice object for the given device ID.
    public static func fromIdAsync(_ value: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaDialProtocol_DialDevice?> {
        try COM.NullResult.unwrap(_idialDeviceStatics.fromIdAsync(value))
    }

    /// Indicates whether or not the device supports launching DIAL apps.
    /// - Parameter device: The device you want to get information for.
    /// - Returns: True if app launching is supported; false, otherwise.
    public static func deviceInfoSupportsDialAsync(_ device: WindowsDevicesEnumeration_DeviceInformation?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_idialDeviceStatics.deviceInfoSupportsDialAsync(device))
    }

    // MARK: Implementation details

    private var _idialDevice2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDialProtocol_IDialDevice2>? = nil

    internal var _idialDevice2: COM.COMInterop<CWinRT.SWRT_WindowsMediaDialProtocol_IDialDevice2> {
        get throws {
            try _idialDevice2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaDialProtocol_IDialDevice2.iid).cast(to: CWinRT.SWRT_WindowsMediaDialProtocol_IDialDevice2.self)
            }
        }
    }

    deinit {
        _idialDevice2_storage?.release()
    }

    private static var _idialDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaDialProtocol_IDialDeviceStatics>? = nil

    internal static var _idialDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaDialProtocol_IDialDeviceStatics> {
        get throws {
            try _idialDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.DialProtocol.DialDevice", id: CWinRT.SWRT_WindowsMediaDialProtocol_IDialDeviceStatics.iid)
            }
        }
    }
}