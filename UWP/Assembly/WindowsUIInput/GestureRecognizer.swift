// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides gesture and manipulation recognition, event listeners, and settings.
public final class WindowsUIInput_GestureRecognizer: WindowsRuntime.WinRTImport<WindowsUIInput_GestureRecognizerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIInput_GestureRecognizerProjection.self))
    }

    // MARK: Windows.UI.Input.IGestureRecognizer members

    /// Gets or sets a value that indicates whether manipulations during inertia are generated automatically.
    /// - Returns: True if manipulations are generated automatically; otherwise false. The default value is true.
    public var autoProcessInertia: Swift.Bool {
        get throws {
            try _interop.get_AutoProcessInertia()
        }
    }

    /// Gets or sets a value that indicates whether manipulations during inertia are generated automatically.
    /// - Returns: True if manipulations are generated automatically; otherwise false. The default value is true.
    public func autoProcessInertia(_ value: Swift.Bool) throws {
        try _interop.put_AutoProcessInertia(value)
    }

    /// Gets or sets a value that indicates whether the exact distance from initial contact to end of the cross-slide interaction is reported.By default, a small distance threshold is subtracted from the first position reported by the system for cross-slide interactions. If this flag is set, the distance threshold is not subtracted from the initial position.
    /// - Returns: True if the distance threshold is not subtracted; otherwise false. The default value is false.
    public var crossSlideExact: Swift.Bool {
        get throws {
            try _interop.get_CrossSlideExact()
        }
    }

    /// Gets or sets a value that indicates whether the exact distance from initial contact to end of the cross-slide interaction is reported.By default, a small distance threshold is subtracted from the first position reported by the system for cross-slide interactions. If this flag is set, the distance threshold is not subtracted from the initial position.
    /// - Returns: True if the distance threshold is not subtracted; otherwise false. The default value is false.
    public func crossSlideExact(_ value: Swift.Bool) throws {
        try _interop.put_CrossSlideExact(value)
    }

    /// Gets or sets a value that indicates whether the cross-slide axis is horizontal.
    /// - Returns: True if the cross-slide axis is horizontal; otherwise false. The default value is false.
    public var crossSlideHorizontally: Swift.Bool {
        get throws {
            try _interop.get_CrossSlideHorizontally()
        }
    }

    /// Gets or sets a value that indicates whether the cross-slide axis is horizontal.
    /// - Returns: True if the cross-slide axis is horizontal; otherwise false. The default value is false.
    public func crossSlideHorizontally(_ value: Swift.Bool) throws {
        try _interop.put_CrossSlideHorizontally(value)
    }

    /// Gets or sets values that indicate the distance thresholds for a CrossSliding interaction.
    /// - Returns: By default, every value in CrossSlideThresholds is set to 0.0 (CrossSliding functionality is disabled).
    public var crossSlideThresholds: WindowsUIInput_CrossSlideThresholds {
        get throws {
            try _interop.get_CrossSlideThresholds()
        }
    }

    /// Gets or sets values that indicate the distance thresholds for a CrossSliding interaction.
    /// - Returns: By default, every value in CrossSlideThresholds is set to 0.0 (CrossSliding functionality is disabled).
    public func crossSlideThresholds(_ value: WindowsUIInput_CrossSlideThresholds) throws {
        try _interop.put_CrossSlideThresholds(value)
    }

    /// Gets or sets a value that indicates the gesture and manipulation settings supported by an application.
    /// - Returns: The gesture settings supported by an application. The value of this property is a bitwise OR of members of GestureSettings enumeration.
    public var gestureSettings: WindowsUIInput_GestureSettings {
        get throws {
            try _interop.get_GestureSettings()
        }
    }

    /// Gets or sets a value that indicates the gesture and manipulation settings supported by an application.
    /// - Returns: The gesture settings supported by an application. The value of this property is a bitwise OR of members of GestureSettings enumeration.
    public func gestureSettings(_ value: WindowsUIInput_GestureSettings) throws {
        try _interop.put_GestureSettings(value)
    }

    /// Gets or sets a value that indicates the relative change in size of an object from the start of inertia to the end of inertia (when resizing, or scaling, is complete).
    /// - Returns: The relative change in size, in device-independent pixel (DIP).
    public var inertiaExpansion: Swift.Float {
        get throws {
            try _interop.get_InertiaExpansion()
        }
    }

    /// Gets or sets a value that indicates the relative change in size of an object from the start of inertia to the end of inertia (when resizing, or scaling, is complete).
    /// - Returns: The relative change in size, in device-independent pixel (DIP).
    public func inertiaExpansion(_ value: Swift.Float) throws {
        try _interop.put_InertiaExpansion(value)
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the resizing, or expansion, manipulation is complete).
    /// - Returns: The rate of deceleration, in device-independent pixel (DIP)/ms<sup>2</sup>.
    public var inertiaExpansionDeceleration: Swift.Float {
        get throws {
            try _interop.get_InertiaExpansionDeceleration()
        }
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the resizing, or expansion, manipulation is complete).
    /// - Returns: The rate of deceleration, in device-independent pixel (DIP)/ms<sup>2</sup>.
    public func inertiaExpansionDeceleration(_ value: Swift.Float) throws {
        try _interop.put_InertiaExpansionDeceleration(value)
    }

    /// Gets or sets a value that indicates the final angle of rotation of an object at the end of inertia (when the rotation manipulation is complete).
    /// - Returns: The relative change in angle of rotation, in degrees.
    public var inertiaRotationAngle: Swift.Float {
        get throws {
            try _interop.get_InertiaRotationAngle()
        }
    }

    /// Gets or sets a value that indicates the final angle of rotation of an object at the end of inertia (when the rotation manipulation is complete).
    /// - Returns: The relative change in angle of rotation, in degrees.
    public func inertiaRotationAngle(_ value: Swift.Float) throws {
        try _interop.put_InertiaRotationAngle(value)
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the rotation manipulation is complete).
    /// - Returns: The rate of deceleration, in degrees/ms<sup>2</sup>.
    public var inertiaRotationDeceleration: Swift.Float {
        get throws {
            try _interop.get_InertiaRotationDeceleration()
        }
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the rotation manipulation is complete).
    /// - Returns: The rate of deceleration, in degrees/ms<sup>2</sup>.
    public func inertiaRotationDeceleration(_ value: Swift.Float) throws {
        try _interop.put_InertiaRotationDeceleration(value)
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the translation manipulation is complete).
    /// - Returns: The rate of deceleration, in device-independent pixel (DIP)/ms<sup>2</sup>.
    public var inertiaTranslationDeceleration: Swift.Float {
        get throws {
            try _interop.get_InertiaTranslationDeceleration()
        }
    }

    /// Gets or sets a value that indicates the rate of deceleration from the start of inertia to the end of inertia (when the translation manipulation is complete).
    /// - Returns: The rate of deceleration, in device-independent pixel (DIP)/ms<sup>2</sup>.
    public func inertiaTranslationDeceleration(_ value: Swift.Float) throws {
        try _interop.put_InertiaTranslationDeceleration(value)
    }

    /// Gets or sets a value that indicates the relative change in the screen location of an object from the start of inertia to the end of inertia (when the translation manipulation is complete).
    /// - Returns: The relative change in screen location, in device-independent pixel (DIP).
    public var inertiaTranslationDisplacement: Swift.Float {
        get throws {
            try _interop.get_InertiaTranslationDisplacement()
        }
    }

    /// Gets or sets a value that indicates the relative change in the screen location of an object from the start of inertia to the end of inertia (when the translation manipulation is complete).
    /// - Returns: The relative change in screen location, in device-independent pixel (DIP).
    public func inertiaTranslationDisplacement(_ value: Swift.Float) throws {
        try _interop.put_InertiaTranslationDisplacement(value)
    }

    /// Gets a value that indicates whether an interaction is being processed.
    /// - Returns: True if the interaction (including inertia) is still being processed; otherwise false. The default value is false.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets a value that indicates whether a manipulation is still being processed during inertia (no input points are active).
    /// - Returns: True if the manipulation is still being processed during inertia; otherwise false. The default value is false.
    public var isInertial: Swift.Bool {
        get throws {
            try _interop.get_IsInertial()
        }
    }

    /// Gets or sets a value that indicates whether the exact distance from initial contact to end of the interaction is reported.By default, a small distance threshold is subtracted from the first delta reported by the system. This distance threshold is intended to account for slight movements of the contact when processing a tap gesture. If this flag is set, the distance threshold is not subtracted from the first delta.
    /// - Returns: True if the distance threshold is subtracted; otherwise false. The default value is false.
    public var manipulationExact: Swift.Bool {
        get throws {
            try _interop.get_ManipulationExact()
        }
    }

    /// Gets or sets a value that indicates whether the exact distance from initial contact to end of the interaction is reported.By default, a small distance threshold is subtracted from the first delta reported by the system. This distance threshold is intended to account for slight movements of the contact when processing a tap gesture. If this flag is set, the distance threshold is not subtracted from the first delta.
    /// - Returns: True if the distance threshold is subtracted; otherwise false. The default value is false.
    public func manipulationExact(_ value: Swift.Bool) throws {
        try _interop.put_ManipulationExact(value)
    }

    /// Gets a set of properties that are associated with the wheel button of a mouse device.
    /// - Returns: The collection of wheel button properties. The system defaults should be checked to ensure the best user experience for your app.
    public var mouseWheelParameters: WindowsUIInput_MouseWheelParameters {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MouseWheelParameters())
        }
    }

    /// Gets or sets the center point for a rotation interaction when single pointer input is detected.
    /// - Returns: The screen location for the center of rotation, in device-independent pixel (DIP).
    public var pivotCenter: WindowsFoundation_Point {
        get throws {
            try _interop.get_PivotCenter()
        }
    }

    /// Gets or sets the center point for a rotation interaction when single pointer input is detected.
    /// - Returns: The screen location for the center of rotation, in device-independent pixel (DIP).
    public func pivotCenter(_ value: WindowsFoundation_Point) throws {
        try _interop.put_PivotCenter(value)
    }

    /// Gets or sets the radius, from the PivotCenter to the pointer input, for a rotation interaction when single pointer input is detected.
    /// - Returns: The offset between the PivotCenter point and the single pointer input, in device-independent pixel (DIP).
    public var pivotRadius: Swift.Float {
        get throws {
            try _interop.get_PivotRadius()
        }
    }

    /// Gets or sets the radius, from the PivotCenter to the pointer input, for a rotation interaction when single pointer input is detected.
    /// - Returns: The offset between the PivotCenter point and the single pointer input, in device-independent pixel (DIP).
    public func pivotRadius(_ value: Swift.Float) throws {
        try _interop.put_PivotRadius(value)
    }

    /// Gets or sets a value that indicates whether visual feedback is displayed during an interaction.
    /// - Returns: True if feedback is displayed; otherwise false. The default is true.
    public var showGestureFeedback: Swift.Bool {
        get throws {
            try _interop.get_ShowGestureFeedback()
        }
    }

    /// Gets or sets a value that indicates whether visual feedback is displayed during an interaction.
    /// - Returns: True if feedback is displayed; otherwise false. The default is true.
    public func showGestureFeedback(_ value: Swift.Bool) throws {
        try _interop.put_ShowGestureFeedback(value)
    }

    /// Occurs when a user performs a slide or swipe gesture (through a single touch contact) within a content area that supports panning along a single axis only. The gesture must occur in a direction that is perpendicular to this panning axis.
    public func crossSliding(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_CrossSlidingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CrossSliding(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: crossSliding)
    }

    public func crossSliding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CrossSliding(token)
    }

    /// Occurs when a user performs a slide or swipe gesture with a mouse or pen/stylus (single contact).
    public func dragging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_DraggingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Dragging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragging)
    }

    public func dragging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Dragging(token)
    }

    /// Occurs when a user performs a press and hold gesture (with a single touch, mouse, or pen/stylus contact).
    public func holding(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_HoldingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Holding(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: holding)
    }

    public func holding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Holding(token)
    }

    /// Occurs when the input points are lifted and all subsequent motion (translation, expansion, or rotation) through inertia has ended.
    public func manipulationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_ManipulationCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ManipulationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationCompleted)
    }

    public func manipulationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ManipulationCompleted(token)
    }

    /// Occurs when all contact points are lifted during a manipulation and the velocity of the manipulation is significant enough to initiate inertia behavior (translation, expansion, or rotation continue after the input pointers are lifted).
    public func manipulationInertiaStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_ManipulationInertiaStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ManipulationInertiaStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationInertiaStarting)
    }

    public func manipulationInertiaStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ManipulationInertiaStarting(token)
    }

    /// Occurs when one or more input points have been initiated and subsequent motion (translation, expansion, or rotation) has begun.
    public func manipulationStarted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_ManipulationStartedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ManipulationStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationStarted)
    }

    public func manipulationStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ManipulationStarted(token)
    }

    /// Occurs after one or more input points have been initiated and subsequent motion (translation, expansion, or rotation) is under way.
    public func manipulationUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_ManipulationUpdatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ManipulationUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationUpdated)
    }

    public func manipulationUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ManipulationUpdated(token)
    }

    /// Occurs when the pointer input is interpreted as a right-tap gesture, regardless of input device.
    public func rightTapped(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_RightTappedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RightTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: rightTapped)
    }

    public func rightTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RightTapped(token)
    }

    /// Occurs when the pointer input is interpreted as a tap gesture.
    public func tapped(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInput_GestureRecognizer?, WindowsUIInput_TappedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Tapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: tapped)
    }

    public func tapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Tapped(token)
    }

    /// Identifies whether a tap can still be interpreted as the second tap of a double tap gesture.
    /// - Parameter value: The last input pointer.
    /// - Returns: True if a UI element supports the double tap gesture and the time threshold to complete the gesture has not been crossed; otherwise false.
    public func canBeDoubleTap(_ value: WindowsUIInput_PointerPoint?) throws -> Swift.Bool {
        try _interop.canBeDoubleTap(value)
    }

    /// Processes pointer input and raises the GestureRecognizer events appropriate to a pointer down action for the gestures and manipulations specified by the GestureSettings property.
    /// - Parameter value: The input point.
    public func processDownEvent(_ value: WindowsUIInput_PointerPoint?) throws {
        try _interop.processDownEvent(value)
    }

    public func processMoveEvents(_ value: WindowsFoundationCollections_IVector<WindowsUIInput_PointerPoint?>?) throws {
        try _interop.processMoveEvents(value)
    }

    /// Processes pointer input and raises the GestureRecognizer events appropriate to a pointer up action for the gestures and manipulations specified by the GestureSettings property.
    /// - Parameter value: The input point.
    public func processUpEvent(_ value: WindowsUIInput_PointerPoint?) throws {
        try _interop.processUpEvent(value)
    }

    /// Processes pointer input and raises the GestureRecognizer events appropriate to a mouse wheel action for the gestures and manipulations specified by the GestureSettings property.
    /// - Parameter value: The input point.
    /// - Parameter isShiftKeyDown: True if the Shift key is pressed; otherwise false.
    /// - Parameter isControlKeyDown: True if the Ctrl key is pressed.
    public func processMouseWheelEvent(_ value: WindowsUIInput_PointerPoint?, _ isShiftKeyDown: Swift.Bool, _ isControlKeyDown: Swift.Bool) throws {
        try _interop.processMouseWheelEvent(value, isShiftKeyDown, isControlKeyDown)
    }

    /// Performs inertia calculations and raises the various inertia events.
    public func processInertia() throws {
        try _interop.processInertia()
    }

    /// Causes the gesture recognizer to finalize an interaction.
    public func completeGesture() throws {
        try _interop.completeGesture()
    }

    // MARK: Windows.UI.Input.IGestureRecognizer2 members

    /// Gets or sets the maximum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The number of contact points.
    public var holdMaxContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_HoldMaxContactCount()
        }
    }

    /// Gets or sets the maximum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The number of contact points.
    public func holdMaxContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_HoldMaxContactCount(value)
    }

    /// Gets or sets the minimum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The number of contact points.
    public var holdMinContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_HoldMinContactCount()
        }
    }

    /// Gets or sets the minimum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The number of contact points.
    public func holdMinContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_HoldMinContactCount(value)
    }

    /// Gets or sets the radius of the contact points recognized for the Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The radius of the contact points, in device-independent pixels (DIP).
    public var holdRadius: Swift.Float {
        get throws {
            try _igestureRecognizer2.get_HoldRadius()
        }
    }

    /// Gets or sets the radius of the contact points recognized for the Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The radius of the contact points, in device-independent pixels (DIP).
    public func holdRadius(_ value: Swift.Float) throws {
        try _igestureRecognizer2.put_HoldRadius(value)
    }

    /// Gets or sets the time threshold at which the contacts are recognized for the Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The TimeSpan.
    public var holdStartDelay: WindowsFoundation_TimeSpan {
        get throws {
            try _igestureRecognizer2.get_HoldStartDelay()
        }
    }

    /// Gets or sets the time threshold at which the contacts are recognized for the Windows.UI.Input.GestureRecognizer.Holding event.
    /// - Returns: The TimeSpan.
    public func holdStartDelay(_ value: WindowsFoundation_TimeSpan) throws {
        try _igestureRecognizer2.put_HoldStartDelay(value)
    }

    /// Gets or sets the maximum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Tapped event.
    /// - Returns: The number of contact points.
    public var tapMaxContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_TapMaxContactCount()
        }
    }

    /// Gets or sets the maximum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Tapped event.
    /// - Returns: The number of contact points.
    public func tapMaxContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_TapMaxContactCount(value)
    }

    /// Gets or sets the minimum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Tapped event.
    /// - Returns: The number of contact points.
    public var tapMinContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_TapMinContactCount()
        }
    }

    /// Gets or sets the minimum number of contact points needed to recognize a Windows.UI.Input.GestureRecognizer.Tapped event.
    /// - Returns: The number of contact points.
    public func tapMinContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_TapMinContactCount(value)
    }

    /// Gets or sets the maximum number of contact points needed to recognize a translation (or panning) event.
    /// - Returns: The number of contact points.
    public var translationMaxContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_TranslationMaxContactCount()
        }
    }

    /// Gets or sets the maximum number of contact points needed to recognize a translation (or panning) event.
    /// - Returns: The number of contact points.
    public func translationMaxContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_TranslationMaxContactCount(value)
    }

    /// Gets or sets the minimum number of contact points needed to recognize a translation (or panning) event.
    /// - Returns: The number of contact points.
    public var translationMinContactCount: Swift.UInt32 {
        get throws {
            try _igestureRecognizer2.get_TranslationMinContactCount()
        }
    }

    /// Gets or sets the minimum number of contact points needed to recognize a translation (or panning) event.
    /// - Returns: The number of contact points.
    public func translationMinContactCount(_ value: Swift.UInt32) throws {
        try _igestureRecognizer2.put_TranslationMinContactCount(value)
    }

    // MARK: Implementation details

    private var _igestureRecognizer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInput_IGestureRecognizer2>? = nil

    internal var _igestureRecognizer2: COM.COMInterop<CWinRT.SWRT_WindowsUIInput_IGestureRecognizer2> {
        get throws {
            try _igestureRecognizer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIInput_IGestureRecognizer2.iid).cast(to: CWinRT.SWRT_WindowsUIInput_IGestureRecognizer2.self)
            }
        }
    }

    deinit {
        _igestureRecognizer2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.GestureRecognizer", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}