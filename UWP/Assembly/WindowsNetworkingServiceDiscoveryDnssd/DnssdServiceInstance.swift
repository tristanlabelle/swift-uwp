// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates an instance of a service that uses DNS Service Discovery (DNS-SD).
public final class WindowsNetworkingServiceDiscoveryDnssd_DnssdServiceInstance: WindowsRuntime.WinRTImport<WindowsNetworkingServiceDiscoveryDnssd_DnssdServiceInstanceProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstanceFactory members

    public convenience init(_ dnssdServiceInstanceName: Swift.String, _ hostName: WindowsNetworking_HostName?, _ port: Swift.UInt16) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idnssdServiceInstanceFactory.create(dnssdServiceInstanceName, hostName, port)))
    }

    // MARK: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance members

    /// Gets or sets the DNS-SD service instance name for this DnssdServiceInstance.
    /// - Returns: The name of the service.
    public var dnssdServiceInstanceName: Swift.String {
        get throws {
            try _interop.get_DnssdServiceInstanceName()
        }
    }

    /// Gets or sets the DNS-SD service instance name for this DnssdServiceInstance.
    /// - Returns: The name of the service.
    public func dnssdServiceInstanceName(_ value: Swift.String) throws {
        try _interop.put_DnssdServiceInstanceName(value)
    }

    /// Gets or sets the hostname of the host for this DnssdServiceInstance.
    /// - Returns: The name of the host, encapuslated in a HostName instance.
    public var hostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_HostName())
        }
    }

    /// Gets or sets the hostname of the host for this DnssdServiceInstance.
    /// - Returns: The name of the host, encapuslated in a HostName instance.
    public func hostName(_ value: WindowsNetworking_HostName?) throws {
        try _interop.put_HostName(value)
    }

    /// Gets or sets the port number used by this DnssdServiceInstance.
    /// - Returns: The port number used by this service instance.
    public var port: Swift.UInt16 {
        get throws {
            try _interop.get_Port()
        }
    }

    /// Gets or sets the port number used by this DnssdServiceInstance.
    /// - Returns: The port number used by this service instance.
    public func port(_ value: Swift.UInt16) throws {
        try _interop.put_Port(value)
    }

    /// Gets or sets the priority value to assign to this service instance, as defined in RFC 2782. Clients use **Priority** to decide which of several equivalent service instances to attach to.
    /// - Returns: The priority value for this service instance. See RFC 2782 for details on how clients use this value.
    public var priority: Swift.UInt16 {
        get throws {
            try _interop.get_Priority()
        }
    }

    /// Gets or sets the priority value to assign to this service instance, as defined in RFC 2782. Clients use **Priority** to decide which of several equivalent service instances to attach to.
    /// - Returns: The priority value for this service instance. See RFC 2782 for details on how clients use this value.
    public func priority(_ value: Swift.UInt16) throws {
        try _interop.put_Priority(value)
    }

    /// Gets the attributes of this service instance, as a list of [name, value] pairs of strings. Attributes can be inspected by service clients to determine additional information about a service instance.
    /// - Returns: A collection of attribute [name,value] pairs.
    public var textAttributes: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TextAttributes())
        }
    }

    /// Gets or sets the weight value assigned to this service instance, as defined in RFC 2782. Clients use the **Weight** value to choose between servers with the same **Priority** value.
    /// - Returns: The weight value for this service instance. See RFC 2782 for details on how clients use this value.
    public var weight: Swift.UInt16 {
        get throws {
            try _interop.get_Weight()
        }
    }

    /// Gets or sets the weight value assigned to this service instance, as defined in RFC 2782. Clients use the **Weight** value to choose between servers with the same **Priority** value.
    /// - Returns: The weight value for this service instance. See RFC 2782 for details on how clients use this value.
    public func weight(_ value: Swift.UInt16) throws {
        try _interop.put_Weight(value)
    }

    /// Asynchronously registers a stream (TCP) socket listener for the service, on the given socket.
    /// - Parameter socket: Describes the socket that this service instance uses to listen for new service clients.
    /// - Returns: On successful completion of the asynchronous operation, returns an object describing the results of registration.
    public func registerStreamSocketListenerAsync(_ socket: WindowsNetworkingSockets_StreamSocketListener?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingServiceDiscoveryDnssd_DnssdRegistrationResult?> {
        try COM.NullResult.unwrap(_interop.registerStreamSocketListenerAsync1(socket))
    }

    /// Asynchronously registers a stream (TCP) socket listener for the service, on the given socket and network adapter.
    /// - Parameter socket: Describes the socket that this service instance uses to listen for new service clients.
    /// - Parameter adapter: Specifies the network adapter this service uses to listen for new service clients.
    /// - Returns: On successful completion of the asynchronous operation, returns an object describing the results of registration.
    public func registerStreamSocketListenerAsync(_ socket: WindowsNetworkingSockets_StreamSocketListener?, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingServiceDiscoveryDnssd_DnssdRegistrationResult?> {
        try COM.NullResult.unwrap(_interop.registerStreamSocketListenerAsync2(socket, adapter))
    }

    /// Asynchronously registers a datagram (UDP) socket listener for the service, on a given socket.
    /// - Parameter socket: Describes the socket that this service instance uses to listen for new service clients.
    /// - Returns: On successful completion of the asynchronous operation, returns an object describing the results of registration.
    public func registerDatagramSocketAsync(_ socket: WindowsNetworkingSockets_DatagramSocket?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingServiceDiscoveryDnssd_DnssdRegistrationResult?> {
        try COM.NullResult.unwrap(_interop.registerDatagramSocketAsync1(socket))
    }

    /// Asynchronously registers a datagram (UDP) socket listener for the service, on a given socket and network adapter.
    /// - Parameter socket: Describes the socket that this service instance uses to listen for new service clients.
    /// - Parameter adapter: Specifies the network adapter this service uses to listen for new service clients.
    /// - Returns: On successful completion of the asynchronous operation, returns an object describing the results of registration.
    public func registerDatagramSocketAsync(_ socket: WindowsNetworkingSockets_DatagramSocket?, _ adapter: WindowsNetworkingConnectivity_NetworkAdapter?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingServiceDiscoveryDnssd_DnssdRegistrationResult?> {
        try COM.NullResult.unwrap(_interop.registerDatagramSocketAsync2(socket, adapter))
    }

    // MARK: Windows.Foundation.IStringable members

    /// Gets the DNS Server Resource Record (SRV RR) of this service instance, as a string.
    /// - Returns: The DNS Server Resource Record of this server instance.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _idnssdServiceInstanceFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingServiceDiscoveryDnssd_IDnssdServiceInstanceFactory>? = nil

    internal static var _idnssdServiceInstanceFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingServiceDiscoveryDnssd_IDnssdServiceInstanceFactory> {
        get throws {
            try _idnssdServiceInstanceFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance", id: CWinRT.SWRT_WindowsNetworkingServiceDiscoveryDnssd_IDnssdServiceInstanceFactory.iid)
            }
        }
    }
}