// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a specialized app bar that provides layout for AppBarButton and related command elements.
open class WindowsUIXamlControls_CommandBar: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ICommandBarFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_CommandBar.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icommandBarFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBar members

    /// Gets the collection of primary command elements for the CommandBar.
    /// - Returns: The collection of primary command elements for the CommandBar. The default is an empty collection.
    public var primaryCommands: WindowsFoundationCollections_IObservableVector<WindowsUIXamlControls_ICommandBarElement?> {
        get throws {
            try COM.NullResult.unwrap(_icommandBar.get_PrimaryCommands())
        }
    }

    /// Gets the collection of secondary command elements for the CommandBar.
    /// - Returns: The collection of secondary command elements for the CommandBar. The default is an empty collection.
    public var secondaryCommands: WindowsFoundationCollections_IObservableVector<WindowsUIXamlControls_ICommandBarElement?> {
        get throws {
            try COM.NullResult.unwrap(_icommandBar.get_SecondaryCommands())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBar2 members

    /// Gets or sets the Style applied to the overflow content of the CommandBar.
    /// - Returns: The applied Style for the overflow content of the CommandBar, if present; otherwise, **null**. The default is **null**.
    public var commandBarOverflowPresenterStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_icommandBar2.get_CommandBarOverflowPresenterStyle())
        }
    }

    /// Gets or sets the Style applied to the overflow content of the CommandBar.
    /// - Returns: The applied Style for the overflow content of the CommandBar, if present; otherwise, **null**. The default is **null**.
    public func commandBarOverflowPresenterStyle(_ value: WindowsUIXaml_Style?) throws {
        try _icommandBar2.put_CommandBarOverflowPresenterStyle(value)
    }

    /// Gets an object that provides calculated values that can be referenced as {TemplateBinding} markup extension sources when defining templates for a CommandBar control.
    /// - Returns: An object that provides calculated values for templates.
    public var commandBarTemplateSettings: WindowsUIXamlControlsPrimitives_CommandBarTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_icommandBar2.get_CommandBarTemplateSettings())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBar3 members

    /// Gets or sets a value that indicates the placement and visibility of the labels on the command bar's buttons.
    /// - Returns: An enumeration value that indicates the placement and visibility of the labels on the command bar's buttons. The default is **Bottom**.
    public var defaultLabelPosition: WindowsUIXamlControls_CommandBarDefaultLabelPosition {
        get throws {
            try _icommandBar3.get_DefaultLabelPosition()
        }
    }

    /// Gets or sets a value that indicates the placement and visibility of the labels on the command bar's buttons.
    /// - Returns: An enumeration value that indicates the placement and visibility of the labels on the command bar's buttons. The default is **Bottom**.
    public func defaultLabelPosition(_ value: WindowsUIXamlControls_CommandBarDefaultLabelPosition) throws {
        try _icommandBar3.put_DefaultLabelPosition(value)
    }

    /// Gets or sets a value that indicates whether primary commands automatically move to the overflow menu when space is limited.
    /// - Returns: **true** if primary commands automatically move to the overflow menu when space is limited; otherwise, **false**. The default is **true**.
    public var isDynamicOverflowEnabled: Swift.Bool {
        get throws {
            try _icommandBar3.get_IsDynamicOverflowEnabled()
        }
    }

    /// Gets or sets a value that indicates whether primary commands automatically move to the overflow menu when space is limited.
    /// - Returns: **true** if primary commands automatically move to the overflow menu when space is limited; otherwise, **false**. The default is **true**.
    public func isDynamicOverflowEnabled(_ value: Swift.Bool) throws {
        try _icommandBar3.put_IsDynamicOverflowEnabled(value)
    }

    /// Gets or sets a value that indicates when a command bar's overflow button is shown.
    /// - Returns: An enumeration value that indicates when a command bar's overflow button is shown. The default is **Auto**.
    public var overflowButtonVisibility: WindowsUIXamlControls_CommandBarOverflowButtonVisibility {
        get throws {
            try _icommandBar3.get_OverflowButtonVisibility()
        }
    }

    /// Gets or sets a value that indicates when a command bar's overflow button is shown.
    /// - Returns: An enumeration value that indicates when a command bar's overflow button is shown. The default is **Auto**.
    public func overflowButtonVisibility(_ value: WindowsUIXamlControls_CommandBarOverflowButtonVisibility) throws {
        try _icommandBar3.put_OverflowButtonVisibility(value)
    }

    /// Occurs when items move into or out of the overflow menu.
    public func dynamicOverflowItemsChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_CommandBar?, WindowsUIXamlControls_DynamicOverflowItemsChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icommandBar3.add_DynamicOverflowItemsChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dynamicOverflowItemsChanging)
    }

    public func dynamicOverflowItemsChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icommandBar3.remove_DynamicOverflowItemsChanging(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBarStatics2 members

    /// Identifies the CommandBarOverflowPresenterStyle dependency property.
    /// - Returns: The identifier for the CommandBarOverflowPresenterStyle dependency property.
    public static var commandBarOverflowPresenterStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics2.get_CommandBarOverflowPresenterStyleProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBarStatics members

    /// Identifies the PrimaryCommands dependency property.
    /// - Returns: The identifier for the PrimaryCommands dependency property.
    public static var primaryCommandsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics.get_PrimaryCommandsProperty())
        }
    }

    /// Identifies the SecondaryCommands dependency property.
    /// - Returns: The identifier for the SecondaryCommands dependency property.
    public static var secondaryCommandsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics.get_SecondaryCommandsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBarStatics3 members

    /// Identifies the DefaultLabelPosition dependency property.
    /// - Returns: The identifier for the DefaultLabelPosition dependency property.
    public static var defaultLabelPositionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics3.get_DefaultLabelPositionProperty())
        }
    }

    /// Identifies the IsDynamicOverflowEnabled dependency property.
    /// - Returns: The identifier for the IsDynamicOverflowEnabled dependency property.
    public static var isDynamicOverflowEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics3.get_IsDynamicOverflowEnabledProperty())
        }
    }

    /// Identifies the OverflowButtonVisibility dependency property.
    /// - Returns: The identifier for the OverflowButtonVisibility dependency property.
    public static var overflowButtonVisibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icommandBarStatics3.get_OverflowButtonVisibilityProperty())
        }
    }

    // MARK: Implementation details

    private var _icommandBar_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar>? = nil

    internal var _icommandBar: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar> {
        get throws {
            try _icommandBar_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICommandBar.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICommandBar.self)
            }
        }
    }

    private var _icommandBar2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar2>? = nil

    internal var _icommandBar2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar2> {
        get throws {
            try _icommandBar2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICommandBar2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICommandBar2.self)
            }
        }
    }

    private var _icommandBar3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar3>? = nil

    internal var _icommandBar3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar3> {
        get throws {
            try _icommandBar3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICommandBar3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICommandBar3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ICommandBar>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icommandBar_storage?.release()
        _icommandBar2_storage?.release()
        _icommandBar3_storage?.release()
    }

    private static var _icommandBarFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarFactory>? = nil

    internal static var _icommandBarFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarFactory> {
        get throws {
            try _icommandBarFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.CommandBar", id: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarFactory.iid)
            }
        }
    }

    private static var _icommandBarStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics2>? = nil

    internal static var _icommandBarStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics2> {
        get throws {
            try _icommandBarStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.CommandBar", id: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics2.iid)
            }
        }
    }

    private static var _icommandBarStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics>? = nil

    internal static var _icommandBarStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics> {
        get throws {
            try _icommandBarStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.CommandBar", id: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics.iid)
            }
        }
    }

    private static var _icommandBarStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics3>? = nil

    internal static var _icommandBarStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics3> {
        get throws {
            try _icommandBarStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.CommandBar", id: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarStatics3.iid)
            }
        }
    }
}