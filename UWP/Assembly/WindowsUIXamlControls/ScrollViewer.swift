// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a scrollable area that can contain other visible elements.
public final class WindowsUIXamlControls_ScrollViewer: WindowsRuntime.WinRTImport<WindowsUIXamlControls_ScrollViewerProjection>, WindowsUIXamlControls_IScrollAnchorProviderProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_ScrollViewerProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewer members

    /// Gets or sets a value that determines whether the ScrollViewer uses a bring-into-view scroll behavior when an item in the view gets focus.
    /// - Returns: **true** to use a behavior that brings focused items into view. **false** to use a behavior that focused items do not automatically scroll into view. The default is **true**.
    public var bringIntoViewOnFocusChange: Swift.Bool {
        get throws {
            try _interop.get_BringIntoViewOnFocusChange()
        }
    }

    /// Gets or sets a value that determines whether the ScrollViewer uses a bring-into-view scroll behavior when an item in the view gets focus.
    /// - Returns: **true** to use a behavior that brings focused items into view. **false** to use a behavior that focused items do not automatically scroll into view. The default is **true**.
    public func bringIntoViewOnFocusChange(_ value: Swift.Bool) throws {
        try _interop.put_BringIntoViewOnFocusChange(value)
    }

    /// Gets a value that indicates whether the horizontal ScrollBar is visible.
    /// - Returns: A Visibility that indicates whether the horizontal scroll bar is visible. The default value is **Hidden**.
    public var computedHorizontalScrollBarVisibility: WindowsUIXaml_Visibility {
        get throws {
            try _interop.get_ComputedHorizontalScrollBarVisibility()
        }
    }

    /// Gets a value that indicates whether the vertical ScrollBar is visible.
    /// - Returns: A Visibility that indicates whether the vertical scroll bar is visible. The default value is **Visible**.
    public var computedVerticalScrollBarVisibility: WindowsUIXaml_Visibility {
        get throws {
            try _interop.get_ComputedVerticalScrollBarVisibility()
        }
    }

    /// Gets the vertical size of all the scrollable content in the ScrollViewer.
    /// - Returns: The vertical size of all the scrollable content in the ScrollViewer.
    public var extentHeight: Swift.Double {
        get throws {
            try _interop.get_ExtentHeight()
        }
    }

    /// Gets the horizontal size of all the scrollable content in the ScrollViewer.
    /// - Returns: The horizontal size of all the scrollable content in the ScrollViewer.
    public var extentWidth: Swift.Double {
        get throws {
            try _interop.get_ExtentWidth()
        }
    }

    /// Gets the distance the content has been scrolled horizontally.
    /// - Returns: The distance the content has been scrolled horizontally.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _interop.get_HorizontalOffset()
        }
    }

    /// Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
    /// - Returns: A ScrollBarVisibility value that indicates whether a horizontal ScrollBar should be displayed. The default value is **Disabled**.
    public var horizontalScrollBarVisibility: WindowsUIXamlControls_ScrollBarVisibility {
        get throws {
            try _interop.get_HorizontalScrollBarVisibility()
        }
    }

    /// Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
    /// - Returns: A ScrollBarVisibility value that indicates whether a horizontal ScrollBar should be displayed. The default value is **Disabled**.
    public func horizontalScrollBarVisibility(_ value: WindowsUIXamlControls_ScrollBarVisibility) throws {
        try _interop.put_HorizontalScrollBarVisibility(value)
    }

    /// Gets or sets a value that determines how manipulation input influences scrolling behavior on the horizontal axis.
    /// - Returns: A value of the enumeration. The typical default (as set through the default template, not class initialization) is **Enabled**.
    public var horizontalScrollMode: WindowsUIXamlControls_ScrollMode {
        get throws {
            try _interop.get_HorizontalScrollMode()
        }
    }

    /// Gets or sets a value that determines how manipulation input influences scrolling behavior on the horizontal axis.
    /// - Returns: A value of the enumeration. The typical default (as set through the default template, not class initialization) is **Enabled**.
    public func horizontalScrollMode(_ value: WindowsUIXamlControls_ScrollMode) throws {
        try _interop.put_HorizontalScrollMode(value)
    }

    /// Gets or sets a value that indicates how the existing snap points are horizontally aligned versus the initial viewport.
    /// - Returns: A value of the enumeration.
    public var horizontalSnapPointsAlignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment {
        get throws {
            try _interop.get_HorizontalSnapPointsAlignment()
        }
    }

    /// Gets or sets a value that indicates how the existing snap points are horizontally aligned versus the initial viewport.
    /// - Returns: A value of the enumeration.
    public func horizontalSnapPointsAlignment(_ value: WindowsUIXamlControlsPrimitives_SnapPointsAlignment) throws {
        try _interop.put_HorizontalSnapPointsAlignment(value)
    }

    /// Gets or sets a value that declares how manipulation behavior reacts to the snap points along the horizontal axis.
    /// - Returns: A value of the enumeration. The default is **None** but might be set through a control template.
    public var horizontalSnapPointsType: WindowsUIXamlControls_SnapPointsType {
        get throws {
            try _interop.get_HorizontalSnapPointsType()
        }
    }

    /// Gets or sets a value that declares how manipulation behavior reacts to the snap points along the horizontal axis.
    /// - Returns: A value of the enumeration. The default is **None** but might be set through a control template.
    public func horizontalSnapPointsType(_ value: WindowsUIXamlControls_SnapPointsType) throws {
        try _interop.put_HorizontalSnapPointsType(value)
    }

    /// Gets or sets a value that determines the deferred scrolling behavior for a ScrollViewer.
    /// - Returns: **true** if deferred scrolling should occur; otherwise, **false**.
    public var isDeferredScrollingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDeferredScrollingEnabled()
        }
    }

    /// Gets or sets a value that determines the deferred scrolling behavior for a ScrollViewer.
    /// - Returns: **true** if deferred scrolling should occur; otherwise, **false**.
    public func isDeferredScrollingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDeferredScrollingEnabled(value)
    }

    /// Gets or sets a value that indicates whether the scroll rail is enabled for the horizontal axis.
    /// - Returns: **True** to enable the horizontal scroll rail; otherwise, **false**. The default is **true**.
    public var isHorizontalRailEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsHorizontalRailEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the scroll rail is enabled for the horizontal axis.
    /// - Returns: **True** to enable the horizontal scroll rail; otherwise, **false**. The default is **true**.
    public func isHorizontalRailEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsHorizontalRailEnabled(value)
    }

    /// Gets or sets a value that indicates whether scroll chaining is enabled from this child to its parent, for the horizontal axis.
    /// - Returns: **true** to enable horizontal scroll chaining from child to parent; otherwise, **false**.
    public var isHorizontalScrollChainingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsHorizontalScrollChainingEnabled()
        }
    }

    /// Gets or sets a value that indicates whether scroll chaining is enabled from this child to its parent, for the horizontal axis.
    /// - Returns: **true** to enable horizontal scroll chaining from child to parent; otherwise, **false**.
    public func isHorizontalScrollChainingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsHorizontalScrollChainingEnabled(value)
    }

    /// Gets or sets a value that indicates whether scroll actions should include inertia in their behavior and value.
    /// - Returns: **true** if scroll actions should include inertia in their behavior and value; otherwise, **false**.
    public var isScrollInertiaEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsScrollInertiaEnabled()
        }
    }

    /// Gets or sets a value that indicates whether scroll actions should include inertia in their behavior and value.
    /// - Returns: **true** if scroll actions should include inertia in their behavior and value; otherwise, **false**.
    public func isScrollInertiaEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsScrollInertiaEnabled(value)
    }

    /// Gets or sets a value that indicates whether the scroll rail is enabled for the vertical axis.
    /// - Returns: **True** to enable the vertical scroll rail; otherwise, **false**. The default is **true**.
    public var isVerticalRailEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsVerticalRailEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the scroll rail is enabled for the vertical axis.
    /// - Returns: **True** to enable the vertical scroll rail; otherwise, **false**. The default is **true**.
    public func isVerticalRailEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsVerticalRailEnabled(value)
    }

    /// Gets or sets a value that indicates whether scroll chaining is enabled from this child to its parent, for the vertical axis.
    /// - Returns: **true** to enable vertical scroll chaining from child to parent; otherwise, **false**.
    public var isVerticalScrollChainingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsVerticalScrollChainingEnabled()
        }
    }

    /// Gets or sets a value that indicates whether scroll chaining is enabled from this child to its parent, for the vertical axis.
    /// - Returns: **true** to enable vertical scroll chaining from child to parent; otherwise, **false**.
    public func isVerticalScrollChainingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsVerticalScrollChainingEnabled(value)
    }

    /// Gets or sets a value that indicates whether zoom chaining is enabled from this child to its parent.
    /// - Returns: **true** to enable zoom chaining from child to parent; otherwise, **false**.
    public var isZoomChainingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsZoomChainingEnabled()
        }
    }

    /// Gets or sets a value that indicates whether zoom chaining is enabled from this child to its parent.
    /// - Returns: **true** to enable zoom chaining from child to parent; otherwise, **false**.
    public func isZoomChainingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsZoomChainingEnabled(value)
    }

    /// Gets or sets a value that indicates whether zoom actions should include inertia in their behavior and value.
    /// - Returns: **true** if zoom actions should include inertia in their behavior and value; otherwise, **false**.
    public var isZoomInertiaEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsZoomInertiaEnabled()
        }
    }

    /// Gets or sets a value that indicates whether zoom actions should include inertia in their behavior and value.
    /// - Returns: **true** if zoom actions should include inertia in their behavior and value; otherwise, **false**.
    public func isZoomInertiaEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsZoomInertiaEnabled(value)
    }

    /// Gets or sets a value that indicates the maximum permitted run-time value of ZoomFactor.
    /// - Returns: The maximum permitted run-time value of ZoomFactor. The default is 10.
    public var maxZoomFactor: Swift.Float {
        get throws {
            try _interop.get_MaxZoomFactor()
        }
    }

    /// Gets or sets a value that indicates the maximum permitted run-time value of ZoomFactor.
    /// - Returns: The maximum permitted run-time value of ZoomFactor. The default is 10.
    public func maxZoomFactor(_ value: Swift.Float) throws {
        try _interop.put_MaxZoomFactor(value)
    }

    /// Gets or sets a value that indicates the minimum permitted run-time value of ZoomFactor.
    /// - Returns: The minimum permitted run-time value of ZoomFactor. The default is 0.1.
    public var minZoomFactor: Swift.Float {
        get throws {
            try _interop.get_MinZoomFactor()
        }
    }

    /// Gets or sets a value that indicates the minimum permitted run-time value of ZoomFactor.
    /// - Returns: The minimum permitted run-time value of ZoomFactor. The default is 0.1.
    public func minZoomFactor(_ value: Swift.Float) throws {
        try _interop.put_MinZoomFactor(value)
    }

    /// Gets a value that represents the vertical size of the area that can be scrolled; the difference between the height of the extent and the height of the viewport.
    /// - Returns: The vertical size of the area that can be scrolled. This property has no default value.
    public var scrollableHeight: Swift.Double {
        get throws {
            try _interop.get_ScrollableHeight()
        }
    }

    /// Gets a value that represents the horizontal size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.
    /// - Returns: The horizontal size of the area that can be scrolled. This property has no default value.
    public var scrollableWidth: Swift.Double {
        get throws {
            try _interop.get_ScrollableWidth()
        }
    }

    /// Gets the distance the content has been scrolled vertically.
    /// - Returns: The distance the content has been scrolled vertically.
    public var verticalOffset: Swift.Double {
        get throws {
            try _interop.get_VerticalOffset()
        }
    }

    /// Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
    /// - Returns: A ScrollBarVisibility value that indicates whether a vertical ScrollBar should be displayed. The default value is **Visible**.
    public var verticalScrollBarVisibility: WindowsUIXamlControls_ScrollBarVisibility {
        get throws {
            try _interop.get_VerticalScrollBarVisibility()
        }
    }

    /// Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
    /// - Returns: A ScrollBarVisibility value that indicates whether a vertical ScrollBar should be displayed. The default value is **Visible**.
    public func verticalScrollBarVisibility(_ value: WindowsUIXamlControls_ScrollBarVisibility) throws {
        try _interop.put_VerticalScrollBarVisibility(value)
    }

    /// Gets or sets a value that determines how manipulation input influences scrolling behavior on the vertical axis.
    /// - Returns: A value of the enumeration. The typical default (as set through the default template, not class initialization) is **Enabled**.
    public var verticalScrollMode: WindowsUIXamlControls_ScrollMode {
        get throws {
            try _interop.get_VerticalScrollMode()
        }
    }

    /// Gets or sets a value that determines how manipulation input influences scrolling behavior on the vertical axis.
    /// - Returns: A value of the enumeration. The typical default (as set through the default template, not class initialization) is **Enabled**.
    public func verticalScrollMode(_ value: WindowsUIXamlControls_ScrollMode) throws {
        try _interop.put_VerticalScrollMode(value)
    }

    /// Gets or sets a value that indicates how the existing snap points are vertically aligned versus the initial viewport.
    /// - Returns: A value of the enumeration.
    public var verticalSnapPointsAlignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment {
        get throws {
            try _interop.get_VerticalSnapPointsAlignment()
        }
    }

    /// Gets or sets a value that indicates how the existing snap points are vertically aligned versus the initial viewport.
    /// - Returns: A value of the enumeration.
    public func verticalSnapPointsAlignment(_ value: WindowsUIXamlControlsPrimitives_SnapPointsAlignment) throws {
        try _interop.put_VerticalSnapPointsAlignment(value)
    }

    /// Gets or sets a value that declares how manipulation behavior reacts to the snap points along the vertical axis.
    /// - Returns: A value of the enumeration. The default is **None** but might be set through a control template.
    public var verticalSnapPointsType: WindowsUIXamlControls_SnapPointsType {
        get throws {
            try _interop.get_VerticalSnapPointsType()
        }
    }

    /// Gets or sets a value that declares how manipulation behavior reacts to the snap points along the vertical axis.
    /// - Returns: A value of the enumeration. The default is **None** but might be set through a control template.
    public func verticalSnapPointsType(_ value: WindowsUIXamlControls_SnapPointsType) throws {
        try _interop.put_VerticalSnapPointsType(value)
    }

    /// Gets the vertical size of the viewable content.
    /// - Returns: The vertical size of the viewable content.
    public var viewportHeight: Swift.Double {
        get throws {
            try _interop.get_ViewportHeight()
        }
    }

    /// Gets the horizontal size of the viewable content.
    /// - Returns: The horizontal size of the viewable content.
    public var viewportWidth: Swift.Double {
        get throws {
            try _interop.get_ViewportWidth()
        }
    }

    /// Gets a value that indicates the current zoom factor engaged for content scaling.
    /// - Returns: The current zoom factor engaged for content scaling. The default is 1.0, where 1.0 indicates no additional scaling.
    public var zoomFactor: Swift.Float {
        get throws {
            try _interop.get_ZoomFactor()
        }
    }

    /// Gets or sets a value that indicates whether zoom behavior in the ScrollViewer content is enabled.
    /// - Returns: A value of the enumeration.
    public var zoomMode: WindowsUIXamlControls_ZoomMode {
        get throws {
            try _interop.get_ZoomMode()
        }
    }

    /// Gets or sets a value that indicates whether zoom behavior in the ScrollViewer content is enabled.
    /// - Returns: A value of the enumeration.
    public func zoomMode(_ value: WindowsUIXamlControls_ZoomMode) throws {
        try _interop.put_ZoomMode(value)
    }

    /// Gets the observable collection of zoom snap point factors that are held by the ScrollViewer.
    /// - Returns: A collection of Single values that represent zoom factors as snap points.
    public var zoomSnapPoints: WindowsFoundationCollections_IVector<Swift.Float> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ZoomSnapPoints())
        }
    }

    /// Gets or sets a value that indicates how zoom snap points are processed for interaction input.
    /// - Returns: A value of the enumeration.
    public var zoomSnapPointsType: WindowsUIXamlControls_SnapPointsType {
        get throws {
            try _interop.get_ZoomSnapPointsType()
        }
    }

    /// Gets or sets a value that indicates how zoom snap points are processed for interaction input.
    /// - Returns: A value of the enumeration.
    public func zoomSnapPointsType(_ value: WindowsUIXamlControls_SnapPointsType) throws {
        try _interop.put_ZoomSnapPointsType(value)
    }

    /// Occurs when manipulations such as scrolling and zooming have caused the view to change.
    public func viewChanged(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlControls_ScrollViewerViewChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ViewChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: viewChanged)
    }

    public func viewChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ViewChanged(token)
    }

    /// Scrolls the content that is within the ScrollViewer to the specified horizontal offset position.
    /// - Parameter offset: The position that the content scrolls to.
    public func scrollToHorizontalOffset(_ offset: Swift.Double) throws {
        try _interop.scrollToHorizontalOffset(offset)
    }

    /// Scrolls the content that is within the ScrollViewer to the specified vertical offset position.
    /// - Parameter offset: The position that the content scrolls to.
    public func scrollToVerticalOffset(_ offset: Swift.Double) throws {
        try _interop.scrollToVerticalOffset(offset)
    }

    /// Sets the effective value of ZoomFactor.
    /// - Parameter factor: The zoom factor to set. The factors are based on a norm of 1.0, which represents no zoom applied. The values you can set are also influenced by current values for MinZoomFactor and MaxZoomFactor.
    public func zoomToFactor(_ factor: Swift.Float) throws {
        try _interop.zoomToFactor(factor)
    }

    /// Called when the value of properties that describe the size and location of the scroll area change.
    public func invalidateScrollInfo() throws {
        try _interop.invalidateScrollInfo()
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewer2 members

    /// Gets or sets the content of the left header.
    /// - Returns: The content of the left header.
    public var leftHeader: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewer2.get_LeftHeader())
        }
    }

    /// Gets or sets the content of the left header.
    /// - Returns: The content of the left header.
    public func leftHeader(_ value: WindowsUIXaml_UIElement?) throws {
        try _iscrollViewer2.put_LeftHeader(value)
    }

    /// Gets or sets the content of the top header.
    /// - Returns: The content of the top header.
    public var topHeader: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewer2.get_TopHeader())
        }
    }

    /// Gets or sets the content of the top header.
    /// - Returns: The content of the top header.
    public func topHeader(_ value: WindowsUIXaml_UIElement?) throws {
        try _iscrollViewer2.put_TopHeader(value)
    }

    /// Gets or sets the content of the top, left header.
    /// - Returns: The content of the top, left header.
    public var topLeftHeader: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewer2.get_TopLeftHeader())
        }
    }

    /// Gets or sets the content of the top, left header.
    /// - Returns: The content of the top, left header.
    public func topLeftHeader(_ value: WindowsUIXaml_UIElement?) throws {
        try _iscrollViewer2.put_TopLeftHeader(value)
    }

    /// Occurs when manipulations such as scrolling and zooming cause the view to change.
    public func viewChanging(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlControls_ScrollViewerViewChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollViewer2.add_ViewChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: viewChanging)
    }

    public func viewChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollViewer2.remove_ViewChanging(token)
    }

    public func changeView(_ horizontalOffset: Swift.Double?, _ verticalOffset: Swift.Double?, _ zoomFactor: Swift.Float?) throws -> Swift.Bool {
        try _iscrollViewer2.changeView(horizontalOffset, verticalOffset, zoomFactor)
    }

    public func changeView(_ horizontalOffset: Swift.Double?, _ verticalOffset: Swift.Double?, _ zoomFactor: Swift.Float?, _ disableAnimation: Swift.Bool) throws -> Swift.Bool {
        try _iscrollViewer2.changeViewWithOptionalAnimation(horizontalOffset, verticalOffset, zoomFactor, disableAnimation)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewer3 members

    /// Occurs when any direct manipulation of the ScrollViewer finishes.
    public func directManipulationCompleted(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollViewer3.add_DirectManipulationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: directManipulationCompleted)
    }

    public func directManipulationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollViewer3.remove_DirectManipulationCompleted(token)
    }

    /// Occurs when any direct manipulation of the ScrollViewer begins.
    public func directManipulationStarted(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollViewer3.add_DirectManipulationStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: directManipulationStarted)
    }

    public func directManipulationStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollViewer3.remove_DirectManipulationStarted(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewer4 members

    /// Gets or sets a value that indicates whether scrolled content can render outside the bounds of the ScrollViewer.
    /// - Returns: **true** if scrolled content can render outside the bounds of the ScrollViewer; otherwise, **false**. The default is **false**.
    public var canContentRenderOutsideBounds: Swift.Bool {
        get throws {
            try _iscrollViewer4.get_CanContentRenderOutsideBounds()
        }
    }

    /// Gets or sets a value that indicates whether scrolled content can render outside the bounds of the ScrollViewer.
    /// - Returns: **true** if scrolled content can render outside the bounds of the ScrollViewer; otherwise, **false**. The default is **false**.
    public func canContentRenderOutsideBounds(_ value: Swift.Bool) throws {
        try _iscrollViewer4.put_CanContentRenderOutsideBounds(value)
    }

    /// Determines the horizontal position of the ScrollViewer's *anchor point* with respect to the viewport. By default, the ScrollViewer selects an element as its CurrentAnchor by identifying the element in its viewport nearest to the anchor point.
    /// - Returns: A normalized value (0.0 to 1.0). The default is 0.0.
    public var horizontalAnchorRatio: Swift.Double {
        get throws {
            try _iscrollViewer4.get_HorizontalAnchorRatio()
        }
    }

    /// Determines the horizontal position of the ScrollViewer's *anchor point* with respect to the viewport. By default, the ScrollViewer selects an element as its CurrentAnchor by identifying the element in its viewport nearest to the anchor point.
    /// - Returns: A normalized value (0.0 to 1.0). The default is 0.0.
    public func horizontalAnchorRatio(_ value: Swift.Double) throws {
        try _iscrollViewer4.put_HorizontalAnchorRatio(value)
    }

    /// Gets or sets a value that indicates whether the ScrollViewer should try to adjust its content to keep it visible when a docked CoreInputView occludes part of it.
    /// - Returns: **true** if the ScrollViewer should try to adjust its content; otherwise, **false**. The default is **false**.
    public var reduceViewportForCoreInputViewOcclusions: Swift.Bool {
        get throws {
            try _iscrollViewer4.get_ReduceViewportForCoreInputViewOcclusions()
        }
    }

    /// Gets or sets a value that indicates whether the ScrollViewer should try to adjust its content to keep it visible when a docked CoreInputView occludes part of it.
    /// - Returns: **true** if the ScrollViewer should try to adjust its content; otherwise, **false**. The default is **false**.
    public func reduceViewportForCoreInputViewOcclusions(_ value: Swift.Bool) throws {
        try _iscrollViewer4.put_ReduceViewportForCoreInputViewOcclusions(value)
    }

    /// Determines the vertical position of the ScrollViewer's *anchor point* with respect to the viewport. By default, the ScrollViewer selects an element as its CurrentAnchor by identifying the element in its viewport nearest to the anchor point.
    /// - Returns: A normalized value (0.0 to 1.0). The default is 0.0.
    public var verticalAnchorRatio: Swift.Double {
        get throws {
            try _iscrollViewer4.get_VerticalAnchorRatio()
        }
    }

    /// Determines the vertical position of the ScrollViewer's *anchor point* with respect to the viewport. By default, the ScrollViewer selects an element as its CurrentAnchor by identifying the element in its viewport nearest to the anchor point.
    /// - Returns: A normalized value (0.0 to 1.0). The default is 0.0.
    public func verticalAnchorRatio(_ value: Swift.Double) throws {
        try _iscrollViewer4.put_VerticalAnchorRatio(value)
    }

    /// Occurs when an anchor is requested at the beginning of the Arrange pass. Handle this event to override the ScrollViewer's default logic to select an anchor element as part of *scroll anchoring*.
    public func anchorRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ScrollViewer?, WindowsUIXamlControls_AnchorRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollViewer4.add_AnchorRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: anchorRequested)
    }

    public func anchorRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollViewer4.remove_AnchorRequested(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollAnchorProvider members

    /// The currently chosen anchor element to use for scroll anchoring.
    /// - Returns: The most recently chosen UIElement for scroll anchoring after a layout pass, or **null**.
    public var currentAnchor: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_iscrollAnchorProvider.get_CurrentAnchor())
        }
    }

    /// Registers a UIElement as a potential scroll anchor.
    /// - Parameter element: A UIElement within the subtree of the ScrollViewer.
    public func registerAnchorCandidate(_ element: WindowsUIXaml_UIElement?) throws {
        try _iscrollAnchorProvider.registerAnchorCandidate(element)
    }

    /// Unregisters a UIElement as a potential scroll anchor.
    /// - Parameter element: A UIElement within the subtree of the ScrollViewer.
    public func unregisterAnchorCandidate(_ element: WindowsUIXaml_UIElement?) throws {
        try _iscrollAnchorProvider.unregisterAnchorCandidate(element)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewerStatics2 members

    /// Identifies the LeftHeader dependency property.
    /// - Returns: The identifier for the LeftHeader dependency property.
    public static var leftHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics2.get_LeftHeaderProperty())
        }
    }

    /// Identifies the TopHeader dependency property.
    /// - Returns: The identifier for the TopHeader dependency property.
    public static var topHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics2.get_TopHeaderProperty())
        }
    }

    /// Identifies the TopLeftHeader dependency property.
    /// - Returns: The identifier for the TopLeftHeader dependency property.
    public static var topLeftHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics2.get_TopLeftHeaderProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewerStatics members

    /// Identifies the BringIntoViewOnFocusChange dependency property.
    /// - Returns: The identifier for the BringIntoViewOnFocusChange dependency property.
    public static var bringIntoViewOnFocusChangeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_BringIntoViewOnFocusChangeProperty())
        }
    }

    /// Identifies the ComputedHorizontalScrollBarVisibility dependency property.
    /// - Returns: The identifier for the ComputedHorizontalScrollBarVisibility  dependency property.
    public static var computedHorizontalScrollBarVisibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ComputedHorizontalScrollBarVisibilityProperty())
        }
    }

    /// Identifies the ComputedVerticalScrollBarVisibility  dependency property.
    /// - Returns: The identifier for the ComputedVerticalScrollBarVisibility  dependency property.
    public static var computedVerticalScrollBarVisibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ComputedVerticalScrollBarVisibilityProperty())
        }
    }

    /// Identifier for the ExtentHeight dependency property.
    /// - Returns: The identifier for the ExtentHeight dependency property.
    public static var extentHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ExtentHeightProperty())
        }
    }

    /// Identifier for the ExtentWidth dependency property.
    /// - Returns: The identifier for the ExtentWidth dependency property.
    public static var extentWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ExtentWidthProperty())
        }
    }

    /// Identifies the HorizontalOffset  dependency property.
    /// - Returns: The identifier for the HorizontalOffset  dependency property.
    public static var horizontalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_HorizontalOffsetProperty())
        }
    }

    /// Identifies the HorizontalScrollBarVisibility  dependency property.
    /// - Returns: The identifier for the HorizontalScrollBarVisibility  dependency property.
    public static var horizontalScrollBarVisibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_HorizontalScrollBarVisibilityProperty())
        }
    }

    /// Identifies the HorizontalScrollMode dependency property.
    /// - Returns: The identifier for the HorizontalScrollMode dependency property.
    public static var horizontalScrollModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_HorizontalScrollModeProperty())
        }
    }

    /// Identifies the HorizontalSnapPointsAlignment dependency property.
    /// - Returns: The identifier for the HorizontalSnapPointsAlignment dependency property.
    public static var horizontalSnapPointsAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_HorizontalSnapPointsAlignmentProperty())
        }
    }

    /// Identifies the HorizontalSnapPointsType dependency property.
    /// - Returns: The identifier for the HorizontalSnapPointsType dependency property.
    public static var horizontalSnapPointsTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_HorizontalSnapPointsTypeProperty())
        }
    }

    /// Identifies the IsDeferredScrollingEnabled dependency property.
    /// - Returns: The identifier for the IsDeferredScrollingEnabled dependency property.
    public static var isDeferredScrollingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsDeferredScrollingEnabledProperty())
        }
    }

    /// Identifies the IsHorizontalRailEnabled dependency property.
    /// - Returns: The identifier for the IsHorizontalRailEnabled dependency property.
    public static var isHorizontalRailEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsHorizontalRailEnabledProperty())
        }
    }

    /// Identifies the IsHorizontalScrollChainingEnabled dependency property.
    /// - Returns: The identifier for the IsHorizontalScrollChainingEnabled dependency property.
    public static var isHorizontalScrollChainingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsHorizontalScrollChainingEnabledProperty())
        }
    }

    /// Identifies the IsScrollInertiaEnabled dependency property.
    /// - Returns: The identifier for the IsScrollInertiaEnabled dependency property.
    public static var isScrollInertiaEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsScrollInertiaEnabledProperty())
        }
    }

    /// Identifies the IsVerticalRailEnabled dependency property.
    /// - Returns: The identifier for the IsVerticalRailEnabled dependency property.
    public static var isVerticalRailEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsVerticalRailEnabledProperty())
        }
    }

    /// Identifies the IsVerticalScrollChainingEnabled dependency property.
    /// - Returns: The identifier for the IsVerticalScrollChainingEnabled dependency property.
    public static var isVerticalScrollChainingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsVerticalScrollChainingEnabledProperty())
        }
    }

    /// Identifies the IsZoomChainingEnabled dependency property.
    /// - Returns: The identifier for the IsZoomChainingEnabled dependency property.
    public static var isZoomChainingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsZoomChainingEnabledProperty())
        }
    }

    /// Identifies the IsZoomInertiaEnabled dependency property.
    /// - Returns: The identifier for the IsZoomInertiaEnabled dependency property.
    public static var isZoomInertiaEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_IsZoomInertiaEnabledProperty())
        }
    }

    /// Identifies the MaxZoomFactor dependency property.
    /// - Returns: The identifier for the MaxZoomFactor dependency property.
    public static var maxZoomFactorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_MaxZoomFactorProperty())
        }
    }

    /// Identifies the MinZoomFactor dependency property.
    /// - Returns: The identifier for the MinZoomFactor dependency property.
    public static var minZoomFactorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_MinZoomFactorProperty())
        }
    }

    /// Identifies the ScrollableHeight  dependency property.
    /// - Returns: The identifier for the ScrollableHeight  dependency property.
    public static var scrollableHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ScrollableHeightProperty())
        }
    }

    /// Identifies the ScrollableWidth  dependency property.
    /// - Returns: The identifier for the ScrollableWidth  dependency property.
    public static var scrollableWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ScrollableWidthProperty())
        }
    }

    /// Identifies the VerticalOffset  dependency property.
    /// - Returns: The identifier for the VerticalOffset  dependency property.
    public static var verticalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_VerticalOffsetProperty())
        }
    }

    /// Identifies the VerticalScrollBarVisibility  dependency property.
    /// - Returns: The identifier for the VerticalScrollBarVisibility  dependency property.
    public static var verticalScrollBarVisibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_VerticalScrollBarVisibilityProperty())
        }
    }

    /// Identifies the VerticalScrollMode dependency property.
    /// - Returns: The identifier for the VerticalScrollMode dependency property.
    public static var verticalScrollModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_VerticalScrollModeProperty())
        }
    }

    /// Identifies the VerticalSnapPointsAlignment dependency property.
    /// - Returns: The identifier for the VerticalSnapPointsAlignment dependency property.
    public static var verticalSnapPointsAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_VerticalSnapPointsAlignmentProperty())
        }
    }

    /// Identifies the VerticalSnapPointsType dependency property.
    /// - Returns: The identifier for the VerticalSnapPointsType dependency property.
    public static var verticalSnapPointsTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_VerticalSnapPointsTypeProperty())
        }
    }

    /// Identifies the ViewportHeight  dependency property.
    /// - Returns: The identifier for the ViewportHeight dependency property.
    public static var viewportHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ViewportHeightProperty())
        }
    }

    /// Identifies the ViewportWidth dependency property.
    /// - Returns: The identifier for the ViewportWidth dependency property.
    public static var viewportWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ViewportWidthProperty())
        }
    }

    /// Identifies the ZoomFactor dependency property.
    /// - Returns: The identifier for the ZoomFactor dependency property.
    public static var zoomFactorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ZoomFactorProperty())
        }
    }

    /// Identifies the ZoomMode dependency property.
    /// - Returns: The identifier for the ZoomMode dependency property.
    public static var zoomModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ZoomModeProperty())
        }
    }

    /// Identifies the ZoomSnapPoints dependency property.
    /// - Returns: The identifier for the ZoomSnapPoints dependency property.
    public static var zoomSnapPointsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ZoomSnapPointsProperty())
        }
    }

    /// Identifies the ZoomSnapPointsType dependency property.
    /// - Returns: The identifier for the ZoomSnapPointsType dependency property.
    public static var zoomSnapPointsTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics.get_ZoomSnapPointsTypeProperty())
        }
    }

    /// Gets the value of the HorizontalScrollBarVisibility dependency property / `ScrollViewer.HorizontalScrollBarVisibility` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getHorizontalScrollBarVisibility(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXamlControls_ScrollBarVisibility {
        try _iscrollViewerStatics.getHorizontalScrollBarVisibility(element)
    }

    /// Sets the value of the HorizontalScrollBarVisibility dependency property / `ScrollViewer.HorizontalScrollBarVisibility` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter horizontalScrollBarVisibility: The value to set.
    public static func setHorizontalScrollBarVisibility(_ element: WindowsUIXaml_DependencyObject?, _ horizontalScrollBarVisibility: WindowsUIXamlControls_ScrollBarVisibility) throws {
        try _iscrollViewerStatics.setHorizontalScrollBarVisibility(element, horizontalScrollBarVisibility)
    }

    /// Gets the value of the VerticalScrollBarVisibility dependency property / `ScrollViewer.VerticalScrollBarVisibility` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getVerticalScrollBarVisibility(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXamlControls_ScrollBarVisibility {
        try _iscrollViewerStatics.getVerticalScrollBarVisibility(element)
    }

    /// Sets the value of the VerticalScrollBarVisibility dependency property / `ScrollViewer.VerticalScrollBarVisibility` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter verticalScrollBarVisibility: The value to set.
    public static func setVerticalScrollBarVisibility(_ element: WindowsUIXaml_DependencyObject?, _ verticalScrollBarVisibility: WindowsUIXamlControls_ScrollBarVisibility) throws {
        try _iscrollViewerStatics.setVerticalScrollBarVisibility(element, verticalScrollBarVisibility)
    }

    /// Gets the value of the IsHorizontalRailEnabled dependency property / `ScrollViewer.IsHorizontalRailEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsHorizontalRailEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsHorizontalRailEnabled(element)
    }

    /// Sets the value of the IsHorizontalRailEnabled dependency property / `ScrollViewer.IsHorizontalRailEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isHorizontalRailEnabled: The value to set.
    public static func setIsHorizontalRailEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isHorizontalRailEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsHorizontalRailEnabled(element, isHorizontalRailEnabled)
    }

    /// Gets the value of the IsVerticalRailEnabled dependency property / `ScrollViewer.IsVerticalRailEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsVerticalRailEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsVerticalRailEnabled(element)
    }

    /// Sets the value of the IsVerticalRailEnabled dependency property / `ScrollViewer.IsVerticalRailEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isVerticalRailEnabled: The value to set.
    public static func setIsVerticalRailEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isVerticalRailEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsVerticalRailEnabled(element, isVerticalRailEnabled)
    }

    /// Gets the value of the IsHorizontalScrollChainingEnabled dependency property / `ScrollViewer.IsHorizontalScrollChainingEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsHorizontalScrollChainingEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsHorizontalScrollChainingEnabled(element)
    }

    /// Sets the value of the IsHorizontalScrollChainingEnabled dependency property / `ScrollViewer.IsHorizontalScrollChainingEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isHorizontalScrollChainingEnabled: The value to set.
    public static func setIsHorizontalScrollChainingEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isHorizontalScrollChainingEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsHorizontalScrollChainingEnabled(element, isHorizontalScrollChainingEnabled)
    }

    /// Gets the value of the IsVerticalScrollChainingEnabled dependency property / `ScrollViewer.IsVerticalScrollChainingEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsVerticalScrollChainingEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsVerticalScrollChainingEnabled(element)
    }

    /// Sets the value of the IsVerticalScrollChainingEnabled dependency property / `ScrollViewer.IsVerticalScrollChainingEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isVerticalScrollChainingEnabled: The value to set.
    public static func setIsVerticalScrollChainingEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isVerticalScrollChainingEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsVerticalScrollChainingEnabled(element, isVerticalScrollChainingEnabled)
    }

    /// Gets the value of the IsZoomChainingEnabled dependency property / `ScrollViewer.IsZoomChainingEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsZoomChainingEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsZoomChainingEnabled(element)
    }

    /// Sets the value of the IsZoomChainingEnabled dependency property / `ScrollViewer.IsZoomChainingEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isZoomChainingEnabled: The value to set.
    public static func setIsZoomChainingEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isZoomChainingEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsZoomChainingEnabled(element, isZoomChainingEnabled)
    }

    /// Gets the value of the IsScrollInertiaEnabled dependency property / `ScrollViewer.IsScrollInertiaEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsScrollInertiaEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsScrollInertiaEnabled(element)
    }

    /// Sets the value of the IsScrollInertiaEnabled dependency property / `ScrollViewer.IsScrollInertiaEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isScrollInertiaEnabled: The value to set.
    public static func setIsScrollInertiaEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isScrollInertiaEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsScrollInertiaEnabled(element, isScrollInertiaEnabled)
    }

    /// Gets the value of the IsZoomInertiaEnabled dependency property / `ScrollViewer.IsZoomInertiaEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsZoomInertiaEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsZoomInertiaEnabled(element)
    }

    /// Sets the value of the IsZoomInertiaEnabled dependency property / `ScrollViewer.IsZoomInertiaEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isZoomInertiaEnabled: The value to set.
    public static func setIsZoomInertiaEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isZoomInertiaEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsZoomInertiaEnabled(element, isZoomInertiaEnabled)
    }

    /// Gets the value of the HorizontalScrollMode dependency property / `ScrollViewer.HorizontalScrollMode` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getHorizontalScrollMode(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXamlControls_ScrollMode {
        try _iscrollViewerStatics.getHorizontalScrollMode(element)
    }

    /// Sets the value of the HorizontalScrollMode dependency property / `ScrollViewer.HorizontalScrollMode` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter horizontalScrollMode: The value to set.
    public static func setHorizontalScrollMode(_ element: WindowsUIXaml_DependencyObject?, _ horizontalScrollMode: WindowsUIXamlControls_ScrollMode) throws {
        try _iscrollViewerStatics.setHorizontalScrollMode(element, horizontalScrollMode)
    }

    /// Gets the value of the VerticalScrollMode dependency property / `ScrollViewer.VerticalScrollMode` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getVerticalScrollMode(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXamlControls_ScrollMode {
        try _iscrollViewerStatics.getVerticalScrollMode(element)
    }

    /// Sets the value of the VerticalScrollMode dependency property / `ScrollViewer.VerticalScrollMode` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter verticalScrollMode: The value to set.
    public static func setVerticalScrollMode(_ element: WindowsUIXaml_DependencyObject?, _ verticalScrollMode: WindowsUIXamlControls_ScrollMode) throws {
        try _iscrollViewerStatics.setVerticalScrollMode(element, verticalScrollMode)
    }

    /// Gets the value of the ZoomMode dependency property / `ScrollViewer.ZoomMode` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getZoomMode(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXamlControls_ZoomMode {
        try _iscrollViewerStatics.getZoomMode(element)
    }

    /// Sets the value of the ZoomMode dependency property / `ScrollViewer.ZoomMode` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter zoomMode: The value to set.
    public static func setZoomMode(_ element: WindowsUIXaml_DependencyObject?, _ zoomMode: WindowsUIXamlControls_ZoomMode) throws {
        try _iscrollViewerStatics.setZoomMode(element, zoomMode)
    }

    /// Gets the value of the IsDeferredScrollingEnabled dependency property / `ScrollViewer.IsDeferredScrollingInertiaEnabled` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getIsDeferredScrollingEnabled(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getIsDeferredScrollingEnabled(element)
    }

    /// Sets the value of the IsDeferredScrollingEnabled dependency property / `ScrollViewer.IsDeferredScrollingEnabled` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter isDeferredScrollingEnabled: The value to set.
    public static func setIsDeferredScrollingEnabled(_ element: WindowsUIXaml_DependencyObject?, _ isDeferredScrollingEnabled: Swift.Bool) throws {
        try _iscrollViewerStatics.setIsDeferredScrollingEnabled(element, isDeferredScrollingEnabled)
    }

    /// Gets the value of the BringIntoViewOnFocusChange dependency property / `ScrollViewer.BringIntoViewOnFocusChange` XAML attached property from a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getBringIntoViewOnFocusChange(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics.getBringIntoViewOnFocusChange(element)
    }

    /// Sets the value of the BringIntoViewOnFocusChange dependency property / `ScrollViewer.BringIntoViewOnFocusChange` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter bringIntoViewOnFocusChange: The value to set.
    public static func setBringIntoViewOnFocusChange(_ element: WindowsUIXaml_DependencyObject?, _ bringIntoViewOnFocusChange: Swift.Bool) throws {
        try _iscrollViewerStatics.setBringIntoViewOnFocusChange(element, bringIntoViewOnFocusChange)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollViewerStatics4 members

    /// Identifies the CanContentRenderOutsideBounds dependency property.
    /// - Returns: The identifier for the CanContentRenderOutsideBounds dependency property.
    public static var canContentRenderOutsideBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics4.get_CanContentRenderOutsideBoundsProperty())
        }
    }

    /// Identifies the HorizontalAnchorRatio dependency property.
    /// - Returns: The identifier for the HorizontalAnchorRatio dependency property.
    public static var horizontalAnchorRatioProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics4.get_HorizontalAnchorRatioProperty())
        }
    }

    /// Identifies the ReduceViewportForCoreInputViewOcclusions dependency property.
    /// - Returns: The identifier for the ReduceViewportForCoreInputViewOcclusions dependency property.
    public static var reduceViewportForCoreInputViewOcclusionsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics4.get_ReduceViewportForCoreInputViewOcclusionsProperty())
        }
    }

    /// Identifies the VerticalAnchorRatio dependency property.
    /// - Returns: The identifier for the VerticalAnchorRatio dependency property.
    public static var verticalAnchorRatioProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollViewerStatics4.get_VerticalAnchorRatioProperty())
        }
    }

    /// Gets the value of the CanContentRenderOutsideBounds dependency property / `ScrollViewer.CanContentRenderOutsideBounds` XAML attached property on a specified element.
    /// - Parameter element: The element from which the property value is read.
    /// - Returns: The value of the property, as obtained from the property store.
    public static func getCanContentRenderOutsideBounds(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iscrollViewerStatics4.getCanContentRenderOutsideBounds(element)
    }

    /// Sets the value of the CanContentRenderOutsideBounds dependency property / `ScrollViewer.CanContentRenderOutsideBounds` XAML attached property on a specified element.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter canContentRenderOutsideBounds: The value to set.
    public static func setCanContentRenderOutsideBounds(_ element: WindowsUIXaml_DependencyObject?, _ canContentRenderOutsideBounds: Swift.Bool) throws {
        try _iscrollViewerStatics4.setCanContentRenderOutsideBounds(element, canContentRenderOutsideBounds)
    }

    // MARK: Implementation details

    private var _iscrollViewer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer2>? = nil

    internal var _iscrollViewer2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer2> {
        get throws {
            try _iscrollViewer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer2.self)
            }
        }
    }

    private var _iscrollViewer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer3>? = nil

    internal var _iscrollViewer3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer3> {
        get throws {
            try _iscrollViewer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer3.self)
            }
        }
    }

    private var _iscrollViewer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer4>? = nil

    internal var _iscrollViewer4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer4> {
        get throws {
            try _iscrollViewer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewer4.self)
            }
        }
    }

    private var _iscrollAnchorProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollAnchorProvider>? = nil

    internal var _iscrollAnchorProvider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollAnchorProvider> {
        get throws {
            try _iscrollAnchorProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IScrollAnchorProvider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IScrollAnchorProvider.self)
            }
        }
    }

    deinit {
        _iscrollViewer2_storage?.release()
        _iscrollViewer3_storage?.release()
        _iscrollViewer4_storage?.release()
        _iscrollAnchorProvider_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollViewer", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iscrollViewerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics2>? = nil

    internal static var _iscrollViewerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics2> {
        get throws {
            try _iscrollViewerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollViewer", id: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics2.iid)
            }
        }
    }

    private static var _iscrollViewerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics>? = nil

    internal static var _iscrollViewerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics> {
        get throws {
            try _iscrollViewerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollViewer", id: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics.iid)
            }
        }
    }

    private static var _iscrollViewerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics4>? = nil

    internal static var _iscrollViewerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics4> {
        get throws {
            try _iscrollViewerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollViewer", id: CWinRT.SWRT_WindowsUIXamlControls_IScrollViewerStatics4.iid)
            }
        }
    }
}