// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Displays the content of a ScrollViewer control.
public final class WindowsUIXamlControls_ScrollContentPresenter: WindowsRuntime.WinRTImport<WindowsUIXamlControls_ScrollContentPresenterProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_ScrollContentPresenterProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollContentPresenter members

    /// Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
    /// - Returns: **true** if scrolling is possible; otherwise, **false**.
    public var canHorizontallyScroll: Swift.Bool {
        get throws {
            try _interop.get_CanHorizontallyScroll()
        }
    }

    /// Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
    /// - Returns: **true** if scrolling is possible; otherwise, **false**.
    public func canHorizontallyScroll(_ value: Swift.Bool) throws {
        try _interop.put_CanHorizontallyScroll(value)
    }

    /// Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
    /// - Returns: **true** if scrolling is possible; otherwise, **false**.
    public var canVerticallyScroll: Swift.Bool {
        get throws {
            try _interop.get_CanVerticallyScroll()
        }
    }

    /// Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
    /// - Returns: **true** if scrolling is possible; otherwise, **false**.
    public func canVerticallyScroll(_ value: Swift.Bool) throws {
        try _interop.put_CanVerticallyScroll(value)
    }

    /// Gets the vertical size of all the scrollable content.
    /// - Returns: The vertical size of the all scrollable content.
    public var extentHeight: Swift.Double {
        get throws {
            try _interop.get_ExtentHeight()
        }
    }

    /// Gets the horizontal size of all the scrollable content.
    /// - Returns: The horizontal size of all the scrollable content.
    public var extentWidth: Swift.Double {
        get throws {
            try _interop.get_ExtentWidth()
        }
    }

    /// Gets the distance the content has been scrolled horizontally.
    /// - Returns: The distance the content has been scrolled horizontally.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _interop.get_HorizontalOffset()
        }
    }

    /// Gets or sets the ScrollViewer element that controls scrolling behavior.
    /// - Returns: The ScrollViewer element that controls scrolling behavior.
    public var scrollOwner: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ScrollOwner())
        }
    }

    /// Gets or sets the ScrollViewer element that controls scrolling behavior.
    /// - Returns: The ScrollViewer element that controls scrolling behavior.
    public func scrollOwner(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_ScrollOwner(value)
    }

    /// Gets the distance the content has been scrolled vertically.
    /// - Returns: The distance the content has been scrolled vertically.
    public var verticalOffset: Swift.Double {
        get throws {
            try _interop.get_VerticalOffset()
        }
    }

    /// Gets the vertical size of the viewable content.
    /// - Returns: The vertical size of the viewable content.
    public var viewportHeight: Swift.Double {
        get throws {
            try _interop.get_ViewportHeight()
        }
    }

    /// Gets the horizontal size of the viewable content.
    /// - Returns: The horizontal size of the viewable content.
    public var viewportWidth: Swift.Double {
        get throws {
            try _interop.get_ViewportWidth()
        }
    }

    /// Scrolls the ScrollContentPresenter content upward by one line.
    public func lineUp() throws {
        try _interop.lineUp()
    }

    /// Scrolls the ScrollContentPresenter content downward by one line.
    public func lineDown() throws {
        try _interop.lineDown()
    }

    /// Scrolls the ScrollContentPresenter content to the left by a predetermined amount.
    public func lineLeft() throws {
        try _interop.lineLeft()
    }

    /// Scrolls the ScrollContentPresenter content to the right by a predetermined amount.
    public func lineRight() throws {
        try _interop.lineRight()
    }

    /// Scrolls up within the content by one page.
    public func pageUp() throws {
        try _interop.pageUp()
    }

    /// Scrolls down within the content by one page.
    public func pageDown() throws {
        try _interop.pageDown()
    }

    /// Scrolls left within the content by one page.
    public func pageLeft() throws {
        try _interop.pageLeft()
    }

    /// Scrolls right within the content by one page.
    public func pageRight() throws {
        try _interop.pageRight()
    }

    /// Scrolls up within content after a user clicks the wheel button on a mouse.
    public func mouseWheelUp() throws {
        try _interop.mouseWheelUp()
    }

    /// Scrolls down within content after a user clicks the wheel button on a mouse.
    public func mouseWheelDown() throws {
        try _interop.mouseWheelDown()
    }

    /// Scrolls left within content after a user clicks the wheel button on a mouse.
    public func mouseWheelLeft() throws {
        try _interop.mouseWheelLeft()
    }

    /// Scrolls right within content after a user clicks the wheel button on a mouse.
    public func mouseWheelRight() throws {
        try _interop.mouseWheelRight()
    }

    /// Sets the distance the content has been scrolled horizontally.
    /// - Parameter offset: The distance the content has been scrolled horizontally.
    public func setHorizontalOffset(_ offset: Swift.Double) throws {
        try _interop.setHorizontalOffset(offset)
    }

    /// Sets the distance the content has been scrolled vertically.
    /// - Parameter offset: The distance the content has been scrolled vertically.
    public func setVerticalOffset(_ offset: Swift.Double) throws {
        try _interop.setVerticalOffset(offset)
    }

    /// Forces content to scroll until the coordinate space of a visual object is visible.
    /// - Parameter visual: A UIElement that becomes visible.
    /// - Parameter rectangle: The bounding rectangle that identifies the coordinate space to make visible.
    /// - Returns: A Rect that represents the visible region after scrolling happens.
    public func makeVisible(_ visual: WindowsUIXaml_UIElement?, _ rectangle: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _interop.makeVisible(visual, rectangle)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollContentPresenter2 members

    /// Gets or sets a value that indicates whether scrolled content can render outside the bounds of the ScrollViewer.
    /// - Returns: **true** if scrolled content can render outside the bounds of the ScrollViewer; otherwise, **false**. The default is **false**.
    public var canContentRenderOutsideBounds: Swift.Bool {
        get throws {
            try _iscrollContentPresenter2.get_CanContentRenderOutsideBounds()
        }
    }

    /// Gets or sets a value that indicates whether scrolled content can render outside the bounds of the ScrollViewer.
    /// - Returns: **true** if scrolled content can render outside the bounds of the ScrollViewer; otherwise, **false**. The default is **false**.
    public func canContentRenderOutsideBounds(_ value: Swift.Bool) throws {
        try _iscrollContentPresenter2.put_CanContentRenderOutsideBounds(value)
    }

    /// Gets or sets a value that indicates whether, when used in the ControlTemplate for a ScrollViewer, the presenter restricts the size of its Content to the owning ScrollViewer size.
    /// - Returns: **true** if the presenter restricts its Content size to the owning ScrollViewer size; otherwise, **false**. The default is **false**.
    public var sizesContentToTemplatedParent: Swift.Bool {
        get throws {
            try _iscrollContentPresenter2.get_SizesContentToTemplatedParent()
        }
    }

    /// Gets or sets a value that indicates whether, when used in the ControlTemplate for a ScrollViewer, the presenter restricts the size of its Content to the owning ScrollViewer size.
    /// - Returns: **true** if the presenter restricts its Content size to the owning ScrollViewer size; otherwise, **false**. The default is **false**.
    public func sizesContentToTemplatedParent(_ value: Swift.Bool) throws {
        try _iscrollContentPresenter2.put_SizesContentToTemplatedParent(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IScrollContentPresenterStatics2 members

    /// Identifies the CanContentRenderOutsideBounds dependency property.
    /// - Returns: The identifier for the CanContentRenderOutsideBounds dependency property.
    public static var canContentRenderOutsideBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollContentPresenterStatics2.get_CanContentRenderOutsideBoundsProperty())
        }
    }

    /// Identifies the SizesContentToTemplatedParent dependency property.
    /// - Returns: The identifier for the SizesContentToTemplatedParent dependency property.
    public static var sizesContentToTemplatedParentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollContentPresenterStatics2.get_SizesContentToTemplatedParentProperty())
        }
    }

    // MARK: Implementation details

    private var _iscrollContentPresenter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenter2>? = nil

    internal var _iscrollContentPresenter2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenter2> {
        get throws {
            try _iscrollContentPresenter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenter2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenter2.self)
            }
        }
    }

    deinit {
        _iscrollContentPresenter2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollContentPresenter", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iscrollContentPresenterStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenterStatics2>? = nil

    internal static var _iscrollContentPresenterStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenterStatics2> {
        get throws {
            try _iscrollContentPresenterStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ScrollContentPresenter", id: CWinRT.SWRT_WindowsUIXamlControls_IScrollContentPresenterStatics2.iid)
            }
        }
    }
}