// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a templated button control that interprets a Click user interaction.
open class WindowsUIXamlControls_Button: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IButtonFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Button.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ibuttonFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IButtonWithFlyout members

    /// Gets or sets the flyout associated with this button.
    /// - Returns: The flyout associated with this button, if any; otherwise, **null**. The default is **null**.
    public var flyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_ibuttonWithFlyout.get_Flyout())
        }
    }

    /// Gets or sets the flyout associated with this button.
    /// - Returns: The flyout associated with this button, if any; otherwise, **null**. The default is **null**.
    public func flyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _ibuttonWithFlyout.put_Flyout(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IButtonStaticsWithFlyout members

    /// Identifies the Flyout dependency property.
    /// - Returns: The identifier for the Flyout dependency property.
    public static var flyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonStaticsWithFlyout.get_FlyoutProperty())
        }
    }

    // MARK: Implementation details

    private var _ibutton_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButton>? = nil

    internal var _ibutton: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButton> {
        get throws {
            try _ibutton_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IButton.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IButton.self)
            }
        }
    }

    private var _ibuttonWithFlyout_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonWithFlyout>? = nil

    internal var _ibuttonWithFlyout: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonWithFlyout> {
        get throws {
            try _ibuttonWithFlyout_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IButtonWithFlyout.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IButtonWithFlyout.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IButton>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ibutton_storage?.release()
        _ibuttonWithFlyout_storage?.release()
    }

    private static var _ibuttonFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonFactory>? = nil

    internal static var _ibuttonFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonFactory> {
        get throws {
            try _ibuttonFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Button", id: CWinRT.SWRT_WindowsUIXamlControls_IButtonFactory.iid)
            }
        }
    }

    private static var _ibuttonStaticsWithFlyout_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonStaticsWithFlyout>? = nil

    internal static var _ibuttonStaticsWithFlyout: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IButtonStaticsWithFlyout> {
        get throws {
            try _ibuttonStaticsWithFlyout_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Button", id: CWinRT.SWRT_WindowsUIXamlControls_IButtonStaticsWithFlyout.iid)
            }
        }
    }
}