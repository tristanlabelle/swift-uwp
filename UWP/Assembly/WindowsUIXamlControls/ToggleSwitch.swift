// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a switch that can be toggled between two states.
public final class WindowsUIXamlControls_ToggleSwitch: WindowsRuntime.WinRTImport<WindowsUIXamlControls_ToggleSwitchProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_ToggleSwitchProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleSwitch members

    /// Gets or sets the header content.
    /// - Returns: The header content for the ToggleSwitch.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Header())
        }
    }

    /// Gets or sets the header content.
    /// - Returns: The header content for the ToggleSwitch.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the control's header.
    /// - Returns: The DataTemplate used to display the control's header.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the control's header.
    /// - Returns: The DataTemplate used to display the control's header.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _interop.put_HeaderTemplate(value)
    }

    /// Gets or sets a value that declares whether the state of the ToggleSwitch is "On".
    /// - Returns: **true** if the state is "On"; **false** if the state is "Off".
    public var isOn: Swift.Bool {
        get throws {
            try _interop.get_IsOn()
        }
    }

    /// Gets or sets a value that declares whether the state of the ToggleSwitch is "On".
    /// - Returns: **true** if the state is "On"; **false** if the state is "Off".
    public func isOn(_ value: Swift.Bool) throws {
        try _interop.put_IsOn(value)
    }

    /// Provides the object content that should be displayed using the OffContentTemplate when this ToggleSwitch has state of "Off".
    /// - Returns: The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.
    public var offContent: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OffContent())
        }
    }

    /// Provides the object content that should be displayed using the OffContentTemplate when this ToggleSwitch has state of "Off".
    /// - Returns: The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.
    public func offContent(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_OffContent(value)
    }

    /// Gets or sets the DataTemplate used to display the control's content while in "Off" state.
    /// - Returns: The DataTemplate that displays the control's content while in "Off" state.
    public var offContentTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OffContentTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the control's content while in "Off" state.
    /// - Returns: The DataTemplate that displays the control's content while in "Off" state.
    public func offContentTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _interop.put_OffContentTemplate(value)
    }

    /// Provides the object content that should be displayed using the OnContentTemplate when this ToggleSwitch has state of "On".
    /// - Returns: The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.
    public var onContent: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OnContent())
        }
    }

    /// Provides the object content that should be displayed using the OnContentTemplate when this ToggleSwitch has state of "On".
    /// - Returns: The object content. In some cases this is a string, in other cases it is a single element that provides a root for further composition content. Probably the most common "set" usage is to place a binding here.
    public func onContent(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_OnContent(value)
    }

    /// Gets or sets the DataTemplate used to display the control's content while in "On" state.
    /// - Returns: The DataTemplate that displays the control's content while in "On" state.
    public var onContentTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OnContentTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the control's content while in "On" state.
    /// - Returns: The DataTemplate that displays the control's content while in "On" state.
    public func onContentTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _interop.put_OnContentTemplate(value)
    }

    /// Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a ToggleSwitch control.
    /// - Returns: An object that provides calculated values for templates.
    public var templateSettings: WindowsUIXamlControlsPrimitives_ToggleSwitchTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TemplateSettings())
        }
    }

    /// Occurs when "On"/"Off" state changes for this ToggleSwitch.
    public func toggled(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Toggled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: toggled)
    }

    public func toggled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Toggled(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleSwitchOverrides members

    /// Invoked before the Toggled event is raised.
    open func onToggled() throws {
        try _itoggleSwitchOverrides.onToggled()
    }

    /// Invoked when the content for OnContent changes.
    /// - Parameter oldContent: The string or object content of the old content.
    /// - Parameter newContent: The string or object content of the new content that is about to display.
    open func onOnContentChanged(_ oldContent: WindowsRuntime.IInspectable?, _ newContent: WindowsRuntime.IInspectable?) throws {
        try _itoggleSwitchOverrides.onOnContentChanged(oldContent, newContent)
    }

    /// Invoked when the content for OffContent changes.
    /// - Parameter oldContent: The string or object content of the old content.
    /// - Parameter newContent: The string or object content of the new content that is about to display.
    open func onOffContentChanged(_ oldContent: WindowsRuntime.IInspectable?, _ newContent: WindowsRuntime.IInspectable?) throws {
        try _itoggleSwitchOverrides.onOffContentChanged(oldContent, newContent)
    }

    /// Invoked when the content for Header changes.
    /// - Parameter oldContent: The string or object content of the old content.
    /// - Parameter newContent: The string or object content of the new content.
    open func onHeaderChanged(_ oldContent: WindowsRuntime.IInspectable?, _ newContent: WindowsRuntime.IInspectable?) throws {
        try _itoggleSwitchOverrides.onHeaderChanged(oldContent, newContent)
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleSwitchStatics members

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsOn dependency property.
    /// - Returns: The identifier for the IsOn dependency property.
    public static var isOnProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_IsOnProperty())
        }
    }

    /// Identifies the OffContent dependency property.
    /// - Returns: The identifier for the OffContent dependency property.
    public static var offContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_OffContentProperty())
        }
    }

    /// Identifies the OffContentTemplate dependency property.
    /// - Returns: The identifier for the OffContentTemplate dependency property.
    public static var offContentTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_OffContentTemplateProperty())
        }
    }

    /// Identifies the OnContent dependency property.
    /// - Returns: The identifier for the OnContent dependency property.
    public static var onContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_OnContentProperty())
        }
    }

    /// Identifies the OnContentTemplate dependency property.
    /// - Returns: The identifier for the OnContentTemplate dependency property.
    public static var onContentTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleSwitchStatics.get_OnContentTemplateProperty())
        }
    }

    // MARK: Implementation details

    private var _itoggleSwitchOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchOverrides>? = nil

    internal var _itoggleSwitchOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchOverrides> {
        get throws {
            try _itoggleSwitchOverrides_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchOverrides.self)
            }
        }
    }

    deinit {
        _itoggleSwitchOverrides_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ToggleSwitch", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _itoggleSwitchStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchStatics>? = nil

    internal static var _itoggleSwitchStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchStatics> {
        get throws {
            try _itoggleSwitchStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ToggleSwitch", id: CWinRT.SWRT_WindowsUIXamlControls_IToggleSwitchStatics.iid)
            }
        }
    }
}