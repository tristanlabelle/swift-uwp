// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that indicates the progress of an operation, where the typical visual appearance is a bar that animates a filled area as progress continues.
open class WindowsUIXamlControls_ProgressBar: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IProgressBarFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_ProgressBar.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iprogressBarFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IProgressBar members

    /// Gets or sets a value that indicates whether the progress bar reports generic progress with a repeating pattern or reports progress based on the Value property.
    /// - Returns: **True** if the progress bar reports generic progress with a repeating pattern; **false** if the progress bar reports progress based on the Value property. The default is **false**.
    public var isIndeterminate: Swift.Bool {
        get throws {
            try _iprogressBar.get_IsIndeterminate()
        }
    }

    /// Gets or sets a value that indicates whether the progress bar reports generic progress with a repeating pattern or reports progress based on the Value property.
    /// - Returns: **True** if the progress bar reports generic progress with a repeating pattern; **false** if the progress bar reports progress based on the Value property. The default is **false**.
    public func isIndeterminate(_ value: Swift.Bool) throws {
        try _iprogressBar.put_IsIndeterminate(value)
    }

    /// Gets or sets a value that indicates whether the progress bar should use visual states that communicate an **Error** state to the user.
    /// - Returns: **True** if the progress bar should use visual states that communicate an **Error** state to the user; otherwise, **false**. The default is **false**.
    public var showError: Swift.Bool {
        get throws {
            try _iprogressBar.get_ShowError()
        }
    }

    /// Gets or sets a value that indicates whether the progress bar should use visual states that communicate an **Error** state to the user.
    /// - Returns: **True** if the progress bar should use visual states that communicate an **Error** state to the user; otherwise, **false**. The default is **false**.
    public func showError(_ value: Swift.Bool) throws {
        try _iprogressBar.put_ShowError(value)
    }

    /// Gets or sets a value that indicates whether the progress bar should use visual states that communicate a **Paused** state to the user.
    /// - Returns: **True** if the progress bar should use visual states that communicate a **Paused** state to the user; otherwise, **false**. The default is **false**.
    public var showPaused: Swift.Bool {
        get throws {
            try _iprogressBar.get_ShowPaused()
        }
    }

    /// Gets or sets a value that indicates whether the progress bar should use visual states that communicate a **Paused** state to the user.
    /// - Returns: **True** if the progress bar should use visual states that communicate a **Paused** state to the user; otherwise, **false**. The default is **false**.
    public func showPaused(_ value: Swift.Bool) throws {
        try _iprogressBar.put_ShowPaused(value)
    }

    /// Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a ProgressBar control.
    /// - Returns: An object that provides calculated values for templates.
    public var templateSettings: WindowsUIXamlControlsPrimitives_ProgressBarTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_iprogressBar.get_TemplateSettings())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IProgressBarStatics members

    /// Identifies the IsIndeterminate dependency property.
    /// - Returns: The identifier for the IsIndeterminate dependency property.
    public static var isIndeterminateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iprogressBarStatics.get_IsIndeterminateProperty())
        }
    }

    /// Identifies the ShowError dependency property.
    /// - Returns: The identifier for the ShowError dependency property.
    public static var showErrorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iprogressBarStatics.get_ShowErrorProperty())
        }
    }

    /// Identifies the ShowPaused dependency property.
    /// - Returns: The identifier for the ShowPaused dependency property.
    public static var showPausedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iprogressBarStatics.get_ShowPausedProperty())
        }
    }

    // MARK: Implementation details

    private var _iprogressBar_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBar>? = nil

    internal var _iprogressBar: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBar> {
        get throws {
            try _iprogressBar_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IProgressBar.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IProgressBar.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IProgressBar>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iprogressBar_storage?.release()
    }

    private static var _iprogressBarFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBarFactory>? = nil

    internal static var _iprogressBarFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBarFactory> {
        get throws {
            try _iprogressBarFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ProgressBar", id: CWinRT.SWRT_WindowsUIXamlControls_IProgressBarFactory.iid)
            }
        }
    }

    private static var _iprogressBarStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBarStatics>? = nil

    internal static var _iprogressBarStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IProgressBarStatics> {
        get throws {
            try _iprogressBarStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ProgressBar", id: CWinRT.SWRT_WindowsUIXamlControls_IProgressBarStatics.iid)
            }
        }
    }
}