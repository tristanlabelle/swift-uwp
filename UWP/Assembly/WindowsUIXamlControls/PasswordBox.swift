// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control for entering passwords.
public final class WindowsUIXamlControls_PasswordBox: WindowsRuntime.WinRTImport<WindowsUIXamlControls_PasswordBoxProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_PasswordBoxProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBox members

    /// Gets or sets a value that specifies whether the visual UI of the PasswordBox includes a button element that toggles showing or hiding the typed characters. In Windows 10 and later, use PasswordRevealMode instead.
    /// - Returns: **True** to show a password reveal button; **false** to not show a password reveal button. The default is **false**.
    public var isPasswordRevealButtonEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsPasswordRevealButtonEnabled()
        }
    }

    /// Gets or sets a value that specifies whether the visual UI of the PasswordBox includes a button element that toggles showing or hiding the typed characters. In Windows 10 and later, use PasswordRevealMode instead.
    /// - Returns: **True** to show a password reveal button; **false** to not show a password reveal button. The default is **false**.
    public func isPasswordRevealButtonEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsPasswordRevealButtonEnabled(value)
    }

    /// Gets or sets the maximum length for passwords to be handled by this PasswordBox.
    /// - Returns: An integer that specifies the maximum number of characters for passwords to be handled by this PasswordBox. A value of zero (0) means no limit. The default is 0 (no length limit).
    public var maxLength: Swift.Int32 {
        get throws {
            try _interop.get_MaxLength()
        }
    }

    /// Gets or sets the maximum length for passwords to be handled by this PasswordBox.
    /// - Returns: An integer that specifies the maximum number of characters for passwords to be handled by this PasswordBox. A value of zero (0) means no limit. The default is 0 (no length limit).
    public func maxLength(_ value: Swift.Int32) throws {
        try _interop.put_MaxLength(value)
    }

    /// Gets or sets the password currently held by the PasswordBox.
    /// - Returns: A string that represents the password currently held by the PasswordBox. The default is an empty string.
    public var password: Swift.String {
        get throws {
            try _interop.get_Password()
        }
    }

    /// Gets or sets the password currently held by the PasswordBox.
    /// - Returns: A string that represents the password currently held by the PasswordBox. The default is an empty string.
    public func password(_ value: Swift.String) throws {
        try _interop.put_Password(value)
    }

    /// Gets or sets the masking character for the PasswordBox.
    /// - Returns: A masking character to echo when the user enters text into the PasswordBox. The default value is a bullet character (●).
    public var passwordChar: Swift.String {
        get throws {
            try _interop.get_PasswordChar()
        }
    }

    /// Gets or sets the masking character for the PasswordBox.
    /// - Returns: A masking character to echo when the user enters text into the PasswordBox. The default value is a bullet character (●).
    public func passwordChar(_ value: Swift.String) throws {
        try _interop.put_PasswordChar(value)
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    public func contextMenuOpening(adding handler: WindowsUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextMenuOpening)
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ContextMenuOpening(token)
    }

    /// Occurs when the value of the Password property changes.
    public func passwordChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PasswordChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: passwordChanged)
    }

    public func passwordChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PasswordChanged(token)
    }

    /// Selects all the characters in the PasswordBox.
    public func selectAll() throws {
        try _interop.selectAll()
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBox2 members

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox2.get_Header())
        }
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipasswordBox2.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox2.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ipasswordBox2.put_HeaderTemplate(value)
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public var placeholderText: Swift.String {
        get throws {
            try _ipasswordBox2.get_PlaceholderText()
        }
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public func placeholderText(_ value: Swift.String) throws {
        try _ipasswordBox2.put_PlaceholderText(value)
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public var preventKeyboardDisplayOnProgrammaticFocus: Swift.Bool {
        get throws {
            try _ipasswordBox2.get_PreventKeyboardDisplayOnProgrammaticFocus()
        }
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public func preventKeyboardDisplayOnProgrammaticFocus(_ value: Swift.Bool) throws {
        try _ipasswordBox2.put_PreventKeyboardDisplayOnProgrammaticFocus(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default control template for PasswordBox applies a theme resource brush for this in a runtime instance of a PasswordBox control.
    public var selectionHighlightColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox2.get_SelectionHighlightColor())
        }
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default control template for PasswordBox applies a theme resource brush for this in a runtime instance of a PasswordBox control.
    public func selectionHighlightColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _ipasswordBox2.put_SelectionHighlightColor(value)
    }

    /// Occurs when text is pasted into the control.
    public func paste(adding handler: WindowsUIXamlControls_TextControlPasteEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipasswordBox2.add_Paste(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paste)
    }

    public func paste(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipasswordBox2.remove_Paste(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBox3 members

    /// Gets or sets the context for input used by this PasswordBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control. The default is **null**.
    public var inputScope: WindowsUIXamlInput_InputScope {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox3.get_InputScope())
        }
    }

    /// Gets or sets the context for input used by this PasswordBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control. The default is **null**.
    public func inputScope(_ value: WindowsUIXamlInput_InputScope?) throws {
        try _ipasswordBox3.put_InputScope(value)
    }

    /// Gets or sets a value that specifies whether the password is always, never, or optionally obscured.
    /// - Returns: A value of the enumeration that specifies whether the password is always, never, or optionally obscured. The default is **Peek**.
    public var passwordRevealMode: WindowsUIXamlControls_PasswordRevealMode {
        get throws {
            try _ipasswordBox3.get_PasswordRevealMode()
        }
    }

    /// Gets or sets a value that specifies whether the password is always, never, or optionally obscured.
    /// - Returns: A value of the enumeration that specifies whether the password is always, never, or optionally obscured. The default is **Peek**.
    public func passwordRevealMode(_ value: WindowsUIXamlControls_PasswordRevealMode) throws {
        try _ipasswordBox3.put_PasswordRevealMode(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the PasswordBox.
    /// - Returns: A value that indicates how the reading order is determined for the PasswordBox. The default is **DetectFromContent**.
    public var textReadingOrder: WindowsUIXaml_TextReadingOrder {
        get throws {
            try _ipasswordBox3.get_TextReadingOrder()
        }
    }

    /// Gets or sets a value that indicates how the reading order is determined for the PasswordBox.
    /// - Returns: A value that indicates how the reading order is determined for the PasswordBox. The default is **DetectFromContent**.
    public func textReadingOrder(_ value: WindowsUIXaml_TextReadingOrder) throws {
        try _ipasswordBox3.put_TextReadingOrder(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBox4 members

    /// Occurs synchronously when the text in the password box starts to change, but before it is rendered.
    public func passwordChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_PasswordBox?, WindowsUIXamlControls_PasswordBoxPasswordChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipasswordBox4.add_PasswordChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: passwordChanging)
    }

    public func passwordChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipasswordBox4.remove_PasswordChanging(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBox5 members

    /// Gets a value that indicates whether clipboard content can be pasted into the control.
    /// - Returns: **true** if clipboard content can be pasted into the control; otherwise, **false**.
    public var canPasteClipboardContent: Swift.Bool {
        get throws {
            try _ipasswordBox5.get_CanPasteClipboardContent()
        }
    }

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public var description: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox5.get_Description())
        }
    }

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public func description(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipasswordBox5.put_Description(value)
    }

    /// Gets or sets the flyout that is shown when text is selected, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBox5.get_SelectionFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _ipasswordBox5.put_SelectionFlyout(value)
    }

    /// Copies content from the Windows clipboard into the text control.
    public func pasteFromClipboard() throws {
        try _ipasswordBox5.pasteFromClipboard()
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBoxStatics3 members

    /// Identifies the InputScope dependency property.
    /// - Returns: The identifier for the InputScope dependency property.
    public static var inputScopeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics3.get_InputScopeProperty())
        }
    }

    /// Identifies the PasswordRevealMode dependency property.
    /// - Returns: The identifier for the PasswordRevealMode dependency property.
    public static var passwordRevealModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics3.get_PasswordRevealModeProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    /// - Returns: The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics3.get_TextReadingOrderProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBoxStatics members

    /// Identifies the IsPasswordRevealButtonEnabled dependency property.
    /// - Returns: The identifier for the IsPasswordRevealButtonEnabled dependency property.
    public static var isPasswordRevealButtonEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics.get_IsPasswordRevealButtonEnabledProperty())
        }
    }

    /// Identifies the MaxLength dependency property.
    /// - Returns: The identifier for the MaxLength dependency property.
    public static var maxLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics.get_MaxLengthProperty())
        }
    }

    /// Identifies the PasswordChar dependency property.
    /// - Returns: The identifier for the PasswordChar dependency property.
    public static var passwordCharProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics.get_PasswordCharProperty())
        }
    }

    /// Identifies the Password dependency property.
    /// - Returns: The identifier for the Password dependency property.
    public static var passwordProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics.get_PasswordProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBoxStatics5 members

    /// Identifies the CanPasteClipboardContent dependency property.
    /// - Returns: The identifier for the CanPasteClipboardContent dependency property.
    public static var canPasteClipboardContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics5.get_CanPasteClipboardContentProperty())
        }
    }

    /// Identifies the Description dependency property.
    /// - Returns: The identifier for the Description dependency property.
    public static var descriptionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics5.get_DescriptionProperty())
        }
    }

    /// Identifies the SelectionFlyout dependency property.
    /// - Returns: The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics5.get_SelectionFlyoutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPasswordBoxStatics2 members

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics2.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics2.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the PlaceholderText dependency property.
    /// - Returns: The identifier for the PlaceholderText dependency property.
    public static var placeholderTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics2.get_PlaceholderTextProperty())
        }
    }

    /// Identifies the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    /// - Returns: The identifier for the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics2.get_PreventKeyboardDisplayOnProgrammaticFocusProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    /// - Returns: The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipasswordBoxStatics2.get_SelectionHighlightColorProperty())
        }
    }

    // MARK: Implementation details

    private var _ipasswordBox2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox2>? = nil

    internal var _ipasswordBox2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox2> {
        get throws {
            try _ipasswordBox2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox2.self)
            }
        }
    }

    private var _ipasswordBox3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox3>? = nil

    internal var _ipasswordBox3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox3> {
        get throws {
            try _ipasswordBox3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox3.self)
            }
        }
    }

    private var _ipasswordBox4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox4>? = nil

    internal var _ipasswordBox4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox4> {
        get throws {
            try _ipasswordBox4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox4.self)
            }
        }
    }

    private var _ipasswordBox5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox5>? = nil

    internal var _ipasswordBox5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox5> {
        get throws {
            try _ipasswordBox5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBox5.self)
            }
        }
    }

    deinit {
        _ipasswordBox2_storage?.release()
        _ipasswordBox3_storage?.release()
        _ipasswordBox4_storage?.release()
        _ipasswordBox5_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PasswordBox", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ipasswordBoxStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics3>? = nil

    internal static var _ipasswordBoxStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics3> {
        get throws {
            try _ipasswordBoxStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PasswordBox", id: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics3.iid)
            }
        }
    }

    private static var _ipasswordBoxStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics>? = nil

    internal static var _ipasswordBoxStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics> {
        get throws {
            try _ipasswordBoxStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PasswordBox", id: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics.iid)
            }
        }
    }

    private static var _ipasswordBoxStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics5>? = nil

    internal static var _ipasswordBoxStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics5> {
        get throws {
            try _ipasswordBoxStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PasswordBox", id: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics5.iid)
            }
        }
    }

    private static var _ipasswordBoxStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics2>? = nil

    internal static var _ipasswordBoxStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics2> {
        get throws {
            try _ipasswordBoxStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PasswordBox", id: CWinRT.SWRT_WindowsUIXamlControls_IPasswordBoxStatics2.iid)
            }
        }
    }
}