// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that can be used to enter search query text. (Not recommended for Universal Windows Platform (UWP) apps. See AutoSuggestBox.)
open class WindowsUIXamlControls_SearchBox: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ISearchBoxFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_SearchBox.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isearchBoxFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISearchBox members

    /// Gets or sets a value that determines whether the suggested search query is activated when the user presses Enter.
    /// - Returns: **true** if the suggested search query is activated when the user presses Enter; otherwise, **false**. The default is **false**.
    public var chooseSuggestionOnEnter: Swift.Bool {
        get throws {
            try _isearchBox.get_ChooseSuggestionOnEnter()
        }
    }

    /// Gets or sets a value that determines whether the suggested search query is activated when the user presses Enter.
    /// - Returns: **true** if the suggested search query is activated when the user presses Enter; otherwise, **false**. The default is **false**.
    public func chooseSuggestionOnEnter(_ value: Swift.Bool) throws {
        try _isearchBox.put_ChooseSuggestionOnEnter(value)
    }

    /// Gets or sets a value that determines whether a user can search by typing anywhere in the app.
    /// - Returns: **true** if the user can search by typing anywhere in the app; otherwise, **false**. The default is **false**.
    public var focusOnKeyboardInput: Swift.Bool {
        get throws {
            try _isearchBox.get_FocusOnKeyboardInput()
        }
    }

    /// Gets or sets a value that determines whether a user can search by typing anywhere in the app.
    /// - Returns: **true** if the user can search by typing anywhere in the app; otherwise, **false**. The default is **false**.
    public func focusOnKeyboardInput(_ value: Swift.Bool) throws {
        try _isearchBox.put_FocusOnKeyboardInput(value)
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string (""). The maximum placeholder text length is 128 characters.
    public var placeholderText: Swift.String {
        get throws {
            try _isearchBox.get_PlaceholderText()
        }
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string (""). The maximum placeholder text length is 128 characters.
    public func placeholderText(_ value: Swift.String) throws {
        try _isearchBox.put_PlaceholderText(value)
    }

    /// Gets or sets the text contents of the search box.
    /// - Returns: A string containing the text contents of the search box. The default is an empty string (""). The maximum query text length is 2048 characters.
    public var queryText: Swift.String {
        get throws {
            try _isearchBox.get_QueryText()
        }
    }

    /// Gets or sets the text contents of the search box.
    /// - Returns: A string containing the text contents of the search box. The default is an empty string (""). The maximum query text length is 2048 characters.
    public func queryText(_ value: Swift.String) throws {
        try _isearchBox.put_QueryText(value)
    }

    /// Gets or sets a string that identifies the context of the search and is used to store the user's search history with the app.
    /// - Returns: A string that identifies the context of the search. The default is an empty string ("").
    public var searchHistoryContext: Swift.String {
        get throws {
            try _isearchBox.get_SearchHistoryContext()
        }
    }

    /// Gets or sets a string that identifies the context of the search and is used to store the user's search history with the app.
    /// - Returns: A string that identifies the context of the search. The default is an empty string ("").
    public func searchHistoryContext(_ value: Swift.String) throws {
        try _isearchBox.put_SearchHistoryContext(value)
    }

    /// Gets or sets a value that determines whether search suggestions are made from the search history.
    /// - Returns: **true** if search suggestions are made from the search history; otherwise, **false**. The default is **true**.
    public var searchHistoryEnabled: Swift.Bool {
        get throws {
            try _isearchBox.get_SearchHistoryEnabled()
        }
    }

    /// Gets or sets a value that determines whether search suggestions are made from the search history.
    /// - Returns: **true** if search suggestions are made from the search history; otherwise, **false**. The default is **true**.
    public func searchHistoryEnabled(_ value: Swift.Bool) throws {
        try _isearchBox.put_SearchHistoryEnabled(value)
    }

    /// Occurs when the FocusOnKeyboardInput property is **true** and the app receives textual keyboard input.
    public func prepareForFocusOnKeyboardInput(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SearchBox?, WindowsUIXaml_RoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isearchBox.add_PrepareForFocusOnKeyboardInput(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: prepareForFocusOnKeyboardInput)
    }

    public func prepareForFocusOnKeyboardInput(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isearchBox.remove_PrepareForFocusOnKeyboardInput(token)
    }

    /// Occurs when the query text changes.
    public func queryChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SearchBox?, WindowsUIXamlControls_SearchBoxQueryChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isearchBox.add_QueryChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: queryChanged)
    }

    public func queryChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isearchBox.remove_QueryChanged(token)
    }

    /// Occurs when the user submits a search query.
    public func querySubmitted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SearchBox?, WindowsUIXamlControls_SearchBoxQuerySubmittedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isearchBox.add_QuerySubmitted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: querySubmitted)
    }

    public func querySubmitted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isearchBox.remove_QuerySubmitted(token)
    }

    /// Occurs when the user picks a suggested search result.
    public func resultSuggestionChosen(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SearchBox?, WindowsUIXamlControls_SearchBoxResultSuggestionChosenEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isearchBox.add_ResultSuggestionChosen(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: resultSuggestionChosen)
    }

    public func resultSuggestionChosen(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isearchBox.remove_ResultSuggestionChosen(token)
    }

    /// Occurs when the user's query text changes and the app needs to provide new suggestions to display in the search pane.
    public func suggestionsRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SearchBox?, WindowsUIXamlControls_SearchBoxSuggestionsRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isearchBox.add_SuggestionsRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: suggestionsRequested)
    }

    public func suggestionsRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isearchBox.remove_SuggestionsRequested(token)
    }

    /// Specifies whether suggestions based on local files are automatically displayed in the search box suggestions, and defines the criteria that Windows uses to locate and filter these suggestions.
    /// - Parameter settings: The new settings for local content suggestions.
    public func setLocalContentSuggestionSettings(_ settings: WindowsApplicationModelSearch_LocalContentSuggestionSettings?) throws {
        try _isearchBox.setLocalContentSuggestionSettings(settings)
    }

    // MARK: Windows.UI.Xaml.Controls.ISearchBoxStatics members

    /// Identifies the ChooseSuggestionOnEnter dependency property.
    /// - Returns: The identifier for the ChooseSuggestionOnEnter dependency property.
    public static var chooseSuggestionOnEnterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_ChooseSuggestionOnEnterProperty())
        }
    }

    /// Identifies the FocusOnKeyboardInput dependency property.
    /// - Returns: The identifier for the FocusOnKeyboardInput dependency property.
    public static var focusOnKeyboardInputProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_FocusOnKeyboardInputProperty())
        }
    }

    /// Identifies the PlaceholderText dependency property.
    /// - Returns: The identifier for the PlaceholderText dependency property.
    public static var placeholderTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_PlaceholderTextProperty())
        }
    }

    /// Identifies the QueryText dependency property.
    /// - Returns: The identifier for the QueryText dependency property.
    public static var queryTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_QueryTextProperty())
        }
    }

    /// Identifies the SearchHistoryContext dependency property.
    /// - Returns: The identifier for the SearchHistoryContext dependency property.
    public static var searchHistoryContextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_SearchHistoryContextProperty())
        }
    }

    /// Identifies the SearchHistoryEnabled dependency property.
    /// - Returns: The identifier for the SearchHistoryEnabled dependency property.
    public static var searchHistoryEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isearchBoxStatics.get_SearchHistoryEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _isearchBox_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBox>? = nil

    internal var _isearchBox: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBox> {
        get throws {
            try _isearchBox_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISearchBox.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISearchBox.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ISearchBox>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _isearchBox_storage?.release()
    }

    private static var _isearchBoxFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxFactory>? = nil

    internal static var _isearchBoxFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxFactory> {
        get throws {
            try _isearchBoxFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SearchBox", id: CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxFactory.iid)
            }
        }
    }

    private static var _isearchBoxStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxStatics>? = nil

    internal static var _isearchBoxStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxStatics> {
        get throws {
            try _isearchBoxStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SearchBox", id: CWinRT.SWRT_WindowsUIXamlControls_ISearchBoxStatics.iid)
            }
        }
    }
}