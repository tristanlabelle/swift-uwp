// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an items control that displays one item at a time, and enables "flip" behavior for traversing its collection of items.
open class WindowsUIXamlControls_FlipView: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IFlipViewFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_FlipView.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iflipViewFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IFlipView2 members

    /// Gets or sets a value that indicates whether transition animations are always used whether the navigation is touch-based, button-based or programmatic.
    /// - Returns: **true** if transition animations are always used; **false** if transition animations are used only for touch navigation. The default is **true**.
    public var useTouchAnimationsForAllNavigation: Swift.Bool {
        get throws {
            try _iflipView2.get_UseTouchAnimationsForAllNavigation()
        }
    }

    /// Gets or sets a value that indicates whether transition animations are always used whether the navigation is touch-based, button-based or programmatic.
    /// - Returns: **true** if transition animations are always used; **false** if transition animations are used only for touch navigation. The default is **true**.
    public func useTouchAnimationsForAllNavigation(_ value: Swift.Bool) throws {
        try _iflipView2.put_UseTouchAnimationsForAllNavigation(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IFlipViewStatics2 members

    /// Identifies the UseTouchAnimationsForAllNavigation dependency property.
    /// - Returns: The identifier for the UseTouchAnimationsForAllNavigation dependency property.
    public static var useTouchAnimationsForAllNavigationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflipViewStatics2.get_UseTouchAnimationsForAllNavigationProperty())
        }
    }

    // MARK: Implementation details

    private var _iflipView_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipView>? = nil

    internal var _iflipView: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipView> {
        get throws {
            try _iflipView_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFlipView.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFlipView.self)
            }
        }
    }

    private var _iflipView2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipView2>? = nil

    internal var _iflipView2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipView2> {
        get throws {
            try _iflipView2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFlipView2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFlipView2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IFlipView>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iflipView_storage?.release()
        _iflipView2_storage?.release()
    }

    private static var _iflipViewFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipViewFactory>? = nil

    internal static var _iflipViewFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipViewFactory> {
        get throws {
            try _iflipViewFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.FlipView", id: CWinRT.SWRT_WindowsUIXamlControls_IFlipViewFactory.iid)
            }
        }
    }

    private static var _iflipViewStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipViewStatics2>? = nil

    internal static var _iflipViewStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFlipViewStatics2> {
        get throws {
            try _iflipViewStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.FlipView", id: CWinRT.SWRT_WindowsUIXamlControls_IFlipViewStatics2.iid)
            }
        }
    }
}