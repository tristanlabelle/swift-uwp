// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an object that uses a MediaPlayer to render audio and video to the display.
open class WindowsUIXamlControls_MediaPlayerElement: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IMediaPlayerElementFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_MediaPlayerElement.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imediaPlayerElementFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaPlayerElement members

    /// Gets or sets a value that determines whether the standard transport controls are enabled.
    /// - Returns: **true** if the standard transport controls are enabled; otherwise, **false**. The default is **false**.
    public var areTransportControlsEnabled: Swift.Bool {
        get throws {
            try _imediaPlayerElement.get_AreTransportControlsEnabled()
        }
    }

    /// Gets or sets a value that determines whether the standard transport controls are enabled.
    /// - Returns: **true** if the standard transport controls are enabled; otherwise, **false**. The default is **false**.
    public func areTransportControlsEnabled(_ value: Swift.Bool) throws {
        try _imediaPlayerElement.put_AreTransportControlsEnabled(value)
    }

    /// Gets or sets a value that indicates whether media will begin playback automatically when the Source property is set.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public var autoPlay: Swift.Bool {
        get throws {
            try _imediaPlayerElement.get_AutoPlay()
        }
    }

    /// Gets or sets a value that indicates whether media will begin playback automatically when the Source property is set.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public func autoPlay(_ value: Swift.Bool) throws {
        try _imediaPlayerElement.put_AutoPlay(value)
    }

    /// Gets or sets a value that specifies if the MediaPlayerElement is rendering in full window mode.
    /// - Returns: **true** if the MediaPlayerElement is in full window mode; otherwise, **false**. The default is **false**.
    public var isFullWindow: Swift.Bool {
        get throws {
            try _imediaPlayerElement.get_IsFullWindow()
        }
    }

    /// Gets or sets a value that specifies if the MediaPlayerElement is rendering in full window mode.
    /// - Returns: **true** if the MediaPlayerElement is in full window mode; otherwise, **false**. The default is **false**.
    public func isFullWindow(_ value: Swift.Bool) throws {
        try _imediaPlayerElement.put_IsFullWindow(value)
    }

    /// Gets the MediaPlayer instance used to render media.
    /// - Returns: The MediaPlayer instance used to render media.
    public var mediaPlayer: WindowsMediaPlayback_MediaPlayer {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElement.get_MediaPlayer())
        }
    }

    /// Gets or sets the image source that is used for a placeholder image during MediaPlayerElement loading transition states.
    /// - Returns: An image source for a transition ImageBrush that is applied to the MediaPlayerElement content area.
    public var posterSource: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElement.get_PosterSource())
        }
    }

    /// Gets or sets the image source that is used for a placeholder image during MediaPlayerElement loading transition states.
    /// - Returns: An image source for a transition ImageBrush that is applied to the MediaPlayerElement content area.
    public func posterSource(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _imediaPlayerElement.put_PosterSource(value)
    }

    /// Gets or sets a media source on the MediaPlayerElement.
    /// - Returns: The source of the media. The default is **null**.
    public var source: WindowsMediaPlayback_IMediaPlaybackSource {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElement.get_Source())
        }
    }

    /// Gets or sets a media source on the MediaPlayerElement.
    /// - Returns: The source of the media. The default is **null**.
    public func source(_ value: WindowsMediaPlayback_IMediaPlaybackSource?) throws {
        try _imediaPlayerElement.put_Source(value)
    }

    /// Gets or sets a value that describes how an MediaPlayerElement should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source visual media is rendered. The default value is **Uniform**.
    public var stretch: WindowsUIXamlMedia_Stretch {
        get throws {
            try _imediaPlayerElement.get_Stretch()
        }
    }

    /// Gets or sets a value that describes how an MediaPlayerElement should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source visual media is rendered. The default value is **Uniform**.
    public func stretch(_ value: WindowsUIXamlMedia_Stretch) throws {
        try _imediaPlayerElement.put_Stretch(value)
    }

    /// Gets or sets the transport controls for the media.
    /// - Returns: The transport controls for the media.
    public var transportControls: WindowsUIXamlControls_MediaTransportControls {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElement.get_TransportControls())
        }
    }

    /// Gets or sets the transport controls for the media.
    /// - Returns: The transport controls for the media.
    public func transportControls(_ value: WindowsUIXamlControls_MediaTransportControls?) throws {
        try _imediaPlayerElement.put_TransportControls(value)
    }

    /// Sets the MediaPlayer instance used to render media.
    /// - Parameter mediaPlayer: The new MediaPlayer instance used to render media.
    public func setMediaPlayer(_ mediaPlayer: WindowsMediaPlayback_MediaPlayer?) throws {
        try _imediaPlayerElement.setMediaPlayer(mediaPlayer)
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaPlayerElementStatics members

    /// Identifies the AreTransportControlsEnabled dependency property.
    /// - Returns: The identifier for the AreTransportControlsEnabled dependency property.
    public static var areTransportControlsEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_AreTransportControlsEnabledProperty())
        }
    }

    /// Identifies the AutoPlay dependency property.
    /// - Returns: The identifier for the AutoPlay dependency property.
    public static var autoPlayProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_AutoPlayProperty())
        }
    }

    /// Identifies the IsFullWindow dependency property.
    /// - Returns: The identifier for the IsFullWindow dependency property.
    public static var isFullWindowProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_IsFullWindowProperty())
        }
    }

    /// Identifies the MediaPlayer dependency property.
    /// - Returns: The identifier for the MediaPlayer dependency property.
    public static var mediaPlayerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_MediaPlayerProperty())
        }
    }

    /// Identifies the PosterSource dependency property.
    /// - Returns: The identifier for the PosterSource dependency property.
    public static var posterSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_PosterSourceProperty())
        }
    }

    /// Identifies the Source dependency property.
    /// - Returns: The identifier for the Source dependency property.
    public static var sourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_SourceProperty())
        }
    }

    /// Identifies the Stretch dependency property.
    /// - Returns: The identifier for the Stretch dependency property.
    public static var stretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerElementStatics.get_StretchProperty())
        }
    }

    // MARK: Implementation details

    private var _imediaPlayerElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElement>? = nil

    internal var _imediaPlayerElement: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElement> {
        get throws {
            try _imediaPlayerElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElement.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElement.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElement>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _imediaPlayerElement_storage?.release()
    }

    private static var _imediaPlayerElementFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementFactory>? = nil

    internal static var _imediaPlayerElementFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementFactory> {
        get throws {
            try _imediaPlayerElementFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaPlayerElement", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementFactory.iid)
            }
        }
    }

    private static var _imediaPlayerElementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementStatics>? = nil

    internal static var _imediaPlayerElementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementStatics> {
        get throws {
            try _imediaPlayerElementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaPlayerElement", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaPlayerElementStatics.iid)
            }
        }
    }
}