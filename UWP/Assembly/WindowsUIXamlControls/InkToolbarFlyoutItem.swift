// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an InkToolbar button on a flyout. This item can be a basic button, a radio button, a radio toggle button, or a check box.
open class WindowsUIXamlControls_InkToolbarFlyoutItem: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_InkToolbarFlyoutItem.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iinkToolbarFlyoutItemFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IInkToolbarFlyoutItem members

    /// Gets or sets whether the flyout item is checked.
    /// - Returns: **true** if checked. Otherwise, **false**.
    public var isChecked: Swift.Bool {
        get throws {
            try _iinkToolbarFlyoutItem.get_IsChecked()
        }
    }

    /// Gets or sets whether the flyout item is checked.
    /// - Returns: **true** if checked. Otherwise, **false**.
    public func isChecked(_ value: Swift.Bool) throws {
        try _iinkToolbarFlyoutItem.put_IsChecked(value)
    }

    /// Gets or sets the type of button to use on the flyout.
    /// - Returns: The type of button.
    public var kind: WindowsUIXamlControls_InkToolbarFlyoutItemKind {
        get throws {
            try _iinkToolbarFlyoutItem.get_Kind()
        }
    }

    /// Gets or sets the type of button to use on the flyout.
    /// - Returns: The type of button.
    public func kind(_ value: WindowsUIXamlControls_InkToolbarFlyoutItemKind) throws {
        try _iinkToolbarFlyoutItem.put_Kind(value)
    }

    /// Occurs when the flyout item is checked.
    public func checked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_InkToolbarFlyoutItem?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iinkToolbarFlyoutItem.add_Checked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: checked)
    }

    public func checked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iinkToolbarFlyoutItem.remove_Checked(token)
    }

    /// Occurs when the flyout item is unchecked.
    public func unchecked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_InkToolbarFlyoutItem?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iinkToolbarFlyoutItem.add_Unchecked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: unchecked)
    }

    public func unchecked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iinkToolbarFlyoutItem.remove_Unchecked(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IInkToolbarFlyoutItemStatics members

    /// Identifies the IsChecked dependency property.
    /// - Returns: The identifier for the IsChecked dependency property.
    public static var isCheckedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iinkToolbarFlyoutItemStatics.get_IsCheckedProperty())
        }
    }

    /// Identifies the Kind dependency property.
    /// - Returns: The identifier for the Kind dependency property.
    public static var kindProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iinkToolbarFlyoutItemStatics.get_KindProperty())
        }
    }

    // MARK: Implementation details

    private var _iinkToolbarFlyoutItem_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItem>? = nil

    internal var _iinkToolbarFlyoutItem: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItem> {
        get throws {
            try _iinkToolbarFlyoutItem_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItem.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItem.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItem>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iinkToolbarFlyoutItem_storage?.release()
    }

    private static var _iinkToolbarFlyoutItemFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemFactory>? = nil

    internal static var _iinkToolbarFlyoutItemFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemFactory> {
        get throws {
            try _iinkToolbarFlyoutItemFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.InkToolbarFlyoutItem", id: CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemFactory.iid)
            }
        }
    }

    private static var _iinkToolbarFlyoutItemStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemStatics>? = nil

    internal static var _iinkToolbarFlyoutItemStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemStatics> {
        get throws {
            try _iinkToolbarFlyoutItemStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.InkToolbarFlyoutItem", id: CWinRT.SWRT_WindowsUIXamlControls_IInkToolbarFlyoutItemStatics.iid)
            }
        }
    }
}