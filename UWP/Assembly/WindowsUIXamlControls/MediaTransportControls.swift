// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the playback controls for a media player element.
open class WindowsUIXamlControls_MediaTransportControls: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControlsFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_MediaTransportControls.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imediaTransportControlsFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControls members

    /// Gets or sets a value that indicates whether transport controls are shown on one row instead of two.
    /// - Returns: **true** if the transport controls are shown in one row; **false** if the transport controls are shown in two rows. The default is **false**.
    public var isCompact: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsCompact()
        }
    }

    /// Gets or sets a value that indicates whether transport controls are shown on one row instead of two.
    /// - Returns: **true** if the transport controls are shown in one row; **false** if the transport controls are shown in two rows. The default is **false**.
    public func isCompact(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsCompact(value)
    }

    /// Gets or sets a value that indicates whether the fast forward button is shown.
    /// - Returns: **true** to show the fast forward button. **false** to hide the fast forward button. The default is **false**.
    public var isFastForwardButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFastForwardButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the fast forward button is shown.
    /// - Returns: **true** to show the fast forward button. **false** to hide the fast forward button. The default is **false**.
    public func isFastForwardButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFastForwardButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can fast forward the media.
    /// - Returns: **true** to allow the user to fast forward; otherwise, **false**. The default is **false**.
    public var isFastForwardEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFastForwardEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can fast forward the media.
    /// - Returns: **true** to allow the user to fast forward; otherwise, **false**. The default is **false**.
    public func isFastForwardEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFastForwardEnabled(value)
    }

    /// Gets or sets a value that indicates whether the rewind button is shown.
    /// - Returns: **true** to show the rewind button. **false** to hide the rewind button. The default is **false**.
    public var isFastRewindButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFastRewindButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the rewind button is shown.
    /// - Returns: **true** to show the rewind button. **false** to hide the rewind button. The default is **false**.
    public func isFastRewindButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFastRewindButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can rewind the media.
    /// - Returns: **true** to allow the user to rewind; otherwise, **false**. The default is **false**.
    public var isFastRewindEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFastRewindEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can rewind the media.
    /// - Returns: **true** to allow the user to rewind; otherwise, **false**. The default is **false**.
    public func isFastRewindEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFastRewindEnabled(value)
    }

    /// Gets or sets a value that indicates whether the full screen button is shown.
    /// - Returns: **true** to show the full screen button. **false** to hide the full screen button. The default is **true**.
    public var isFullWindowButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFullWindowButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the full screen button is shown.
    /// - Returns: **true** to show the full screen button. **false** to hide the full screen button. The default is **true**.
    public func isFullWindowButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFullWindowButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can play the media in full-screen mode.
    /// - Returns: **true** to allow the user to play the media in full-screen mode; otherwise, **false**. The default is **true**.
    public var isFullWindowEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsFullWindowEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can play the media in full-screen mode.
    /// - Returns: **true** to allow the user to play the media in full-screen mode; otherwise, **false**. The default is **true**.
    public func isFullWindowEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsFullWindowEnabled(value)
    }

    /// Gets or sets a value that indicates whether the playback rate button is shown.
    /// - Returns: **true** to show the playback rate button. **false** to hide the playback rate button. The default is **false**.
    public var isPlaybackRateButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsPlaybackRateButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the playback rate button is shown.
    /// - Returns: **true** to show the playback rate button. **false** to hide the playback rate button. The default is **false**.
    public func isPlaybackRateButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsPlaybackRateButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can adjust the playback rate of the media.
    /// - Returns: **true** to allow the user to adjust the playback rate; otherwise, **false**. The default is **false**.
    public var isPlaybackRateEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsPlaybackRateEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can adjust the playback rate of the media.
    /// - Returns: **true** to allow the user to adjust the playback rate; otherwise, **false**. The default is **false**.
    public func isPlaybackRateEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsPlaybackRateEnabled(value)
    }

    /// Gets or sets a value that indicates whether the seek bar is shown.
    /// - Returns: **true** to show the seek bar. **false** to hide the seek bar. The default is **true**.
    public var isSeekBarVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsSeekBarVisible()
        }
    }

    /// Gets or sets a value that indicates whether the seek bar is shown.
    /// - Returns: **true** to show the seek bar. **false** to hide the seek bar. The default is **true**.
    public func isSeekBarVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsSeekBarVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can use the seek bar to find a location in the media.
    /// - Returns: **true** to allow the user to use the seek bar to find a location; otherwise, **false**. The default is **true**.
    public var isSeekEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsSeekEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can use the seek bar to find a location in the media.
    /// - Returns: **true** to allow the user to use the seek bar to find a location; otherwise, **false**. The default is **true**.
    public func isSeekEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsSeekEnabled(value)
    }

    /// Gets or sets a value that indicates whether the stop button is shown.
    /// - Returns: **true** to show the stop button. **false** to hide the stop button. The default is **false**.
    public var isStopButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsStopButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the stop button is shown.
    /// - Returns: **true** to show the stop button. **false** to hide the stop button. The default is **false**.
    public func isStopButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsStopButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can stop the media playback.
    /// - Returns: **true** to allow the user to stop playback; otherwise, **false**. The default is **false**.
    public var isStopEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsStopEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can stop the media playback.
    /// - Returns: **true** to allow the user to stop playback; otherwise, **false**. The default is **false**.
    public func isStopEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsStopEnabled(value)
    }

    /// Gets or sets a value that indicates whether the volume button is shown.
    /// - Returns: **true** to show the volume button. **false** to hide the volume button. The default is **true**.
    public var isVolumeButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsVolumeButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the volume button is shown.
    /// - Returns: **true** to show the volume button. **false** to hide the volume button. The default is **true**.
    public func isVolumeButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsVolumeButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can adjust the volume of the media.
    /// - Returns: **true** to allow the user to adjust the volume; otherwise, **false**. The default is **true**.
    public var isVolumeEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsVolumeEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can adjust the volume of the media.
    /// - Returns: **true** to allow the user to adjust the volume; otherwise, **false**. The default is **true**.
    public func isVolumeEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsVolumeEnabled(value)
    }

    /// Gets or sets a value that indicates whether the zoom button is shown.
    /// - Returns: **true** to show the zoom button. **false** to hide the zoom button. The default is **true**.
    public var isZoomButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsZoomButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the zoom button is shown.
    /// - Returns: **true** to show the zoom button. **false** to hide the zoom button. The default is **true**.
    public func isZoomButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsZoomButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can zoom the media.
    /// - Returns: **true** to allow the user to zoom; otherwise, **false**. The default is **true**.
    public var isZoomEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls.get_IsZoomEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can zoom the media.
    /// - Returns: **true** to allow the user to zoom; otherwise, **false**. The default is **true**.
    public func isZoomEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls.put_IsZoomEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControls2 members

    /// Gets or sets a value that specifies how the fast-forward/fast-rewind buttons behave.
    /// - Returns: A value of the enumeration that specifies how the fast-forward/fast-rewind buttons behave.
    public var fastPlayFallbackBehaviour: WindowsUIXamlMedia_FastPlayFallbackBehaviour {
        get throws {
            try _imediaTransportControls2.get_FastPlayFallbackBehaviour()
        }
    }

    /// Gets or sets a value that specifies how the fast-forward/fast-rewind buttons behave.
    /// - Returns: A value of the enumeration that specifies how the fast-forward/fast-rewind buttons behave.
    public func fastPlayFallbackBehaviour(_ value: WindowsUIXamlMedia_FastPlayFallbackBehaviour) throws {
        try _imediaTransportControls2.put_FastPlayFallbackBehaviour(value)
    }

    /// Gets or sets a value that indicates whether the next track button is shown.
    /// - Returns: **true** to show the next track button. **false** to hide the next track button. The default is **false**.
    public var isNextTrackButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsNextTrackButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the next track button is shown.
    /// - Returns: **true** to show the next track button. **false** to hide the next track button. The default is **false**.
    public func isNextTrackButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsNextTrackButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether the previous track button is shown.
    /// - Returns: **true** to show the previous track button. **false** to hide the previous track button. The default is **false**.
    public var isPreviousTrackButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsPreviousTrackButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the previous track button is shown.
    /// - Returns: **true** to show the previous track button. **false** to hide the previous track button. The default is **false**.
    public func isPreviousTrackButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsPreviousTrackButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether the skip backward button is shown.
    /// - Returns: **true** to show the skip backward button. **false** to hide the skip backward button. The default is **false**.
    public var isSkipBackwardButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsSkipBackwardButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the skip backward button is shown.
    /// - Returns: **true** to show the skip backward button. **false** to hide the skip backward button. The default is **false**.
    public func isSkipBackwardButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsSkipBackwardButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can skip backward in the media.
    /// - Returns: **true** to allow the user to skip backward; otherwise, **false**. The default is **false**.
    public var isSkipBackwardEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsSkipBackwardEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can skip backward in the media.
    /// - Returns: **true** to allow the user to skip backward; otherwise, **false**. The default is **false**.
    public func isSkipBackwardEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsSkipBackwardEnabled(value)
    }

    /// Gets or sets a value that indicates whether the skip forward button is shown.
    /// - Returns: **true** to show the skip forward button. **false** to hide the skip forward button. The default is **false**.
    public var isSkipForwardButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsSkipForwardButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the skip forward button is shown.
    /// - Returns: **true** to show the skip forward button. **false** to hide the skip forward button. The default is **false**.
    public func isSkipForwardButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsSkipForwardButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can skip forward in the media.
    /// - Returns: **true** to allow the user to skip forward; otherwise, **false**. The default is **false**.
    public var isSkipForwardEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls2.get_IsSkipForwardEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can skip forward in the media.
    /// - Returns: **true** to allow the user to skip forward; otherwise, **false**. The default is **false**.
    public func isSkipForwardEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls2.put_IsSkipForwardEnabled(value)
    }

    /// Occurs whenever the app needs to display a thumbnail adjacent to the seek bar when the user performs a seek operation.
    public func thumbnailRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_MediaTransportControls?, WindowsUIXamlMedia_MediaTransportControlsThumbnailRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaTransportControls2.add_ThumbnailRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: thumbnailRequested)
    }

    public func thumbnailRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaTransportControls2.remove_ThumbnailRequested(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControls3 members

    /// Gets or sets a value that indicates whether the repeat button is shown.
    /// - Returns: **true** to show the repeat button. **false** to hide the repeat button. The default is **false**.
    public var isRepeatButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls3.get_IsRepeatButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the repeat button is shown.
    /// - Returns: **true** to show the repeat button. **false** to hide the repeat button. The default is **false**.
    public func isRepeatButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls3.put_IsRepeatButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user repeat the playback of the media.
    /// - Returns: **true** to allow the user to repeat the media; otherwise, **false**. The default is **false**.
    public var isRepeatEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls3.get_IsRepeatEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user repeat the playback of the media.
    /// - Returns: **true** to allow the user to repeat the media; otherwise, **false**. The default is **false**.
    public func isRepeatEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls3.put_IsRepeatEnabled(value)
    }

    /// Gets or sets a value that indicates whether the controls are shown and hidden automatically.
    /// - Returns: **true** if the controls are shown and hidden automatically; otherwise, **false**. The default is **true**.
    public var showAndHideAutomatically: Swift.Bool {
        get throws {
            try _imediaTransportControls3.get_ShowAndHideAutomatically()
        }
    }

    /// Gets or sets a value that indicates whether the controls are shown and hidden automatically.
    /// - Returns: **true** if the controls are shown and hidden automatically; otherwise, **false**. The default is **true**.
    public func showAndHideAutomatically(_ value: Swift.Bool) throws {
        try _imediaTransportControls3.put_ShowAndHideAutomatically(value)
    }

    /// Shows the tranport controls if they're hidden.
    public func show() throws {
        try _imediaTransportControls3.show()
    }

    /// Hides the transport controls if they're shown.
    public func hide() throws {
        try _imediaTransportControls3.hide()
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControls4 members

    /// Gets or sets a value that indicates whether the compact overlay button is shown.
    /// - Returns: **true** to show the compact overlay button. **false** to hide the compact overlay button. The default is **false**.
    public var isCompactOverlayButtonVisible: Swift.Bool {
        get throws {
            try _imediaTransportControls4.get_IsCompactOverlayButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the compact overlay button is shown.
    /// - Returns: **true** to show the compact overlay button. **false** to hide the compact overlay button. The default is **false**.
    public func isCompactOverlayButtonVisible(_ value: Swift.Bool) throws {
        try _imediaTransportControls4.put_IsCompactOverlayButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether a user can enter compact overlay mode.
    /// - Returns: **true** to allow the user to enter compact overlay mode; otherwise, **false**.
    public var isCompactOverlayEnabled: Swift.Bool {
        get throws {
            try _imediaTransportControls4.get_IsCompactOverlayEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can enter compact overlay mode.
    /// - Returns: **true** to allow the user to enter compact overlay mode; otherwise, **false**.
    public func isCompactOverlayEnabled(_ value: Swift.Bool) throws {
        try _imediaTransportControls4.put_IsCompactOverlayEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControlsStatics4 members

    /// Identifies the IsCompactOverlayButtonVisible dependency property.
    /// - Returns: The identifier for the IsCompactOverlayButtonVisible dependency property.
    public static var isCompactOverlayButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics4.get_IsCompactOverlayButtonVisibleProperty())
        }
    }

    /// Identifies the IsCompactOverlayEnabled dependency property.
    /// - Returns: The identifier for the IsCompactOverlayEnabled dependency property.
    public static var isCompactOverlayEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics4.get_IsCompactOverlayEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControlsStatics3 members

    /// Identifies the IsRepeatButtonVisible dependency property.
    /// - Returns: The identifier for the IsRepeatButtonVisible dependency property.
    public static var isRepeatButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics3.get_IsRepeatButtonVisibleProperty())
        }
    }

    /// Identifies the IsRepeatEnabled dependency property.
    /// - Returns: The identifier for the IsRepeatEnabled dependency property.
    public static var isRepeatEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics3.get_IsRepeatEnabledProperty())
        }
    }

    /// Identifies the ShowAndHideAutomatically dependency property.
    /// - Returns: The identifier for the ShowAndHideAutomatically dependency property.
    public static var showAndHideAutomaticallyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics3.get_ShowAndHideAutomaticallyProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControlsStatics2 members

    /// Identifies the FastPlayFallbackBehaviour dependency property.
    /// - Returns: The identifier for the FastPlayFallbackBehaviour dependency property.
    public static var fastPlayFallbackBehaviourProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_FastPlayFallbackBehaviourProperty())
        }
    }

    /// Identifies the IsNextTrackButtonVisible dependency property.
    /// - Returns: The identifier for the IsNextTrackButtonVisible dependency property.
    public static var isNextTrackButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsNextTrackButtonVisibleProperty())
        }
    }

    /// Identifies the IsPreviousTrackButtonVisible dependency property.
    /// - Returns: The identifier for the IsPreviousTrackButtonVisible dependency property.
    public static var isPreviousTrackButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsPreviousTrackButtonVisibleProperty())
        }
    }

    /// Identifies the IsSkipBackwardButtonVisible dependency property.
    /// - Returns: The identifier for the IsSkipBackwardButtonVisible dependency property.
    public static var isSkipBackwardButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsSkipBackwardButtonVisibleProperty())
        }
    }

    /// Identifies the IsSkipBackwardEnabled dependency property.
    /// - Returns: The identifier for the IsSkipBackwardEnabled dependency property.
    public static var isSkipBackwardEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsSkipBackwardEnabledProperty())
        }
    }

    /// Identifies the IsSkipForwardButtonVisible dependency property.
    /// - Returns: The identifier for the IsSkipForwardButtonVisible dependency property.
    public static var isSkipForwardButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsSkipForwardButtonVisibleProperty())
        }
    }

    /// Identifies the IsSkipForwardEnabled dependency property.
    /// - Returns: The identifier for the IsSkipForwardEnabled dependency property.
    public static var isSkipForwardEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics2.get_IsSkipForwardEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaTransportControlsStatics members

    /// Identifies the IsCompact  dependency property.
    /// - Returns: The identifier for the IsCompact   dependency property.
    public static var isCompactProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsCompactProperty())
        }
    }

    /// Identifies the IsFastForwardButtonVisible dependency property.
    /// - Returns: The identifier for the IsFastForwardButtonVisible dependency property.
    public static var isFastForwardButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFastForwardButtonVisibleProperty())
        }
    }

    /// Identifies the IsFastForwardEnabled dependency property.
    /// - Returns: The identifier for the IsFastForwardEnabled dependency property.
    public static var isFastForwardEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFastForwardEnabledProperty())
        }
    }

    /// Identifies the IsFastRewindButtonVisible dependency property.
    /// - Returns: The identifier for the IsFastRewindButtonVisible dependency property.
    public static var isFastRewindButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFastRewindButtonVisibleProperty())
        }
    }

    /// Identifies the IsFastRewindEnabled dependency property.
    /// - Returns: The identifier for the IsFastRewindEnabled dependency property.
    public static var isFastRewindEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFastRewindEnabledProperty())
        }
    }

    /// Identifies the IsFullWindowButtonVisible dependency property.
    /// - Returns: The identifier for the IsFullWindowButtonVisible dependency property.
    public static var isFullWindowButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFullWindowButtonVisibleProperty())
        }
    }

    /// Identifies the IsFullWindowEnabled dependency property.
    /// - Returns: The identifier for the IsFullWindowEnabled dependency property.
    public static var isFullWindowEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsFullWindowEnabledProperty())
        }
    }

    /// Identifies the IsPlaybackRateButtonVisible dependency property.
    /// - Returns: The identifier for the IsPlaybackRateButtonVisible dependency property.
    public static var isPlaybackRateButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsPlaybackRateButtonVisibleProperty())
        }
    }

    /// Identifies the IsPlaybackRateEnabled dependency property.
    /// - Returns: The identifier for the IsPlaybackRateEnabled dependency property.
    public static var isPlaybackRateEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsPlaybackRateEnabledProperty())
        }
    }

    /// Identifies the IsSeekBarVisible dependency property.
    /// - Returns: The identifier for the IsSeekBarVisible dependency property.
    public static var isSeekBarVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsSeekBarVisibleProperty())
        }
    }

    /// Identifies the IsSeekEnabled dependency property.
    /// - Returns: The identifier for the IsSeekEnabled dependency property.
    public static var isSeekEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsSeekEnabledProperty())
        }
    }

    /// Identifies the IsStopButtonVisible dependency property.
    /// - Returns: The identifier for the IsStopButtonVisible dependency property.
    public static var isStopButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsStopButtonVisibleProperty())
        }
    }

    /// Identifies the IsStopEnabled dependency property.
    /// - Returns: The identifier for the IsStopEnabled dependency property.
    public static var isStopEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsStopEnabledProperty())
        }
    }

    /// Identifies the IsVolumeButtonVisible dependency property.
    /// - Returns: The identifier for the IsVolumeButtonVisible dependency property.
    public static var isVolumeButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsVolumeButtonVisibleProperty())
        }
    }

    /// Identifies the IsVolumeEnabled dependency property.
    /// - Returns: The identifier for the IsVolumeEnabled dependency property.
    public static var isVolumeEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsVolumeEnabledProperty())
        }
    }

    /// Identifies the IsZoomButtonVisible dependency property.
    /// - Returns: The identifier for the IsZoomButtonVisible dependency property.
    public static var isZoomButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsZoomButtonVisibleProperty())
        }
    }

    /// Identifies the IsZoomEnabled dependency property.
    /// - Returns: The identifier for the IsZoomEnabled dependency property.
    public static var isZoomEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaTransportControlsStatics.get_IsZoomEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _imediaTransportControls_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls>? = nil

    internal var _imediaTransportControls: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls> {
        get throws {
            try _imediaTransportControls_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls.self)
            }
        }
    }

    private var _imediaTransportControls2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls2>? = nil

    internal var _imediaTransportControls2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls2> {
        get throws {
            try _imediaTransportControls2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls2.self)
            }
        }
    }

    private var _imediaTransportControls3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls3>? = nil

    internal var _imediaTransportControls3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls3> {
        get throws {
            try _imediaTransportControls3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls3.self)
            }
        }
    }

    private var _imediaTransportControls4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls4>? = nil

    internal var _imediaTransportControls4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls4> {
        get throws {
            try _imediaTransportControls4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls4.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControls>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _imediaTransportControls_storage?.release()
        _imediaTransportControls2_storage?.release()
        _imediaTransportControls3_storage?.release()
        _imediaTransportControls4_storage?.release()
    }

    private static var _imediaTransportControlsFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsFactory>? = nil

    internal static var _imediaTransportControlsFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsFactory> {
        get throws {
            try _imediaTransportControlsFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaTransportControls", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsFactory.iid)
            }
        }
    }

    private static var _imediaTransportControlsStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics4>? = nil

    internal static var _imediaTransportControlsStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics4> {
        get throws {
            try _imediaTransportControlsStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaTransportControls", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics4.iid)
            }
        }
    }

    private static var _imediaTransportControlsStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics3>? = nil

    internal static var _imediaTransportControlsStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics3> {
        get throws {
            try _imediaTransportControlsStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaTransportControls", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics3.iid)
            }
        }
    }

    private static var _imediaTransportControlsStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics2>? = nil

    internal static var _imediaTransportControlsStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics2> {
        get throws {
            try _imediaTransportControlsStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaTransportControls", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics2.iid)
            }
        }
    }

    private static var _imediaTransportControlsStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics>? = nil

    internal static var _imediaTransportControlsStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics> {
        get throws {
            try _imediaTransportControlsStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaTransportControls", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaTransportControlsStatics.iid)
            }
        }
    }
}