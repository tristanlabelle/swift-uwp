// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a rich text display overflow container. This element cannot have direct content. The only purpose of RichTextBlockOverflow is to display text content that does not fit in the bounds of a RichTextBlock or another RichTextBlockOverflow element.
public final class WindowsUIXamlControls_RichTextBlockOverflow: WindowsRuntime.WinRTImport<WindowsUIXamlControls_RichTextBlockOverflowProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_RichTextBlockOverflowProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflow members

    /// Gets a value that represents the offset in pixels from the top of the content to the baseline of the first paragraph. The baseline of the paragraph is the baseline of the first line in it.
    /// - Returns: The computed baseline for the first paragraph, or 0 if the RichTextBlockOverflow is empty.
    public var baselineOffset: Swift.Double {
        get throws {
            try _interop.get_BaselineOffset()
        }
    }

    /// Gets a TextPointer that indicates the end of content in the RichTextBlockOverflow.
    /// - Returns: A TextPointer that indicates the end of content in the RichTextBlockOverflow.
    public var contentEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentEnd())
        }
    }

    /// Gets the RichTextBlock content source of this RichTextBlockOverflow.
    /// - Returns: The content source for this RichTextBlockOverflow.
    public var contentSource: WindowsUIXamlControls_RichTextBlock {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentSource())
        }
    }

    /// Gets a TextPointer that indicates the start of content in the RichTextBlockOverflow.
    /// - Returns: A TextPointer that indicates the start of content in the RichTextBlockOverflow.
    public var contentStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentStart())
        }
    }

    /// Gets a value that indicates whether the RichTextBlockOverflow has content that extends beyond its bounds, that can provide content to an OverflowContentTarget element.
    /// - Returns: **True** if the RichTextBlockOverflow has content that extends beyond its bounds; otherwise, **false**.
    public var hasOverflowContent: Swift.Bool {
        get throws {
            try _interop.get_HasOverflowContent()
        }
    }

    /// Gets or sets a reference to another RichTextBlockOverflow that is the linked target for any text overflow from this RichTextBlockOverflow.
    /// - Returns: The target for overflow.
    public var overflowContentTarget: WindowsUIXamlControls_RichTextBlockOverflow {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OverflowContentTarget())
        }
    }

    /// Gets or sets a reference to another RichTextBlockOverflow that is the linked target for any text overflow from this RichTextBlockOverflow.
    /// - Returns: The target for overflow.
    public func overflowContentTarget(_ value: WindowsUIXamlControls_RichTextBlockOverflow?) throws {
        try _interop.put_OverflowContentTarget(value)
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a RichTextBlockOverflow.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public var padding: WindowsUIXaml_Thickness {
        get throws {
            try _interop.get_Padding()
        }
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a RichTextBlockOverflow.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public func padding(_ value: WindowsUIXaml_Thickness) throws {
        try _interop.put_Padding(value)
    }

    /// Returns a TextPointer text reference from a RichTextBlockOverflow by hit-testing a specific Point within the text display area.
    /// - Parameter point: The point to test.
    /// - Returns: The determined text reference.
    public func getPositionFromPoint(_ point: WindowsFoundation_Point) throws -> WindowsUIXamlDocuments_TextPointer {
        try COM.NullResult.unwrap(_interop.getPositionFromPoint(point))
    }

    /// Focuses the RichTextBlockOverflow, as if it were a conventionally focusable control.
    /// - Parameter value: Specifies the desired target for focus state, as a value of the enumeration.
    /// - Returns: **true** if focus was set to the RichTextBlockOverflow, or focus was already there. **false** if the RichTextBlockOverflow is not focusable.
    public func focus(_ value: WindowsUIXaml_FocusState) throws -> Swift.Bool {
        try _interop.focus(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflow2 members

    /// Gets or sets the maximum lines of text shown in the RichTextBlockOverflow.
    /// - Returns: The maximum lines of text shown in the RichTextBlockOverflow. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public var maxLines: Swift.Int32 {
        get throws {
            try _irichTextBlockOverflow2.get_MaxLines()
        }
    }

    /// Gets or sets the maximum lines of text shown in the RichTextBlockOverflow.
    /// - Returns: The maximum lines of text shown in the RichTextBlockOverflow. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public func maxLines(_ value: Swift.Int32) throws {
        try _irichTextBlockOverflow2.put_MaxLines(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflow3 members

    /// Gets a value that indicates whether the control has trimmed text that overflows the content area.
    /// - Returns: **true** if text is trimmed; otherwise, **false**.
    public var isTextTrimmed: Swift.Bool {
        get throws {
            try _irichTextBlockOverflow3.get_IsTextTrimmed()
        }
    }

    /// Occurs when the IsTextTrimmed property value has changed.
    public func isTextTrimmedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichTextBlockOverflow?, WindowsUIXamlControls_IsTextTrimmedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichTextBlockOverflow3.add_IsTextTrimmedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isTextTrimmedChanged)
    }

    public func isTextTrimmedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichTextBlockOverflow3.remove_IsTextTrimmedChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics2 members

    /// Identifies the MaxLines dependency property.
    /// - Returns: The identifier for the MaxLines dependency property.
    public static var maxLinesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockOverflowStatics2.get_MaxLinesProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics3 members

    /// Identifies the IsTextTrimmed dependency property.
    /// - Returns: The identifier for the IsTextTrimmed dependency property.
    public static var isTextTrimmedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockOverflowStatics3.get_IsTextTrimmedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockOverflowStatics members

    /// Identifies the HasOverflowContent dependency property.
    /// - Returns: The identifier for the HasOverflowContent dependency property.
    public static var hasOverflowContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockOverflowStatics.get_HasOverflowContentProperty())
        }
    }

    /// Identifies the OverflowContentTarget dependency property.
    /// - Returns: The identifier for the OverflowContentTarget dependency property.
    public static var overflowContentTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockOverflowStatics.get_OverflowContentTargetProperty())
        }
    }

    /// Identifies the Padding dependency property.
    /// - Returns: The identifier for the Padding dependency property.
    public static var paddingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockOverflowStatics.get_PaddingProperty())
        }
    }

    // MARK: Implementation details

    private var _irichTextBlockOverflow2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow2>? = nil

    internal var _irichTextBlockOverflow2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow2> {
        get throws {
            try _irichTextBlockOverflow2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow2.self)
            }
        }
    }

    private var _irichTextBlockOverflow3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow3>? = nil

    internal var _irichTextBlockOverflow3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow3> {
        get throws {
            try _irichTextBlockOverflow3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflow3.self)
            }
        }
    }

    deinit {
        _irichTextBlockOverflow2_storage?.release()
        _irichTextBlockOverflow3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlockOverflow", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _irichTextBlockOverflowStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics2>? = nil

    internal static var _irichTextBlockOverflowStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics2> {
        get throws {
            try _irichTextBlockOverflowStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlockOverflow", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics2.iid)
            }
        }
    }

    private static var _irichTextBlockOverflowStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics3>? = nil

    internal static var _irichTextBlockOverflowStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics3> {
        get throws {
            try _irichTextBlockOverflowStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlockOverflow", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics3.iid)
            }
        }
    }

    private static var _irichTextBlockOverflowStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics>? = nil

    internal static var _irichTextBlockOverflowStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics> {
        get throws {
            try _irichTextBlockOverflowStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlockOverflow", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockOverflowStatics.iid)
            }
        }
    }
}