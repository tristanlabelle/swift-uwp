// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a lightweight control for displaying small amounts of text.
public final class WindowsUIXamlControls_TextBlock: WindowsRuntime.WinRTImport<WindowsUIXamlControls_TextBlockProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_TextBlockProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock members

    /// Returns a value by which each line of text is offset from a baseline.
    /// - Returns: The amount by which each line of text is offset from the baseline, in device independent pixels. System.Double.NaN indicates that an optimal baseline offset is automatically calculated from the current font characteristics. The default is System.Double.NaN.
    public var baselineOffset: Swift.Double {
        get throws {
            try _interop.get_BaselineOffset()
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _interop.get_CharacterSpacing()
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _interop.put_CharacterSpacing(value)
    }

    /// Gets a TextPointer object for the end of text content in the TextBlock.
    /// - Returns: A TextPointer object for the end of text content in the TextBlock.
    public var contentEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentEnd())
        }
    }

    /// Gets a TextPointer object for the start of text content in the TextBlock.
    /// - Returns: A TextPointer object for the start of text content in the TextBlock.
    public var contentStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentStart())
        }
    }

    /// Gets or sets the preferred top-level font family for the text content in this element.
    /// - Returns: A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public var fontFamily: WindowsUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FontFamily())
        }
    }

    /// Gets or sets the preferred top-level font family for the text content in this element.
    /// - Returns: A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public func fontFamily(_ value: WindowsUIXamlMedia_FontFamily?) throws {
        try _interop.put_FontFamily(value)
    }

    /// Gets or sets the font size for the text content in this element.
    /// - Returns: A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public var fontSize: Swift.Double {
        get throws {
            try _interop.get_FontSize()
        }
    }

    /// Gets or sets the font size for the text content in this element.
    /// - Returns: A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public func fontSize(_ value: Swift.Double) throws {
        try _interop.put_FontSize(value)
    }

    /// Gets or sets the font stretch for the text content in this element.
    /// - Returns: The requested font stretch, as a FontStretch constant. The default is Normal.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _interop.get_FontStretch()
        }
    }

    /// Gets or sets the font stretch for the text content in this element.
    /// - Returns: The requested font stretch, as a FontStretch constant. The default is Normal.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _interop.put_FontStretch(value)
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: The requested font style, which is a FontStyle enumeration value. The default is Normal.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _interop.get_FontStyle()
        }
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: The requested font style, which is a FontStyle enumeration value. The default is Normal.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _interop.put_FontStyle(value)
    }

    /// Gets or sets the top-level font weight for the TextBlock.
    /// - Returns: The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _interop.get_FontWeight()
        }
    }

    /// Gets or sets the top-level font weight for the TextBlock.
    /// - Returns: The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _interop.put_FontWeight(value)
    }

    /// Gets or sets the Brush to apply to the text contents of the TextBlock.
    /// - Returns: The brush used to apply to the text content. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for **Light** theme) or White (for **Dark** theme) for a TextBlock element in UI.
    public var foreground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Foreground())
        }
    }

    /// Gets or sets the Brush to apply to the text contents of the TextBlock.
    /// - Returns: The brush used to apply to the text content. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for **Light** theme) or White (for **Dark** theme) for a TextBlock element in UI.
    public func foreground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _interop.put_Foreground(value)
    }

    /// Gets the collection of inline text elements within a TextBlock.
    /// - Returns: A collection that holds all inline text elements from the TextBlock. The default is an empty collection.
    public var inlines: WindowsUIXamlDocuments_InlineCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Inlines())
        }
    }

    /// Gets or sets a value that indicates whether text selection is enabled in the TextBlock, either through user action or calling selection-related API.
    /// - Returns: **true** if text selection is enabled; otherwise, **false**.
    public var isTextSelectionEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsTextSelectionEnabled()
        }
    }

    /// Gets or sets a value that indicates whether text selection is enabled in the TextBlock, either through user action or calling selection-related API.
    /// - Returns: **true** if text selection is enabled; otherwise, **false**.
    public func isTextSelectionEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsTextSelectionEnabled(value)
    }

    /// Gets or sets the height of each line of content.
    /// - Returns: The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public var lineHeight: Swift.Double {
        get throws {
            try _interop.get_LineHeight()
        }
    }

    /// Gets or sets the height of each line of content.
    /// - Returns: The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public func lineHeight(_ value: Swift.Double) throws {
        try _interop.put_LineHeight(value)
    }

    /// Gets or sets a value that indicates how a line box is determined for each line of text in the TextBlock.
    /// - Returns: A value that indicates how a line box is determined for each line of text in the TextBlock. The default is **MaxHeight**.
    public var lineStackingStrategy: WindowsUIXaml_LineStackingStrategy {
        get throws {
            try _interop.get_LineStackingStrategy()
        }
    }

    /// Gets or sets a value that indicates how a line box is determined for each line of text in the TextBlock.
    /// - Returns: A value that indicates how a line box is determined for each line of text in the TextBlock. The default is **MaxHeight**.
    public func lineStackingStrategy(_ value: WindowsUIXaml_LineStackingStrategy) throws {
        try _interop.put_LineStackingStrategy(value)
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a TextBlock.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public var padding: WindowsUIXaml_Thickness {
        get throws {
            try _interop.get_Padding()
        }
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a TextBlock.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public func padding(_ value: WindowsUIXaml_Thickness) throws {
        try _interop.put_Padding(value)
    }

    /// Gets a text range of selected text.
    /// - Returns: A text range of the selected text.
    public var selectedText: Swift.String {
        get throws {
            try _interop.get_SelectedText()
        }
    }

    /// Gets the end position of the text selected in the TextBlock.
    /// - Returns: An object that represents the selection end, or null if no selection exists.
    public var selectionEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SelectionEnd())
        }
    }

    /// Gets the starting position of the text selected in the TextBlock.
    /// - Returns: An object that represents the selection start, or null if no selection exists.
    public var selectionStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SelectionStart())
        }
    }

    /// Gets or sets the text contents of a TextBlock.
    /// - Returns: A string that specifies the text contents of this TextBlock. The default is an empty string.
    public var text: Swift.String {
        get throws {
            try _interop.get_Text()
        }
    }

    /// Gets or sets the text contents of a TextBlock.
    /// - Returns: A string that specifies the text contents of this TextBlock. The default is an empty string.
    public func text(_ value: Swift.String) throws {
        try _interop.put_Text(value)
    }

    /// Gets or sets a value that indicates the horizontal alignment of text content.
    /// - Returns: The text alignment. The default is **Left**.
    public var textAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _interop.get_TextAlignment()
        }
    }

    /// Gets or sets a value that indicates the horizontal alignment of text content.
    /// - Returns: The text alignment. The default is **Left**.
    public func textAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _interop.put_TextAlignment(value)
    }

    /// Gets or sets the text trimming behavior to employ when content overflows the content area.
    /// - Returns: One of the TextTrimming values that specifies the text trimming behavior to employ. The default is **None**.
    public var textTrimming: WindowsUIXaml_TextTrimming {
        get throws {
            try _interop.get_TextTrimming()
        }
    }

    /// Gets or sets the text trimming behavior to employ when content overflows the content area.
    /// - Returns: One of the TextTrimming values that specifies the text trimming behavior to employ. The default is **None**.
    public func textTrimming(_ value: WindowsUIXaml_TextTrimming) throws {
        try _interop.put_TextTrimming(value)
    }

    /// Gets or sets how the TextBlock wraps text.
    /// - Returns: A value that indicates how the TextBlock wraps text. The default is **NoWrap**.
    public var textWrapping: WindowsUIXaml_TextWrapping {
        get throws {
            try _interop.get_TextWrapping()
        }
    }

    /// Gets or sets how the TextBlock wraps text.
    /// - Returns: A value that indicates how the TextBlock wraps text. The default is **NoWrap**.
    public func textWrapping(_ value: WindowsUIXaml_TextWrapping) throws {
        try _interop.put_TextWrapping(value)
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    public func contextMenuOpening(adding handler: WindowsUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextMenuOpening)
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ContextMenuOpening(token)
    }

    /// Occurs when the text selection has changed.
    public func selectionChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SelectionChanged(token)
    }

    /// Selects the entire contents in the TextBlock.
    public func selectAll() throws {
        try _interop.selectAll()
    }

    /// Selects a range of text in the TextBlock.
    /// - Parameter start: An object that represents the start of the range to select.
    /// - Parameter end: An object that represents the end of the range to select.
    public func select(_ start: WindowsUIXamlDocuments_TextPointer?, _ end: WindowsUIXamlDocuments_TextPointer?) throws {
        try _interop.select(start, end)
    }

    /// Focuses the TextBlock, as if it were a conventionally focusable control.
    /// - Parameter value: Specifies the desired target for focus state, as a value of the enumeration.
    /// - Returns: **true** if focus was set to the TextBlock, or focus was already there. **false** if the TextBlock is not focusable.
    public func focus(_ value: WindowsUIXaml_FocusState) throws -> Swift.Bool {
        try _interop.focus(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock2 members

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public var isColorFontEnabled: Swift.Bool {
        get throws {
            try _itextBlock2.get_IsColorFontEnabled()
        }
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public func isColorFontEnabled(_ value: Swift.Bool) throws {
        try _itextBlock2.put_IsColorFontEnabled(value)
    }

    /// Gets or sets the maximum number of lines of text shown in the TextBlock.
    /// - Returns: The maximum number of lines of text shown in the TextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public var maxLines: Swift.Int32 {
        get throws {
            try _itextBlock2.get_MaxLines()
        }
    }

    /// Gets or sets the maximum number of lines of text shown in the TextBlock.
    /// - Returns: The maximum number of lines of text shown in the TextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public func maxLines(_ value: Swift.Int32) throws {
        try _itextBlock2.put_MaxLines(value)
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    /// - Returns: A value of the enumeration that indicates how the font is modified to align at different sizes. The default is **None**.
    public var opticalMarginAlignment: WindowsUIXaml_OpticalMarginAlignment {
        get throws {
            try _itextBlock2.get_OpticalMarginAlignment()
        }
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    /// - Returns: A value of the enumeration that indicates how the font is modified to align at different sizes. The default is **None**.
    public func opticalMarginAlignment(_ value: WindowsUIXaml_OpticalMarginAlignment) throws {
        try _itextBlock2.put_OpticalMarginAlignment(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the system uses base text styles to supply a runtime value for apps (unless you specifically override that style). The practical default is a brush using the theme resource **TextSelectionHighlightThemeColor**.
    public var selectionHighlightColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_itextBlock2.get_SelectionHighlightColor())
        }
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the system uses base text styles to supply a runtime value for apps (unless you specifically override that style). The practical default is a brush using the theme resource **TextSelectionHighlightThemeColor**.
    public func selectionHighlightColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _itextBlock2.put_SelectionHighlightColor(value)
    }

    /// Gets or sets a value that indicates how the line box height is determined for each line of text in the TextBlock.
    /// - Returns: A value that indicates how the line box height is determined for each line of text in the TextBlock. The default is **Full**.
    public var textLineBounds: WindowsUIXaml_TextLineBounds {
        get throws {
            try _itextBlock2.get_TextLineBounds()
        }
    }

    /// Gets or sets a value that indicates how the line box height is determined for each line of text in the TextBlock.
    /// - Returns: A value that indicates how the line box height is determined for each line of text in the TextBlock. The default is **Full**.
    public func textLineBounds(_ value: WindowsUIXaml_TextLineBounds) throws {
        try _itextBlock2.put_TextLineBounds(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the TextBlock.
    /// - Returns: A value that indicates how the reading order is determined for the TextBlock. The default is **DetectFromContent**.
    public var textReadingOrder: WindowsUIXaml_TextReadingOrder {
        get throws {
            try _itextBlock2.get_TextReadingOrder()
        }
    }

    /// Gets or sets a value that indicates how the reading order is determined for the TextBlock.
    /// - Returns: A value that indicates how the reading order is determined for the TextBlock. The default is **DetectFromContent**.
    public func textReadingOrder(_ value: WindowsUIXaml_TextReadingOrder) throws {
        try _itextBlock2.put_TextReadingOrder(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock3 members

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _itextBlock3.get_IsTextScaleFactorEnabled()
        }
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _itextBlock3.put_IsTextScaleFactorEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock4 members

    /// Returns a mask that represents the alpha channel of the text as a CompositionBrush.
    /// - Returns: A mask that represents the alpha channel of the text in a TextBlock.
    public func getAlphaMask() throws -> WindowsUIComposition_CompositionBrush {
        try COM.NullResult.unwrap(_itextBlock4.getAlphaMask())
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock5 members

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public var textDecorations: WindowsUIText_TextDecorations {
        get throws {
            try _itextBlock5.get_TextDecorations()
        }
    }

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public func textDecorations(_ value: WindowsUIText_TextDecorations) throws {
        try _itextBlock5.put_TextDecorations(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock6 members

    /// Gets or sets a value that indicates how text is aligned in the TextBlock.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public var horizontalTextAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _itextBlock6.get_HorizontalTextAlignment()
        }
    }

    /// Gets or sets a value that indicates how text is aligned in the TextBlock.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public func horizontalTextAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _itextBlock6.put_HorizontalTextAlignment(value)
    }

    /// Gets a value that indicates whether the control has trimmed text that overflows the content area.
    /// - Returns: **true** if text is trimmed; otherwise, **false**.
    public var isTextTrimmed: Swift.Bool {
        get throws {
            try _itextBlock6.get_IsTextTrimmed()
        }
    }

    /// Gets the collection of text highlights.
    /// - Returns: The collection of text highlights.
    public var textHighlighters: WindowsFoundationCollections_IVector<WindowsUIXamlDocuments_TextHighlighter?> {
        get throws {
            try COM.NullResult.unwrap(_itextBlock6.get_TextHighlighters())
        }
    }

    /// Occurs when the IsTextTrimmed property value has changed.
    public func isTextTrimmedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBlock?, WindowsUIXamlControls_IsTextTrimmedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBlock6.add_IsTextTrimmedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isTextTrimmedChanged)
    }

    public func isTextTrimmedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBlock6.remove_IsTextTrimmedChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlock7 members

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_itextBlock7.get_SelectionFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _itextBlock7.put_SelectionFlyout(value)
    }

    /// Copies the selected content to the Windows clipboard.
    public func copySelectionToClipboard() throws {
        try _itextBlock7.copySelectionToClipboard()
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics2 members

    /// Identifies the IsColorFontEnabled dependency property.
    /// - Returns: The identifier for the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_IsColorFontEnabledProperty())
        }
    }

    /// Identifies the MaxLines dependency property.
    /// - Returns: The identifier for the MaxLines dependency property.
    public static var maxLinesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_MaxLinesProperty())
        }
    }

    /// Identifies the OpticalMarginAlignment dependency property.
    /// - Returns: The identifier for the OpticalMarginAlignment dependency property.
    public static var opticalMarginAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_OpticalMarginAlignmentProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    /// - Returns: The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_SelectionHighlightColorProperty())
        }
    }

    /// Identifies the TextLineBounds dependency property.
    /// - Returns: The identifier for the TextLineBounds dependency property.
    public static var textLineBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_TextLineBoundsProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    /// - Returns: The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics2.get_TextReadingOrderProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics6 members

    /// Identifies the HorizontalTextAlignment dependency property.
    /// - Returns: The identifier for the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics6.get_HorizontalTextAlignmentProperty())
        }
    }

    /// Identifies the IsTextTrimmed dependency property.
    /// - Returns: The identifier for the IsTextTrimmed dependency property.
    public static var isTextTrimmedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics6.get_IsTextTrimmedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics7 members

    /// Identifies the SelectionFlyout dependency property.
    /// - Returns: The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics7.get_SelectionFlyoutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics members

    /// Identifies the CharacterSpacing dependency property.
    /// - Returns: The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the FontFamily  dependency property.
    /// - Returns: The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontSize  dependency property.
    /// - Returns: The identifier for the FontSize dependency property.
    public static var fontSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontStretch  dependency property.
    /// - Returns: The identifier for the FontStretch dependency property.
    public static var fontStretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStyle  dependency property.
    /// - Returns: The identifier for the FontStyle dependency property.
    public static var fontStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontWeight  dependency property.
    /// - Returns: The identifier for the FontWeight dependency property.
    public static var fontWeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the Foreground  dependency property.
    /// - Returns: The identifier for the Foreground dependency property.
    public static var foregroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the IsTextSelectionEnabled dependency property.
    /// - Returns: The identifier for the IsTextSelectionEnabled dependency property.
    public static var isTextSelectionEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_IsTextSelectionEnabledProperty())
        }
    }

    /// Identifies the LineHeight  dependency property.
    /// - Returns: The identifier for the LineHeight dependency property.
    public static var lineHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_LineHeightProperty())
        }
    }

    /// Identifies the LineStackingStrategy  dependency property.
    /// - Returns: The identifier for the LineStackingStrategy dependency property.
    public static var lineStackingStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_LineStackingStrategyProperty())
        }
    }

    /// Identifies the Padding  dependency property.
    /// - Returns: The identifier for the Padding dependency property.
    public static var paddingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_PaddingProperty())
        }
    }

    /// Identifies the SelectedText dependency property.
    /// - Returns: The identifier for the SelectedText dependency property.
    public static var selectedTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_SelectedTextProperty())
        }
    }

    /// Identifies the TextAlignment  dependency property.
    /// - Returns: The identifier for the TextAlignment dependency property.
    public static var textAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextAlignmentProperty())
        }
    }

    /// Identifies the Text  dependency property.
    /// - Returns: The identifier of the Text dependency property.
    public static var textProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextProperty())
        }
    }

    /// Identifies the TextTrimming dependency property.
    /// - Returns: The identifier of the TextTrimming dependency property.
    public static var textTrimmingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextTrimmingProperty())
        }
    }

    /// Identifies the TextWrapping  dependency property.
    /// - Returns: The identifier of the TextWrapping dependency property.
    public static var textWrappingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextWrappingProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics5 members

    /// Identifies the **TextDecorations** dependency property.
    /// - Returns: The identifier for the **TextDecorations** dependency property.
    public static var textDecorationsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics5.get_TextDecorationsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBlockStatics3 members

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    /// - Returns: The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics3.get_IsTextScaleFactorEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _itextBlock2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock2>? = nil

    internal var _itextBlock2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock2> {
        get throws {
            try _itextBlock2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock2.self)
            }
        }
    }

    private var _itextBlock3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock3>? = nil

    internal var _itextBlock3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock3> {
        get throws {
            try _itextBlock3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock3.self)
            }
        }
    }

    private var _itextBlock4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock4>? = nil

    internal var _itextBlock4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock4> {
        get throws {
            try _itextBlock4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock4.self)
            }
        }
    }

    private var _itextBlock5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock5>? = nil

    internal var _itextBlock5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock5> {
        get throws {
            try _itextBlock5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock5.self)
            }
        }
    }

    private var _itextBlock6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock6>? = nil

    internal var _itextBlock6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock6> {
        get throws {
            try _itextBlock6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock6.self)
            }
        }
    }

    private var _itextBlock7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock7>? = nil

    internal var _itextBlock7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlock7> {
        get throws {
            try _itextBlock7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBlock7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBlock7.self)
            }
        }
    }

    deinit {
        _itextBlock2_storage?.release()
        _itextBlock3_storage?.release()
        _itextBlock4_storage?.release()
        _itextBlock5_storage?.release()
        _itextBlock6_storage?.release()
        _itextBlock7_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _itextBlockStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics2>? = nil

    internal static var _itextBlockStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics2> {
        get throws {
            try _itextBlockStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics2.iid)
            }
        }
    }

    private static var _itextBlockStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics6>? = nil

    internal static var _itextBlockStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics6> {
        get throws {
            try _itextBlockStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics6.iid)
            }
        }
    }

    private static var _itextBlockStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics7>? = nil

    internal static var _itextBlockStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics7> {
        get throws {
            try _itextBlockStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics7.iid)
            }
        }
    }

    private static var _itextBlockStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics>? = nil

    internal static var _itextBlockStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics> {
        get throws {
            try _itextBlockStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics.iid)
            }
        }
    }

    private static var _itextBlockStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics5>? = nil

    internal static var _itextBlockStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics5> {
        get throws {
            try _itextBlockStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics5.iid)
            }
        }
    }

    private static var _itextBlockStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics3>? = nil

    internal static var _itextBlockStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics3> {
        get throws {
            try _itextBlockStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBlockStatics3.iid)
            }
        }
    }
}