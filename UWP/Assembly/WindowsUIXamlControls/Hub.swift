// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that displays groups of content in a panning view.
open class WindowsUIXamlControls_Hub: WindowsRuntime.WinRTComposableClass, WindowsUIXamlControls_ISemanticZoomInformationProtocol {
    // MARK: Windows.UI.Xaml.Controls.IHubFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Hub.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ihubFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IHub members

    /// Gets or sets the index of the hub section to show first when the Hub is initialized.
    /// - Returns: The index of the hub section to show first when the Hub is initialized.
    public var defaultSectionIndex: Swift.Int32 {
        get throws {
            try _ihub.get_DefaultSectionIndex()
        }
    }

    /// Gets or sets the index of the hub section to show first when the Hub is initialized.
    /// - Returns: The index of the hub section to show first when the Hub is initialized.
    public func defaultSectionIndex(_ value: Swift.Int32) throws {
        try _ihub.put_DefaultSectionIndex(value)
    }

    /// Gets or sets the content for the hub header.
    /// - Returns: The content of the hub header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ihub.get_Header())
        }
    }

    /// Gets or sets the content for the hub header.
    /// - Returns: The content of the hub header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _ihub.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the hub header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ihub.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the hub header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ihub.put_HeaderTemplate(value)
    }

    /// Gets or sets the orientation of a Hub.
    /// - Returns: One of the Orientation values. The default is **Horizontal**.
    public var orientation: WindowsUIXamlControls_Orientation {
        get throws {
            try _ihub.get_Orientation()
        }
    }

    /// Gets or sets the orientation of a Hub.
    /// - Returns: One of the Orientation values. The default is **Horizontal**.
    public func orientation(_ value: WindowsUIXamlControls_Orientation) throws {
        try _ihub.put_Orientation(value)
    }

    /// Gets a collection of the headers of the hub sections.
    /// - Returns: The headers of the hub sections. The default is an empty collection.
    public var sectionHeaders: WindowsFoundationCollections_IObservableVector<WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_ihub.get_SectionHeaders())
        }
    }

    /// Gets all the hub sections in the Hub.
    /// - Returns: All the hub sections in the Hub. The default is an empty collection.
    public var sections: WindowsFoundationCollections_IVector<WindowsUIXamlControls_HubSection?> {
        get throws {
            try COM.NullResult.unwrap(_ihub.get_Sections())
        }
    }

    /// Gets the hub sections currently on the screen.
    /// - Returns: The hub sections currently on the screen.
    public var sectionsInView: WindowsFoundationCollections_IVector<WindowsUIXamlControls_HubSection?> {
        get throws {
            try COM.NullResult.unwrap(_ihub.get_SectionsInView())
        }
    }

    /// Occurs when a section header is clicked and the section's IsHeaderInteractive property is **true**.
    public func sectionHeaderClick(adding handler: WindowsUIXamlControls_HubSectionHeaderClickEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihub.add_SectionHeaderClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sectionHeaderClick)
    }

    public func sectionHeaderClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihub.remove_SectionHeaderClick(token)
    }

    /// Occurs when the SectionsInView collection changes.
    public func sectionsInViewChanged(adding handler: WindowsUIXamlControls_SectionsInViewChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihub.add_SectionsInViewChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sectionsInViewChanged)
    }

    public func sectionsInViewChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihub.remove_SectionsInViewChanged(token)
    }

    /// Scrolls the hub to bring the specified hub section into view.
    /// - Parameter section: The hub section to bring into view.
    public func scrollToSection(_ section: WindowsUIXamlControls_HubSection?) throws {
        try _ihub.scrollToSection(section)
    }

    // MARK: Windows.UI.Xaml.Controls.ISemanticZoomInformation members

    /// Gets or sets a value that indicates whether the Hub instance is the active view in its owning SemanticZoom.
    /// - Returns: **true** if the Hub is the active view; otherwise, **false**.
    public var isActiveView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsActiveView()
        }
    }

    /// Gets or sets a value that indicates whether the Hub instance is the active view in its owning SemanticZoom.
    /// - Returns: **true** if the Hub is the active view; otherwise, **false**.
    public func isActiveView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsActiveView(value)
    }

    /// Gets or sets a value that indicates whether the Hub instance is the zoomed-in view in its owning SemanticZoom.
    /// - Returns: **true** if the Hub is the zoomed-in view; otherwise, **false**.
    public var isZoomedInView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsZoomedInView()
        }
    }

    /// Gets or sets a value that indicates whether the Hub instance is the zoomed-in view in its owning SemanticZoom.
    /// - Returns: **true** if the Hub is the zoomed-in view; otherwise, **false**.
    public func isZoomedInView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsZoomedInView(value)
    }

    /// Gets or sets the SemanticZoom instance that hosts the Hub.
    /// - Returns: The SemanticZoom instance that hosts this Hub, or **null** if the Hub is not hosted in a SemanticZoom control.
    public var semanticZoomOwner: WindowsUIXamlControls_SemanticZoom {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomInformation.get_SemanticZoomOwner())
        }
    }

    /// Gets or sets the SemanticZoom instance that hosts the Hub.
    /// - Returns: The SemanticZoom instance that hosts this Hub, or **null** if the Hub is not hosted in a SemanticZoom control.
    public func semanticZoomOwner(_ value: WindowsUIXamlControls_SemanticZoom?) throws {
        try _isemanticZoomInformation.put_SemanticZoomOwner(value)
    }

    /// Initializes the changes to related aspects of presentation (such as scrolling UI or state) when the overall view for a SemanticZoom is about to change.
    public func initializeViewChange() throws {
        try _isemanticZoomInformation.initializeViewChange()
    }

    /// Changes related aspects of presentation when the overall view for a SemanticZoom changes.
    public func completeViewChange() throws {
        try _isemanticZoomInformation.completeViewChange()
    }

    /// Forces content in the view to scroll until the item that's specified by SemanticZoomLocation is visible. Also focuses the item if it finds the item.
    /// - Parameter item: The item in the view to scroll to.
    public func makeVisible(_ item: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.makeVisible(item)
    }

    /// Initializes item-wise operations that are related to a view change when the Hub instance is the source view and the pending destination view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeFrom(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeFrom(source, destination)
    }

    /// Initializes item-wise operations that are related to a view change when the source view is a different view and the pending destination view is the Hub instance.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeTo(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeTo(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the Hub instance is the source view and the new view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeFrom(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeFrom(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the Hub instance is the destination view and the source view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeTo(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeTo(source, destination)
    }

    // MARK: Windows.UI.Xaml.Controls.IHubStatics members

    /// Identifies the DefaultSectionIndex dependency property.
    /// - Returns: The identifier for the DefaultSectionIndex dependency property.
    public static var defaultSectionIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_DefaultSectionIndexProperty())
        }
    }

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsActiveView dependency property.
    /// - Returns: The identifier for the IsActiveView dependency property.
    public static var isActiveViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_IsActiveViewProperty())
        }
    }

    /// Identifies the IsZoomedInView dependency property.
    /// - Returns: The identifier for the IsZoomedInView dependency property.
    public static var isZoomedInViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_IsZoomedInViewProperty())
        }
    }

    /// Identifies the Orientation dependency property.
    /// - Returns: The identifier for the Orientation dependency property.
    public static var orientationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_OrientationProperty())
        }
    }

    /// Identifies the SemanticZoomOwner dependency property.
    /// - Returns: The identifier for the SemanticZoomOwner dependency property.
    public static var semanticZoomOwnerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihubStatics.get_SemanticZoomOwnerProperty())
        }
    }

    // MARK: Implementation details

    private var _ihub_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHub>? = nil

    internal var _ihub: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHub> {
        get throws {
            try _ihub_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IHub.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IHub.self)
            }
        }
    }

    private var _isemanticZoomInformation_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation>? = nil

    internal var _isemanticZoomInformation: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation> {
        get throws {
            try _isemanticZoomInformation_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IHub>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ihub_storage?.release()
        _isemanticZoomInformation_storage?.release()
    }

    private static var _ihubFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHubFactory>? = nil

    internal static var _ihubFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHubFactory> {
        get throws {
            try _ihubFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Hub", id: CWinRT.SWRT_WindowsUIXamlControls_IHubFactory.iid)
            }
        }
    }

    private static var _ihubStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHubStatics>? = nil

    internal static var _ihubStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHubStatics> {
        get throws {
            try _ihubStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Hub", id: CWinRT.SWRT_WindowsUIXamlControls_IHubStatics.iid)
            }
        }
    }
}