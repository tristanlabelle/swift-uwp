// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the infrastructure for the ListView and GridView classes.
open class WindowsUIXamlControls_ListViewBase: WindowsRuntime.WinRTComposableClass, WindowsUIXamlControls_ISemanticZoomInformationProtocol {
    // MARK: Windows.UI.Xaml.Controls.IListViewBaseFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_ListViewBase.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ilistViewBaseFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase members

    /// Gets or sets a value that indicates whether items in the view can be dragged as data payload.
    /// - Returns: **True** if items in the view can be dragged as data payload; otherwise, **false**. The default is **false**.
    public var canDragItems: Swift.Bool {
        get throws {
            try _ilistViewBase.get_CanDragItems()
        }
    }

    /// Gets or sets a value that indicates whether items in the view can be dragged as data payload.
    /// - Returns: **True** if items in the view can be dragged as data payload; otherwise, **false**. The default is **false**.
    public func canDragItems(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_CanDragItems(value)
    }

    /// Gets or sets a value that indicates whether items in the view can be reordered through user interaction.
    /// - Returns: **True** if items in the view can be reordered through user interaction; otherwise, **false**. The default is **false**.
    public var canReorderItems: Swift.Bool {
        get throws {
            try _ilistViewBase.get_CanReorderItems()
        }
    }

    /// Gets or sets a value that indicates whether items in the view can be reordered through user interaction.
    /// - Returns: **True** if items in the view can be reordered through user interaction; otherwise, **false**. The default is **false**.
    public func canReorderItems(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_CanReorderItems(value)
    }

    /// Gets or sets the amount of data to fetch for virtualizing/prefetch operations.
    /// - Returns: The amount of data to fetch per interval, in pages. 
    public var dataFetchSize: Swift.Double {
        get throws {
            try _ilistViewBase.get_DataFetchSize()
        }
    }

    /// Gets or sets the amount of data to fetch for virtualizing/prefetch operations.
    /// - Returns: The amount of data to fetch per interval, in pages. 
    public func dataFetchSize(_ value: Swift.Double) throws {
        try _ilistViewBase.put_DataFetchSize(value)
    }

    /// Gets or sets the content for the list header.
    /// - Returns: The content of the list header. The default value is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_Header())
        }
    }

    /// Gets or sets the content for the list header.
    /// - Returns: The content of the list header. The default value is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the view header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the view header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ilistViewBase.put_HeaderTemplate(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to the view header.
    /// - Returns: The collection of Transition style elements that apply to the list header.
    public var headerTransitions: WindowsUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_HeaderTransitions())
        }
    }

    /// Gets or sets the collection of Transition style elements that apply to the view header.
    /// - Returns: The collection of Transition style elements that apply to the list header.
    public func headerTransitions(_ value: WindowsUIXamlMediaAnimation_TransitionCollection?) throws {
        try _ilistViewBase.put_HeaderTransitions(value)
    }

    /// Gets or sets the threshold range that governs when the ListViewBase class will begin to prefetch more items.
    /// - Returns: The loading threshold, in terms of pages.
    public var incrementalLoadingThreshold: Swift.Double {
        get throws {
            try _ilistViewBase.get_IncrementalLoadingThreshold()
        }
    }

    /// Gets or sets the threshold range that governs when the ListViewBase class will begin to prefetch more items.
    /// - Returns: The loading threshold, in terms of pages.
    public func incrementalLoadingThreshold(_ value: Swift.Double) throws {
        try _ilistViewBase.put_IncrementalLoadingThreshold(value)
    }

    /// Gets or sets a value that indicates the conditions for prefetch operations by the ListViewBase class.
    /// - Returns: An enumeration value that indicates the conditions that trigger prefetch operations. The default is **Edge**.
    public var incrementalLoadingTrigger: WindowsUIXamlControls_IncrementalLoadingTrigger {
        get throws {
            try _ilistViewBase.get_IncrementalLoadingTrigger()
        }
    }

    /// Gets or sets a value that indicates the conditions for prefetch operations by the ListViewBase class.
    /// - Returns: An enumeration value that indicates the conditions that trigger prefetch operations. The default is **Edge**.
    public func incrementalLoadingTrigger(_ value: WindowsUIXamlControls_IncrementalLoadingTrigger) throws {
        try _ilistViewBase.put_IncrementalLoadingTrigger(value)
    }

    /// Gets or sets a value that indicates whether items in the view fire an ItemClick event in response to interaction.
    /// - Returns: **true** if interaction fires an ItemClick event; otherwise, **false**. The default is **false**.
    public var isItemClickEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase.get_IsItemClickEnabled()
        }
    }

    /// Gets or sets a value that indicates whether items in the view fire an ItemClick event in response to interaction.
    /// - Returns: **true** if interaction fires an ItemClick event; otherwise, **false**. The default is **false**.
    public func isItemClickEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_IsItemClickEnabled(value)
    }

    /// Gets or sets a value that indicates whether the view supports discrete input processing for a *swipe* interaction.
    /// - Returns: **true** if discrete input processing for *swipe* interactions is enabled; otherwise, **false**. The default is **true**.
    public var isSwipeEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase.get_IsSwipeEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the view supports discrete input processing for a *swipe* interaction.
    /// - Returns: **true** if discrete input processing for *swipe* interactions is enabled; otherwise, **false**. The default is **true**.
    public func isSwipeEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_IsSwipeEnabled(value)
    }

    /// Gets the currently selected items.
    /// - Returns: A collection of the currently selected items. The default is an empty collection.
    public var selectedItems: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_SelectedItems())
        }
    }

    /// Gets or sets the selection behavior for a ListViewBase instance.
    /// - Returns: One of the ListViewSelectionMode enumeration values. The default is **Single** selection.
    public var selectionMode: WindowsUIXamlControls_ListViewSelectionMode {
        get throws {
            try _ilistViewBase.get_SelectionMode()
        }
    }

    /// Gets or sets the selection behavior for a ListViewBase instance.
    /// - Returns: One of the ListViewSelectionMode enumeration values. The default is **Single** selection.
    public func selectionMode(_ value: WindowsUIXamlControls_ListViewSelectionMode) throws {
        try _ilistViewBase.put_SelectionMode(value)
    }

    /// Occurs when a drag operation that involves one of the items in the view is initiated.
    public func dragItemsStarting(adding handler: WindowsUIXamlControls_DragItemsStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_DragItemsStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragItemsStarting)
    }

    public func dragItemsStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_DragItemsStarting(token)
    }

    /// Occurs when an item in the list view receives an interaction, and the IsItemClickEnabled property is **true**.
    public func itemClick(adding handler: WindowsUIXamlControls_ItemClickEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_ItemClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: itemClick)
    }

    public func itemClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_ItemClick(token)
    }

    /// Scrolls the list to bring the specified data item into view.
    /// - Parameter item: The data item to bring into view.
    public func scrollIntoView(_ item: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase.scrollIntoView(item)
    }

    /// Selects all the items in a view.
    public func selectAll() throws {
        try _ilistViewBase.selectAll()
    }

    /// Initiates the asynchronous request to load more data items, in accordance with the active incremental loading settings.
    /// - Returns: When the operation completes, returns a LoadMoreItemsResult payload.
    public func loadMoreItemsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlData_LoadMoreItemsResult> {
        try COM.NullResult.unwrap(_ilistViewBase.loadMoreItemsAsync())
    }

    /// Scrolls the list to bring the specified data item into view with the specified alignment.
    /// - Parameter item: The data item to bring into view.
    /// - Parameter alignment: An enumeration value that specifies whether the item uses **Default** or **Leading** alignment.
    public func scrollIntoView(_ item: WindowsRuntime.IInspectable?, _ alignment: WindowsUIXamlControls_ScrollIntoViewAlignment) throws {
        try _ilistViewBase.scrollIntoViewWithAlignment(item, alignment)
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase2 members

    /// Gets or sets the content for the list footer.
    /// - Returns: The content of the list footer. The default is **null**.
    public var footer: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase2.get_Footer())
        }
    }

    /// Gets or sets the content for the list footer.
    /// - Returns: The content of the list footer. The default is **null**.
    public func footer(_ value: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase2.put_Footer(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the view footer.
    /// - Returns: The template that specifies the visualization of the footer object. The default is **null**.
    public var footerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase2.get_FooterTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the view footer.
    /// - Returns: The template that specifies the visualization of the footer object. The default is **null**.
    public func footerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ilistViewBase2.put_FooterTemplate(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to the view footer.
    /// - Returns: The collection of Transition style elements that apply to the list footer.
    public var footerTransitions: WindowsUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase2.get_FooterTransitions())
        }
    }

    /// Gets or sets the collection of Transition style elements that apply to the view footer.
    /// - Returns: The collection of Transition style elements that apply to the list footer.
    public func footerTransitions(_ value: WindowsUIXamlMediaAnimation_TransitionCollection?) throws {
        try _ilistViewBase2.put_FooterTransitions(value)
    }

    /// Gets or sets a value that indicates whether the view shows placeholder UI for items during scrolling.
    /// - Returns: **true** if the view shows placeholder UI for items during scrolling; otherwise, **false**. The default is **true**.
    public var showsScrollingPlaceholders: Swift.Bool {
        get throws {
            try _ilistViewBase2.get_ShowsScrollingPlaceholders()
        }
    }

    /// Gets or sets a value that indicates whether the view shows placeholder UI for items during scrolling.
    /// - Returns: **true** if the view shows placeholder UI for items during scrolling; otherwise, **false**. The default is **true**.
    public func showsScrollingPlaceholders(_ value: Swift.Bool) throws {
        try _ilistViewBase2.put_ShowsScrollingPlaceholders(value)
    }

    /// Occurs when the data item associated with a UI container changes.
    public func containerContentChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ListViewBase?, WindowsUIXamlControls_ContainerContentChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase2.add_ContainerContentChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: containerContentChanging)
    }

    public func containerContentChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase2.remove_ContainerContentChanging(token)
    }

    /// Sets the maximum target time between two render passes when a ListViewBase is updating its UI with data items during initial load or scrolling.
    /// - Parameter duration: The maximum target time between two render passes.
    public func setDesiredContainerUpdateDuration(_ duration: WindowsFoundation_TimeSpan) throws {
        try _ilistViewBase2.setDesiredContainerUpdateDuration(duration)
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase3 members

    /// Gets or sets the reorder behavior for a ListViewBase instance. When **Enabled**, unsorted and ungrouped lists can be reordered by user manipulation.
    /// - Returns: One of the ListViewReorderMode enumeration values. The default is **Disabled**.
    public var reorderMode: WindowsUIXamlControls_ListViewReorderMode {
        get throws {
            try _ilistViewBase3.get_ReorderMode()
        }
    }

    /// Gets or sets the reorder behavior for a ListViewBase instance. When **Enabled**, unsorted and ungrouped lists can be reordered by user manipulation.
    /// - Returns: One of the ListViewReorderMode enumeration values. The default is **Disabled**.
    public func reorderMode(_ value: WindowsUIXamlControls_ListViewReorderMode) throws {
        try _ilistViewBase3.put_ReorderMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase4 members

    /// Gets or sets a value that indicates whether a check box is shown to enable multi-selection.
    /// - Returns: **true** if a check box is shown to enable multi-selection; otherwise, **false**.
    public var isMultiSelectCheckBoxEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase4.get_IsMultiSelectCheckBoxEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a check box is shown to enable multi-selection.
    /// - Returns: **true** if a check box is shown to enable multi-selection; otherwise, **false**.
    public func isMultiSelectCheckBoxEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase4.put_IsMultiSelectCheckBoxEnabled(value)
    }

    /// Gets a collection of ItemIndexRange objects that describe the currently selected items in the list.
    /// - Returns: The collection of ItemIndexRange objects that describe the currently selected items in the list. The default is an empty collection.
    public var selectedRanges: WindowsFoundationCollections_IVectorView<WindowsUIXamlData_ItemIndexRange?> {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase4.get_SelectedRanges())
        }
    }

    /// Occurs when an item container is to be chosen for a data group.
    public func choosingGroupHeaderContainer(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ListViewBase?, WindowsUIXamlControls_ChoosingGroupHeaderContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase4.add_ChoosingGroupHeaderContainer(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: choosingGroupHeaderContainer)
    }

    public func choosingGroupHeaderContainer(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase4.remove_ChoosingGroupHeaderContainer(token)
    }

    /// Occurs when an item container is to be chosen for a data item.
    public func choosingItemContainer(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ListViewBase?, WindowsUIXamlControls_ChoosingItemContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase4.add_ChoosingItemContainer(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: choosingItemContainer)
    }

    public func choosingItemContainer(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase4.remove_ChoosingItemContainer(token)
    }

    /// Occurs when a drag operation that involves one of the items in the view is ended. In order to receive this event, set the **CanDragItems** property to **True**.
    public func dragItemsCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ListViewBase?, WindowsUIXamlControls_DragItemsCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase4.add_DragItemsCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragItemsCompleted)
    }

    public func dragItemsCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase4.remove_DragItemsCompleted(token)
    }

    /// Selects a block of items described by the ItemIndexRange.
    /// - Parameter itemIndexRange: Information about the range of items, including the index of the first and last items in the range, and the number of items.
    public func selectRange(_ itemIndexRange: WindowsUIXamlData_ItemIndexRange?) throws {
        try _ilistViewBase4.selectRange(itemIndexRange)
    }

    /// Deselects a block of items described by the ItemIndexRange.
    /// - Parameter itemIndexRange: Information about the range of items, including the index of the first and last items in the range, and the number of items.
    public func deselectRange(_ itemIndexRange: WindowsUIXamlData_ItemIndexRange?) throws {
        try _ilistViewBase4.deselectRange(itemIndexRange)
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase5 members

    /// Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
    /// - Returns: **true** if item selection changes when keyboard focus changes; otherwise, **false**. The default is **true**.
    public var singleSelectionFollowsFocus: Swift.Bool {
        get throws {
            try _ilistViewBase5.get_SingleSelectionFollowsFocus()
        }
    }

    /// Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
    /// - Returns: **true** if item selection changes when keyboard focus changes; otherwise, **false**. The default is **true**.
    public func singleSelectionFollowsFocus(_ value: Swift.Bool) throws {
        try _ilistViewBase5.put_SingleSelectionFollowsFocus(value)
    }

    /// Returns a value that indicates whether the list view is both the drag source and drop target in a drag-and-drop operation.
    /// - Returns: **true** if the list view is both the drag source and drop target; otherwise, **false**.
    public func isDragSource() throws -> Swift.Bool {
        try _ilistViewBase5.isDragSource()
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBase6 members

    /// Attempts to start the animation.
    /// - Parameter animation: The animation to start.
    /// - Parameter item: The data item that is animated into view.
    /// - Parameter elementName: The name of the element in the ItemTemplate that provides the animated visual.
    /// - Returns: **true** if the animation started; **false** if the animation has already been started, if it is no longer active, or if the destination element is the same as the source element.
    public func tryStartConnectedAnimationAsync(_ animation: WindowsUIXamlMediaAnimation_ConnectedAnimation?, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilistViewBase6.tryStartConnectedAnimationAsync(animation, item, elementName))
    }

    /// Returns a connected animation that's associated with the specified key, data item, and source element.
    /// - Parameter key: The key for the animation.
    /// - Parameter item: The data item that is animated out of view.
    /// - Parameter elementName: The name of the element in the ItemTemplate that provides the animated visual.
    /// - Returns: The animation with the specified key.
    public func prepareConnectedAnimation(_ key: Swift.String, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> WindowsUIXamlMediaAnimation_ConnectedAnimation {
        try COM.NullResult.unwrap(_ilistViewBase6.prepareConnectedAnimation(key, item, elementName))
    }

    // MARK: Windows.UI.Xaml.Controls.ISemanticZoomInformation members

    /// Gets or sets a value that indicates whether the ListViewBase instance is the active view in its owning SemanticZoom.
    /// - Returns: **true** if the ListViewBase is the active view; otherwise, **false**.
    public var isActiveView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsActiveView()
        }
    }

    /// Gets or sets a value that indicates whether the ListViewBase instance is the active view in its owning SemanticZoom.
    /// - Returns: **true** if the ListViewBase is the active view; otherwise, **false**.
    public func isActiveView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsActiveView(value)
    }

    /// Gets or sets a value that indicates whether the ListViewBase instance is the zoomed-in view in its owning SemanticZoom.
    /// - Returns: **true** if the ListViewBase is the zoomed-in view; otherwise, **false**.
    public var isZoomedInView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsZoomedInView()
        }
    }

    /// Gets or sets a value that indicates whether the ListViewBase instance is the zoomed-in view in its owning SemanticZoom.
    /// - Returns: **true** if the ListViewBase is the zoomed-in view; otherwise, **false**.
    public func isZoomedInView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsZoomedInView(value)
    }

    /// Gets or sets the SemanticZoom instance that hosts the ListViewBase.
    /// - Returns: The SemanticZoom instance that hosts this view, or **null** if the view is not hosted in a SemanticZoom control. 
    public var semanticZoomOwner: WindowsUIXamlControls_SemanticZoom {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomInformation.get_SemanticZoomOwner())
        }
    }

    /// Gets or sets the SemanticZoom instance that hosts the ListViewBase.
    /// - Returns: The SemanticZoom instance that hosts this view, or **null** if the view is not hosted in a SemanticZoom control. 
    public func semanticZoomOwner(_ value: WindowsUIXamlControls_SemanticZoom?) throws {
        try _isemanticZoomInformation.put_SemanticZoomOwner(value)
    }

    /// Initializes the changes to related aspects of presentation (such as scrolling UI or state) when the overall view for a SemanticZoom is about to change.
    public func initializeViewChange() throws {
        try _isemanticZoomInformation.initializeViewChange()
    }

    /// Changes related aspects of presentation when the overall view for a SemanticZoom changes.
    public func completeViewChange() throws {
        try _isemanticZoomInformation.completeViewChange()
    }

    /// Forces content in the view to scroll until the item that's specified by SemanticZoomLocation is visible. Also focuses the item if it finds the item.
    /// - Parameter item: The item in the view to scroll to.
    public func makeVisible(_ item: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.makeVisible(item)
    }

    /// Initializes item-wise operations that are related to a view change when the ListViewBase instance is the source view and the pending destination view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeFrom(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeFrom(source, destination)
    }

    /// Initializes item-wise operations that are related to a view change when the source view is a different view and the pending destination view is the ListViewBase instance.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeTo(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeTo(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the ListViewBase instance is the source view and the new view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeFrom(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeFrom(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the ListViewBase instance is the destination view and the source view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeTo(_ source: WindowsUIXamlControls_SemanticZoomLocation?, _ destination: WindowsUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeTo(source, destination)
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBaseStatics5 members

    /// Identifies the SingleSelectionFollowsFocus dependency property.
    /// - Returns: The identifier for the SingleSelectionFollowsFocus dependency property.
    public static var singleSelectionFollowsFocusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics5.get_SingleSelectionFollowsFocusProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBaseStatics2 members

    /// Identifies the Footer dependency property.
    /// - Returns: The identifier for the Footer dependency property.
    public static var footerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics2.get_FooterProperty())
        }
    }

    /// Identifies the FooterTemplate dependency property.
    /// - Returns: The identifier for the FooterTemplate dependency property.
    public static var footerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics2.get_FooterTemplateProperty())
        }
    }

    /// Identifies the FooterTransitions dependency property.
    /// - Returns: The identifier for the FooterTransitions dependency property.
    public static var footerTransitionsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics2.get_FooterTransitionsProperty())
        }
    }

    /// Identifies the ShowsScrollingPlaceholders dependency property.
    /// - Returns: The identifier for the ShowsScrollingPlaceholders dependency property.
    public static var showsScrollingPlaceholdersProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics2.get_ShowsScrollingPlaceholdersProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBaseStatics3 members

    /// Identifies the ReorderMode dependency property.
    /// - Returns: The identifier for the ReorderMode dependency property.
    public static var reorderModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics3.get_ReorderModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBaseStatics members

    /// Identifies the CanDragItems dependency property.
    /// - Returns: The identifier for the CanDragItems dependency property.
    public static var canDragItemsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_CanDragItemsProperty())
        }
    }

    /// Identifies the CanReorderItems dependency property.
    /// - Returns: The identifier for the CanReorderItems dependency property.
    public static var canReorderItemsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_CanReorderItemsProperty())
        }
    }

    /// Identifies the DataFetchSize dependency property.
    /// - Returns: The identifier for the DataFetchSize dependency property.
    public static var dataFetchSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_DataFetchSizeProperty())
        }
    }

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the HeaderTransitions dependency property.
    /// - Returns: The identifier for the HeaderTransitions dependency property.
    public static var headerTransitionsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderTransitionsProperty())
        }
    }

    /// Identifies the IncrementalLoadingThreshold dependency property.
    /// - Returns: The identifier for the IncrementalLoadingThreshold dependency property.
    public static var incrementalLoadingThresholdProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IncrementalLoadingThresholdProperty())
        }
    }

    /// Identifies the IncrementalLoadingTrigger dependency property.
    /// - Returns: The identifier for the IncrementalLoadingTrigger dependency property.
    public static var incrementalLoadingTriggerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IncrementalLoadingTriggerProperty())
        }
    }

    /// Identifies the IsActiveView dependency property.
    /// - Returns: The identifier for the IsActiveView dependency property.
    public static var isActiveViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsActiveViewProperty())
        }
    }

    /// Identifies the IsItemClickEnabled dependency property.
    /// - Returns: The identifier for the IsItemClickEnabled dependency property.
    public static var isItemClickEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsItemClickEnabledProperty())
        }
    }

    /// Identifies the IsSwipeEnabled dependency property.
    /// - Returns: The identifier for the IsSwipeEnabled dependency property.
    public static var isSwipeEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsSwipeEnabledProperty())
        }
    }

    /// Identifies the IsZoomedInView dependency property.
    /// - Returns: The identifier for the IsZoomedInView dependency property.
    public static var isZoomedInViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsZoomedInViewProperty())
        }
    }

    /// Identifies the SelectionMode dependency property.
    /// - Returns: The identifier for the SelectionMode dependency property.
    public static var selectionModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_SelectionModeProperty())
        }
    }

    /// Identifies the SemanticZoomOwner dependency property.
    /// - Returns: The identifier for the SemanticZoomOwner dependency property.
    public static var semanticZoomOwnerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_SemanticZoomOwnerProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IListViewBaseStatics4 members

    /// Get the identifier for the IsMultiSelectCheckBoxEnabled dependency property.
    /// - Returns: The identifier for the IsMultiSelectCheckBoxEnabled dependency property.
    public static var isMultiSelectCheckBoxEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics4.get_IsMultiSelectCheckBoxEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _ilistViewBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase>? = nil

    internal var _ilistViewBase: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase> {
        get throws {
            try _ilistViewBase_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase.self)
            }
        }
    }

    private var _ilistViewBase2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase2>? = nil

    internal var _ilistViewBase2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase2> {
        get throws {
            try _ilistViewBase2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase2.self)
            }
        }
    }

    private var _ilistViewBase3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase3>? = nil

    internal var _ilistViewBase3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase3> {
        get throws {
            try _ilistViewBase3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase3.self)
            }
        }
    }

    private var _ilistViewBase4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase4>? = nil

    internal var _ilistViewBase4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase4> {
        get throws {
            try _ilistViewBase4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase4.self)
            }
        }
    }

    private var _ilistViewBase5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase5>? = nil

    internal var _ilistViewBase5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase5> {
        get throws {
            try _ilistViewBase5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase5.self)
            }
        }
    }

    private var _ilistViewBase6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase6>? = nil

    internal var _ilistViewBase6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase6> {
        get throws {
            try _ilistViewBase6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IListViewBase6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IListViewBase6.self)
            }
        }
    }

    private var _isemanticZoomInformation_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation>? = nil

    internal var _isemanticZoomInformation: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation> {
        get throws {
            try _isemanticZoomInformation_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISemanticZoomInformation.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IListViewBase>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ilistViewBase_storage?.release()
        _ilistViewBase2_storage?.release()
        _ilistViewBase3_storage?.release()
        _ilistViewBase4_storage?.release()
        _ilistViewBase5_storage?.release()
        _ilistViewBase6_storage?.release()
        _isemanticZoomInformation_storage?.release()
    }

    private static var _ilistViewBaseFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseFactory>? = nil

    internal static var _ilistViewBaseFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseFactory> {
        get throws {
            try _ilistViewBaseFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseFactory.iid)
            }
        }
    }

    private static var _ilistViewBaseStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics5>? = nil

    internal static var _ilistViewBaseStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics5> {
        get throws {
            try _ilistViewBaseStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics5.iid)
            }
        }
    }

    private static var _ilistViewBaseStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics2>? = nil

    internal static var _ilistViewBaseStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics2> {
        get throws {
            try _ilistViewBaseStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics2.iid)
            }
        }
    }

    private static var _ilistViewBaseStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics3>? = nil

    internal static var _ilistViewBaseStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics3> {
        get throws {
            try _ilistViewBaseStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics3.iid)
            }
        }
    }

    private static var _ilistViewBaseStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics>? = nil

    internal static var _ilistViewBaseStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics> {
        get throws {
            try _ilistViewBaseStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics.iid)
            }
        }
    }

    private static var _ilistViewBaseStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics4>? = nil

    internal static var _ilistViewBaseStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics4> {
        get throws {
            try _ilistViewBaseStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ListViewBase", id: CWinRT.SWRT_WindowsUIXamlControls_IListViewBaseStatics4.iid)
            }
        }
    }
}