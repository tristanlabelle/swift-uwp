// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a button with two parts that can be invoked separately. One part behaves like a toggle button and the other part invokes a flyout.
open class WindowsUIXamlControls_ToggleSplitButton: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IToggleSplitButtonFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_ToggleSplitButton.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._itoggleSplitButtonFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleSplitButton members

    /// Gets or sets whether the ToggleSplitButton is checked.
    /// - Returns: **true** if the ToggleSplitButton is checked; **false** if the ToggleSplitButton is unchecked. The default is **false**.
    public var isChecked: Swift.Bool {
        get throws {
            try _itoggleSplitButton.get_IsChecked()
        }
    }

    /// Gets or sets whether the ToggleSplitButton is checked.
    /// - Returns: **true** if the ToggleSplitButton is checked; **false** if the ToggleSplitButton is unchecked. The default is **false**.
    public func isChecked(_ value: Swift.Bool) throws {
        try _itoggleSplitButton.put_IsChecked(value)
    }

    /// Occurs when the value of the IsChecked property is changed.
    public func isCheckedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ToggleSplitButton?, WindowsUIXamlControls_ToggleSplitButtonIsCheckedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itoggleSplitButton.add_IsCheckedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isCheckedChanged)
    }

    public func isCheckedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itoggleSplitButton.remove_IsCheckedChanged(token)
    }

    // MARK: Implementation details

    private var _itoggleSplitButton_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButton>? = nil

    internal var _itoggleSplitButton: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButton> {
        get throws {
            try _itoggleSplitButton_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButton.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButton.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButton>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _itoggleSplitButton_storage?.release()
    }

    private static var _itoggleSplitButtonFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButtonFactory>? = nil

    internal static var _itoggleSplitButtonFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButtonFactory> {
        get throws {
            try _itoggleSplitButtonFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ToggleSplitButton", id: CWinRT.SWRT_WindowsUIXamlControls_IToggleSplitButtonFactory.iid)
            }
        }
    }
}