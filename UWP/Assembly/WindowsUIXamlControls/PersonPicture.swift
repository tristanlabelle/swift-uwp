// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that displays the avatar image for a person, if one is available; if not, it displays the person's initials or a generic glyph.
open class WindowsUIXamlControls_PersonPicture: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IPersonPictureFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_PersonPicture.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ipersonPictureFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPersonPicture members

    /// Gets or sets a Segoe MDL2 Assets font glyph to display on the badge.
    /// - Returns: The hexadecimal character code for the badge glyph.
    public var badgeGlyph: Swift.String {
        get throws {
            try _ipersonPicture.get_BadgeGlyph()
        }
    }

    /// Gets or sets a Segoe MDL2 Assets font glyph to display on the badge.
    /// - Returns: The hexadecimal character code for the badge glyph.
    public func badgeGlyph(_ value: Swift.String) throws {
        try _ipersonPicture.put_BadgeGlyph(value)
    }

    /// Gets or sets the source of an image to display on the badge.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public var badgeImageSource: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_ipersonPicture.get_BadgeImageSource())
        }
    }

    /// Gets or sets the source of an image to display on the badge.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public func badgeImageSource(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _ipersonPicture.put_BadgeImageSource(value)
    }

    /// Gets or sets the contact number to display on the badge.
    /// - Returns: The contact number to display on the badge.
    public var badgeNumber: Swift.Int32 {
        get throws {
            try _ipersonPicture.get_BadgeNumber()
        }
    }

    /// Gets or sets the contact number to display on the badge.
    /// - Returns: The contact number to display on the badge.
    public func badgeNumber(_ value: Swift.Int32) throws {
        try _ipersonPicture.put_BadgeNumber(value)
    }

    /// Gets or sets the contact text to display on the badge.
    /// - Returns: The contact text to display on the badge.
    public var badgeText: Swift.String {
        get throws {
            try _ipersonPicture.get_BadgeText()
        }
    }

    /// Gets or sets the contact text to display on the badge.
    /// - Returns: The contact text to display on the badge.
    public func badgeText(_ value: Swift.String) throws {
        try _ipersonPicture.put_BadgeText(value)
    }

    /// Gets or sets a Contact object that contains information about the person.
    /// - Returns: A Contact object that contains information about the person.
    public var contact: WindowsApplicationModelContacts_Contact {
        get throws {
            try COM.NullResult.unwrap(_ipersonPicture.get_Contact())
        }
    }

    /// Gets or sets a Contact object that contains information about the person.
    /// - Returns: A Contact object that contains information about the person.
    public func contact(_ value: WindowsApplicationModelContacts_Contact?) throws {
        try _ipersonPicture.put_Contact(value)
    }

    /// Gets or sets the contact's display name.
    /// - Returns: The contact's display name.
    public var displayName: Swift.String {
        get throws {
            try _ipersonPicture.get_DisplayName()
        }
    }

    /// Gets or sets the contact's display name.
    /// - Returns: The contact's display name.
    public func displayName(_ value: Swift.String) throws {
        try _ipersonPicture.put_DisplayName(value)
    }

    /// Gets or sets the contact's initials.
    /// - Returns: The contact's initials.
    public var initials: Swift.String {
        get throws {
            try _ipersonPicture.get_Initials()
        }
    }

    /// Gets or sets the contact's initials.
    /// - Returns: The contact's initials.
    public func initials(_ value: Swift.String) throws {
        try _ipersonPicture.put_Initials(value)
    }

    /// Gets or sets a value that indicates whether the PersonPicture represents a group or an individual.
    /// - Returns: **true** if the PersonPicture represents a group; otherwise, **false**.
    public var isGroup: Swift.Bool {
        get throws {
            try _ipersonPicture.get_IsGroup()
        }
    }

    /// Gets or sets a value that indicates whether the PersonPicture represents a group or an individual.
    /// - Returns: **true** if the PersonPicture represents a group; otherwise, **false**.
    public func isGroup(_ value: Swift.Bool) throws {
        try _ipersonPicture.put_IsGroup(value)
    }

    /// Gets or sets a value that indicates whether a small image is displayed rather than a large image when both are available.
    /// - Returns: **true** to display a small image even when a large image is available; otherwise, **false**. The default is **false**.
    public var preferSmallImage: Swift.Bool {
        get throws {
            try _ipersonPicture.get_PreferSmallImage()
        }
    }

    /// Gets or sets a value that indicates whether a small image is displayed rather than a large image when both are available.
    /// - Returns: **true** to display a small image even when a large image is available; otherwise, **false**. The default is **false**.
    public func preferSmallImage(_ value: Swift.Bool) throws {
        try _ipersonPicture.put_PreferSmallImage(value)
    }

    /// Gets or sets the source of the contact's profile picture.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public var profilePicture: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_ipersonPicture.get_ProfilePicture())
        }
    }

    /// Gets or sets the source of the contact's profile picture.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public func profilePicture(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _ipersonPicture.put_ProfilePicture(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IPersonPictureStatics members

    /// Identifies the BadgeGlyph dependency property.
    /// - Returns: The identifier for the BadgeGlyph dependency property.
    public static var badgeGlyphProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_BadgeGlyphProperty())
        }
    }

    /// Identifies the BadgeImageSource dependency property.
    /// - Returns: The identifier for the BadgeImageSource dependency property.
    public static var badgeImageSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_BadgeImageSourceProperty())
        }
    }

    /// Identifies the BadgeNumber dependency property.
    /// - Returns: The identifier for the BadgeNumber dependency property.
    public static var badgeNumberProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_BadgeNumberProperty())
        }
    }

    /// Identifies the BadgeText dependency property.
    /// - Returns: The identifier for the BadgeText dependency property.
    public static var badgeTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_BadgeTextProperty())
        }
    }

    /// Identifies the Contact dependency property.
    /// - Returns: The identifier for the Contact dependency property.
    public static var contactProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_ContactProperty())
        }
    }

    /// Identifies the DisplayName dependency property.
    /// - Returns: The identifier for the DisplayName dependency property.
    public static var displayNameProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_DisplayNameProperty())
        }
    }

    /// Identifies the Initials dependency property.
    /// - Returns: The identifier for the Initials dependency property.
    public static var initialsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_InitialsProperty())
        }
    }

    /// Identifies the IsGroup dependency property.
    /// - Returns: The identifier for the IsGroup dependency property.
    public static var isGroupProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_IsGroupProperty())
        }
    }

    /// Identifies the PreferSmallImage dependency property.
    /// - Returns: The identifier for the PreferSmallImage dependency property.
    public static var preferSmallImageProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_PreferSmallImageProperty())
        }
    }

    /// Identifies the ProfilePicture dependency property.
    /// - Returns: The identifier for the ProfilePicture dependency property.
    public static var profilePictureProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipersonPictureStatics.get_ProfilePictureProperty())
        }
    }

    // MARK: Implementation details

    private var _ipersonPicture_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPicture>? = nil

    internal var _ipersonPicture: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPicture> {
        get throws {
            try _ipersonPicture_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPersonPicture.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPersonPicture.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IPersonPicture>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ipersonPicture_storage?.release()
    }

    private static var _ipersonPictureFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureFactory>? = nil

    internal static var _ipersonPictureFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureFactory> {
        get throws {
            try _ipersonPictureFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PersonPicture", id: CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureFactory.iid)
            }
        }
    }

    private static var _ipersonPictureStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureStatics>? = nil

    internal static var _ipersonPictureStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureStatics> {
        get throws {
            try _ipersonPictureStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.PersonPicture", id: CWinRT.SWRT_WindowsUIXamlControls_IPersonPictureStatics.iid)
            }
        }
    }
}