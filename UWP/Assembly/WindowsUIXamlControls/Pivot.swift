// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that provides quick navigation of views within an app.
open class WindowsUIXamlControls_Pivot: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IPivotFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Pivot.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ipivotFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPivot members

    /// Gets or sets the template for the Header property of PivotItem children.
    /// - Returns: The template for the Header property of PivotItem children.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ipivot.get_HeaderTemplate())
        }
    }

    /// Gets or sets the template for the Header property of PivotItem children.
    /// - Returns: The template for the Header property of PivotItem children.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ipivot.put_HeaderTemplate(value)
    }

    /// Gets or sets whether the Pivot is locked to show only the current PivotItem. While the Pivot is locked, all other PivotItems are removed, and the user cannot navigate to them. An example of locking is when the email list is put into a multi-select mode.
    /// - Returns: **true** if the Pivot is locked; **false** if it is unlocked. The default is **false**.
    public var isLocked: Swift.Bool {
        get throws {
            try _ipivot.get_IsLocked()
        }
    }

    /// Gets or sets whether the Pivot is locked to show only the current PivotItem. While the Pivot is locked, all other PivotItems are removed, and the user cannot navigate to them. An example of locking is when the email list is put into a multi-select mode.
    /// - Returns: **true** if the Pivot is locked; **false** if it is unlocked. The default is **false**.
    public func isLocked(_ value: Swift.Bool) throws {
        try _ipivot.put_IsLocked(value)
    }

    /// Gets or sets the zero-based index of the currently selected item in the Pivot.
    /// - Returns: The zero-based index of the currently selected item.
    public var selectedIndex: Swift.Int32 {
        get throws {
            try _ipivot.get_SelectedIndex()
        }
    }

    /// Gets or sets the zero-based index of the currently selected item in the Pivot.
    /// - Returns: The zero-based index of the currently selected item.
    public func selectedIndex(_ value: Swift.Int32) throws {
        try _ipivot.put_SelectedIndex(value)
    }

    /// Gets or sets the currently selected item in the Pivot.
    /// - Returns: The currently selected PivotItem or, if the Pivot is bound to data, the data item set as the Content of the currently selected PivotItem.
    public var selectedItem: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipivot.get_SelectedItem())
        }
    }

    /// Gets or sets the currently selected item in the Pivot.
    /// - Returns: The currently selected PivotItem or, if the Pivot is bound to data, the data item set as the Content of the currently selected PivotItem.
    public func selectedItem(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipivot.put_SelectedItem(value)
    }

    /// Gets or sets the title to be optionally set above the headers.
    /// - Returns: Returns String.
    public var title: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipivot.get_Title())
        }
    }

    /// Gets or sets the title to be optionally set above the headers.
    /// - Returns: Returns String.
    public func title(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipivot.put_Title(value)
    }

    /// Gets or sets the title template used for displaying the title above the headers area.
    /// - Returns: The template that specifies the visualization of the title object.
    public var titleTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ipivot.get_TitleTemplate())
        }
    }

    /// Gets or sets the title template used for displaying the title above the headers area.
    /// - Returns: The template that specifies the visualization of the title object.
    public func titleTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ipivot.put_TitleTemplate(value)
    }

    /// Event for indicating that an item has fully loaded.
    public func pivotItemLoaded(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Pivot?, WindowsUIXamlControls_PivotItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipivot.add_PivotItemLoaded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pivotItemLoaded)
    }

    public func pivotItemLoaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipivot.remove_PivotItemLoaded(token)
    }

    /// Event for offering an opportunity to dynamically load or change the content of a pivot item before it is displayed.
    public func pivotItemLoading(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Pivot?, WindowsUIXamlControls_PivotItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipivot.add_PivotItemLoading(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pivotItemLoading)
    }

    public func pivotItemLoading(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipivot.remove_PivotItemLoading(token)
    }

    /// Event for notifying that the pivot item has been completely unloaded from the visual pivot.
    public func pivotItemUnloaded(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Pivot?, WindowsUIXamlControls_PivotItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipivot.add_PivotItemUnloaded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pivotItemUnloaded)
    }

    public func pivotItemUnloaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipivot.remove_PivotItemUnloaded(token)
    }

    /// Event for offering an opportunity to dynamically load, change, or remove the content of a pivot item as it is removed.
    public func pivotItemUnloading(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Pivot?, WindowsUIXamlControls_PivotItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipivot.add_PivotItemUnloading(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pivotItemUnloading)
    }

    public func pivotItemUnloading(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipivot.remove_PivotItemUnloading(token)
    }

    /// Occurs when the currently selected item changes.
    public func selectionChanged(adding handler: WindowsUIXamlControls_SelectionChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipivot.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipivot.remove_SelectionChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IPivot2 members

    /// Gets or sets the content for the header on the control's left side.
    /// - Returns: The content of the header on the control's left side. The default is **null**.
    public var leftHeader: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipivot2.get_LeftHeader())
        }
    }

    /// Gets or sets the content for the header on the control's left side.
    /// - Returns: The content of the header on the control's left side. The default is **null**.
    public func leftHeader(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipivot2.put_LeftHeader(value)
    }

    /// Gets or sets the template for the header on the control's left side.
    /// - Returns: The template for the header on the control's left side.
    public var leftHeaderTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ipivot2.get_LeftHeaderTemplate())
        }
    }

    /// Gets or sets the template for the header on the control's left side.
    /// - Returns: The template for the header on the control's left side.
    public func leftHeaderTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ipivot2.put_LeftHeaderTemplate(value)
    }

    /// Gets or sets the content for the header on the control's right side.
    /// - Returns: The content of the header on the control's right side. The default is **null**.
    public var rightHeader: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ipivot2.get_RightHeader())
        }
    }

    /// Gets or sets the content for the header on the control's right side.
    /// - Returns: The content of the header on the control's right side. The default is **null**.
    public func rightHeader(_ value: WindowsRuntime.IInspectable?) throws {
        try _ipivot2.put_RightHeader(value)
    }

    /// Gets or sets the template for the header on the control's right side.
    /// - Returns: The template for the header on the control's right side.
    public var rightHeaderTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ipivot2.get_RightHeaderTemplate())
        }
    }

    /// Gets or sets the template for the header on the control's right side.
    /// - Returns: The template for the header on the control's right side.
    public func rightHeaderTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _ipivot2.put_RightHeaderTemplate(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IPivot3 members

    /// Gets or sets a value that specifies the style of focus visual used for pivot header items.
    /// - Returns: A value of the enumeration that specifies the style of focus visual used for pivot header items. The default is **SelectedItemHeader**.
    public var headerFocusVisualPlacement: WindowsUIXamlControls_PivotHeaderFocusVisualPlacement {
        get throws {
            try _ipivot3.get_HeaderFocusVisualPlacement()
        }
    }

    /// Gets or sets a value that specifies the style of focus visual used for pivot header items.
    /// - Returns: A value of the enumeration that specifies the style of focus visual used for pivot header items. The default is **SelectedItemHeader**.
    public func headerFocusVisualPlacement(_ value: WindowsUIXamlControls_PivotHeaderFocusVisualPlacement) throws {
        try _ipivot3.put_HeaderFocusVisualPlacement(value)
    }

    /// Gets or sets a value that indicates whether the selected header moves to the first position.
    /// - Returns: **true** if the selected header moves to the first position; **false** if headers always keep the same position. The default is **true**.
    public var isHeaderItemsCarouselEnabled: Swift.Bool {
        get throws {
            try _ipivot3.get_IsHeaderItemsCarouselEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the selected header moves to the first position.
    /// - Returns: **true** if the selected header moves to the first position; **false** if headers always keep the same position. The default is **true**.
    public func isHeaderItemsCarouselEnabled(_ value: Swift.Bool) throws {
        try _ipivot3.put_IsHeaderItemsCarouselEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IPivotStatics3 members

    /// Identifies the HeaderFocusVisualPlacement dependency property.
    /// - Returns: The identifier for the HeaderFocusVisualPlacement dependency property.
    public static var headerFocusVisualPlacementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics3.get_HeaderFocusVisualPlacementProperty())
        }
    }

    /// Identifies the IsHeaderItemsCarouselEnabled dependency property.
    /// - Returns: The identifier for the IsHeaderItemsCarouselEnabled dependency property.
    public static var isHeaderItemsCarouselEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics3.get_IsHeaderItemsCarouselEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IPivotStatics members

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsLocked dependency property.
    /// - Returns: The identifier for the IsLocked dependency property.
    public static var isLockedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_IsLockedProperty())
        }
    }

    /// Identifies the SelectedIndex dependency property.
    /// - Returns: The identifier for the SelectedIndex dependency property.
    public static var selectedIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_SelectedIndexProperty())
        }
    }

    /// Identifies the SelectedItem dependency property.
    /// - Returns: The identifier for the SelectedItem dependency property.
    public static var selectedItemProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_SelectedItemProperty())
        }
    }

    /// Identifies the SlideInAnimationGroup XAML attached property.
    /// - Returns: The identifier for the SlideInAnimationGroup XAML attached property.
    public static var slideInAnimationGroupProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_SlideInAnimationGroupProperty())
        }
    }

    /// Identifies the Title dependency property.
    /// - Returns: The identifier for the Title dependency property.
    public static var titleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_TitleProperty())
        }
    }

    /// Identifies the TitleTemplate dependency property.
    /// - Returns: The identifier for the TitleTemplate dependency property.
    public static var titleTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics.get_TitleTemplateProperty())
        }
    }

    /// Retrieves the animation group that a FrameworkElement belongs to.
    /// - Parameter element: The FrameworkElement within the Pivot (such as a TextBlock ) that is to be animated.
    /// - Returns: The slide-in animation group that this FrameworkElement belongs to.
    public static func getSlideInAnimationGroup(_ element: WindowsUIXaml_FrameworkElement?) throws -> WindowsUIXamlControls_PivotSlideInAnimationGroup {
        try _ipivotStatics.getSlideInAnimationGroup(element)
    }

    /// Assigns a FrameworkElement to a slide-in animation group so that element is animated at the same time as the other members of that group.
    /// - Parameter element: The FrameworkElement within the Pivot (such as a TextBlock ) that is to be animated.
    /// - Parameter value: The slide-in animation group that this FrameworkElement belongs to. This element will be animated with all other elements that share the same group number.
    public static func setSlideInAnimationGroup(_ element: WindowsUIXaml_FrameworkElement?, _ value: WindowsUIXamlControls_PivotSlideInAnimationGroup) throws {
        try _ipivotStatics.setSlideInAnimationGroup(element, value)
    }

    // MARK: Windows.UI.Xaml.Controls.IPivotStatics2 members

    /// Identifies the LeftHeader dependency property.
    /// - Returns: The identifier for the LeftHeader dependency property.
    public static var leftHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics2.get_LeftHeaderProperty())
        }
    }

    /// Identifies the LeftHeaderTemplate dependency property.
    /// - Returns: The identifier for the LeftHeaderTemplate dependency property.
    public static var leftHeaderTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics2.get_LeftHeaderTemplateProperty())
        }
    }

    /// Identifies the RightHeader dependency property.
    /// - Returns: The identifier for the RightHeader dependency property.
    public static var rightHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics2.get_RightHeaderProperty())
        }
    }

    /// Identifies the RightHeaderTemplate dependency property.
    /// - Returns: The identifier for the RightHeaderTemplate dependency property.
    public static var rightHeaderTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipivotStatics2.get_RightHeaderTemplateProperty())
        }
    }

    // MARK: Implementation details

    private var _ipivot_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot>? = nil

    internal var _ipivot: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot> {
        get throws {
            try _ipivot_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPivot.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPivot.self)
            }
        }
    }

    private var _ipivot2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot2>? = nil

    internal var _ipivot2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot2> {
        get throws {
            try _ipivot2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPivot2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPivot2.self)
            }
        }
    }

    private var _ipivot3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot3>? = nil

    internal var _ipivot3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivot3> {
        get throws {
            try _ipivot3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IPivot3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IPivot3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IPivot>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ipivot_storage?.release()
        _ipivot2_storage?.release()
        _ipivot3_storage?.release()
    }

    private static var _ipivotFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotFactory>? = nil

    internal static var _ipivotFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotFactory> {
        get throws {
            try _ipivotFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Pivot", id: CWinRT.SWRT_WindowsUIXamlControls_IPivotFactory.iid)
            }
        }
    }

    private static var _ipivotStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics3>? = nil

    internal static var _ipivotStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics3> {
        get throws {
            try _ipivotStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Pivot", id: CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics3.iid)
            }
        }
    }

    private static var _ipivotStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics>? = nil

    internal static var _ipivotStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics> {
        get throws {
            try _ipivotStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Pivot", id: CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics.iid)
            }
        }
    }

    private static var _ipivotStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics2>? = nil

    internal static var _ipivotStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics2> {
        get throws {
            try _ipivotStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Pivot", id: CWinRT.SWRT_WindowsUIXamlControls_IPivotStatics2.iid)
            }
        }
    }
}