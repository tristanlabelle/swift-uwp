// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Windows Ink input surface for text input controls.
open class WindowsUIXamlControls_HandwritingView: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IHandwritingViewFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_HandwritingView.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ihandwritingViewFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IHandwritingView members

    /// Gets or sets a value that specifies whether auto-completion candidates are shown as the use writes.
    /// - Returns: **true** if auto-completion candidates are shown as the use writes; otherwise, **false**. The default is **true**.
    public var areCandidatesEnabled: Swift.Bool {
        get throws {
            try _ihandwritingView.get_AreCandidatesEnabled()
        }
    }

    /// Gets or sets a value that specifies whether auto-completion candidates are shown as the use writes.
    /// - Returns: **true** if auto-completion candidates are shown as the use writes; otherwise, **false**. The default is **true**.
    public func areCandidatesEnabled(_ value: Swift.Bool) throws {
        try _ihandwritingView.put_AreCandidatesEnabled(value)
    }

    /// Gets a value that indicates whether the handwriting view panel is open.
    /// - Returns: **true** if the handwriting view panel is open; otherwise, **false**.
    public var isOpen: Swift.Bool {
        get throws {
            try _ihandwritingView.get_IsOpen()
        }
    }

    /// Gets or sets a value that specifies the anchor point used to place the handwriting view over the control.
    /// - Returns: An enunmeration value that specifies the anchor point used to place the handwriting view. The default is **Auto**.
    public var placementAlignment: WindowsUIXamlControls_HandwritingPanelPlacementAlignment {
        get throws {
            try _ihandwritingView.get_PlacementAlignment()
        }
    }

    /// Gets or sets a value that specifies the anchor point used to place the handwriting view over the control.
    /// - Returns: An enunmeration value that specifies the anchor point used to place the handwriting view. The default is **Auto**.
    public func placementAlignment(_ value: WindowsUIXamlControls_HandwritingPanelPlacementAlignment) throws {
        try _ihandwritingView.put_PlacementAlignment(value)
    }

    /// Gets or sets the visual element or control that the handwriting view should be positioned in relation to when opened.
    /// - Returns: The visual element or control that the handwriting view should be positioned in relation to when opened. The default is **null**.
    public var placementTarget: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingView.get_PlacementTarget())
        }
    }

    /// Gets or sets the visual element or control that the handwriting view should be positioned in relation to when opened.
    /// - Returns: The visual element or control that the handwriting view should be positioned in relation to when opened. The default is **null**.
    public func placementTarget(_ value: WindowsUIXaml_UIElement?) throws {
        try _ihandwritingView.put_PlacementTarget(value)
    }

    /// Occurs when the handwriting view panel is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_HandwritingView?, WindowsUIXamlControls_HandwritingPanelClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihandwritingView.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihandwritingView.remove_Closed(token)
    }

    /// Occurs when the handwriting view panel is opened.
    public func opened(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_HandwritingView?, WindowsUIXamlControls_HandwritingPanelOpenedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihandwritingView.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihandwritingView.remove_Opened(token)
    }

    /// Attempts to close the handwriting view panel.
    /// - Returns: **true** if the handwriting view panel closed; otherwise, **false**.
    public func tryClose() throws -> Swift.Bool {
        try _ihandwritingView.tryClose()
    }

    /// Attempts to open the handwriting view panel.
    /// - Returns: **true** if the handwriting view panel opened; otherwise, **false**.
    public func tryOpen() throws -> Swift.Bool {
        try _ihandwritingView.tryOpen()
    }

    // MARK: Windows.UI.Xaml.Controls.IHandwritingView2 members

    public var inputDeviceTypes: WindowsUICore_CoreInputDeviceTypes {
        get throws {
            try _ihandwritingView2.get_InputDeviceTypes()
        }
    }

    public func inputDeviceTypes(_ value: WindowsUICore_CoreInputDeviceTypes) throws {
        try _ihandwritingView2.put_InputDeviceTypes(value)
    }

    public var isCommandBarOpen: Swift.Bool {
        get throws {
            try _ihandwritingView2.get_IsCommandBarOpen()
        }
    }

    public func isCommandBarOpen(_ value: Swift.Bool) throws {
        try _ihandwritingView2.put_IsCommandBarOpen(value)
    }

    public var isSwitchToKeyboardEnabled: Swift.Bool {
        get throws {
            try _ihandwritingView2.get_IsSwitchToKeyboardEnabled()
        }
    }

    public func isSwitchToKeyboardEnabled(_ value: Swift.Bool) throws {
        try _ihandwritingView2.put_IsSwitchToKeyboardEnabled(value)
    }

    public func candidatesChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_HandwritingView?, WindowsUIXamlControls_HandwritingViewCandidatesChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihandwritingView2.add_CandidatesChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: candidatesChanged)
    }

    public func candidatesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihandwritingView2.remove_CandidatesChanged(token)
    }

    public func textSubmitted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_HandwritingView?, WindowsUIXamlControls_HandwritingViewTextSubmittedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ihandwritingView2.add_TextSubmitted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textSubmitted)
    }

    public func textSubmitted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ihandwritingView2.remove_TextSubmitted(token)
    }

    public func getCandidates(_ candidatesSessionId: Swift.UInt32) throws -> WindowsFoundationCollections_IVectorView<Swift.String> {
        try COM.NullResult.unwrap(_ihandwritingView2.getCandidates(candidatesSessionId))
    }

    public func selectCandidate(_ candidatesSessionId: Swift.UInt32, _ selectedCandidateIndex: Swift.UInt32) throws {
        try _ihandwritingView2.selectCandidate(candidatesSessionId, selectedCandidateIndex)
    }

    // MARK: Windows.UI.Xaml.Controls.IHandwritingViewStatics members

    /// Identifies the AreCandidatesEnabled dependency property.
    /// - Returns: The identifier for the AreCandidatesEnabled dependency property.
    public static var areCandidatesEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics.get_AreCandidatesEnabledProperty())
        }
    }

    /// Identifies the IsOpen dependency property.
    /// - Returns: The identifier for the IsOpen dependency property.
    public static var isOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics.get_IsOpenProperty())
        }
    }

    /// Identifies the PlacementAlignment dependency property.
    /// - Returns: The identifier for the PlacementAlignment dependency property.
    public static var placementAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics.get_PlacementAlignmentProperty())
        }
    }

    /// Identifies the PlacementTarget dependency property.
    /// - Returns: The identifier for the PlacementTarget dependency property.
    public static var placementTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics.get_PlacementTargetProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IHandwritingViewStatics2 members

    public static var isCommandBarOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics2.get_IsCommandBarOpenProperty())
        }
    }

    public static var isSwitchToKeyboardEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ihandwritingViewStatics2.get_IsSwitchToKeyboardEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _ihandwritingView_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView>? = nil

    internal var _ihandwritingView: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView> {
        get throws {
            try _ihandwritingView_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView.self)
            }
        }
    }

    private var _ihandwritingView2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView2>? = nil

    internal var _ihandwritingView2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView2> {
        get throws {
            try _ihandwritingView2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingView>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ihandwritingView_storage?.release()
        _ihandwritingView2_storage?.release()
    }

    private static var _ihandwritingViewFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewFactory>? = nil

    internal static var _ihandwritingViewFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewFactory> {
        get throws {
            try _ihandwritingViewFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.HandwritingView", id: CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewFactory.iid)
            }
        }
    }

    private static var _ihandwritingViewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics>? = nil

    internal static var _ihandwritingViewStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics> {
        get throws {
            try _ihandwritingViewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.HandwritingView", id: CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics.iid)
            }
        }
    }

    private static var _ihandwritingViewStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics2>? = nil

    internal static var _ihandwritingViewStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics2> {
        get throws {
            try _ihandwritingViewStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.HandwritingView", id: CWinRT.SWRT_WindowsUIXamlControls_IHandwritingViewStatics2.iid)
            }
        }
    }
}