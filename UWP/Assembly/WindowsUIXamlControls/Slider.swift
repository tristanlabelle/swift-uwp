// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that lets the user select from a range of values by moving a Thumb control along a track.
open class WindowsUIXamlControls_Slider: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ISliderFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Slider.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isliderFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISlider members

    /// Gets or sets the value of the Slider while the user is interacting with it, before the value is snapped to either the tick or step value. The value the Slider snaps to is specified by the SnapsTo property.
    /// - Returns: A temporary value.
    public var intermediateValue: Swift.Double {
        get throws {
            try _islider.get_IntermediateValue()
        }
    }

    /// Gets or sets the value of the Slider while the user is interacting with it, before the value is snapped to either the tick or step value. The value the Slider snaps to is specified by the SnapsTo property.
    /// - Returns: A temporary value.
    public func intermediateValue(_ value: Swift.Double) throws {
        try _islider.put_IntermediateValue(value)
    }

    /// Gets or sets a value that indicates the direction of increasing value.
    /// - Returns: **true** if the direction of increasing value is to the left for a horizontal slider or down for a vertical slider; otherwise, **false**. The default is **false**.
    public var isDirectionReversed: Swift.Bool {
        get throws {
            try _islider.get_IsDirectionReversed()
        }
    }

    /// Gets or sets a value that indicates the direction of increasing value.
    /// - Returns: **true** if the direction of increasing value is to the left for a horizontal slider or down for a vertical slider; otherwise, **false**. The default is **false**.
    public func isDirectionReversed(_ value: Swift.Bool) throws {
        try _islider.put_IsDirectionReversed(value)
    }

    /// Gets or sets a value that determines whether the slider value is shown in a tool tip for the Thumb component of the Slider.
    /// - Returns: **True** if a tool tip is shown for the Thumb component; otherwise, **false**. The default is **true**.
    public var isThumbToolTipEnabled: Swift.Bool {
        get throws {
            try _islider.get_IsThumbToolTipEnabled()
        }
    }

    /// Gets or sets a value that determines whether the slider value is shown in a tool tip for the Thumb component of the Slider.
    /// - Returns: **True** if a tool tip is shown for the Thumb component; otherwise, **false**. The default is **true**.
    public func isThumbToolTipEnabled(_ value: Swift.Bool) throws {
        try _islider.put_IsThumbToolTipEnabled(value)
    }

    /// Gets or sets the orientation of a Slider.
    /// - Returns: One of the Orientation values. The default is **Horizontal**.
    public var orientation: WindowsUIXamlControls_Orientation {
        get throws {
            try _islider.get_Orientation()
        }
    }

    /// Gets or sets the orientation of a Slider.
    /// - Returns: One of the Orientation values. The default is **Horizontal**.
    public func orientation(_ value: WindowsUIXamlControls_Orientation) throws {
        try _islider.put_Orientation(value)
    }

    /// Gets or sets a value that indicates how the Slider conforms the thumb position to its steps or tick marks.
    /// - Returns: An enumeration value that specifies whether the Slider snaps to steps or tick marks. The default is **StepValues**.
    public var snapsTo: WindowsUIXamlControlsPrimitives_SliderSnapsTo {
        get throws {
            try _islider.get_SnapsTo()
        }
    }

    /// Gets or sets a value that indicates how the Slider conforms the thumb position to its steps or tick marks.
    /// - Returns: An enumeration value that specifies whether the Slider snaps to steps or tick marks. The default is **StepValues**.
    public func snapsTo(_ value: WindowsUIXamlControlsPrimitives_SliderSnapsTo) throws {
        try _islider.put_SnapsTo(value)
    }

    /// Gets or sets the value part of a value range that steps should be created for.
    /// - Returns: The value part of a value range that steps should be created for.
    public var stepFrequency: Swift.Double {
        get throws {
            try _islider.get_StepFrequency()
        }
    }

    /// Gets or sets the value part of a value range that steps should be created for.
    /// - Returns: The value part of a value range that steps should be created for.
    public func stepFrequency(_ value: Swift.Double) throws {
        try _islider.put_StepFrequency(value)
    }

    /// Gets or sets the converter logic that converts the range value of the Slider into tool tip content.
    /// - Returns: A converter implementation.
    public var thumbToolTipValueConverter: WindowsUIXamlData_IValueConverter {
        get throws {
            try COM.NullResult.unwrap(_islider.get_ThumbToolTipValueConverter())
        }
    }

    /// Gets or sets the converter logic that converts the range value of the Slider into tool tip content.
    /// - Returns: A converter implementation.
    public func thumbToolTipValueConverter(_ value: WindowsUIXamlData_IValueConverter?) throws {
        try _islider.put_ThumbToolTipValueConverter(value)
    }

    /// Gets or sets the increment of the value range that ticks should be created for.
    /// - Returns: The increment to create tick marks for. The default is 0.0.
    public var tickFrequency: Swift.Double {
        get throws {
            try _islider.get_TickFrequency()
        }
    }

    /// Gets or sets the increment of the value range that ticks should be created for.
    /// - Returns: The increment to create tick marks for. The default is 0.0.
    public func tickFrequency(_ value: Swift.Double) throws {
        try _islider.put_TickFrequency(value)
    }

    /// Gets or sets a value that indicates where to draw tick marks in relation to the track.
    /// - Returns: An enumeration value that specifies where to draw tick marks in relation to the track. The default is **Inline**.
    public var tickPlacement: WindowsUIXamlControlsPrimitives_TickPlacement {
        get throws {
            try _islider.get_TickPlacement()
        }
    }

    /// Gets or sets a value that indicates where to draw tick marks in relation to the track.
    /// - Returns: An enumeration value that specifies where to draw tick marks in relation to the track. The default is **Inline**.
    public func tickPlacement(_ value: WindowsUIXamlControlsPrimitives_TickPlacement) throws {
        try _islider.put_TickPlacement(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ISlider2 members

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_islider2.get_Header())
        }
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _islider2.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_islider2.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _islider2.put_HeaderTemplate(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ISliderStatics2 members

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics2.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics2.get_HeaderTemplateProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISliderStatics members

    /// Identifies the IntermediateValue dependency property.
    /// - Returns: The identifier for the IntermediateValue dependency property.
    public static var intermediateValueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_IntermediateValueProperty())
        }
    }

    /// Identifies the IsDirectionReversed dependency property.
    /// - Returns: The identifier for the IsDirectionReversed dependency property.
    public static var isDirectionReversedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_IsDirectionReversedProperty())
        }
    }

    /// Identifies the IsThumbToolTipEnabled dependency property.
    /// - Returns: The identifier for the IsThumbToolTipEnabled dependency property.
    public static var isThumbToolTipEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_IsThumbToolTipEnabledProperty())
        }
    }

    /// Identifies the Orientation dependency property.
    /// - Returns: The identifier for the Orientation dependency property.
    public static var orientationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_OrientationProperty())
        }
    }

    /// Identifies the SnapsTo dependency property.
    /// - Returns: The identifier for the SnapsTo dependency property.
    public static var snapsToProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_SnapsToProperty())
        }
    }

    /// Identifies the StepFrequency dependency property.
    /// - Returns: The identifier for the StepFrequency dependency property.
    public static var stepFrequencyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_StepFrequencyProperty())
        }
    }

    /// Identifies the ThumbToolTipValueConverter dependency property.
    /// - Returns: The identifier for the ThumbToolTipValueConverter dependency property.
    public static var thumbToolTipValueConverterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_ThumbToolTipValueConverterProperty())
        }
    }

    /// Identifies the TickFrequency dependency property.
    /// - Returns: The identifier for the TickFrequency dependency property.
    public static var tickFrequencyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_TickFrequencyProperty())
        }
    }

    /// Identifies the TickPlacement dependency property.
    /// - Returns: The identifier for the TickPlacement dependency property.
    public static var tickPlacementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isliderStatics.get_TickPlacementProperty())
        }
    }

    // MARK: Implementation details

    private var _islider_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISlider>? = nil

    internal var _islider: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISlider> {
        get throws {
            try _islider_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISlider.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISlider.self)
            }
        }
    }

    private var _islider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISlider2>? = nil

    internal var _islider2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISlider2> {
        get throws {
            try _islider2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISlider2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISlider2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ISlider>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _islider_storage?.release()
        _islider2_storage?.release()
    }

    private static var _isliderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderFactory>? = nil

    internal static var _isliderFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderFactory> {
        get throws {
            try _isliderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Slider", id: CWinRT.SWRT_WindowsUIXamlControls_ISliderFactory.iid)
            }
        }
    }

    private static var _isliderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics2>? = nil

    internal static var _isliderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics2> {
        get throws {
            try _isliderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Slider", id: CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics2.iid)
            }
        }
    }

    private static var _isliderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics>? = nil

    internal static var _isliderStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics> {
        get throws {
            try _isliderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Slider", id: CWinRT.SWRT_WindowsUIXamlControls_ISliderStatics.iid)
            }
        }
    }
}