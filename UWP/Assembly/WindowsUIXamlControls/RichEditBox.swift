// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a rich text editing control that supports formatted text, hyperlinks, and other rich content.
open class WindowsUIXamlControls_RichEditBox: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_RichEditBox.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._irichEditBoxFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox members

    /// Gets or sets a value that indicates whether the RichEditBox allows and displays the newline or return characters when the ENTER or RETURN keys are pressed.
    /// - Returns: **True** if the RichEditBox allows newline characters; otherwise, **false**. The default is **true**.
    public var acceptsReturn: Swift.Bool {
        get throws {
            try _irichEditBox.get_AcceptsReturn()
        }
    }

    /// Gets or sets a value that indicates whether the RichEditBox allows and displays the newline or return characters when the ENTER or RETURN keys are pressed.
    /// - Returns: **True** if the RichEditBox allows newline characters; otherwise, **false**. The default is **true**.
    public func acceptsReturn(_ value: Swift.Bool) throws {
        try _irichEditBox.put_AcceptsReturn(value)
    }

    /// Gets an object that enables access to the text object model for the text contained in a RichEditBox.
    /// - Returns: An object that enables access to the text object model.
    public var document: WindowsUIText_ITextDocument {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox.get_Document())
        }
    }

    /// Gets or sets the context for input used by this RichEditBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control.
    public var inputScope: WindowsUIXamlInput_InputScope {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox.get_InputScope())
        }
    }

    /// Gets or sets the context for input used by this RichEditBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control.
    public func inputScope(_ value: WindowsUIXamlInput_InputScope?) throws {
        try _irichEditBox.put_InputScope(value)
    }

    /// Gets or sets a value that indicates whether the user can change the text in the RichEditBox.
    /// - Returns: **True** if the RichEditBox is read-only; otherwise, **false**. The default is **false**.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _irichEditBox.get_IsReadOnly()
        }
    }

    /// Gets or sets a value that indicates whether the user can change the text in the RichEditBox.
    /// - Returns: **True** if the RichEditBox is read-only; otherwise, **false**. The default is **false**.
    public func isReadOnly(_ value: Swift.Bool) throws {
        try _irichEditBox.put_IsReadOnly(value)
    }

    /// Gets or sets a value that indicates whether the text input should interact with a spell check engine.
    /// - Returns: **True** if the text input should interact with a spell check engine; otherwise, **false**. The default is **true**.
    public var isSpellCheckEnabled: Swift.Bool {
        get throws {
            try _irichEditBox.get_IsSpellCheckEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the text input should interact with a spell check engine.
    /// - Returns: **True** if the text input should interact with a spell check engine; otherwise, **false**. The default is **true**.
    public func isSpellCheckEnabled(_ value: Swift.Bool) throws {
        try _irichEditBox.put_IsSpellCheckEnabled(value)
    }

    /// Gets or sets a value that indicates whether text prediction features ("autocomplete") are enabled for this RichEditBox.
    /// - Returns: **True** to enable text prediction features; otherwise, **false**. The default is **true**.
    public var isTextPredictionEnabled: Swift.Bool {
        get throws {
            try _irichEditBox.get_IsTextPredictionEnabled()
        }
    }

    /// Gets or sets a value that indicates whether text prediction features ("autocomplete") are enabled for this RichEditBox.
    /// - Returns: **True** to enable text prediction features; otherwise, **false**. The default is **true**.
    public func isTextPredictionEnabled(_ value: Swift.Bool) throws {
        try _irichEditBox.put_IsTextPredictionEnabled(value)
    }

    /// Gets or sets a value that indicates how text is aligned in the RichEditBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public var textAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _irichEditBox.get_TextAlignment()
        }
    }

    /// Gets or sets a value that indicates how text is aligned in the RichEditBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public func textAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _irichEditBox.put_TextAlignment(value)
    }

    /// Gets or sets a value that indicates how text wrapping occurs if a line of text extends beyond the available width of the RichEditBox.
    /// - Returns: One of the TextWrapping enumeration values that specifies whether text is wrapped. The default is **Wrap**.
    public var textWrapping: WindowsUIXaml_TextWrapping {
        get throws {
            try _irichEditBox.get_TextWrapping()
        }
    }

    /// Gets or sets a value that indicates how text wrapping occurs if a line of text extends beyond the available width of the RichEditBox.
    /// - Returns: One of the TextWrapping enumeration values that specifies whether text is wrapped. The default is **Wrap**.
    public func textWrapping(_ value: WindowsUIXaml_TextWrapping) throws {
        try _irichEditBox.put_TextWrapping(value)
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    public func contextMenuOpening(adding handler: WindowsUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextMenuOpening)
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox.remove_ContextMenuOpening(token)
    }

    /// Occurs when the text selection has changed.
    public func selectionChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox.remove_SelectionChanged(token)
    }

    /// Occurs when content changes in the RichEditBox.
    public func textChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox.add_TextChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textChanged)
    }

    public func textChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox.remove_TextChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox2 members

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox2.get_Header())
        }
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _irichEditBox2.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox2.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _irichEditBox2.put_HeaderTemplate(value)
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public var isColorFontEnabled: Swift.Bool {
        get throws {
            try _irichEditBox2.get_IsColorFontEnabled()
        }
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public func isColorFontEnabled(_ value: Swift.Bool) throws {
        try _irichEditBox2.put_IsColorFontEnabled(value)
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public var placeholderText: Swift.String {
        get throws {
            try _irichEditBox2.get_PlaceholderText()
        }
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public func placeholderText(_ value: Swift.String) throws {
        try _irichEditBox2.put_PlaceholderText(value)
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public var preventKeyboardDisplayOnProgrammaticFocus: Swift.Bool {
        get throws {
            try _irichEditBox2.get_PreventKeyboardDisplayOnProgrammaticFocus()
        }
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public func preventKeyboardDisplayOnProgrammaticFocus(_ value: Swift.Bool) throws {
        try _irichEditBox2.put_PreventKeyboardDisplayOnProgrammaticFocus(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default control template for RichEditBox applies a theme resource brush for this in a runtime instance of a RichEditBox control.
    public var selectionHighlightColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox2.get_SelectionHighlightColor())
        }
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default control template for RichEditBox applies a theme resource brush for this in a runtime instance of a RichEditBox control.
    public func selectionHighlightColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _irichEditBox2.put_SelectionHighlightColor(value)
    }

    /// Occurs when text is pasted into the control.
    public func paste(adding handler: WindowsUIXamlControls_TextControlPasteEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox2.add_Paste(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paste)
    }

    public func paste(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox2.remove_Paste(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox3 members

    /// Gets or sets a value that indicates the preferred alignment of the Input Method Editor (IME).
    /// - Returns: A value of the enumeration that indicates the preferred alignment of the Input Method Editor (IME). The default is **Default**.
    public var desiredCandidateWindowAlignment: WindowsUIXamlControls_CandidateWindowAlignment {
        get throws {
            try _irichEditBox3.get_DesiredCandidateWindowAlignment()
        }
    }

    /// Gets or sets a value that indicates the preferred alignment of the Input Method Editor (IME).
    /// - Returns: A value of the enumeration that indicates the preferred alignment of the Input Method Editor (IME). The default is **Default**.
    public func desiredCandidateWindowAlignment(_ value: WindowsUIXamlControls_CandidateWindowAlignment) throws {
        try _irichEditBox3.put_DesiredCandidateWindowAlignment(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the RichEditBox.
    /// - Returns: A value that indicates how the reading order is determined for the RichEditBox. The default is **DetectFromContent**.
    public var textReadingOrder: WindowsUIXaml_TextReadingOrder {
        get throws {
            try _irichEditBox3.get_TextReadingOrder()
        }
    }

    /// Gets or sets a value that indicates how the reading order is determined for the RichEditBox.
    /// - Returns: A value that indicates how the reading order is determined for the RichEditBox. The default is **DetectFromContent**.
    public func textReadingOrder(_ value: WindowsUIXaml_TextReadingOrder) throws {
        try _irichEditBox3.put_TextReadingOrder(value)
    }

    /// Occurs when the Input Method Editor (IME) window open, updates, or closes.
    public func candidateWindowBoundsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_CandidateWindowBoundsChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox3.add_CandidateWindowBoundsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: candidateWindowBoundsChanged)
    }

    public func candidateWindowBoundsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox3.remove_CandidateWindowBoundsChanged(token)
    }

    /// Occurs synchronously when the text in the edit box starts to change, but before it is rendered.
    public func textChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_RichEditBoxTextChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox3.add_TextChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textChanging)
    }

    public func textChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox3.remove_TextChanging(token)
    }

    /// Occurs when text being composed through an Input Method Editor (IME) changes.
    public func textCompositionChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_TextCompositionChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox3.add_TextCompositionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionChanged)
    }

    public func textCompositionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox3.remove_TextCompositionChanged(token)
    }

    /// Occurs when a user stops composing text through an Input Method Editor (IME).
    public func textCompositionEnded(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_TextCompositionEndedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox3.add_TextCompositionEnded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionEnded)
    }

    public func textCompositionEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox3.remove_TextCompositionEnded(token)
    }

    /// Occurs when a user starts composing text through an Input Method Editor (IME).
    public func textCompositionStarted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_TextCompositionStartedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox3.add_TextCompositionStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionStarted)
    }

    public func textCompositionStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox3.remove_TextCompositionStarted(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox4 members

    /// Gets or sets a value that specifies whether text is copied with all formats, or as plain text only.
    /// - Returns: An enumeration value that specifies whether text is copied with all formats, or as plain text only. The default is **AllFormats**.
    public var clipboardCopyFormat: WindowsUIXamlControls_RichEditClipboardFormat {
        get throws {
            try _irichEditBox4.get_ClipboardCopyFormat()
        }
    }

    /// Gets or sets a value that specifies whether text is copied with all formats, or as plain text only.
    /// - Returns: An enumeration value that specifies whether text is copied with all formats, or as plain text only. The default is **AllFormats**.
    public func clipboardCopyFormat(_ value: WindowsUIXamlControls_RichEditClipboardFormat) throws {
        try _irichEditBox4.put_ClipboardCopyFormat(value)
    }

    /// Asynchronously gets a list of candidate words based on the provided phonetic characters in an Input Method Editor (IME).
    /// - Returns: A list of candidate words based on the provided phonetic characters in an Input Method Editor (IME).
    public func getLinguisticAlternativesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<Swift.String>?> {
        try COM.NullResult.unwrap(_irichEditBox4.getLinguisticAlternativesAsync())
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox5 members

    /// Gets or sets the value that specifies the maximum number of characters allowed for user input.
    /// - Returns: The maximum number of characters allowed for user input. The default is 0 (no limit).
    public var maxLength: Swift.Int32 {
        get throws {
            try _irichEditBox5.get_MaxLength()
        }
    }

    /// Gets or sets the value that specifies the maximum number of characters allowed for user input.
    /// - Returns: The maximum number of characters allowed for user input. The default is 0 (no limit).
    public func maxLength(_ value: Swift.Int32) throws {
        try _irichEditBox5.put_MaxLength(value)
    }

    /// Gets or sets the brush used to highlight the selected text when the RichEditBox does not have focus.
    /// - Returns: The brush used to highlight the selected text when RichEditBox loses focus. The default is a null brush from a pure code perspective, but the default control template for RichEditBox applies a Transparent brush for this in a runtime instance of a RichEditBox control. To disable the SelectionHighlightColorWhenNotFocused, set the brush to Transparent once again.
    public var selectionHighlightColorWhenNotFocused: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox5.get_SelectionHighlightColorWhenNotFocused())
        }
    }

    /// Gets or sets the brush used to highlight the selected text when the RichEditBox does not have focus.
    /// - Returns: The brush used to highlight the selected text when RichEditBox loses focus. The default is a null brush from a pure code perspective, but the default control template for RichEditBox applies a Transparent brush for this in a runtime instance of a RichEditBox control. To disable the SelectionHighlightColorWhenNotFocused, set the brush to Transparent once again.
    public func selectionHighlightColorWhenNotFocused(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _irichEditBox5.put_SelectionHighlightColorWhenNotFocused(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox6 members

    /// Gets or sets a value that indicates how the control modifies the case of characters as they are typed.
    /// - Returns: A value of the enumeration that indicates how the control modifies the case of characters as they are typed. The default is **Normal**, which indicates that the charcters are not changed.
    public var characterCasing: WindowsUIXamlControls_CharacterCasing {
        get throws {
            try _irichEditBox6.get_CharacterCasing()
        }
    }

    /// Gets or sets a value that indicates how the control modifies the case of characters as they are typed.
    /// - Returns: A value of the enumeration that indicates how the control modifies the case of characters as they are typed. The default is **Normal**, which indicates that the charcters are not changed.
    public func characterCasing(_ value: WindowsUIXamlControls_CharacterCasing) throws {
        try _irichEditBox6.put_CharacterCasing(value)
    }

    /// Gets or sets a value that indicates which keyboard shortcuts for formatting are disabled.
    /// - Returns: A value that indicates which keyboard shortcuts for formatting are disabled. The default is **None**.
    public var disabledFormattingAccelerators: WindowsUIXamlControls_DisabledFormattingAccelerators {
        get throws {
            try _irichEditBox6.get_DisabledFormattingAccelerators()
        }
    }

    /// Gets or sets a value that indicates which keyboard shortcuts for formatting are disabled.
    /// - Returns: A value that indicates which keyboard shortcuts for formatting are disabled. The default is **None**.
    public func disabledFormattingAccelerators(_ value: WindowsUIXamlControls_DisabledFormattingAccelerators) throws {
        try _irichEditBox6.put_DisabledFormattingAccelerators(value)
    }

    /// Gets or sets a value that indicates how text is aligned in the RichEditBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public var horizontalTextAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _irichEditBox6.get_HorizontalTextAlignment()
        }
    }

    /// Gets or sets a value that indicates how text is aligned in the RichEditBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public func horizontalTextAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _irichEditBox6.put_HorizontalTextAlignment(value)
    }

    /// Occurs before copied text is moved to the clipboard.
    public func copyingToClipboard(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_TextControlCopyingToClipboardEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox6.add_CopyingToClipboard(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: copyingToClipboard)
    }

    public func copyingToClipboard(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox6.remove_CopyingToClipboard(token)
    }

    /// Occurs before cut text is moved to the clipboard.
    public func cuttingToClipboard(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_TextControlCuttingToClipboardEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox6.add_CuttingToClipboard(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cuttingToClipboard)
    }

    public func cuttingToClipboard(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox6.remove_CuttingToClipboard(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox7 members

    /// Get or sets the brush used to color the link background.
    /// - Returns: The brush used to color the link background.
    public var contentLinkBackgroundColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox7.get_ContentLinkBackgroundColor())
        }
    }

    /// Get or sets the brush used to color the link background.
    /// - Returns: The brush used to color the link background.
    public func contentLinkBackgroundColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _irichEditBox7.put_ContentLinkBackgroundColor(value)
    }

    /// Get or sets the brush used to color the link text.
    /// - Returns: The brush used to color the link text.
    public var contentLinkForegroundColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox7.get_ContentLinkForegroundColor())
        }
    }

    /// Get or sets the brush used to color the link text.
    /// - Returns: The brush used to color the link text.
    public func contentLinkForegroundColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _irichEditBox7.put_ContentLinkForegroundColor(value)
    }

    /// Get or sets the collection of ContentLinkProvider s that define the types of ContentLink s used in this RichEditBox.
    /// - Returns: The collection of ContentLinkProvider s that define the types of ContentLink s used in this RichEditBox.
    public var contentLinkProviders: WindowsUIXamlDocuments_ContentLinkProviderCollection {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox7.get_ContentLinkProviders())
        }
    }

    /// Get or sets the collection of ContentLinkProvider s that define the types of ContentLink s used in this RichEditBox.
    /// - Returns: The collection of ContentLinkProvider s that define the types of ContentLink s used in this RichEditBox.
    public func contentLinkProviders(_ value: WindowsUIXamlDocuments_ContentLinkProviderCollection?) throws {
        try _irichEditBox7.put_ContentLinkProviders(value)
    }

    /// Gets or sets the HandwritingView associated with this text control.
    /// - Returns: The HandwritingView associated with this text control.
    public var handwritingView: WindowsUIXamlControls_HandwritingView {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox7.get_HandwritingView())
        }
    }

    /// Gets or sets the HandwritingView associated with this text control.
    /// - Returns: The HandwritingView associated with this text control.
    public func handwritingView(_ value: WindowsUIXamlControls_HandwritingView?) throws {
        try _irichEditBox7.put_HandwritingView(value)
    }

    /// Gets or sets a value that indicates whether a user can enter text in the handwriting view.
    /// - Returns: **true** to allow the user to enter text in the handwriting view; otherwise, **false**.
    public var isHandwritingViewEnabled: Swift.Bool {
        get throws {
            try _irichEditBox7.get_IsHandwritingViewEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can enter text in the handwriting view.
    /// - Returns: **true** to allow the user to enter text in the handwriting view; otherwise, **false**.
    public func isHandwritingViewEnabled(_ value: Swift.Bool) throws {
        try _irichEditBox7.put_IsHandwritingViewEnabled(value)
    }

    /// Occurs when a content link is added, removed, or edited.
    public func contentLinkChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_ContentLinkChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox7.add_ContentLinkChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contentLinkChanged)
    }

    public func contentLinkChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox7.remove_ContentLinkChanged(token)
    }

    /// Occurs when the link is activated by user interaction.
    public func contentLinkInvoked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlDocuments_ContentLinkInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox7.add_ContentLinkInvoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contentLinkInvoked)
    }

    public func contentLinkInvoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox7.remove_ContentLinkInvoked(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBox8 members

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public var description: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox8.get_Description())
        }
    }

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public func description(_ value: WindowsRuntime.IInspectable?) throws {
        try _irichEditBox8.put_Description(value)
    }

    /// Gets the flyout that shows proofing commands.
    /// - Returns: The flyout that shows proofing commands.
    public var proofingMenuFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox8.get_ProofingMenuFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using mouse, touch, or pen; or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using mouse, touch, or pen; or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox8.get_SelectionFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using mouse, touch, or pen; or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using mouse, touch, or pen; or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _irichEditBox8.put_SelectionFlyout(value)
    }

    /// Gets an object that enables access to the text object model for the text contained in a RichEditBox.
    /// - Returns: An object that enables access to the text object model.
    public var textDocument: WindowsUIText_RichEditTextDocument {
        get throws {
            try COM.NullResult.unwrap(_irichEditBox8.get_TextDocument())
        }
    }

    /// Occurs when the text selection starts to change.
    public func selectionChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichEditBox?, WindowsUIXamlControls_RichEditBoxSelectionChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichEditBox8.add_SelectionChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanging)
    }

    public func selectionChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichEditBox8.remove_SelectionChanging(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics6 members

    /// Identifies the CharacterCasing dependency property.
    /// - Returns: The identifier for the CharacterCasing dependency property.
    public static var characterCasingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics6.get_CharacterCasingProperty())
        }
    }

    /// Identifies the DisabledFormattingAccelerators dependency property.
    /// - Returns: The identifier for the DisabledFormattingAccelerators dependency property.
    public static var disabledFormattingAcceleratorsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics6.get_DisabledFormattingAcceleratorsProperty())
        }
    }

    /// Identifies the HorizontalTextAlignment dependency property.
    /// - Returns: The identifier for the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics6.get_HorizontalTextAlignmentProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics members

    /// Identifies the AcceptsReturn dependency property.
    /// - Returns: The identifier for the AcceptsReturn dependency property.
    public static var acceptsReturnProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_AcceptsReturnProperty())
        }
    }

    /// Identifies the InputScope dependency property.
    /// - Returns: The identifier for the InputScope dependency property.
    public static var inputScopeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_InputScopeProperty())
        }
    }

    /// Identifies the IsReadOnly dependency property.
    /// - Returns: The identifier for the IsReadOnly dependency property.
    public static var isReadOnlyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_IsReadOnlyProperty())
        }
    }

    /// Identifies the IsSpellCheckEnabled dependency property.
    /// - Returns: The identifier for the IsSpellCheckEnabled dependency property.
    public static var isSpellCheckEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_IsSpellCheckEnabledProperty())
        }
    }

    /// Identifies the IsTextPredictionEnabled dependency property.
    /// - Returns: The identifier for the IsTextPredictionEnabled dependency property.
    public static var isTextPredictionEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_IsTextPredictionEnabledProperty())
        }
    }

    /// Identifies the TextAlignment dependency property.
    /// - Returns: Identifier for the TextAlignment dependency property.
    public static var textAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_TextAlignmentProperty())
        }
    }

    /// Identifies the TextWrapping dependency property.
    /// - Returns: The identifier for the TextWrapping dependency property.
    public static var textWrappingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics.get_TextWrappingProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics4 members

    /// Identifies the ClipboardCopyFormat dependency property.
    /// - Returns: The identifier for the ClipboardCopyFormat dependency property.
    public static var clipboardCopyFormatProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics4.get_ClipboardCopyFormatProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics2 members

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsColorFontEnabled dependency property.
    /// - Returns: The identifier for the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_IsColorFontEnabledProperty())
        }
    }

    /// Identifies the PlaceholderText dependency property.
    /// - Returns: The identifier for the PlaceholderText dependency property.
    public static var placeholderTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_PlaceholderTextProperty())
        }
    }

    /// Identifies the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    /// - Returns: The identifier for the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_PreventKeyboardDisplayOnProgrammaticFocusProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    /// - Returns: The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics2.get_SelectionHighlightColorProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics7 members

    /// Identifies the ContentLinkBackgroundColor dependency property.
    /// - Returns: The identifier for the ContentLinkBackgroundColor dependency property.
    public static var contentLinkBackgroundColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics7.get_ContentLinkBackgroundColorProperty())
        }
    }

    /// Identifies the ContentLinkForegroundColor dependency property.
    /// - Returns: The identifier for the ContentLinkForegroundColor dependency property.
    public static var contentLinkForegroundColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics7.get_ContentLinkForegroundColorProperty())
        }
    }

    /// Identifies the ContentLinkProviders dependency property.
    /// - Returns: The identifier for the ContentLinkProviders dependency property.
    public static var contentLinkProvidersProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics7.get_ContentLinkProvidersProperty())
        }
    }

    /// Identifies the HandwritingView dependency property.
    /// - Returns: The identifier for the HandwritingView dependency property.
    public static var handwritingViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics7.get_HandwritingViewProperty())
        }
    }

    /// Identifies the IsHandwritingViewEnabled dependency property.
    /// - Returns: The identifier for the IsHandwritingViewEnabled dependency property.
    public static var isHandwritingViewEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics7.get_IsHandwritingViewEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics8 members

    /// Identifies the Description dependency property.
    /// - Returns: The identifier for the Description dependency property.
    public static var descriptionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics8.get_DescriptionProperty())
        }
    }

    /// Identifies the ProofingMenuFlyout dependency property.
    /// - Returns: The identifier for the ProofingMenuFlyout dependency property.
    public static var proofingMenuFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics8.get_ProofingMenuFlyoutProperty())
        }
    }

    /// Identifies the SelectionFlyout dependency property.
    /// - Returns: The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics8.get_SelectionFlyoutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics5 members

    /// Identifies the **MaxLength** dependency property.
    /// - Returns: The identifier for the **MaxLength** dependency property.
    public static var maxLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics5.get_MaxLengthProperty())
        }
    }

    /// Identifies the **SelectionHighlightColorWhenNotFocused** dependency property.
    /// - Returns: The identifier for the **SelectionHighlightColorWhenNotFocused** dependency property.
    public static var selectionHighlightColorWhenNotFocusedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics5.get_SelectionHighlightColorWhenNotFocusedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichEditBoxStatics3 members

    /// Identifies the DesiredCandidateWindowAlignment dependency property.
    /// - Returns: The identifier for the DesiredCandidateWindowAlignment dependency property.
    public static var desiredCandidateWindowAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics3.get_DesiredCandidateWindowAlignmentProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    /// - Returns: The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichEditBoxStatics3.get_TextReadingOrderProperty())
        }
    }

    // MARK: Implementation details

    private var _irichEditBox_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox>? = nil

    internal var _irichEditBox: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox> {
        get throws {
            try _irichEditBox_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox.self)
            }
        }
    }

    private var _irichEditBox2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox2>? = nil

    internal var _irichEditBox2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox2> {
        get throws {
            try _irichEditBox2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox2.self)
            }
        }
    }

    private var _irichEditBox3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox3>? = nil

    internal var _irichEditBox3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox3> {
        get throws {
            try _irichEditBox3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox3.self)
            }
        }
    }

    private var _irichEditBox4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox4>? = nil

    internal var _irichEditBox4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox4> {
        get throws {
            try _irichEditBox4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox4.self)
            }
        }
    }

    private var _irichEditBox5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox5>? = nil

    internal var _irichEditBox5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox5> {
        get throws {
            try _irichEditBox5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox5.self)
            }
        }
    }

    private var _irichEditBox6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox6>? = nil

    internal var _irichEditBox6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox6> {
        get throws {
            try _irichEditBox6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox6.self)
            }
        }
    }

    private var _irichEditBox7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox7>? = nil

    internal var _irichEditBox7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox7> {
        get throws {
            try _irichEditBox7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox7.self)
            }
        }
    }

    private var _irichEditBox8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox8>? = nil

    internal var _irichEditBox8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox8> {
        get throws {
            try _irichEditBox8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox8.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox8.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBox>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _irichEditBox_storage?.release()
        _irichEditBox2_storage?.release()
        _irichEditBox3_storage?.release()
        _irichEditBox4_storage?.release()
        _irichEditBox5_storage?.release()
        _irichEditBox6_storage?.release()
        _irichEditBox7_storage?.release()
        _irichEditBox8_storage?.release()
    }

    private static var _irichEditBoxFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxFactory>? = nil

    internal static var _irichEditBoxFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxFactory> {
        get throws {
            try _irichEditBoxFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxFactory.iid)
            }
        }
    }

    private static var _irichEditBoxStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics6>? = nil

    internal static var _irichEditBoxStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics6> {
        get throws {
            try _irichEditBoxStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics6.iid)
            }
        }
    }

    private static var _irichEditBoxStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics>? = nil

    internal static var _irichEditBoxStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics> {
        get throws {
            try _irichEditBoxStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics.iid)
            }
        }
    }

    private static var _irichEditBoxStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics4>? = nil

    internal static var _irichEditBoxStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics4> {
        get throws {
            try _irichEditBoxStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics4.iid)
            }
        }
    }

    private static var _irichEditBoxStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics2>? = nil

    internal static var _irichEditBoxStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics2> {
        get throws {
            try _irichEditBoxStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics2.iid)
            }
        }
    }

    private static var _irichEditBoxStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics7>? = nil

    internal static var _irichEditBoxStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics7> {
        get throws {
            try _irichEditBoxStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics7.iid)
            }
        }
    }

    private static var _irichEditBoxStatics8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics8>? = nil

    internal static var _irichEditBoxStatics8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics8> {
        get throws {
            try _irichEditBoxStatics8_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics8.iid)
            }
        }
    }

    private static var _irichEditBoxStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics5>? = nil

    internal static var _irichEditBoxStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics5> {
        get throws {
            try _irichEditBoxStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics5.iid)
            }
        }
    }

    private static var _irichEditBoxStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics3>? = nil

    internal static var _irichEditBoxStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics3> {
        get throws {
            try _irichEditBoxStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichEditBox", id: CWinRT.SWRT_WindowsUIXamlControls_IRichEditBoxStatics3.iid)
            }
        }
    }
}