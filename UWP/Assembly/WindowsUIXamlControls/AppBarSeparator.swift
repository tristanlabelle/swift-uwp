// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a line that separates items in an AppBar or CommandBar.
open class WindowsUIXamlControls_AppBarSeparator: WindowsRuntime.WinRTComposableClass, WindowsUIXamlControls_ICommandBarElementProtocol, WindowsUIXamlControls_ICommandBarElement2Protocol {
    // MARK: Windows.UI.Xaml.Controls.IAppBarSeparatorFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_AppBarSeparator.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iappBarSeparatorFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBarElement members

    /// Gets or sets a value that indicates whether the separator is shown with reduced padding.
    /// - Returns: **True** if the separator is shown in its compact state; otherwise, **false**. The default is **false**.
    public var isCompact: Swift.Bool {
        get throws {
            try _icommandBarElement.get_IsCompact()
        }
    }

    /// Gets or sets a value that indicates whether the separator is shown with reduced padding.
    /// - Returns: **True** if the separator is shown in its compact state; otherwise, **false**. The default is **false**.
    public func isCompact(_ value: Swift.Bool) throws {
        try _icommandBarElement.put_IsCompact(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ICommandBarElement2 members

    /// Gets or sets the order in which this item is moved to the CommandBar overflow menu.
    /// - Returns: The order in which this item is moved to the overflow menu relative to other items.
    public var dynamicOverflowOrder: Swift.Int32 {
        get throws {
            try _icommandBarElement2.get_DynamicOverflowOrder()
        }
    }

    /// Gets or sets the order in which this item is moved to the CommandBar overflow menu.
    /// - Returns: The order in which this item is moved to the overflow menu relative to other items.
    public func dynamicOverflowOrder(_ value: Swift.Int32) throws {
        try _icommandBarElement2.put_DynamicOverflowOrder(value)
    }

    /// Gets a value that indicates whether this item is in the overflow menu.
    /// - Returns: **true** if this item is in the overflow menu; otherwise, **false**.
    public var isInOverflow: Swift.Bool {
        get throws {
            try _icommandBarElement2.get_IsInOverflow()
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarSeparatorStatics3 members

    /// Identifies the DynamicOverflowOrder dependency property.
    /// - Returns: The identifier for the DynamicOverflowOrder dependency property.
    public static var dynamicOverflowOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarSeparatorStatics3.get_DynamicOverflowOrderProperty())
        }
    }

    /// Identifies the IsInOverflow dependency property.
    /// - Returns: The identifier for the IsInOverflow dependency property.
    public static var isInOverflowProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarSeparatorStatics3.get_IsInOverflowProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarSeparatorStatics members

    /// Identifies the IsCompact dependency property.
    /// - Returns: The identifier for the IsCompact dependency property.
    public static var isCompactProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarSeparatorStatics.get_IsCompactProperty())
        }
    }

    // MARK: Implementation details

    private var _iappBarSeparator_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparator>? = nil

    internal var _iappBarSeparator: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparator> {
        get throws {
            try _iappBarSeparator_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparator.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparator.self)
            }
        }
    }

    private var _icommandBarElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement>? = nil

    internal var _icommandBarElement: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement> {
        get throws {
            try _icommandBarElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement.self)
            }
        }
    }

    private var _icommandBarElement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement2>? = nil

    internal var _icommandBarElement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement2> {
        get throws {
            try _icommandBarElement2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICommandBarElement2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparator>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iappBarSeparator_storage?.release()
        _icommandBarElement_storage?.release()
        _icommandBarElement2_storage?.release()
    }

    private static var _iappBarSeparatorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorFactory>? = nil

    internal static var _iappBarSeparatorFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorFactory> {
        get throws {
            try _iappBarSeparatorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBarSeparator", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorFactory.iid)
            }
        }
    }

    private static var _iappBarSeparatorStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics3>? = nil

    internal static var _iappBarSeparatorStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics3> {
        get throws {
            try _iappBarSeparatorStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBarSeparator", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics3.iid)
            }
        }
    }

    private static var _iappBarSeparatorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics>? = nil

    internal static var _iappBarSeparatorStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics> {
        get throws {
            try _iappBarSeparatorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBarSeparator", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarSeparatorStatics.iid)
            }
        }
    }
}