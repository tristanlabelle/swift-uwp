// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a container with two views; one view for the main content and another view that is typically used for navigation commands.
open class WindowsUIXamlControls_SplitView: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ISplitViewFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_SplitView.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isplitViewFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitView members

    /// Gets or sets the width of the SplitView pane in its compact display mode.
    /// - Returns: The width of the pane in it's compact display mode. The default is 48 device-independent pixel (DIP) (defined by the **SplitViewCompactPaneThemeLength** resource).
    public var compactPaneLength: Swift.Double {
        get throws {
            try _isplitView.get_CompactPaneLength()
        }
    }

    /// Gets or sets the width of the SplitView pane in its compact display mode.
    /// - Returns: The width of the pane in it's compact display mode. The default is 48 device-independent pixel (DIP) (defined by the **SplitViewCompactPaneThemeLength** resource).
    public func compactPaneLength(_ value: Swift.Double) throws {
        try _isplitView.put_CompactPaneLength(value)
    }

    /// Gets or sets the contents of the main panel of a SplitView.
    /// - Returns: The contents of the main panel of a SplitView. The default is **null**.
    public var content: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_isplitView.get_Content())
        }
    }

    /// Gets or sets the contents of the main panel of a SplitView.
    /// - Returns: The contents of the main panel of a SplitView. The default is **null**.
    public func content(_ value: WindowsUIXaml_UIElement?) throws {
        try _isplitView.put_Content(value)
    }

    /// Gets of sets a value that specifies how the pane and content areas of a SplitView are shown.
    /// - Returns: A value of the enumeration that specifies how the pane and content areas of a SplitView are shown. The default is **Overlay**.
    public var displayMode: WindowsUIXamlControls_SplitViewDisplayMode {
        get throws {
            try _isplitView.get_DisplayMode()
        }
    }

    /// Gets of sets a value that specifies how the pane and content areas of a SplitView are shown.
    /// - Returns: A value of the enumeration that specifies how the pane and content areas of a SplitView are shown. The default is **Overlay**.
    public func displayMode(_ value: WindowsUIXamlControls_SplitViewDisplayMode) throws {
        try _isplitView.put_DisplayMode(value)
    }

    /// Gets or sets a value that specifies whether the SplitView pane is expanded to its full width.
    /// - Returns: **true** if the pane is expanded to its full width; otherwise, **false**. The default is **true**.
    public var isPaneOpen: Swift.Bool {
        get throws {
            try _isplitView.get_IsPaneOpen()
        }
    }

    /// Gets or sets a value that specifies whether the SplitView pane is expanded to its full width.
    /// - Returns: **true** if the pane is expanded to its full width; otherwise, **false**. The default is **true**.
    public func isPaneOpen(_ value: Swift.Bool) throws {
        try _isplitView.put_IsPaneOpen(value)
    }

    /// Gets or sets the width of the SplitView pane when it's fully expanded.
    /// - Returns: The width of the SplitView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).
    public var openPaneLength: Swift.Double {
        get throws {
            try _isplitView.get_OpenPaneLength()
        }
    }

    /// Gets or sets the width of the SplitView pane when it's fully expanded.
    /// - Returns: The width of the SplitView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).
    public func openPaneLength(_ value: Swift.Double) throws {
        try _isplitView.put_OpenPaneLength(value)
    }

    /// Gets or sets the contents of the pane of a SplitView.
    /// - Returns: The contents of the pane of a SplitView. The default is **null**.
    public var pane: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_isplitView.get_Pane())
        }
    }

    /// Gets or sets the contents of the pane of a SplitView.
    /// - Returns: The contents of the pane of a SplitView. The default is **null**.
    public func pane(_ value: WindowsUIXaml_UIElement?) throws {
        try _isplitView.put_Pane(value)
    }

    /// Gets or sets the Brush to apply to the background of the Pane area of the control.
    /// - Returns: The Brush to apply to the background of the Pane area of the control.
    public var paneBackground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_isplitView.get_PaneBackground())
        }
    }

    /// Gets or sets the Brush to apply to the background of the Pane area of the control.
    /// - Returns: The Brush to apply to the background of the Pane area of the control.
    public func paneBackground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _isplitView.put_PaneBackground(value)
    }

    /// Gets or sets a value that specifies whether the pane is shown on the right or left side of the SplitView.
    /// - Returns: A value of the enumeration that specifies whether the pane is shown on the right or left side of the SplitView. The default is **Left**.
    public var panePlacement: WindowsUIXamlControls_SplitViewPanePlacement {
        get throws {
            try _isplitView.get_PanePlacement()
        }
    }

    /// Gets or sets a value that specifies whether the pane is shown on the right or left side of the SplitView.
    /// - Returns: A value of the enumeration that specifies whether the pane is shown on the right or left side of the SplitView. The default is **Left**.
    public func panePlacement(_ value: WindowsUIXamlControls_SplitViewPanePlacement) throws {
        try _isplitView.put_PanePlacement(value)
    }

    /// Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a SplitView control.
    /// - Returns: An object that provides calculated values for templates.
    public var templateSettings: WindowsUIXamlControlsPrimitives_SplitViewTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_isplitView.get_TemplateSettings())
        }
    }

    /// Occurs when the SplitView pane is closed.
    public func paneClosed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SplitView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isplitView.add_PaneClosed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneClosed)
    }

    public func paneClosed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isplitView.remove_PaneClosed(token)
    }

    /// Occurs when the SplitView pane is closing.
    public func paneClosing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SplitView?, WindowsUIXamlControls_SplitViewPaneClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isplitView.add_PaneClosing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneClosing)
    }

    public func paneClosing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isplitView.remove_PaneClosing(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitView2 members

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public var lightDismissOverlayMode: WindowsUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _isplitView2.get_LightDismissOverlayMode()
        }
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public func lightDismissOverlayMode(_ value: WindowsUIXamlControls_LightDismissOverlayMode) throws {
        try _isplitView2.put_LightDismissOverlayMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitView3 members

    /// Occurs when the SplitView pane is opened.
    public func paneOpened(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SplitView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isplitView3.add_PaneOpened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneOpened)
    }

    public func paneOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isplitView3.remove_PaneOpened(token)
    }

    /// Occurs when the SplitView pane is opening.
    public func paneOpening(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SplitView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isplitView3.add_PaneOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneOpening)
    }

    public func paneOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isplitView3.remove_PaneOpening(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitViewStatics members

    /// Identifies the CompactPaneLength  dependency property.
    /// - Returns: The identifier for the CompactPaneLength  dependency property.
    public static var compactPaneLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_CompactPaneLengthProperty())
        }
    }

    /// Identifies the Content  dependency property.
    /// - Returns: The identifier for the Content  dependency property.
    public static var contentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_ContentProperty())
        }
    }

    /// Identifies the DisplayMode  dependency property.
    /// - Returns: The identifier for the DisplayMode  dependency property.
    public static var displayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_DisplayModeProperty())
        }
    }

    /// Identifies the IsPaneOpen  dependency property.
    /// - Returns: The identifier for the IsPaneOpen  dependency property.
    public static var isPaneOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_IsPaneOpenProperty())
        }
    }

    /// Identifies the  OpenPaneLength dependency property.
    /// - Returns: The identifier for the OpenPaneLength  dependency property.
    public static var openPaneLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_OpenPaneLengthProperty())
        }
    }

    /// Identifies the PaneBackground  dependency property.
    /// - Returns: The identifier for the   PaneBackground dependency property.
    public static var paneBackgroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_PaneBackgroundProperty())
        }
    }

    /// Identifies the PanePlacement  dependency property.
    /// - Returns: The identifier for the   PanePlacement dependency property.
    public static var panePlacementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_PanePlacementProperty())
        }
    }

    /// Identifies the Pane  dependency property.
    /// - Returns: The identifier for the  Pane dependency property.
    public static var paneProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_PaneProperty())
        }
    }

    /// Identifies the TemplateSettings  dependency property.
    /// - Returns: The identifier for the TemplateSettings  dependency property.
    public static var templateSettingsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics.get_TemplateSettingsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitViewStatics2 members

    /// Identifies the LightDismissOverlayMode dependency property.
    /// - Returns: The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitViewStatics2.get_LightDismissOverlayModeProperty())
        }
    }

    // MARK: Implementation details

    private var _isplitView_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView>? = nil

    internal var _isplitView: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView> {
        get throws {
            try _isplitView_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISplitView.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISplitView.self)
            }
        }
    }

    private var _isplitView2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView2>? = nil

    internal var _isplitView2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView2> {
        get throws {
            try _isplitView2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISplitView2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISplitView2.self)
            }
        }
    }

    private var _isplitView3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView3>? = nil

    internal var _isplitView3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitView3> {
        get throws {
            try _isplitView3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISplitView3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISplitView3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ISplitView>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _isplitView_storage?.release()
        _isplitView2_storage?.release()
        _isplitView3_storage?.release()
    }

    private static var _isplitViewFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewFactory>? = nil

    internal static var _isplitViewFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewFactory> {
        get throws {
            try _isplitViewFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SplitView", id: CWinRT.SWRT_WindowsUIXamlControls_ISplitViewFactory.iid)
            }
        }
    }

    private static var _isplitViewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics>? = nil

    internal static var _isplitViewStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics> {
        get throws {
            try _isplitViewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SplitView", id: CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics.iid)
            }
        }
    }

    private static var _isplitViewStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics2>? = nil

    internal static var _isplitViewStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics2> {
        get throws {
            try _isplitViewStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SplitView", id: CWinRT.SWRT_WindowsUIXamlControls_ISplitViewStatics2.iid)
            }
        }
    }
}