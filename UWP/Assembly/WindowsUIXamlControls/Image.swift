// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that displays an image. The image source is specified by referring to an image file, using several supported formats. The image source can also be set with a stream. See Remarks for the list of supported image source formats.
public final class WindowsUIXamlControls_Image: WindowsRuntime.WinRTImport<WindowsUIXamlControls_ImageProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_ImageProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IImage members

    /// Gets or sets a value for a nine-grid metaphor that controls how the image can be resized. The nine-grid metaphor enables you to stretch edges and corners of an image differently than its center. See Remarks for more info and an illustration.
    /// - Returns: A Thickness value that sets the **Left**, **Top**, **Right**, **Bottom** measurements for the nine-grid resizing metaphor.
    public var nineGrid: WindowsUIXaml_Thickness {
        get throws {
            try _interop.get_NineGrid()
        }
    }

    /// Gets or sets a value for a nine-grid metaphor that controls how the image can be resized. The nine-grid metaphor enables you to stretch edges and corners of an image differently than its center. See Remarks for more info and an illustration.
    /// - Returns: A Thickness value that sets the **Left**, **Top**, **Right**, **Bottom** measurements for the nine-grid resizing metaphor.
    public func nineGrid(_ value: WindowsUIXaml_Thickness) throws {
        try _interop.put_NineGrid(value)
    }

    /// Gets the information that is transmitted if the Image is used for a Play To scenario.
    /// - Returns: A reference object that carries the Play To source information.
    public var playToSource: WindowsMediaPlayTo_PlayToSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PlayToSource())
        }
    }

    /// Gets or sets the source for the image.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public var source: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets or sets the source for the image.
    /// - Returns: An object that represents the image source file for the drawn image. Typically you set this with a BitmapImage object, constructed with the Uniform Resource Identifier (URI) that describes the path to a valid image source file. Or, you can initialize a BitmapSource with a stream, perhaps a stream from a storage file.
    public func source(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _interop.put_Source(value)
    }

    /// Gets or sets a value that describes how an Image should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source image is rendered, if the Height and/or Width of the Image are not explicitly specified. The default value is **Uniform**.
    public var stretch: WindowsUIXamlMedia_Stretch {
        get throws {
            try _interop.get_Stretch()
        }
    }

    /// Gets or sets a value that describes how an Image should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source image is rendered, if the Height and/or Width of the Image are not explicitly specified. The default value is **Uniform**.
    public func stretch(_ value: WindowsUIXamlMedia_Stretch) throws {
        try _interop.put_Stretch(value)
    }

    /// Occurs when there is an error associated with image retrieval or format.
    public func imageFailed(adding handler: WindowsUIXaml_ExceptionRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ImageFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: imageFailed)
    }

    public func imageFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ImageFailed(token)
    }

    /// Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the natural size of the image source.
    public func imageOpened(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ImageOpened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: imageOpened)
    }

    public func imageOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ImageOpened(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IImage2 members

    /// Returns the image as a CastingSource.
    /// - Returns: The image as a CastingSource.
    public func getAsCastingSource() throws -> WindowsMediaCasting_CastingSource {
        try COM.NullResult.unwrap(_iimage2.getAsCastingSource())
    }

    // MARK: Windows.UI.Xaml.Controls.IImage3 members

    /// Returns a mask that represents the alpha channel of an image as a CompositionBrush.
    /// - Returns: A mask that represents the alpha channel of an image.
    public func getAlphaMask() throws -> WindowsUIComposition_CompositionBrush {
        try COM.NullResult.unwrap(_iimage3.getAlphaMask())
    }

    // MARK: Windows.UI.Xaml.Controls.IImageStatics members

    /// Identifies the NineGrid dependency property.
    /// - Returns: The identifier for the NineGrid dependency property.
    public static var nineGridProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iimageStatics.get_NineGridProperty())
        }
    }

    /// Identifies the PlayToSource dependency property.
    /// - Returns: The identifier for the PlayToSource dependency property.
    public static var playToSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iimageStatics.get_PlayToSourceProperty())
        }
    }

    /// Identifies the Source  dependency property.
    /// - Returns: The identifier for the Source  dependency property.
    public static var sourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iimageStatics.get_SourceProperty())
        }
    }

    /// Identifies the Stretch  dependency property.
    /// - Returns: The identifier for the Stretch  dependency property.
    public static var stretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iimageStatics.get_StretchProperty())
        }
    }

    // MARK: Implementation details

    private var _iimage2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImage2>? = nil

    internal var _iimage2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImage2> {
        get throws {
            try _iimage2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IImage2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IImage2.self)
            }
        }
    }

    private var _iimage3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImage3>? = nil

    internal var _iimage3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImage3> {
        get throws {
            try _iimage3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IImage3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IImage3.self)
            }
        }
    }

    deinit {
        _iimage2_storage?.release()
        _iimage3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Image", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iimageStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImageStatics>? = nil

    internal static var _iimageStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IImageStatics> {
        get throws {
            try _iimageStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Image", id: CWinRT.SWRT_WindowsUIXamlControls_IImageStatics.iid)
            }
        }
    }
}