// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a hosting surface, where Microsoft DirectX swap chains provide content that can be rendered into a XAML UI. A SwapChainPanel element is a key component for an app that renders Microsoft DirectX graphics and then presents those visuals within a XAML page.
open class WindowsUIXamlControls_SwapChainPanel: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ISwapChainPanelFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_SwapChainPanel.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iswapChainPanelFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISwapChainPanel members

    /// Gets the x-axis scale factor of the SwapChainPanel.
    /// - Returns: The x-axis scale factor of the SwapChainPanel. A value of 1.0 means no scaling is applied.
    public var compositionScaleX: Swift.Float {
        get throws {
            try _iswapChainPanel.get_CompositionScaleX()
        }
    }

    /// Gets the y-axis scale factor of the SwapChainPanel.
    /// - Returns: The y-axis scale factor of the SwapChainPanel. A value of 1.0 means no scaling is applied.
    public var compositionScaleY: Swift.Float {
        get throws {
            try _iswapChainPanel.get_CompositionScaleY()
        }
    }

    /// Occurs when the composition scale factor of the SwapChainPanel has changed.
    public func compositionScaleChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SwapChainPanel?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iswapChainPanel.add_CompositionScaleChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: compositionScaleChanged)
    }

    public func compositionScaleChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iswapChainPanel.remove_CompositionScaleChanged(token)
    }

    /// Creates a core input object that handles the input types as specified by the *deviceTypes* parameter. This core input object can process input events on a background thread.
    /// - Parameter deviceTypes: A combined value of the enumeration.
    /// - Returns: An object that represents the input subsystem for interoperation purposes and can be used for input event connection points.
    public func createCoreIndependentInputSource(_ deviceTypes: WindowsUICore_CoreInputDeviceTypes) throws -> WindowsUICore_CoreIndependentInputSource {
        try COM.NullResult.unwrap(_iswapChainPanel.createCoreIndependentInputSource(deviceTypes))
    }

    // MARK: Windows.UI.Xaml.Controls.ISwapChainPanelStatics members

    /// Identifies the CompositionScaleX dependency property.
    /// - Returns: The identifier for the CompositionScaleX dependency property.
    public static var compositionScaleXProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iswapChainPanelStatics.get_CompositionScaleXProperty())
        }
    }

    /// Identifies the CompositionScaleY dependency property.
    /// - Returns: The identifier for the CompositionScaleY dependency property.
    public static var compositionScaleYProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iswapChainPanelStatics.get_CompositionScaleYProperty())
        }
    }

    // MARK: Implementation details

    private var _iswapChainPanel_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanel>? = nil

    internal var _iswapChainPanel: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanel> {
        get throws {
            try _iswapChainPanel_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanel.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanel.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanel>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iswapChainPanel_storage?.release()
    }

    private static var _iswapChainPanelFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelFactory>? = nil

    internal static var _iswapChainPanelFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelFactory> {
        get throws {
            try _iswapChainPanelFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SwapChainPanel", id: CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelFactory.iid)
            }
        }
    }

    private static var _iswapChainPanelStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelStatics>? = nil

    internal static var _iswapChainPanelStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelStatics> {
        get throws {
            try _iswapChainPanelStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SwapChainPanel", id: CWinRT.SWRT_WindowsUIXamlControls_ISwapChainPanelStatics.iid)
            }
        }
    }
}