// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Displays Page instances, supports navigation to new pages, and maintains a navigation history to support forward and backward navigation.
open class WindowsUIXamlControls_Frame: WindowsRuntime.WinRTComposableClass, WindowsUIXamlControls_INavigateProtocol {
    // MARK: Windows.UI.Xaml.Controls.IFrameFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Frame.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iframeFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IFrame members

    /// Gets the number of entries in the navigation back stack.
    /// - Returns: The number of entries in the navigation back stack.
    public var backStackDepth: Swift.Int32 {
        get throws {
            try _iframe.get_BackStackDepth()
        }
    }

    /// Gets or sets the number of pages in the navigation history that can be cached for the frame.
    /// - Returns: The number of pages that can be in the navigation history.
    public var cacheSize: Swift.Int32 {
        get throws {
            try _iframe.get_CacheSize()
        }
    }

    /// Gets or sets the number of pages in the navigation history that can be cached for the frame.
    /// - Returns: The number of pages that can be in the navigation history.
    public func cacheSize(_ value: Swift.Int32) throws {
        try _iframe.put_CacheSize(value)
    }

    /// Gets a value that indicates whether there is at least one entry in back navigation history.
    /// - Returns: **true** if there is at least one entry in back navigation history; **false** if there are no entries in back navigation history or the Frame does not own its own navigation history.
    public var canGoBack: Swift.Bool {
        get throws {
            try _iframe.get_CanGoBack()
        }
    }

    /// Gets a value that indicates whether there is at least one entry in forward navigation history.
    /// - Returns: **true** if there is at least one entry in forward navigation history; **false** if there are no entries in forward navigation history or the Frame does not own its own navigation history.
    public var canGoForward: Swift.Bool {
        get throws {
            try _iframe.get_CanGoForward()
        }
    }

    /// Gets a type reference for the content that is currently displayed.
    /// - Returns: A type reference for the content that is currently displayed.
    public var currentSourcePageType: WindowsUIXamlInterop_TypeName {
        get throws {
            try _iframe.get_CurrentSourcePageType()
        }
    }

    /// Gets or sets a type reference of the current content, or the content that should be navigated to.
    /// - Returns: A type reference for the current content, or the content to navigate to.
    public var sourcePageType: WindowsUIXamlInterop_TypeName {
        get throws {
            try _iframe.get_SourcePageType()
        }
    }

    /// Gets or sets a type reference of the current content, or the content that should be navigated to.
    /// - Returns: A type reference for the current content, or the content to navigate to.
    public func sourcePageType(_ value: WindowsUIXamlInterop_TypeName) throws {
        try _iframe.put_SourcePageType(value)
    }

    /// Occurs when the content that is being navigated to has been found and is available from the Content property, although it may not have completed loading.
    public func navigated(adding handler: WindowsUIXamlNavigation_NavigatedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframe.add_Navigated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: navigated)
    }

    public func navigated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframe.remove_Navigated(token)
    }

    /// Occurs when a new navigation is requested.
    public func navigating(adding handler: WindowsUIXamlNavigation_NavigatingCancelEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframe.add_Navigating(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: navigating)
    }

    public func navigating(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframe.remove_Navigating(token)
    }

    /// Occurs when an error is raised while navigating to the requested content.
    public func navigationFailed(adding handler: WindowsUIXamlNavigation_NavigationFailedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframe.add_NavigationFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: navigationFailed)
    }

    public func navigationFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframe.remove_NavigationFailed(token)
    }

    /// Occurs when 
    public func navigationStopped(adding handler: WindowsUIXamlNavigation_NavigationStoppedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframe.add_NavigationStopped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: navigationStopped)
    }

    public func navigationStopped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframe.remove_NavigationStopped(token)
    }

    /// Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history.
    public func goBack() throws {
        try _iframe.goBack()
    }

    /// Navigates to the most recent item in forward navigation history, if a Frame manages its own navigation history.
    public func goForward() throws {
        try _iframe.goForward()
    }

    /// Causes the Frame to load content represented by the specified Page, also passing a parameter to be interpreted by the target of the navigation.
    /// - Parameter sourcePageType: The page to navigate to, specified as a type reference to its partial class type. (A type reference is given as System.Type for Microsoft .NET, or a TypeName helper struct for Visual C++ component extensions (C++/CX)).
    /// - Parameter parameter: The navigation parameter to pass to the target page; must have a basic type (string, char, numeric, or GUID ) to support parameter serialization using GetNavigationState.
    /// - Returns: **false** if a NavigationFailed event handler has set Handled to **true**; otherwise, **true**. See Remarks for more info.
    public func navigate(_ sourcePageType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        try _iframe.navigate(sourcePageType, parameter)
    }

    /// Serializes the Frame navigation history into a string.
    /// - Returns: The string-form serialized navigation history. See Remarks.
    public func getNavigationState() throws -> Swift.String {
        try _iframe.getNavigationState()
    }

    /// Reads and restores the navigation history of a Frame from a provided serialization string.
    /// - Parameter navigationState: The serialization string that supplies the restore point for navigation history.
    public func setNavigationState(_ navigationState: Swift.String) throws {
        try _iframe.setNavigationState(navigationState)
    }

    // MARK: Windows.UI.Xaml.Controls.IFrame2 members

    /// Gets a collection of PageStackEntry instances representing the backward navigation history of the Frame.
    /// - Returns: The backward navigation stack.
    public var backStack: WindowsFoundationCollections_IVector<WindowsUIXamlNavigation_PageStackEntry?> {
        get throws {
            try COM.NullResult.unwrap(_iframe2.get_BackStack())
        }
    }

    /// Gets a collection of PageStackEntry instances representing the forward navigation history of the Frame.
    /// - Returns: The forward navigation stack.
    public var forwardStack: WindowsFoundationCollections_IVector<WindowsUIXamlNavigation_PageStackEntry?> {
        get throws {
            try COM.NullResult.unwrap(_iframe2.get_ForwardStack())
        }
    }

    /// Causes the Frame to load content represented by the specified Page -derived data type, also passing a parameter to be interpreted by the target of the navigation, and a value indicating the animated transition to use.
    /// - Parameter sourcePageType: The page to navigate to, specified as a type reference to its partial class type. (A type reference is given as System.Type for Microsoft .NET, or a TypeName helper struct for Visual C++ component extensions (C++/CX)).
    /// - Parameter parameter: The navigation parameter to pass to the target page; must have a basic type (string, char, numeric, or GUID ) to support parameter serialization using GetNavigationState.
    /// - Parameter infoOverride: Info about the animated transition.
    /// - Returns: **false** if a NavigationFailed event handler has set Handled to **true**; otherwise, **true**. See Remarks for more info.
    public func navigate(_ sourcePageType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ infoOverride: WindowsUIXamlMediaAnimation_NavigationTransitionInfo?) throws -> Swift.Bool {
        try _iframe2.navigate(sourcePageType, parameter, infoOverride)
    }

    // MARK: Windows.UI.Xaml.Controls.IFrame3 members

    /// Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history, and specifies the animated transition to use.
    /// - Parameter transitionInfoOverride: Info about the animated transition to use.
    public func goBack(_ transitionInfoOverride: WindowsUIXamlMediaAnimation_NavigationTransitionInfo?) throws {
        try _iframe3.goBack(transitionInfoOverride)
    }

    // MARK: Windows.UI.Xaml.Controls.IFrame4 members

    /// Reads and restores the navigation history of a Frame from a provided serialization string.
    /// - Parameter navigationState: The serialization string that supplies the restore point for navigation history.
    /// - Parameter suppressNavigate: **true** to restore navigation history without navigating to the current page; otherwise, **false**.
    public func setNavigationState(_ navigationState: Swift.String, _ suppressNavigate: Swift.Bool) throws {
        try _iframe4.setNavigationStateWithNavigationControl(navigationState, suppressNavigate)
    }

    // MARK: Windows.UI.Xaml.Controls.IFrame5 members

    /// Gets or sets a value that indicates whether navigation is recorded in the Frame's ForwardStack or BackStack.
    /// - Returns: **true** if navigation is recorded in the Frame's ForwardStack or BackStack; otherwise, **false**. The default is **true**.
    public var isNavigationStackEnabled: Swift.Bool {
        get throws {
            try _iframe5.get_IsNavigationStackEnabled()
        }
    }

    /// Gets or sets a value that indicates whether navigation is recorded in the Frame's ForwardStack or BackStack.
    /// - Returns: **true** if navigation is recorded in the Frame's ForwardStack or BackStack; otherwise, **false**. The default is **true**.
    public func isNavigationStackEnabled(_ value: Swift.Bool) throws {
        try _iframe5.put_IsNavigationStackEnabled(value)
    }

    /// Causes the Frame to load content represented by the specified Page, also passing a parameter to be interpreted by the target of the navigation.
    /// - Parameter sourcePageType: The page to navigate to, specified as a type reference to its partial class type. (A type reference is given as System.Type for Microsoft .NET, or a TypeName helper struct for Visual C++ component extensions (C++/CX)).
    /// - Parameter parameter: The navigation parameter to pass to the target page; must have a basic type (string, char, numeric, or GUID ) to support parameter serialization using GetNavigationState.
    /// - Parameter navigationOptions: Options for the navigation, including whether it is recorded in the navigation stack and what transition animation is used.
    /// - Returns: **false** if a NavigationFailed event handler has set Handled to **true**; otherwise, **true**.
    public func navigateToType(_ sourcePageType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ navigationOptions: WindowsUIXamlNavigation_FrameNavigationOptions?) throws -> Swift.Bool {
        try _iframe5.navigateToType(sourcePageType, parameter, navigationOptions)
    }

    // MARK: Windows.UI.Xaml.Controls.INavigate members

    /// Causes the Frame to load content represented by the specified Page.
    /// - Parameter sourcePageType: The page to navigate to, specified as a type reference to its partial class type. (A type reference is given as System.Type for Microsoft .NET, or a TypeName helper struct for Visual C++ component extensions (C++/CX)).
    /// - Returns: **false** if a NavigationFailed event handler has set Handled to **true**; otherwise, **true**. See Remarks for more info.
    public func navigate(_ sourcePageType: WindowsUIXamlInterop_TypeName) throws -> Swift.Bool {
        try _inavigate.navigate(sourcePageType)
    }

    // MARK: Windows.UI.Xaml.Controls.IFrameStatics members

    /// Identifies the BackStackDepth dependency property.
    /// - Returns: The identifier for the BackStackDepth dependency property.
    public static var backStackDepthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_BackStackDepthProperty())
        }
    }

    /// Identifies the CacheSize dependency property.
    /// - Returns: The identifier for the CacheSize dependency property.
    public static var cacheSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_CacheSizeProperty())
        }
    }

    /// Identifies the CanGoBack dependency property.
    /// - Returns: The identifier for the CanGoBack dependency property.
    public static var canGoBackProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_CanGoBackProperty())
        }
    }

    /// Identifies the CanGoForward dependency property.
    /// - Returns: The identifier for the CanGoForward dependency property.
    public static var canGoForwardProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_CanGoForwardProperty())
        }
    }

    /// Identifies the CurrentSourcePageType dependency property.
    /// - Returns: The identifier for the CurrentSourcePageType dependency property.
    public static var currentSourcePageTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_CurrentSourcePageTypeProperty())
        }
    }

    /// Identifies the SourcePageType dependency property.
    /// - Returns: The identifier for the SourcePageType dependency property.
    public static var sourcePageTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics.get_SourcePageTypeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IFrameStatics5 members

    /// Identifies the IsNavigationStackEnabled dependency property.
    /// - Returns: The identifier for the IsNavigationStackEnabled dependency property.
    public static var isNavigationStackEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics5.get_IsNavigationStackEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IFrameStatics2 members

    /// Identifies the BackStack dependency property.
    /// - Returns: The identifier for the BackStack dependency property.
    public static var backStackProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics2.get_BackStackProperty())
        }
    }

    /// Identifies the ForwardStack dependency property.
    /// - Returns: The identifier for the ForwardStack dependency property.
    public static var forwardStackProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeStatics2.get_ForwardStackProperty())
        }
    }

    // MARK: Implementation details

    private var _iframe_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame>? = nil

    internal var _iframe: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame> {
        get throws {
            try _iframe_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFrame.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFrame.self)
            }
        }
    }

    private var _iframe2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame2>? = nil

    internal var _iframe2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame2> {
        get throws {
            try _iframe2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFrame2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFrame2.self)
            }
        }
    }

    private var _iframe3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame3>? = nil

    internal var _iframe3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame3> {
        get throws {
            try _iframe3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFrame3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFrame3.self)
            }
        }
    }

    private var _iframe4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame4>? = nil

    internal var _iframe4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame4> {
        get throws {
            try _iframe4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFrame4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFrame4.self)
            }
        }
    }

    private var _iframe5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame5>? = nil

    internal var _iframe5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrame5> {
        get throws {
            try _iframe5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IFrame5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IFrame5.self)
            }
        }
    }

    private var _inavigate_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigate>? = nil

    internal var _inavigate: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigate> {
        get throws {
            try _inavigate_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_INavigate.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_INavigate.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IFrame>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iframe_storage?.release()
        _iframe2_storage?.release()
        _iframe3_storage?.release()
        _iframe4_storage?.release()
        _iframe5_storage?.release()
        _inavigate_storage?.release()
    }

    private static var _iframeFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameFactory>? = nil

    internal static var _iframeFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameFactory> {
        get throws {
            try _iframeFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Frame", id: CWinRT.SWRT_WindowsUIXamlControls_IFrameFactory.iid)
            }
        }
    }

    private static var _iframeStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics>? = nil

    internal static var _iframeStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics> {
        get throws {
            try _iframeStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Frame", id: CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics.iid)
            }
        }
    }

    private static var _iframeStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics5>? = nil

    internal static var _iframeStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics5> {
        get throws {
            try _iframeStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Frame", id: CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics5.iid)
            }
        }
    }

    private static var _iframeStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics2>? = nil

    internal static var _iframeStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics2> {
        get throws {
            try _iframeStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Frame", id: CWinRT.SWRT_WindowsUIXamlControls_IFrameStatics2.iid)
            }
        }
    }
}