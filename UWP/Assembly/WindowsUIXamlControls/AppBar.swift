// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the container control that holds app UI components for commanding and experiences. For Windows 10, see Remarks.
open class WindowsUIXamlControls_AppBar: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IAppBarFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_AppBar.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iappBarFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBar members

    /// Gets or sets a value that indicates whether the AppBar is open.
    /// - Returns: **true** if the app bar is open; otherwise, **false**.
    public var isOpen: Swift.Bool {
        get throws {
            try _iappBar.get_IsOpen()
        }
    }

    /// Gets or sets a value that indicates whether the AppBar is open.
    /// - Returns: **true** if the app bar is open; otherwise, **false**.
    public func isOpen(_ value: Swift.Bool) throws {
        try _iappBar.put_IsOpen(value)
    }

    /// Gets or sets a value that indicates whether the AppBar does not close on light dismiss.
    /// - Returns: **true** if the AppBar does not close on light dismiss. **false** if the AppBar is hidden on light dismiss.
    public var isSticky: Swift.Bool {
        get throws {
            try _iappBar.get_IsSticky()
        }
    }

    /// Gets or sets a value that indicates whether the AppBar does not close on light dismiss.
    /// - Returns: **true** if the AppBar does not close on light dismiss. **false** if the AppBar is hidden on light dismiss.
    public func isSticky(_ value: Swift.Bool) throws {
        try _iappBar.put_IsSticky(value)
    }

    /// Occurs when the AppBar changes from visible to hidden.
    public func closed(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iappBar.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iappBar.remove_Closed(token)
    }

    /// Occurs when the AppBar changes from hidden to visible.
    public func opened(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iappBar.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iappBar.remove_Opened(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBar2 members

    /// Gets or sets a value that indicates whether icon buttons are displayed when the app bar is not completely open.
    /// - Returns: A value that indicates whether icon buttons are displayed when the app bar is not completely open.
    public var closedDisplayMode: WindowsUIXamlControls_AppBarClosedDisplayMode {
        get throws {
            try _iappBar2.get_ClosedDisplayMode()
        }
    }

    /// Gets or sets a value that indicates whether icon buttons are displayed when the app bar is not completely open.
    /// - Returns: A value that indicates whether icon buttons are displayed when the app bar is not completely open.
    public func closedDisplayMode(_ value: WindowsUIXamlControls_AppBarClosedDisplayMode) throws {
        try _iappBar2.put_ClosedDisplayMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBar3 members

    /// Gets an object that provides calculated values that can be referenced as {TemplateBinding} markup extension sources when defining templates for an AppBar control.
    /// - Returns: An object that provides calculated values for templates.
    public var templateSettings: WindowsUIXamlControlsPrimitives_AppBarTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_iappBar3.get_TemplateSettings())
        }
    }

    /// Occurs when the AppBar starts to change from visible to hidden.
    public func closing(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iappBar3.add_Closing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closing)
    }

    public func closing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iappBar3.remove_Closing(token)
    }

    /// Occurs when the AppBar starts to change from hidden to visible.
    public func opening(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iappBar3.add_Opening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opening)
    }

    public func opening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iappBar3.remove_Opening(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBar4 members

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public var lightDismissOverlayMode: WindowsUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _iappBar4.get_LightDismissOverlayMode()
        }
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public func lightDismissOverlayMode(_ value: WindowsUIXamlControls_LightDismissOverlayMode) throws {
        try _iappBar4.put_LightDismissOverlayMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarOverrides members

    /// Invoked when the AppBar changes from visible to hidden.
    /// - Parameter e: Event data for the event.
    open func onClosed(_ e: WindowsRuntime.IInspectable?) throws {
        try _iappBarOverrides.onClosed(e)
    }

    /// Invoked when the AppBar changes from hidden to visible, or is first displayed.
    /// - Parameter e: Event data for the event.
    open func onOpened(_ e: WindowsRuntime.IInspectable?) throws {
        try _iappBarOverrides.onOpened(e)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarOverrides3 members

    /// Invoked when the AppBar starts to change from visible to hidden.
    /// - Parameter e: Event data for the event.
    open func onClosing(_ e: WindowsRuntime.IInspectable?) throws {
        try _iappBarOverrides3.onClosing(e)
    }

    /// Invoked when the AppBar starts to change from hidden to visible, or starts to be first displayed.
    /// - Parameter e: Event data for the event.
    open func onOpening(_ e: WindowsRuntime.IInspectable?) throws {
        try _iappBarOverrides3.onOpening(e)
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarStatics members

    /// Identifies the IsOpen dependency property.
    /// - Returns: The identifier for the IsOpen dependency property.
    public static var isOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarStatics.get_IsOpenProperty())
        }
    }

    /// Identifies the IsSticky dependency property.
    /// - Returns: The identifier for the IsSticky dependency property.
    public static var isStickyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarStatics.get_IsStickyProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarStatics2 members

    /// Identifies the ClosedDisplayMode dependency property.
    /// - Returns: The identifier for the ClosedDisplayMode dependency property.
    public static var closedDisplayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarStatics2.get_ClosedDisplayModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IAppBarStatics4 members

    /// Identifies the LightDismissOverlayMode dependency property.
    /// - Returns: The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iappBarStatics4.get_LightDismissOverlayModeProperty())
        }
    }

    // MARK: Implementation details

    private var _iappBar_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar>? = nil

    internal var _iappBar: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar> {
        get throws {
            try _iappBar_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBar.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBar.self)
            }
        }
    }

    private var _iappBar2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar2>? = nil

    internal var _iappBar2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar2> {
        get throws {
            try _iappBar2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBar2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBar2.self)
            }
        }
    }

    private var _iappBar3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar3>? = nil

    internal var _iappBar3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar3> {
        get throws {
            try _iappBar3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBar3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBar3.self)
            }
        }
    }

    private var _iappBar4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar4>? = nil

    internal var _iappBar4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBar4> {
        get throws {
            try _iappBar4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBar4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBar4.self)
            }
        }
    }

    private var _iappBarOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides>? = nil

    internal var _iappBarOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides> {
        get throws {
            try _iappBarOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides.self)
            }
        }
    }

    private var _iappBarOverrides3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides3>? = nil

    internal var _iappBarOverrides3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides3> {
        get throws {
            try _iappBarOverrides3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IAppBar>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iappBar_storage?.release()
        _iappBar2_storage?.release()
        _iappBar3_storage?.release()
        _iappBar4_storage?.release()
        _iappBarOverrides_storage?.release()
        _iappBarOverrides3_storage?.release()
    }

    private static var _iappBarFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarFactory>? = nil

    internal static var _iappBarFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarFactory> {
        get throws {
            try _iappBarFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBar", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarFactory.iid)
            }
        }
    }

    private static var _iappBarStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics>? = nil

    internal static var _iappBarStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics> {
        get throws {
            try _iappBarStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBar", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics.iid)
            }
        }
    }

    private static var _iappBarStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics2>? = nil

    internal static var _iappBarStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics2> {
        get throws {
            try _iappBarStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBar", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics2.iid)
            }
        }
    }

    private static var _iappBarStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics4>? = nil

    internal static var _iappBarStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics4> {
        get throws {
            try _iappBarStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.AppBar", id: CWinRT.SWRT_WindowsUIXamlControls_IAppBarStatics4.iid)
            }
        }
    }

    // MARK: Override support

    private var _iappBarOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iappBarOverrides3_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides.iid {
            if !_iappBarOverrides_outer.isInitialized {
                _iappBarOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControls_AppBarProjection.VirtualTables.iappBarOverrides)
            }
            return _iappBarOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlControls_IAppBarOverrides3.iid {
            if !_iappBarOverrides3_outer.isInitialized {
                _iappBarOverrides3_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControls_AppBarProjection.VirtualTables.iappBarOverrides3)
            }
            return _iappBarOverrides3_outer.unknownPointer.addingRef()
        }
        return nil
    }
}