// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines an area within which you can explicitly position child objects, using coordinates that are relative to the Canvas area.
open class WindowsUIXamlControls_Canvas: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ICanvasFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Canvas.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icanvasFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ICanvasStatics members

    /// Identifies the Canvas.Left XAML attached property.
    /// - Returns: The identifier for the Canvas.Left XAML attached property.
    public static var leftProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icanvasStatics.get_LeftProperty())
        }
    }

    /// Identifies the Canvas.Top XAML attached property.
    /// - Returns: The identifier for the Canvas.Top XAML attached property.
    public static var topProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icanvasStatics.get_TopProperty())
        }
    }

    /// Identifies the Canvas.ZIndex XAML attached property.
    /// - Returns: The identifier for the Canvas.ZIndex XAML attached property.
    public static var zindexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icanvasStatics.get_ZIndexProperty())
        }
    }

    /// Gets the value of the Canvas.Left XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Canvas.Left XAML attached property value of the specified object.
    public static func getLeft(_ element: WindowsUIXaml_UIElement?) throws -> Swift.Double {
        try _icanvasStatics.getLeft(element)
    }

    /// Sets the value of the Canvas.Left XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter length: The value to set.
    public static func setLeft(_ element: WindowsUIXaml_UIElement?, _ length: Swift.Double) throws {
        try _icanvasStatics.setLeft(element, length)
    }

    /// Gets the value of the Canvas.Top XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Canvas.Top XAML attached property value of the specified object.
    public static func getTop(_ element: WindowsUIXaml_UIElement?) throws -> Swift.Double {
        try _icanvasStatics.getTop(element)
    }

    /// Sets the value of the Canvas.Top XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter length: The value to set.
    public static func setTop(_ element: WindowsUIXaml_UIElement?, _ length: Swift.Double) throws {
        try _icanvasStatics.setTop(element, length)
    }

    /// Gets the value of the Canvas.ZIndex XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Canvas.ZIndex XAML attached property value of the requested object. 
    public static func getZIndex(_ element: WindowsUIXaml_UIElement?) throws -> Swift.Int32 {
        try _icanvasStatics.getZIndex(element)
    }

    /// Sets the value of the Canvas.ZIndex XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written. 
    /// - Parameter value: The value to set.
    public static func setZIndex(_ element: WindowsUIXaml_UIElement?, _ value: Swift.Int32) throws {
        try _icanvasStatics.setZIndex(element, value)
    }

    // MARK: Implementation details

    private var _icanvas_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvas>? = nil

    internal var _icanvas: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvas> {
        get throws {
            try _icanvas_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ICanvas.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ICanvas.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ICanvas>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icanvas_storage?.release()
    }

    private static var _icanvasFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvasFactory>? = nil

    internal static var _icanvasFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvasFactory> {
        get throws {
            try _icanvasFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Canvas", id: CWinRT.SWRT_WindowsUIXamlControls_ICanvasFactory.iid)
            }
        }
    }

    private static var _icanvasStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvasStatics>? = nil

    internal static var _icanvasStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ICanvasStatics> {
        get throws {
            try _icanvasStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Canvas", id: CWinRT.SWRT_WindowsUIXamlControls_ICanvasStatics.iid)
            }
        }
    }
}