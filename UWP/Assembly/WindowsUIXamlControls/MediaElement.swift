// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an object that renders audio and video to the display. See Remarks.
public final class WindowsUIXamlControls_MediaElement: WindowsRuntime.WinRTImport<WindowsUIXamlControls_MediaElementProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_MediaElementProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaElement members

    /// Gets an enumeration value that determines the current value of stereo 3-D video frame-packing mode, accounting for other factors such as whether the media engine is ready for use.
    /// - Returns: A value of the enumeration. May be **None** if media engine is not ready for use.
    public var actualStereo3DVideoPackingMode: WindowsUIXamlMedia_Stereo3DVideoPackingMode {
        get throws {
            try _interop.get_ActualStereo3DVideoPackingMode()
        }
    }

    /// Gets the height portion of the native aspect ratio of the media.
    /// - Returns: The height portion of the native aspect ratio of the media. This value holds meaning only when you compare it with the value for the AspectRatioWidth property; the two properties together describe the aspect ratio.
    public var aspectRatioHeight: Swift.Int32 {
        get throws {
            try _interop.get_AspectRatioHeight()
        }
    }

    /// Gets the width portion of the native aspect ratio of the media.
    /// - Returns: The width portion of the native aspect ratio of the media. This value holds meaning only when you compare it with the value for the AspectRatioHeight property; the two properties together describe the aspect ratio.
    public var aspectRatioWidth: Swift.Int32 {
        get throws {
            try _interop.get_AspectRatioWidth()
        }
    }

    /// Gets or sets a value that describes the purpose of the audio information in an audio stream.
    /// - Returns: A value of the enumeration.
    public var audioCategory: WindowsUIXamlMedia_AudioCategory {
        get throws {
            try _interop.get_AudioCategory()
        }
    }

    /// Gets or sets a value that describes the purpose of the audio information in an audio stream.
    /// - Returns: A value of the enumeration.
    public func audioCategory(_ value: WindowsUIXamlMedia_AudioCategory) throws {
        try _interop.put_AudioCategory(value)
    }

    /// Gets or sets a value that describes the primary usage of the device that is being used to play back audio.
    /// - Returns: A value of the enumeration.
    public var audioDeviceType: WindowsUIXamlMedia_AudioDeviceType {
        get throws {
            try _interop.get_AudioDeviceType()
        }
    }

    /// Gets or sets a value that describes the primary usage of the device that is being used to play back audio.
    /// - Returns: A value of the enumeration.
    public func audioDeviceType(_ value: WindowsUIXamlMedia_AudioDeviceType) throws {
        try _interop.put_AudioDeviceType(value)
    }

    /// Gets the number of audio streams that exist in the current media file.
    /// - Returns: The number of audio streams that exist in the source media file. The default value is 0.
    public var audioStreamCount: Swift.Int32 {
        get throws {
            try _interop.get_AudioStreamCount()
        }
    }

    /// Gets or sets the index of the audio stream that plays along with the video component. The collection of audio streams is composed at run time and represents all audio streams that are available in the media file.
    /// - Returns: The index in the media file of the audio component that plays along with the video component. The index can be unspecified, in which case the value is null. The default value is null.
    public var audioStreamIndex: Swift.Int32? {
        get throws {
            try _interop.get_AudioStreamIndex()
        }
    }

    /// Gets or sets the index of the audio stream that plays along with the video component. The collection of audio streams is composed at run time and represents all audio streams that are available in the media file.
    /// - Returns: The index in the media file of the audio component that plays along with the video component. The index can be unspecified, in which case the value is null. The default value is null.
    public func audioStreamIndex(_ value: Swift.Int32?) throws {
        try _interop.put_AudioStreamIndex(value)
    }

    /// Gets or sets a value that indicates whether media will begin playback automatically when the Source property is set.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public var autoPlay: Swift.Bool {
        get throws {
            try _interop.get_AutoPlay()
        }
    }

    /// Gets or sets a value that indicates whether media will begin playback automatically when the Source property is set.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public func autoPlay(_ value: Swift.Bool) throws {
        try _interop.put_AutoPlay(value)
    }

    /// Gets or sets a ratio of volume across stereo speakers.
    /// - Returns: The ratio of volume across speakers in the range between -1 and 1. The default value is 0.
    public var balance: Swift.Double {
        get throws {
            try _interop.get_Balance()
        }
    }

    /// Gets or sets a ratio of volume across stereo speakers.
    /// - Returns: The ratio of volume across speakers in the range between -1 and 1. The default value is 0.
    public func balance(_ value: Swift.Double) throws {
        try _interop.put_Balance(value)
    }

    /// Gets a value that indicates the current buffering progress.
    /// - Returns: The amount of buffering that is completed for media content. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage.
    public var bufferingProgress: Swift.Double {
        get throws {
            try _interop.get_BufferingProgress()
        }
    }

    /// Gets a value that indicates whether media can be paused if the Pause method is called.
    /// - Returns: **true** if the media can be paused; otherwise, **false**.
    public var canPause: Swift.Bool {
        get throws {
            try _interop.get_CanPause()
        }
    }

    /// Gets a value that indicates whether media can be repositioned by setting the value of the Position property.
    /// - Returns: **true** if the media can be repositioned; otherwise, **false**.
    public var canSeek: Swift.Bool {
        get throws {
            try _interop.get_CanSeek()
        }
    }

    /// Gets the status of this MediaElement.
    /// - Returns: The current state of this MediaElement. The state can be one of the following (as defined in the MediaElementState enumeration): **Buffering**, **Closed**, **Opening**, **Paused**, **Playing**, or **Stopped**. The default value is **Closed**.
    public var currentState: WindowsUIXamlMedia_MediaElementState {
        get throws {
            try _interop.get_CurrentState()
        }
    }

    /// Gets or sets the default playback rate for the media engine. The playback rate applies when the user isn't using fast forward or reverse.
    /// - Returns: The default playback rate. The default is 1.0, which indicates normal playback speed.
    public var defaultPlaybackRate: Swift.Double {
        get throws {
            try _interop.get_DefaultPlaybackRate()
        }
    }

    /// Gets or sets the default playback rate for the media engine. The playback rate applies when the user isn't using fast forward or reverse.
    /// - Returns: The default playback rate. The default is 1.0, which indicates normal playback speed.
    public func defaultPlaybackRate(_ value: Swift.Double) throws {
        try _interop.put_DefaultPlaybackRate(value)
    }

    /// Gets a value that indicates the amount of download completed for content located on a remote server.
    /// - Returns: A value that indicates the amount of download completed for content that is located on a remote server. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage.
    public var downloadProgress: Swift.Double {
        get throws {
            try _interop.get_DownloadProgress()
        }
    }

    /// Gets the offset of download progress, which is relevant in seek-ahead scenarios.
    /// - Returns: The offset of download progress.
    public var downloadProgressOffset: Swift.Double {
        get throws {
            try _interop.get_DownloadProgressOffset()
        }
    }

    /// Gets a value that reports whether the current source media is an audio-only media file.
    /// - Returns: **true** if the current source media is audio-only, otherwise, **false**.
    public var isAudioOnly: Swift.Bool {
        get throws {
            try _interop.get_IsAudioOnly()
        }
    }

    /// Gets or sets a value that describes whether the media source currently loaded in the media engine should automatically set the position to the media start after reaching its end.
    /// - Returns: **true** to loop the media and play continuously. **false** to not loop the media automatically. The default is **false**.
    public var isLooping: Swift.Bool {
        get throws {
            try _interop.get_IsLooping()
        }
    }

    /// Gets or sets a value that describes whether the media source currently loaded in the media engine should automatically set the position to the media start after reaching its end.
    /// - Returns: **true** to loop the media and play continuously. **false** to not loop the media automatically. The default is **false**.
    public func isLooping(_ value: Swift.Bool) throws {
        try _interop.put_IsLooping(value)
    }

    /// Gets or sets a value indicating whether the audio is muted.
    /// - Returns: **true** if audio is muted; otherwise, **false**. The default is **false**.
    public var isMuted: Swift.Bool {
        get throws {
            try _interop.get_IsMuted()
        }
    }

    /// Gets or sets a value indicating whether the audio is muted.
    /// - Returns: **true** if audio is muted; otherwise, **false**. The default is **false**.
    public func isMuted(_ value: Swift.Bool) throws {
        try _interop.put_IsMuted(value)
    }

    /// Gets a value that reports whether the current source media is a stereo 3-D video media file.
    /// - Returns: **true** if the current source media is stereo 3-D video, otherwise, **false**.
    public var isStereo3DVideo: Swift.Bool {
        get throws {
            try _interop.get_IsStereo3DVideo()
        }
    }

    /// Gets the collection of timeline markers associated with the currently loaded media file.
    /// - Returns: The collection of timeline markers (represented as TimelineMarker objects) associated with the currently loaded media file. The default is an empty collection.
    public var markers: WindowsUIXamlMedia_TimelineMarkerCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Markers())
        }
    }

    /// Gets the duration of the media file currently opened.
    /// - Returns: The natural duration of the media. The default value is a Duration structure that evaluates as Automatic, which is the value held if you query this property before MediaOpened.
    public var naturalDuration: WindowsUIXaml_Duration {
        get throws {
            try _interop.get_NaturalDuration()
        }
    }

    /// Gets the height of the video associated with the media.
    /// - Returns: The height of the video that is associated with the media, in pixels. Audio files return 0. The default is 0.
    public var naturalVideoHeight: Swift.Int32 {
        get throws {
            try _interop.get_NaturalVideoHeight()
        }
    }

    /// Gets the width of the video associated with the media.
    /// - Returns: The width of the video associated with the media. The default is 0.
    public var naturalVideoWidth: Swift.Int32 {
        get throws {
            try _interop.get_NaturalVideoWidth()
        }
    }

    /// Gets the information that is transmitted if the MediaElement is used for a "PlayTo" scenario.
    /// - Returns: A reference object that carries the "PlayTo" source information.
    public var playToSource: WindowsMediaPlayTo_PlayToSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PlayToSource())
        }
    }

    /// Gets or sets the playback rate ratio for the media engine.
    /// - Returns: The playback rate ratio for the media. A value of 1.0 is the normal playback speed. Value can be negative to play backwards.
    public var playbackRate: Swift.Double {
        get throws {
            try _interop.get_PlaybackRate()
        }
    }

    /// Gets or sets the playback rate ratio for the media engine.
    /// - Returns: The playback rate ratio for the media. A value of 1.0 is the normal playback speed. Value can be negative to play backwards.
    public func playbackRate(_ value: Swift.Double) throws {
        try _interop.put_PlaybackRate(value)
    }

    /// Gets or sets the current position of progress through the media's playback time.
    /// - Returns: The amount of time since the beginning of the media. The default is a **TimeSpan** with value "0:0:0".
    public var position: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets or sets the current position of progress through the media's playback time.
    /// - Returns: The amount of time since the beginning of the media. The default is a **TimeSpan** with value "0:0:0".
    public func position(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Position(value)
    }

    /// Gets or sets the image source that is used for a placeholder image during MediaElement loading transition states.
    /// - Returns: An image source for a transition ImageBrush that is applied to the MediaElement content area.
    public var posterSource: WindowsUIXamlMedia_ImageSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PosterSource())
        }
    }

    /// Gets or sets the image source that is used for a placeholder image during MediaElement loading transition states.
    /// - Returns: An image source for a transition ImageBrush that is applied to the MediaElement content area.
    public func posterSource(_ value: WindowsUIXamlMedia_ImageSource?) throws {
        try _interop.put_PosterSource(value)
    }

    /// Gets or sets the dedicated object for media content protection that is associated with this MediaElement.
    /// - Returns: The dedicated object for media content protection.
    public var protectionManager: WindowsMediaProtection_MediaProtectionManager {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProtectionManager())
        }
    }

    /// Gets or sets the dedicated object for media content protection that is associated with this MediaElement.
    /// - Returns: The dedicated object for media content protection.
    public func protectionManager(_ value: WindowsMediaProtection_MediaProtectionManager?) throws {
        try _interop.put_ProtectionManager(value)
    }

    /// Gets or sets a value that configures the MediaElement for real-time communications scenarios.
    /// - Returns: **true** to configure for real-time communications. **false** to not configure the MediaElement for real-time communications.
    public var realTimePlayback: Swift.Bool {
        get throws {
            try _interop.get_RealTimePlayback()
        }
    }

    /// Gets or sets a value that configures the MediaElement for real-time communications scenarios.
    /// - Returns: **true** to configure for real-time communications. **false** to not configure the MediaElement for real-time communications.
    public func realTimePlayback(_ value: Swift.Bool) throws {
        try _interop.put_RealTimePlayback(value)
    }

    /// Gets or sets a media source on the MediaElement.
    /// - Returns: The source of the element, as an object describing a Uniform Resource Identifier (URI). The default is **null**.
    public var source: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets or sets a media source on the MediaElement.
    /// - Returns: The source of the element, as an object describing a Uniform Resource Identifier (URI). The default is **null**.
    public func source(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_Source(value)
    }

    /// Gets or sets an enumeration value that determines the stereo 3-D video frame-packing mode for the current media source.
    /// - Returns: A value of the enumeration. See Remarks.
    public var stereo3DVideoPackingMode: WindowsUIXamlMedia_Stereo3DVideoPackingMode {
        get throws {
            try _interop.get_Stereo3DVideoPackingMode()
        }
    }

    /// Gets or sets an enumeration value that determines the stereo 3-D video frame-packing mode for the current media source.
    /// - Returns: A value of the enumeration. See Remarks.
    public func stereo3DVideoPackingMode(_ value: WindowsUIXamlMedia_Stereo3DVideoPackingMode) throws {
        try _interop.put_Stereo3DVideoPackingMode(value)
    }

    /// Gets or sets an enumeration value that determines the stereo 3-D video render mode for the current media source.
    /// - Returns: A value of the enumeration.
    public var stereo3DVideoRenderMode: WindowsUIXamlMedia_Stereo3DVideoRenderMode {
        get throws {
            try _interop.get_Stereo3DVideoRenderMode()
        }
    }

    /// Gets or sets an enumeration value that determines the stereo 3-D video render mode for the current media source.
    /// - Returns: A value of the enumeration.
    public func stereo3DVideoRenderMode(_ value: WindowsUIXamlMedia_Stereo3DVideoRenderMode) throws {
        try _interop.put_Stereo3DVideoRenderMode(value)
    }

    /// Gets or sets the media's volume.
    /// - Returns: The media's volume represented on a linear scale between 0 and 1. The default is 0.5.
    public var volume: Swift.Double {
        get throws {
            try _interop.get_Volume()
        }
    }

    /// Gets or sets the media's volume.
    /// - Returns: The media's volume represented on a linear scale between 0 and 1. The default is 0.5.
    public func volume(_ value: Swift.Double) throws {
        try _interop.put_Volume(value)
    }

    /// Occurs when the BufferingProgress property changes.
    public func bufferingProgressChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingProgressChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingProgressChanged)
    }

    public func bufferingProgressChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingProgressChanged(token)
    }

    /// Occurs when the value of the CurrentState property changes.
    public func currentStateChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CurrentStateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: currentStateChanged)
    }

    public func currentStateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CurrentStateChanged(token)
    }

    /// Occurs when the DownloadProgress property has changed.
    public func downloadProgressChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DownloadProgressChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: downloadProgressChanged)
    }

    public func downloadProgressChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DownloadProgressChanged(token)
    }

    /// Occurs when a timeline marker is encountered during media playback.
    public func markerReached(adding handler: WindowsUIXamlMedia_TimelineMarkerRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MarkerReached(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: markerReached)
    }

    public func markerReached(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MarkerReached(token)
    }

    /// Occurs when the MediaElement finishes playing audio or video.
    public func mediaEnded(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaEnded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaEnded)
    }

    public func mediaEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaEnded(token)
    }

    /// Occurs when there is an error associated with the media Source.
    public func mediaFailed(adding handler: WindowsUIXaml_ExceptionRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaFailed)
    }

    public func mediaFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaFailed(token)
    }

    /// Occurs when the media stream has been validated and opened, and the file headers have been read.
    public func mediaOpened(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaOpened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaOpened)
    }

    public func mediaOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaOpened(token)
    }

    /// Occurs when PlaybackRate or DefaultPlaybackRate value changes.
    public func rateChanged(adding handler: WindowsUIXamlMedia_RateChangedRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: rateChanged)
    }

    public func rateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RateChanged(token)
    }

    /// Occurs when the seek point of a requested seek operation is ready for playback. 
    public func seekCompleted(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SeekCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: seekCompleted)
    }

    public func seekCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SeekCompleted(token)
    }

    /// Occurs when the value of the Volume property changes.
    public func volumeChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VolumeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: volumeChanged)
    }

    public func volumeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VolumeChanged(token)
    }

    /// Stops and resets media to be played from the beginning.
    public func stop() throws {
        try _interop.stop()
    }

    /// Plays media from the current position.
    public func play() throws {
        try _interop.play()
    }

    /// Pauses media at the current position.
    public func pause() throws {
        try _interop.pause()
    }

    /// Returns an enumeration value that describes the likelihood that the current MediaElement and its client configuration can play that media source.
    /// - Parameter type: A string that describes the desired type as a MIME string.
    /// - Returns: A value of the enumeration that describes the likelihood that the current media engine can play the source.
    public func canPlayType(_ type: Swift.String) throws -> WindowsUIXamlMedia_MediaCanPlayResponse {
        try _interop.canPlayType(type)
    }

    /// Sets the Source property using the specified stream and MIME type.
    /// - Parameter stream: The stream that contains the media to load.
    /// - Parameter mimeType: The MIME type of the media resource, expressed as the string form typically seen in HTTP headers and requests. The empty string "" can be passed in as the *mimeType* value if the MIME type is unknown.
    public func setSource(_ stream: WindowsStorageStreams_IRandomAccessStream?, _ mimeType: Swift.String) throws {
        try _interop.setSource(stream, mimeType)
    }

    public func getAudioStreamLanguage(_ index: Swift.Int32?) throws -> Swift.String {
        try _interop.getAudioStreamLanguage(index)
    }

    /// Applies an audio effect to playback. Takes effect for the next source that is set on this MediaElement.
    /// - Parameter effectID: The identifier for the desired effect.
    /// - Parameter effectOptional: **true** if the effect shouldn't block playback when the effect can't be used at run time. **false** if the effect should block playback when the effect can't be used at run time.
    /// - Parameter effectConfiguration: A property set that transmits property values to specific effects as selected by *effectID*.
    public func addAudioEffect(_ effectID: Swift.String, _ effectOptional: Swift.Bool, _ effectConfiguration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.addAudioEffect(effectID, effectOptional, effectConfiguration)
    }

    /// Applies a video effect to playback. Takes effect for the next source that is set on this MediaElement.
    /// - Parameter effectID: The identifier for the desired effect.
    /// - Parameter effectOptional: **true** if the effect shouldn't block playback when the effect can't be used at run time. **false** if the effect should block playback when the effect can't be used at run time.
    /// - Parameter effectConfiguration: A property set that transmits property values to specific effects as selected by *effectID*.
    public func addVideoEffect(_ effectID: Swift.String, _ effectOptional: Swift.Bool, _ effectConfiguration: WindowsFoundationCollections_IPropertySet?) throws {
        try _interop.addVideoEffect(effectID, effectOptional, effectConfiguration)
    }

    /// Removes all effects for the next source set for this MediaElement.
    public func removeAllEffects() throws {
        try _interop.removeAllEffects()
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaElement2 members

    /// Gets or sets a value that determines whether the standard transport controls are enabled.
    /// - Returns: **true** if the standard transport controls are enabled; otherwise, **false**. The default is **false**.
    public var areTransportControlsEnabled: Swift.Bool {
        get throws {
            try _imediaElement2.get_AreTransportControlsEnabled()
        }
    }

    /// Gets or sets a value that determines whether the standard transport controls are enabled.
    /// - Returns: **true** if the standard transport controls are enabled; otherwise, **false**. The default is **false**.
    public func areTransportControlsEnabled(_ value: Swift.Bool) throws {
        try _imediaElement2.put_AreTransportControlsEnabled(value)
    }

    /// Gets a value that specifies if the MediaElement is rendering in full window mode. Setting this property enables or disables full window rendering.
    /// - Returns: **true** if the MediaElement is in full window mode; otherwise, **false**. The default is **false**.
    public var isFullWindow: Swift.Bool {
        get throws {
            try _imediaElement2.get_IsFullWindow()
        }
    }

    /// Gets a value that specifies if the MediaElement is rendering in full window mode. Setting this property enables or disables full window rendering.
    /// - Returns: **true** if the MediaElement is in full window mode; otherwise, **false**. The default is **false**.
    public func isFullWindow(_ value: Swift.Bool) throws {
        try _imediaElement2.put_IsFullWindow(value)
    }

    /// Gets or sets the path to the preferred media source which enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
    /// - Returns: The path to the preferred media source.
    public var playToPreferredSourceUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_imediaElement2.get_PlayToPreferredSourceUri())
        }
    }

    /// Gets or sets the path to the preferred media source which enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
    /// - Returns: The path to the preferred media source.
    public func playToPreferredSourceUri(_ value: WindowsFoundation_Uri?) throws {
        try _imediaElement2.put_PlayToPreferredSourceUri(value)
    }

    /// Gets or sets a value that describes how an MediaElement should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source visual media is rendered. The default value is **Uniform**.
    public var stretch: WindowsUIXamlMedia_Stretch {
        get throws {
            try _imediaElement2.get_Stretch()
        }
    }

    /// Gets or sets a value that describes how an MediaElement should be stretched to fill the destination rectangle.
    /// - Returns: A value of the Stretch enumeration that specifies how the source visual media is rendered. The default value is **Uniform**.
    public func stretch(_ value: WindowsUIXamlMedia_Stretch) throws {
        try _imediaElement2.put_Stretch(value)
    }

    /// Sets the Source of the MediaElement to the specified MediaStreamSource.
    /// - Parameter source: The media source.
    public func setMediaStreamSource(_ source: WindowsMediaCore_IMediaSource?) throws {
        try _imediaElement2.setMediaStreamSource(source)
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaElement3 members

    /// Gets or sets the transport controls for the media.
    /// - Returns: The transport controls for the media.
    public var transportControls: WindowsUIXamlControls_MediaTransportControls {
        get throws {
            try COM.NullResult.unwrap(_imediaElement3.get_TransportControls())
        }
    }

    /// Gets or sets the transport controls for the media.
    /// - Returns: The transport controls for the media.
    public func transportControls(_ value: WindowsUIXamlControls_MediaTransportControls?) throws {
        try _imediaElement3.put_TransportControls(value)
    }

    /// Occurs when one or more streams fails to decode in content containing multiple streams.
    public func partialMediaFailureDetected(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_MediaElement?, WindowsUIXamlMedia_PartialMediaFailureDetectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaElement3.add_PartialMediaFailureDetected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: partialMediaFailureDetected)
    }

    public func partialMediaFailureDetected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaElement3.remove_PartialMediaFailureDetected(token)
    }

    /// Sets the source of the MediaElement to the specified media playback source.
    /// - Parameter source: The media playback source.
    public func setPlaybackSource(_ source: WindowsMediaPlayback_IMediaPlaybackSource?) throws {
        try _imediaElement3.setPlaybackSource(source)
    }

    /// Returns the media element as a CastingSource.
    /// - Returns: The media element as a CastingSource.
    public func getAsCastingSource() throws -> WindowsMediaCasting_CastingSource {
        try COM.NullResult.unwrap(_imediaElement3.getAsCastingSource())
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaElementStatics2 members

    /// Identifies the AreTransportControlsEnabled dependency property.
    /// - Returns: The identifier for the AreTransportControlsEnabled dependency property.
    public static var areTransportControlsEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics2.get_AreTransportControlsEnabledProperty())
        }
    }

    /// Identifies the IsFullWindow dependency property.
    /// - Returns: The identifier for the IsFullWindow dependency property.
    public static var isFullWindowProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics2.get_IsFullWindowProperty())
        }
    }

    /// Identifies the PlayToPreferredSourceUri dependency property.
    /// - Returns: The identifier for the PlayToPreferredSourceUri dependency property.
    public static var playToPreferredSourceUriProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics2.get_PlayToPreferredSourceUriProperty())
        }
    }

    /// Identifies the Stretch dependency property.
    /// - Returns: The identifier for the Stretch dependency property.
    public static var stretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics2.get_StretchProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IMediaElementStatics members

    /// Identifies the ActualStereo3DVideoPackingMode dependency property.
    /// - Returns: The identifier for the ActualStereo3DVideoPackingMode dependency property.
    public static var actualStereo3DVideoPackingModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_ActualStereo3DVideoPackingModeProperty())
        }
    }

    /// Identifies the AspectRatioHeight  dependency property.
    /// - Returns: The identifier for the AspectRatioHeight dependency property.
    public static var aspectRatioHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AspectRatioHeightProperty())
        }
    }

    /// Identifies the AspectRatioWidth  dependency property.
    /// - Returns: The identifier for the AspectRatioWidth dependency property.
    public static var aspectRatioWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AspectRatioWidthProperty())
        }
    }

    /// Identifies the AudioCategory dependency property.
    /// - Returns: The identifier for the AudioCategory dependency property.
    public static var audioCategoryProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AudioCategoryProperty())
        }
    }

    /// Identifies the AudioDeviceType dependency property.
    /// - Returns: The identifier for the AudioDeviceType dependency property.
    public static var audioDeviceTypeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AudioDeviceTypeProperty())
        }
    }

    /// Identifies the AudioStreamCount dependency property.
    /// - Returns: The identifier for the AudioStreamCount dependency property.
    public static var audioStreamCountProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AudioStreamCountProperty())
        }
    }

    /// Identifies the AudioStreamIndex dependency property.
    /// - Returns: The identifier for the AudioStreamIndex dependency property.
    public static var audioStreamIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AudioStreamIndexProperty())
        }
    }

    /// Identifies the AutoPlay dependency property.
    /// - Returns: The identifier for the AutoPlay dependency property.
    public static var autoPlayProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_AutoPlayProperty())
        }
    }

    /// Identifies the Balance  dependency property.
    /// - Returns: The identifier for the Balance dependency property.
    public static var balanceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_BalanceProperty())
        }
    }

    /// Identifies the BufferingProgress dependency property.
    /// - Returns: The identifier for the BufferingProgress dependency property.
    public static var bufferingProgressProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_BufferingProgressProperty())
        }
    }

    /// Identifies the CanPause dependency property.
    /// - Returns: The identifier for the CanPause dependency property.
    public static var canPauseProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_CanPauseProperty())
        }
    }

    /// Identifies the CanSeek dependency property.
    /// - Returns: The identifier for the CanSeek dependency property.
    public static var canSeekProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_CanSeekProperty())
        }
    }

    /// Identifies the CurrentState dependency property.
    /// - Returns: The identifier for the CurrentState dependency property.
    public static var currentStateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_CurrentStateProperty())
        }
    }

    /// Identifies the DefaultPlaybackRate  dependency property.
    /// - Returns: The identifier for the DefaultPlaybackRate dependency property.
    public static var defaultPlaybackRateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_DefaultPlaybackRateProperty())
        }
    }

    /// Identifies the DownloadProgressOffset dependency property.
    /// - Returns: The identifier for the DownloadProgressOffset dependency property.
    public static var downloadProgressOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_DownloadProgressOffsetProperty())
        }
    }

    /// Identifies the DownloadProgress dependency property.
    /// - Returns: The identifier for the DownloadProgress dependency property.
    public static var downloadProgressProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_DownloadProgressProperty())
        }
    }

    /// Identifies the IsAudioOnly dependency property.
    /// - Returns: The identifier for the IsAudioOnly dependency property.
    public static var isAudioOnlyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_IsAudioOnlyProperty())
        }
    }

    /// Identifies the IsLooping dependency property.
    /// - Returns: The identifier for the IsLooping dependency property.
    public static var isLoopingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_IsLoopingProperty())
        }
    }

    /// Identifies the IsMuted  dependency property.
    /// - Returns: The identifier for the IsMuted dependency property.
    public static var isMutedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_IsMutedProperty())
        }
    }

    /// Identifies the IsStereo3DVideo dependency property.
    /// - Returns: The identifier for the IsStereo3DVideo dependency property.
    public static var isStereo3DVideoProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_IsStereo3DVideoProperty())
        }
    }

    /// Identifies the NaturalDuration dependency property.
    /// - Returns: The identifier for the NaturalDuration dependency property.
    public static var naturalDurationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_NaturalDurationProperty())
        }
    }

    /// Identifies the NaturalVideoHeight dependency property.
    /// - Returns: The identifier for the NaturalVideoHeight dependency property.
    public static var naturalVideoHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_NaturalVideoHeightProperty())
        }
    }

    /// Identifies the NaturalVideoWidth dependency property.
    /// - Returns: The identifier for the NaturalVideoWidth dependency property.
    public static var naturalVideoWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_NaturalVideoWidthProperty())
        }
    }

    /// Identifies the PlayToSource dependency property.
    /// - Returns: The identifier for the PlayToSource dependency property.
    public static var playToSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_PlayToSourceProperty())
        }
    }

    /// Identifies the PlaybackRate  dependency property.
    /// - Returns: The identifier for the PlaybackRate dependency property.
    public static var playbackRateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_PlaybackRateProperty())
        }
    }

    /// Identifies the Position dependency property.
    /// - Returns: The identifier the Position dependency property.
    public static var positionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_PositionProperty())
        }
    }

    /// Identifies the PosterSource dependency property.
    /// - Returns: The identifier for the PosterSource dependency property.
    public static var posterSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_PosterSourceProperty())
        }
    }

    /// Identifies the ProtectionManager dependency property.
    /// - Returns: The identifier for the ProtectionManager dependency property.
    public static var protectionManagerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_ProtectionManagerProperty())
        }
    }

    /// Identifies the RealTimePlayback dependency property.
    /// - Returns: The identifier for the RealTimePlayback dependency property.
    public static var realTimePlaybackProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_RealTimePlaybackProperty())
        }
    }

    /// Identifies the Source  dependency property.
    /// - Returns: The identifier for the Source dependency property.
    public static var sourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_SourceProperty())
        }
    }

    /// Identifies the Stereo3DVideoPackingMode dependency property.
    /// - Returns: The identifier for the Stereo3DVideoPackingMode dependency property.
    public static var stereo3DVideoPackingModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_Stereo3DVideoPackingModeProperty())
        }
    }

    /// Identifies the Stereo3DVideoRenderMode dependency property.
    /// - Returns: The identifier for the Stereo3DVideoRenderMode dependency property.
    public static var stereo3DVideoRenderModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_Stereo3DVideoRenderModeProperty())
        }
    }

    /// Identifies the Volume  dependency property.
    /// - Returns: The identifier for the Volume dependency property.
    public static var volumeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imediaElementStatics.get_VolumeProperty())
        }
    }

    // MARK: Implementation details

    private var _imediaElement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElement2>? = nil

    internal var _imediaElement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElement2> {
        get throws {
            try _imediaElement2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaElement2.self)
            }
        }
    }

    private var _imediaElement3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElement3>? = nil

    internal var _imediaElement3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElement3> {
        get throws {
            try _imediaElement3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IMediaElement3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IMediaElement3.self)
            }
        }
    }

    deinit {
        _imediaElement2_storage?.release()
        _imediaElement3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaElement", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imediaElementStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics2>? = nil

    internal static var _imediaElementStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics2> {
        get throws {
            try _imediaElementStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaElement", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics2.iid)
            }
        }
    }

    private static var _imediaElementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics>? = nil

    internal static var _imediaElementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics> {
        get throws {
            try _imediaElementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.MediaElement", id: CWinRT.SWRT_WindowsUIXamlControls_IMediaElementStatics.iid)
            }
        }
    }
}