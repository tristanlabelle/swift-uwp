// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a container with two views that size and position content in the available space, either side-by-side or top-bottom.
open class WindowsUIXamlControls_TwoPaneView: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ITwoPaneViewFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_TwoPaneView.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._itwoPaneViewFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITwoPaneView members

    /// Gets or sets the minimum height at which panes are shown in tall mode.
    /// - Returns: The minimum height at which panes are shown in tall mode.
    public var minTallModeHeight: Swift.Double {
        get throws {
            try _itwoPaneView.get_MinTallModeHeight()
        }
    }

    /// Gets or sets the minimum height at which panes are shown in tall mode.
    /// - Returns: The minimum height at which panes are shown in tall mode.
    public func minTallModeHeight(_ value: Swift.Double) throws {
        try _itwoPaneView.put_MinTallModeHeight(value)
    }

    /// Gets or sets the minimum width at which panes are shown in wide mode.
    /// - Returns: The minimum width at which panes are shown in wide mode.
    public var minWideModeWidth: Swift.Double {
        get throws {
            try _itwoPaneView.get_MinWideModeWidth()
        }
    }

    /// Gets or sets the minimum width at which panes are shown in wide mode.
    /// - Returns: The minimum width at which panes are shown in wide mode.
    public func minWideModeWidth(_ value: Swift.Double) throws {
        try _itwoPaneView.put_MinWideModeWidth(value)
    }

    /// Gets a value that indicates how panes are shown.
    /// - Returns: An enumeration value that indicates how panes are shown.
    public var mode: WindowsUIXamlControls_TwoPaneViewMode {
        get throws {
            try _itwoPaneView.get_Mode()
        }
    }

    /// Gets or sets the content of pane 1.
    /// - Returns: The content of pane 1.
    public var pane1: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneView.get_Pane1())
        }
    }

    /// Gets or sets the content of pane 1.
    /// - Returns: The content of pane 1.
    public func pane1(_ value: WindowsUIXaml_UIElement?) throws {
        try _itwoPaneView.put_Pane1(value)
    }

    /// Gets the calculated width (in wide mode) or height (in tall mode) of pane 1, or sets the GridLength value of pane 1.
    /// - Returns: The GridLength that represents the width or height of the pane.
    public var pane1Length: WindowsUIXaml_GridLength {
        get throws {
            try _itwoPaneView.get_Pane1Length()
        }
    }

    /// Gets the calculated width (in wide mode) or height (in tall mode) of pane 1, or sets the GridLength value of pane 1.
    /// - Returns: The GridLength that represents the width or height of the pane.
    public func pane1Length(_ value: WindowsUIXaml_GridLength) throws {
        try _itwoPaneView.put_Pane1Length(value)
    }

    /// Gets or sets the content of pane 2.
    /// - Returns: The content of pane 2.
    public var pane2: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneView.get_Pane2())
        }
    }

    /// Gets or sets the content of pane 2.
    /// - Returns: The content of pane 2.
    public func pane2(_ value: WindowsUIXaml_UIElement?) throws {
        try _itwoPaneView.put_Pane2(value)
    }

    /// Gets the calculated width (in wide mode) or height (in tall mode) of pane 2, or sets the GridLength value of pane 2.
    /// - Returns: The GridLength that represents the width or height of the pane.
    public var pane2Length: WindowsUIXaml_GridLength {
        get throws {
            try _itwoPaneView.get_Pane2Length()
        }
    }

    /// Gets the calculated width (in wide mode) or height (in tall mode) of pane 2, or sets the GridLength value of pane 2.
    /// - Returns: The GridLength that represents the width or height of the pane.
    public func pane2Length(_ value: WindowsUIXaml_GridLength) throws {
        try _itwoPaneView.put_Pane2Length(value)
    }

    /// Gets or sets a value that indicates which pane has priority.
    /// - Returns: An enumeration value that indicates which pane has priority.
    public var panePriority: WindowsUIXamlControls_TwoPaneViewPriority {
        get throws {
            try _itwoPaneView.get_PanePriority()
        }
    }

    /// Gets or sets a value that indicates which pane has priority.
    /// - Returns: An enumeration value that indicates which pane has priority.
    public func panePriority(_ value: WindowsUIXamlControls_TwoPaneViewPriority) throws {
        try _itwoPaneView.put_PanePriority(value)
    }

    /// Gets or sets a value that indicates how panes are shown in tall mode.
    /// - Returns: An enumeration value that indicates how panes are shown in tall mode.
    public var tallModeConfiguration: WindowsUIXamlControls_TwoPaneViewTallModeConfiguration {
        get throws {
            try _itwoPaneView.get_TallModeConfiguration()
        }
    }

    /// Gets or sets a value that indicates how panes are shown in tall mode.
    /// - Returns: An enumeration value that indicates how panes are shown in tall mode.
    public func tallModeConfiguration(_ value: WindowsUIXamlControls_TwoPaneViewTallModeConfiguration) throws {
        try _itwoPaneView.put_TallModeConfiguration(value)
    }

    /// Gets or sets a value that indicates how panes are shown in wide mode.
    /// - Returns: An enumeration value that indicates how panes are shown in wide mode.
    public var wideModeConfiguration: WindowsUIXamlControls_TwoPaneViewWideModeConfiguration {
        get throws {
            try _itwoPaneView.get_WideModeConfiguration()
        }
    }

    /// Gets or sets a value that indicates how panes are shown in wide mode.
    /// - Returns: An enumeration value that indicates how panes are shown in wide mode.
    public func wideModeConfiguration(_ value: WindowsUIXamlControls_TwoPaneViewWideModeConfiguration) throws {
        try _itwoPaneView.put_WideModeConfiguration(value)
    }

    /// Occurs when the Mode of the TwoPaneView has changed.
    public func modeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TwoPaneView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itwoPaneView.add_ModeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: modeChanged)
    }

    public func modeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itwoPaneView.remove_ModeChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ITwoPaneViewStatics members

    /// Identifies the MinTallModeHeight dependency property.
    /// - Returns: The identifier for the MinTallModeHeight dependency property.
    public static var minTallModeHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_MinTallModeHeightProperty())
        }
    }

    /// Identifies the MinWideModeWidth dependency property.
    /// - Returns: The identifier for the MinWideModeWidth dependency property.
    public static var minWideModeWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_MinWideModeWidthProperty())
        }
    }

    /// Identifies the Mode dependency property.
    /// - Returns: The identifier for the Mode dependency property.
    public static var modeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_ModeProperty())
        }
    }

    /// Identifies the Pane1Length dependency property.
    /// - Returns: The identifier for the Pane1Length dependency property.
    public static var pane1LengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_Pane1LengthProperty())
        }
    }

    /// Identifies the Pane1 dependency property.
    /// - Returns: The identifier for the Pane1 dependency property.
    public static var pane1Property: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_Pane1Property())
        }
    }

    /// Identifies the Pane2Length dependency property.
    /// - Returns: The identifier for the Pane2Length dependency property.
    public static var pane2LengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_Pane2LengthProperty())
        }
    }

    /// Identifies the Pane2 dependency property.
    /// - Returns: The identifier for the Pane2 dependency property.
    public static var pane2Property: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_Pane2Property())
        }
    }

    /// Identifies the PanePriority dependency property.
    /// - Returns: The identifier for the PanePriority dependency property.
    public static var panePriorityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_PanePriorityProperty())
        }
    }

    /// Identifies the TallModeConfiguration dependency property.
    /// - Returns: The identifier for the TallModeConfiguration dependency property.
    public static var tallModeConfigurationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_TallModeConfigurationProperty())
        }
    }

    /// Identifies the WideModeConfiguration dependency property.
    /// - Returns: The identifier for the WideModeConfiguration dependency property.
    public static var wideModeConfigurationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itwoPaneViewStatics.get_WideModeConfigurationProperty())
        }
    }

    // MARK: Implementation details

    private var _itwoPaneView_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneView>? = nil

    internal var _itwoPaneView: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneView> {
        get throws {
            try _itwoPaneView_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneView.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneView.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneView>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _itwoPaneView_storage?.release()
    }

    private static var _itwoPaneViewFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewFactory>? = nil

    internal static var _itwoPaneViewFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewFactory> {
        get throws {
            try _itwoPaneViewFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TwoPaneView", id: CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewFactory.iid)
            }
        }
    }

    private static var _itwoPaneViewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewStatics>? = nil

    internal static var _itwoPaneViewStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewStatics> {
        get throws {
            try _itwoPaneViewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TwoPaneView", id: CWinRT.SWRT_WindowsUIXamlControls_ITwoPaneViewStatics.iid)
            }
        }
    }
}