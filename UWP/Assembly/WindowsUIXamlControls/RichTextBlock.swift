// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a rich text display container that supports formatted text, hyperlinks, inline images, and other rich content. RichTextBlock supports a built-in overflow model.
public final class WindowsUIXamlControls_RichTextBlock: WindowsRuntime.WinRTImport<WindowsUIXamlControls_RichTextBlockProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_RichTextBlockProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock members

    /// Gets a value that represents the offset in pixels from the top of the content to the baseline of the first paragraph. The baseline of the paragraph is the baseline of the first line in it.
    /// - Returns: The computed baseline for the first paragraph, or 0 if the RichTextBlock is empty.
    public var baselineOffset: Swift.Double {
        get throws {
            try _interop.get_BaselineOffset()
        }
    }

    /// Gets the contents of the RichTextBlock.
    /// - Returns: A BlockCollection that contains the contents of the RichTextBlock.
    public var blocks: WindowsUIXamlDocuments_BlockCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Blocks())
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _interop.get_CharacterSpacing()
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _interop.put_CharacterSpacing(value)
    }

    /// Gets a TextPointer that indicates the end of content in the RichTextBlock.
    /// - Returns: A TextPointer that indicates the end of content in the RichTextBlock.
    public var contentEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentEnd())
        }
    }

    /// Gets a TextPointer that indicates the start of content in the RichTextBlock.
    /// - Returns: A TextPointer that indicates the start of content in the RichTextBlock.
    public var contentStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ContentStart())
        }
    }

    /// Gets or sets the preferred top-level font family for the text content in this element.
    /// - Returns: A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public var fontFamily: WindowsUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FontFamily())
        }
    }

    /// Gets or sets the preferred top-level font family for the text content in this element.
    /// - Returns: A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public func fontFamily(_ value: WindowsUIXamlMedia_FontFamily?) throws {
        try _interop.put_FontFamily(value)
    }

    /// Gets or sets the font size for the text content in this element.
    /// - Returns: A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public var fontSize: Swift.Double {
        get throws {
            try _interop.get_FontSize()
        }
    }

    /// Gets or sets the font size for the text content in this element.
    /// - Returns: A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public func fontSize(_ value: Swift.Double) throws {
        try _interop.put_FontSize(value)
    }

    /// Gets or sets the font stretch for the text content in this element.
    /// - Returns: The requested font stretch, as a FontStretch constant. The default is Normal.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _interop.get_FontStretch()
        }
    }

    /// Gets or sets the font stretch for the text content in this element.
    /// - Returns: The requested font stretch, as a FontStretch constant. The default is Normal.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _interop.put_FontStretch(value)
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: The requested font style, which is a FontStyle enumeration named constant. The default is Normal.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _interop.get_FontStyle()
        }
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: The requested font style, which is a FontStyle enumeration named constant. The default is Normal.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _interop.put_FontStyle(value)
    }

    /// Gets or sets the top-level font weight for the RichTextBlock.
    /// - Returns: The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _interop.get_FontWeight()
        }
    }

    /// Gets or sets the top-level font weight for the RichTextBlock.
    /// - Returns: The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _interop.put_FontWeight(value)
    }

    /// Gets or sets the Brush to apply to the text contents of the RichTextBlock.
    /// - Returns: The brush used to apply to the text contents. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for **Light** theme) or White (for **Dark** theme) for a TextBlock element in UI.
    public var foreground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Foreground())
        }
    }

    /// Gets or sets the Brush to apply to the text contents of the RichTextBlock.
    /// - Returns: The brush used to apply to the text contents. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for **Light** theme) or White (for **Dark** theme) for a TextBlock element in UI.
    public func foreground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _interop.put_Foreground(value)
    }

    /// Gets a value that indicates whether the RichTextBlock has content that extends beyond its bounds, that can provide content to an OverflowContentTarget element.
    /// - Returns: **True** if the RichTextBlock has content that extends beyond its bounds; otherwise, **false**.
    public var hasOverflowContent: Swift.Bool {
        get throws {
            try _interop.get_HasOverflowContent()
        }
    }

    /// Gets or sets a value that determines whether text content of the RichTextBlock can be selected for clipboard or drag purposes, or for UI styling changes that indicate selected text.
    /// - Returns: **true** if text content of the RichTextBlock can be selected for clipboard or drag purposes. **false** if text cannot be selected. The default is **true**.
    public var isTextSelectionEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsTextSelectionEnabled()
        }
    }

    /// Gets or sets a value that determines whether text content of the RichTextBlock can be selected for clipboard or drag purposes, or for UI styling changes that indicate selected text.
    /// - Returns: **true** if text content of the RichTextBlock can be selected for clipboard or drag purposes. **false** if text cannot be selected. The default is **true**.
    public func isTextSelectionEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsTextSelectionEnabled(value)
    }

    /// Gets or sets the height of each line of content.
    /// - Returns: The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public var lineHeight: Swift.Double {
        get throws {
            try _interop.get_LineHeight()
        }
    }

    /// Gets or sets the height of each line of content.
    /// - Returns: The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public func lineHeight(_ value: Swift.Double) throws {
        try _interop.put_LineHeight(value)
    }

    /// Gets or sets a value that indicates how a line box is determined for each line of text in the RichTextBlock.
    /// - Returns: A value that indicates how a line box is determined for each line of text in the RichTextBlock. The default is **MaxHeight**.
    public var lineStackingStrategy: WindowsUIXaml_LineStackingStrategy {
        get throws {
            try _interop.get_LineStackingStrategy()
        }
    }

    /// Gets or sets a value that indicates how a line box is determined for each line of text in the RichTextBlock.
    /// - Returns: A value that indicates how a line box is determined for each line of text in the RichTextBlock. The default is **MaxHeight**.
    public func lineStackingStrategy(_ value: WindowsUIXaml_LineStackingStrategy) throws {
        try _interop.put_LineStackingStrategy(value)
    }

    /// Gets or sets a reference to a RichTextBlockOverflow that is the linked target for any text overflow from this RichTextBlock.
    /// - Returns: The target for overflow.
    public var overflowContentTarget: WindowsUIXamlControls_RichTextBlockOverflow {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OverflowContentTarget())
        }
    }

    /// Gets or sets a reference to a RichTextBlockOverflow that is the linked target for any text overflow from this RichTextBlock.
    /// - Returns: The target for overflow.
    public func overflowContentTarget(_ value: WindowsUIXamlControls_RichTextBlockOverflow?) throws {
        try _interop.put_OverflowContentTarget(value)
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a RichTextBlock.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public var padding: WindowsUIXaml_Thickness {
        get throws {
            try _interop.get_Padding()
        }
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a RichTextBlock.
    /// - Returns: A Thickness structure that specifies the amount of padding to apply.
    public func padding(_ value: WindowsUIXaml_Thickness) throws {
        try _interop.put_Padding(value)
    }

    /// Gets a text range of selected text.
    /// - Returns: A text range of the selected text.
    public var selectedText: Swift.String {
        get throws {
            try _interop.get_SelectedText()
        }
    }

    /// Gets the end position of the text selected in the RichTextBlock.
    /// - Returns: An object that represents the selection end, or null if no selection exists.
    public var selectionEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SelectionEnd())
        }
    }

    /// Gets the starting position of the text selected in the RichTextBlock.
    /// - Returns: An object that represents the selection start, or **null** if no selection exists.
    public var selectionStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SelectionStart())
        }
    }

    /// Gets or sets a value that indicates how the text is aligned in the RichTextBlock.
    /// - Returns: One of the TextAlignment enumeration values that indicates how text is aligned. The default is **Left**.
    public var textAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _interop.get_TextAlignment()
        }
    }

    /// Gets or sets a value that indicates how the text is aligned in the RichTextBlock.
    /// - Returns: One of the TextAlignment enumeration values that indicates how text is aligned. The default is **Left**.
    public func textAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _interop.put_TextAlignment(value)
    }

    /// Gets or sets the indentation of the first line of text in each paragraph in the RichTextBlock.
    /// - Returns: The offset amount of the first line of text in a paragraph.
    public var textIndent: Swift.Double {
        get throws {
            try _interop.get_TextIndent()
        }
    }

    /// Gets or sets the indentation of the first line of text in each paragraph in the RichTextBlock.
    /// - Returns: The offset amount of the first line of text in a paragraph.
    public func textIndent(_ value: Swift.Double) throws {
        try _interop.put_TextIndent(value)
    }

    /// Gets or sets a value that indicates how text is trimmed when it overflows the content area.
    /// - Returns: One of the TextTrimming enumeration values that specifies the text trimming behavior to use. The default is **None**.
    public var textTrimming: WindowsUIXaml_TextTrimming {
        get throws {
            try _interop.get_TextTrimming()
        }
    }

    /// Gets or sets a value that indicates how text is trimmed when it overflows the content area.
    /// - Returns: One of the TextTrimming enumeration values that specifies the text trimming behavior to use. The default is **None**.
    public func textTrimming(_ value: WindowsUIXaml_TextTrimming) throws {
        try _interop.put_TextTrimming(value)
    }

    /// Gets or sets a value that indicates whether text wrapping occurs if a line of text extends beyond the available width of the RichTextBlock.
    /// - Returns: One of the TextWrapping enumeration values that specifies whether text is wrapped. The default is **Wrap**.
    public var textWrapping: WindowsUIXaml_TextWrapping {
        get throws {
            try _interop.get_TextWrapping()
        }
    }

    /// Gets or sets a value that indicates whether text wrapping occurs if a line of text extends beyond the available width of the RichTextBlock.
    /// - Returns: One of the TextWrapping enumeration values that specifies whether text is wrapped. The default is **Wrap**.
    public func textWrapping(_ value: WindowsUIXaml_TextWrapping) throws {
        try _interop.put_TextWrapping(value)
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    public func contextMenuOpening(adding handler: WindowsUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextMenuOpening)
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ContextMenuOpening(token)
    }

    /// Occurs when the text selection has changed.
    public func selectionChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SelectionChanged(token)
    }

    /// Selects the entire contents in the RichTextBlock.
    public func selectAll() throws {
        try _interop.selectAll()
    }

    /// Selects a range of text in the RichTextBlock.
    /// - Parameter start: An object that represents the start of the range to select.
    /// - Parameter end: An object that represents the end of the range to select.
    public func select(_ start: WindowsUIXamlDocuments_TextPointer?, _ end: WindowsUIXamlDocuments_TextPointer?) throws {
        try _interop.select(start, end)
    }

    /// Returns a TextPointer text reference from a RichTextBlock by hit-testing a specific Point within the text display area.
    /// - Parameter point: The point to test.
    /// - Returns: The determined text reference.
    public func getPositionFromPoint(_ point: WindowsFoundation_Point) throws -> WindowsUIXamlDocuments_TextPointer {
        try COM.NullResult.unwrap(_interop.getPositionFromPoint(point))
    }

    /// Focuses the RichTextBlock, as if it were a conventionally focusable control.
    /// - Parameter value: Specifies the desired target for focus state, as a value of the enumeration.
    /// - Returns: **true** if focus was set to the RichTextBlock, or focus was already there. **false** if the RichTextBlock is not focusable.
    public func focus(_ value: WindowsUIXaml_FocusState) throws -> Swift.Bool {
        try _interop.focus(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock2 members

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public var isColorFontEnabled: Swift.Bool {
        get throws {
            try _irichTextBlock2.get_IsColorFontEnabled()
        }
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public func isColorFontEnabled(_ value: Swift.Bool) throws {
        try _irichTextBlock2.put_IsColorFontEnabled(value)
    }

    /// Gets or sets the maximum lines of text shown in the RichTextBlock.
    /// - Returns: The maximum lines of text shown in the RichTextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public var maxLines: Swift.Int32 {
        get throws {
            try _irichTextBlock2.get_MaxLines()
        }
    }

    /// Gets or sets the maximum lines of text shown in the RichTextBlock.
    /// - Returns: The maximum lines of text shown in the RichTextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public func maxLines(_ value: Swift.Int32) throws {
        try _irichTextBlock2.put_MaxLines(value)
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    /// - Returns: A value of the enumeration that indicates how the font is modified to align at different sizes. The default is **None**.
    public var opticalMarginAlignment: WindowsUIXaml_OpticalMarginAlignment {
        get throws {
            try _irichTextBlock2.get_OpticalMarginAlignment()
        }
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    /// - Returns: A value of the enumeration that indicates how the font is modified to align at different sizes. The default is **None**.
    public func opticalMarginAlignment(_ value: WindowsUIXaml_OpticalMarginAlignment) throws {
        try _irichTextBlock2.put_OpticalMarginAlignment(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default text styles for RichTextBlock content apply a theme resource brush for this in a runtime instance of a RichTextBlock control.
    public var selectionHighlightColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlock2.get_SelectionHighlightColor())
        }
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the default text styles for RichTextBlock content apply a theme resource brush for this in a runtime instance of a RichTextBlock control.
    public func selectionHighlightColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _irichTextBlock2.put_SelectionHighlightColor(value)
    }

    /// Gets or sets a value that indicates how the line box height is determined for each line of text in the RichTextBlock.
    /// - Returns: A value that indicates how the line box height is determined for each line of text in the RichTextBlock. The default is **Full**.
    public var textLineBounds: WindowsUIXaml_TextLineBounds {
        get throws {
            try _irichTextBlock2.get_TextLineBounds()
        }
    }

    /// Gets or sets a value that indicates how the line box height is determined for each line of text in the RichTextBlock.
    /// - Returns: A value that indicates how the line box height is determined for each line of text in the RichTextBlock. The default is **Full**.
    public func textLineBounds(_ value: WindowsUIXaml_TextLineBounds) throws {
        try _irichTextBlock2.put_TextLineBounds(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the RichTextBlock.
    /// - Returns: A value that indicates how the reading order is determined for the RichTextBlock. The default is **DetectFromContent**.
    public var textReadingOrder: WindowsUIXaml_TextReadingOrder {
        get throws {
            try _irichTextBlock2.get_TextReadingOrder()
        }
    }

    /// Gets or sets a value that indicates how the reading order is determined for the RichTextBlock.
    /// - Returns: A value that indicates how the reading order is determined for the RichTextBlock. The default is **DetectFromContent**.
    public func textReadingOrder(_ value: WindowsUIXaml_TextReadingOrder) throws {
        try _irichTextBlock2.put_TextReadingOrder(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock3 members

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _irichTextBlock3.get_IsTextScaleFactorEnabled()
        }
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _irichTextBlock3.put_IsTextScaleFactorEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock4 members

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public var textDecorations: WindowsUIText_TextDecorations {
        get throws {
            try _irichTextBlock4.get_TextDecorations()
        }
    }

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public func textDecorations(_ value: WindowsUIText_TextDecorations) throws {
        try _irichTextBlock4.put_TextDecorations(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock5 members

    /// Gets or sets a value that indicates how text is aligned in the RichTextBlock.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public var horizontalTextAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _irichTextBlock5.get_HorizontalTextAlignment()
        }
    }

    /// Gets or sets a value that indicates how text is aligned in the RichTextBlock.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public func horizontalTextAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _irichTextBlock5.put_HorizontalTextAlignment(value)
    }

    /// Gets a value that indicates whether the control has trimmed text that overflows the content area.
    /// - Returns: **true** if text is trimmed; otherwise, **false**.
    public var isTextTrimmed: Swift.Bool {
        get throws {
            try _irichTextBlock5.get_IsTextTrimmed()
        }
    }

    /// Gets the collection of text highlights.
    /// - Returns: The collection of text highlights.
    public var textHighlighters: WindowsFoundationCollections_IVector<WindowsUIXamlDocuments_TextHighlighter?> {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlock5.get_TextHighlighters())
        }
    }

    /// Occurs when the IsTextTrimmed property value has changed.
    public func isTextTrimmedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_RichTextBlock?, WindowsUIXamlControls_IsTextTrimmedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irichTextBlock5.add_IsTextTrimmedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isTextTrimmedChanged)
    }

    public func isTextTrimmedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irichTextBlock5.remove_IsTextTrimmedChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlock6 members

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlock6.get_SelectionFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _irichTextBlock6.put_SelectionFlyout(value)
    }

    /// Copies the selected content to the Windows clipboard.
    public func copySelectionToClipboard() throws {
        try _irichTextBlock6.copySelectionToClipboard()
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics members

    /// Identifies the CharacterSpacing dependency property.
    /// - Returns: The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the FontFamily  dependency property.
    /// - Returns: The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontSize  dependency property.
    /// - Returns: The identifier for the FontSize dependency property.
    public static var fontSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontStretch  dependency property.
    /// - Returns: The identifier for the FontStretch dependency property.
    public static var fontStretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStyle  dependency property.
    /// - Returns: The identifier for the FontStyle dependency property.
    public static var fontStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontWeight  dependency property.
    /// - Returns: The identifier for the FontWeight dependency property.
    public static var fontWeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the Foreground  dependency property.
    /// - Returns: The identifier for the Foreground dependency property.
    public static var foregroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the HasOverflowContent dependency property.
    /// - Returns: The identifier for the HasOverflowContent dependency property.
    public static var hasOverflowContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_HasOverflowContentProperty())
        }
    }

    /// Identifies the IsTextSelectionEnabled dependency property.
    /// - Returns: The identifier for the IsTextSelectionEnabled dependency property.
    public static var isTextSelectionEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_IsTextSelectionEnabledProperty())
        }
    }

    /// Identifies the LineHeight  dependency property.
    /// - Returns: The identifier for the LineHeight dependency property.
    public static var lineHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_LineHeightProperty())
        }
    }

    /// Identifies the LineStackingStrategy  dependency property.
    /// - Returns: The identifier for the LineStackingStrategy dependency property.
    public static var lineStackingStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_LineStackingStrategyProperty())
        }
    }

    /// Identifies the OverflowContentTarget dependency property.
    /// - Returns: The identifier for the OverflowContentTarget dependency property.
    public static var overflowContentTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_OverflowContentTargetProperty())
        }
    }

    /// Identifies the Padding  dependency property.
    /// - Returns: The identifier for the Padding dependency property.
    public static var paddingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_PaddingProperty())
        }
    }

    /// Identifies the SelectedText dependency property.
    /// - Returns: The identifier for the SelectedText dependency property.
    public static var selectedTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_SelectedTextProperty())
        }
    }

    /// Identifies the TextAlignment dependency property.
    /// - Returns: Identifier for the TextAlignment dependency property.
    public static var textAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_TextAlignmentProperty())
        }
    }

    /// Identifies the TextIndent dependency property.
    /// - Returns: The identifier of the TextIndent dependency property.
    public static var textIndentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_TextIndentProperty())
        }
    }

    /// Identifies the TextTrimming dependency property.
    /// - Returns: The identifier of the TextTrimming dependency property.
    public static var textTrimmingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_TextTrimmingProperty())
        }
    }

    /// Identifies the TextWrapping dependency property.
    /// - Returns: The identifier for the TextWrapping dependency property.
    public static var textWrappingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics.get_TextWrappingProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics4 members

    /// Identifies the **TextDecorations** dependency property.
    /// - Returns: The identifier for the **TextDecorations** dependency property.
    public static var textDecorationsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics4.get_TextDecorationsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics6 members

    /// Identifies the SelectionFlyout dependency property.
    /// - Returns: The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics6.get_SelectionFlyoutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics5 members

    /// Identifies the HorizontalTextAlignment dependency property.
    /// - Returns: The identifier for the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics5.get_HorizontalTextAlignmentProperty())
        }
    }

    /// Identifies the IsTextTrimmed dependency property.
    /// - Returns: The identifier for the IsTextTrimmed dependency property.
    public static var isTextTrimmedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics5.get_IsTextTrimmedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics3 members

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    /// - Returns: The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics3.get_IsTextScaleFactorEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IRichTextBlockStatics2 members

    /// Identifies the IsColorFontEnabled dependency property.
    /// - Returns: The identifier for the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_IsColorFontEnabledProperty())
        }
    }

    /// Identifies the MaxLines dependency property.
    /// - Returns: The identifier for the MaxLines dependency property.
    public static var maxLinesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_MaxLinesProperty())
        }
    }

    /// Identifies the OpticalMarginAlignment dependency property.
    /// - Returns: The identifier for the OpticalMarginAlignment dependency property.
    public static var opticalMarginAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_OpticalMarginAlignmentProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    /// - Returns: The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_SelectionHighlightColorProperty())
        }
    }

    /// Identifies the TextLineBounds dependency property.
    /// - Returns: The identifier for the TextLineBounds dependency property.
    public static var textLineBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_TextLineBoundsProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    /// - Returns: The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irichTextBlockStatics2.get_TextReadingOrderProperty())
        }
    }

    // MARK: Implementation details

    private var _irichTextBlock2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock2>? = nil

    internal var _irichTextBlock2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock2> {
        get throws {
            try _irichTextBlock2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock2.self)
            }
        }
    }

    private var _irichTextBlock3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock3>? = nil

    internal var _irichTextBlock3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock3> {
        get throws {
            try _irichTextBlock3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock3.self)
            }
        }
    }

    private var _irichTextBlock4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock4>? = nil

    internal var _irichTextBlock4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock4> {
        get throws {
            try _irichTextBlock4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock4.self)
            }
        }
    }

    private var _irichTextBlock5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock5>? = nil

    internal var _irichTextBlock5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock5> {
        get throws {
            try _irichTextBlock5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock5.self)
            }
        }
    }

    private var _irichTextBlock6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock6>? = nil

    internal var _irichTextBlock6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock6> {
        get throws {
            try _irichTextBlock6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlock6.self)
            }
        }
    }

    deinit {
        _irichTextBlock2_storage?.release()
        _irichTextBlock3_storage?.release()
        _irichTextBlock4_storage?.release()
        _irichTextBlock5_storage?.release()
        _irichTextBlock6_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _irichTextBlockStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics>? = nil

    internal static var _irichTextBlockStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics> {
        get throws {
            try _irichTextBlockStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics.iid)
            }
        }
    }

    private static var _irichTextBlockStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics4>? = nil

    internal static var _irichTextBlockStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics4> {
        get throws {
            try _irichTextBlockStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics4.iid)
            }
        }
    }

    private static var _irichTextBlockStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics6>? = nil

    internal static var _irichTextBlockStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics6> {
        get throws {
            try _irichTextBlockStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics6.iid)
            }
        }
    }

    private static var _irichTextBlockStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics5>? = nil

    internal static var _irichTextBlockStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics5> {
        get throws {
            try _irichTextBlockStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics5.iid)
            }
        }
    }

    private static var _irichTextBlockStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics3>? = nil

    internal static var _irichTextBlockStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics3> {
        get throws {
            try _irichTextBlockStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics3.iid)
            }
        }
    }

    private static var _irichTextBlockStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics2>? = nil

    internal static var _irichTextBlockStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics2> {
        get throws {
            try _irichTextBlockStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.RichTextBlock", id: CWinRT.SWRT_WindowsUIXamlControls_IRichTextBlockStatics2.iid)
            }
        }
    }
}