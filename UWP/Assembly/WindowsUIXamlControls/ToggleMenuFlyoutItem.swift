// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an item in a MenuFlyout that a user can change between two states, checked or unchecked.
open class WindowsUIXamlControls_ToggleMenuFlyoutItem: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_ToggleMenuFlyoutItem.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._itoggleMenuFlyoutItemFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleMenuFlyoutItem members

    /// Gets or sets whether the ToggleMenuFlyoutItem is checked.
    /// - Returns: **true** if the ToggleMenuFlyoutItem is checked; **false** if the ToggleMenuFlyoutItem is unchecked. The default is **false**.
    public var isChecked: Swift.Bool {
        get throws {
            try _itoggleMenuFlyoutItem.get_IsChecked()
        }
    }

    /// Gets or sets whether the ToggleMenuFlyoutItem is checked.
    /// - Returns: **true** if the ToggleMenuFlyoutItem is checked; **false** if the ToggleMenuFlyoutItem is unchecked. The default is **false**.
    public func isChecked(_ value: Swift.Bool) throws {
        try _itoggleMenuFlyoutItem.put_IsChecked(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IToggleMenuFlyoutItemStatics members

    /// Identifies the IsChecked dependency property.
    /// - Returns: The identifier for the IsChecked dependency property.
    public static var isCheckedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itoggleMenuFlyoutItemStatics.get_IsCheckedProperty())
        }
    }

    // MARK: Implementation details

    private var _itoggleMenuFlyoutItem_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItem>? = nil

    internal var _itoggleMenuFlyoutItem: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItem> {
        get throws {
            try _itoggleMenuFlyoutItem_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItem.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItem.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItem>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _itoggleMenuFlyoutItem_storage?.release()
    }

    private static var _itoggleMenuFlyoutItemFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemFactory>? = nil

    internal static var _itoggleMenuFlyoutItemFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemFactory> {
        get throws {
            try _itoggleMenuFlyoutItemFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem", id: CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemFactory.iid)
            }
        }
    }

    private static var _itoggleMenuFlyoutItemStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemStatics>? = nil

    internal static var _itoggleMenuFlyoutItemStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemStatics> {
        get throws {
            try _itoggleMenuFlyoutItemStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem", id: CWinRT.SWRT_WindowsUIXamlControls_IToggleMenuFlyoutItemStatics.iid)
            }
        }
    }
}