// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a button with two parts that can be invoked separately. One part behaves like a standard button and the other part invokes a flyout.
open class WindowsUIXamlControls_SplitButton: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ISplitButtonFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_SplitButton.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._isplitButtonFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitButton members

    /// Gets or sets the command to invoke when this button is pressed.
    /// - Returns: The command to invoke when this button is pressed. The default is **null**.
    public var command: WindowsUIXamlInput_ICommand {
        get throws {
            try COM.NullResult.unwrap(_isplitButton.get_Command())
        }
    }

    /// Gets or sets the command to invoke when this button is pressed.
    /// - Returns: The command to invoke when this button is pressed. The default is **null**.
    public func command(_ value: WindowsUIXamlInput_ICommand?) throws {
        try _isplitButton.put_Command(value)
    }

    /// Gets or sets the parameter to pass to the Command property.
    /// - Returns: The parameter to pass to the Command property. The default is **null**.
    public var commandParameter: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_isplitButton.get_CommandParameter())
        }
    }

    /// Gets or sets the parameter to pass to the Command property.
    /// - Returns: The parameter to pass to the Command property. The default is **null**.
    public func commandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        try _isplitButton.put_CommandParameter(value)
    }

    /// Gets or sets the flyout associated with this button.
    /// - Returns: The flyout associated with this button. The default is **null**.
    public var flyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_isplitButton.get_Flyout())
        }
    }

    /// Gets or sets the flyout associated with this button.
    /// - Returns: The flyout associated with this button. The default is **null**.
    public func flyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _isplitButton.put_Flyout(value)
    }

    /// Occurs when a button control is clicked.
    public func click(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_SplitButton?, WindowsUIXamlControls_SplitButtonClickEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isplitButton.add_Click(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: click)
    }

    public func click(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isplitButton.remove_Click(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ISplitButtonStatics members

    /// Identifies the CommandParameter dependency property.
    /// - Returns: The identifier for the CommandParameter dependency property.
    public static var commandParameterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitButtonStatics.get_CommandParameterProperty())
        }
    }

    /// Identifies the Command dependency property.
    /// - Returns: The identifier for the Command dependency property.
    public static var commandProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitButtonStatics.get_CommandProperty())
        }
    }

    /// Identifies the Flyout dependency property.
    /// - Returns: The identifier for the Flyout dependency property.
    public static var flyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isplitButtonStatics.get_FlyoutProperty())
        }
    }

    // MARK: Implementation details

    private var _isplitButton_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButton>? = nil

    internal var _isplitButton: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButton> {
        get throws {
            try _isplitButton_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ISplitButton.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ISplitButton.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ISplitButton>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _isplitButton_storage?.release()
    }

    private static var _isplitButtonFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonFactory>? = nil

    internal static var _isplitButtonFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonFactory> {
        get throws {
            try _isplitButtonFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SplitButton", id: CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonFactory.iid)
            }
        }
    }

    private static var _isplitButtonStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonStatics>? = nil

    internal static var _isplitButtonStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonStatics> {
        get throws {
            try _isplitButtonStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.SplitButton", id: CWinRT.SWRT_WindowsUIXamlControls_ISplitButtonStatics.iid)
            }
        }
    }
}