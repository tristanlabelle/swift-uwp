// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a container that enables navigation of app content. It has a header, a view for the main content, and a menu pane for navigation commands.
open class WindowsUIXamlControls_NavigationView: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.INavigationViewFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_NavigationView.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._inavigationViewFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationView members

    /// Gets or sets a value that indicates whether the header is always visible.
    /// - Returns: **true** if the header is always visible; otherwise, **false**. The default is **true**.
    public var alwaysShowHeader: Swift.Bool {
        get throws {
            try _inavigationView.get_AlwaysShowHeader()
        }
    }

    /// Gets or sets a value that indicates whether the header is always visible.
    /// - Returns: **true** if the header is always visible; otherwise, **false**. The default is **true**.
    public func alwaysShowHeader(_ value: Swift.Bool) throws {
        try _inavigationView.put_AlwaysShowHeader(value)
    }

    /// Gets or sets an AutoSuggestBox to be displayed in the NavigationView.
    /// - Returns: An AutoSuggestBox box to be displayed in the NavigationView.
    public var autoSuggestBox: WindowsUIXamlControls_AutoSuggestBox {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_AutoSuggestBox())
        }
    }

    /// Gets or sets an AutoSuggestBox to be displayed in the NavigationView.
    /// - Returns: An AutoSuggestBox box to be displayed in the NavigationView.
    public func autoSuggestBox(_ value: WindowsUIXamlControls_AutoSuggestBox?) throws {
        try _inavigationView.put_AutoSuggestBox(value)
    }

    /// Gets or sets the minimum window width at which the NavigationView enters Compact display mode.
    /// - Returns: The minimum window width at which the NavigationView enters Compact display mode. The default is 641 pixels.
    public var compactModeThresholdWidth: Swift.Double {
        get throws {
            try _inavigationView.get_CompactModeThresholdWidth()
        }
    }

    /// Gets or sets the minimum window width at which the NavigationView enters Compact display mode.
    /// - Returns: The minimum window width at which the NavigationView enters Compact display mode. The default is 641 pixels.
    public func compactModeThresholdWidth(_ value: Swift.Double) throws {
        try _inavigationView.put_CompactModeThresholdWidth(value)
    }

    /// Gets or sets the width of the NavigationView pane in its compact display mode.
    /// - Returns: The width of the pane in its compact display mode. The default is 48 device-independent pixel (DIP).
    public var compactPaneLength: Swift.Double {
        get throws {
            try _inavigationView.get_CompactPaneLength()
        }
    }

    /// Gets or sets the width of the NavigationView pane in its compact display mode.
    /// - Returns: The width of the pane in its compact display mode. The default is 48 device-independent pixel (DIP).
    public func compactPaneLength(_ value: Swift.Double) throws {
        try _inavigationView.put_CompactPaneLength(value)
    }

    /// Gets a value that specifies how the pane and content areas of a NavigationView are being shown.
    /// - Returns: A value of the enumeration that specifies how the pane and content areas of a NavigationView are being shown.
    public var displayMode: WindowsUIXamlControls_NavigationViewDisplayMode {
        get throws {
            try _inavigationView.get_DisplayMode()
        }
    }

    /// Gets or sets the minimum window width at which the NavigationView enters **Expanded** display mode.
    /// - Returns: The minimum window width at which the NavigationView enters **Expanded** display mode. The default is 1008 pixels.
    public var expandedModeThresholdWidth: Swift.Double {
        get throws {
            try _inavigationView.get_ExpandedModeThresholdWidth()
        }
    }

    /// Gets or sets the minimum window width at which the NavigationView enters **Expanded** display mode.
    /// - Returns: The minimum window width at which the NavigationView enters **Expanded** display mode. The default is 1008 pixels.
    public func expandedModeThresholdWidth(_ value: Swift.Double) throws {
        try _inavigationView.put_ExpandedModeThresholdWidth(value)
    }

    /// Gets or sets the header content.
    /// - Returns: The header content for the NavigationView.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_Header())
        }
    }

    /// Gets or sets the header content.
    /// - Returns: The header content for the NavigationView.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _inavigationView.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the control's header.
    /// - Returns: The DataTemplate used to display the control's header.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the control's header.
    /// - Returns: The DataTemplate used to display the control's header.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _inavigationView.put_HeaderTemplate(value)
    }

    /// Gets or sets a value that specifies whether the NavigationView pane is expanded to its full width.
    /// - Returns: **true** if the pane is expanded to its full width; otherwise, **false**.
    public var isPaneOpen: Swift.Bool {
        get throws {
            try _inavigationView.get_IsPaneOpen()
        }
    }

    /// Gets or sets a value that specifies whether the NavigationView pane is expanded to its full width.
    /// - Returns: **true** if the pane is expanded to its full width; otherwise, **false**.
    public func isPaneOpen(_ value: Swift.Bool) throws {
        try _inavigationView.put_IsPaneOpen(value)
    }

    /// Gets or sets a value that indicates whether the menu toggle button is shown.
    /// - Returns: **true** if the menu button is shown; otherwise, **false**. The default is **true**.
    public var isPaneToggleButtonVisible: Swift.Bool {
        get throws {
            try _inavigationView.get_IsPaneToggleButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the menu toggle button is shown.
    /// - Returns: **true** if the menu button is shown; otherwise, **false**. The default is **true**.
    public func isPaneToggleButtonVisible(_ value: Swift.Bool) throws {
        try _inavigationView.put_IsPaneToggleButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether the settings button is shown.
    /// - Returns: **true** if the settings button is shown; otherwise, **false**. The default is **true**.
    public var isSettingsVisible: Swift.Bool {
        get throws {
            try _inavigationView.get_IsSettingsVisible()
        }
    }

    /// Gets or sets a value that indicates whether the settings button is shown.
    /// - Returns: **true** if the settings button is shown; otherwise, **false**. The default is **true**.
    public func isSettingsVisible(_ value: Swift.Bool) throws {
        try _inavigationView.put_IsSettingsVisible(value)
    }

    /// Gets or sets the style that is used when rendering the menu item containers.
    /// - Returns: The style applied to the item containers. The default is **null**.
    public var menuItemContainerStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItemContainerStyle())
        }
    }

    /// Gets or sets the style that is used when rendering the menu item containers.
    /// - Returns: The style applied to the item containers. The default is **null**.
    public func menuItemContainerStyle(_ value: WindowsUIXaml_Style?) throws {
        try _inavigationView.put_MenuItemContainerStyle(value)
    }

    /// Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector returns different Style values to use for the item container based on characteristics of the object being displayed.
    /// - Returns: A custom StyleSelector logic class.
    public var menuItemContainerStyleSelector: WindowsUIXamlControls_StyleSelector {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItemContainerStyleSelector())
        }
    }

    /// Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector returns different Style values to use for the item container based on characteristics of the object being displayed.
    /// - Returns: A custom StyleSelector logic class.
    public func menuItemContainerStyleSelector(_ value: WindowsUIXamlControls_StyleSelector?) throws {
        try _inavigationView.put_MenuItemContainerStyleSelector(value)
    }

    /// Gets or sets the DataTemplate used to display each menu item.
    /// - Returns: The template that specifies the visualization of the menu data objects. The default is **null**.
    public var menuItemTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItemTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display each menu item.
    /// - Returns: The template that specifies the visualization of the menu data objects. The default is **null**.
    public func menuItemTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _inavigationView.put_MenuItemTemplate(value)
    }

    /// Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to items.
    /// - Returns: A reference to a custom DataTemplateSelector logic class.
    public var menuItemTemplateSelector: WindowsUIXamlControls_DataTemplateSelector {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItemTemplateSelector())
        }
    }

    /// Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns a template to apply to items.
    /// - Returns: A reference to a custom DataTemplateSelector logic class.
    public func menuItemTemplateSelector(_ value: WindowsUIXamlControls_DataTemplateSelector?) throws {
        try _inavigationView.put_MenuItemTemplateSelector(value)
    }

    /// Gets the collection of menu items displayed in the NavigationMenu.
    /// - Returns: The collection of menu items displayed in the NavigationMenu. The default is an empty collection.
    public var menuItems: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItems())
        }
    }

    /// Gets or sets an object source used to generate the content of the NavigationView menu.
    /// - Returns: The object that is used to generate the content of the NavigationView menu. The default is **null**.
    public var menuItemsSource: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_MenuItemsSource())
        }
    }

    /// Gets or sets an object source used to generate the content of the NavigationView menu.
    /// - Returns: The object that is used to generate the content of the NavigationView menu. The default is **null**.
    public func menuItemsSource(_ value: WindowsRuntime.IInspectable?) throws {
        try _inavigationView.put_MenuItemsSource(value)
    }

    /// Gets or sets the width of the NavigationView pane when it's fully expanded.
    /// - Returns: The width of the NavigationView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).
    public var openPaneLength: Swift.Double {
        get throws {
            try _inavigationView.get_OpenPaneLength()
        }
    }

    /// Gets or sets the width of the NavigationView pane when it's fully expanded.
    /// - Returns: The width of the NavigationView pane when it's fully expanded. The default is 320 device-independent pixel (DIP).
    public func openPaneLength(_ value: Swift.Double) throws {
        try _inavigationView.put_OpenPaneLength(value)
    }

    /// Gets or sets the content for the pane footer.
    /// - Returns: The content of the pane footer. The default is **null**.
    public var paneFooter: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_PaneFooter())
        }
    }

    /// Gets or sets the content for the pane footer.
    /// - Returns: The content of the pane footer. The default is **null**.
    public func paneFooter(_ value: WindowsUIXaml_UIElement?) throws {
        try _inavigationView.put_PaneFooter(value)
    }

    /// Gets or sets the Style that defines the look of the menu toggle button.
    /// - Returns: The Style that defines the look of the menu toggle button. The default is **null**.
    public var paneToggleButtonStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_PaneToggleButtonStyle())
        }
    }

    /// Gets or sets the Style that defines the look of the menu toggle button.
    /// - Returns: The Style that defines the look of the menu toggle button. The default is **null**.
    public func paneToggleButtonStyle(_ value: WindowsUIXaml_Style?) throws {
        try _inavigationView.put_PaneToggleButtonStyle(value)
    }

    /// Gets or sets the selected item.
    /// - Returns: The selected item. The default is null.
    public var selectedItem: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_SelectedItem())
        }
    }

    /// Gets or sets the selected item.
    /// - Returns: The selected item. The default is null.
    public func selectedItem(_ value: WindowsRuntime.IInspectable?) throws {
        try _inavigationView.put_SelectedItem(value)
    }

    /// Gets the navigation item that represents the entry point to app settings.
    /// - Returns: The item that represents the entry point to app settings.
    public var settingsItem: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_inavigationView.get_SettingsItem())
        }
    }

    /// Occurs when the DisplayMode property changes.
    public func displayModeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsUIXamlControls_NavigationViewDisplayModeChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView.add_DisplayModeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: displayModeChanged)
    }

    public func displayModeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView.remove_DisplayModeChanged(token)
    }

    /// Occurs when an item in the menu receives an interaction such as a click or tap.
    public func itemInvoked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsUIXamlControls_NavigationViewItemInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView.add_ItemInvoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: itemInvoked)
    }

    public func itemInvoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView.remove_ItemInvoked(token)
    }

    /// Occurs when the currently selected item changes.
    public func selectionChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsUIXamlControls_NavigationViewSelectionChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView.remove_SelectionChanged(token)
    }

    /// Returns the item that corresponds to the specified, generated container.
    /// - Parameter container: The DependencyObject that corresponds to the item to be returned.
    /// - Returns: The contained item, or the container if it does not contain an item.
    public func menuItemFromContainer(_ container: WindowsUIXaml_DependencyObject?) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_inavigationView.menuItemFromContainer(container))
    }

    /// Returns the container corresponding to the specified menu item.
    /// - Parameter item: The menu item to retrieve the container for.
    /// - Returns: A container that corresponds to the specified menu item, if the item has a container and exists in the collection; otherwise, **null**.
    public func containerFromMenuItem(_ item: WindowsRuntime.IInspectable?) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_inavigationView.containerFromMenuItem(item))
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationView2 members

    /// Gets or sets a value that indicates whether the back button is enabled or disabled.
    /// - Returns: A value of the enumeration that specifies the visibility of the NavigationView back button. The default is "Auto".
    public var isBackButtonVisible: WindowsUIXamlControls_NavigationViewBackButtonVisible {
        get throws {
            try _inavigationView2.get_IsBackButtonVisible()
        }
    }

    /// Gets or sets a value that indicates whether the back button is enabled or disabled.
    /// - Returns: A value of the enumeration that specifies the visibility of the NavigationView back button. The default is "Auto".
    public func isBackButtonVisible(_ value: WindowsUIXamlControls_NavigationViewBackButtonVisible) throws {
        try _inavigationView2.put_IsBackButtonVisible(value)
    }

    /// Gets or sets a value that indicates whether the back button is enabled or disabled.
    /// - Returns: **true** if the back button is enabled; otherwise, **false**. The default is **false**.
    public var isBackEnabled: Swift.Bool {
        get throws {
            try _inavigationView2.get_IsBackEnabled()
        }
    }

    /// Gets or sets a value that indicates whether the back button is enabled or disabled.
    /// - Returns: **true** if the back button is enabled; otherwise, **false**. The default is **false**.
    public func isBackEnabled(_ value: Swift.Bool) throws {
        try _inavigationView2.put_IsBackEnabled(value)
    }

    /// Gets or sets the label adjacent to the menu icon when the NavigationView pane is open.
    /// - Returns: The label adjacent to the menu icon when the pane is open. The default is an empty string.
    public var paneTitle: Swift.String {
        get throws {
            try _inavigationView2.get_PaneTitle()
        }
    }

    /// Gets or sets the label adjacent to the menu icon when the NavigationView pane is open.
    /// - Returns: The label adjacent to the menu icon when the pane is open. The default is an empty string.
    public func paneTitle(_ value: Swift.String) throws {
        try _inavigationView2.put_PaneTitle(value)
    }

    /// Occurs when the back button receives an interaction such as a click or tap.
    public func backRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsUIXamlControls_NavigationViewBackRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView2.add_BackRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: backRequested)
    }

    public func backRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView2.remove_BackRequested(token)
    }

    /// Occurs when the NavigationView pane is closed.
    public func paneClosed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView2.add_PaneClosed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneClosed)
    }

    public func paneClosed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView2.remove_PaneClosed(token)
    }

    /// Occurs when the NavigationView pane is closing.
    public func paneClosing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsUIXamlControls_NavigationViewPaneClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView2.add_PaneClosing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneClosing)
    }

    public func paneClosing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView2.remove_PaneClosing(token)
    }

    /// Occurs when the NavigationView pane is opened.
    public func paneOpened(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView2.add_PaneOpened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneOpened)
    }

    public func paneOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView2.remove_PaneOpened(token)
    }

    /// Occurs when the NavigationView pane is opening.
    public func paneOpening(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_NavigationView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inavigationView2.add_PaneOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paneOpening)
    }

    public func paneOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inavigationView2.remove_PaneOpening(token)
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationView3 members

    /// Gets or sets a UI element that is shown at the top of the control, below the pane if PaneDisplayMode is Top.
    /// - Returns: The element that is shown at the top of the control.
    public var contentOverlay: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_inavigationView3.get_ContentOverlay())
        }
    }

    /// Gets or sets a UI element that is shown at the top of the control, below the pane if PaneDisplayMode is Top.
    /// - Returns: The element that is shown at the top of the control.
    public func contentOverlay(_ value: WindowsUIXaml_UIElement?) throws {
        try _inavigationView3.put_ContentOverlay(value)
    }

    /// Gets or sets a value that determines whether the pane is shown.
    /// - Returns: **true** is the pane is shown; otherwise, **false**. The default is **true**.
    public var isPaneVisible: Swift.Bool {
        get throws {
            try _inavigationView3.get_IsPaneVisible()
        }
    }

    /// Gets or sets a value that determines whether the pane is shown.
    /// - Returns: **true** is the pane is shown; otherwise, **false**. The default is **true**.
    public func isPaneVisible(_ value: Swift.Bool) throws {
        try _inavigationView3.put_IsPaneVisible(value)
    }

    /// Gets or sets a value that indicates what text label is shown for the overflow menu.
    /// - Returns: A value of the enumeration that indicates what text label is shown for the overflow menu. The default is **MoreLabel**, which shows the text "More".
    public var overflowLabelMode: WindowsUIXamlControls_NavigationViewOverflowLabelMode {
        get throws {
            try _inavigationView3.get_OverflowLabelMode()
        }
    }

    /// Gets or sets a value that indicates what text label is shown for the overflow menu.
    /// - Returns: A value of the enumeration that indicates what text label is shown for the overflow menu. The default is **MoreLabel**, which shows the text "More".
    public func overflowLabelMode(_ value: WindowsUIXamlControls_NavigationViewOverflowLabelMode) throws {
        try _inavigationView3.put_OverflowLabelMode(value)
    }

    /// Gets or sets a UI element that is shown in the NavigationView pane.
    /// - Returns: The element that is shown in the NavigationView pane.
    public var paneCustomContent: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_inavigationView3.get_PaneCustomContent())
        }
    }

    /// Gets or sets a UI element that is shown in the NavigationView pane.
    /// - Returns: The element that is shown in the NavigationView pane.
    public func paneCustomContent(_ value: WindowsUIXaml_UIElement?) throws {
        try _inavigationView3.put_PaneCustomContent(value)
    }

    /// Gets or sets a value that indicates how and where the NavigationView pane is shown.
    /// - Returns: A value of the enumeration that indicates how and where the NavigationView pane is shown. The default is **Auto**.
    public var paneDisplayMode: WindowsUIXamlControls_NavigationViewPaneDisplayMode {
        get throws {
            try _inavigationView3.get_PaneDisplayMode()
        }
    }

    /// Gets or sets a value that indicates how and where the NavigationView pane is shown.
    /// - Returns: A value of the enumeration that indicates how and where the NavigationView pane is shown. The default is **Auto**.
    public func paneDisplayMode(_ value: WindowsUIXamlControls_NavigationViewPaneDisplayMode) throws {
        try _inavigationView3.put_PaneDisplayMode(value)
    }

    /// Gets or sets the content for the pane header.
    /// - Returns: The content of the pane header. The default is **null**.
    public var paneHeader: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_inavigationView3.get_PaneHeader())
        }
    }

    /// Gets or sets the content for the pane header.
    /// - Returns: The content of the pane header. The default is **null**.
    public func paneHeader(_ value: WindowsUIXaml_UIElement?) throws {
        try _inavigationView3.put_PaneHeader(value)
    }

    /// Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
    /// - Returns: A value of the enumeration that indicates whether selection changes when keyboard focus changes. The default is **Disabled**.
    public var selectionFollowsFocus: WindowsUIXamlControls_NavigationViewSelectionFollowsFocus {
        get throws {
            try _inavigationView3.get_SelectionFollowsFocus()
        }
    }

    /// Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
    /// - Returns: A value of the enumeration that indicates whether selection changes when keyboard focus changes. The default is **Disabled**.
    public func selectionFollowsFocus(_ value: WindowsUIXamlControls_NavigationViewSelectionFollowsFocus) throws {
        try _inavigationView3.put_SelectionFollowsFocus(value)
    }

    /// Gets or sets a value that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView.
    /// - Returns: A value of the enumeration that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView. The default is **Never**.
    public var shoulderNavigationEnabled: WindowsUIXamlControls_NavigationViewShoulderNavigationEnabled {
        get throws {
            try _inavigationView3.get_ShoulderNavigationEnabled()
        }
    }

    /// Gets or sets a value that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView.
    /// - Returns: A value of the enumeration that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView. The default is **Never**.
    public func shoulderNavigationEnabled(_ value: WindowsUIXamlControls_NavigationViewShoulderNavigationEnabled) throws {
        try _inavigationView3.put_ShoulderNavigationEnabled(value)
    }

    /// Gets an object that provides calculated values that can be referenced as **TemplateBinding** sources when defining templates for a NavigationView control.
    /// - Returns: An object that provides calculated values for templates.
    public var templateSettings: WindowsUIXamlControls_NavigationViewTemplateSettings {
        get throws {
            try COM.NullResult.unwrap(_inavigationView3.get_TemplateSettings())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationViewStatics3 members

    /// Identifies the ContentOverlay dependency property.
    /// - Returns: The identifier for the ContentOverlay dependency property.
    public static var contentOverlayProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_ContentOverlayProperty())
        }
    }

    /// Identifies the IsPaneVisible dependency property.
    /// - Returns: The identifier for the IsPaneVisible dependency property.
    public static var isPaneVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_IsPaneVisibleProperty())
        }
    }

    /// Identifies the OverflowLabelMode dependency property.
    /// - Returns: The identifier for the OverflowLabelMode dependency property.
    public static var overflowLabelModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_OverflowLabelModeProperty())
        }
    }

    /// Identifies the PaneCustomContent dependency property.
    /// - Returns: The identifier for the PaneCustomContent dependency property.
    public static var paneCustomContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_PaneCustomContentProperty())
        }
    }

    /// Identifies the PaneDisplayMode dependency property.
    /// - Returns: The identifier for the PaneDisplayMode dependency property.
    public static var paneDisplayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_PaneDisplayModeProperty())
        }
    }

    /// Identifies the PaneHeader dependency property.
    /// - Returns: The identifier for the PaneHeader dependency property.
    public static var paneHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_PaneHeaderProperty())
        }
    }

    /// Identifies the SelectionFollowsFocus dependency property.
    /// - Returns: The identifier for the SelectionFollowsFocus dependency property.
    public static var selectionFollowsFocusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_SelectionFollowsFocusProperty())
        }
    }

    /// Identifies the ShoulderNavigationEnabled dependency property.
    /// - Returns: The identifier for the ShoulderNavigationEnabled dependency property.
    public static var shoulderNavigationEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_ShoulderNavigationEnabledProperty())
        }
    }

    /// Identifies the TemplateSettings dependency property.
    /// - Returns: The identifier for the TemplateSettings dependency property.
    public static var templateSettingsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics3.get_TemplateSettingsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationViewStatics2 members

    /// Identifies the IsBackButtonVisible dependency property.
    /// - Returns: The identifier for the IsBackButtonVisible dependency property.
    public static var isBackButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics2.get_IsBackButtonVisibleProperty())
        }
    }

    /// Identifies the IsBackEnabled dependency property.
    /// - Returns: The identifier for the IsBackEnabled dependency property.
    public static var isBackEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics2.get_IsBackEnabledProperty())
        }
    }

    /// Identifies the PaneTitle dependency property.
    /// - Returns: The identifier for the PaneTitle dependency property.
    public static var paneTitleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics2.get_PaneTitleProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.INavigationViewStatics members

    /// Identifies the AlwaysShowHeader dependency property.
    /// - Returns: The identifier for the AlwaysShowHeader dependency property.
    public static var alwaysShowHeaderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_AlwaysShowHeaderProperty())
        }
    }

    /// Identifies the AutoSuggestBox dependency property.
    /// - Returns: The identifier for the AutoSuggestBox dependency property.
    public static var autoSuggestBoxProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_AutoSuggestBoxProperty())
        }
    }

    /// Identifies the CompactModeThresholdWidth dependency property.
    /// - Returns: The identifier for the CompactModeThresholdWidth dependency property.
    public static var compactModeThresholdWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_CompactModeThresholdWidthProperty())
        }
    }

    /// Identifies the CompactPaneLength dependency property.
    /// - Returns: The identifier for the CompactPaneLength dependency property.
    public static var compactPaneLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_CompactPaneLengthProperty())
        }
    }

    /// Identifies the DisplayMode dependency property.
    /// - Returns: The identifier for the DisplayMode dependency property.
    public static var displayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_DisplayModeProperty())
        }
    }

    /// Identifies the ExpandedModeThresholdWidth dependency property.
    /// - Returns: The identifier for the ExpandedModeThresholdWidth dependency property.
    public static var expandedModeThresholdWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_ExpandedModeThresholdWidthProperty())
        }
    }

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsPaneOpen dependency property.
    /// - Returns: The identifier for the IsPaneOpen dependency property.
    public static var isPaneOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_IsPaneOpenProperty())
        }
    }

    /// Identifies the IsPaneToggleButtonVisible dependency property.
    /// - Returns: The identifier for the IsPaneToggleButtonVisible dependency property.
    public static var isPaneToggleButtonVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_IsPaneToggleButtonVisibleProperty())
        }
    }

    /// Identifies the IsSettingsVisible dependency property.
    /// - Returns: The identifier for the IsSettingsVisible dependency property.
    public static var isSettingsVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_IsSettingsVisibleProperty())
        }
    }

    /// Identifies the MenuItemContainerStyle dependency property.
    /// - Returns: The identifier for the MenuItemContainerStyle dependency property.
    public static var menuItemContainerStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemContainerStyleProperty())
        }
    }

    /// Identifies the MenuItemContainerStyleSelector dependency property.
    /// - Returns: The identifier for the MenuItemContainerStyleSelector dependency property.
    public static var menuItemContainerStyleSelectorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemContainerStyleSelectorProperty())
        }
    }

    /// Identifies the MenuItemTemplate dependency property.
    /// - Returns: The identifier for the MenuItemTemplate dependency property.
    public static var menuItemTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemTemplateProperty())
        }
    }

    /// Identifies the MenuItemTemplateSelector dependency property.
    /// - Returns: The identifier for the MenuItemTemplateSelector dependency property.
    public static var menuItemTemplateSelectorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemTemplateSelectorProperty())
        }
    }

    /// Identifies the MenuItems dependency property.
    /// - Returns: The identifier for the MenuItems dependency property.
    public static var menuItemsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemsProperty())
        }
    }

    /// Identifies the MenuItemsSource dependency property.
    /// - Returns: The identifier for the MenuItemsSource dependency property.
    public static var menuItemsSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_MenuItemsSourceProperty())
        }
    }

    /// Identifies the OpenPaneLength dependency property.
    /// - Returns: The identifier for the OpenPaneLength dependency property.
    public static var openPaneLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_OpenPaneLengthProperty())
        }
    }

    /// Identifies the PaneFooter dependency property.
    /// - Returns: The identifier for the PaneFooter dependency property.
    public static var paneFooterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_PaneFooterProperty())
        }
    }

    /// Identifies the PaneToggleButtonStyle dependency property.
    /// - Returns: The identifier for the PaneToggleButtonStyle dependency property.
    public static var paneToggleButtonStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_PaneToggleButtonStyleProperty())
        }
    }

    /// Identifies the SelectedItem dependency property.
    /// - Returns: The identifier for the SelectedItem dependency property.
    public static var selectedItemProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_SelectedItemProperty())
        }
    }

    /// Identifies the SettingsItem dependency property.
    /// - Returns: The identifier for the SettingsItem dependency property.
    public static var settingsItemProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_inavigationViewStatics.get_SettingsItemProperty())
        }
    }

    // MARK: Implementation details

    private var _inavigationView_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView>? = nil

    internal var _inavigationView: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView> {
        get throws {
            try _inavigationView_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_INavigationView.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_INavigationView.self)
            }
        }
    }

    private var _inavigationView2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView2>? = nil

    internal var _inavigationView2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView2> {
        get throws {
            try _inavigationView2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_INavigationView2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_INavigationView2.self)
            }
        }
    }

    private var _inavigationView3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView3>? = nil

    internal var _inavigationView3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationView3> {
        get throws {
            try _inavigationView3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_INavigationView3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_INavigationView3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_INavigationView>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _inavigationView_storage?.release()
        _inavigationView2_storage?.release()
        _inavigationView3_storage?.release()
    }

    private static var _inavigationViewFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewFactory>? = nil

    internal static var _inavigationViewFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewFactory> {
        get throws {
            try _inavigationViewFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.NavigationView", id: CWinRT.SWRT_WindowsUIXamlControls_INavigationViewFactory.iid)
            }
        }
    }

    private static var _inavigationViewStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics3>? = nil

    internal static var _inavigationViewStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics3> {
        get throws {
            try _inavigationViewStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.NavigationView", id: CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics3.iid)
            }
        }
    }

    private static var _inavigationViewStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics2>? = nil

    internal static var _inavigationViewStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics2> {
        get throws {
            try _inavigationViewStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.NavigationView", id: CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics2.iid)
            }
        }
    }

    private static var _inavigationViewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics>? = nil

    internal static var _inavigationViewStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics> {
        get throws {
            try _inavigationViewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.NavigationView", id: CWinRT.SWRT_WindowsUIXamlControls_INavigationViewStatics.iid)
            }
        }
    }
}