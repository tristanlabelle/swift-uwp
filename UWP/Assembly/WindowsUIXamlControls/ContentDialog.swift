// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a dialog box that can be customized to contain checkboxes, hyperlinks, buttons and any other XAML content.
open class WindowsUIXamlControls_ContentDialog: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IContentDialogFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_ContentDialog.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icontentDialogFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IContentDialog members

    /// Gets or sets a value that indicates whether a request is being made to display the dialog full screen.
    /// - Returns: **true** to request that the dialog is displayed full screen; otherwise, **false**. The default is **false**.
    public var fullSizeDesired: Swift.Bool {
        get throws {
            try _icontentDialog.get_FullSizeDesired()
        }
    }

    /// Gets or sets a value that indicates whether a request is being made to display the dialog full screen.
    /// - Returns: **true** to request that the dialog is displayed full screen; otherwise, **false**. The default is **false**.
    public func fullSizeDesired(_ value: Swift.Bool) throws {
        try _icontentDialog.put_FullSizeDesired(value)
    }

    /// Gets or sets whether the dialog's primary button is enabled.
    /// - Returns: True if the primary button of the dialog is enabled; Otherwise, false.
    public var isPrimaryButtonEnabled: Swift.Bool {
        get throws {
            try _icontentDialog.get_IsPrimaryButtonEnabled()
        }
    }

    /// Gets or sets whether the dialog's primary button is enabled.
    /// - Returns: True if the primary button of the dialog is enabled; Otherwise, false.
    public func isPrimaryButtonEnabled(_ value: Swift.Bool) throws {
        try _icontentDialog.put_IsPrimaryButtonEnabled(value)
    }

    /// Gets or sets whether the dialog's secondary button is enabled.
    /// - Returns: True if the secondary button of the dialog is enabled; Otherwise, false.
    public var isSecondaryButtonEnabled: Swift.Bool {
        get throws {
            try _icontentDialog.get_IsSecondaryButtonEnabled()
        }
    }

    /// Gets or sets whether the dialog's secondary button is enabled.
    /// - Returns: True if the secondary button of the dialog is enabled; Otherwise, false.
    public func isSecondaryButtonEnabled(_ value: Swift.Bool) throws {
        try _icontentDialog.put_IsSecondaryButtonEnabled(value)
    }

    /// Gets or sets the command to invoke when the primary button is tapped.
    /// - Returns: The command to invoke when the primary button is tapped.
    public var primaryButtonCommand: WindowsUIXamlInput_ICommand {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_PrimaryButtonCommand())
        }
    }

    /// Gets or sets the command to invoke when the primary button is tapped.
    /// - Returns: The command to invoke when the primary button is tapped.
    public func primaryButtonCommand(_ value: WindowsUIXamlInput_ICommand?) throws {
        try _icontentDialog.put_PrimaryButtonCommand(value)
    }

    /// Gets or sets the parameter to pass to the command for the primary button.
    /// - Returns: The parameter to pass to the command for the primary button. The default is null.
    public var primaryButtonCommandParameter: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_PrimaryButtonCommandParameter())
        }
    }

    /// Gets or sets the parameter to pass to the command for the primary button.
    /// - Returns: The parameter to pass to the command for the primary button. The default is null.
    public func primaryButtonCommandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontentDialog.put_PrimaryButtonCommandParameter(value)
    }

    /// Gets or sets the text to display on the primary button.
    /// - Returns: The text to display on the primary button. To hide this button, set the text to **null** or string.empty. The default is empty.
    public var primaryButtonText: Swift.String {
        get throws {
            try _icontentDialog.get_PrimaryButtonText()
        }
    }

    /// Gets or sets the text to display on the primary button.
    /// - Returns: The text to display on the primary button. To hide this button, set the text to **null** or string.empty. The default is empty.
    public func primaryButtonText(_ value: Swift.String) throws {
        try _icontentDialog.put_PrimaryButtonText(value)
    }

    /// Gets or sets the command to invoke when the secondary button is tapped.
    /// - Returns: The command to invoke when the secondary button is tapped.
    public var secondaryButtonCommand: WindowsUIXamlInput_ICommand {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_SecondaryButtonCommand())
        }
    }

    /// Gets or sets the command to invoke when the secondary button is tapped.
    /// - Returns: The command to invoke when the secondary button is tapped.
    public func secondaryButtonCommand(_ value: WindowsUIXamlInput_ICommand?) throws {
        try _icontentDialog.put_SecondaryButtonCommand(value)
    }

    /// Gets or sets the parameter to pass to the command for the secondary button.
    /// - Returns: The command parameter for the secondary button. The default is null.
    public var secondaryButtonCommandParameter: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_SecondaryButtonCommandParameter())
        }
    }

    /// Gets or sets the parameter to pass to the command for the secondary button.
    /// - Returns: The command parameter for the secondary button. The default is null.
    public func secondaryButtonCommandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontentDialog.put_SecondaryButtonCommandParameter(value)
    }

    /// Gets or sets the text to be displayed on the secondary button.
    /// - Returns: The text to be displayed on the secondary button. To hide this button, set the value to **null** or **string.empty**.
    public var secondaryButtonText: Swift.String {
        get throws {
            try _icontentDialog.get_SecondaryButtonText()
        }
    }

    /// Gets or sets the text to be displayed on the secondary button.
    /// - Returns: The text to be displayed on the secondary button. To hide this button, set the value to **null** or **string.empty**.
    public func secondaryButtonText(_ value: Swift.String) throws {
        try _icontentDialog.put_SecondaryButtonText(value)
    }

    /// Gets or sets the title of the dialog.
    /// - Returns: The title of the dialog.
    public var title: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_Title())
        }
    }

    /// Gets or sets the title of the dialog.
    /// - Returns: The title of the dialog.
    public func title(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontentDialog.put_Title(value)
    }

    /// Gets or sets the title template.
    /// - Returns: The title template.
    public var titleTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog.get_TitleTemplate())
        }
    }

    /// Gets or sets the title template.
    /// - Returns: The title template.
    public func titleTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _icontentDialog.put_TitleTemplate(value)
    }

    /// Occurs after the dialog is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog.remove_Closed(token)
    }

    /// Occurs after the dialog starts to close, but before it is closed and before the Closed event occurs.
    public func closing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog.add_Closing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closing)
    }

    public func closing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog.remove_Closing(token)
    }

    /// Occurs after the dialog is opened.
    public func opened(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogOpenedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog.remove_Opened(token)
    }

    /// Occurs after the primary button has been tapped.
    public func primaryButtonClick(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogButtonClickEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog.add_PrimaryButtonClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: primaryButtonClick)
    }

    public func primaryButtonClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog.remove_PrimaryButtonClick(token)
    }

    /// Occurs after the secondary button has been tapped.
    public func secondaryButtonClick(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogButtonClickEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog.add_SecondaryButtonClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: secondaryButtonClick)
    }

    public func secondaryButtonClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog.remove_SecondaryButtonClick(token)
    }

    /// Hides the dialog.
    public func hide() throws {
        try _icontentDialog.hide()
    }

    /// Begins an asynchronous operation to show the dialog.
    /// - Returns: An asynchronous operation showing the dialog. When complete, returns a ContentDialogResult.
    public func showAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlControls_ContentDialogResult> {
        try COM.NullResult.unwrap(_icontentDialog.showAsync())
    }

    // MARK: Windows.UI.Xaml.Controls.IContentDialog2 members

    /// Gets or sets the command to invoke when the close button is tapped.
    /// - Returns: The command to invoke when the primary button is tapped.
    public var closeButtonCommand: WindowsUIXamlInput_ICommand {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog2.get_CloseButtonCommand())
        }
    }

    /// Gets or sets the command to invoke when the close button is tapped.
    /// - Returns: The command to invoke when the primary button is tapped.
    public func closeButtonCommand(_ value: WindowsUIXamlInput_ICommand?) throws {
        try _icontentDialog2.put_CloseButtonCommand(value)
    }

    /// Gets or sets the parameter to pass to the command for the close button.
    /// - Returns: The parameter to pass to the command for the close button. The default is **null.**
    public var closeButtonCommandParameter: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog2.get_CloseButtonCommandParameter())
        }
    }

    /// Gets or sets the parameter to pass to the command for the close button.
    /// - Returns: The parameter to pass to the command for the close button. The default is **null.**
    public func closeButtonCommandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontentDialog2.put_CloseButtonCommandParameter(value)
    }

    /// Gets or sets the Style to apply to the dialog's close button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public var closeButtonStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog2.get_CloseButtonStyle())
        }
    }

    /// Gets or sets the Style to apply to the dialog's close button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public func closeButtonStyle(_ value: WindowsUIXaml_Style?) throws {
        try _icontentDialog2.put_CloseButtonStyle(value)
    }

    /// Gets or sets the text to display on the close button.
    /// - Returns: The text to display on the close button.
    public var closeButtonText: Swift.String {
        get throws {
            try _icontentDialog2.get_CloseButtonText()
        }
    }

    /// Gets or sets the text to display on the close button.
    /// - Returns: The text to display on the close button.
    public func closeButtonText(_ value: Swift.String) throws {
        try _icontentDialog2.put_CloseButtonText(value)
    }

    /// Gets or sets a value that indicates which button on the dialog is the default action.
    /// - Returns: A value of the enumeration. The default is **None.**
    public var defaultButton: WindowsUIXamlControls_ContentDialogButton {
        get throws {
            try _icontentDialog2.get_DefaultButton()
        }
    }

    /// Gets or sets a value that indicates which button on the dialog is the default action.
    /// - Returns: A value of the enumeration. The default is **None.**
    public func defaultButton(_ value: WindowsUIXamlControls_ContentDialogButton) throws {
        try _icontentDialog2.put_DefaultButton(value)
    }

    /// Gets or sets the Style to apply to the dialog's primary button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public var primaryButtonStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog2.get_PrimaryButtonStyle())
        }
    }

    /// Gets or sets the Style to apply to the dialog's primary button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public func primaryButtonStyle(_ value: WindowsUIXaml_Style?) throws {
        try _icontentDialog2.put_PrimaryButtonStyle(value)
    }

    /// Gets or sets the Style to apply to the dialog's secondary button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public var secondaryButtonStyle: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_icontentDialog2.get_SecondaryButtonStyle())
        }
    }

    /// Gets or sets the Style to apply to the dialog's secondary button.
    /// - Returns: The applied style for the button, if present; otherwise, **null**.
    public func secondaryButtonStyle(_ value: WindowsUIXaml_Style?) throws {
        try _icontentDialog2.put_SecondaryButtonStyle(value)
    }

    /// Occurs after the close button has been tapped.
    public func closeButtonClick(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_ContentDialog?, WindowsUIXamlControls_ContentDialogButtonClickEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontentDialog2.add_CloseButtonClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closeButtonClick)
    }

    public func closeButtonClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontentDialog2.remove_CloseButtonClick(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IContentDialog3 members

    /// Begins an asynchronous operation to show the dialog with the specified placement.
    /// - Parameter placement: A value that specifies whether the dialog is placed in the PopupRoot or in its parent's visual tree.
    /// - Returns: An asynchronous operation showing the dialog. When complete, returns a ContentDialogResult.
    public func showAsync(_ placement: WindowsUIXamlControls_ContentDialogPlacement) throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlControls_ContentDialogResult> {
        try COM.NullResult.unwrap(_icontentDialog3.showAsyncWithPlacement(placement))
    }

    // MARK: Windows.UI.Xaml.Controls.IContentDialogStatics2 members

    /// Gets the identifier of the CloseButtonCommandParameter dependency property.
    /// - Returns: The identifier of the CloseButtonCommandParameter dependency property.
    public static var closeButtonCommandParameterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_CloseButtonCommandParameterProperty())
        }
    }

    /// Gets the identifier of the CloseButtonCommand dependency property.
    /// - Returns: The identifier of the CloseButtonCommand dependency property.
    public static var closeButtonCommandProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_CloseButtonCommandProperty())
        }
    }

    /// Gets the identifier of the CloseButtonStyle dependency property.
    /// - Returns: The identifier of the CloseButtonStyle dependency property.
    public static var closeButtonStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_CloseButtonStyleProperty())
        }
    }

    /// Gets the identifier of the CloseButtonText dependency property.
    /// - Returns: The identifier of the CloseButtonText dependency property.
    public static var closeButtonTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_CloseButtonTextProperty())
        }
    }

    /// Gets the identifier of the DefaultButton dependency property.
    /// - Returns: The identifier of the DefaultButton dependency property.
    public static var defaultButtonProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_DefaultButtonProperty())
        }
    }

    /// Gets the identifier of the PrimaryButtonStyle dependency property.
    /// - Returns: The identifier of the PrimaryButtonStyle dependency property.
    public static var primaryButtonStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_PrimaryButtonStyleProperty())
        }
    }

    /// Gets the identifier of the SecondaryButtonStyle dependency property.
    /// - Returns: The identifier of the SecondaryButtonStyle dependency property.
    public static var secondaryButtonStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics2.get_SecondaryButtonStyleProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IContentDialogStatics members

    /// Gets the identifier of the FullSizeDesired dependency property.
    /// - Returns: The identifier of the FullSizeDesired dependency property.
    public static var fullSizeDesiredProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_FullSizeDesiredProperty())
        }
    }

    /// Gets the identifier of the IsPrimaryButtonEnabled dependency property.
    /// - Returns: The identifier of the IsPrimaryButtonEnabled dependency property.
    public static var isPrimaryButtonEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_IsPrimaryButtonEnabledProperty())
        }
    }

    /// Gets the identifier of the IsSecondaryButtonEnabled dependency property.
    /// - Returns: The identifier of the IsSecondaryButtonEnabled dependency property.
    public static var isSecondaryButtonEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_IsSecondaryButtonEnabledProperty())
        }
    }

    /// Gets the identifier of the PrimaryButtonCommandParameter dependency property.
    /// - Returns: The identifier of the PrimaryButtonCommandParameter dependency property
    public static var primaryButtonCommandParameterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_PrimaryButtonCommandParameterProperty())
        }
    }

    /// Gets the identifier of the PrimaryButtonCommand dependency property.
    /// - Returns: The identifier of the PrimaryButtonCommand dependency property.
    public static var primaryButtonCommandProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_PrimaryButtonCommandProperty())
        }
    }

    /// Gets the identifier of the PrimaryButtonText dependency property.
    /// - Returns: The identifier of the PrimaryButtonText dependency property.
    public static var primaryButtonTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_PrimaryButtonTextProperty())
        }
    }

    /// Gets the identifier of the SecondaryButtonCommandParameter dependency property.
    /// - Returns: The identifier of the SecondaryButtonCommandParameter dependency property.
    public static var secondaryButtonCommandParameterProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_SecondaryButtonCommandParameterProperty())
        }
    }

    /// Gets the identifier of the SecondaryButtonCommand dependency property.
    /// - Returns: The identifier of the SecondaryButtonCommand dependency property.
    public static var secondaryButtonCommandProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_SecondaryButtonCommandProperty())
        }
    }

    /// Gets the identifier of the SecondaryButtonText dependency property.
    /// - Returns: The identifier of the SecondaryButtonText dependency property.
    public static var secondaryButtonTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_SecondaryButtonTextProperty())
        }
    }

    /// Gets the identifier of the Title dependency property.
    /// - Returns: The identifier of the Title dependency property.
    public static var titleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_TitleProperty())
        }
    }

    /// Gets the identifier of the TitleTemplate dependency property.
    /// - Returns: The identifier of the TitleTemplate dependency property.
    public static var titleTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontentDialogStatics.get_TitleTemplateProperty())
        }
    }

    // MARK: Implementation details

    private var _icontentDialog_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog>? = nil

    internal var _icontentDialog: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog> {
        get throws {
            try _icontentDialog_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IContentDialog.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IContentDialog.self)
            }
        }
    }

    private var _icontentDialog2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog2>? = nil

    internal var _icontentDialog2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog2> {
        get throws {
            try _icontentDialog2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IContentDialog2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IContentDialog2.self)
            }
        }
    }

    private var _icontentDialog3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog3>? = nil

    internal var _icontentDialog3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog3> {
        get throws {
            try _icontentDialog3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IContentDialog3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IContentDialog3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IContentDialog>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icontentDialog_storage?.release()
        _icontentDialog2_storage?.release()
        _icontentDialog3_storage?.release()
    }

    private static var _icontentDialogFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogFactory>? = nil

    internal static var _icontentDialogFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogFactory> {
        get throws {
            try _icontentDialogFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ContentDialog", id: CWinRT.SWRT_WindowsUIXamlControls_IContentDialogFactory.iid)
            }
        }
    }

    private static var _icontentDialogStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics2>? = nil

    internal static var _icontentDialogStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics2> {
        get throws {
            try _icontentDialogStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ContentDialog", id: CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics2.iid)
            }
        }
    }

    private static var _icontentDialogStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics>? = nil

    internal static var _icontentDialogStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics> {
        get throws {
            try _icontentDialogStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.ContentDialog", id: CWinRT.SWRT_WindowsUIXamlControls_IContentDialogStatics.iid)
            }
        }
    }
}