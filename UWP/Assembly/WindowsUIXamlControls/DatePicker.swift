// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that allows a user to pick a date value.
open class WindowsUIXamlControls_DatePicker: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IDatePickerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_DatePicker.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._idatePickerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePicker members

    /// Gets or sets the calendar system to use.
    /// - Returns: The calendar system to use.
    public var calendarIdentifier: Swift.String {
        get throws {
            try _idatePicker.get_CalendarIdentifier()
        }
    }

    /// Gets or sets the calendar system to use.
    /// - Returns: The calendar system to use.
    public func calendarIdentifier(_ value: Swift.String) throws {
        try _idatePicker.put_CalendarIdentifier(value)
    }

    /// Gets or sets the date currently set in the date picker.
    /// - Returns: The date currently set in the picker.
    public var date: WindowsFoundation_DateTime {
        get throws {
            try _idatePicker.get_Date()
        }
    }

    /// Gets or sets the date currently set in the date picker.
    /// - Returns: The date currently set in the picker.
    public func date(_ value: WindowsFoundation_DateTime) throws {
        try _idatePicker.put_Date(value)
    }

    /// Gets or sets the display format for the day value.
    /// - Returns: The display format for the day value.
    public var dayFormat: Swift.String {
        get throws {
            try _idatePicker.get_DayFormat()
        }
    }

    /// Gets or sets the display format for the day value.
    /// - Returns: The display format for the day value.
    public func dayFormat(_ value: Swift.String) throws {
        try _idatePicker.put_DayFormat(value)
    }

    /// Gets or sets a value that indicates whether the day selector is shown.
    /// - Returns: **true** if the day selector is shown; otherwise, **false**. The default is **true**.
    public var dayVisible: Swift.Bool {
        get throws {
            try _idatePicker.get_DayVisible()
        }
    }

    /// Gets or sets a value that indicates whether the day selector is shown.
    /// - Returns: **true** if the day selector is shown; otherwise, **false**. The default is **true**.
    public func dayVisible(_ value: Swift.Bool) throws {
        try _idatePicker.put_DayVisible(value)
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_idatePicker.get_Header())
        }
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _idatePicker.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_idatePicker.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _idatePicker.put_HeaderTemplate(value)
    }

    /// Gets or sets the maximum Gregorian year available for picking.
    /// - Returns: The maximum Gregorian year available for picking.
    public var maxYear: WindowsFoundation_DateTime {
        get throws {
            try _idatePicker.get_MaxYear()
        }
    }

    /// Gets or sets the maximum Gregorian year available for picking.
    /// - Returns: The maximum Gregorian year available for picking.
    public func maxYear(_ value: WindowsFoundation_DateTime) throws {
        try _idatePicker.put_MaxYear(value)
    }

    /// Gets or sets the minimum Gregorian year available for picking.
    /// - Returns: The minimum Gregorian year available for picking.
    public var minYear: WindowsFoundation_DateTime {
        get throws {
            try _idatePicker.get_MinYear()
        }
    }

    /// Gets or sets the minimum Gregorian year available for picking.
    /// - Returns: The minimum Gregorian year available for picking.
    public func minYear(_ value: WindowsFoundation_DateTime) throws {
        try _idatePicker.put_MinYear(value)
    }

    /// Gets or sets the display format for the month value.
    /// - Returns: The display format for the month value.
    public var monthFormat: Swift.String {
        get throws {
            try _idatePicker.get_MonthFormat()
        }
    }

    /// Gets or sets the display format for the month value.
    /// - Returns: The display format for the month value.
    public func monthFormat(_ value: Swift.String) throws {
        try _idatePicker.put_MonthFormat(value)
    }

    /// Gets or sets a value that indicates whether the month selector is shown.
    /// - Returns: **true** if the month selector is shown; otherwise, **false**. The default is **true**.
    public var monthVisible: Swift.Bool {
        get throws {
            try _idatePicker.get_MonthVisible()
        }
    }

    /// Gets or sets a value that indicates whether the month selector is shown.
    /// - Returns: **true** if the month selector is shown; otherwise, **false**. The default is **true**.
    public func monthVisible(_ value: Swift.Bool) throws {
        try _idatePicker.put_MonthVisible(value)
    }

    /// Gets or sets a value that indicates whether the day, month, and year selectors are stacked horizontally or vertically.
    /// - Returns: A named constant of the enumeration that indicates whether the day, month, and year selectors are stacked horizontally or vertically. The default is Horizontal.
    public var orientation: WindowsUIXamlControls_Orientation {
        get throws {
            try _idatePicker.get_Orientation()
        }
    }

    /// Gets or sets a value that indicates whether the day, month, and year selectors are stacked horizontally or vertically.
    /// - Returns: A named constant of the enumeration that indicates whether the day, month, and year selectors are stacked horizontally or vertically. The default is Horizontal.
    public func orientation(_ value: WindowsUIXamlControls_Orientation) throws {
        try _idatePicker.put_Orientation(value)
    }

    /// Gets or sets the display format for the year value.
    /// - Returns: The display format for the year value.
    public var yearFormat: Swift.String {
        get throws {
            try _idatePicker.get_YearFormat()
        }
    }

    /// Gets or sets the display format for the year value.
    /// - Returns: The display format for the year value.
    public func yearFormat(_ value: Swift.String) throws {
        try _idatePicker.put_YearFormat(value)
    }

    /// Gets or sets a value that indicates whether the year selector is shown.
    /// - Returns: **true** if the year selector is shown; otherwise, **false**. The default is **true**.
    public var yearVisible: Swift.Bool {
        get throws {
            try _idatePicker.get_YearVisible()
        }
    }

    /// Gets or sets a value that indicates whether the year selector is shown.
    /// - Returns: **true** if the year selector is shown; otherwise, **false**. The default is **true**.
    public func yearVisible(_ value: Swift.Bool) throws {
        try _idatePicker.put_YearVisible(value)
    }

    /// Occurs when the date value is changed.
    public func dateChanged(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlControls_DatePickerValueChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idatePicker.add_DateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dateChanged)
    }

    public func dateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idatePicker.remove_DateChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePicker2 members

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public var lightDismissOverlayMode: WindowsUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _idatePicker2.get_LightDismissOverlayMode()
        }
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public func lightDismissOverlayMode(_ value: WindowsUIXamlControls_LightDismissOverlayMode) throws {
        try _idatePicker2.put_LightDismissOverlayMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePicker3 members

    /// Gets or sets the date currently selected in the date picker, or **null** if no date is selected.
    /// - Returns: The date currently selected in the picker, or **null** if no date is selected.
    public var selectedDate: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _idatePicker3.get_SelectedDate()
        }
    }

    /// Gets or sets the date currently selected in the date picker, or **null** if no date is selected.
    /// - Returns: The date currently selected in the picker, or **null** if no date is selected.
    public func selectedDate(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _idatePicker3.put_SelectedDate(value)
    }

    /// Occurs when the date value is changed.
    public func selectedDateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_DatePicker?, WindowsUIXamlControls_DatePickerSelectedValueChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idatePicker3.add_SelectedDateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectedDateChanged)
    }

    public func selectedDateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idatePicker3.remove_SelectedDateChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePickerStatics2 members

    /// Identifies the LightDismissOverlayMode dependency property.
    /// - Returns: The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics2.get_LightDismissOverlayModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePickerStatics members

    /// Gets the identifier for the CalendarIdentifier dependency property.
    /// - Returns: The identifier for the CalendarIdentifier dependency property.
    public static var calendarIdentifierProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_CalendarIdentifierProperty())
        }
    }

    /// Gets the identifier for the Date dependency property.
    /// - Returns: The identifier for the Date dependency property.
    public static var dateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_DateProperty())
        }
    }

    /// Gets the identifier for the DayFormat dependency property.
    /// - Returns: The identifier for the DayFormat dependency property.
    public static var dayFormatProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_DayFormatProperty())
        }
    }

    /// Gets the identifier for the DayVisible dependency property.
    /// - Returns: The identifier for the DayVisible dependency property.
    public static var dayVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_DayVisibleProperty())
        }
    }

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_HeaderTemplateProperty())
        }
    }

    /// Gets the identifier for the MaxYear dependency property.
    /// - Returns: The identifier for the MaxYear dependency property.
    public static var maxYearProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_MaxYearProperty())
        }
    }

    /// Gets the identifier for the MinYear dependency property.
    /// - Returns: The identifier for the MinYear dependency property.
    public static var minYearProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_MinYearProperty())
        }
    }

    /// Gets the identifier for the MonthFormat dependency property.
    /// - Returns: The identifier for the MonthFormat dependency property.
    public static var monthFormatProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_MonthFormatProperty())
        }
    }

    /// Gets the identifier for the MonthVisible dependency property.
    /// - Returns: The identifier for the MonthVisible dependency property.
    public static var monthVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_MonthVisibleProperty())
        }
    }

    /// Gets the identifier for the Orientation dependency property.
    /// - Returns: The identifier for the Orientation dependency property.
    public static var orientationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_OrientationProperty())
        }
    }

    /// Gets the identifier for the YearFormat dependency property.
    /// - Returns: The identifier for the YearFormat dependency property.
    public static var yearFormatProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_YearFormatProperty())
        }
    }

    /// Gets the identifier for the YearVisible dependency property.
    /// - Returns: The identifier for the YearVisible dependency property.
    public static var yearVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics.get_YearVisibleProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IDatePickerStatics3 members

    /// Identifies the SelectedDate dependency property.
    /// - Returns: The identifier for the SelectedDate dependency property.
    public static var selectedDateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_idatePickerStatics3.get_SelectedDateProperty())
        }
    }

    // MARK: Implementation details

    private var _idatePicker_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker>? = nil

    internal var _idatePicker: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker> {
        get throws {
            try _idatePicker_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IDatePicker.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IDatePicker.self)
            }
        }
    }

    private var _idatePicker2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker2>? = nil

    internal var _idatePicker2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker2> {
        get throws {
            try _idatePicker2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IDatePicker2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IDatePicker2.self)
            }
        }
    }

    private var _idatePicker3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker3>? = nil

    internal var _idatePicker3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker3> {
        get throws {
            try _idatePicker3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IDatePicker3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IDatePicker3.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IDatePicker>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _idatePicker_storage?.release()
        _idatePicker2_storage?.release()
        _idatePicker3_storage?.release()
    }

    private static var _idatePickerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerFactory>? = nil

    internal static var _idatePickerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerFactory> {
        get throws {
            try _idatePickerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.DatePicker", id: CWinRT.SWRT_WindowsUIXamlControls_IDatePickerFactory.iid)
            }
        }
    }

    private static var _idatePickerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics2>? = nil

    internal static var _idatePickerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics2> {
        get throws {
            try _idatePickerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.DatePicker", id: CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics2.iid)
            }
        }
    }

    private static var _idatePickerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics>? = nil

    internal static var _idatePickerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics> {
        get throws {
            try _idatePickerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.DatePicker", id: CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics.iid)
            }
        }
    }

    private static var _idatePickerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics3>? = nil

    internal static var _idatePickerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics3> {
        get throws {
            try _idatePickerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.DatePicker", id: CWinRT.SWRT_WindowsUIXamlControls_IDatePickerStatics3.iid)
            }
        }
    }
}