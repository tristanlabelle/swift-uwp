// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that allows a user to pick a time value.
public final class WindowsUIXamlControls_TimePickerFlyout: WindowsRuntime.WinRTImport<WindowsUIXamlControls_TimePickerFlyoutProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControls_TimePickerFlyoutProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.ITimePickerFlyout members

    /// Gets or sets the clock system to use.
    /// - Returns: The name of the clock system to use.
    public var clockIdentifier: Swift.String {
        get throws {
            try _interop.get_ClockIdentifier()
        }
    }

    /// Gets or sets the clock system to use.
    /// - Returns: The name of the clock system to use.
    public func clockIdentifier(_ value: Swift.String) throws {
        try _interop.put_ClockIdentifier(value)
    }

    /// Gets or sets a value that indicates the time increments shown in the minute picker. For example, 15 specifies that minute picker displays only the choices 00, 15, 30, 45.
    /// - Returns: An integer from 0-59 that indicates the increments shown in the minute picker. The default is 1.
    public var minuteIncrement: Swift.Int32 {
        get throws {
            try _interop.get_MinuteIncrement()
        }
    }

    /// Gets or sets a value that indicates the time increments shown in the minute picker. For example, 15 specifies that minute picker displays only the choices 00, 15, 30, 45.
    /// - Returns: An integer from 0-59 that indicates the increments shown in the minute picker. The default is 1.
    public func minuteIncrement(_ value: Swift.Int32) throws {
        try _interop.put_MinuteIncrement(value)
    }

    /// Gets or sets the time currently set in the time picker.
    /// - Returns: The time currently set in the time picker.
    public var time: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Time()
        }
    }

    /// Gets or sets the time currently set in the time picker.
    /// - Returns: The time currently set in the time picker.
    public func time(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Time(value)
    }

    /// Occurs when the user has selected a time in the time picker flyout.
    public func timePicked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TimePickerFlyout?, WindowsUIXamlControls_TimePickedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TimePicked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: timePicked)
    }

    public func timePicked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TimePicked(token)
    }

    /// Begins an asynchronous operation to show the flyout placed in relation to the specified element.
    /// - Parameter target: The element to use as the flyout's placement target.
    /// - Returns: An asynchronous operation.
    public func showAtAsync(_ target: WindowsUIXaml_FrameworkElement?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?> {
        try COM.NullResult.unwrap(_interop.showAtAsync(target))
    }

    // MARK: Windows.UI.Xaml.Controls.ITimePickerFlyoutStatics members

    /// Gets the identifier for the ClockIdentifier dependency property.
    /// - Returns: The identifier for the ClockIdentifier dependency property.
    public static var clockIdentifierProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itimePickerFlyoutStatics.get_ClockIdentifierProperty())
        }
    }

    /// Gets the identifier for the MinuteIncrement dependency property.
    /// - Returns: The identifier for the MinuteIncrement dependency property.
    public static var minuteIncrementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itimePickerFlyoutStatics.get_MinuteIncrementProperty())
        }
    }

    /// Gets the identifier for the Time dependency property.
    /// - Returns: The identifier for the Time dependency property.
    public static var timeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itimePickerFlyoutStatics.get_TimeProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TimePickerFlyout", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _itimePickerFlyoutStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITimePickerFlyoutStatics>? = nil

    internal static var _itimePickerFlyoutStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITimePickerFlyoutStatics> {
        get throws {
            try _itimePickerFlyoutStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TimePickerFlyout", id: CWinRT.SWRT_WindowsUIXamlControls_ITimePickerFlyoutStatics.iid)
            }
        }
    }
}