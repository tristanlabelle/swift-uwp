// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that can be used to display and edit plain text (single or multi-line).
open class WindowsUIXamlControls_TextBox: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.ITextBoxFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_TextBox.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._itextBoxFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox members

    /// Gets or sets the value that determines whether the text box allows and displays the newline or return characters.
    /// - Returns: **true** if the text box allows newline characters; otherwise, **false**. The default is **false**.
    public var acceptsReturn: Swift.Bool {
        get throws {
            try _itextBox.get_AcceptsReturn()
        }
    }

    /// Gets or sets the value that determines whether the text box allows and displays the newline or return characters.
    /// - Returns: **true** if the text box allows newline characters; otherwise, **false**. The default is **false**.
    public func acceptsReturn(_ value: Swift.Bool) throws {
        try _itextBox.put_AcceptsReturn(value)
    }

    /// Gets or sets the context for input used by this TextBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control.
    public var inputScope: WindowsUIXamlInput_InputScope {
        get throws {
            try COM.NullResult.unwrap(_itextBox.get_InputScope())
        }
    }

    /// Gets or sets the context for input used by this TextBox.
    /// - Returns: The input scope, which provides a hint at the type of text input expected by the control.
    public func inputScope(_ value: WindowsUIXamlInput_InputScope?) throws {
        try _itextBox.put_InputScope(value)
    }

    /// Gets or sets the value that determines if the user can change the text in the text box.
    /// - Returns: **true** if the text box is read-only; otherwise, **false**. The default is **false**.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _itextBox.get_IsReadOnly()
        }
    }

    /// Gets or sets the value that determines if the user can change the text in the text box.
    /// - Returns: **true** if the text box is read-only; otherwise, **false**. The default is **false**.
    public func isReadOnly(_ value: Swift.Bool) throws {
        try _itextBox.put_IsReadOnly(value)
    }

    /// Gets or sets a value that specifies whether the TextBox input interacts with a spell check engine.
    /// - Returns: **true** if the TextBox input interacts with a spell check engine; otherwise, **false**. The default is **true**.
    public var isSpellCheckEnabled: Swift.Bool {
        get throws {
            try _itextBox.get_IsSpellCheckEnabled()
        }
    }

    /// Gets or sets a value that specifies whether the TextBox input interacts with a spell check engine.
    /// - Returns: **true** if the TextBox input interacts with a spell check engine; otherwise, **false**. The default is **true**.
    public func isSpellCheckEnabled(_ value: Swift.Bool) throws {
        try _itextBox.put_IsSpellCheckEnabled(value)
    }

    /// Gets or sets a value that determines whether text prediction features ("autocomplete") should be enabled for this TextBox. 
    /// - Returns: **true** to enable text prediction features, otherwise, **false**. The default is **true**.
    public var isTextPredictionEnabled: Swift.Bool {
        get throws {
            try _itextBox.get_IsTextPredictionEnabled()
        }
    }

    /// Gets or sets a value that determines whether text prediction features ("autocomplete") should be enabled for this TextBox. 
    /// - Returns: **true** to enable text prediction features, otherwise, **false**. The default is **true**.
    public func isTextPredictionEnabled(_ value: Swift.Bool) throws {
        try _itextBox.put_IsTextPredictionEnabled(value)
    }

    /// Gets or sets the value that specifies the maximum number of characters allowed for user input.
    /// - Returns: The maximum number of characters allowed for user input. The default is 0 (no limit).
    public var maxLength: Swift.Int32 {
        get throws {
            try _itextBox.get_MaxLength()
        }
    }

    /// Gets or sets the value that specifies the maximum number of characters allowed for user input.
    /// - Returns: The maximum number of characters allowed for user input. The default is 0 (no limit).
    public func maxLength(_ value: Swift.Int32) throws {
        try _itextBox.put_MaxLength(value)
    }

    /// Gets or sets the content of the current selection in the text box.
    /// - Returns: The currently selected text in the text box. If no text is selected, the value is String.Empty.
    public var selectedText: Swift.String {
        get throws {
            try _itextBox.get_SelectedText()
        }
    }

    /// Gets or sets the content of the current selection in the text box.
    /// - Returns: The currently selected text in the text box. If no text is selected, the value is String.Empty.
    public func selectedText(_ value: Swift.String) throws {
        try _itextBox.put_SelectedText(value)
    }

    /// Gets or sets the number of characters in the current selection in the text box.
    /// - Returns: The number of characters in the current selection in the text box, or 0 if there is no selection.
    public var selectionLength: Swift.Int32 {
        get throws {
            try _itextBox.get_SelectionLength()
        }
    }

    /// Gets or sets the number of characters in the current selection in the text box.
    /// - Returns: The number of characters in the current selection in the text box, or 0 if there is no selection.
    public func selectionLength(_ value: Swift.Int32) throws {
        try _itextBox.put_SelectionLength(value)
    }

    /// Gets or sets the starting position of the text selected in the text box. When the SelectionLength is 0 (there is no selected text), the SelectionStart property corresponds to the cursor position.
    /// - Returns: The starting position of the current selection or the current cursor position.
    public var selectionStart: Swift.Int32 {
        get throws {
            try _itextBox.get_SelectionStart()
        }
    }

    /// Gets or sets the starting position of the text selected in the text box. When the SelectionLength is 0 (there is no selected text), the SelectionStart property corresponds to the cursor position.
    /// - Returns: The starting position of the current selection or the current cursor position.
    public func selectionStart(_ value: Swift.Int32) throws {
        try _itextBox.put_SelectionStart(value)
    }

    /// Gets or sets the text contents of the text box.
    /// - Returns: A string containing the text contents of the text box. The default is an empty string ("").
    public var text: Swift.String {
        get throws {
            try _itextBox.get_Text()
        }
    }

    /// Gets or sets the text contents of the text box.
    /// - Returns: A string containing the text contents of the text box. The default is an empty string ("").
    public func text(_ value: Swift.String) throws {
        try _itextBox.put_Text(value)
    }

    /// Gets or sets how the text should be horizontally aligned in the text box.
    /// - Returns: One of the TextAlignment enumeration values. The default is **Left**.
    public var textAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _itextBox.get_TextAlignment()
        }
    }

    /// Gets or sets how the text should be horizontally aligned in the text box.
    /// - Returns: One of the TextAlignment enumeration values. The default is **Left**.
    public func textAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _itextBox.put_TextAlignment(value)
    }

    /// Gets or sets how line breaking occurs if a line of text extends beyond the available width of the text box.
    /// - Returns: One of the TextWrapping values. The default is **NoWrap**.
    public var textWrapping: WindowsUIXaml_TextWrapping {
        get throws {
            try _itextBox.get_TextWrapping()
        }
    }

    /// Gets or sets how line breaking occurs if a line of text extends beyond the available width of the text box.
    /// - Returns: One of the TextWrapping values. The default is **NoWrap**.
    public func textWrapping(_ value: WindowsUIXaml_TextWrapping) throws {
        try _itextBox.put_TextWrapping(value)
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    public func contextMenuOpening(adding handler: WindowsUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextMenuOpening)
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox.remove_ContextMenuOpening(token)
    }

    /// Occurs when the text selection has changed.
    public func selectionChanged(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox.remove_SelectionChanged(token)
    }

    /// Occurs when content changes in the text box.
    public func textChanged(adding handler: WindowsUIXamlControls_TextChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox.add_TextChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textChanged)
    }

    public func textChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox.remove_TextChanged(token)
    }

    /// Selects a range of text in the text box.
    /// - Parameter start: The zero-based index of the first character in the selection.
    /// - Parameter length: The length of the selection, in characters.
    public func select(_ start: Swift.Int32, _ length: Swift.Int32) throws {
        try _itextBox.select(start, length)
    }

    /// Selects the entire contents of the text box.
    public func selectAll() throws {
        try _itextBox.selectAll()
    }

    /// Returns a rectangular region for the leading or trailing edge of a character at a specific character index.
    /// - Parameter charIndex: A zero-based index of the character for which to retrieve the rectangle.
    /// - Parameter trailingEdge: **true** to get the trailing edge; **false** to get the leading edge of the character.
    /// - Returns: A rectangle for the edge of the character at the specified index.
    public func getRectFromCharacterIndex(_ charIndex: Swift.Int32, _ trailingEdge: Swift.Bool) throws -> WindowsFoundation_Rect {
        try _itextBox.getRectFromCharacterIndex(charIndex, trailingEdge)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox2 members

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_itextBox2.get_Header())
        }
    }

    /// Gets or sets the content for the control's header.
    /// - Returns: The content of the control's header. The default is **null**.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _itextBox2.put_Header(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public var headerTemplate: WindowsUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_itextBox2.get_HeaderTemplate())
        }
    }

    /// Gets or sets the DataTemplate used to display the content of the control's header.
    /// - Returns: The template that specifies the visualization of the header object. The default is **null**.
    public func headerTemplate(_ value: WindowsUIXaml_DataTemplate?) throws {
        try _itextBox2.put_HeaderTemplate(value)
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public var isColorFontEnabled: Swift.Bool {
        get throws {
            try _itextBox2.get_IsColorFontEnabled()
        }
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Returns: **true** if color glyphs show in color; otherwise, **false**. The default is **true**.
    public func isColorFontEnabled(_ value: Swift.Bool) throws {
        try _itextBox2.put_IsColorFontEnabled(value)
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public var placeholderText: Swift.String {
        get throws {
            try _itextBox2.get_PlaceholderText()
        }
    }

    /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
    /// - Returns: The text that is displayed in the control when no value is entered. The default is an empty string ("").
    public func placeholderText(_ value: Swift.String) throws {
        try _itextBox2.put_PlaceholderText(value)
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public var preventKeyboardDisplayOnProgrammaticFocus: Swift.Bool {
        get throws {
            try _itextBox2.get_PreventKeyboardDisplayOnProgrammaticFocus()
        }
    }

    /// Gets or sets a value that indicates whether the on-screen keyboard is shown when the control receives focus programmatically.
    /// - Returns: **true** if the on-screen keyboard is not shown when the control receives focus programmatically; otherwise, **false**. The default is **false**.
    public func preventKeyboardDisplayOnProgrammaticFocus(_ value: Swift.Bool) throws {
        try _itextBox2.put_PreventKeyboardDisplayOnProgrammaticFocus(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The practical default is a brush using the theme resource **TextSelectionHighlightThemeColor**.
    public var selectionHighlightColor: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_itextBox2.get_SelectionHighlightColor())
        }
    }

    /// Gets or sets the brush used to highlight the selected text.
    /// - Returns: The brush used to highlight the selected text. The practical default is a brush using the theme resource **TextSelectionHighlightThemeColor**.
    public func selectionHighlightColor(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _itextBox2.put_SelectionHighlightColor(value)
    }

    /// Occurs when text is pasted into the control.
    public func paste(adding handler: WindowsUIXamlControls_TextControlPasteEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox2.add_Paste(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: paste)
    }

    public func paste(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox2.remove_Paste(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox3 members

    /// Gets or sets a value that indicates the preferred alignment of the Input Method Editor (IME).
    /// - Returns: A value of the enumeration that indicates the preferred alignment of the Input Method Editor (IME). The default is **Default**.
    public var desiredCandidateWindowAlignment: WindowsUIXamlControls_CandidateWindowAlignment {
        get throws {
            try _itextBox3.get_DesiredCandidateWindowAlignment()
        }
    }

    /// Gets or sets a value that indicates the preferred alignment of the Input Method Editor (IME).
    /// - Returns: A value of the enumeration that indicates the preferred alignment of the Input Method Editor (IME). The default is **Default**.
    public func desiredCandidateWindowAlignment(_ value: WindowsUIXamlControls_CandidateWindowAlignment) throws {
        try _itextBox3.put_DesiredCandidateWindowAlignment(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the TextBox.
    /// - Returns: A value that indicates how the reading order is determined for the TextBox. The default is **DetectFromContent**.
    public var textReadingOrder: WindowsUIXaml_TextReadingOrder {
        get throws {
            try _itextBox3.get_TextReadingOrder()
        }
    }

    /// Gets or sets a value that indicates how the reading order is determined for the TextBox.
    /// - Returns: A value that indicates how the reading order is determined for the TextBox. The default is **DetectFromContent**.
    public func textReadingOrder(_ value: WindowsUIXaml_TextReadingOrder) throws {
        try _itextBox3.put_TextReadingOrder(value)
    }

    /// Occurs when the Input Method Editor (IME) window open, updates, or closes.
    public func candidateWindowBoundsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_CandidateWindowBoundsChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox3.add_CandidateWindowBoundsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: candidateWindowBoundsChanged)
    }

    public func candidateWindowBoundsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox3.remove_CandidateWindowBoundsChanged(token)
    }

    /// Occurs synchronously when the text in the text box starts to change, but before it is rendered.
    public func textChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextBoxTextChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox3.add_TextChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textChanging)
    }

    public func textChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox3.remove_TextChanging(token)
    }

    /// Occurs when text being composed through an Input Method Editor (IME) changes.
    public func textCompositionChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextCompositionChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox3.add_TextCompositionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionChanged)
    }

    public func textCompositionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox3.remove_TextCompositionChanged(token)
    }

    /// Occurs when a user stops composing text through an Input Method Editor (IME).
    public func textCompositionEnded(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextCompositionEndedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox3.add_TextCompositionEnded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionEnded)
    }

    public func textCompositionEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox3.remove_TextCompositionEnded(token)
    }

    /// Occurs when a user starts composing text through an Input Method Editor (IME).
    public func textCompositionStarted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextCompositionStartedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox3.add_TextCompositionStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textCompositionStarted)
    }

    public func textCompositionStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox3.remove_TextCompositionStarted(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox4 members

    /// Asynchronously gets a list of candidate words based on the provided phonetic characters in an Input Method Editor (IME).
    /// - Returns: A list of candidate words based on the provided phonetic characters in an Input Method Editor (IME).
    public func getLinguisticAlternativesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<Swift.String>?> {
        try COM.NullResult.unwrap(_itextBox4.getLinguisticAlternativesAsync())
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox5 members

    /// Gets or sets the brush used to highlight the selected text when the TextBox does not have focus.
    /// - Returns: The brush used to highlight the selected text when TextBox loses focus. The default is a null brush from a pure code perspective, but the default control template for TextBox applies a Transparent brush for this in a runtime instance of a TextBox control. To disable the SelectionHighlightColorWhenNotFocused, set the brush to Transparent once again.
    public var selectionHighlightColorWhenNotFocused: WindowsUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_itextBox5.get_SelectionHighlightColorWhenNotFocused())
        }
    }

    /// Gets or sets the brush used to highlight the selected text when the TextBox does not have focus.
    /// - Returns: The brush used to highlight the selected text when TextBox loses focus. The default is a null brush from a pure code perspective, but the default control template for TextBox applies a Transparent brush for this in a runtime instance of a TextBox control. To disable the SelectionHighlightColorWhenNotFocused, set the brush to Transparent once again.
    public func selectionHighlightColorWhenNotFocused(_ value: WindowsUIXamlMedia_SolidColorBrush?) throws {
        try _itextBox5.put_SelectionHighlightColorWhenNotFocused(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox6 members

    /// Gets or sets a value that indicates how the control modifies the case of characters as they are typed.
    /// - Returns: A value of the enumeration that indicates how the control modifies the case of characters as they are typed. The default is **Normal**, which indicates that the charcters are not changed.
    public var characterCasing: WindowsUIXamlControls_CharacterCasing {
        get throws {
            try _itextBox6.get_CharacterCasing()
        }
    }

    /// Gets or sets a value that indicates how the control modifies the case of characters as they are typed.
    /// - Returns: A value of the enumeration that indicates how the control modifies the case of characters as they are typed. The default is **Normal**, which indicates that the charcters are not changed.
    public func characterCasing(_ value: WindowsUIXamlControls_CharacterCasing) throws {
        try _itextBox6.put_CharacterCasing(value)
    }

    /// Gets or sets a value that indicates how text is aligned in the TextBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public var horizontalTextAlignment: WindowsUIXaml_TextAlignment {
        get throws {
            try _itextBox6.get_HorizontalTextAlignment()
        }
    }

    /// Gets or sets a value that indicates how text is aligned in the TextBox.
    /// - Returns: One of the TextAlignment enumeration values that specifies how text is aligned. The default is **Left**.
    public func horizontalTextAlignment(_ value: WindowsUIXaml_TextAlignment) throws {
        try _itextBox6.put_HorizontalTextAlignment(value)
    }

    /// Gets or sets a brush that describes the color of placeholder text.
    /// - Returns: The brush that describes the color of placeholder text.
    public var placeholderForeground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_itextBox6.get_PlaceholderForeground())
        }
    }

    /// Gets or sets a brush that describes the color of placeholder text.
    /// - Returns: The brush that describes the color of placeholder text.
    public func placeholderForeground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _itextBox6.put_PlaceholderForeground(value)
    }

    /// Occurs synchronously when the text in the text box starts to change, but before the **Text** property is updated.
    public func beforeTextChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextBoxBeforeTextChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox6.add_BeforeTextChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: beforeTextChanging)
    }

    public func beforeTextChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox6.remove_BeforeTextChanging(token)
    }

    /// Occurs before copied text is moved to the clipboard.
    public func copyingToClipboard(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextControlCopyingToClipboardEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox6.add_CopyingToClipboard(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: copyingToClipboard)
    }

    public func copyingToClipboard(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox6.remove_CopyingToClipboard(token)
    }

    /// Occurs before cut text is moved to the clipboard.
    public func cuttingToClipboard(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextControlCuttingToClipboardEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox6.add_CuttingToClipboard(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: cuttingToClipboard)
    }

    public func cuttingToClipboard(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox6.remove_CuttingToClipboard(token)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox7 members

    /// Gets or sets the HandwritingView associated with this text control.
    /// - Returns: The HandwritingView associated with this text control.
    public var handwritingView: WindowsUIXamlControls_HandwritingView {
        get throws {
            try COM.NullResult.unwrap(_itextBox7.get_HandwritingView())
        }
    }

    /// Gets or sets the HandwritingView associated with this text control.
    /// - Returns: The HandwritingView associated with this text control.
    public func handwritingView(_ value: WindowsUIXamlControls_HandwritingView?) throws {
        try _itextBox7.put_HandwritingView(value)
    }

    /// Gets or sets a value that indicates whether a user can enter text in the handwriting view.
    /// - Returns: **true** to allow the user to enter text in the handwriting view; otherwise, **false**.
    public var isHandwritingViewEnabled: Swift.Bool {
        get throws {
            try _itextBox7.get_IsHandwritingViewEnabled()
        }
    }

    /// Gets or sets a value that indicates whether a user can enter text in the handwriting view.
    /// - Returns: **true** to allow the user to enter text in the handwriting view; otherwise, **false**.
    public func isHandwritingViewEnabled(_ value: Swift.Bool) throws {
        try _itextBox7.put_IsHandwritingViewEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBox8 members

    /// Gets a value that indicates whether clipboard content can be pasted into the control.
    /// - Returns: **true** if clipboard content can be pasted into the control; otherwise, **false**.
    public var canPasteClipboardContent: Swift.Bool {
        get throws {
            try _itextBox8.get_CanPasteClipboardContent()
        }
    }

    /// Gets a value that indicates whether the redo buffer contains an action that can be redone.
    /// - Returns: **true** if the redo buffer contains an action that can be redone; otherwise, **false**.
    public var canRedo: Swift.Bool {
        get throws {
            try _itextBox8.get_CanRedo()
        }
    }

    /// Gets a value that indicates whether the undo buffer contains an action that can be undone.
    /// - Returns: **true** if the undo buffer contains an action that can be undone; otherwise, **false**.
    public var canUndo: Swift.Bool {
        get throws {
            try _itextBox8.get_CanUndo()
        }
    }

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public var description: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_itextBox8.get_Description())
        }
    }

    /// Gets or sets content that is shown below the control. The content should provide guidance about the input expected by the control.
    /// - Returns: The content to be displayed below the control. The default is **null**.
    public func description(_ value: WindowsRuntime.IInspectable?) throws {
        try _itextBox8.put_Description(value)
    }

    /// Gets the flyout that shows proofing commands.
    /// - Returns: The flyout that shows proofing commands.
    public var proofingMenuFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_itextBox8.get_ProofingMenuFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_itextBox8.get_SelectionFlyout())
        }
    }

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown.
    /// - Returns: The flyout that is shown when text is selected using touch or pen, or **null** if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _itextBox8.put_SelectionFlyout(value)
    }

    /// Occurs when the text selection starts to change.
    public func selectionChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_TextBox?, WindowsUIXamlControls_TextBoxSelectionChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBox8.add_SelectionChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanging)
    }

    public func selectionChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBox8.remove_SelectionChanging(token)
    }

    /// Undoes the first action in the undo buffer.
    public func undo() throws {
        try _itextBox8.undo()
    }

    /// Reapplies the first action in the redo buffer.
    public func redo() throws {
        try _itextBox8.redo()
    }

    /// Copies content from the Windows clipboard into the text control.
    public func pasteFromClipboard() throws {
        try _itextBox8.pasteFromClipboard()
    }

    /// Copies the selected content to the Windows clipboard.
    public func copySelectionToClipboard() throws {
        try _itextBox8.copySelectionToClipboard()
    }

    /// Moves the selected content to the Windows clipboard and removes it from the text control.
    public func cutSelectionToClipboard() throws {
        try _itextBox8.cutSelectionToClipboard()
    }

    /// Empties the undo and redo buffers.
    public func clearUndoRedoHistory() throws {
        try _itextBox8.clearUndoRedoHistory()
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics members

    /// Identifies the AcceptsReturn dependency property.
    /// - Returns: The identifier for the AcceptsReturn dependency property.
    public static var acceptsReturnProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_AcceptsReturnProperty())
        }
    }

    /// Identifies the InputScope dependency property.
    /// - Returns: The identifier for the InputScope dependency property.
    public static var inputScopeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_InputScopeProperty())
        }
    }

    /// Identifies the IsReadOnly dependency property.
    /// - Returns: The identifier for the IsReadOnly dependency property.
    public static var isReadOnlyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_IsReadOnlyProperty())
        }
    }

    /// Identifies the IsSpellCheckEnabled dependency property.
    /// - Returns: The identifier for the IsSpellCheckEnabled dependency property.
    public static var isSpellCheckEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_IsSpellCheckEnabledProperty())
        }
    }

    /// Identifies the IsTextPredictionEnabled dependency property.
    /// - Returns: The identifier for the IsTextPredictionEnabled dependency property.
    public static var isTextPredictionEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_IsTextPredictionEnabledProperty())
        }
    }

    /// Identifies the MaxLength dependency property.
    /// - Returns: The identifier for the MaxLength dependency property.
    public static var maxLengthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_MaxLengthProperty())
        }
    }

    /// Identifies the TextAlignment dependency property.
    /// - Returns: The identifier for the TextAlignment dependency property.
    public static var textAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_TextAlignmentProperty())
        }
    }

    /// Identifies the Text dependency property.
    /// - Returns: The identifier for the Text dependency property.
    public static var textProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_TextProperty())
        }
    }

    /// Identifies the TextWrapping dependency property.
    /// - Returns: The identifier for the TextWrapping dependency property.
    public static var textWrappingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics.get_TextWrappingProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics5 members

    /// Identifies the **SelectionHighlightColorWhenNotFocused** dependency property.
    /// - Returns: The identifier for the **SelectionHighlightColorWhenNotFocused** dependency property.
    public static var selectionHighlightColorWhenNotFocusedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics5.get_SelectionHighlightColorWhenNotFocusedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics7 members

    /// Identifies the HandwritingView dependency property.
    /// - Returns: The identifier for the HandwritingView dependency property.
    public static var handwritingViewProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics7.get_HandwritingViewProperty())
        }
    }

    /// Identifies the IsHandwritingViewEnabled dependency property.
    /// - Returns: The identifier for the IsHandwritingViewEnabled dependency property.
    public static var isHandwritingViewEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics7.get_IsHandwritingViewEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics8 members

    /// Identifies the CanPasteClipboardContent dependency property.
    /// - Returns: The identifier for the CanPasteClipboardContent dependency property.
    public static var canPasteClipboardContentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_CanPasteClipboardContentProperty())
        }
    }

    /// Identifies the CanRedo dependency property.
    /// - Returns: The identifier for the CanRedo dependency property.
    public static var canRedoProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_CanRedoProperty())
        }
    }

    /// Identifies the CanUndo dependency property.
    /// - Returns: The identifier for the CanUndo dependency property.
    public static var canUndoProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_CanUndoProperty())
        }
    }

    /// Identifies the Description dependency property.
    /// - Returns: The identifier for the Description dependency property.
    public static var descriptionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_DescriptionProperty())
        }
    }

    /// Identifies the ProofingMenuFlyout dependency property.
    /// - Returns: The identifier for the ProofingMenuFlyout dependency property.
    public static var proofingMenuFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_ProofingMenuFlyoutProperty())
        }
    }

    /// Identifies the SelectionFlyout dependency property.
    /// - Returns: The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics8.get_SelectionFlyoutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics3 members

    /// Identifies the DesiredCandidateWindowAlignment dependency property.
    /// - Returns: The identifier for the DesiredCandidateWindowAlignment dependency property.
    public static var desiredCandidateWindowAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics3.get_DesiredCandidateWindowAlignmentProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    /// - Returns: The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics3.get_TextReadingOrderProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics2 members

    /// Identifies the Header dependency property.
    /// - Returns: The identifier for the Header dependency property.
    public static var headerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_HeaderProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    /// - Returns: The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the IsColorFontEnabled dependency property.
    /// - Returns: The identifier for the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_IsColorFontEnabledProperty())
        }
    }

    /// Identifies the PlaceholderText dependency property.
    /// - Returns: The identifier for the PlaceholderText dependency property.
    public static var placeholderTextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_PlaceholderTextProperty())
        }
    }

    /// Identifies the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    /// - Returns: The identifier for the PreventKeyboardDisplayOnProgrammaticFocus dependency property.
    public static var preventKeyboardDisplayOnProgrammaticFocusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_PreventKeyboardDisplayOnProgrammaticFocusProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    /// - Returns: The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics2.get_SelectionHighlightColorProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.ITextBoxStatics6 members

    /// Identifies the CharacterCasing dependency property.
    /// - Returns: The identifier for the CharacterCasing dependency property.
    public static var characterCasingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics6.get_CharacterCasingProperty())
        }
    }

    /// Identifies the HorizontalTextAlignment dependency property.
    /// - Returns: The identifier for the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics6.get_HorizontalTextAlignmentProperty())
        }
    }

    /// Identifies the PlaceholderForeground dependency property.
    /// - Returns: The identifier for the PlaceholderForeground dependency property.
    public static var placeholderForegroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBoxStatics6.get_PlaceholderForegroundProperty())
        }
    }

    // MARK: Implementation details

    private var _itextBox_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox>? = nil

    internal var _itextBox: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox> {
        get throws {
            try _itextBox_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox.self)
            }
        }
    }

    private var _itextBox2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox2>? = nil

    internal var _itextBox2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox2> {
        get throws {
            try _itextBox2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox2.self)
            }
        }
    }

    private var _itextBox3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox3>? = nil

    internal var _itextBox3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox3> {
        get throws {
            try _itextBox3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox3.self)
            }
        }
    }

    private var _itextBox4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox4>? = nil

    internal var _itextBox4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox4> {
        get throws {
            try _itextBox4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox4.self)
            }
        }
    }

    private var _itextBox5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox5>? = nil

    internal var _itextBox5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox5> {
        get throws {
            try _itextBox5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox5.self)
            }
        }
    }

    private var _itextBox6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox6>? = nil

    internal var _itextBox6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox6> {
        get throws {
            try _itextBox6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox6.self)
            }
        }
    }

    private var _itextBox7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox7>? = nil

    internal var _itextBox7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox7> {
        get throws {
            try _itextBox7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox7.self)
            }
        }
    }

    private var _itextBox8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox8>? = nil

    internal var _itextBox8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBox8> {
        get throws {
            try _itextBox8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_ITextBox8.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_ITextBox8.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_ITextBox>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _itextBox_storage?.release()
        _itextBox2_storage?.release()
        _itextBox3_storage?.release()
        _itextBox4_storage?.release()
        _itextBox5_storage?.release()
        _itextBox6_storage?.release()
        _itextBox7_storage?.release()
        _itextBox8_storage?.release()
    }

    private static var _itextBoxFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxFactory>? = nil

    internal static var _itextBoxFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxFactory> {
        get throws {
            try _itextBoxFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxFactory.iid)
            }
        }
    }

    private static var _itextBoxStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics>? = nil

    internal static var _itextBoxStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics> {
        get throws {
            try _itextBoxStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics.iid)
            }
        }
    }

    private static var _itextBoxStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics5>? = nil

    internal static var _itextBoxStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics5> {
        get throws {
            try _itextBoxStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics5.iid)
            }
        }
    }

    private static var _itextBoxStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics7>? = nil

    internal static var _itextBoxStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics7> {
        get throws {
            try _itextBoxStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics7.iid)
            }
        }
    }

    private static var _itextBoxStatics8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics8>? = nil

    internal static var _itextBoxStatics8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics8> {
        get throws {
            try _itextBoxStatics8_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics8.iid)
            }
        }
    }

    private static var _itextBoxStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics3>? = nil

    internal static var _itextBoxStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics3> {
        get throws {
            try _itextBoxStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics3.iid)
            }
        }
    }

    private static var _itextBoxStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics2>? = nil

    internal static var _itextBoxStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics2> {
        get throws {
            try _itextBoxStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics2.iid)
            }
        }
    }

    private static var _itextBoxStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics6>? = nil

    internal static var _itextBoxStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics6> {
        get throws {
            try _itextBoxStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.TextBox", id: CWinRT.SWRT_WindowsUIXamlControls_ITextBoxStatics6.iid)
            }
        }
    }
}