// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the base class for UI elements that use a ControlTemplate to define their appearance. Parent class for ContentControl, UserControl, ItemsControl and several practical controls.
open class WindowsUIXamlControls_Control: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.IControlFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControls_Control.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icontrolFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IControl members

    /// Gets or sets a brush that provides the background of the control.
    /// - Returns: The brush that provides the background of the control. The default is **null**, (a null brush) which is evaluated as Transparent for rendering.
    public var background: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Background())
        }
    }

    /// Gets or sets a brush that provides the background of the control.
    /// - Returns: The brush that provides the background of the control. The default is **null**, (a null brush) which is evaluated as Transparent for rendering.
    public func background(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _icontrol.put_Background(value)
    }

    /// Gets or sets a brush that describes the border fill of a control.
    /// - Returns: The brush that is used to fill the control's border. The default is **null**, (a null brush) which is evaluated as Transparent for rendering.
    public var borderBrush: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_BorderBrush())
        }
    }

    /// Gets or sets a brush that describes the border fill of a control.
    /// - Returns: The brush that is used to fill the control's border. The default is **null**, (a null brush) which is evaluated as Transparent for rendering.
    public func borderBrush(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _icontrol.put_BorderBrush(value)
    }

    /// Gets or sets the border thickness of a control.
    /// - Returns: The border thickness of a control, as a Thickness value.
    public var borderThickness: WindowsUIXaml_Thickness {
        get throws {
            try _icontrol.get_BorderThickness()
        }
    }

    /// Gets or sets the border thickness of a control.
    /// - Returns: The border thickness of a control, as a Thickness value.
    public func borderThickness(_ value: WindowsUIXaml_Thickness) throws {
        try _icontrol.put_BorderThickness(value)
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _icontrol.get_CharacterSpacing()
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _icontrol.put_CharacterSpacing(value)
    }

    /// Gets a value that specifies whether this control has focus, and the mode by which focus was obtained.
    /// - Returns: A value of the enumeration. A value of **Unfocused** indicates that the control does not have focus.
    public var focusState: WindowsUIXaml_FocusState {
        get throws {
            try _icontrol.get_FocusState()
        }
    }

    /// Gets or sets the font used to display text in the control.
    /// - Returns: The font used to display text in the control.
    public var fontFamily: WindowsUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_FontFamily())
        }
    }

    /// Gets or sets the font used to display text in the control.
    /// - Returns: The font used to display text in the control.
    public func fontFamily(_ value: WindowsUIXamlMedia_FontFamily?) throws {
        try _icontrol.put_FontFamily(value)
    }

    /// Gets or sets the size of the text in this control.
    /// - Returns: The size of the text in the Control, in pixels.
    public var fontSize: Swift.Double {
        get throws {
            try _icontrol.get_FontSize()
        }
    }

    /// Gets or sets the size of the text in this control.
    /// - Returns: The size of the text in the Control, in pixels.
    public func fontSize(_ value: Swift.Double) throws {
        try _icontrol.put_FontSize(value)
    }

    /// Gets or sets the degree to which a font is condensed or expanded on the screen.
    /// - Returns: One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is **Normal**.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _icontrol.get_FontStretch()
        }
    }

    /// Gets or sets the degree to which a font is condensed or expanded on the screen.
    /// - Returns: One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is **Normal**.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _icontrol.put_FontStretch(value)
    }

    /// Gets or sets the style in which the text is rendered.
    /// - Returns: One of the values that specifies the style in which the text is rendered. The default is **Normal**.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _icontrol.get_FontStyle()
        }
    }

    /// Gets or sets the style in which the text is rendered.
    /// - Returns: One of the values that specifies the style in which the text is rendered. The default is **Normal**.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _icontrol.put_FontStyle(value)
    }

    /// Gets or sets the thickness of the specified font.
    /// - Returns: One of the values that specifies the thickness of the specified font. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _icontrol.get_FontWeight()
        }
    }

    /// Gets or sets the thickness of the specified font.
    /// - Returns: One of the values that specifies the thickness of the specified font. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _icontrol.put_FontWeight(value)
    }

    /// Gets or sets a brush that describes the foreground color.
    /// - Returns: The brush that paints the foreground of the control. The default value is a SolidColorBrush with color of Black.
    public var foreground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Foreground())
        }
    }

    /// Gets or sets a brush that describes the foreground color.
    /// - Returns: The brush that paints the foreground of the control. The default value is a SolidColorBrush with color of Black.
    public func foreground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _icontrol.put_Foreground(value)
    }

    /// Gets or sets the horizontal alignment of the control's content.
    /// - Returns: One of the HorizontalAlignment values. The default is **Left**.
    public var horizontalContentAlignment: WindowsUIXaml_HorizontalAlignment {
        get throws {
            try _icontrol.get_HorizontalContentAlignment()
        }
    }

    /// Gets or sets the horizontal alignment of the control's content.
    /// - Returns: One of the HorizontalAlignment values. The default is **Left**.
    public func horizontalContentAlignment(_ value: WindowsUIXaml_HorizontalAlignment) throws {
        try _icontrol.put_HorizontalContentAlignment(value)
    }

    /// Gets or sets a value indicating whether the user can interact with the control.
    /// - Returns: **true** if the user can interact with the control; otherwise, **false**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _icontrol.get_IsEnabled()
        }
    }

    /// Gets or sets a value indicating whether the user can interact with the control.
    /// - Returns: **true** if the user can interact with the control; otherwise, **false**.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _icontrol.put_IsEnabled(value)
    }

    /// Gets or sets a value that indicates whether a control is included in tab navigation.
    /// - Returns: **true** if the control is included in tab navigation; otherwise, **false**. The default is **true**.
    public var isTabStop: Swift.Bool {
        get throws {
            try _icontrol.get_IsTabStop()
        }
    }

    /// Gets or sets a value that indicates whether a control is included in tab navigation.
    /// - Returns: **true** if the control is included in tab navigation; otherwise, **false**. The default is **true**.
    public func isTabStop(_ value: Swift.Bool) throws {
        try _icontrol.put_IsTabStop(value)
    }

    /// Gets or sets the padding inside a control.
    /// - Returns: The amount of space between the content of a Control and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public var padding: WindowsUIXaml_Thickness {
        get throws {
            try _icontrol.get_Padding()
        }
    }

    /// Gets or sets the padding inside a control.
    /// - Returns: The amount of space between the content of a Control and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public func padding(_ value: WindowsUIXaml_Thickness) throws {
        try _icontrol.put_Padding(value)
    }

    /// Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation for a device. The default value is MaxValue.
    public var tabIndex: Swift.Int32 {
        get throws {
            try _icontrol.get_TabIndex()
        }
    }

    /// Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation for a device. The default value is MaxValue.
    public func tabIndex(_ value: Swift.Int32) throws {
        try _icontrol.put_TabIndex(value)
    }

    /// Gets or sets a value that modifies how tabbing and TabIndex work for this control.
    /// - Returns: A value of the enumeration. The default is **Local**.
    public var tabNavigation: WindowsUIXamlInput_KeyboardNavigationMode {
        get throws {
            try _icontrol.get_TabNavigation()
        }
    }

    /// Gets or sets a value that modifies how tabbing and TabIndex work for this control.
    /// - Returns: A value of the enumeration. The default is **Local**.
    public func tabNavigation(_ value: WindowsUIXamlInput_KeyboardNavigationMode) throws {
        try _icontrol.put_TabNavigation(value)
    }

    /// Gets or sets a control template. The control template defines the visual appearance of a control in UI, and is defined in XAML markup.
    /// - Returns: The template that defines the appearance of the Control. The ControlTemplate must have exactly one root element as its content.
    public var template: WindowsUIXamlControls_ControlTemplate {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Template())
        }
    }

    /// Gets or sets a control template. The control template defines the visual appearance of a control in UI, and is defined in XAML markup.
    /// - Returns: The template that defines the appearance of the Control. The ControlTemplate must have exactly one root element as its content.
    public func template(_ value: WindowsUIXamlControls_ControlTemplate?) throws {
        try _icontrol.put_Template(value)
    }

    /// Gets or sets the vertical alignment of the control's content.
    /// - Returns: One of the VerticalAlignment values. The default is **Top**.
    public var verticalContentAlignment: WindowsUIXaml_VerticalAlignment {
        get throws {
            try _icontrol.get_VerticalContentAlignment()
        }
    }

    /// Gets or sets the vertical alignment of the control's content.
    /// - Returns: One of the VerticalAlignment values. The default is **Top**.
    public func verticalContentAlignment(_ value: WindowsUIXaml_VerticalAlignment) throws {
        try _icontrol.put_VerticalContentAlignment(value)
    }

    /// Occurs when the IsEnabled property changes.
    public func isEnabledChanged(adding handler: WindowsUIXaml_DependencyPropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol.add_IsEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isEnabledChanged)
    }

    public func isEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol.remove_IsEnabledChanged(token)
    }

    /// Loads the relevant control template so that its parts can be referenced.
    /// - Returns: A value that indicates whether the visual tree was rebuilt by this call. **True** if the tree was rebuilt; **false** if the previous visual tree was retained.
    public func applyTemplate() throws -> Swift.Bool {
        try _icontrol.applyTemplate()
    }

    /// Attempts to set the focus on the control.
    /// - Parameter value: Specifies how focus was set, as a value of the enumeration.
    /// - Returns: **true** if focus was set to the control, or focus was already on the control. **false** if the control is not focusable.
    public func focus(_ value: WindowsUIXaml_FocusState) throws -> Swift.Bool {
        try _icontrol.focus(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControl2 members

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _icontrol2.get_IsTextScaleFactorEnabled()
        }
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _icontrol2.put_IsTextScaleFactorEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControl3 members

    /// Gets or sets a value that indicates whether the control uses focus visuals that are drawn by the system or those defined in the control template.
    /// - Returns: **true** if the control uses focus visuals drawn by the system; **false** if the control uses focus visuals defined in the ControlTemplate. The default is **false**; see Remarks.
    public var useSystemFocusVisuals: Swift.Bool {
        get throws {
            try _icontrol3.get_UseSystemFocusVisuals()
        }
    }

    /// Gets or sets a value that indicates whether the control uses focus visuals that are drawn by the system or those defined in the control template.
    /// - Returns: **true** if the control uses focus visuals drawn by the system; **false** if the control uses focus visuals defined in the ControlTemplate. The default is **false**; see Remarks.
    public func useSystemFocusVisuals(_ value: Swift.Bool) throws {
        try _icontrol3.put_UseSystemFocusVisuals(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControl4 members

    /// Get or sets a value that specifies a control's preference for whether sounds are played.
    /// - Returns: A value of the enumeration that specifies a control's preference for whether sounds are played. The default is **Auto**.
    public var elementSoundMode: WindowsUIXaml_ElementSoundMode {
        get throws {
            try _icontrol4.get_ElementSoundMode()
        }
    }

    /// Get or sets a value that specifies a control's preference for whether sounds are played.
    /// - Returns: A value of the enumeration that specifies a control's preference for whether sounds are played. The default is **Auto**.
    public func elementSoundMode(_ value: WindowsUIXaml_ElementSoundMode) throws {
        try _icontrol4.put_ElementSoundMode(value)
    }

    /// Get or sets a value that indicates whether focus is constrained within the control boundaries (for game pad/remote interaction).
    /// - Returns: **true** if focus is constrained within the control boundaries; otherwise, **false**.
    public var isFocusEngaged: Swift.Bool {
        get throws {
            try _icontrol4.get_IsFocusEngaged()
        }
    }

    /// Get or sets a value that indicates whether focus is constrained within the control boundaries (for game pad/remote interaction).
    /// - Returns: **true** if focus is constrained within the control boundaries; otherwise, **false**.
    public func isFocusEngaged(_ value: Swift.Bool) throws {
        try _icontrol4.put_IsFocusEngaged(value)
    }

    /// Get or sets a value that indicates whether focus can be constrained within the control boundaries (for game pad/remote interaction).
    /// - Returns: **true** if focus can be constrained within the control boundaries; otherwise, **false**.
    public var isFocusEngagementEnabled: Swift.Bool {
        get throws {
            try _icontrol4.get_IsFocusEngagementEnabled()
        }
    }

    /// Get or sets a value that indicates whether focus can be constrained within the control boundaries (for game pad/remote interaction).
    /// - Returns: **true** if focus can be constrained within the control boundaries; otherwise, **false**.
    public func isFocusEngagementEnabled(_ value: Swift.Bool) throws {
        try _icontrol4.put_IsFocusEngagementEnabled(value)
    }

    /// Gets or sets whether a UI element supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as an Xbox gamepad or remote control.
    /// - Returns: The pointer emulation mode. The default is **Never**.
    public var requiresPointer: WindowsUIXamlControls_RequiresPointer {
        get throws {
            try _icontrol4.get_RequiresPointer()
        }
    }

    /// Gets or sets whether a UI element supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as an Xbox gamepad or remote control.
    /// - Returns: The pointer emulation mode. The default is **Never**.
    public func requiresPointer(_ value: WindowsUIXamlControls_RequiresPointer) throws {
        try _icontrol4.put_RequiresPointer(value)
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) down.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) down.
    public var xyfocusDown: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_icontrol4.get_XYFocusDown())
        }
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) down.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) down.
    public func xyfocusDown(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _icontrol4.put_XYFocusDown(value)
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) left.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) left.
    public var xyfocusLeft: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_icontrol4.get_XYFocusLeft())
        }
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) left.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) left.
    public func xyfocusLeft(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _icontrol4.put_XYFocusLeft(value)
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) right.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) right.
    public var xyfocusRight: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_icontrol4.get_XYFocusRight())
        }
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) right.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) right.
    public func xyfocusRight(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _icontrol4.put_XYFocusRight(value)
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) up.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) up.
    public var xyfocusUp: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_icontrol4.get_XYFocusUp())
        }
    }

    /// Gets or sets the object that gets focus when a user presses the Directional Pad (D-pad) up.
    /// - Returns: The object that gets focus when a user presses the Directional Pad (D-pad) up.
    public func xyfocusUp(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _icontrol4.put_XYFocusUp(value)
    }

    /// Occurs when focus is released from the control boundaries (for game pad/remote interaction).
    public func focusDisengaged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Control?, WindowsUIXamlControls_FocusDisengagedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol4.add_FocusDisengaged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: focusDisengaged)
    }

    public func focusDisengaged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol4.remove_FocusDisengaged(token)
    }

    /// Occurs when focus is constrained within the control boundaries (for game pad/remote interaction).
    public func focusEngaged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControls_Control?, WindowsUIXamlControls_FocusEngagedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol4.add_FocusEngaged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: focusEngaged)
    }

    public func focusEngaged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol4.remove_FocusEngaged(token)
    }

    /// Releases focus from the control boundaries for a control that has focus engagement (for game pad/remote interaction).
    public func removeFocusEngagement() throws {
        try _icontrol4.removeFocusEngagement()
    }

    // MARK: Windows.UI.Xaml.Controls.IControl5 members

    /// Gets or sets the path to the resource file that contains the default style for the control.
    /// - Returns: The path to the resource file that contains the default style for the control.
    public var defaultStyleResourceUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_icontrol5.get_DefaultStyleResourceUri())
        }
    }

    /// Gets or sets the path to the resource file that contains the default style for the control.
    /// - Returns: The path to the resource file that contains the default style for the control.
    public func defaultStyleResourceUri(_ value: WindowsFoundation_Uri?) throws {
        try _icontrol5.put_DefaultStyleResourceUri(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControl7 members

    /// Gets or sets a value that indicates how far the background extends in relation to this element's border.
    /// - Returns: A value of the enumeration that indicates how far the background extends. The default is **InnerBorderEdge**.
    public var backgroundSizing: WindowsUIXamlControls_BackgroundSizing {
        get throws {
            try _icontrol7.get_BackgroundSizing()
        }
    }

    /// Gets or sets a value that indicates how far the background extends in relation to this element's border.
    /// - Returns: A value of the enumeration that indicates how far the background extends. The default is **InnerBorderEdge**.
    public func backgroundSizing(_ value: WindowsUIXamlControls_BackgroundSizing) throws {
        try _icontrol7.put_BackgroundSizing(value)
    }

    /// Gets or sets the radius for the corners of the control's border.
    /// - Returns: The degree to which the corners are rounded, expressed as values of the CornerRadius structure.
    public var cornerRadius: WindowsUIXaml_CornerRadius {
        get throws {
            try _icontrol7.get_CornerRadius()
        }
    }

    /// Gets or sets the radius for the corners of the control's border.
    /// - Returns: The degree to which the corners are rounded, expressed as values of the CornerRadius structure.
    public func cornerRadius(_ value: WindowsUIXaml_CornerRadius) throws {
        try _icontrol7.put_CornerRadius(value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControlProtected members

    /// Gets or sets the key that references the default style for the control. Authors of custom controls use this property to change the default for the style that their control uses.
    /// - Returns: The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be a System.Type value.
    public var defaultStyleKey: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontrolProtected.get_DefaultStyleKey())
        }
    }

    /// Gets or sets the key that references the default style for the control. Authors of custom controls use this property to change the default for the style that their control uses.
    /// - Returns: The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be a System.Type value.
    public func defaultStyleKey(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontrolProtected.put_DefaultStyleKey(value)
    }

    /// Retrieves the named element in the instantiated ControlTemplate visual tree.
    /// - Parameter childName: The name of the element to find.
    /// - Returns: The named element from the template, if the element is found. Can return null if no element with name *childName* was found in the template.
    public func getTemplateChild(_ childName: Swift.String) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_icontrolProtected.getTemplateChild(childName))
    }

    // MARK: Windows.UI.Xaml.Controls.IControlOverrides members

    /// Called before the PointerEntered event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerEntered(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerEntered(e)
    }

    /// Called before the PointerPressed event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerPressed(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerPressed(e)
    }

    /// Called before the PointerMoved event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerMoved(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerMoved(e)
    }

    /// Called before the PointerReleased event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerReleased(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerReleased(e)
    }

    /// Called before the PointerExited event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerExited(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerExited(e)
    }

    /// Called before the PointerCaptureLost event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerCaptureLost(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerCaptureLost(e)
    }

    /// Called before the PointerCanceled event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerCanceled(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerCanceled(e)
    }

    /// Called before the PointerWheelChanged event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerWheelChanged(_ e: WindowsUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerWheelChanged(e)
    }

    /// Called before the Tapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onTapped(_ e: WindowsUIXamlInput_TappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onTapped(e)
    }

    /// Called before the DoubleTapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onDoubleTapped(_ e: WindowsUIXamlInput_DoubleTappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onDoubleTapped(e)
    }

    /// Called before the Holding event occurs.
    /// - Parameter e: Event data for the event.
    open func onHolding(_ e: WindowsUIXamlInput_HoldingRoutedEventArgs?) throws {
        try _icontrolOverrides.onHolding(e)
    }

    /// Called before the RightTapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onRightTapped(_ e: WindowsUIXamlInput_RightTappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onRightTapped(e)
    }

    /// Called before the ManipulationStarting event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationStarting(_ e: WindowsUIXamlInput_ManipulationStartingRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationStarting(e)
    }

    /// Called before the ManipulationInertiaStarting event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationInertiaStarting(_ e: WindowsUIXamlInput_ManipulationInertiaStartingRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationInertiaStarting(e)
    }

    /// Called before the ManipulationStarted event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationStarted(_ e: WindowsUIXamlInput_ManipulationStartedRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationStarted(e)
    }

    /// Called before the ManipulationDelta event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationDelta(_ e: WindowsUIXamlInput_ManipulationDeltaRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationDelta(e)
    }

    /// Called before the ManipulationCompleted event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationCompleted(_ e: WindowsUIXamlInput_ManipulationCompletedRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationCompleted(e)
    }

    /// Called before the KeyUp event occurs.
    /// - Parameter e: The data for the event.
    open func onKeyUp(_ e: WindowsUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onKeyUp(e)
    }

    /// Called before the KeyDown event occurs.
    /// - Parameter e: The data for the event.
    open func onKeyDown(_ e: WindowsUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onKeyDown(e)
    }

    /// Called before the GotFocus event occurs.
    /// - Parameter e: The data for the event.
    open func onGotFocus(_ e: WindowsUIXaml_RoutedEventArgs?) throws {
        try _icontrolOverrides.onGotFocus(e)
    }

    /// Called before the LostFocus event occurs.
    /// - Parameter e: The data for the event.
    open func onLostFocus(_ e: WindowsUIXaml_RoutedEventArgs?) throws {
        try _icontrolOverrides.onLostFocus(e)
    }

    /// Called before the DragEnter event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragEnter(_ e: WindowsUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragEnter(e)
    }

    /// Called before the DragLeave event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragLeave(_ e: WindowsUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragLeave(e)
    }

    /// Called before the DragOver event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragOver(_ e: WindowsUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragOver(e)
    }

    /// Called before the Drop event occurs.
    /// - Parameter e: Event data for the event.
    open func onDrop(_ e: WindowsUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDrop(e)
    }

    // MARK: Windows.UI.Xaml.Controls.IControlOverrides6 members

    /// Called before the PreviewKeyDown event occurs.
    /// - Parameter e: The data for the event.
    open func onPreviewKeyDown(_ e: WindowsUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides6.onPreviewKeyDown(e)
    }

    /// Called before the PreviewKeyUp event occurs.
    /// - Parameter e: The data for the event.
    open func onPreviewKeyUp(_ e: WindowsUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides6.onPreviewKeyUp(e)
    }

    /// Called before the CharacterReceived event occurs.
    /// - Parameter e: Event data for the event.
    open func onCharacterReceived(_ e: WindowsUIXamlInput_CharacterReceivedRoutedEventArgs?) throws {
        try _icontrolOverrides6.onCharacterReceived(e)
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics7 members

    /// Identifies the BackgroundSizing dependency property.
    /// - Returns: The identifier for the BackgroundSizing dependency property.
    public static var backgroundSizingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics7.get_BackgroundSizingProperty())
        }
    }

    /// Identifies the CornerRadius dependency property.
    /// - Returns: The identifier for the CornerRadius dependency property.
    public static var cornerRadiusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics7.get_CornerRadiusProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics5 members

    /// Identifies the **DefaultStyleResourceUri** dependency property.
    /// - Returns: The identifier for the **DefaultStyleResourceUri** dependency property.
    public static var defaultStyleResourceUriProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics5.get_DefaultStyleResourceUriProperty())
        }
    }

    /// Identifies the Control.IsTemplateKeyTipTarget  XAML attached property.
    /// - Returns: The identifier for the Control.IsTemplateKeyTipTarget XAML attached property.
    public static var isTemplateKeyTipTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics5.get_IsTemplateKeyTipTargetProperty())
        }
    }

    /// Gets the value of the Control.IsTemplateKeyTipTarget  XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Control.IsTemplateKeyTipTarget XAML attached property value of the specified object.
    public static func getIsTemplateKeyTipTarget(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _icontrolStatics5.getIsTemplateKeyTipTarget(element)
    }

    /// Sets the value of the Control.IsTemplateKeyTipTarget XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter value: The value to set.
    public static func setIsTemplateKeyTipTarget(_ element: WindowsUIXaml_DependencyObject?, _ value: Swift.Bool) throws {
        try _icontrolStatics5.setIsTemplateKeyTipTarget(element, value)
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics2 members

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    /// - Returns: The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics2.get_IsTextScaleFactorEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics4 members

    /// Identifies the ElementSoundMode dependency property.
    /// - Returns: The identifier for the ElementSoundMode dependency property.
    public static var elementSoundModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_ElementSoundModeProperty())
        }
    }

    /// Identifies the IsFocusEngaged dependency property.
    /// - Returns: The identifier for the IsFocusEngaged dependency property.
    public static var isFocusEngagedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_IsFocusEngagedProperty())
        }
    }

    /// Identifies the IsFocusEngagementEnabled dependency property.
    /// - Returns: The identifier for the IsFocusEngagementEnabled dependency property.
    public static var isFocusEngagementEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_IsFocusEngagementEnabledProperty())
        }
    }

    /// Identifies the RequiresPointer dependency property.
    /// - Returns: The identifier for the RequiresPointer dependency property.
    public static var requiresPointerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_RequiresPointerProperty())
        }
    }

    /// Identifies the XYFocusDown dependency property.
    /// - Returns: The identifier for the XYFocusDown dependency property.
    public static var xyfocusDownProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_XYFocusDownProperty())
        }
    }

    /// Identifies the XYFocusLeft dependency property.
    /// - Returns: The identifier for the XYFocusLeft dependency property.
    public static var xyfocusLeftProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_XYFocusLeftProperty())
        }
    }

    /// Identifies the XYFocusRight dependency property.
    /// - Returns: The identifier for the XYFocusRight dependency property.
    public static var xyfocusRightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_XYFocusRightProperty())
        }
    }

    /// Identifies the XYFocusUp dependency property.
    /// - Returns: The identifier for the XYFocusUp dependency property.
    public static var xyfocusUpProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics4.get_XYFocusUpProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics members

    /// Identifies the Background dependency property.
    /// - Returns: The identifier for the Background dependency property.
    public static var backgroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BackgroundProperty())
        }
    }

    /// Identifies the BorderBrush dependency property.
    /// - Returns: The identifier for the BorderBrush dependency property.
    public static var borderBrushProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BorderBrushProperty())
        }
    }

    /// Identifies the BorderThickness dependency property.
    /// - Returns: The identifier for the BorderThickness dependency property.
    public static var borderThicknessProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BorderThicknessProperty())
        }
    }

    /// Identifies the CharacterSpacing dependency property.
    /// - Returns: The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the DefaultStyleKey dependency property.
    /// - Returns: The identifier for the DefaultStyleKey dependency property.
    public static var defaultStyleKeyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_DefaultStyleKeyProperty())
        }
    }

    /// Identifies the FocusState dependency property.
    /// - Returns: The identifier for the FocusState dependency property.
    public static var focusStateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FocusStateProperty())
        }
    }

    /// Identifies the FontFamily dependency property.
    /// - Returns: The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontSize dependency property.
    /// - Returns: The identifier for the FontSize dependency property.
    public static var fontSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontStretch dependency property.
    /// - Returns: The identifier for the FontStretch dependency property.
    public static var fontStretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStyle dependency property.
    /// - Returns: The identifier for the FontStyle dependency property.
    public static var fontStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontWeight dependency property.
    /// - Returns: The identifier for the FontWeight dependency property.
    public static var fontWeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the Foreground dependency property.
    /// - Returns: The identifier for the Foreground dependency property.
    public static var foregroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the HorizontalContentAlignment dependency property.
    /// - Returns: The identifier for the HorizontalContentAlignment dependency property.
    public static var horizontalContentAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_HorizontalContentAlignmentProperty())
        }
    }

    /// Identifies the IsEnabled dependency property.
    /// - Returns: The identifier for the IsEnabled dependency property.
    public static var isEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsEnabledProperty())
        }
    }

    /// Identifies the IsTabStop  dependency property.
    /// - Returns: The identifier for the IsTabStop  dependency property.
    public static var isTabStopProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsTabStopProperty())
        }
    }

    /// Identifies the Padding dependency property.
    /// - Returns: The identifier for the Padding dependency property.
    public static var paddingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_PaddingProperty())
        }
    }

    /// Identifies the TabIndex  dependency property.
    /// - Returns: The identifier for the TabIndex  dependency property.
    public static var tabIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_TabIndexProperty())
        }
    }

    /// Identifies the TabNavigation  dependency property.
    /// - Returns: The identifier for the TabNavigation  dependency property.
    public static var tabNavigationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_TabNavigationProperty())
        }
    }

    /// Identifies the Template  dependency property.
    /// - Returns: The identifier for the Template  dependency property.
    public static var templateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_TemplateProperty())
        }
    }

    /// Identifies the VerticalContentAlignment dependency property.
    /// - Returns: The identifier for the VerticalContentAlignment dependency property.
    public static var verticalContentAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_VerticalContentAlignmentProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.IControlStatics3 members

    /// Identifies the Control.IsTemplateFocusTarget XAML attached property.
    /// - Returns: The identifier for the Control.IsTemplateFocusTarget XAML attached property.
    public static var isTemplateFocusTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics3.get_IsTemplateFocusTargetProperty())
        }
    }

    /// Identifies the UseSystemFocusVisuals dependency property.
    /// - Returns: The identifier for the UseSystemFocusVisuals dependency property.
    public static var useSystemFocusVisualsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics3.get_UseSystemFocusVisualsProperty())
        }
    }

    /// Gets the value of the Control.IsTemplateFocusTarget XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Control.IsTemplateFocusTarget XAML attached property value of the specified object.
    public static func getIsTemplateFocusTarget(_ element: WindowsUIXaml_FrameworkElement?) throws -> Swift.Bool {
        try _icontrolStatics3.getIsTemplateFocusTarget(element)
    }

    /// Sets the value of the Control.IsTemplateFocusTarget XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter value: The value to set.
    public static func setIsTemplateFocusTarget(_ element: WindowsUIXaml_FrameworkElement?, _ value: Swift.Bool) throws {
        try _icontrolStatics3.setIsTemplateFocusTarget(element, value)
    }

    // MARK: Implementation details

    private var _icontrol_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl>? = nil

    internal var _icontrol: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl> {
        get throws {
            try _icontrol_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl.self)
            }
        }
    }

    private var _icontrol2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl2>? = nil

    internal var _icontrol2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl2> {
        get throws {
            try _icontrol2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl2.self)
            }
        }
    }

    private var _icontrol3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl3>? = nil

    internal var _icontrol3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl3> {
        get throws {
            try _icontrol3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl3.self)
            }
        }
    }

    private var _icontrol4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl4>? = nil

    internal var _icontrol4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl4> {
        get throws {
            try _icontrol4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl4.self)
            }
        }
    }

    private var _icontrol5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl5>? = nil

    internal var _icontrol5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl5> {
        get throws {
            try _icontrol5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl5.self)
            }
        }
    }

    private var _icontrol7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl7>? = nil

    internal var _icontrol7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControl7> {
        get throws {
            try _icontrol7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControl7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControl7.self)
            }
        }
    }

    private var _icontrolProtected_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlProtected>? = nil

    internal var _icontrolProtected: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlProtected> {
        get throws {
            try _icontrolProtected_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControlProtected.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControlProtected.self)
            }
        }
    }

    private var _icontrolOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides>? = nil

    internal var _icontrolOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides> {
        get throws {
            try _icontrolOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides.self)
            }
        }
    }

    private var _icontrolOverrides6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides6>? = nil

    internal var _icontrolOverrides6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides6> {
        get throws {
            try _icontrolOverrides6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides6.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControls_IControl>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icontrol_storage?.release()
        _icontrol2_storage?.release()
        _icontrol3_storage?.release()
        _icontrol4_storage?.release()
        _icontrol5_storage?.release()
        _icontrol7_storage?.release()
        _icontrolProtected_storage?.release()
        _icontrolOverrides_storage?.release()
        _icontrolOverrides6_storage?.release()
    }

    private static var _icontrolFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlFactory>? = nil

    internal static var _icontrolFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlFactory> {
        get throws {
            try _icontrolFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlFactory.iid)
            }
        }
    }

    private static var _icontrolStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics7>? = nil

    internal static var _icontrolStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics7> {
        get throws {
            try _icontrolStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics7.iid)
            }
        }
    }

    private static var _icontrolStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics5>? = nil

    internal static var _icontrolStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics5> {
        get throws {
            try _icontrolStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics5.iid)
            }
        }
    }

    private static var _icontrolStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics2>? = nil

    internal static var _icontrolStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics2> {
        get throws {
            try _icontrolStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics2.iid)
            }
        }
    }

    private static var _icontrolStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics4>? = nil

    internal static var _icontrolStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics4> {
        get throws {
            try _icontrolStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics4.iid)
            }
        }
    }

    private static var _icontrolStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics>? = nil

    internal static var _icontrolStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics> {
        get throws {
            try _icontrolStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics.iid)
            }
        }
    }

    private static var _icontrolStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics3>? = nil

    internal static var _icontrolStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IControlStatics3> {
        get throws {
            try _icontrolStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Control", id: CWinRT.SWRT_WindowsUIXamlControls_IControlStatics3.iid)
            }
        }
    }

    // MARK: Override support

    private var _icontrolOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _icontrolOverrides6_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides.iid {
            if !_icontrolOverrides_outer.isInitialized {
                _icontrolOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControls_ControlProjection.VirtualTables.icontrolOverrides)
            }
            return _icontrolOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlControls_IControlOverrides6.iid {
            if !_icontrolOverrides6_outer.isInitialized {
                _icontrolOverrides6_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControls_ControlProjection.VirtualTables.icontrolOverrides6)
            }
            return _icontrolOverrides6_outer.unknownPointer.addingRef()
        }
        return nil
    }
}