// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a connection with a casting device.
public final class WindowsMediaCasting_CastingConnection: WindowsRuntime.WinRTImport<WindowsMediaCasting_CastingConnectionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Casting.ICastingConnection members

    /// Gets the casting device with which a connection has been made.
    /// - Returns: The casting device.
    public var device: WindowsMediaCasting_CastingDevice {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Device())
        }
    }

    /// Gets and sets the content source that is being casted through the connection to the casting device. The content can be set and changed at any time and doing so does not disconnect the connection.
    /// - Returns: The content source that is being casted to the casting device.
    public var source: WindowsMediaCasting_CastingSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets and sets the content source that is being casted through the connection to the casting device. The content can be set and changed at any time and doing so does not disconnect the connection.
    /// - Returns: The content source that is being casted to the casting device.
    public func source(_ value: WindowsMediaCasting_CastingSource?) throws {
        try _interop.put_Source(value)
    }

    /// Gets the current state of the connection.
    /// - Returns: The current state of the connection.
    public var state: WindowsMediaCasting_CastingConnectionState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Indicates an error occurred while attempting to make a casting connection.
    public func errorOccurred(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCasting_CastingConnection?, WindowsMediaCasting_CastingConnectionErrorOccurredEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ErrorOccurred(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: errorOccurred)
    }

    public func errorOccurred(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ErrorOccurred(token)
    }

    /// Indicates a change in the State property.
    public func stateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCasting_CastingConnection?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stateChanged)
    }

    public func stateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StateChanged(token)
    }

    /// Starts the process of casting to a casting device. When called, this method pairs the c sting device, if necessary, and verifies access to the casting device with the user. If the user denies the app access to the device, casting fails. Otherwise, a connection is established, and content is sent to the device. During this time, the connection state changes to connecting, then to connected. If a casting source is set, the state changes to rendering once playback begins.
    /// - Parameter value: The content to be casted.
    /// - Returns: The status of the casting connection request.
    public func requestStartCastingAsync(_ value: WindowsMediaCasting_CastingSource?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCasting_CastingConnectionErrorStatus> {
        try COM.NullResult.unwrap(_interop.requestStartCastingAsync(value))
    }

    /// Terminates a casting connection. The content that was rendering remotely returns to the local element that you retrieved the casting source from.
    /// - Returns: The status of the termination.
    public func disconnectAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCasting_CastingConnectionErrorStatus> {
        try COM.NullResult.unwrap(_interop.disconnectAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the casting connection.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }
}