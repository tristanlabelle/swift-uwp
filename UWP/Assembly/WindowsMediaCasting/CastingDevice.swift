// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a physical device that is capable of supporting casting connections and rendering media content sent to it.
public final class WindowsMediaCasting_CastingDevice: WindowsRuntime.WinRTImport<WindowsMediaCasting_CastingDeviceProjection> {
    // MARK: Windows.Media.Casting.ICastingDevice members

    /// A human-readable name for the device, retrieved from the device itself.
    /// - Returns: The human-readable name for the device.
    public var friendlyName: Swift.String {
        get throws {
            try _interop.get_FriendlyName()
        }
    }

    /// An icon representing the device.
    /// - Returns: The icon.
    public var icon: WindowsStorageStreams_IRandomAccessStreamWithContentType {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Icon())
        }
    }

    /// The device ID. This is the same ID used with Windows.Devices.Enumeration APIs.
    /// - Returns: The device's ID.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the media types supported by the device. containing
    /// - Returns: The media types, CastingPlaybackTypes, supported by the device.
    public func getSupportedCastingPlaybackTypesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCasting_CastingPlaybackTypes> {
        try COM.NullResult.unwrap(_interop.getSupportedCastingPlaybackTypesAsync())
    }

    /// Creates a new CastingConnection object. This method does not establish a connection to the casting device.
    /// - Returns: The object that represents the casting connection.
    public func createCastingConnection() throws -> WindowsMediaCasting_CastingConnection {
        try COM.NullResult.unwrap(_interop.createCastingConnection())
    }

    // MARK: Windows.Media.Casting.ICastingDeviceStatics members

    /// Gets an AQS filter string to be used with the Windows.Devices.Enumeration APIs for a given CastingPlaybackTypes.
    /// - Parameter type: The casting playback type.
    /// - Returns: The AQS filter string.
    public static func getDeviceSelector(_ type: WindowsMediaCasting_CastingPlaybackTypes) throws -> Swift.String {
        try _icastingDeviceStatics.getDeviceSelector(type)
    }

    /// Gets an AQS filter string to be used with the Windows.Devices.Enumeration APIs for a given CastingSource.
    /// - Parameter castingSource: The casting source.
    /// - Returns: The AQS filter string.
    public static func getDeviceSelectorFromCastingSourceAsync(_ castingSource: WindowsMediaCasting_CastingSource?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icastingDeviceStatics.getDeviceSelectorFromCastingSourceAsync(castingSource))
    }

    /// Gets a CastingDevice object for a given a device ID (acquired from a query using the Windows.Devices.Enumeration APIs).
    /// - Parameter value: The device ID.
    /// - Returns: The object representing the casting device.
    public static func fromIdAsync(_ value: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCasting_CastingDevice?> {
        try COM.NullResult.unwrap(_icastingDeviceStatics.fromIdAsync(value))
    }

    /// Indicates whether the given device (a DeviceInformation object) supports casting.
    /// - Parameter device: The device you want to know about.
    /// - Returns: True if the device supports casting; false otherwise.
    public static func deviceInfoSupportsCastingAsync(_ device: WindowsDevicesEnumeration_DeviceInformation?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_icastingDeviceStatics.deviceInfoSupportsCastingAsync(device))
    }

    // MARK: Implementation details

    private static var _icastingDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCasting_ICastingDeviceStatics>? = nil

    internal static var _icastingDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaCasting_ICastingDeviceStatics> {
        get throws {
            try _icastingDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Casting.CastingDevice", id: CWinRT.SWRT_WindowsMediaCasting_ICastingDeviceStatics.iid)
            }
        }
    }
}