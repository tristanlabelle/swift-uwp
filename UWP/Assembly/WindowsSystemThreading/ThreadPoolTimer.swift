// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a timer created with CreateTimer or CreatePeriodicTimer.
public final class WindowsSystemThreading_ThreadPoolTimer: WindowsRuntime.WinRTImport<WindowsSystemThreading_ThreadPoolTimerProjection> {
    // MARK: Windows.System.Threading.IThreadPoolTimer members

    /// Gets the timeout value of a single-use timer created with CreateTimer.
    /// - Returns: The timeout value. When the timeout value elapses, the timer expires and its TimerElapsedHandler delegate is called.
    public var delay: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Delay()
        }
    }

    /// Gets the timeout value of a periodic timer created with CreatePeriodicTimer.
    /// - Returns: The timeout value. When the timeout value elapses, the timer expires, its TimerElapsedHandler delegate is called, and the timer reactivates. This behavior continues until the timer is canceled. 
    public var period: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Period()
        }
    }

    /// Cancels a timer.
    public func cancel() throws {
        try _interop.cancel()
    }

    // MARK: Windows.System.Threading.IThreadPoolTimerStatics members

    /// Creates a periodic timer.
    /// - Parameter handler: The method to call when the timer expires.
    /// - Parameter period: The amount of time until the timer expires. The timer reactivates each time the period elapses, until the timer is canceled.
    /// - Returns: An instance of a periodic timer.
    public static func createPeriodicTimer(_ handler: WindowsSystemThreading_TimerElapsedHandler?, _ period: WindowsFoundation_TimeSpan) throws -> WindowsSystemThreading_ThreadPoolTimer {
        try COM.NullResult.unwrap(_ithreadPoolTimerStatics.createPeriodicTimer(handler, period))
    }

    /// Creates a single-use timer.
    /// - Parameter handler: The method to call when the timer expires.
    /// - Parameter delay: The amount of time until the timer expires.
    /// - Returns: An instance of a single-use timer.
    public static func createTimer(_ handler: WindowsSystemThreading_TimerElapsedHandler?, _ delay: WindowsFoundation_TimeSpan) throws -> WindowsSystemThreading_ThreadPoolTimer {
        try COM.NullResult.unwrap(_ithreadPoolTimerStatics.createTimer(handler, delay))
    }

    /// Creates a periodic timer and specifies a method to call after the periodic timer is complete. The periodic timer is complete when the timer has expired without being reactivated, and the final call to *handler* has finished.
    /// - Parameter handler: The method to call when the timer expires.
    /// - Parameter period: The amount of time until the timer expires. The timer reactivates each time the period elapses, until the timer is canceled.
    /// - Parameter destroyed: The method to call after the periodic timer is complete.
    /// - Returns: An instance of a periodic timer.
    public static func createPeriodicTimer(_ handler: WindowsSystemThreading_TimerElapsedHandler?, _ period: WindowsFoundation_TimeSpan, _ destroyed: WindowsSystemThreading_TimerDestroyedHandler?) throws -> WindowsSystemThreading_ThreadPoolTimer {
        try COM.NullResult.unwrap(_ithreadPoolTimerStatics.createPeriodicTimerWithCompletion(handler, period, destroyed))
    }

    /// Creates a single-use timer and specifies a method to call after the timer is complete. The timer is complete when the timer has expired and the final call to *handler* has finished.
    /// - Parameter handler: The method to call when the timer expires.
    /// - Parameter delay: The amount of time until the timer expires.
    /// - Parameter destroyed: The method to call after the timer is complete.
    /// - Returns: An instance of a single-use timer.
    public static func createTimer(_ handler: WindowsSystemThreading_TimerElapsedHandler?, _ delay: WindowsFoundation_TimeSpan, _ destroyed: WindowsSystemThreading_TimerDestroyedHandler?) throws -> WindowsSystemThreading_ThreadPoolTimer {
        try COM.NullResult.unwrap(_ithreadPoolTimerStatics.createTimerWithCompletion(handler, delay, destroyed))
    }

    // MARK: Implementation details

    private static var _ithreadPoolTimerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreading_IThreadPoolTimerStatics>? = nil

    internal static var _ithreadPoolTimerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemThreading_IThreadPoolTimerStatics> {
        get throws {
            try _ithreadPoolTimerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Threading.ThreadPoolTimer", id: CWinRT.SWRT_WindowsSystemThreading_IThreadPoolTimerStatics.iid)
            }
        }
    }
}