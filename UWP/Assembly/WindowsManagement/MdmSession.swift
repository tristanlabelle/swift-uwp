// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality to start an MDM session with the server.
public final class WindowsManagement_MdmSession: WindowsRuntime.WinRTImport<WindowsManagement_MdmSessionProjection> {
    // MARK: Windows.Management.IMdmSession members

    /// A vector list of all MdmAlerts for the current session.
    /// - Returns: A vector list of MdmAlerts.
    public var alerts: WindowsFoundationCollections_IVectorView<WindowsManagement_MdmAlert?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Alerts())
        }
    }

    /// The extended error code for an MDM session.
    /// - Returns: HRESULT value of the error.
    public var extendedError: COM.HResult {
        get throws {
            try _interop.get_ExtendedError()
        }
    }

    /// The ID for the MDM session.
    /// - Returns: The string value of the session ID.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the state of an MDM session.
    /// - Returns: An MdmSessionState enumeration value for the state of the session.
    public var state: WindowsManagement_MdmSessionState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Allows the caller to re-open an existing MDM session.
    /// - Returns: Results of the operation.
    public func attachAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.attachAsync())
    }

    /// Deletes the MDM session.
    public func delete() throws {
        try _interop.delete()
    }

    /// Start an MDM session with a constant alerts.
    /// - Returns: Results of the operation.
    public func startAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    public func startAsync(_ alerts: WindowsFoundationCollections_IIterable<WindowsManagement_MdmAlert?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startWithAlertsAsync(alerts))
    }

    // MARK: Implementation details
}