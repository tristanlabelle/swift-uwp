// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines static methods and properties for accessing information about the device hardware and configuring information about the system, the mobile operator, and the active user account. These members are used in various Microsoft Store scenarios.
public enum WindowsApplicationModelStorePreview_StoreConfiguration {
    // MARK: Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics4 members

    /// Gets the Store user account ID for the current user who is signed in to the Store.
    /// - Returns: The Store user account ID for the current user who is signed in to the Store.
    public static func getStoreWebAccountId() throws -> Swift.String {
        try _istoreConfigurationStatics4.getStoreWebAccountId()
    }

    /// Gets the Store user account ID for the specified user who is signed in to the Store.
    /// - Parameter user: A Windows.System.User object that identifies the user for which you want to retrieve the Store user account ID.
    /// - Returns: The Store user account ID for the specified user.
    public static func getStoreWebAccountIdForUser(_ user: WindowsSystem_User?) throws -> Swift.String {
        try _istoreConfigurationStatics4.getStoreWebAccountIdForUser(user)
    }

    /// Sets the Store user account ID for the current Azure AD user who is signed in to the Store so that other apps can query against this ID.
    /// - Parameter webAccountId: The Store user account ID (typically obtained from the WebAccount.Id property) to set for the Azure AD user who is currently signed in to the Store.
    public static func setEnterpriseStoreWebAccountId(_ webAccountId: Swift.String) throws {
        try _istoreConfigurationStatics4.setEnterpriseStoreWebAccountId(webAccountId)
    }

    /// Sets the Store user account ID for the specified Azure AD user so that other apps can query against this ID.
    /// - Parameter user: A Windows.System.User object that identifies the Azure AD user whose Store user account ID you want to set.
    /// - Parameter webAccountId: The Store user account ID (typically obtained from the WebAccount.Id property) to set for the specified Azure AD user.
    public static func setEnterpriseStoreWebAccountIdForUser(_ user: WindowsSystem_User?, _ webAccountId: Swift.String) throws {
        try _istoreConfigurationStatics4.setEnterpriseStoreWebAccountIdForUser(user, webAccountId)
    }

    /// Gets the Store user account ID for the current Azure AD user who is signed in to the Store.
    /// - Returns: The Store user account ID for the current Azure AD user who is signed in to the Store.
    public static func getEnterpriseStoreWebAccountId() throws -> Swift.String {
        try _istoreConfigurationStatics4.getEnterpriseStoreWebAccountId()
    }

    /// Gets the Store user account ID for the specified Azure AD user who is signed in to the Store.
    /// - Parameter user: A Windows.System.User object that identifies the Azure AD user for which you want to retrieve the user account ID.
    /// - Returns: The Store user account ID for the specified user.
    public static func getEnterpriseStoreWebAccountIdForUser(_ user: WindowsSystem_User?) throws -> Swift.String {
        try _istoreConfigurationStatics4.getEnterpriseStoreWebAccountIdForUser(user)
    }

    /// Determines whether the Microsoft Store for Business is enabled for the current user.
    /// - Returns: True if the Microsoft Store for Business is enabled for the current user; otherwise false.
    public static func shouldRestrictToEnterpriseStoreOnly() throws -> Swift.Bool {
        try _istoreConfigurationStatics4.shouldRestrictToEnterpriseStoreOnly()
    }

    /// Determines whether the Microsoft Store for Business is enabled for the specified user.
    /// - Parameter user: A Windows.System.User object that identifies the user for whom you want to determine whether the Microsoft Store for Business is enabled.
    /// - Returns: True if the Microsoft Store for Business is enabled for the specified user; otherwise false.
    public static func shouldRestrictToEnterpriseStoreOnlyForUser(_ user: WindowsSystem_User?) throws -> Swift.Bool {
        try _istoreConfigurationStatics4.shouldRestrictToEnterpriseStoreOnlyForUser(user)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics5 members

    /// Determines whether apps can be pinned to the desktop on the current device.
    /// - Returns: True if apps can be pinned to the desktop on the current device; otherwise, false. For example, this method returns false if the current device has no desktop.
    public static func isPinToDesktopSupported() throws -> Swift.Bool {
        try _istoreConfigurationStatics5.isPinToDesktopSupported()
    }

    /// Determines whether apps can be pinned to the taskbar on the current device.
    /// - Returns: True if apps can be pinned to the taskbar on the current device; otherwise, false. For example, this method returns false if the current device has no taskbar.
    public static func isPinToTaskbarSupported() throws -> Swift.Bool {
        try _istoreConfigurationStatics5.isPinToTaskbarSupported()
    }

    /// Determines whether apps can be pinned to the Start menu on the current device.
    /// - Returns: True if apps can be pinned to the Start menu on the current device; otherwise, false. For example, this method returns false if the current device has no Start menu.
    public static func isPinToStartSupported() throws -> Swift.Bool {
        try _istoreConfigurationStatics5.isPinToStartSupported()
    }

    /// Pins the specified app to the desktop for the all users on the current device.
    /// - Parameter appPackageFamilyName: The package family name of the app to pin to the desktop.
    public static func pinToDesktop(_ appPackageFamilyName: Swift.String) throws {
        try _istoreConfigurationStatics5.pinToDesktop(appPackageFamilyName)
    }

    /// Pins the specified app to the desktop for the specified user on the current device.
    /// - Parameter user: The user for which the app will be pinned to the desktop.
    /// - Parameter appPackageFamilyName: The package family name of the app to pin to the desktop.
    public static func pinToDesktopForUser(_ user: WindowsSystem_User?, _ appPackageFamilyName: Swift.String) throws {
        try _istoreConfigurationStatics5.pinToDesktopForUser(user, appPackageFamilyName)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics members

    /// Gets hardware manufacturer information for the current device.
    /// - Returns: An object that provides information about the hardware manufacturer of the current device.
    public static var hardwareManufacturerInfo: WindowsApplicationModelStorePreview_StoreHardwareManufacturerInfo {
        get throws {
            try COM.NullResult.unwrap(_istoreConfigurationStatics.get_HardwareManufacturerInfo())
        }
    }

    /// Configures miscellaneous system information for the device.
    /// - Parameter catalogHardwareManufacturerId: The ID of the hardware manufacturer.
    /// - Parameter catalogStoreContentModifierId: The ID of the Windows Store content modifier.
    /// - Parameter systemConfigurationExpiration: The expiration date for the system configuration.
    /// - Parameter catalogHardwareDescriptor: A descriptor string that specifies the hardware components supported by the device.
    public static func setSystemConfiguration(_ catalogHardwareManufacturerId: Swift.String, _ catalogStoreContentModifierId: Swift.String, _ systemConfigurationExpiration: WindowsFoundation_DateTime, _ catalogHardwareDescriptor: Swift.String) throws {
        try _istoreConfigurationStatics.setSystemConfiguration(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor)
    }

    /// Configures mobile operator information for the device.
    /// - Parameter mobileOperatorId: The mobile operator ID.
    /// - Parameter appDownloadLimitInMegabytes: The maximum app download size defined by the mobile operator, in MB.
    /// - Parameter updateDownloadLimitInMegabytes: The maximum OS update download size defined by the mobile operator, in MB.
    public static func setMobileOperatorConfiguration(_ mobileOperatorId: Swift.String, _ appDownloadLimitInMegabytes: Swift.UInt32, _ updateDownloadLimitInMegabytes: Swift.UInt32) throws {
        try _istoreConfigurationStatics.setMobileOperatorConfiguration(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes)
    }

    /// Sets the Store user account ID for the current user who is signed in to the Store so that other apps can query against this ID.
    /// - Parameter webAccountId: The Store user account ID (typically obtained from the WebAccount.Id property) to set for the user who is currently signed in to the Store.
    public static func setStoreWebAccountId(_ webAccountId: Swift.String) throws {
        try _istoreConfigurationStatics.setStoreWebAccountId(webAccountId)
    }

    /// Determines whether the specified user ID is also being used to sign in to the Microsoft Store on the device.
    /// - Parameter webAccountId: The user ID (typically obtained from the WebAccount.Id property) to check.
    /// - Returns: True if the user account specified by *webAccountId* is the same account that is signed in to the Microsoft Store; otherwise false.
    public static func isStoreWebAccountId(_ webAccountId: Swift.String) throws -> Swift.Bool {
        try _istoreConfigurationStatics.isStoreWebAccountId(webAccountId)
    }

    public static func filterUnsupportedSystemFeaturesAsync(_ systemFeatures: WindowsFoundationCollections_IIterable<WindowsApplicationModelStorePreview_StoreSystemFeature>?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreview_StoreSystemFeature>?> {
        try COM.NullResult.unwrap(_istoreConfigurationStatics.filterUnsupportedSystemFeaturesAsync(systemFeatures))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics3 members

    /// Determines whether the current user has a Microsoft Store account.
    /// - Returns: True if the current user has a Microsoft Store account; otherwise false.
    public static func hasStoreWebAccount() throws -> Swift.Bool {
        try _istoreConfigurationStatics3.hasStoreWebAccount()
    }

    /// Determines whether the specified user has a Microsoft Store account.
    /// - Parameter user: An object that identifies the user for which to query.
    /// - Returns: True if the specified userhas a Microsoft Store account; otherwise false.
    public static func hasStoreWebAccountForUser(_ user: WindowsSystem_User?) throws -> Swift.Bool {
        try _istoreConfigurationStatics3.hasStoreWebAccountForUser(user)
    }

    /// Gets Microsoft Store log data for the current device.
    /// - Parameter options: A value that specifies options for the log data request.
    /// - Returns: An asynchronous operation that, on successful completion, returns an IRandomAccessStreamReference object that contains the log data.
    public static func getStoreLogDataAsync(_ options: WindowsApplicationModelStorePreview_StoreLogOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamReference?> {
        try COM.NullResult.unwrap(_istoreConfigurationStatics3.getStoreLogDataAsync(options))
    }

    /// Sets the Store user account ID for the specified user so that other apps can query against this ID.
    /// - Parameter user: A Windows.System.User object that identifies the user whose Store user account ID you want to set.
    /// - Parameter webAccountId: The Store user account ID (typically obtained from the WebAccount.Id property) to set for the specified user.
    public static func setStoreWebAccountIdForUser(_ user: WindowsSystem_User?, _ webAccountId: Swift.String) throws {
        try _istoreConfigurationStatics3.setStoreWebAccountIdForUser(user, webAccountId)
    }

    /// Determines whether the specified user and user ID is also being used to sign in to the Microsoft Store on the device.
    /// - Parameter user: An object that identifies the user for which to query.
    /// - Parameter webAccountId: The user ID (typically obtained from the WebAccount.Id property) to check.
    /// - Returns: True if the user account specified by *webAccountId* is the same account that is signed in to the Microsoft Store; otherwise false.
    public static func isStoreWebAccountIdForUser(_ user: WindowsSystem_User?, _ webAccountId: Swift.String) throws -> Swift.Bool {
        try _istoreConfigurationStatics3.isStoreWebAccountIdForUser(user, webAccountId)
    }

    /// Gets a value that indicates whether the Windows Store prompts the specified user before making a purchase.
    /// - Parameter user: An object that identifies the user for which to query.
    /// - Returns: A **UInt32** value that indicates whether the Windows Store prompts the specified user before making a purchase. <table>
    public static func getPurchasePromptingPolicyForUser(_ user: WindowsSystem_User?) throws -> Swift.UInt32? {
        try _istoreConfigurationStatics3.getPurchasePromptingPolicyForUser(user)
    }

    public static func setPurchasePromptingPolicyForUser(_ user: WindowsSystem_User?, _ value: Swift.UInt32?) throws {
        try _istoreConfigurationStatics3.setPurchasePromptingPolicyForUser(user, value)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.IStoreConfigurationStatics2 members

    /// Gets or sets a value that indicates whether the Microsoft Store prompts the user before making a purchase.
    /// - Returns: A **UInt32** value that indicates whether the Microsoft Store prompts the user before making a purchase. <table>
    public static var purchasePromptingPolicy: Swift.UInt32? {
        get throws {
            try _istoreConfigurationStatics2.get_PurchasePromptingPolicy()
        }
    }

    /// Gets or sets a value that indicates whether the Microsoft Store prompts the user before making a purchase.
    /// - Returns: A **UInt32** value that indicates whether the Microsoft Store prompts the user before making a purchase. <table>
    public static func purchasePromptingPolicy(_ value: Swift.UInt32?) throws {
        try _istoreConfigurationStatics2.put_PurchasePromptingPolicy(value)
    }

    // MARK: Implementation details

    private static var _istoreConfigurationStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics4>? = nil

    internal static var _istoreConfigurationStatics4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics4> {
        get throws {
            try _istoreConfigurationStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.StoreConfiguration", id: CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics4.iid)
            }
        }
    }

    private static var _istoreConfigurationStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics5>? = nil

    internal static var _istoreConfigurationStatics5: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics5> {
        get throws {
            try _istoreConfigurationStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.StoreConfiguration", id: CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics5.iid)
            }
        }
    }

    private static var _istoreConfigurationStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics>? = nil

    internal static var _istoreConfigurationStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics> {
        get throws {
            try _istoreConfigurationStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.StoreConfiguration", id: CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics.iid)
            }
        }
    }

    private static var _istoreConfigurationStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics3>? = nil

    internal static var _istoreConfigurationStatics3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics3> {
        get throws {
            try _istoreConfigurationStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.StoreConfiguration", id: CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics3.iid)
            }
        }
    }

    private static var _istoreConfigurationStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics2>? = nil

    internal static var _istoreConfigurationStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics2> {
        get throws {
            try _istoreConfigurationStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.StoreConfiguration", id: CWinRT.SWRT_WindowsApplicationModelStorePreview_IStoreConfigurationStatics2.iid)
            }
        }
    }
}