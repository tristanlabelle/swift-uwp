// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides basic utility methods for processing Duration values. C# and Microsoft Visual Basic code should use methods of Duration instead.
public final class WindowsUIXaml_DurationHelper: WindowsRuntime.WinRTImport<WindowsUIXaml_DurationHelperProjection> {
    // MARK: Windows.UI.Xaml.IDurationHelperStatics members

    /// Returns a generated Duration value that indicates an "Automatic" Duration. C# and Microsoft Visual Basic code should use Duration.Automatic instead.
    /// - Returns: A Duration value that indicates an "Automatic" Duration.
    public static var automatic: WindowsUIXaml_Duration {
        get throws {
            try _idurationHelperStatics.get_Automatic()
        }
    }

    /// Returns a generated Duration value that indicates a "Forever" Duration. C# and Microsoft Visual Basic code should use Duration.Forever instead.
    /// - Returns: A Duration value that indicates a "Forever" Duration.
    public static var forever: WindowsUIXaml_Duration {
        get throws {
            try _idurationHelperStatics.get_Forever()
        }
    }

    /// Compares value equality of two Duration structures. C# and Microsoft Visual Basic code should use Duration.Compare instead.
    /// - Parameter duration1: The first Duration to compare.
    /// - Parameter duration2: The second Duration to compare.
    /// - Returns: If *duration1* is less than *duration2*, a negative value that represents the difference. If *duration1* is equal to *duration2*, zero. If *duration1* is greater than *duration2*, a positive value that represents the difference.
    public static func compare(_ duration1: WindowsUIXaml_Duration, _ duration2: WindowsUIXaml_Duration) throws -> Swift.Int32 {
        try _idurationHelperStatics.compare(duration1, duration2)
    }

    /// Creates a new Duration based on a TimeSpan value. C# and Microsoft Visual Basic code should use the Duration(TimeSpan) constructor instead.
    /// - Parameter timeSpan: The initializing TimeSpan.
    /// - Returns: The created Duration.
    public static func fromTimeSpan(_ timeSpan: WindowsFoundation_TimeSpan) throws -> WindowsUIXaml_Duration {
        try _idurationHelperStatics.fromTimeSpan(timeSpan)
    }

    /// Returns whether the **TimeSpan** component of a given Duration holds a non-null value. C# and Microsoft Visual Basic code should use Duration.HasTimeSpan instead.
    /// - Parameter target: The Duration value to evaluate.
    /// - Returns: **true** if the **TimeSpan** component of the provided Duration is not **null**; otherwise, **false**.
    public static func getHasTimeSpan(_ target: WindowsUIXaml_Duration) throws -> Swift.Bool {
        try _idurationHelperStatics.getHasTimeSpan(target)
    }

    /// Adds the **TimeSpan** component of two Duration values. C# and Microsoft Visual Basic code should use the Addition (+) operator or the Duration.Add method instead.
    /// - Parameter target: The value to add to.
    /// - Parameter duration: The value to add.
    /// - Returns: The resulting Duration after **TimeSpan** component addition.
    public static func add(_ target: WindowsUIXaml_Duration, _ duration: WindowsUIXaml_Duration) throws -> WindowsUIXaml_Duration {
        try _idurationHelperStatics.add(target, duration)
    }

    /// Determines whether two Duration values have equivalent values. C# and Microsoft Visual Basic code should use the Equality (=) operator or Duration.Equals method instead.
    /// - Parameter target: The first Duration to compare.
    /// - Parameter value: The second Duration to compare.
    /// - Returns: **true** if *target* and *value* hold equivalent values; otherwise, **false**.
    public static func equals(_ target: WindowsUIXaml_Duration, _ value: WindowsUIXaml_Duration) throws -> Swift.Bool {
        try _idurationHelperStatics.equals(target, value)
    }

    /// Subtracts the **TimeSpan** component of one Duration value from another Duration value. C# and Microsoft Visual Basic code should use the Subtraction (-) operator or the Duration.Subtract method instead.
    /// - Parameter target: The value to subtract from.
    /// - Parameter duration: The value to subtract.
    /// - Returns: The resulting Duration after **TimeSpan** component subtraction.
    public static func subtract(_ target: WindowsUIXaml_Duration, _ duration: WindowsUIXaml_Duration) throws -> WindowsUIXaml_Duration {
        try _idurationHelperStatics.subtract(target, duration)
    }

    // MARK: Implementation details

    private static var _idurationHelperStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDurationHelperStatics>? = nil

    internal static var _idurationHelperStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDurationHelperStatics> {
        get throws {
            try _idurationHelperStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.DurationHelper", id: CWinRT.SWRT_WindowsUIXaml_IDurationHelperStatics.iid)
            }
        }
    }
}