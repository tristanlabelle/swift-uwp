// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a declarative rule that applies visual states based on window properties.
open class WindowsUIXaml_AdaptiveTrigger: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IAdaptiveTriggerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_AdaptiveTrigger.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iadaptiveTriggerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IAdaptiveTrigger members

    /// Gets or sets the minimum window height at which the VisualState should be applied.
    /// - Returns: The minimum window height (in effective pixels) at which the VisualState should be applied.
    public var minWindowHeight: Swift.Double {
        get throws {
            try _iadaptiveTrigger.get_MinWindowHeight()
        }
    }

    /// Gets or sets the minimum window height at which the VisualState should be applied.
    /// - Returns: The minimum window height (in effective pixels) at which the VisualState should be applied.
    public func minWindowHeight(_ value: Swift.Double) throws {
        try _iadaptiveTrigger.put_MinWindowHeight(value)
    }

    /// Gets or sets the minimum window width at which the VisualState should be applied.
    /// - Returns: The minimum window width (in effective pixels) at which the VisualState should be applied.
    public var minWindowWidth: Swift.Double {
        get throws {
            try _iadaptiveTrigger.get_MinWindowWidth()
        }
    }

    /// Gets or sets the minimum window width at which the VisualState should be applied.
    /// - Returns: The minimum window width (in effective pixels) at which the VisualState should be applied.
    public func minWindowWidth(_ value: Swift.Double) throws {
        try _iadaptiveTrigger.put_MinWindowWidth(value)
    }

    // MARK: Windows.UI.Xaml.IAdaptiveTriggerStatics members

    /// Identifies the MinWindowHeight dependency property.
    /// - Returns: The identifier for the MinWindowHeight dependency property.
    public static var minWindowHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iadaptiveTriggerStatics.get_MinWindowHeightProperty())
        }
    }

    /// Identifies the MinWindowWidth dependency property.
    /// - Returns: The identifier for the MinWindowWidth dependency property.
    public static var minWindowWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iadaptiveTriggerStatics.get_MinWindowWidthProperty())
        }
    }

    // MARK: Implementation details

    private var _iadaptiveTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTrigger>? = nil

    internal var _iadaptiveTrigger: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTrigger> {
        get throws {
            try _iadaptiveTrigger_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IAdaptiveTrigger.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IAdaptiveTrigger.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTrigger>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iadaptiveTrigger_storage?.release()
    }

    private static var _iadaptiveTriggerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerFactory>? = nil

    internal static var _iadaptiveTriggerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerFactory> {
        get throws {
            try _iadaptiveTriggerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.AdaptiveTrigger", id: CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerFactory.iid)
            }
        }
    }

    private static var _iadaptiveTriggerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerStatics>? = nil

    internal static var _iadaptiveTriggerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerStatics> {
        get throws {
            try _iadaptiveTriggerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.AdaptiveTrigger", id: CWinRT.SWRT_WindowsUIXaml_IAdaptiveTriggerStatics.iid)
            }
        }
    }
}