// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for drag-and-drop events.
public final class WindowsUIXaml_DragEventArgs: WindowsRuntime.WinRTImport<WindowsUIXaml_DragEventArgsProjection> {
    // MARK: Windows.UI.Xaml.IDragEventArgs members

    /// Gets or sets a data object (DataPackage ) that contains the data associated with the corresponding drag event. This value is not useful in all event cases; specifically, the event must be handled by a valid drop target.
    /// - Returns: The data object that contains data payload that is associated with the corresponding drag event.
    public var data: WindowsApplicationModelDataTransfer_DataPackage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Data())
        }
    }

    /// Gets or sets a data object (DataPackage ) that contains the data associated with the corresponding drag event. This value is not useful in all event cases; specifically, the event must be handled by a valid drop target.
    /// - Returns: The data object that contains data payload that is associated with the corresponding drag event.
    public func data(_ value: WindowsApplicationModelDataTransfer_DataPackage?) throws {
        try _interop.put_Data(value)
    }

    /// Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.
    /// - Returns: **true** if the event is marked handled; otherwise, **false**. The default value is **false**.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.
    /// - Returns: **true** if the event is marked handled; otherwise, **false**. The default value is **false**.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Returns a drop point that is relative to a specified UIElement.
    /// - Parameter relativeTo: The UIElement for which to get a relative drop point.
    /// - Returns: A point in the coordinate system that is relative to the element specified in *relativeTo*.
    public func getPosition(_ relativeTo: WindowsUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        try _interop.getPosition(relativeTo)
    }

    // MARK: Windows.UI.Xaml.IDragEventArgs2 members

    /// Gets or sets a value that specifies which operations are allowed by the originator of the drag event.
    /// - Returns: A member of the DataPackageOperation enumeration that specifies which operations are allowed by the originator of the drag event.
    public var acceptedOperation: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get throws {
            try _idragEventArgs2.get_AcceptedOperation()
        }
    }

    /// Gets or sets a value that specifies which operations are allowed by the originator of the drag event.
    /// - Returns: A member of the DataPackageOperation enumeration that specifies which operations are allowed by the originator of the drag event.
    public func acceptedOperation(_ value: WindowsApplicationModelDataTransfer_DataPackageOperation) throws {
        try _idragEventArgs2.put_AcceptedOperation(value)
    }

    /// Gets a read-only copy of the Data object.
    /// - Returns: A read-only copy of the Data object.
    public var dataView: WindowsApplicationModelDataTransfer_DataPackageView {
        get throws {
            try COM.NullResult.unwrap(_idragEventArgs2.get_DataView())
        }
    }

    /// Gets the visual representation of the data being dragged.
    /// - Returns: The visual representation of the data being dragged. The default is **null**.
    public var dragUIOverride: WindowsUIXaml_DragUIOverride {
        get throws {
            try COM.NullResult.unwrap(_idragEventArgs2.get_DragUIOverride())
        }
    }

    /// Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
    /// - Returns: One or more members of the DragDropModifiers flag enumeration.
    public var modifiers: WindowsApplicationModelDataTransferDragDrop_DragDropModifiers {
        get throws {
            try _idragEventArgs2.get_Modifiers()
        }
    }

    /// Supports asynchronous drag-and-drop operations by creating and returning a DragOperationDeferral object.
    /// - Returns: A deferral object that you can use to identify when the generation of the data package is complete.
    public func getDeferral() throws -> WindowsUIXaml_DragOperationDeferral {
        try COM.NullResult.unwrap(_idragEventArgs2.getDeferral())
    }

    // MARK: Windows.UI.Xaml.IDragEventArgs3 members

    /// Gets the allowed data package operations (none, move, copy, and/or link) for the drag and drop operation.
    /// - Returns: The allowed data operations.
    public var allowedOperations: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get throws {
            try _idragEventArgs3.get_AllowedOperations()
        }
    }

    // MARK: Implementation details

    private var _idragEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDragEventArgs2>? = nil

    internal var _idragEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDragEventArgs2> {
        get throws {
            try _idragEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDragEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDragEventArgs2.self)
            }
        }
    }

    private var _idragEventArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDragEventArgs3>? = nil

    internal var _idragEventArgs3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDragEventArgs3> {
        get throws {
            try _idragEventArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDragEventArgs3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDragEventArgs3.self)
            }
        }
    }

    deinit {
        _idragEventArgs2_storage?.release()
        _idragEventArgs3_storage?.release()
    }
}