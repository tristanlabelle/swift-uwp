// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the UIElement.BringIntoViewRequested event.
public final class WindowsUIXaml_BringIntoViewRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsUIXaml_BringIntoViewRequestedEventArgsProjection> {
    // MARK: Windows.UI.Xaml.IBringIntoViewRequestedEventArgs members

    /// Gets or sets a value that specifies whether the scrolling should be animated.
    /// - Returns: **true** to animate the scrolling; otherwise, **false**.
    public var animationDesired: Swift.Bool {
        get throws {
            try _interop.get_AnimationDesired()
        }
    }

    /// Gets or sets a value that specifies whether the scrolling should be animated.
    /// - Returns: **true** to animate the scrolling; otherwise, **false**.
    public func animationDesired(_ value: Swift.Bool) throws {
        try _interop.put_AnimationDesired(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A **true** value prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled. **false** to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is **false**.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Gets or sets a value that marks the routed event as handled. A **true** value prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled. **false** to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is **false**.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Gets the requested horizontal alignment ratio which controls the alignment of the vertical axis of the TargetRect with respect to the vertical axis of the viewport.
    /// - Returns: The requested horizontal alignment ratio between 0.0 and 1.0, or NaN. See Remarks.
    public var horizontalAlignmentRatio: Swift.Double {
        get throws {
            try _interop.get_HorizontalAlignmentRatio()
        }
    }

    /// Gets or sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    /// - Returns: The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _interop.get_HorizontalOffset()
        }
    }

    /// Gets or sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    /// - Returns: The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public func horizontalOffset(_ value: Swift.Double) throws {
        try _interop.put_HorizontalOffset(value)
    }

    /// Gets or sets the element that should be made visible in response to the event.
    /// - Returns: The element that should be made visible in response to the event.
    public var targetElement: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TargetElement())
        }
    }

    /// Gets or sets the element that should be made visible in response to the event.
    /// - Returns: The element that should be made visible in response to the event.
    public func targetElement(_ value: WindowsUIXaml_UIElement?) throws {
        try _interop.put_TargetElement(value)
    }

    /// Gets or sets the Rect in the TargetElement’s coordinate space to bring into view.
    /// - Returns: The Rect in the TargetElement’s coordinate space to bring into view.
    public var targetRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_TargetRect()
        }
    }

    /// Gets or sets the Rect in the TargetElement’s coordinate space to bring into view.
    /// - Returns: The Rect in the TargetElement’s coordinate space to bring into view.
    public func targetRect(_ value: WindowsFoundation_Rect) throws {
        try _interop.put_TargetRect(value)
    }

    /// Gets the requested vertical alignment ratio which controls the alignment of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport.
    /// - Returns: The requested vertical alignment ratio between 0.0 and 1.0, or NaN. See Remarks.
    public var verticalAlignmentRatio: Swift.Double {
        get throws {
            try _interop.get_VerticalAlignmentRatio()
        }
    }

    /// Gets or sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    /// - Returns: The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public var verticalOffset: Swift.Double {
        get throws {
            try _interop.get_VerticalOffset()
        }
    }

    /// Gets or sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    /// - Returns: The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public func verticalOffset(_ value: Swift.Double) throws {
        try _interop.put_VerticalOffset(value)
    }

    // MARK: Implementation details
}