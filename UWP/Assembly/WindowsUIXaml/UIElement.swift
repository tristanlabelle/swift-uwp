// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// UIElement is a base class for most of the Windows Runtime UI objects that have visual appearance and can process basic input as part of your app's user interface.
open class WindowsUIXaml_UIElement: WindowsRuntime.WinRTComposableClass, WindowsUIComposition_IAnimationObjectProtocol, WindowsUIComposition_IVisualElementProtocol {
    // MARK: Windows.UI.Xaml.IUIElement members

    /// Gets or sets a value that determines whether this UIElement can be a drop target for purposes of drag-and-drop operations.
    /// - Returns: **true** if this UIElement can be a drop target for purposes of drag-and-drop operations; otherwise, **false**. The default is **false**.
    public var allowDrop: Swift.Bool {
        get throws {
            try _iuielement.get_AllowDrop()
        }
    }

    /// Gets or sets a value that determines whether this UIElement can be a drop target for purposes of drag-and-drop operations.
    /// - Returns: **true** if this UIElement can be a drop target for purposes of drag-and-drop operations; otherwise, **false**. The default is **false**.
    public func allowDrop(_ value: Swift.Bool) throws {
        try _iuielement.put_AllowDrop(value)
    }

    /// Gets or sets a value that indicates that rendered content should be cached as a composited bitmap when possible.
    /// - Returns: A value that indicates that rendered content should be cached as a composited bitmap when possible. If you specify a value of CacheMode, rendering operations from RenderTransform and Opacity execute on the graphics processing unit (GPU), if available. The default is **null**, which does not enable a cached composition mode.
    public var cacheMode: WindowsUIXamlMedia_CacheMode {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_CacheMode())
        }
    }

    /// Gets or sets a value that indicates that rendered content should be cached as a composited bitmap when possible.
    /// - Returns: A value that indicates that rendered content should be cached as a composited bitmap when possible. If you specify a value of CacheMode, rendering operations from RenderTransform and Opacity execute on the graphics processing unit (GPU), if available. The default is **null**, which does not enable a cached composition mode.
    public func cacheMode(_ value: WindowsUIXamlMedia_CacheMode?) throws {
        try _iuielement.put_CacheMode(value)
    }

    /// Gets or sets the RectangleGeometry used to define the outline of the contents of a UIElement.
    /// - Returns: The rectangle geometry to be used for clipping area sizing. The default value is **null** (no clipping).
    public var clip: WindowsUIXamlMedia_RectangleGeometry {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Clip())
        }
    }

    /// Gets or sets the RectangleGeometry used to define the outline of the contents of a UIElement.
    /// - Returns: The rectangle geometry to be used for clipping area sizing. The default value is **null** (no clipping).
    public func clip(_ value: WindowsUIXamlMedia_RectangleGeometry?) throws {
        try _iuielement.put_Clip(value)
    }

    /// Gets the size that this UIElement computed during the measure pass of the layout process.
    /// - Returns: The size that this UIElement computed during the measure pass of the layout process.
    public var desiredSize: WindowsFoundation_Size {
        get throws {
            try _iuielement.get_DesiredSize()
        }
    }

    /// Gets or sets a value that determines whether the DoubleTapped event can originate from that element.
    /// - Returns: **true** if a DoubleTapped event can originate from this element; otherwise, **false**.
    public var isDoubleTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsDoubleTapEnabled()
        }
    }

    /// Gets or sets a value that determines whether the DoubleTapped event can originate from that element.
    /// - Returns: **true** if a DoubleTapped event can originate from this element; otherwise, **false**.
    public func isDoubleTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsDoubleTapEnabled(value)
    }

    /// Gets or sets whether the contained area of this UIElement can return true values for hit testing.
    /// - Returns: **true** if the contained area of this UIElement can be used for hit testing; otherwise, **false**. The default is **true**.
    public var isHitTestVisible: Swift.Bool {
        get throws {
            try _iuielement.get_IsHitTestVisible()
        }
    }

    /// Gets or sets whether the contained area of this UIElement can return true values for hit testing.
    /// - Returns: **true** if the contained area of this UIElement can be used for hit testing; otherwise, **false**. The default is **true**.
    public func isHitTestVisible(_ value: Swift.Bool) throws {
        try _iuielement.put_IsHitTestVisible(value)
    }

    /// Gets or sets a value that determines whether the Holding event can originate from that element.
    /// - Returns: **true** if a Holding event can originate from this element; otherwise, **false**.
    public var isHoldingEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsHoldingEnabled()
        }
    }

    /// Gets or sets a value that determines whether the Holding event can originate from that element.
    /// - Returns: **true** if a Holding event can originate from this element; otherwise, **false**.
    public func isHoldingEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsHoldingEnabled(value)
    }

    /// Gets or sets a value that determines whether the RightTapped event can originate from that element.
    /// - Returns: **true** if a RightTapped event can originate from this element; otherwise, **false**.
    public var isRightTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsRightTapEnabled()
        }
    }

    /// Gets or sets a value that determines whether the RightTapped event can originate from that element.
    /// - Returns: **true** if a RightTapped event can originate from this element; otherwise, **false**.
    public func isRightTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsRightTapEnabled(value)
    }

    /// Gets or sets a value that determines whether the Tapped event can originate from that element.
    /// - Returns: **true** if a Tapped event can originate from this element; otherwise, **false**.
    public var isTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsTapEnabled()
        }
    }

    /// Gets or sets a value that determines whether the Tapped event can originate from that element.
    /// - Returns: **true** if a Tapped event can originate from this element; otherwise, **false**.
    public func isTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsTapEnabled(value)
    }

    /// Gets or sets the ManipulationModes value used for UIElement behavior and interaction with gestures. Setting this value enables handling the manipulation events from this element in app code.
    /// - Returns: A value or values of the enumeration. The default is typically **System**, but this can vary on specific controls and elements. See Remarks.
    public var manipulationMode: WindowsUIXamlInput_ManipulationModes {
        get throws {
            try _iuielement.get_ManipulationMode()
        }
    }

    /// Gets or sets the ManipulationModes value used for UIElement behavior and interaction with gestures. Setting this value enables handling the manipulation events from this element in app code.
    /// - Returns: A value or values of the enumeration. The default is typically **System**, but this can vary on specific controls and elements. See Remarks.
    public func manipulationMode(_ value: WindowsUIXamlInput_ManipulationModes) throws {
        try _iuielement.put_ManipulationMode(value)
    }

    /// Gets or sets the degree of the object's opacity.
    /// - Returns: A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
    public var opacity: Swift.Double {
        get throws {
            try _iuielement.get_Opacity()
        }
    }

    /// Gets or sets the degree of the object's opacity.
    /// - Returns: A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
    public func opacity(_ value: Swift.Double) throws {
        try _iuielement.put_Opacity(value)
    }

    /// Gets the set of all captured pointers, represented as Pointer values.
    /// - Returns: The collection of captured pointers, each represented as a Pointer object.
    public var pointerCaptures: WindowsFoundationCollections_IVectorView<WindowsUIXamlInput_Pointer?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_PointerCaptures())
        }
    }

    /// Gets or sets the perspective projection (3-D effect) to apply when rendering this element.
    /// - Returns: A 3-D projection effect applied to the element.
    public var projection: WindowsUIXamlMedia_Projection {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Projection())
        }
    }

    /// Gets or sets the perspective projection (3-D effect) to apply when rendering this element.
    /// - Returns: A 3-D projection effect applied to the element.
    public func projection(_ value: WindowsUIXamlMedia_Projection?) throws {
        try _iuielement.put_Projection(value)
    }

    /// Gets the final render size of a UIElement. Use is not recommended, see Remarks.
    /// - Returns: The rendered size for this object. There is no default value.
    public var renderSize: WindowsFoundation_Size {
        get throws {
            try _iuielement.get_RenderSize()
        }
    }

    /// Gets or sets transform information that affects the rendering position of a UIElement.
    /// - Returns: Describes the specifics of the desired render transform. The default value is null.
    public var renderTransform: WindowsUIXamlMedia_Transform {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_RenderTransform())
        }
    }

    /// Gets or sets transform information that affects the rendering position of a UIElement.
    /// - Returns: Describes the specifics of the desired render transform. The default value is null.
    public func renderTransform(_ value: WindowsUIXamlMedia_Transform?) throws {
        try _iuielement.put_RenderTransform(value)
    }

    /// Gets or sets the origin point of any possible render transform declared by RenderTransform, relative to the bounds of the UIElement.
    /// - Returns: The origin point of the render transform. The default value is a Point with value 0,0.
    public var renderTransformOrigin: WindowsFoundation_Point {
        get throws {
            try _iuielement.get_RenderTransformOrigin()
        }
    }

    /// Gets or sets the origin point of any possible render transform declared by RenderTransform, relative to the bounds of the UIElement.
    /// - Returns: The origin point of the render transform. The default value is a Point with value 0,0.
    public func renderTransformOrigin(_ value: WindowsFoundation_Point) throws {
        try _iuielement.put_RenderTransformOrigin(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to a UIElement.
    /// - Returns: The strongly typed collection of Transition style elements that apply to a UIElement.
    public var transitions: WindowsUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Transitions())
        }
    }

    /// Gets or sets the collection of Transition style elements that apply to a UIElement.
    /// - Returns: The strongly typed collection of Transition style elements that apply to a UIElement.
    public func transitions(_ value: WindowsUIXamlMediaAnimation_TransitionCollection?) throws {
        try _iuielement.put_Transitions(value)
    }

    /// Gets or sets a value that determines whether rendering for the object and its visual subtree should use rounding behavior that aligns rendering to whole pixels.
    /// - Returns: **true** if rendering and layout should use layout rounding to whole pixels; otherwise, **false**. The default is **true**.
    public var useLayoutRounding: Swift.Bool {
        get throws {
            try _iuielement.get_UseLayoutRounding()
        }
    }

    /// Gets or sets a value that determines whether rendering for the object and its visual subtree should use rounding behavior that aligns rendering to whole pixels.
    /// - Returns: **true** if rendering and layout should use layout rounding to whole pixels; otherwise, **false**. The default is **true**.
    public func useLayoutRounding(_ value: Swift.Bool) throws {
        try _iuielement.put_UseLayoutRounding(value)
    }

    /// Gets or sets the visibility of a UIElement. A UIElement that is not visible is not rendered and does not communicate its desired size to layout.
    /// - Returns: A value of the enumeration. The default value is **Visible**.
    public var visibility: WindowsUIXaml_Visibility {
        get throws {
            try _iuielement.get_Visibility()
        }
    }

    /// Gets or sets the visibility of a UIElement. A UIElement that is not visible is not rendered and does not communicate its desired size to layout.
    /// - Returns: A value of the enumeration. The default value is **Visible**.
    public func visibility(_ value: WindowsUIXaml_Visibility) throws {
        try _iuielement.put_Visibility(value)
    }

    /// Occurs when an otherwise unhandled **DoubleTap** interaction occurs over the hit test area of this element.
    public func doubleTapped(adding handler: WindowsUIXamlInput_DoubleTappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DoubleTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: doubleTapped)
    }

    public func doubleTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DoubleTapped(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the target.
    public func dragEnter(adding handler: WindowsUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragEnter(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragEnter)
    }

    public func dragEnter(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragEnter(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the origin.
    public func dragLeave(adding handler: WindowsUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragLeave(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragLeave)
    }

    public func dragLeave(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragLeave(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the potential drop target.
    public func dragOver(adding handler: WindowsUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragOver(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragOver)
    }

    public func dragOver(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragOver(token)
    }

    /// Occurs when the input system reports an underlying drop event with this element as the drop target.
    public func drop(adding handler: WindowsUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Drop(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: drop)
    }

    public func drop(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Drop(token)
    }

    /// Occurs when a UIElement receives focus. This event is raised asynchronously, so focus can move again before bubbling is complete.
    public func gotFocus(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_GotFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gotFocus)
    }

    public func gotFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_GotFocus(token)
    }

    /// Occurs when an otherwise unhandled **Hold** interaction occurs over the hit test area of this element.
    public func holding(adding handler: WindowsUIXamlInput_HoldingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Holding(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: holding)
    }

    public func holding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Holding(token)
    }

    /// Occurs when a keyboard key is pressed while the UIElement has focus.
    public func keyDown(adding handler: WindowsUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_KeyDown(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyDown)
    }

    public func keyDown(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_KeyDown(token)
    }

    /// Occurs when a keyboard key is released while the UIElement has focus.
    public func keyUp(adding handler: WindowsUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_KeyUp(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: keyUp)
    }

    public func keyUp(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_KeyUp(token)
    }

    /// Occurs when a UIElement loses focus. This event is raised asynchronously, so focus can move again before bubbling is complete.
    public func lostFocus(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_LostFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: lostFocus)
    }

    public func lostFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_LostFocus(token)
    }

    /// Occurs when a manipulation on the UIElement is complete.
    public func manipulationCompleted(adding handler: WindowsUIXamlInput_ManipulationCompletedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationCompleted)
    }

    public func manipulationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationCompleted(token)
    }

    /// Occurs when the input device changes position during a manipulation.
    public func manipulationDelta(adding handler: WindowsUIXamlInput_ManipulationDeltaEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationDelta(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationDelta)
    }

    public func manipulationDelta(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationDelta(token)
    }

    /// Occurs when the input device loses contact with the UIElement object during a manipulation and inertia begins.
    public func manipulationInertiaStarting(adding handler: WindowsUIXamlInput_ManipulationInertiaStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationInertiaStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationInertiaStarting)
    }

    public func manipulationInertiaStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationInertiaStarting(token)
    }

    /// Occurs when an input device begins a manipulation on the UIElement.
    public func manipulationStarted(adding handler: WindowsUIXamlInput_ManipulationStartedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationStarted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationStarted)
    }

    public func manipulationStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationStarted(token)
    }

    /// Occurs when the manipulation processor is first created.
    public func manipulationStarting(adding handler: WindowsUIXamlInput_ManipulationStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: manipulationStarting)
    }

    public func manipulationStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationStarting(token)
    }

    /// Occurs when a pointer that made contact abnormally loses contact.
    public func pointerCanceled(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerCanceled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerCanceled)
    }

    public func pointerCanceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerCanceled(token)
    }

    /// Occurs when pointer capture previously held by this element moves to another element or elsewhere.
    public func pointerCaptureLost(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerCaptureLost(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerCaptureLost)
    }

    public func pointerCaptureLost(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerCaptureLost(token)
    }

    /// Occurs when a pointer enters the hit test area of this element.
    public func pointerEntered(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerEntered)
    }

    public func pointerEntered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerEntered(token)
    }

    /// Occurs when a pointer leaves the hit test area of this element.
    public func pointerExited(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerExited)
    }

    public func pointerExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerExited(token)
    }

    /// Occurs when a pointer moves while the pointer remains within the hit test area of this element.
    public func pointerMoved(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerMoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerMoved)
    }

    public func pointerMoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerMoved(token)
    }

    /// Occurs when the pointer device initiates a **Press** action within this element.
    public func pointerPressed(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerPressed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerPressed)
    }

    public func pointerPressed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerPressed(token)
    }

    /// Occurs when the pointer device that previously initiated a **Press** action is released, while within this element. Note that the end of a **Press** action is not guaranteed to fire a PointerReleased event; other events may fire instead. For more info, see Remarks.
    public func pointerReleased(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerReleased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerReleased)
    }

    public func pointerReleased(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerReleased(token)
    }

    /// Occurs when the delta value of a pointer wheel changes.
    public func pointerWheelChanged(adding handler: WindowsUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerWheelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pointerWheelChanged)
    }

    public func pointerWheelChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerWheelChanged(token)
    }

    /// Occurs when a right-tap input stimulus happens while the pointer is over the element.
    public func rightTapped(adding handler: WindowsUIXamlInput_RightTappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_RightTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: rightTapped)
    }

    public func rightTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_RightTapped(token)
    }

    /// Occurs when an otherwise unhandled **Tap** interaction occurs over the hit test area of this element.
    public func tapped(adding handler: WindowsUIXamlInput_TappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Tapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: tapped)
    }

    public func tapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Tapped(token)
    }

    /// Updates the DesiredSize of a UIElement. Typically, objects that implement custom layout for their layout children call this method from their own MeasureOverride implementations to form a recursive layout update.
    /// - Parameter availableSize: The available space that a parent can allocate to a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize behavior is possible in that particular container.
    public func measure(_ availableSize: WindowsFoundation_Size) throws {
        try _iuielement.measure(availableSize)
    }

    /// Positions child objects and determines a size for a UIElement. Parent objects that implement custom layout for their child elements should call this method from their layout override implementations to form a recursive layout update.
    /// - Parameter finalRect: The final size that the parent computes for the child in layout, provided as a Rect value.
    public func arrange(_ finalRect: WindowsFoundation_Rect) throws {
        try _iuielement.arrange(finalRect)
    }

    /// Sets pointer capture to a UIElement. Once captured, only the element that has capture will fire pointer-related events.
    /// - Parameter value: The pointer object reference.
    /// - Returns: **true** if the object has pointer capture; otherwise, **false**.
    public func capturePointer(_ value: WindowsUIXamlInput_Pointer?) throws -> Swift.Bool {
        try _iuielement.capturePointer(value)
    }

    /// Releases pointer captures for capture of one specific pointer by this UIElement.
    /// - Parameter value: The pointer reference. Use either saved references from previous captures, or pointer event data, to obtain this reference.
    public func releasePointerCapture(_ value: WindowsUIXamlInput_Pointer?) throws {
        try _iuielement.releasePointerCapture(value)
    }

    /// Releases all pointer captures held by this element.
    public func releasePointerCaptures() throws {
        try _iuielement.releasePointerCaptures()
    }

    /// Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify *handledEventsToo* as **true** to have the provided handler be invoked even if the event is handled elsewhere.
    /// - Parameter routedEvent: An identifier for the routed event to be handled.
    /// - Parameter handler: A reference to the handler implementation.
    /// - Parameter handledEventsToo: **true** to register the handler such that it is invoked even when the routed event is marked handled in its event data.
    public func addHandler(_ routedEvent: WindowsUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?, _ handledEventsToo: Swift.Bool) throws {
        try _iuielement.addHandler(routedEvent, handler, handledEventsToo)
    }

    /// Removes the specified routed event handler from this UIElement. Typically the handler in question was added by AddHandler.
    /// - Parameter routedEvent: The identifier of the routed event for which the handler is attached.
    /// - Parameter handler: The specific handler implementation to remove from the event handler collection on this UIElement.
    public func removeHandler(_ routedEvent: WindowsUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?) throws {
        try _iuielement.removeHandler(routedEvent, handler)
    }

    /// Returns a transform object that can be used to transform coordinates from the UIElement to the specified object.
    /// - Parameter visual: The object to compare to the current object for purposes of obtaining the transform.
    /// - Returns: The transform information as an object. Call methods on this object to get a practical transform.
    public func transformToVisual(_ visual: WindowsUIXaml_UIElement?) throws -> WindowsUIXamlMedia_GeneralTransform {
        try COM.NullResult.unwrap(_iuielement.transformToVisual(visual))
    }

    /// Invalidates the measurement state (layout) for a UIElement.
    public func invalidateMeasure() throws {
        try _iuielement.invalidateMeasure()
    }

    /// Invalidates the arrange state (layout) for a UIElement. After the invalidation, the UIElement will have its layout updated, which will occur asynchronously.
    public func invalidateArrange() throws {
        try _iuielement.invalidateArrange()
    }

    /// Ensures that all positions of child objects of a UIElement are properly updated for layout.
    public func updateLayout() throws {
        try _iuielement.updateLayout()
    }

    // MARK: Windows.UI.Xaml.IUIElement2 members

    /// Gets or sets a property that declares alternate composition and blending modes for the element in its parent layout and window. This is relevant for elements that are involved in a mixed XAML / Microsoft DirectX UI.
    /// - Returns: A value of the enumeration. The default is **Inherit**, but see Remarks.
    public var compositeMode: WindowsUIXamlMedia_ElementCompositeMode {
        get throws {
            try _iuielement2.get_CompositeMode()
        }
    }

    /// Gets or sets a property that declares alternate composition and blending modes for the element in its parent layout and window. This is relevant for elements that are involved in a mixed XAML / Microsoft DirectX UI.
    /// - Returns: A value of the enumeration. The default is **Inherit**, but see Remarks.
    public func compositeMode(_ value: WindowsUIXamlMedia_ElementCompositeMode) throws {
        try _iuielement2.put_CompositeMode(value)
    }

    /// Cancels ongoing direct manipulation processing (system-defined panning/zooming) on any ScrollViewer parent that contains the current UIElement.
    /// - Returns: **true** if a ScrollViewer parent exists and setting the value resulted in canceling the panning/zooming action. **false** if calling the method results in no action.
    public func cancelDirectManipulations() throws -> Swift.Bool {
        try _iuielement2.cancelDirectManipulations()
    }

    // MARK: Windows.UI.Xaml.IUIElement3 members

    /// Gets or sets a value that indicates whether the element can be dragged as data in a drag-and-drop operation.
    /// - Returns: **true** if the element can be dragged as data in a drag-and-drop operation; otherwise, **false**. The default is **false**.
    public var canDrag: Swift.Bool {
        get throws {
            try _iuielement3.get_CanDrag()
        }
    }

    /// Gets or sets a value that indicates whether the element can be dragged as data in a drag-and-drop operation.
    /// - Returns: **true** if the element can be dragged as data in a drag-and-drop operation; otherwise, **false**. The default is **false**.
    public func canDrag(_ value: Swift.Bool) throws {
        try _iuielement3.put_CanDrag(value)
    }

    /// Gets or sets the 3-D transform effect to apply when rendering this element.
    /// - Returns: The 3-D transform effect to apply when rendering this element. The default is **null**.
    public var transform3D: WindowsUIXamlMediaMedia3D_Transform3D {
        get throws {
            try COM.NullResult.unwrap(_iuielement3.get_Transform3D())
        }
    }

    /// Gets or sets the 3-D transform effect to apply when rendering this element.
    /// - Returns: The 3-D transform effect to apply when rendering this element. The default is **null**.
    public func transform3D(_ value: WindowsUIXamlMediaMedia3D_Transform3D?) throws {
        try _iuielement3.put_Transform3D(value)
    }

    /// Occurs when a drag operation is initiated.
    public func dragStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXaml_DragStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement3.add_DragStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dragStarting)
    }

    public func dragStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement3.remove_DragStarting(token)
    }

    /// Occurs when a drag-and-drop operation with this element as the source is ended.
    public func dropCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXaml_DropCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement3.add_DropCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dropCompleted)
    }

    public func dropCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement3.remove_DropCompleted(token)
    }

    /// Initiates a drag-and-drop operation.
    /// - Parameter pointerPoint: The coordinates of the pointer where the user interacts with the screen, and where the drag visual is attached.
    /// - Returns: A DataPackageOperation value that indicates the type of drag-and-drop operation, and whether the operation was successful.
    public func startDragAsync(_ pointerPoint: WindowsUIInput_PointerPoint?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation> {
        try COM.NullResult.unwrap(_iuielement3.startDragAsync(pointerPoint))
    }

    // MARK: Windows.UI.Xaml.IUIElement4 members

    /// Gets or sets the access key (mnemonic) for this element.
    /// - Returns: The access key (mnemonic) for this element.
    public var accessKey: Swift.String {
        get throws {
            try _iuielement4.get_AccessKey()
        }
    }

    /// Gets or sets the access key (mnemonic) for this element.
    /// - Returns: The access key (mnemonic) for this element.
    public func accessKey(_ value: Swift.String) throws {
        try _iuielement4.put_AccessKey(value)
    }

    /// Gets or sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    /// - Returns: The element that defines the access key scope.
    public var accessKeyScopeOwner: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement4.get_AccessKeyScopeOwner())
        }
    }

    /// Gets or sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    /// - Returns: The element that defines the access key scope.
    public func accessKeyScopeOwner(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _iuielement4.put_AccessKeyScopeOwner(value)
    }

    /// Gets or sets the flyout associated with this element.
    /// - Returns: The flyout associated with this element, if any; otherwise, **null**. The default is **null**.
    public var contextFlyout: WindowsUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_iuielement4.get_ContextFlyout())
        }
    }

    /// Gets or sets the flyout associated with this element.
    /// - Returns: The flyout associated with this element, if any; otherwise, **null**. The default is **null**.
    public func contextFlyout(_ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _iuielement4.put_ContextFlyout(value)
    }

    /// Gets or sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    /// - Returns: **true** to dismiss the access key display when an access key is invoked; otherwise, **false**.
    public var exitDisplayModeOnAccessKeyInvoked: Swift.Bool {
        get throws {
            try _iuielement4.get_ExitDisplayModeOnAccessKeyInvoked()
        }
    }

    /// Gets or sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    /// - Returns: **true** to dismiss the access key display when an access key is invoked; otherwise, **false**.
    public func exitDisplayModeOnAccessKeyInvoked(_ value: Swift.Bool) throws {
        try _iuielement4.put_ExitDisplayModeOnAccessKeyInvoked(value)
    }

    /// Gets or sets a value that indicates whether an element defines its own access key scope.
    /// - Returns: **true** if an element defines its own scope; otherwise, **false**.
    public var isAccessKeyScope: Swift.Bool {
        get throws {
            try _iuielement4.get_IsAccessKeyScope()
        }
    }

    /// Gets or sets a value that indicates whether an element defines its own access key scope.
    /// - Returns: **true** if an element defines its own scope; otherwise, **false**.
    public func isAccessKeyScope(_ value: Swift.Bool) throws {
        try _iuielement4.put_IsAccessKeyScope(value)
    }

    /// Occurs when access keys should no longer be displayed.
    public func accessKeyDisplayDismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_AccessKeyDisplayDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement4.add_AccessKeyDisplayDismissed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyDisplayDismissed)
    }

    public func accessKeyDisplayDismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement4.remove_AccessKeyDisplayDismissed(token)
    }

    /// Occurs when the user requests that access keys be displayed.
    public func accessKeyDisplayRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_AccessKeyDisplayRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement4.add_AccessKeyDisplayRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyDisplayRequested)
    }

    public func accessKeyDisplayRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement4.remove_AccessKeyDisplayRequested(token)
    }

    /// Occurs when a user completes an access key sequence.
    public func accessKeyInvoked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_AccessKeyInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement4.add_AccessKeyInvoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyInvoked)
    }

    public func accessKeyInvoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement4.remove_AccessKeyInvoked(token)
    }

    /// Occurs when a context input gesture continues into a manipulation gesture, to notify the element that the context flyout should not be opened.
    public func contextCanceled(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXaml_RoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement4.add_ContextCanceled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextCanceled)
    }

    public func contextCanceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement4.remove_ContextCanceled(token)
    }

    /// Occurs when the user has completed a context input gesture, such as a right-click.
    public func contextRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_ContextRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement4.add_ContextRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contextRequested)
    }

    public func contextRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement4.remove_ContextRequested(token)
    }

    // MARK: Windows.UI.Xaml.IUIElement5 members

    /// Gets or sets a value that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled.
    /// - Returns: A value of the enumeration that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled. The default is **Application**.
    public var highContrastAdjustment: WindowsUIXaml_ElementHighContrastAdjustment {
        get throws {
            try _iuielement5.get_HighContrastAdjustment()
        }
    }

    /// Gets or sets a value that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled.
    /// - Returns: A value of the enumeration that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled. The default is **Application**.
    public func highContrastAdjustment(_ value: WindowsUIXaml_ElementHighContrastAdjustment) throws {
        try _iuielement5.put_HighContrastAdjustment(value)
    }

    /// Gets or sets a value that indicates how far left or right the Key Tip is placed in relation to the UIElement.
    /// - Returns: The number of pixels to move the Key Tip. Positive values move it right. Negative values move it left.
    public var keyTipHorizontalOffset: Swift.Double {
        get throws {
            try _iuielement5.get_KeyTipHorizontalOffset()
        }
    }

    /// Gets or sets a value that indicates how far left or right the Key Tip is placed in relation to the UIElement.
    /// - Returns: The number of pixels to move the Key Tip. Positive values move it right. Negative values move it left.
    public func keyTipHorizontalOffset(_ value: Swift.Double) throws {
        try _iuielement5.put_KeyTipHorizontalOffset(value)
    }

    /// Gets or sets a value that indicates where the access key Key Tip is placed in relation to the boundary of the UIElement.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var keyTipPlacementMode: WindowsUIXamlInput_KeyTipPlacementMode {
        get throws {
            try _iuielement5.get_KeyTipPlacementMode()
        }
    }

    /// Gets or sets a value that indicates where the access key Key Tip is placed in relation to the boundary of the UIElement.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func keyTipPlacementMode(_ value: WindowsUIXamlInput_KeyTipPlacementMode) throws {
        try _iuielement5.put_KeyTipPlacementMode(value)
    }

    /// Gets or sets a value that indicates how far up or down the Key Tip is placed in relation to the UI element.
    /// - Returns: The number of pixels to move the Key Tip. Positive values move it down. Negative values move it up.
    public var keyTipVerticalOffset: Swift.Double {
        get throws {
            try _iuielement5.get_KeyTipVerticalOffset()
        }
    }

    /// Gets or sets a value that indicates how far up or down the Key Tip is placed in relation to the UI element.
    /// - Returns: The number of pixels to move the Key Tip. Positive values move it down. Negative values move it up.
    public func keyTipVerticalOffset(_ value: Swift.Double) throws {
        try _iuielement5.put_KeyTipVerticalOffset(value)
    }

    /// Gets the collection of XamlLight objects attached to this element.
    /// - Returns: The collection of XamlLight elements that apply to a UIElement.
    public var lights: WindowsFoundationCollections_IVector<WindowsUIXamlMedia_XamlLight?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement5.get_Lights())
        }
    }

    /// Gets or sets a value that modifies how tabbing and TabIndex work for this control.
    /// - Returns: A value of the enumeration. The default is **Local**.
    public var tabFocusNavigation: WindowsUIXamlInput_KeyboardNavigationMode {
        get throws {
            try _iuielement5.get_TabFocusNavigation()
        }
    }

    /// Gets or sets a value that modifies how tabbing and TabIndex work for this control.
    /// - Returns: A value of the enumeration. The default is **Local**.
    public func tabFocusNavigation(_ value: WindowsUIXamlInput_KeyboardNavigationMode) throws {
        try _iuielement5.put_TabFocusNavigation(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a down navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var xyfocusDownNavigationStrategy: WindowsUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement5.get_XYFocusDownNavigationStrategy()
        }
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a down navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func xyfocusDownNavigationStrategy(_ value: WindowsUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement5.put_XYFocusDownNavigationStrategy(value)
    }

    /// Gets or sets a value that enables or disables navigation using the keyboard directional arrows.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var xyfocusKeyboardNavigation: WindowsUIXamlInput_XYFocusKeyboardNavigationMode {
        get throws {
            try _iuielement5.get_XYFocusKeyboardNavigation()
        }
    }

    /// Gets or sets a value that enables or disables navigation using the keyboard directional arrows.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func xyfocusKeyboardNavigation(_ value: WindowsUIXamlInput_XYFocusKeyboardNavigationMode) throws {
        try _iuielement5.put_XYFocusKeyboardNavigation(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a left navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var xyfocusLeftNavigationStrategy: WindowsUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement5.get_XYFocusLeftNavigationStrategy()
        }
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a left navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func xyfocusLeftNavigationStrategy(_ value: WindowsUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement5.put_XYFocusLeftNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a right navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var xyfocusRightNavigationStrategy: WindowsUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement5.get_XYFocusRightNavigationStrategy()
        }
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a right navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func xyfocusRightNavigationStrategy(_ value: WindowsUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement5.put_XYFocusRightNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of an up navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var xyfocusUpNavigationStrategy: WindowsUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement5.get_XYFocusUpNavigationStrategy()
        }
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of an up navigation.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func xyfocusUpNavigationStrategy(_ value: WindowsUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement5.put_XYFocusUpNavigationStrategy(value)
    }

    /// Occurs before a UIElement receives focus. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    public func gettingFocus(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_GettingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement5.add_GettingFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gettingFocus)
    }

    public func gettingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement5.remove_GettingFocus(token)
    }

    /// Occurs before a UIElement loses focus. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    public func losingFocus(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_LosingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement5.add_LosingFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: losingFocus)
    }

    public func losingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement5.remove_LosingFocus(token)
    }

    /// Occurs when a user attempts to move focus (via tab or directional arrows), but focus doesn't move because no focus candidate is found in the direction of movement.
    public func noFocusCandidateFound(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_NoFocusCandidateFoundEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement5.add_NoFocusCandidateFound(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: noFocusCandidateFound)
    }

    public func noFocusCandidateFound(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement5.remove_NoFocusCandidateFound(token)
    }

    /// Initiates a request to the XAML framework to bring the element into view within any scrollable regions it is contained within.
    public func startBringIntoView() throws {
        try _iuielement5.startBringIntoView()
    }

    /// Initiates a request to the XAML framework to bring the element into view using the specified options.
    /// - Parameter options: An instance of BringIntoViewOptions.
    public func startBringIntoView(_ options: WindowsUIXaml_BringIntoViewOptions?) throws {
        try _iuielement5.startBringIntoViewWithOptions(options)
    }

    // MARK: Windows.UI.Xaml.IUIElement7 members

    /// Gets the collection of key combinations that invoke an action using the keyboard. 
    /// - Returns: The collection of **KeyboardAccelerator** objects.
    public var keyboardAccelerators: WindowsFoundationCollections_IVector<WindowsUIXamlInput_KeyboardAccelerator?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement7.get_KeyboardAccelerators())
        }
    }

    /// Occurs when a single, composed character is received by the input queue.
    public func characterReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_CharacterReceivedRoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement7.add_CharacterReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: characterReceived)
    }

    public func characterReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement7.remove_CharacterReceived(token)
    }

    /// Occurs when a keyboard key is pressed while the UIElement has focus.
    public func previewKeyDown(adding handler: WindowsUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement7.add_PreviewKeyDown(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: previewKeyDown)
    }

    public func previewKeyDown(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement7.remove_PreviewKeyDown(token)
    }

    /// Occurs when a keyboard key is released while the UIElement has focus.
    public func previewKeyUp(adding handler: WindowsUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement7.add_PreviewKeyUp(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: previewKeyUp)
    }

    public func previewKeyUp(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement7.remove_PreviewKeyUp(token)
    }

    /// Occurs when a keyboard shortcut (or accelerator) is pressed.
    public func processKeyboardAccelerators(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXamlInput_ProcessKeyboardAcceleratorEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement7.add_ProcessKeyboardAccelerators(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: processKeyboardAccelerators)
    }

    public func processKeyboardAccelerators(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement7.remove_ProcessKeyboardAccelerators(token)
    }

    /// Attempts to invoke a keyboard shortcut (or accelerator) by searching the entire visual tree of the UIElement for the shortcut.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    public func tryInvokeKeyboardAccelerator(_ args: WindowsUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iuielement7.tryInvokeKeyboardAccelerator(args)
    }

    // MARK: Windows.UI.Xaml.IUIElement8 members

    /// Gets or sets a value that indicates the element targeted by the access key Key Tip.
    /// - Returns: The element targeted by the Key Tip.
    public var keyTipTarget: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement8.get_KeyTipTarget())
        }
    }

    /// Gets or sets a value that indicates the element targeted by the access key Key Tip.
    /// - Returns: The element targeted by the Key Tip.
    public func keyTipTarget(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _iuielement8.put_KeyTipTarget(value)
    }

    /// Gets or sets a value that indicates whether the control tooltip displays the key combination for it's associated keyboard accelerator.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var keyboardAcceleratorPlacementMode: WindowsUIXamlInput_KeyboardAcceleratorPlacementMode {
        get throws {
            try _iuielement8.get_KeyboardAcceleratorPlacementMode()
        }
    }

    /// Gets or sets a value that indicates whether the control tooltip displays the key combination for it's associated keyboard accelerator.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func keyboardAcceleratorPlacementMode(_ value: WindowsUIXamlInput_KeyboardAcceleratorPlacementMode) throws {
        try _iuielement8.put_KeyboardAcceleratorPlacementMode(value)
    }

    /// Gets or sets a value that indicates the control tooltip that displays the accelerator key combination.
    /// - Returns: The control tooltip that displays the accelerator key combination.
    public var keyboardAcceleratorPlacementTarget: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement8.get_KeyboardAcceleratorPlacementTarget())
        }
    }

    /// Gets or sets a value that indicates the control tooltip that displays the accelerator key combination.
    /// - Returns: The control tooltip that displays the accelerator key combination.
    public func keyboardAcceleratorPlacementTarget(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _iuielement8.put_KeyboardAcceleratorPlacementTarget(value)
    }

    /// Occurs when StartBringIntoView is called on this element or one of its descendants.
    public func bringIntoViewRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_UIElement?, WindowsUIXaml_BringIntoViewRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement8.add_BringIntoViewRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: bringIntoViewRequested)
    }

    public func bringIntoViewRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement8.remove_BringIntoViewRequested(token)
    }

    // MARK: Windows.UI.Xaml.IUIElement9 members

    /// Gets or sets a value that indicates whether the UIElement can be a candidate for scroll anchoring.
    /// - Returns: **true** if an element should be considered as a candidate for scroll anchoring; otherwise, **false**. The default is **false**.
    public var canBeScrollAnchor: Swift.Bool {
        get throws {
            try _iuielement9.get_CanBeScrollAnchor()
        }
    }

    /// Gets or sets a value that indicates whether the UIElement can be a candidate for scroll anchoring.
    /// - Returns: **true** if an element should be considered as a candidate for scroll anchoring; otherwise, **false**. The default is **false**.
    public func canBeScrollAnchor(_ value: Swift.Bool) throws {
        try _iuielement9.put_CanBeScrollAnchor(value)
    }

    /// Gets or sets the center point of the element, which is the point about which rotation or scaling occurs. Affects the rendering position of the element.
    /// - Returns: The center point of the element, which is the point about which rotation or scaling occurs.
    public var centerPoint: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement9.get_CenterPoint()
        }
    }

    /// Gets or sets the center point of the element, which is the point about which rotation or scaling occurs. Affects the rendering position of the element.
    /// - Returns: The center point of the element, which is the point about which rotation or scaling occurs.
    public func centerPoint(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement9.put_CenterPoint(value)
    }

    /// Gets or sets the ScalarTransition that animates changes to the Opacity property.
    public var opacityTransition: WindowsUIXaml_ScalarTransition {
        get throws {
            try COM.NullResult.unwrap(_iuielement9.get_OpacityTransition())
        }
    }

    /// Gets or sets the ScalarTransition that animates changes to the Opacity property.
    public func opacityTransition(_ value: WindowsUIXaml_ScalarTransition?) throws {
        try _iuielement9.put_OpacityTransition(value)
    }

    /// Gets or sets the angle of clockwise rotation, in degrees. Rotates relative to the RotationAxis and the CenterPoint. Affects the rendering position of the element.
    /// - Returns: The angle of clockwise rotation, in degrees.
    public var rotation: Swift.Float {
        get throws {
            try _iuielement9.get_Rotation()
        }
    }

    /// Gets or sets the angle of clockwise rotation, in degrees. Rotates relative to the RotationAxis and the CenterPoint. Affects the rendering position of the element.
    /// - Returns: The angle of clockwise rotation, in degrees.
    public func rotation(_ value: Swift.Float) throws {
        try _iuielement9.put_Rotation(value)
    }

    /// Gets or sets the axis to rotate the element around.
    /// - Returns: The axis to rotate the element around.
    public var rotationAxis: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement9.get_RotationAxis()
        }
    }

    /// Gets or sets the axis to rotate the element around.
    /// - Returns: The axis to rotate the element around.
    public func rotationAxis(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement9.put_RotationAxis(value)
    }

    /// Gets or sets the ScalarTransition that animates changes to the Rotation property.
    /// - Returns: The ScalarTransition that animates changes to the Rotation property.
    public var rotationTransition: WindowsUIXaml_ScalarTransition {
        get throws {
            try COM.NullResult.unwrap(_iuielement9.get_RotationTransition())
        }
    }

    /// Gets or sets the ScalarTransition that animates changes to the Rotation property.
    /// - Returns: The ScalarTransition that animates changes to the Rotation property.
    public func rotationTransition(_ value: WindowsUIXaml_ScalarTransition?) throws {
        try _iuielement9.put_RotationTransition(value)
    }

    /// Gets or sets the scale of the element. Scales relative to the element's CenterPoint. Affects the rendering position of the element.
    /// - Returns: The scale of the element, relative to the element's CenterPoint.
    public var scale: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement9.get_Scale()
        }
    }

    /// Gets or sets the scale of the element. Scales relative to the element's CenterPoint. Affects the rendering position of the element.
    /// - Returns: The scale of the element, relative to the element's CenterPoint.
    public func scale(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement9.put_Scale(value)
    }

    /// Gets or sets the Vector3Transition that animates changes to the Scale property.
    /// - Returns: The Vector3Transition that animates changes to the Scale property.
    public var scaleTransition: WindowsUIXaml_Vector3Transition {
        get throws {
            try COM.NullResult.unwrap(_iuielement9.get_ScaleTransition())
        }
    }

    /// Gets or sets the Vector3Transition that animates changes to the Scale property.
    /// - Returns: The Vector3Transition that animates changes to the Scale property.
    public func scaleTransition(_ value: WindowsUIXaml_Vector3Transition?) throws {
        try _iuielement9.put_ScaleTransition(value)
    }

    /// Gets or sets the transformation matrix to apply to the element.
    /// - Returns: The transformation matrix to apply to the element.
    public var transformMatrix: WindowsFoundationNumerics_Matrix4x4 {
        get throws {
            try _iuielement9.get_TransformMatrix()
        }
    }

    /// Gets or sets the transformation matrix to apply to the element.
    /// - Returns: The transformation matrix to apply to the element.
    public func transformMatrix(_ value: WindowsFoundationNumerics_Matrix4x4) throws {
        try _iuielement9.put_TransformMatrix(value)
    }

    /// Gets or sets the x, y, and z rendering position of the element.
    /// - Returns: The x, y, and z rendering position of the element.
    public var translation: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement9.get_Translation()
        }
    }

    /// Gets or sets the x, y, and z rendering position of the element.
    /// - Returns: The x, y, and z rendering position of the element.
    public func translation(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement9.put_Translation(value)
    }

    /// Gets or sets the Vector3Transition that animates changes to the Translation property.
    /// - Returns: The Vector3Transition that animates changes to the Translation property.
    public var translationTransition: WindowsUIXaml_Vector3Transition {
        get throws {
            try COM.NullResult.unwrap(_iuielement9.get_TranslationTransition())
        }
    }

    /// Gets or sets the Vector3Transition that animates changes to the Translation property.
    /// - Returns: The Vector3Transition that animates changes to the Translation property.
    public func translationTransition(_ value: WindowsUIXaml_Vector3Transition?) throws {
        try _iuielement9.put_TranslationTransition(value)
    }

    /// Begins the specified animation on the element.
    /// - Parameter animation: The animation to start.
    public func startAnimation(_ animation: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _iuielement9.startAnimation(animation)
    }

    /// Stops the specified animation on the element.
    /// - Parameter animation: The animation to stop.
    public func stopAnimation(_ animation: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _iuielement9.stopAnimation(animation)
    }

    // MARK: Windows.UI.Xaml.IUIElement10 members

    /// Gets the position of this UIElement, relative to its parent, computed during the arrange pass of the layout process.
    /// - Returns: The position of this UIElement, relative to its parent, computed during the arrange pass of the layout process.
    public var actualOffset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement10.get_ActualOffset()
        }
    }

    /// Gets the size that this UIElement computed during the arrange pass of the layout process.
    /// - Returns: The size that this UIElement computed during the arrange pass of the layout process.
    public var actualSize: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _iuielement10.get_ActualSize()
        }
    }

    /// Gets or sets the shadow effect cast by the element.
    /// - Returns: The shadow effect cast by the element.
    public var shadow: WindowsUIXamlMedia_Shadow {
        get throws {
            try COM.NullResult.unwrap(_iuielement10.get_Shadow())
        }
    }

    /// Gets or sets the shadow effect cast by the element.
    /// - Returns: The shadow effect cast by the element.
    public func shadow(_ value: WindowsUIXamlMedia_Shadow?) throws {
        try _iuielement10.put_Shadow(value)
    }

    /// Gets the context identifier for the element.
    /// - Returns: The context identifier for the element.
    public var uicontext: WindowsUI_UIContext {
        get throws {
            try COM.NullResult.unwrap(_iuielement10.get_UIContext())
        }
    }

    /// Gets or sets the XamlRoot in which this element is being viewed.
    /// - Returns: The XamlRoot in which this element is being viewed. The default is **null**.
    public var xamlRoot: WindowsUIXaml_XamlRoot {
        get throws {
            try COM.NullResult.unwrap(_iuielement10.get_XamlRoot())
        }
    }

    /// Gets or sets the XamlRoot in which this element is being viewed.
    /// - Returns: The XamlRoot in which this element is being viewed. The default is **null**.
    public func xamlRoot(_ value: WindowsUIXaml_XamlRoot?) throws {
        try _iuielement10.put_XamlRoot(value)
    }

    // MARK: Windows.UI.Xaml.IUIElementOverrides members

    /// When implemented in a derived class, returns class-specific AutomationPeer implementations for the Microsoft UI Automation infrastructure.
    /// - Returns: The class-specific AutomationPeer subclass to return.
    open func onCreateAutomationPeer() throws -> WindowsUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iuielementOverrides.onCreateAutomationPeer())
    }

    /// Override this method to implement how layout and logic should behave when items are removed from a class-specific content or children property.
    open func onDisconnectVisualChildren() throws {
        try _iuielementOverrides.onDisconnectVisualChildren()
    }

    /// Enables a UIElement subclass to expose child elements that assist with resolving touch targeting.
    /// - Parameter point: The point being touched.
    /// - Parameter boundingRect: The bounds used for touch tolerance.
    /// - Returns: A set of point sets. These represent the vertices of sub elements that are intersected by the given touch point (plus tolerance).
    open func findSubElementsForTouchTargeting(_ point: WindowsFoundation_Point, _ boundingRect: WindowsFoundation_Rect) throws -> WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?> {
        try COM.NullResult.unwrap(_iuielementOverrides.findSubElementsForTouchTargeting(point, boundingRect))
    }

    // MARK: Windows.UI.Xaml.IUIElementOverrides7 members

    /// Enables a UIElement subclass to expose child elements that take part in Tab focus.
    /// - Returns: A collection of the UIElement's child elements that take part in Tab focus.
    open func getChildrenInTabFocusOrder() throws -> WindowsFoundationCollections_IIterable<WindowsUIXaml_DependencyObject?> {
        try COM.NullResult.unwrap(_iuielementOverrides7.getChildrenInTabFocusOrder())
    }

    /// Called just before a keyboard shortcut (or accelerator) is processed in your app. Invoked whenever application code or internal processes call ProcessKeyboardAccelerators. Override this method to influence the default accelerator handling.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    open func onProcessKeyboardAccelerators(_ args: WindowsUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iuielementOverrides7.onProcessKeyboardAccelerators(args)
    }

    // MARK: Windows.UI.Xaml.IUIElementOverrides8 members

    /// Called when a keyboard shortcut (or accelerator) is processed in your app. Override this method to handle how your app responds when a keyboard accelerator is invoked.
    /// - Parameter args: The KeyboardAcceleratorInvokedEventArgs.
    open func onKeyboardAcceleratorInvoked(_ args: WindowsUIXamlInput_KeyboardAcceleratorInvokedEventArgs?) throws {
        try _iuielementOverrides8.onKeyboardAcceleratorInvoked(args)
    }

    /// Called before the BringIntoViewRequested event occurs.
    /// - Parameter e: The data for the event.
    open func onBringIntoViewRequested(_ e: WindowsUIXaml_BringIntoViewRequestedEventArgs?) throws {
        try _iuielementOverrides8.onBringIntoViewRequested(e)
    }

    // MARK: Windows.UI.Xaml.IUIElementOverrides9 members

    /// When overridden in a derived class, defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter animationPropertyInfo: Information about the property to be animated.
    open func populatePropertyInfoOverride(_ propertyName: Swift.String, _ animationPropertyInfo: WindowsUIComposition_AnimationPropertyInfo?) throws {
        try _iuielementOverrides9.populatePropertyInfoOverride(propertyName, animationPropertyInfo)
    }

    // MARK: Windows.UI.Composition.IAnimationObject members

    /// Defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter propertyInfo: Information about the property to be animated.
    public func populatePropertyInfo(_ propertyName: Swift.String, _ propertyInfo: WindowsUIComposition_AnimationPropertyInfo?) throws {
        try _ianimationObject.populatePropertyInfo(propertyName, propertyInfo)
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics6 members

    /// Gets the identifier for the GettingFocus routed event.
    /// - Returns: The identifier for the GettingFocus routed event.
    public static var gettingFocusEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics6.get_GettingFocusEvent())
        }
    }

    /// Gets the identifier for the LosingFocus routed event.
    /// - Returns: The identifier for the LosingFocus routed event.
    public static var losingFocusEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics6.get_LosingFocusEvent())
        }
    }

    /// Gets the identifier for the NoFocusCandidateFound routed event.
    /// - Returns: The identifier for the NoFocusCandidateFound routed event.
    public static var noFocusCandidateFoundEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics6.get_NoFocusCandidateFoundEvent())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics3 members

    /// Identifies the CanDrag dependency property.
    /// - Returns: The identifier for the CanDrag dependency property.
    public static var canDragProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics3.get_CanDragProperty())
        }
    }

    /// Identifies the Transform3D dependency property.
    /// - Returns: The identifier for the Transform3D dependency property.
    public static var transform3DProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics3.get_Transform3DProperty())
        }
    }

    /// Resumes direct manipulation processing (system-defined panning/zooming) on any ScrollViewer parent that contains the current UIElement.
    /// - Parameter value: The active touch point that initiated the manipulation.
    /// - Returns: **true** if a ScrollViewer parent exists and setting the value resulted in resuming the panning/zooming action. **false** if calling the method results in no action.
    public static func tryStartDirectManipulation(_ value: WindowsUIXamlInput_Pointer?) throws -> Swift.Bool {
        try _iuielementStatics3.tryStartDirectManipulation(value)
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics8 members

    /// Gets the identifier for the BringIntoViewRequested routed event.
    /// - Returns: The identifier for the BringIntoViewRequested routed event.
    public static var bringIntoViewRequestedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics8.get_BringIntoViewRequestedEvent())
        }
    }

    /// Gets the identifier for the ContextRequested routed event.
    /// - Returns: The identifier for the ContextRequested routed event.
    public static var contextRequestedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics8.get_ContextRequestedEvent())
        }
    }

    /// Identifies the KeyTipTarget dependency property.
    /// - Returns: The identifier for the KeyTipTarget dependency property.
    public static var keyTipTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics8.get_KeyTipTargetProperty())
        }
    }

    /// Identifies the KeyboardAcceleratorPlacementMode dependency property.
    /// - Returns: The identifier for the KeyboardAcceleratorPlacementMode dependency property.
    public static var keyboardAcceleratorPlacementModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics8.get_KeyboardAcceleratorPlacementModeProperty())
        }
    }

    /// Identifies the KeyboardAcceleratorPlacementTarget dependency property.
    /// - Returns: The identifier for the KeyboardAcceleratorPlacementTarget dependency property.
    public static var keyboardAcceleratorPlacementTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics8.get_KeyboardAcceleratorPlacementTargetProperty())
        }
    }

    /// Registers an element as representing a scrollable viewport.
    /// - Parameter element: The element to register as a scrollable viewport.
    public static func registerAsScrollPort(_ element: WindowsUIXaml_UIElement?) throws {
        try _iuielementStatics8.registerAsScrollPort(element)
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics5 members

    /// Identifies the HighContrastAdjustment dependency property.
    /// - Returns: The identifier for the HighContrastAdjustment dependency property.
    public static var highContrastAdjustmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_HighContrastAdjustmentProperty())
        }
    }

    /// Identifies the KeyTipHorizontalOffset dependency property.
    /// - Returns: The identifier for the KeyTipHorizontalOffset dependency property.
    public static var keyTipHorizontalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_KeyTipHorizontalOffsetProperty())
        }
    }

    /// Identifies the KeyTipPlacementMode dependency property.
    /// - Returns: The identifier for the KeyTipPlacementMode dependency property.
    public static var keyTipPlacementModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_KeyTipPlacementModeProperty())
        }
    }

    /// Identifies the KeyTipVerticalOffset dependency property.
    /// - Returns: The identifier for the KeyTipVerticalOffset dependency property.
    public static var keyTipVerticalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_KeyTipVerticalOffsetProperty())
        }
    }

    /// Identifies the Lights dependency property.
    /// - Returns: The identifier for the Lights dependency property.
    public static var lightsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_LightsProperty())
        }
    }

    /// Identifies the TabFocusNavigation dependency property.
    /// - Returns: The identifier for the TabFocusNavigation dependency property.
    public static var tabFocusNavigationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_TabFocusNavigationProperty())
        }
    }

    /// Identifies the XYFocusDownNavigationStrategy dependency property.
    /// - Returns: The identifier for the XYFocusDownNavigationStrategy dependency property.
    public static var xyfocusDownNavigationStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_XYFocusDownNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusKeyboardNavigation dependency property.
    /// - Returns: The identifier for the XYFocusKeyboardNavigation dependency property.
    public static var xyfocusKeyboardNavigationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_XYFocusKeyboardNavigationProperty())
        }
    }

    /// Identifies the XYFocusLeftNavigationStrategy dependency property.
    /// - Returns: The identifier for the XYFocusLeftNavigationStrategy dependency property.
    public static var xyfocusLeftNavigationStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_XYFocusLeftNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusRightNavigationStrategy dependency property.
    /// - Returns: The identifier for the XYFocusRightNavigationStrategy dependency property.
    public static var xyfocusRightNavigationStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_XYFocusRightNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusUpNavigationStrategy dependency property.
    /// - Returns: The identifier for the XYFocusUpNavigationStrategy dependency property.
    public static var xyfocusUpNavigationStrategyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics5.get_XYFocusUpNavigationStrategyProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics members

    /// Identifies the AllowDrop dependency property.
    /// - Returns: The identifier for the AllowDrop dependency property.
    public static var allowDropProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_AllowDropProperty())
        }
    }

    /// Identifies the CacheMode dependency property.
    /// - Returns: The identifier for the CacheMode dependency property.
    public static var cacheModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CacheModeProperty())
        }
    }

    /// Identifies the Clip dependency property.
    /// - Returns: The identifier for the Clip dependency property.
    public static var clipProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ClipProperty())
        }
    }

    /// Gets the identifier for the DoubleTapped routed event.
    /// - Returns: The identifier for the DoubleTapped routed event.
    public static var doubleTappedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DoubleTappedEvent())
        }
    }

    /// Gets the identifier for the DragEnter routed event.
    /// - Returns: The identifier for the DragEnter routed event.
    public static var dragEnterEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragEnterEvent())
        }
    }

    /// Gets the identifier for the DragLeave routed event.
    /// - Returns: The identifier for the DragLeave routed event.
    public static var dragLeaveEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragLeaveEvent())
        }
    }

    /// Gets the identifier for the DragOver routed event.
    /// - Returns: The identifier for the DragOver routed event.
    public static var dragOverEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragOverEvent())
        }
    }

    /// Gets the identifier for the Drop routed event.
    /// - Returns: The identifier for the Drop routed event.
    public static var dropEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DropEvent())
        }
    }

    /// Gets the identifier for the Holding routed event.
    /// - Returns: The identifier for the Holding routed event.
    public static var holdingEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_HoldingEvent())
        }
    }

    /// Identifies the IsDoubleTapEnabled dependency property.
    /// - Returns: The identifier for the IsDoubleTapEnabled dependency property.
    public static var isDoubleTapEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsDoubleTapEnabledProperty())
        }
    }

    /// Identifies the IsHitTestVisible dependency property.
    /// - Returns: The identifier for the IsHitTestVisible dependency property.
    public static var isHitTestVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsHitTestVisibleProperty())
        }
    }

    /// Identifies the IsHoldingEnabled dependency property.
    /// - Returns: The identifier for the IsHoldingEnabled dependency property.
    public static var isHoldingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsHoldingEnabledProperty())
        }
    }

    /// Identifies the IsRightTapEnabled dependency property.
    /// - Returns: The identifier for the IsRightTapEnabled dependency property.
    public static var isRightTapEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsRightTapEnabledProperty())
        }
    }

    /// Identifies the IsTapEnabled dependency property.
    /// - Returns: The identifier for the IsTapEnabled dependency property.
    public static var isTapEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsTapEnabledProperty())
        }
    }

    /// Gets the identifier for the KeyDown routed event.
    /// - Returns: The identifier for the KeyDown routed event.
    public static var keyDownEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyDownEvent())
        }
    }

    /// Gets the identifier for the KeyUp routed event.
    /// - Returns: The identifier for the KeyUp routed event.
    public static var keyUpEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyUpEvent())
        }
    }

    /// Gets the identifier for the ManipulationCompleted routed event.
    /// - Returns: The identifier for the ManipulationCompleted routed event.
    public static var manipulationCompletedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationCompletedEvent())
        }
    }

    /// Gets the identifier for the ManipulationDelta routed event.
    /// - Returns: The identifier for the ManipulationDelta routed event.
    public static var manipulationDeltaEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationDeltaEvent())
        }
    }

    /// Gets the identifier for the ManipulationInertiaStarting routed event.
    /// - Returns: The identifier for the ManipulationInertiaStarting routed event.
    public static var manipulationInertiaStartingEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationInertiaStartingEvent())
        }
    }

    /// Identifies the ManipulationMode dependency property.
    /// - Returns: The identifier for the ManipulationMode dependency property.
    public static var manipulationModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationModeProperty())
        }
    }

    /// Gets the identifier for the ManipulationStarted routed event.
    /// - Returns: The identifier for the ManipulationStarted routed event.
    public static var manipulationStartedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationStartedEvent())
        }
    }

    /// Gets the identifier for the ManipulationStarting routed event.
    /// - Returns: The identifier for the ManipulationStarting routed event.
    public static var manipulationStartingEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationStartingEvent())
        }
    }

    /// Identifies the IsHitTestVisible dependency property.
    /// - Returns: The identifier for the IsHitTestVisible dependency property.
    public static var opacityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_OpacityProperty())
        }
    }

    /// Gets the identifier for the PointerCanceled routed event.
    /// - Returns: The identifier for the PointerCanceled routed event.
    public static var pointerCanceledEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCanceledEvent())
        }
    }

    /// Gets the identifier for the PointerCaptureLost routed event.
    /// - Returns: The identifier for the PointerCaptureLost routed event.
    public static var pointerCaptureLostEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCaptureLostEvent())
        }
    }

    /// Identifies the PointerCaptures dependency property.
    /// - Returns: The identifier for the PointerCaptures dependency property.
    public static var pointerCapturesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCapturesProperty())
        }
    }

    /// Gets the identifier for the PointerEntered routed event.
    /// - Returns: The identifier for the PointerEntered routed event.
    public static var pointerEnteredEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerEnteredEvent())
        }
    }

    /// Gets the identifier for the PointerExited routed event.
    /// - Returns: The identifier for the PointerExited routed event.
    public static var pointerExitedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerExitedEvent())
        }
    }

    /// Gets the identifier for the PointerMoved routed event.
    /// - Returns: The identifier for the PointerMoved routed event.
    public static var pointerMovedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerMovedEvent())
        }
    }

    /// Gets the identifier for the PointerPressed routed event.
    /// - Returns: The identifier for the PointerPressed routed event.
    public static var pointerPressedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerPressedEvent())
        }
    }

    /// Gets the identifier for the PointerReleased routed event.
    /// - Returns: The identifier for the PointerReleased routed event.
    public static var pointerReleasedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerReleasedEvent())
        }
    }

    /// Gets the identifier for the PointerWheelChanged routed event.
    /// - Returns: The identifier for the PointerWheelChanged routed event.
    public static var pointerWheelChangedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerWheelChangedEvent())
        }
    }

    /// Identifies the Projection dependency property.
    /// - Returns: The identifier for the Projection dependency property.
    public static var projectionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ProjectionProperty())
        }
    }

    /// Identifies the RenderTransformOrigin dependency property.
    /// - Returns: The identifier for the RenderTransformOrigin dependency property.
    public static var renderTransformOriginProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RenderTransformOriginProperty())
        }
    }

    /// Identifies the RenderTransform dependency property.
    /// - Returns: The identifier for the RenderTransform dependency property.
    public static var renderTransformProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RenderTransformProperty())
        }
    }

    /// Gets the identifier for the RightTapped routed event.
    /// - Returns: The identifier for the RightTapped routed event.
    public static var rightTappedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RightTappedEvent())
        }
    }

    /// Gets the identifier for the Tapped routed event.
    /// - Returns: The identifier for the Tapped routed event.
    public static var tappedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TappedEvent())
        }
    }

    /// Identifies the Transitions dependency property.
    /// - Returns: The identifier for the Transitions dependency property.
    public static var transitionsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TransitionsProperty())
        }
    }

    /// Identifies the UseLayoutRounding dependency property.
    /// - Returns: The identifier for the UseLayoutRounding dependency property.
    public static var useLayoutRoundingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_UseLayoutRoundingProperty())
        }
    }

    /// Identifies the Visibility dependency property.
    /// - Returns: The identifier for the Visibility dependency property.
    public static var visibilityProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_VisibilityProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics7 members

    /// Gets the identifier for the CharacterReceived routed event.
    /// - Returns: The identifier for the CharacterReceived routed event.
    public static var characterReceivedEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics7.get_CharacterReceivedEvent())
        }
    }

    /// Gets the identifier for the PreviewKeyDown routed event.
    /// - Returns: The identifier for the PreviewKeyDown routed event.
    public static var previewKeyDownEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics7.get_PreviewKeyDownEvent())
        }
    }

    /// Gets the identifier for the PreviewKeyUp routed event.
    /// - Returns: The identifier for the PreviewKeyUp routed event.
    public static var previewKeyUpEvent: WindowsUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics7.get_PreviewKeyUpEvent())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics4 members

    /// Identifies for the AccessKey dependency property.
    /// - Returns: The identifier for the AccessKey dependency property.
    public static var accessKeyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics4.get_AccessKeyProperty())
        }
    }

    /// Identifies for the AccessKeyScopeOwner dependency property.
    /// - Returns: The identifier for the AccessKeyScopeOwner dependency property.
    public static var accessKeyScopeOwnerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics4.get_AccessKeyScopeOwnerProperty())
        }
    }

    /// Identifies for the ContextFlyout dependency property.
    /// - Returns: The identifier for the ContextFlyout dependency property.
    public static var contextFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics4.get_ContextFlyoutProperty())
        }
    }

    /// Identifies the ExitDisplayModeOnAccessKeyInvoked  dependency property.
    /// - Returns: The identifier for the ExitDisplayModeOnAccessKeyInvoked  dependency property.
    public static var exitDisplayModeOnAccessKeyInvokedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics4.get_ExitDisplayModeOnAccessKeyInvokedProperty())
        }
    }

    /// Identifies for the IsAccessKeyScope dependency property.
    /// - Returns: The identifier for the IsAccessKeyScope dependency property.
    public static var isAccessKeyScopeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics4.get_IsAccessKeyScopeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics2 members

    /// Identifies the CompositeMode dependency property.
    /// - Returns: The identifier for the CompositeMode dependency property.
    public static var compositeModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics2.get_CompositeModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics10 members

    /// Identifies the Shadow dependency property.
    /// - Returns: The identifier for the Shadow dependency property.
    public static var shadowProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics10.get_ShadowProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IUIElementStatics9 members

    /// Identifies the CanBeScrollAnchor dependency property.
    /// - Returns: The identifier for the CanBeScrollAnchor dependency property.
    public static var canBeScrollAnchorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics9.get_CanBeScrollAnchorProperty())
        }
    }

    // MARK: Implementation details

    private var _iuielement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement>? = nil

    internal var _iuielement: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement> {
        get throws {
            try _iuielement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement.self)
            }
        }
    }

    private var _iuielement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement2>? = nil

    internal var _iuielement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement2> {
        get throws {
            try _iuielement2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement2.self)
            }
        }
    }

    private var _iuielement3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement3>? = nil

    internal var _iuielement3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement3> {
        get throws {
            try _iuielement3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement3.self)
            }
        }
    }

    private var _iuielement4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement4>? = nil

    internal var _iuielement4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement4> {
        get throws {
            try _iuielement4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement4.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement4.self)
            }
        }
    }

    private var _iuielement5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement5>? = nil

    internal var _iuielement5: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement5> {
        get throws {
            try _iuielement5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement5.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement5.self)
            }
        }
    }

    private var _iuielement7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement7>? = nil

    internal var _iuielement7: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement7> {
        get throws {
            try _iuielement7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement7.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement7.self)
            }
        }
    }

    private var _iuielement8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement8>? = nil

    internal var _iuielement8: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement8> {
        get throws {
            try _iuielement8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement8.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement8.self)
            }
        }
    }

    private var _iuielement9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement9>? = nil

    internal var _iuielement9: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement9> {
        get throws {
            try _iuielement9_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement9.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement9.self)
            }
        }
    }

    private var _iuielement10_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement10>? = nil

    internal var _iuielement10: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElement10> {
        get throws {
            try _iuielement10_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElement10.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElement10.self)
            }
        }
    }

    private var _iuielementOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides>? = nil

    internal var _iuielementOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides> {
        get throws {
            try _iuielementOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides.self)
            }
        }
    }

    private var _iuielementOverrides7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides7>? = nil

    internal var _iuielementOverrides7: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides7> {
        get throws {
            try _iuielementOverrides7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides7.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides7.self)
            }
        }
    }

    private var _iuielementOverrides8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides8>? = nil

    internal var _iuielementOverrides8: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides8> {
        get throws {
            try _iuielementOverrides8_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides8.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides8.self)
            }
        }
    }

    private var _iuielementOverrides9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides9>? = nil

    internal var _iuielementOverrides9: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides9> {
        get throws {
            try _iuielementOverrides9_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides9.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides9.self)
            }
        }
    }

    private var _ianimationObject_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IAnimationObject>? = nil

    internal var _ianimationObject: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IAnimationObject> {
        get throws {
            try _ianimationObject_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IAnimationObject.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IAnimationObject.self)
            }
        }
    }

    private var _ivisualElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IVisualElement>? = nil

    internal var _ivisualElement: COM.COMInterop<CWinRT.SWRT_WindowsUIComposition_IVisualElement> {
        get throws {
            try _ivisualElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIComposition_IVisualElement.iid).cast(to: CWinRT.SWRT_WindowsUIComposition_IVisualElement.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IUIElement>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iuielement_storage?.release()
        _iuielement2_storage?.release()
        _iuielement3_storage?.release()
        _iuielement4_storage?.release()
        _iuielement5_storage?.release()
        _iuielement7_storage?.release()
        _iuielement8_storage?.release()
        _iuielement9_storage?.release()
        _iuielement10_storage?.release()
        _iuielementOverrides_storage?.release()
        _iuielementOverrides7_storage?.release()
        _iuielementOverrides8_storage?.release()
        _iuielementOverrides9_storage?.release()
        _ianimationObject_storage?.release()
        _ivisualElement_storage?.release()
    }

    private static var _iuielementFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementFactory>? = nil

    internal static var _iuielementFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementFactory> {
        get throws {
            try _iuielementFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementFactory.iid)
            }
        }
    }

    private static var _iuielementStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics6>? = nil

    internal static var _iuielementStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics6> {
        get throws {
            try _iuielementStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics6.iid)
            }
        }
    }

    private static var _iuielementStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics3>? = nil

    internal static var _iuielementStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics3> {
        get throws {
            try _iuielementStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics3.iid)
            }
        }
    }

    private static var _iuielementStatics8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics8>? = nil

    internal static var _iuielementStatics8: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics8> {
        get throws {
            try _iuielementStatics8_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics8.iid)
            }
        }
    }

    private static var _iuielementStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics5>? = nil

    internal static var _iuielementStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics5> {
        get throws {
            try _iuielementStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics5.iid)
            }
        }
    }

    private static var _iuielementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics>? = nil

    internal static var _iuielementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics> {
        get throws {
            try _iuielementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics.iid)
            }
        }
    }

    private static var _iuielementStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics7>? = nil

    internal static var _iuielementStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics7> {
        get throws {
            try _iuielementStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics7.iid)
            }
        }
    }

    private static var _iuielementStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics4>? = nil

    internal static var _iuielementStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics4> {
        get throws {
            try _iuielementStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics4.iid)
            }
        }
    }

    private static var _iuielementStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics2>? = nil

    internal static var _iuielementStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics2> {
        get throws {
            try _iuielementStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics2.iid)
            }
        }
    }

    private static var _iuielementStatics10_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics10>? = nil

    internal static var _iuielementStatics10: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics10> {
        get throws {
            try _iuielementStatics10_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics10.iid)
            }
        }
    }

    private static var _iuielementStatics9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics9>? = nil

    internal static var _iuielementStatics9: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IUIElementStatics9> {
        get throws {
            try _iuielementStatics9_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.UIElement", id: CWinRT.SWRT_WindowsUIXaml_IUIElementStatics9.iid)
            }
        }
    }

    // MARK: Override support

    private var _iuielementOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iuielementOverrides7_outer: COM.COMExportedInterface = .uninitialized
    private var _iuielementOverrides8_outer: COM.COMExportedInterface = .uninitialized
    private var _iuielementOverrides9_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides.iid {
            if !_iuielementOverrides_outer.isInitialized {
                _iuielementOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_UIElementProjection.VirtualTables.iuielementOverrides)
            }
            return _iuielementOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides7.iid {
            if !_iuielementOverrides7_outer.isInitialized {
                _iuielementOverrides7_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_UIElementProjection.VirtualTables.iuielementOverrides7)
            }
            return _iuielementOverrides7_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides8.iid {
            if !_iuielementOverrides8_outer.isInitialized {
                _iuielementOverrides8_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_UIElementProjection.VirtualTables.iuielementOverrides8)
            }
            return _iuielementOverrides8_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXaml_IUIElementOverrides9.iid {
            if !_iuielementOverrides9_outer.isInitialized {
                _iuielementOverrides9_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_UIElementProjection.VirtualTables.iuielementOverrides9)
            }
            return _iuielementOverrides9_outer.unknownPointer.addingRef()
        }
        return nil
    }
}