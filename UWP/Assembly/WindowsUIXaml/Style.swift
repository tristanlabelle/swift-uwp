// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains property setters that can be shared between instances of a type. A Style is usually declared in a resources collection so that it can be shared and used for applying control templates and other styles.
public final class WindowsUIXaml_Style: WindowsRuntime.WinRTImport<WindowsUIXaml_StyleProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXaml_StyleProjection.self))
    }

    // MARK: Windows.UI.Xaml.IStyleFactory members

    public convenience init(_ targetType: WindowsUIXamlInterop_TypeName) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._istyleFactory.createInstance(targetType)))
    }

    // MARK: Windows.UI.Xaml.IStyle members

    /// Gets or sets a defined style that is the basis of the current style.
    /// - Returns: A defined style that is the basis of the current style. The default value is null.
    public var basedOn: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BasedOn())
        }
    }

    /// Gets or sets a defined style that is the basis of the current style.
    /// - Returns: A defined style that is the basis of the current style. The default value is null.
    public func basedOn(_ value: WindowsUIXaml_Style?) throws {
        try _interop.put_BasedOn(value)
    }

    /// Gets a value that indicates whether the style is read-only and cannot be changed.
    /// - Returns: **true** if the style is read-only; otherwise, **false**.
    public var isSealed: Swift.Bool {
        get throws {
            try _interop.get_IsSealed()
        }
    }

    /// Gets a collection of Setter objects.
    /// - Returns: A collection of Setter objects. The default is an empty collection.
    public var setters: WindowsUIXaml_SetterBaseCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Setters())
        }
    }

    /// Gets or sets the type for which the style is intended. TargetType can be used to declare an implicit style resource if there's no resource key specified.
    /// - Returns: The type of object to which the style is applied. This value is usually set in XAML, not code. See Remarks.
    public var targetType: WindowsUIXamlInterop_TypeName {
        get throws {
            try _interop.get_TargetType()
        }
    }

    /// Gets or sets the type for which the style is intended. TargetType can be used to declare an implicit style resource if there's no resource key specified.
    /// - Returns: The type of object to which the style is applied. This value is usually set in XAML, not code. See Remarks.
    public func targetType(_ value: WindowsUIXamlInterop_TypeName) throws {
        try _interop.put_TargetType(value)
    }

    /// Locks the style so that the TargetType property or any Setter in the Setters collection cannot be changed.
    public func seal() throws {
        try _interop.seal()
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Style", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _istyleFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IStyleFactory>? = nil

    internal static var _istyleFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IStyleFactory> {
        get throws {
            try _istyleFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Style", id: CWinRT.SWRT_WindowsUIXaml_IStyleFactory.iid)
            }
        }
    }
}