// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an application window.
public final class WindowsUIXaml_Window: WindowsRuntime.WinRTImport<WindowsUIXaml_WindowProjection> {
    // MARK: Windows.UI.Xaml.IWindow members

    /// Gets a Rect value containing the height and width of the application window in units of effective (view) pixels.
    /// - Returns: A value that reports the height and width of the application window.
    public var bounds: WindowsFoundation_Rect {
        get throws {
            try _interop.get_Bounds()
        }
    }

    /// Gets or sets the visual root of an application window.
    /// - Returns: The visual root of an application window.
    public var content: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets or sets the visual root of an application window.
    /// - Returns: The visual root of an application window.
    public func content(_ value: WindowsUIXaml_UIElement?) throws {
        try _interop.put_Content(value)
    }

    /// Gets an internal *core* object for the application window.
    /// - Returns: A **CoreWindow** object.
    public var coreWindow: WindowsUICore_CoreWindow {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CoreWindow())
        }
    }

    /// Gets the CoreDispatcher object for the Window, which is generally the CoreDispatcher for the UI thread.
    /// - Returns: An object that references the UI thread for the Window.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Dispatcher())
        }
    }

    /// Gets a value that reports whether the window is visible.
    /// - Returns: **true** if the window is visible; **false** if the window is not visible.
    public var visible: Swift.Bool {
        get throws {
            try _interop.get_Visible()
        }
    }

    /// Occurs when the window has successfully been activated.
    public func activated(adding handler: WindowsUIXaml_WindowActivatedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Activated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: activated)
    }

    public func activated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Activated(token)
    }

    /// Occurs when the window has closed.
    public func closed(adding handler: WindowsUIXaml_WindowClosedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Occurs when the app window has first rendered or has changed its rendering size.
    public func sizeChanged(adding handler: WindowsUIXaml_WindowSizeChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SizeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sizeChanged)
    }

    public func sizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SizeChanged(token)
    }

    /// Occurs when the value of the Visible property changes.
    public func visibilityChanged(adding handler: WindowsUIXaml_WindowVisibilityChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VisibilityChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: visibilityChanged)
    }

    public func visibilityChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VisibilityChanged(token)
    }

    /// Attempts to activate the application window by bringing it to the foreground and setting the input focus to it.
    public func activate() throws {
        try _interop.activate()
    }

    /// Closes the application window.
    public func close() throws {
        try _interop.close()
    }

    // MARK: Windows.UI.Xaml.IWindow2 members

    /// Makes a XAML element interact with the system as if itâ€™s the title bar.
    /// - Parameter value: Custom XAML content that should act as the title bar. To use multiple objects, wrap them in a container element such as one derived from Panel.
    public func setTitleBar(_ value: WindowsUIXaml_UIElement?) throws {
        try _iwindow2.setTitleBar(value)
    }

    // MARK: Windows.UI.Xaml.IWindow3 members

    /// Gets the Compositor for this window.
    /// - Returns: The Compositor for this window.
    public var compositor: WindowsUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_iwindow3.get_Compositor())
        }
    }

    // MARK: Windows.UI.Xaml.IWindow4 members

    /// Gets the context identifier for the window.
    /// - Returns: The context identifier for the window.
    public var uicontext: WindowsUI_UIContext {
        get throws {
            try COM.NullResult.unwrap(_iwindow4.get_UIContext())
        }
    }

    // MARK: Windows.UI.Xaml.IWindowStatics members

    /// Gets the currently activated window for an application.
    /// - Returns: The currently activated window.
    public static var current: WindowsUIXaml_Window {
        get throws {
            try COM.NullResult.unwrap(_iwindowStatics.get_Current())
        }
    }

    // MARK: Implementation details

    private var _iwindow2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow2>? = nil

    internal var _iwindow2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow2> {
        get throws {
            try _iwindow2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IWindow2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IWindow2.self)
            }
        }
    }

    private var _iwindow3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow3>? = nil

    internal var _iwindow3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow3> {
        get throws {
            try _iwindow3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IWindow3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IWindow3.self)
            }
        }
    }

    private var _iwindow4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow4>? = nil

    internal var _iwindow4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindow4> {
        get throws {
            try _iwindow4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IWindow4.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IWindow4.self)
            }
        }
    }

    deinit {
        _iwindow2_storage?.release()
        _iwindow3_storage?.release()
        _iwindow4_storage?.release()
    }

    private static var _iwindowStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindowStatics>? = nil

    internal static var _iwindowStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IWindowStatics> {
        get throws {
            try _iwindowStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Window", id: CWinRT.SWRT_WindowsUIXaml_IWindowStatics.iid)
            }
        }
    }
}