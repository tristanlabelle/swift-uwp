// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines constants that identify text attributes of a Microsoft UI Automation text range.
public struct WindowsUIXaml_AutomationTextAttributesEnum: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Identifies the **AnimationStyle** text attribute, which specifies the type of animation applied to the text. This attribute is specified as a value of the AutomationAnimationStyle enumeration.
    public static let animationStyleAttribute = Self(rawValue: 40000)

    /// Identifies the **BackgroundColor** text attribute, which specifies the background color of the text.
    public static let backgroundColorAttribute = Self(rawValue: 40001)

    /// Identifies the **BulletStyle** text attribute, which specifies the style of bullets used in the text range. This attribute is specified as a value of the AutomationBulletStyle enumeration.
    public static let bulletStyleAttribute = Self(rawValue: 40002)

    /// Identifies the **CapStyle** text attribute, which specifies the capitalization style for the text.
    public static let capStyleAttribute = Self(rawValue: 40003)

    /// Identifies the **Culture** text attribute, which specifies the locale of the text by locale identifier (LCID).
    public static let cultureAttribute = Self(rawValue: 40004)

    /// Identifies the **FontName** text attribute, which specifies the name of the font. Examples: "Arial Black"; "Arial Narrow". The font name string is not localized.
    public static let fontNameAttribute = Self(rawValue: 40005)

    /// Identifies the **FontSize** text attribute, which specifies the point size of the font.
    public static let fontSizeAttribute = Self(rawValue: 40006)

    /// Identifies the **FontWeight** text attribute, which specifies the relative stroke, thickness, or boldness of the font.
    public static let fontWeightAttribute = Self(rawValue: 40007)

    /// Identifies the **ForegroundColor** text attribute, which specifies the foreground color of the text.
    public static let foregroundColorAttribute = Self(rawValue: 40008)

    /// Identifies the **HorizontalTextAlignment** text attribute, which specifies how the text is aligned horizontally.
    public static let horizontalTextAlignmentAttribute = Self(rawValue: 40009)

    /// Identifies the **IndentationFirstLine** text attribute, which specifies how far, in points, to indent the first line of a paragraph.
    public static let indentationFirstLineAttribute = Self(rawValue: 40010)

    /// Identifies the **IndentationLeading** text attribute, which specifies the leading indentation, in points.
    public static let indentationLeadingAttribute = Self(rawValue: 40011)

    /// Identifies the **IndentationTrailing** text attribute, which specifies the trailing indentation, in points.
    public static let indentationTrailingAttribute = Self(rawValue: 40012)

    /// Identifies the **IsHidden** text attribute, which indicates whether the text is hidden (**true**) or visible (**false**).
    public static let isHiddenAttribute = Self(rawValue: 40013)

    /// Identifies the **IsItalic** text attribute, which indicates whether the text is italic (**true**) or not (**false**).
    public static let isItalicAttribute = Self(rawValue: 40014)

    /// Identifies the **IsReadOnly** text attribute, which indicates whether the text is read-only (**true**) or can be modified (**false**).
    public static let isReadOnlyAttribute = Self(rawValue: 40015)

    /// Identifies the **IsSubscript** text attribute, which indicates whether the text is subscript (**true**) or not (**false**).
    public static let isSubscriptAttribute = Self(rawValue: 40016)

    /// Identifies the **IsSuperscript** text attribute, which indicates whether the text is subscript (**true**) or not (**false**).
    public static let isSuperscriptAttribute = Self(rawValue: 40017)

    /// Identifies the **MarginBottom** text attribute, which specifies the size, in points, of the bottom margin applied to the page associated with the text range.
    public static let marginBottomAttribute = Self(rawValue: 40018)

    /// Identifies the **MarginLeading** text attribute, which specifies the size, in points, of the leading margin applied to the page associated with the text range.
    public static let marginLeadingAttribute = Self(rawValue: 40019)

    /// Identifies the **MarginTop** text attribute, which specifies the size, in points, of the top margin applied to the page associated with the text range.
    public static let marginTopAttribute = Self(rawValue: 40020)

    /// Identifies the **MarginTrailing** text attribute, which specifies the size, in points, of the trailing margin applied to the page associated with the text range.
    public static let marginTrailingAttribute = Self(rawValue: 40021)

    /// Identifies the **OutlineStyles** text attribute, which specifies the outline style of the text. This attribute is specified as a value of the AutomationOutlineStyles enumeration.
    public static let outlineStylesAttribute = Self(rawValue: 40022)

    /// Identifies the **OverlineColor** text attribute, which specifies the color of the overline text decoration.
    public static let overlineColorAttribute = Self(rawValue: 40023)

    /// Identifies the **OverlineStyle** text attribute, which specifies the style of the overline text decoration. This attribute is specified as a value of the AutomationTextDecorationLineStyle enumeration.
    public static let overlineStyleAttribute = Self(rawValue: 40024)

    /// Identifies the **StrikethroughColor** text attribute, which specifies the color of the strikethrough text decoration.
    public static let strikethroughColorAttribute = Self(rawValue: 40025)

    /// Identifies the **StrikethroughStyle** text attribute, which specifies the style of the strikethrough text decoration. This attribute is specified as a value of the AutomationTextDecorationLineStyle enumeration.
    public static let strikethroughStyleAttribute = Self(rawValue: 40026)

    /// Identifies the **Tabs** text attribute, which is an array specifying the tab stops for the text range. Each array element specifies a distance, in points, from the leading margin.
    public static let tabsAttribute = Self(rawValue: 40027)

    /// Identifies the **TextFlowDirections** text attribute, which specifies the direction of text flow. This attribute is specified as a combination of values of the AutomationFlowDirections enumeration.
    public static let textFlowDirectionsAttribute = Self(rawValue: 40028)

    /// Identifies the **UnderlineColor** text attribute, which specifies the color of the underline text decoration.
    public static let underlineColorAttribute = Self(rawValue: 40029)

    /// Identifies the **UnderlineStyle** text attribute, which specifies the style of the underline text decoration. This attribute is specified as a value of the AutomationTextDecorationLineStyle enumeration.
    public static let underlineStyleAttribute = Self(rawValue: 40030)

    /// Identifies the **AnnotationTypes** text attribute, which maintains a list of annotation type identifiers for a range of text. This attribute is specified as a value of the AnnotationType enumeration.
    public static let annotationTypesAttribute = Self(rawValue: 40031)

    /// Identifies the **AnnotationObjects** text attribute.
    public static let annotationObjectsAttribute = Self(rawValue: 40032)

    /// Identifies the **StyleName** text attribute, which identifies the localized name of the text style in use for a text range.
    public static let styleNameAttribute = Self(rawValue: 40033)

    /// Identifies the **StyleId** text attribute, which indicates the text styles in use for a text range. This attribute is specified as a value of the AutomationStyleId enumeration.
    public static let styleIdAttribute = Self(rawValue: 40034)

    /// Identifies the **Link** text attribute, which contains the ITextRangeProvider interface of the text range that is the target of an internal link in a document.
    public static let linkAttribute = Self(rawValue: 40035)

    /// Identifies the **IsActive** text attribute, which indicates whether the control that contains the text range has the keyboard focus (**true**) or not (**false**).
    public static let isActiveAttribute = Self(rawValue: 40036)

    /// Identifies the **SelectionActiveEnd** text attribute, which indicates the location of the caret relative to a text range that represents the currently selected text. This attribute is specified as a value from the AutomationActiveEnd enumeration.
    public static let selectionActiveEndAttribute = Self(rawValue: 40037)

    /// Identifies the **CaretPosition** text attribute, which indicates whether the caret is at the beginning or the end of a line of text in the text range. This attribute is specified as a value of the AutomationCaretPosition enumeration.
    public static let caretPositionAttribute = Self(rawValue: 40038)

    /// Identifies the **CaretBidiMode** text attribute, which indicates the direction of text flow in the text range. This attribute is specified as a value of the AutomationCaretBidiMode enumeration.
    public static let caretBidiModeAttribute = Self(rawValue: 40039)
}