// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a base element class for Windows Runtime UI objects. FrameworkElement defines common API that support UI interaction and the automatic layout system. FrameworkElement Â also defines API related to data binding, defining and examining the object tree, and tracking object lifetime.
open class WindowsUIXaml_FrameworkElement: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IFrameworkElementFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_FrameworkElement.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iframeworkElementFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement members

    /// Gets the rendered height of a FrameworkElement. See Remarks.
    /// - Returns: The height, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and hasn't yet been involved in a layout pass that renders the UI.
    public var actualHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_ActualHeight()
        }
    }

    /// Gets the rendered width of a FrameworkElement. See Remarks.
    /// - Returns: The width, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and hasn't yet been involved in a layout pass that renders the UI.
    public var actualWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_ActualWidth()
        }
    }

    /// Gets a Uniform Resource Identifier (URI) that represents the base Uniform Resource Identifier (URI) for an XAML-constructed object at XAML load time. This property is useful for Uniform Resource Identifier (URI) resolution at run time.
    /// - Returns: The base Uniform Resource Identifier (URI) for an object at XAML load time.
    public var baseUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_BaseUri())
        }
    }

    /// Gets or sets the data context for a FrameworkElement. A common use of a data context is when a **FrameworkElement** uses the {Binding} markup extension and participates in data binding.
    /// - Returns: The object to use as data context.
    public var dataContext: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_DataContext())
        }
    }

    /// Gets or sets the data context for a FrameworkElement. A common use of a data context is when a **FrameworkElement** uses the {Binding} markup extension and participates in data binding.
    /// - Returns: The object to use as data context.
    public func dataContext(_ value: WindowsRuntime.IInspectable?) throws {
        try _iframeworkElement.put_DataContext(value)
    }

    /// Gets or sets the direction in which text and other UI elements flow within any parent element that controls their layout. This property can be set to either **LeftToRight** or **RightToLeft**. Setting FlowDirection to **RightToLeft** on any element sets the alignment to the right, the reading order to right-to-left and the layout of the control to flow from right to left.
    /// - Returns: The direction that text and other UI elements flow within their parent element, as a value of the enumeration. The default value is LeftToRight.
    public var flowDirection: WindowsUIXaml_FlowDirection {
        get throws {
            try _iframeworkElement.get_FlowDirection()
        }
    }

    /// Gets or sets the direction in which text and other UI elements flow within any parent element that controls their layout. This property can be set to either **LeftToRight** or **RightToLeft**. Setting FlowDirection to **RightToLeft** on any element sets the alignment to the right, the reading order to right-to-left and the layout of the control to flow from right to left.
    /// - Returns: The direction that text and other UI elements flow within their parent element, as a value of the enumeration. The default value is LeftToRight.
    public func flowDirection(_ value: WindowsUIXaml_FlowDirection) throws {
        try _iframeworkElement.put_FlowDirection(value)
    }

    /// Gets or sets the suggested height of a FrameworkElement.
    /// - Returns: The height, in pixels, of the object. The default is NaN. Except for the special NaN value, this value must be equal to or greater than 0.
    public var height: Swift.Double {
        get throws {
            try _iframeworkElement.get_Height()
        }
    }

    /// Gets or sets the suggested height of a FrameworkElement.
    /// - Returns: The height, in pixels, of the object. The default is NaN. Except for the special NaN value, this value must be equal to or greater than 0.
    public func height(_ value: Swift.Double) throws {
        try _iframeworkElement.put_Height(value)
    }

    /// Gets or sets the horizontal alignment characteristics that are applied to a FrameworkElement when it is composed in a layout parent, such as a panel or items control.
    /// - Returns: A horizontal alignment setting, as a value of the enumeration. The default is **Stretch**.
    public var horizontalAlignment: WindowsUIXaml_HorizontalAlignment {
        get throws {
            try _iframeworkElement.get_HorizontalAlignment()
        }
    }

    /// Gets or sets the horizontal alignment characteristics that are applied to a FrameworkElement when it is composed in a layout parent, such as a panel or items control.
    /// - Returns: A horizontal alignment setting, as a value of the enumeration. The default is **Stretch**.
    public func horizontalAlignment(_ value: WindowsUIXaml_HorizontalAlignment) throws {
        try _iframeworkElement.put_HorizontalAlignment(value)
    }

    /// Gets or sets localization/globalization language information that applies to a FrameworkElement, and also to all child elements of the current FrameworkElement in the object representation and in UI.
    /// - Returns: A string specifying language and culture that follows the Internet Engineering Task Force (IETF)  BCP 47 standards. For example, U.S. English is "en-US".
    public var language: Swift.String {
        get throws {
            try _iframeworkElement.get_Language()
        }
    }

    /// Gets or sets localization/globalization language information that applies to a FrameworkElement, and also to all child elements of the current FrameworkElement in the object representation and in UI.
    /// - Returns: A string specifying language and culture that follows the Internet Engineering Task Force (IETF)  BCP 47 standards. For example, U.S. English is "en-US".
    public func language(_ value: Swift.String) throws {
        try _iframeworkElement.put_Language(value)
    }

    /// Gets or sets the outer margin of a FrameworkElement.
    /// - Returns: Provides margin values for the object. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public var margin: WindowsUIXaml_Thickness {
        get throws {
            try _iframeworkElement.get_Margin()
        }
    }

    /// Gets or sets the outer margin of a FrameworkElement.
    /// - Returns: Provides margin values for the object. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public func margin(_ value: WindowsUIXaml_Thickness) throws {
        try _iframeworkElement.put_Margin(value)
    }

    /// Gets or sets the maximum height constraint of a FrameworkElement.
    /// - Returns: The maximum height of the object, in pixels. The default value is PositiveInfinity. This value can be any value equal to or greater than 0. PositiveInfinity is also valid.
    public var maxHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_MaxHeight()
        }
    }

    /// Gets or sets the maximum height constraint of a FrameworkElement.
    /// - Returns: The maximum height of the object, in pixels. The default value is PositiveInfinity. This value can be any value equal to or greater than 0. PositiveInfinity is also valid.
    public func maxHeight(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MaxHeight(value)
    }

    /// Gets or sets the maximum width constraint of a FrameworkElement.
    /// - Returns: The maximum width of the object, in pixels. The default is PositiveInfinity. This value can be any value equal to or greater than 0. PositiveInfinity is also valid.
    public var maxWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_MaxWidth()
        }
    }

    /// Gets or sets the maximum width constraint of a FrameworkElement.
    /// - Returns: The maximum width of the object, in pixels. The default is PositiveInfinity. This value can be any value equal to or greater than 0. PositiveInfinity is also valid.
    public func maxWidth(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MaxWidth(value)
    }

    /// Gets or sets the minimum height constraint of a FrameworkElement.
    /// - Returns: The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public var minHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_MinHeight()
        }
    }

    /// Gets or sets the minimum height constraint of a FrameworkElement.
    /// - Returns: The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public func minHeight(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MinHeight(value)
    }

    /// Gets or sets the minimum width constraint of a FrameworkElement.
    /// - Returns: The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public var minWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_MinWidth()
        }
    }

    /// Gets or sets the minimum width constraint of a FrameworkElement.
    /// - Returns: The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public func minWidth(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MinWidth(value)
    }

    /// Gets or sets the identifying name of the object. When a XAML processor creates the object tree from XAML markup, run-time code can refer to the XAML-declared object by this name.
    /// - Returns: The name of the object, which must be a string that is valid in the XamlName grammar (see table in x:Name attribute reference). The default is an empty string.
    public var name: Swift.String {
        get throws {
            try _iframeworkElement.get_Name()
        }
    }

    /// Gets or sets the identifying name of the object. When a XAML processor creates the object tree from XAML markup, run-time code can refer to the XAML-declared object by this name.
    /// - Returns: The name of the object, which must be a string that is valid in the XamlName grammar (see table in x:Name attribute reference). The default is an empty string.
    public func name(_ value: Swift.String) throws {
        try _iframeworkElement.put_Name(value)
    }

    /// Gets the parent object of this FrameworkElement in the object tree.
    /// - Returns: The parent object of this object in the object tree.
    public var parent: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Parent())
        }
    }

    /// Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of a `frameworkElement.Resources` property element, through XAML implicit collection syntax.
    /// - Returns: The current locally defined dictionary of resources, where each resource can be accessed by its key.
    public var resources: WindowsUIXaml_ResourceDictionary {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Resources())
        }
    }

    /// Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of a `frameworkElement.Resources` property element, through XAML implicit collection syntax.
    /// - Returns: The current locally defined dictionary of resources, where each resource can be accessed by its key.
    public func resources(_ value: WindowsUIXaml_ResourceDictionary?) throws {
        try _iframeworkElement.put_Resources(value)
    }

    /// Gets or sets an instance Style that is applied for this object during layout and rendering.
    /// - Returns: The applied style for the object, if present; otherwise, **null**. The default for a default-constructed FrameworkElement is **null**.
    public var style: WindowsUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Style())
        }
    }

    /// Gets or sets an instance Style that is applied for this object during layout and rendering.
    /// - Returns: The applied style for the object, if present; otherwise, **null**. The default for a default-constructed FrameworkElement is **null**.
    public func style(_ value: WindowsUIXaml_Style?) throws {
        try _iframeworkElement.put_Style(value)
    }

    /// Gets or sets an arbitrary object value that can be used to store custom information about this object.
    /// - Returns: The intended arbitrary object value. This property has no default value.
    public var tag: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Tag())
        }
    }

    /// Gets or sets an arbitrary object value that can be used to store custom information about this object.
    /// - Returns: The intended arbitrary object value. This property has no default value.
    public func tag(_ value: WindowsRuntime.IInspectable?) throws {
        try _iframeworkElement.put_Tag(value)
    }

    /// Gets the collection of triggers for animations that are defined for a FrameworkElement. Not commonly used. See Remarks.
    /// - Returns: The collection of triggers for animations that are defined for this object.
    public var triggers: WindowsUIXaml_TriggerCollection {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Triggers())
        }
    }

    /// Gets or sets the vertical alignment characteristics that are applied to a FrameworkElement when it is composed in a parent object such as a panel or items control.
    /// - Returns: A vertical alignment setting, as a value of the enumeration. The default is **Stretch**.
    public var verticalAlignment: WindowsUIXaml_VerticalAlignment {
        get throws {
            try _iframeworkElement.get_VerticalAlignment()
        }
    }

    /// Gets or sets the vertical alignment characteristics that are applied to a FrameworkElement when it is composed in a parent object such as a panel or items control.
    /// - Returns: A vertical alignment setting, as a value of the enumeration. The default is **Stretch**.
    public func verticalAlignment(_ value: WindowsUIXaml_VerticalAlignment) throws {
        try _iframeworkElement.put_VerticalAlignment(value)
    }

    /// Gets or sets the width of a FrameworkElement.
    /// - Returns: The width of the object, in pixels. The default is NaN. Except for the special NaN value, this value must be equal to or greater than 0. 
    public var width: Swift.Double {
        get throws {
            try _iframeworkElement.get_Width()
        }
    }

    /// Gets or sets the width of a FrameworkElement.
    /// - Returns: The width of the object, in pixels. The default is NaN. Except for the special NaN value, this value must be equal to or greater than 0. 
    public func width(_ value: Swift.Double) throws {
        try _iframeworkElement.put_Width(value)
    }

    /// Occurs when the layout of the visual tree changes, due to layout-relevant properties changing value or some other action that refreshes the layout.
    public func layoutUpdated(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_LayoutUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: layoutUpdated)
    }

    public func layoutUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_LayoutUpdated(token)
    }

    /// Occurs when a FrameworkElement has been constructed and added to the object tree, and is ready for interaction.
    public func loaded(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_Loaded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: loaded)
    }

    public func loaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_Loaded(token)
    }

    /// Occurs when either the ActualHeight or the ActualWidth property changes value on a FrameworkElement.
    public func sizeChanged(adding handler: WindowsUIXaml_SizeChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_SizeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sizeChanged)
    }

    public func sizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_SizeChanged(token)
    }

    /// Occurs when this object is no longer connected to the main object tree.
    public func unloaded(adding handler: WindowsUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_Unloaded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: unloaded)
    }

    public func unloaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_Unloaded(token)
    }

    /// Retrieves an object that has the specified identifier name.
    /// - Parameter name: The name of the requested object.
    /// - Returns: The requested object. This can be null if no matching object was found in the current XAML namescope.
    public func findName(_ name: Swift.String) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iframeworkElement.findName(name))
    }

    /// Attaches a binding to a FrameworkElement, using the provided binding object.
    /// - Parameter dp: The dependency property identifier of the property that is data bound.
    /// - Parameter binding: The binding to use for the property.
    public func setBinding(_ dp: WindowsUIXaml_DependencyProperty?, _ binding: WindowsUIXamlData_BindingBase?) throws {
        try _iframeworkElement.setBinding(dp, binding)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement2 members

    /// Gets or sets the UI theme that is used by the UIElement (and its child elements) for resource determination. The UI theme you specify with RequestedTheme can override the app-level RequestedTheme.
    /// - Returns: A value of the enumeration, for example **Light**.
    public var requestedTheme: WindowsUIXaml_ElementTheme {
        get throws {
            try _iframeworkElement2.get_RequestedTheme()
        }
    }

    /// Gets or sets the UI theme that is used by the UIElement (and its child elements) for resource determination. The UI theme you specify with RequestedTheme can override the app-level RequestedTheme.
    /// - Returns: A value of the enumeration, for example **Light**.
    public func requestedTheme(_ value: WindowsUIXaml_ElementTheme) throws {
        try _iframeworkElement2.put_RequestedTheme(value)
    }

    /// Occurs when the value of the FrameworkElement.DataContext property changes.
    public func dataContextChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_FrameworkElement?, WindowsUIXaml_DataContextChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement2.add_DataContextChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dataContextChanged)
    }

    public func dataContextChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement2.remove_DataContextChanged(token)
    }

    /// Returns the BindingExpression that represents the binding on the specified property.
    /// - Parameter dp: The identifier for the target dependency property to get the binding from.
    /// - Returns: A BindingExpression if the target property has an active binding on this object; otherwise, returns **null**.
    public func getBindingExpression(_ dp: WindowsUIXaml_DependencyProperty?) throws -> WindowsUIXamlData_BindingExpression {
        try COM.NullResult.unwrap(_iframeworkElement2.getBindingExpression(dp))
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement3 members

    /// Occurs when a FrameworkElement begins to load.
    public func loading(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement3.add_Loading(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: loading)
    }

    public func loading(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement3.remove_Loading(token)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement4 members

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public var allowFocusOnInteraction: Swift.Bool {
        get throws {
            try _iframeworkElement4.get_AllowFocusOnInteraction()
        }
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public func allowFocusOnInteraction(_ value: Swift.Bool) throws {
        try _iframeworkElement4.put_AllowFocusOnInteraction(value)
    }

    /// Gets or sets whether a disabled control can receive focus.
    /// - Returns: **true** if a disabled control can receive focus; otherwise, **false**.
    public var allowFocusWhenDisabled: Swift.Bool {
        get throws {
            try _iframeworkElement4.get_AllowFocusWhenDisabled()
        }
    }

    /// Gets or sets whether a disabled control can receive focus.
    /// - Returns: **true** if a disabled control can receive focus; otherwise, **false**.
    public func allowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try _iframeworkElement4.put_AllowFocusWhenDisabled(value)
    }

    /// Gets or sets the outer margin of the focus visual for a FrameworkElement.
    /// - Returns: Provides margin values for the focus visual. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public var focusVisualMargin: WindowsUIXaml_Thickness {
        get throws {
            try _iframeworkElement4.get_FocusVisualMargin()
        }
    }

    /// Gets or sets the outer margin of the focus visual for a FrameworkElement.
    /// - Returns: Provides margin values for the focus visual. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public func focusVisualMargin(_ value: WindowsUIXaml_Thickness) throws {
        try _iframeworkElement4.put_FocusVisualMargin(value)
    }

    /// Gets or sets the brush used to draw the outer border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The brush used to draw the outer border of a HighVisibility focus visual.
    public var focusVisualPrimaryBrush: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement4.get_FocusVisualPrimaryBrush())
        }
    }

    /// Gets or sets the brush used to draw the outer border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The brush used to draw the outer border of a HighVisibility focus visual.
    public func focusVisualPrimaryBrush(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _iframeworkElement4.put_FocusVisualPrimaryBrush(value)
    }

    /// Gets or sets the thickness of the outer border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The thickness of the outer border of a HighVisibility focus visual. The default value is 2.
    public var focusVisualPrimaryThickness: WindowsUIXaml_Thickness {
        get throws {
            try _iframeworkElement4.get_FocusVisualPrimaryThickness()
        }
    }

    /// Gets or sets the thickness of the outer border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The thickness of the outer border of a HighVisibility focus visual. The default value is 2.
    public func focusVisualPrimaryThickness(_ value: WindowsUIXaml_Thickness) throws {
        try _iframeworkElement4.put_FocusVisualPrimaryThickness(value)
    }

    /// Gets or sets the brush used to draw the inner border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The brush used to draw the inner border of a HighVisibility focus visual.
    public var focusVisualSecondaryBrush: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement4.get_FocusVisualSecondaryBrush())
        }
    }

    /// Gets or sets the brush used to draw the inner border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The brush used to draw the inner border of a HighVisibility focus visual.
    public func focusVisualSecondaryBrush(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _iframeworkElement4.put_FocusVisualSecondaryBrush(value)
    }

    /// Gets or sets the thickness of the inner border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The thickness of the inner border of a HighVisibility focus visual. The default value is 1.
    public var focusVisualSecondaryThickness: WindowsUIXaml_Thickness {
        get throws {
            try _iframeworkElement4.get_FocusVisualSecondaryThickness()
        }
    }

    /// Gets or sets the thickness of the inner border of a HighVisibility focus visual for a FrameworkElement.
    /// - Returns: The thickness of the inner border of a HighVisibility focus visual. The default value is 1.
    public func focusVisualSecondaryThickness(_ value: WindowsUIXaml_Thickness) throws {
        try _iframeworkElement4.put_FocusVisualSecondaryThickness(value)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement6 members

    /// Gets the UI theme that is currently used by the element, which might be different than the RequestedTheme.
    /// - Returns: A value of the enumeration, for example **Light**.
    public var actualTheme: WindowsUIXaml_ElementTheme {
        get throws {
            try _iframeworkElement6.get_ActualTheme()
        }
    }

    /// Occurs when the ActualTheme property value has changed.
    public func actualThemeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement6.add_ActualThemeChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: actualThemeChanged)
    }

    public func actualThemeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement6.remove_ActualThemeChanged(token)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElement7 members

    /// Gets a value that indicates whether the element has been added to the element tree and is ready for interaction.
    /// - Returns: **true** if the element has been added to the element tree and is ready for interaction; otherwise, **false**.
    public var isLoaded: Swift.Bool {
        get throws {
            try _iframeworkElement7.get_IsLoaded()
        }
    }

    /// Occurs when the FrameworkElement 's *effective viewport* changes.
    public func effectiveViewportChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXaml_FrameworkElement?, WindowsUIXaml_EffectiveViewportChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement7.add_EffectiveViewportChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: effectiveViewportChanged)
    }

    public func effectiveViewportChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement7.remove_EffectiveViewportChanged(token)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementProtected7 members

    /// Invalidates the viewport state for a UIElement that is used to calculate the *effective viewport*.
    public func invalidateViewport() throws {
        try _iframeworkElementProtected7.invalidateViewport()
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementOverrides members

    /// Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.
    /// - Parameter availableSize: The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.
    /// - Returns: The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.
    open func measureOverride(_ availableSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        try _iframeworkElementOverrides.measureOverride(availableSize)
    }

    /// Provides the behavior for the "Arrange" pass of layout. Classes can override this method to define their own "Arrange" pass behavior.
    /// - Parameter finalSize: The final area within the parent that this object should use to arrange itself and its children.
    /// - Returns: The actual size that is used after the element is arranged in layout.
    open func arrangeOverride(_ finalSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        try _iframeworkElementOverrides.arrangeOverride(finalSize)
    }

    /// Invoked whenever application code or internal processes (such as a rebuilding layout pass) call ApplyTemplate. In simplest terms, this means the method is called just before a UI element displays in your app. Override this method to influence the default post-template logic of a class.
    open func onApplyTemplate() throws {
        try _iframeworkElementOverrides.onApplyTemplate()
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementOverrides2 members

    /// When implemented in a derived class, enables per-state construction of a visual tree for a control template in code, rather than by loading XAML for all states at control startup.
    /// - Parameter stateName: The state to transition to.
    /// - Parameter useTransitions: **true** to use a VisualTransition to transition between states. **false** to skip using transitions and go directly to the requested state. The default is **false**.
    /// - Returns: **true** if the control successfully transitions to the new state, or was already using that state; otherwise, **false**.
    open func goToElementStateCore(_ stateName: Swift.String, _ useTransitions: Swift.Bool) throws -> Swift.Bool {
        try _iframeworkElementOverrides2.goToElementStateCore(stateName, useTransitions)
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementStatics members

    /// Identifies the ActualHeight Â dependency property. See Remarks.
    /// - Returns: The identifier for the ActualHeight Â dependency property.
    public static var actualHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_ActualHeightProperty())
        }
    }

    /// Identifies the ActualWidth Â dependency property. See Remarks.
    /// - Returns: The identifier for the ActualWidth Â dependency property.
    public static var actualWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_ActualWidthProperty())
        }
    }

    /// Identifies the DataContext Â dependency property.
    /// - Returns: The DataContext Â dependency property identifier.
    public static var dataContextProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_DataContextProperty())
        }
    }

    /// Identifies the FlowDirection Â dependency property.
    /// - Returns: The FlowDirection Â dependency property identifier.
    public static var flowDirectionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FlowDirectionProperty())
        }
    }

    /// Identifies the Height Â dependency property.
    /// - Returns: The identifier for the Height Â dependency property.
    public static var heightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_HeightProperty())
        }
    }

    /// Identifies the HorizontalAlignment Â dependency property.
    /// - Returns: The HorizontalAlignment Â dependency property identifier.
    public static var horizontalAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_HorizontalAlignmentProperty())
        }
    }

    /// Identifies the Language dependency property.
    /// - Returns: The identifier for the Language dependency property.
    public static var languageProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_LanguageProperty())
        }
    }

    /// Identifies the Margin Â dependency property.
    /// - Returns: The Margin Â dependency property identifier.
    public static var marginProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MarginProperty())
        }
    }

    /// Identifies the MaxHeight Â dependency property.
    /// - Returns: The identifier for the MaxHeight Â dependency property.
    public static var maxHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MaxHeightProperty())
        }
    }

    /// Identifies the MaxWidth Â dependency property.
    /// - Returns: The identifier for the MaxWidth Â dependency property.
    public static var maxWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MaxWidthProperty())
        }
    }

    /// Identifies the MinHeight Â dependency property.
    /// - Returns: The identifier for the MinHeight Â dependency property.
    public static var minHeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MinHeightProperty())
        }
    }

    /// Identifies the MinWidth Â dependency property.
    /// - Returns: The identifier for the MinWidth Â dependency property.
    public static var minWidthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MinWidthProperty())
        }
    }

    /// Identifies the Name Â dependency property.
    /// - Returns: The identifier for the Name Â dependency property.
    public static var nameProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_NameProperty())
        }
    }

    /// Identifies the Style dependency property.
    /// - Returns: The identifier for the Style dependency property.
    public static var styleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_StyleProperty())
        }
    }

    /// Identifies the Tag Â dependency property.
    /// - Returns: The identifier for the Tag Â dependency property.
    public static var tagProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_TagProperty())
        }
    }

    /// Identifies the VerticalAlignment Â dependency property.
    /// - Returns: The VerticalAlignment Â dependency property identifier.
    public static var verticalAlignmentProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_VerticalAlignmentProperty())
        }
    }

    /// Identifies the Width Â dependency property.
    /// - Returns: The identifier for the Width Â dependency property.
    public static var widthProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_WidthProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementStatics2 members

    /// Identifies the RequestedTheme dependency property.
    /// - Returns: The identifier for the RequestedTheme dependency property.
    public static var requestedThemeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics2.get_RequestedThemeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementStatics6 members

    /// Identifies the ActualThemeÂ dependency property.
    /// - Returns: The identifier for the ActualThemeÂ dependency property.
    public static var actualThemeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics6.get_ActualThemeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementStatics4 members

    /// Identifies for the AllowFocusOnInteraction dependency property.
    /// - Returns: The identifier for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_AllowFocusOnInteractionProperty())
        }
    }

    /// Identifies the AllowFocusWhenDisabled Â dependency property.
    /// - Returns: The identifier for the AllowFocusWhenDisabled Â dependency property.
    public static var allowFocusWhenDisabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_AllowFocusWhenDisabledProperty())
        }
    }

    /// Identifies the FocusVisualMargin Â dependency property.
    /// - Returns: The identifier for the FocusVisualMargin Â dependency property.
    public static var focusVisualMarginProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_FocusVisualMarginProperty())
        }
    }

    /// Identifies the FocusVisualPrimaryBrush Â dependency property.
    /// - Returns: The identifier for the FocusVisualPrimaryBrush Â dependency property.
    public static var focusVisualPrimaryBrushProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_FocusVisualPrimaryBrushProperty())
        }
    }

    /// Identifies the FocusVisualPrimaryThickness Â dependency property.
    /// - Returns: The identifier for the FocusVisualPrimaryThickness Â dependency property.
    public static var focusVisualPrimaryThicknessProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_FocusVisualPrimaryThicknessProperty())
        }
    }

    /// Identifies the FocusVisualSecondaryBrush Â dependency property.
    /// - Returns: The identifier for the FocusVisualSecondaryBrush Â dependency property.
    public static var focusVisualSecondaryBrushProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_FocusVisualSecondaryBrushProperty())
        }
    }

    /// Identifies the FocusVisualSecondaryThickness Â dependency property.
    /// - Returns: The identifier for the FocusVisualSecondaryThickness Â dependency property.
    public static var focusVisualSecondaryThicknessProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics4.get_FocusVisualSecondaryThicknessProperty())
        }
    }

    // MARK: Windows.UI.Xaml.IFrameworkElementStatics5 members

    /// Removes the specified element from the XAML visual tree in a way that it can be undeferred later.
    /// - Parameter element: The element to remove from the XAML visual tree.
    public static func deferTree(_ element: WindowsUIXaml_DependencyObject?) throws {
        try _iframeworkElementStatics5.deferTree(element)
    }

    // MARK: Implementation details

    private var _iframeworkElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement>? = nil

    internal var _iframeworkElement: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement> {
        get throws {
            try _iframeworkElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement.self)
            }
        }
    }

    private var _iframeworkElement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement2>? = nil

    internal var _iframeworkElement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement2> {
        get throws {
            try _iframeworkElement2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement2.self)
            }
        }
    }

    private var _iframeworkElement3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement3>? = nil

    internal var _iframeworkElement3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement3> {
        get throws {
            try _iframeworkElement3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement3.self)
            }
        }
    }

    private var _iframeworkElement4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement4>? = nil

    internal var _iframeworkElement4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement4> {
        get throws {
            try _iframeworkElement4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement4.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement4.self)
            }
        }
    }

    private var _iframeworkElement6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement6>? = nil

    internal var _iframeworkElement6: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement6> {
        get throws {
            try _iframeworkElement6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement6.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement6.self)
            }
        }
    }

    private var _iframeworkElement7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement7>? = nil

    internal var _iframeworkElement7: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement7> {
        get throws {
            try _iframeworkElement7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElement7.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElement7.self)
            }
        }
    }

    private var _iframeworkElementProtected7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementProtected7>? = nil

    internal var _iframeworkElementProtected7: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementProtected7> {
        get throws {
            try _iframeworkElementProtected7_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElementProtected7.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementProtected7.self)
            }
        }
    }

    private var _iframeworkElementOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides>? = nil

    internal var _iframeworkElementOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides> {
        get throws {
            try _iframeworkElementOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides.self)
            }
        }
    }

    private var _iframeworkElementOverrides2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides2>? = nil

    internal var _iframeworkElementOverrides2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides2> {
        get throws {
            try _iframeworkElementOverrides2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IFrameworkElement>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iframeworkElement_storage?.release()
        _iframeworkElement2_storage?.release()
        _iframeworkElement3_storage?.release()
        _iframeworkElement4_storage?.release()
        _iframeworkElement6_storage?.release()
        _iframeworkElement7_storage?.release()
        _iframeworkElementProtected7_storage?.release()
        _iframeworkElementOverrides_storage?.release()
        _iframeworkElementOverrides2_storage?.release()
    }

    private static var _iframeworkElementFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementFactory>? = nil

    internal static var _iframeworkElementFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementFactory> {
        get throws {
            try _iframeworkElementFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementFactory.iid)
            }
        }
    }

    private static var _iframeworkElementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics>? = nil

    internal static var _iframeworkElementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics> {
        get throws {
            try _iframeworkElementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics.iid)
            }
        }
    }

    private static var _iframeworkElementStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics2>? = nil

    internal static var _iframeworkElementStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics2> {
        get throws {
            try _iframeworkElementStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics2.iid)
            }
        }
    }

    private static var _iframeworkElementStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics6>? = nil

    internal static var _iframeworkElementStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics6> {
        get throws {
            try _iframeworkElementStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics6.iid)
            }
        }
    }

    private static var _iframeworkElementStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics4>? = nil

    internal static var _iframeworkElementStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics4> {
        get throws {
            try _iframeworkElementStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics4.iid)
            }
        }
    }

    private static var _iframeworkElementStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics5>? = nil

    internal static var _iframeworkElementStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics5> {
        get throws {
            try _iframeworkElementStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkElement", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkElementStatics5.iid)
            }
        }
    }

    // MARK: Override support

    private var _iframeworkElementOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iframeworkElementOverrides2_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides.iid {
            if !_iframeworkElementOverrides_outer.isInitialized {
                _iframeworkElementOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_FrameworkElementProjection.VirtualTables.iframeworkElementOverrides)
            }
            return _iframeworkElementOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXaml_IFrameworkElementOverrides2.iid {
            if !_iframeworkElementOverrides2_outer.isInitialized {
                _iframeworkElementOverrides2_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_FrameworkElementProjection.VirtualTables.iframeworkElementOverrides2)
            }
            return _iframeworkElementOverrides2_outer.unknownPointer.addingRef()
        }
        return nil
    }
}