// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides helper methods to evaluate or set Size values. C# and Microsoft Visual Basic code should use members of Size instead.
public final class WindowsUIXaml_SizeHelper: WindowsRuntime.WinRTImport<WindowsUIXaml_SizeHelperProjection> {
    // MARK: Windows.UI.Xaml.ISizeHelperStatics members

    /// Gets a static Size value where the Size has no height or width (all values 0). C# and Microsoft Visual Basic code should use Size.Empty instead.
    /// - Returns: A Size with all values as 0.
    public static var empty: WindowsFoundation_Size {
        get throws {
            try _isizeHelperStatics.get_Empty()
        }
    }

    /// Creates a new Size based on width and height element values. C# and Microsoft Visual Basic code should use the Size(Double,Double) constructor instead.
    /// - Parameter width: The initial **Width**.
    /// - Parameter height: The initial **Height**.
    /// - Returns: The created Size.
    public static func fromDimensions(_ width: Swift.Float, _ height: Swift.Float) throws -> WindowsFoundation_Size {
        try _isizeHelperStatics.fromDimensions(width, height)
    }

    /// Returns whether a specified Size is equivalent to an Empty Size. C# and Microsoft Visual Basic code should use Size.IsEmpty instead.
    /// - Parameter target: The Size to evaluate.
    /// - Returns: **true** if the specified Size is equivalent to an Empty Size; otherwise, **false**.
    public static func getIsEmpty(_ target: WindowsFoundation_Size) throws -> Swift.Bool {
        try _isizeHelperStatics.getIsEmpty(target)
    }

    /// Provides comparison of the values of two Size values. C# and Microsoft Visual Basic code should use the Equality (=) operator or Equals method instead.
    /// - Parameter target: The first Size to compare.
    /// - Parameter value: The second Size to compare.
    /// - Returns: **true** if *target* and *value* hold equivalent values; otherwise, **false**.
    public static func equals(_ target: WindowsFoundation_Size, _ value: WindowsFoundation_Size) throws -> Swift.Bool {
        try _isizeHelperStatics.equals(target, value)
    }

    // MARK: Implementation details

    private static var _isizeHelperStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_ISizeHelperStatics>? = nil

    internal static var _isizeHelperStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_ISizeHelperStatics> {
        get throws {
            try _isizeHelperStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.SizeHelper", id: CWinRT.SWRT_WindowsUIXaml_ISizeHelperStatics.iid)
            }
        }
    }
}