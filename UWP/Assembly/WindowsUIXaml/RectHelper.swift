// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides helper methods to evaluate or set Rect values. C# and Microsoft Visual Basic code should use members of Rect instead.
public final class WindowsUIXaml_RectHelper: WindowsRuntime.WinRTImport<WindowsUIXaml_RectHelperProjection> {
    // MARK: Windows.UI.Xaml.IRectHelperStatics members

    /// Gets a static Rect value where the Rect has no size or position (all values 0). C# and Microsoft Visual Basic code should use Rect.Empty instead.
    /// - Returns: A Rect with all values as 0.
    public static var empty: WindowsFoundation_Rect {
        get throws {
            try _irectHelperStatics.get_Empty()
        }
    }

    /// Creates a new Rect value based on the element values of a Rect structure. C# and Microsoft Visual Basic code should use the Rect(Double,Double,Double,Double) constructor instead.
    /// - Parameter x: The pixel value to set for **X**.
    /// - Parameter y: The pixel value to set for **Y**.
    /// - Parameter width: The pixel value to set for **Width**.
    /// - Parameter height: The pixel value to set for **Height**.
    /// - Returns: The created Rect.
    public static func fromCoordinatesAndDimensions(_ x: Swift.Float, _ y: Swift.Float, _ width: Swift.Float, _ height: Swift.Float) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.fromCoordinatesAndDimensions(x, y, width, height)
    }

    /// Creates a new Rect value based on two points. C# and Microsoft Visual Basic code should use the Rect(Point,Point) constructor instead.
    /// - Parameter point1: The first point.
    /// - Parameter point2: The second point.
    /// - Returns: The created Rect.
    public static func fromPoints(_ point1: WindowsFoundation_Point, _ point2: WindowsFoundation_Point) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.fromPoints(point1, point2)
    }

    /// Creates a new Rect value based on a Point that specifies the upper-left origin, and a Size that specifies the width and height. C# and Microsoft Visual Basic code should use the Rect(Point,Size) constructor instead.
    /// - Parameter location: The Point location of the origin (upper left).
    /// - Parameter size: The Size that specifies width and height.
    /// - Returns: The created Rect value.
    public static func fromLocationAndSize(_ location: WindowsFoundation_Point, _ size: WindowsFoundation_Size) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.fromLocationAndSize(location, size)
    }

    /// Returns whether a specified Rect is equivalent to an Empty Rect. C# and Microsoft Visual Basic code should use Rect.IsEmpty instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Returns: **true** if the specified Rect is equivalent to an Empty Rect; otherwise, **false**.
    public static func getIsEmpty(_ target: WindowsFoundation_Rect) throws -> Swift.Bool {
        try _irectHelperStatics.getIsEmpty(target)
    }

    /// Gets a "Bottom" value for the specified Rect. So long as **Height** is positive, "Bottom" is evaluated as **Y** + **Height**. C# and Microsoft Visual Basic code should use Rect.Bottom instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Returns: The evaluated "Bottom" value.
    public static func getBottom(_ target: WindowsFoundation_Rect) throws -> Swift.Float {
        try _irectHelperStatics.getBottom(target)
    }

    /// Gets a "Left" value for the specified Rect. So long as **Width** is positive, "Left" is evaluated as **X**. C# and Microsoft Visual Basic code should use Rect.Left instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Returns: The evaluated "Left" value.
    public static func getLeft(_ target: WindowsFoundation_Rect) throws -> Swift.Float {
        try _irectHelperStatics.getLeft(target)
    }

    /// Gets a "Right" value for the specified Rect. So long as **Width** is positive, "Right" is evaluated as **X** + **Width**. C# and Microsoft Visual Basic code should use Rect.Right instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Returns: The evaluated "Right" value.
    public static func getRight(_ target: WindowsFoundation_Rect) throws -> Swift.Float {
        try _irectHelperStatics.getRight(target)
    }

    /// Gets a "Top" value for the specified Rect. So long as **Height** is positive, "Top" is evaluated as **Y**. C# and Microsoft Visual Basic code should use Rect.Top instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Returns: The evaluated "Top" value.
    public static func getTop(_ target: WindowsFoundation_Rect) throws -> Swift.Float {
        try _irectHelperStatics.getTop(target)
    }

    /// Returns whether a given Point is within the bounds of a given Rect, for a shared coordinate reference. C# and Microsoft Visual Basic code should use Rect.Contains instead.
    /// - Parameter target: The Rect to evaluate.
    /// - Parameter point: The Point to check for containment.
    /// - Returns: **true** if *point* is within the *target* bounds; otherwise, **false**.
    public static func contains(_ target: WindowsFoundation_Rect, _ point: WindowsFoundation_Point) throws -> Swift.Bool {
        try _irectHelperStatics.contains(target, point)
    }

    /// Provides comparison of the values of two Rect values. C# and Microsoft Visual Basic code should use the Equality (=) operator or Equals method instead.
    /// - Parameter target: The first Rect to compare.
    /// - Parameter value: The second Rect to compare.
    /// - Returns: **true** if *target* and *value* hold equivalent values; otherwise, **false**.
    public static func equals(_ target: WindowsFoundation_Rect, _ value: WindowsFoundation_Rect) throws -> Swift.Bool {
        try _irectHelperStatics.equals(target, value)
    }

    /// Returns the areas of two specified Rect values that intersect, as a new Rect. C# and Microsoft Visual Basic code should use Rect.Intersect instead.
    /// - Parameter target: The first Rect to check for intersection.
    /// - Parameter rect: The second Rect to check for intersection.
    /// - Returns: A Rect that represents the areas of *target* and *rect* that intersect. Can be an Empty value if there is no intersection.
    public static func intersect(_ target: WindowsFoundation_Rect, _ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.intersect(target, rect)
    }

    public static func union(_ target: WindowsFoundation_Rect, _ point: WindowsFoundation_Point) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.unionWithPoint(target, point)
    }

    public static func union(_ target: WindowsFoundation_Rect, _ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _irectHelperStatics.unionWithRect(target, rect)
    }

    // MARK: Implementation details

    private static var _irectHelperStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IRectHelperStatics>? = nil

    internal static var _irectHelperStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IRectHelperStatics> {
        get throws {
            try _irectHelperStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.RectHelper", id: CWinRT.SWRT_WindowsUIXaml_IRectHelperStatics.iid)
            }
        }
    }
}