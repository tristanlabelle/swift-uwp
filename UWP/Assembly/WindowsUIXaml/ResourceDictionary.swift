// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines a repository for XAML resources, such as styles, that your app uses. You define the resources in XAML and can then retrieve them in XAML using the {StaticResource} markup extension and {ThemeResource} markup extension s. You can also access resources with code, but that is less common.
open class WindowsUIXaml_ResourceDictionary: WindowsRuntime.WinRTComposableClass, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol {
    public typealias K = WindowsRuntime.IInspectable?
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?

    // MARK: Windows.UI.Xaml.IResourceDictionaryFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_ResourceDictionary.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iresourceDictionaryFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IResourceDictionary members

    /// Gets a collection of the ResourceDictionary dictionaries that constitute the various resource dictionaries in the merged dictionaries.
    /// - Returns: A list collection of the ResourceDictionary dictionaries that constitute the various resource dictionaries in the merged dictionaries.
    public var mergedDictionaries: WindowsFoundationCollections_IVector<WindowsUIXaml_ResourceDictionary?> {
        get throws {
            try COM.NullResult.unwrap(_iresourceDictionary.get_MergedDictionaries())
        }
    }

    /// Gets or sets a Uniform Resource Identifier (URI) that provides the source location of a merged resource dictionary.
    /// - Returns: A Uniform Resource Identifier (URI) that provides the source location of a merged resource dictionary. This is typically a path that references a XAML resource within the app, or a reference to a loose XAML file.
    public var source: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_iresourceDictionary.get_Source())
        }
    }

    /// Gets or sets a Uniform Resource Identifier (URI) that provides the source location of a merged resource dictionary.
    /// - Returns: A Uniform Resource Identifier (URI) that provides the source location of a merged resource dictionary. This is typically a path that references a XAML resource within the app, or a reference to a loose XAML file.
    public func source(_ value: WindowsFoundation_Uri?) throws {
        try _iresourceDictionary.put_Source(value)
    }

    /// Gets a collection of merged resource dictionaries that are specifically keyed and composed to address theme scenarios, for example supplying theme values for "HighContrast".
    /// - Returns: A dictionary of ResourceDictionary theme dictionaries. Each must be keyed with **x:Key**.
    public var themeDictionaries: WindowsFoundationCollections_IMap<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_iresourceDictionary.get_ThemeDictionaries())
        }
    }

    // MARK: Windows.Foundation.Collections.IMap`2<Object, Object> members

    /// Gets the number of elements contained in the collection.
    /// - Returns: The number of elements contained in the collection.
    public var size: Swift.UInt32 {
        get throws {
            try _imap.get_Size()
        }
    }

    /// Returns the value from the requested key, if an entry with that key exists.
    /// - Parameter key: The requested key.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable? {
        try _imap.lookup(key)
    }

    /// Returns whether the ResourceDictionary has an entry with the requested key.
    /// - Parameter key: The requested key.
    /// - Returns: **true** if the ResourceDictionary has an entry with the requested key; otherwise, **false**.
    public func hasKey(_ key: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        try _imap.hasKey(key)
    }

    /// Retrieves a view against the ResourceDictionary.
    /// - Returns: The view object.
    public func getView() throws -> WindowsFoundationCollections_IMapView<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?> {
        try COM.NullResult.unwrap(_imap.getView())
    }

    /// Adds a new entry to the ResourceDictionary.
    /// - Parameter key: The object key for the resource to insert.
    /// - Parameter value: The object value for the resource to insert.
    /// - Returns: **true** if calling the method replaced a value that already existed for the key; **false** if calling the method defined a new key.
    public func insert(_ key: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        try _imap.insert(key, value)
    }

    /// Removes a specific item from the ResourceDictionary.
    /// - Parameter key: The key of the item to remove.
    public func remove(_ key: WindowsRuntime.IInspectable?) throws {
        try _imap.remove(key)
    }

    /// Removes all items from this ResourceDictionary.
    public func clear() throws {
        try _imap.clear()
    }

    // MARK: Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Object, Object>> members

    /// Returns an iterator for the items in the collection.
    /// - Returns: The iterator. The iterator's current position is at the 0-index position, or at the collection end if the collection is empty.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    private var _iresourceDictionary_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IResourceDictionary>? = nil

    internal var _iresourceDictionary: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IResourceDictionary> {
        get throws {
            try _iresourceDictionary_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IResourceDictionary.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IResourceDictionary.self)
            }
        }
    }

    private var _imap_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_Object_Object>? = nil

    internal var _imap: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IMap_Object_Object> {
        get throws {
            try _imap_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IMap_Object_Object.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IMap_Object_Object.self)
            }
        }
    }

    private var _iiterable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_Object_Object>? = nil

    internal var _iiterable: COM.COMInterop<CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_Object_Object> {
        get throws {
            try _iiterable_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_Object_Object.iid).cast(to: CWinRT.SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_Object_Object.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IResourceDictionary>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iresourceDictionary_storage?.release()
        _imap_storage?.release()
        _iiterable_storage?.release()
    }

    private static var _iresourceDictionaryFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IResourceDictionaryFactory>? = nil

    internal static var _iresourceDictionaryFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IResourceDictionaryFactory> {
        get throws {
            try _iresourceDictionaryFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.ResourceDictionary", id: CWinRT.SWRT_WindowsUIXaml_IResourceDictionaryFactory.iid)
            }
        }
    }
}