// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Encapsulates the app and its available services.
open class WindowsUIXaml_Application: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IApplicationFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_Application.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iapplicationFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IApplication members

    /// Gets an object that declares how the app behaves when run in a debug environment.
    /// - Returns: An object that declares how the app behaves when run in a debug environment.
    public var debugSettings: WindowsUIXaml_DebugSettings {
        get throws {
            try COM.NullResult.unwrap(_iapplication.get_DebugSettings())
        }
    }

    /// Gets or sets a value that determines the light-dark preference for the overall theme of an app.
    /// - Returns: A value of the enumeration. The initial value is the default theme set by the user in Windows settings.
    public var requestedTheme: WindowsUIXaml_ApplicationTheme {
        get throws {
            try _iapplication.get_RequestedTheme()
        }
    }

    /// Gets or sets a value that determines the light-dark preference for the overall theme of an app.
    /// - Returns: A value of the enumeration. The initial value is the default theme set by the user in Windows settings.
    public func requestedTheme(_ value: WindowsUIXaml_ApplicationTheme) throws {
        try _iapplication.put_RequestedTheme(value)
    }

    /// Gets a collection of application-scoped resources, such as styles, templates, and brushes.
    /// - Returns: A ResourceDictionary object that contains zero or more application-scoped resources.
    public var resources: WindowsUIXaml_ResourceDictionary {
        get throws {
            try COM.NullResult.unwrap(_iapplication.get_Resources())
        }
    }

    /// Gets a collection of application-scoped resources, such as styles, templates, and brushes.
    /// - Returns: A ResourceDictionary object that contains zero or more application-scoped resources.
    public func resources(_ value: WindowsUIXaml_ResourceDictionary?) throws {
        try _iapplication.put_Resources(value)
    }

    /// Occurs when the application transitions from Suspended state to Running state.
    public func resuming(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication.add_Resuming(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: resuming)
    }

    public func resuming(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication.remove_Resuming(token)
    }

    /// Occurs when the application transitions to Suspended state from some other state.
    public func suspending(adding handler: WindowsUIXaml_SuspendingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication.add_Suspending(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: suspending)
    }

    public func suspending(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication.remove_Suspending(token)
    }

    /// Occurs when an exception can be handled by app code, as forwarded from a native-level Windows Runtime error. Apps can mark the occurrence as handled in event data.
    public func unhandledException(adding handler: WindowsUIXaml_UnhandledExceptionEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication.add_UnhandledException(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: unhandledException)
    }

    public func unhandledException(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication.remove_UnhandledException(token)
    }

    /// Shuts down the app.
    public func exit() throws {
        try _iapplication.exit()
    }

    // MARK: Windows.UI.Xaml.IApplication2 members

    /// Gets or sets the type of visual feedback that an app can use to indicate the UI element with focus.
    /// - Returns: The type of visual feedback used to indicate the UI element with focus. The default value depends on the operating system.
    public var focusVisualKind: WindowsUIXaml_FocusVisualKind {
        get throws {
            try _iapplication2.get_FocusVisualKind()
        }
    }

    /// Gets or sets the type of visual feedback that an app can use to indicate the UI element with focus.
    /// - Returns: The type of visual feedback used to indicate the UI element with focus. The default value depends on the operating system.
    public func focusVisualKind(_ value: WindowsUIXaml_FocusVisualKind) throws {
        try _iapplication2.put_FocusVisualKind(value)
    }

    /// Gets or sets whether a UWP app supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as an Xbox gamepad or remote control. (All nested elements inherit this behavior.)
    /// - Returns: The pointer emulation mode. The default is Auto (the default system experience for the input device).
    public var requiresPointerMode: WindowsUIXaml_ApplicationRequiresPointerMode {
        get throws {
            try _iapplication2.get_RequiresPointerMode()
        }
    }

    /// Gets or sets whether a UWP app supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as an Xbox gamepad or remote control. (All nested elements inherit this behavior.)
    /// - Returns: The pointer emulation mode. The default is Auto (the default system experience for the input device).
    public func requiresPointerMode(_ value: WindowsUIXaml_ApplicationRequiresPointerMode) throws {
        try _iapplication2.put_RequiresPointerMode(value)
    }

    /// Occurs when the app moves from the foreground to the background.
    public func enteredBackground(adding handler: WindowsUIXaml_EnteredBackgroundEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication2.add_EnteredBackground(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: enteredBackground)
    }

    public func enteredBackground(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication2.remove_EnteredBackground(token)
    }

    /// Occurs when the app moves from the background to the foreground.
    public func leavingBackground(adding handler: WindowsUIXaml_LeavingBackgroundEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication2.add_LeavingBackground(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: leavingBackground)
    }

    public func leavingBackground(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication2.remove_LeavingBackground(token)
    }

    // MARK: Windows.UI.Xaml.IApplication3 members

    /// Gets or sets a value that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled.
    /// - Returns: A value of the enumeration that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled. The default is **Auto**.
    public var highContrastAdjustment: WindowsUIXaml_ApplicationHighContrastAdjustment {
        get throws {
            try _iapplication3.get_HighContrastAdjustment()
        }
    }

    /// Gets or sets a value that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled.
    /// - Returns: A value of the enumeration that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled. The default is **Auto**.
    public func highContrastAdjustment(_ value: WindowsUIXaml_ApplicationHighContrastAdjustment) throws {
        try _iapplication3.put_HighContrastAdjustment(value)
    }

    // MARK: Windows.UI.Xaml.IApplicationOverrides members

    /// Invoked when the application is activated by some means other than normal launching.
    /// - Parameter args: Event data for the event.
    open func onActivated(_ args: WindowsApplicationModelActivation_IActivatedEventArgs?) throws {
        try _iapplicationOverrides.onActivated(args)
    }

    /// Invoked when the application is launched. Override this method to perform application initialization and to display initial content in the associated Window.
    /// - Parameter args: Event data for the event.
    open func onLaunched(_ args: WindowsApplicationModelActivation_LaunchActivatedEventArgs?) throws {
        try _iapplicationOverrides.onLaunched(args)
    }

    /// Invoked when the application is activated through file-open.
    /// - Parameter args: Event data for the event.
    open func onFileActivated(_ args: WindowsApplicationModelActivation_FileActivatedEventArgs?) throws {
        try _iapplicationOverrides.onFileActivated(args)
    }

    /// Invoked when the application is activated through a search association.
    /// - Parameter args: Event data for the event.
    open func onSearchActivated(_ args: WindowsApplicationModelActivation_SearchActivatedEventArgs?) throws {
        try _iapplicationOverrides.onSearchActivated(args)
    }

    /// Invoked when the application is activated through sharing association.
    /// - Parameter args: Event data for the event.
    open func onShareTargetActivated(_ args: WindowsApplicationModelActivation_ShareTargetActivatedEventArgs?) throws {
        try _iapplicationOverrides.onShareTargetActivated(args)
    }

    /// Invoked when the application is activated through file-open dialog association.
    /// - Parameter args: Event data for the event.
    open func onFileOpenPickerActivated(_ args: WindowsApplicationModelActivation_FileOpenPickerActivatedEventArgs?) throws {
        try _iapplicationOverrides.onFileOpenPickerActivated(args)
    }

    /// Invoked when the application is activated through file-save dialog association.
    /// - Parameter args: Event data for the event.
    open func onFileSavePickerActivated(_ args: WindowsApplicationModelActivation_FileSavePickerActivatedEventArgs?) throws {
        try _iapplicationOverrides.onFileSavePickerActivated(args)
    }

    /// Invoked when the application is activated due to an activation contract with ActivationKind as **CachedFileUpdater**.
    /// - Parameter args: Event data for the event.
    open func onCachedFileUpdaterActivated(_ args: WindowsApplicationModelActivation_CachedFileUpdaterActivatedEventArgs?) throws {
        try _iapplicationOverrides.onCachedFileUpdaterActivated(args)
    }

    /// Invoked when the application creates a window.
    /// - Parameter args: Event data for the event.
    open func onWindowCreated(_ args: WindowsUIXaml_WindowCreatedEventArgs?) throws {
        try _iapplicationOverrides.onWindowCreated(args)
    }

    // MARK: Windows.UI.Xaml.IApplicationOverrides2 members

    /// Invoked when the application is activated in the background.
    /// - Parameter args: Data about the background activation.
    open func onBackgroundActivated(_ args: WindowsApplicationModelActivation_BackgroundActivatedEventArgs?) throws {
        try _iapplicationOverrides2.onBackgroundActivated(args)
    }

    // MARK: Windows.UI.Xaml.IApplicationStatics members

    /// Gets the Application object for the current application.
    /// - Returns: The Application object for the current application.
    public static var current: WindowsUIXaml_Application {
        get throws {
            try COM.NullResult.unwrap(_iapplicationStatics.get_Current())
        }
    }

    /// Provides the entry point and requests initialization of the application. Use the callback to instantiate the Application class.
    /// - Parameter callback: The callback that should be invoked during the initialization sequence.
    public static func start(_ callback: WindowsUIXaml_ApplicationInitializationCallback?) throws {
        try _iapplicationStatics.start(callback)
    }

    /// Loads a XAML file that is located at the specified relative location, and converts it to an instance of the object that is specified by the root element of the XAML file.
    /// - Parameter component: An object of the same type as the root element of the XAML content to be loaded.
    /// - Parameter resourceLocator: An object describing the Uniform Resource Identifier (URI) path to the resource to load.
    public static func loadComponent(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?) throws {
        try _iapplicationStatics.loadComponent(component, resourceLocator)
    }

    /// Loads a XAML file that is located at the specified relative location, and converts it to an instance of the object that is specified by the root element of the XAML file.
    /// - Parameter component: An object of the same type as the root element of the XAML content to be loaded.
    /// - Parameter resourceLocator: An object describing the Uniform Resource Identifier (URI) path to the resource to load.
    /// - Parameter componentResourceLocation: A value of the enumeration.
    public static func loadComponent(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?, _ componentResourceLocation: WindowsUIXamlControlsPrimitives_ComponentResourceLocation) throws {
        try _iapplicationStatics.loadComponentWithResourceLocation(component, resourceLocator, componentResourceLocation)
    }

    // MARK: Implementation details

    private var _iapplication_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication>? = nil

    internal var _iapplication: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication> {
        get throws {
            try _iapplication_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IApplication.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IApplication.self)
            }
        }
    }

    private var _iapplication2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication2>? = nil

    internal var _iapplication2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication2> {
        get throws {
            try _iapplication2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IApplication2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IApplication2.self)
            }
        }
    }

    private var _iapplication3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication3>? = nil

    internal var _iapplication3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplication3> {
        get throws {
            try _iapplication3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IApplication3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IApplication3.self)
            }
        }
    }

    private var _iapplicationOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides>? = nil

    internal var _iapplicationOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides> {
        get throws {
            try _iapplicationOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides.self)
            }
        }
    }

    private var _iapplicationOverrides2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides2>? = nil

    internal var _iapplicationOverrides2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides2> {
        get throws {
            try _iapplicationOverrides2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IApplication>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iapplication_storage?.release()
        _iapplication2_storage?.release()
        _iapplication3_storage?.release()
        _iapplicationOverrides_storage?.release()
        _iapplicationOverrides2_storage?.release()
    }

    private static var _iapplicationFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationFactory>? = nil

    internal static var _iapplicationFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationFactory> {
        get throws {
            try _iapplicationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Application", id: CWinRT.SWRT_WindowsUIXaml_IApplicationFactory.iid)
            }
        }
    }

    private static var _iapplicationStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationStatics>? = nil

    internal static var _iapplicationStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IApplicationStatics> {
        get throws {
            try _iapplicationStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Application", id: CWinRT.SWRT_WindowsUIXaml_IApplicationStatics.iid)
            }
        }
    }

    // MARK: Override support

    private var _iapplicationOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iapplicationOverrides2_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides.iid {
            if !_iapplicationOverrides_outer.isInitialized {
                _iapplicationOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_ApplicationProjection.VirtualTables.iapplicationOverrides)
            }
            return _iapplicationOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXaml_IApplicationOverrides2.iid {
            if !_iapplicationOverrides2_outer.isInitialized {
                _iapplicationOverrides2_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_ApplicationProjection.VirtualTables.iapplicationOverrides2)
            }
            return _iapplicationOverrides2_outer.unknownPointer.addingRef()
        }
        return nil
    }
}