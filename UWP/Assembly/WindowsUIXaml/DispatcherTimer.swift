// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides a timer that is integrated into the **Dispatcher** queue, which is processed at a specified interval of time and at a specified priority.
open class WindowsUIXaml_DispatcherTimer: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IDispatcherTimerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_DispatcherTimer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._idispatcherTimerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IDispatcherTimer members

    /// Gets or sets the amount of time between timer ticks.
    /// - Returns: The amount of time between ticks. The default is a **TimeSpan**
    public var interval: WindowsFoundation_TimeSpan {
        get throws {
            try _idispatcherTimer.get_Interval()
        }
    }

    /// Gets or sets the amount of time between timer ticks.
    /// - Returns: The amount of time between ticks. The default is a **TimeSpan**
    public func interval(_ value: WindowsFoundation_TimeSpan) throws {
        try _idispatcherTimer.put_Interval(value)
    }

    /// Gets a value that indicates whether the timer is running.
    /// - Returns: **true** if the timer is enabled and running; otherwise, **false**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _idispatcherTimer.get_IsEnabled()
        }
    }

    /// Occurs when the timer interval has elapsed.
    public func tick(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idispatcherTimer.add_Tick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: tick)
    }

    public func tick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idispatcherTimer.remove_Tick(token)
    }

    /// Starts the DispatcherTimer.
    public func start() throws {
        try _idispatcherTimer.start()
    }

    /// Stops the DispatcherTimer.
    public func stop() throws {
        try _idispatcherTimer.stop()
    }

    // MARK: Implementation details

    private var _idispatcherTimer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDispatcherTimer>? = nil

    internal var _idispatcherTimer: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDispatcherTimer> {
        get throws {
            try _idispatcherTimer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDispatcherTimer.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDispatcherTimer.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IDispatcherTimer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _idispatcherTimer_storage?.release()
    }

    private static var _idispatcherTimerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDispatcherTimerFactory>? = nil

    internal static var _idispatcherTimerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDispatcherTimerFactory> {
        get throws {
            try _idispatcherTimerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.DispatcherTimer", id: CWinRT.SWRT_WindowsUIXaml_IDispatcherTimerFactory.iid)
            }
        }
    }
}