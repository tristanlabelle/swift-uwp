// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Declares how certain aspects of the app behave when it is run in a debug environment
public final class WindowsUIXaml_DebugSettings: WindowsRuntime.WinRTImport<WindowsUIXaml_DebugSettingsProjection> {
    // MARK: Windows.UI.Xaml.IDebugSettings members

    /// Gets or sets a value that indicates whether to display frame-rate and per-frame CPU usage info. These display as an overlay of counters in the window chrome while the app runs.
    /// - Returns: **true** to display the overlay debug counters; otherwise, **false**.
    public var enableFrameRateCounter: Swift.Bool {
        get throws {
            try _interop.get_EnableFrameRateCounter()
        }
    }

    /// Gets or sets a value that indicates whether to display frame-rate and per-frame CPU usage info. These display as an overlay of counters in the window chrome while the app runs.
    /// - Returns: **true** to display the overlay debug counters; otherwise, **false**.
    public func enableFrameRateCounter(_ value: Swift.Bool) throws {
        try _interop.put_EnableFrameRateCounter(value)
    }

    /// Gets or sets a value that indicates whether to engage the binding tracing feature of Microsoft Visual Studio when the app runs.
    /// - Returns: **true** to engage the binding tracing feature of Microsoft Visual Studio; otherwise, **false**.
    public var isBindingTracingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsBindingTracingEnabled()
        }
    }

    /// Gets or sets a value that indicates whether to engage the binding tracing feature of Microsoft Visual Studio when the app runs.
    /// - Returns: **true** to engage the binding tracing feature of Microsoft Visual Studio; otherwise, **false**.
    public func isBindingTracingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsBindingTracingEnabled(value)
    }

    /// Gets or sets a value that enables a debug setting that visualizes overdraw operations. This visualization is useful during application development for detecting layout, animation, and other operations that are graphics processing intensive.
    /// - Returns: **true** to enable the visualization, otherwise, **false**.
    public var isOverdrawHeatMapEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsOverdrawHeatMapEnabled()
        }
    }

    /// Gets or sets a value that enables a debug setting that visualizes overdraw operations. This visualization is useful during application development for detecting layout, animation, and other operations that are graphics processing intensive.
    /// - Returns: **true** to enable the visualization, otherwise, **false**.
    public func isOverdrawHeatMapEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsOverdrawHeatMapEnabled(value)
    }

    /// Occurs when a Binding cannot be resolved.
    public func bindingFailed(adding handler: WindowsUIXaml_BindingFailedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BindingFailed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: bindingFailed)
    }

    public func bindingFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BindingFailed(token)
    }

    // MARK: Windows.UI.Xaml.IDebugSettings2 members

    /// Gets or sets a value that indicates whether to highlight areas of the app UI surface that are being redrawn each frame.
    /// - Returns: **true** to highlight redraw regions. **false** to not highlight redraw regions. The default is **false**.
    public var enableRedrawRegions: Swift.Bool {
        get throws {
            try _idebugSettings2.get_EnableRedrawRegions()
        }
    }

    /// Gets or sets a value that indicates whether to highlight areas of the app UI surface that are being redrawn each frame.
    /// - Returns: **true** to highlight redraw regions. **false** to not highlight redraw regions. The default is **false**.
    public func enableRedrawRegions(_ value: Swift.Bool) throws {
        try _idebugSettings2.put_EnableRedrawRegions(value)
    }

    // MARK: Windows.UI.Xaml.IDebugSettings3 members

    /// Gets or sets a value that indicates whether to engage the text performance visualization feature of Microsoft Visual Studio when the app runs.
    /// - Returns: **true** to engage the text performance visualization feature of Microsoft Visual Studio; otherwise, **false**.
    public var isTextPerformanceVisualizationEnabled: Swift.Bool {
        get throws {
            try _idebugSettings3.get_IsTextPerformanceVisualizationEnabled()
        }
    }

    /// Gets or sets a value that indicates whether to engage the text performance visualization feature of Microsoft Visual Studio when the app runs.
    /// - Returns: **true** to engage the text performance visualization feature of Microsoft Visual Studio; otherwise, **false**.
    public func isTextPerformanceVisualizationEnabled(_ value: Swift.Bool) throws {
        try _idebugSettings3.put_IsTextPerformanceVisualizationEnabled(value)
    }

    // MARK: Windows.UI.Xaml.IDebugSettings4 members

    /// Gets or sets a value that indicates whether XAML errors cause an immediate FailFast rather than returning an error.
    /// - Returns: **true** if XAML errors cause an immediate FailFast rather than returning an error; otherwise, **false**. The default is **false**.
    public var failFastOnErrors: Swift.Bool {
        get throws {
            try _idebugSettings4.get_FailFastOnErrors()
        }
    }

    /// Gets or sets a value that indicates whether XAML errors cause an immediate FailFast rather than returning an error.
    /// - Returns: **true** if XAML errors cause an immediate FailFast rather than returning an error; otherwise, **false**. The default is **false**.
    public func failFastOnErrors(_ value: Swift.Bool) throws {
        try _idebugSettings4.put_FailFastOnErrors(value)
    }

    // MARK: Implementation details

    private var _idebugSettings2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings2>? = nil

    internal var _idebugSettings2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings2> {
        get throws {
            try _idebugSettings2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDebugSettings2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDebugSettings2.self)
            }
        }
    }

    private var _idebugSettings3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings3>? = nil

    internal var _idebugSettings3: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings3> {
        get throws {
            try _idebugSettings3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDebugSettings3.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDebugSettings3.self)
            }
        }
    }

    private var _idebugSettings4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings4>? = nil

    internal var _idebugSettings4: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDebugSettings4> {
        get throws {
            try _idebugSettings4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDebugSettings4.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDebugSettings4.self)
            }
        }
    }

    deinit {
        _idebugSettings2_storage?.release()
        _idebugSettings3_storage?.release()
        _idebugSettings4_storage?.release()
    }
}