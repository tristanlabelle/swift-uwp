// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages visual states and the logic for transitions between visual states for controls. Also provides the attached property support for VisualStateManager.VisualStateGroups, which is how you define visual states in XAML for a control template.
open class WindowsUIXaml_VisualStateManager: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IVisualStateManagerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_VisualStateManager.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._ivisualStateManagerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IVisualStateManagerProtected members

    /// When overridden in a derived class, fires the CurrentStateChanging event on the specified VisualStateGroup.
    /// - Parameter stateGroup: The object that the CurrentStateChanging event occurred on.
    /// - Parameter oldState: The state that the control is transitioning from.
    /// - Parameter newState: The state that the control should transition to.
    /// - Parameter control: The control where the transition animation between states is applied.
    public func raiseCurrentStateChanging(_ stateGroup: WindowsUIXaml_VisualStateGroup?, _ oldState: WindowsUIXaml_VisualState?, _ newState: WindowsUIXaml_VisualState?, _ control: WindowsUIXamlControls_Control?) throws {
        try _ivisualStateManagerProtected.raiseCurrentStateChanging(stateGroup, oldState, newState, control)
    }

    /// When overridden in a derived class, fires the CurrentStateChanged event on the specified VisualStateGroup.
    /// - Parameter stateGroup: The object on which the CurrentStateChanging event occurred.
    /// - Parameter oldState: The state that the control transitions from.
    /// - Parameter newState: The state that the control transitions to.
    /// - Parameter control: The control that transitioned states.
    public func raiseCurrentStateChanged(_ stateGroup: WindowsUIXaml_VisualStateGroup?, _ oldState: WindowsUIXaml_VisualState?, _ newState: WindowsUIXaml_VisualState?, _ control: WindowsUIXamlControls_Control?) throws {
        try _ivisualStateManagerProtected.raiseCurrentStateChanged(stateGroup, oldState, newState, control)
    }

    // MARK: Windows.UI.Xaml.IVisualStateManagerOverrides members

    /// When overridden in a derived class, transitions a control between states.
    /// - Parameter control: The control to transition between states.
    /// - Parameter templateRoot: The root element of the control's ControlTemplate.
    /// - Parameter stateName: The name of the state to transition to.
    /// - Parameter group: The VisualStateGroup that the state belongs to.
    /// - Parameter state: The representation of the state to transition to.
    /// - Parameter useTransitions: **true** to use a VisualTransition to transition between states; otherwise, **false**.
    /// - Returns: **true** if the control successfully transitions to the new state; otherwise, **false**.
    open func goToStateCore(_ control: WindowsUIXamlControls_Control?, _ templateRoot: WindowsUIXaml_FrameworkElement?, _ stateName: Swift.String, _ group: WindowsUIXaml_VisualStateGroup?, _ state: WindowsUIXaml_VisualState?, _ useTransitions: Swift.Bool) throws -> Swift.Bool {
        try _ivisualStateManagerOverrides.goToStateCore(control, templateRoot, stateName, group, state, useTransitions)
    }

    // MARK: Windows.UI.Xaml.IVisualStateManagerStatics members

    /// Identifies the **VisualStateManager.CustomVisualStateManager** dependency property.
    /// - Returns: The identifier for the **VisualStateManager.CustomVisualStateManager** dependency property.
    public static var customVisualStateManagerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ivisualStateManagerStatics.get_CustomVisualStateManagerProperty())
        }
    }

    /// Retrieves the collection of VisualStateGroup objects associated with the specified FrameworkElement.
    /// - Parameter obj: The object to get the value from.
    /// - Returns: A collection of VisualStateGroup objects.
    public static func getVisualStateGroups(_ obj: WindowsUIXaml_FrameworkElement?) throws -> WindowsFoundationCollections_IVector<WindowsUIXaml_VisualStateGroup?> {
        try COM.NullResult.unwrap(_ivisualStateManagerStatics.getVisualStateGroups(obj))
    }

    /// Gets the value of the VisualStateManager.CustomVisualStateManager attached property.
    /// - Parameter obj: The object to get the value from.
    /// - Returns: The VisualStateManager that transitions between the states of a control.
    public static func getCustomVisualStateManager(_ obj: WindowsUIXaml_FrameworkElement?) throws -> WindowsUIXaml_VisualStateManager {
        try COM.NullResult.unwrap(_ivisualStateManagerStatics.getCustomVisualStateManager(obj))
    }

    /// Sets the value of the VisualStateManager.CustomVisualStateManager attached property.
    /// - Parameter obj: The target element where the property is set.
    /// - Parameter value: The VisualStateManager that transitions between the states of a control.
    public static func setCustomVisualStateManager(_ obj: WindowsUIXaml_FrameworkElement?, _ value: WindowsUIXaml_VisualStateManager?) throws {
        try _ivisualStateManagerStatics.setCustomVisualStateManager(obj, value)
    }

    /// Transitions a control between two states, by requesting a new VisualState by name.
    /// - Parameter control: The control to transition between states.
    /// - Parameter stateName: The state to transition to.
    /// - Parameter useTransitions: **true** to use a VisualTransition to transition between states. **false** to skip using transitions and go directly to the requested state. The default is **false**.
    /// - Returns: **true** if the control successfully transitions to the new state, or was already using that state; otherwise, **false**.
    public static func goToState(_ control: WindowsUIXamlControls_Control?, _ stateName: Swift.String, _ useTransitions: Swift.Bool) throws -> Swift.Bool {
        try _ivisualStateManagerStatics.goToState(control, stateName, useTransitions)
    }

    // MARK: Implementation details

    private var _ivisualStateManager_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManager>? = nil

    internal var _ivisualStateManager: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManager> {
        get throws {
            try _ivisualStateManager_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IVisualStateManager.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IVisualStateManager.self)
            }
        }
    }

    private var _ivisualStateManagerProtected_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerProtected>? = nil

    internal var _ivisualStateManagerProtected: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerProtected> {
        get throws {
            try _ivisualStateManagerProtected_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerProtected.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerProtected.self)
            }
        }
    }

    private var _ivisualStateManagerOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerOverrides>? = nil

    internal var _ivisualStateManagerOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerOverrides> {
        get throws {
            try _ivisualStateManagerOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerOverrides.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IVisualStateManager>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _ivisualStateManager_storage?.release()
        _ivisualStateManagerProtected_storage?.release()
        _ivisualStateManagerOverrides_storage?.release()
    }

    private static var _ivisualStateManagerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerFactory>? = nil

    internal static var _ivisualStateManagerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerFactory> {
        get throws {
            try _ivisualStateManagerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.VisualStateManager", id: CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerFactory.iid)
            }
        }
    }

    private static var _ivisualStateManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerStatics>? = nil

    internal static var _ivisualStateManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerStatics> {
        get throws {
            try _ivisualStateManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.VisualStateManager", id: CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerStatics.iid)
            }
        }
    }

    // MARK: Override support

    private var _ivisualStateManagerOverrides_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXaml_IVisualStateManagerOverrides.iid {
            if !_ivisualStateManagerOverrides_outer.isInitialized {
                _ivisualStateManagerOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXaml_VisualStateManagerProjection.VirtualTables.ivisualStateManagerOverrides)
            }
            return _ivisualStateManagerOverrides_outer.unknownPointer.addingRef()
        }
        return nil
    }
}