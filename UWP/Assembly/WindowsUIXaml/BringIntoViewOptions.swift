// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the options that can be applied when an element is brought into view.
public final class WindowsUIXaml_BringIntoViewOptions: WindowsRuntime.WinRTImport<WindowsUIXaml_BringIntoViewOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXaml_BringIntoViewOptionsProjection.self))
    }

    // MARK: Windows.UI.Xaml.IBringIntoViewOptions members

    /// Gets or sets a value that indicates whether to use animation when the element is brought into view.
    /// - Returns: **true** to use animation; otherwise, **false**. The default is **true**.
    public var animationDesired: Swift.Bool {
        get throws {
            try _interop.get_AnimationDesired()
        }
    }

    /// Gets or sets a value that indicates whether to use animation when the element is brought into view.
    /// - Returns: **true** to use animation; otherwise, **false**. The default is **true**.
    public func animationDesired(_ value: Swift.Bool) throws {
        try _interop.put_AnimationDesired(value)
    }

    /// Gets or sets the area of an element to bring into view.
    /// - Returns: A rectangle that defines the area of an element to bring into view.
    public var targetRect: WindowsFoundation_IReference<WindowsFoundation_Rect>? {
        get throws {
            try _interop.get_TargetRect()
        }
    }

    /// Gets or sets the area of an element to bring into view.
    /// - Returns: A rectangle that defines the area of an element to bring into view.
    public func targetRect(_ value: WindowsFoundation_IReference<WindowsFoundation_Rect>?) throws {
        try _interop.put_TargetRect(value)
    }

    // MARK: Windows.UI.Xaml.IBringIntoViewOptions2 members

    /// Controls the positioning of the vertical axis of the TargetRect with respect to the vertical axis of the viewport. The value is clamped from 0.0f to 1.0f with 0.0f representing the left vertical edge and 1.0f representing the right vertical edge. By default this is set to 0.0f.
    /// - Returns: A value that specifies the positioning of the vertical axis of the TargetRect with respect to the vertical axis of the viewport. The default is 0.0f.
    public var horizontalAlignmentRatio: Swift.Double {
        get throws {
            try _ibringIntoViewOptions2.get_HorizontalAlignmentRatio()
        }
    }

    /// Controls the positioning of the vertical axis of the TargetRect with respect to the vertical axis of the viewport. The value is clamped from 0.0f to 1.0f with 0.0f representing the left vertical edge and 1.0f representing the right vertical edge. By default this is set to 0.0f.
    /// - Returns: A value that specifies the positioning of the vertical axis of the TargetRect with respect to the vertical axis of the viewport. The default is 0.0f.
    public func horizontalAlignmentRatio(_ value: Swift.Double) throws {
        try _ibringIntoViewOptions2.put_HorizontalAlignmentRatio(value)
    }

    /// Gets or sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    /// - Returns: The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _ibringIntoViewOptions2.get_HorizontalOffset()
        }
    }

    /// Gets or sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    /// - Returns: The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public func horizontalOffset(_ value: Swift.Double) throws {
        try _ibringIntoViewOptions2.put_HorizontalOffset(value)
    }

    /// Controls the positioning of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport. The value is clamped from 0.0f to 1.0f with 0.0f representing the top horizontal edge and 1.0f representing the bottom horizontal edge. By default this is set to 0.0f.
    /// - Returns: A value that specifies the positioning of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport. The default is 0.0f.
    public var verticalAlignmentRatio: Swift.Double {
        get throws {
            try _ibringIntoViewOptions2.get_VerticalAlignmentRatio()
        }
    }

    /// Controls the positioning of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport. The value is clamped from 0.0f to 1.0f with 0.0f representing the top horizontal edge and 1.0f representing the bottom horizontal edge. By default this is set to 0.0f.
    /// - Returns: A value that specifies the positioning of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport. The default is 0.0f.
    public func verticalAlignmentRatio(_ value: Swift.Double) throws {
        try _ibringIntoViewOptions2.put_VerticalAlignmentRatio(value)
    }

    /// Gets or sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    /// - Returns: The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public var verticalOffset: Swift.Double {
        get throws {
            try _ibringIntoViewOptions2.get_VerticalOffset()
        }
    }

    /// Gets or sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    /// - Returns: The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public func verticalOffset(_ value: Swift.Double) throws {
        try _ibringIntoViewOptions2.put_VerticalOffset(value)
    }

    // MARK: Implementation details

    private var _ibringIntoViewOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IBringIntoViewOptions2>? = nil

    internal var _ibringIntoViewOptions2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IBringIntoViewOptions2> {
        get throws {
            try _ibringIntoViewOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IBringIntoViewOptions2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IBringIntoViewOptions2.self)
            }
        }
    }

    deinit {
        _ibringIntoViewOptions2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.BringIntoViewOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}