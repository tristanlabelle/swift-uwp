// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that applies visual states conditionally.
public final class WindowsUIXaml_StateTrigger: WindowsRuntime.WinRTImport<WindowsUIXaml_StateTriggerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXaml_StateTriggerProjection.self))
    }

    // MARK: Windows.UI.Xaml.IStateTrigger members

    /// Gets or sets a value that indicates whether the trigger should be applied.
    /// - Returns: **true** if the system should apply the trigger; otherwise, **false**.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets or sets a value that indicates whether the trigger should be applied.
    /// - Returns: **true** if the system should apply the trigger; otherwise, **false**.
    public func isActive(_ value: Swift.Bool) throws {
        try _interop.put_IsActive(value)
    }

    // MARK: Windows.UI.Xaml.IStateTriggerStatics members

    /// Identifies the IsActive  dependency property.
    /// - Returns: The identifier for the IsActive  dependency property.
    public static var isActiveProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_istateTriggerStatics.get_IsActiveProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.StateTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _istateTriggerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IStateTriggerStatics>? = nil

    internal static var _istateTriggerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IStateTriggerStatics> {
        get throws {
            try _istateTriggerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.StateTrigger", id: CWinRT.SWRT_WindowsUIXaml_IStateTriggerStatics.iid)
            }
        }
    }
}