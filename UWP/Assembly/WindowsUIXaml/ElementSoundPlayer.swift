// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a player for XAML control sounds.
public final class WindowsUIXaml_ElementSoundPlayer: WindowsRuntime.WinRTImport<WindowsUIXaml_ElementSoundPlayerProjection> {
    // MARK: Windows.UI.Xaml.IElementSoundPlayerStatics2 members

    /// Gets or sets a value that indicates whether spatial audio is on, off, or handled automatically.
    /// - Returns: An enumeration value that indicates whether spatial audio is on, off, or handled automatically. The default is **Auto**.
    public static var spatialAudioMode: WindowsUIXaml_ElementSpatialAudioMode {
        get throws {
            try _ielementSoundPlayerStatics2.get_SpatialAudioMode()
        }
    }

    /// Gets or sets a value that indicates whether spatial audio is on, off, or handled automatically.
    /// - Returns: An enumeration value that indicates whether spatial audio is on, off, or handled automatically. The default is **Auto**.
    public static func spatialAudioMode(_ value: WindowsUIXaml_ElementSpatialAudioMode) throws {
        try _ielementSoundPlayerStatics2.put_SpatialAudioMode(value)
    }

    // MARK: Windows.UI.Xaml.IElementSoundPlayerStatics members

    /// Gets or sets a value that specifies whether the system plays control sounds.
    /// - Returns: A value of the enumeration that specifies whether the system plays control sounds. The default is **Auto**.
    public static var state: WindowsUIXaml_ElementSoundPlayerState {
        get throws {
            try _ielementSoundPlayerStatics.get_State()
        }
    }

    /// Gets or sets a value that specifies whether the system plays control sounds.
    /// - Returns: A value of the enumeration that specifies whether the system plays control sounds. The default is **Auto**.
    public static func state(_ value: WindowsUIXaml_ElementSoundPlayerState) throws {
        try _ielementSoundPlayerStatics.put_State(value)
    }

    /// Gets or sets the volume of the sounds played by the Play method.
    /// - Returns: The volume of the sounds played by the Play method. The default is 1.0.
    public static var volume: Swift.Double {
        get throws {
            try _ielementSoundPlayerStatics.get_Volume()
        }
    }

    /// Gets or sets the volume of the sounds played by the Play method.
    /// - Returns: The volume of the sounds played by the Play method. The default is 1.0.
    public static func volume(_ value: Swift.Double) throws {
        try _ielementSoundPlayerStatics.put_Volume(value)
    }

    /// Plays the specified sound.
    /// - Parameter sound: A value of the enumeration that specifies the sound to play.
    public static func play(_ sound: WindowsUIXaml_ElementSoundKind) throws {
        try _ielementSoundPlayerStatics.play(sound)
    }

    // MARK: Implementation details

    private static var _ielementSoundPlayerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics2>? = nil

    internal static var _ielementSoundPlayerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics2> {
        get throws {
            try _ielementSoundPlayerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.ElementSoundPlayer", id: CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics2.iid)
            }
        }
    }

    private static var _ielementSoundPlayerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics>? = nil

    internal static var _ielementSoundPlayerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics> {
        get throws {
            try _ielementSoundPlayerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.ElementSoundPlayer", id: CWinRT.SWRT_WindowsUIXaml_IElementSoundPlayerStatics.iid)
            }
        }
    }
}