// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates an element tree of elements. FrameworkTemplate is a base class for classes that have specific templating behavior, including ControlTemplate and DataTemplate.
open class WindowsUIXaml_FrameworkTemplate: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IFrameworkTemplateFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_FrameworkTemplate.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iframeworkTemplateFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Implementation details

    private var _iframeworkTemplate_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplate>? = nil

    internal var _iframeworkTemplate: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplate> {
        get throws {
            try _iframeworkTemplate_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplate.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplate.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplate>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iframeworkTemplate_storage?.release()
    }

    private static var _iframeworkTemplateFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplateFactory>? = nil

    internal static var _iframeworkTemplateFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplateFactory> {
        get throws {
            try _iframeworkTemplateFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.FrameworkTemplate", id: CWinRT.SWRT_WindowsUIXaml_IFrameworkTemplateFactory.iid)
            }
        }
    }
}