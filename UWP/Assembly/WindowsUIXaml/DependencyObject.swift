// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an object that participates in the dependency property system.Â DependencyObject is the immediate base class of many important UI-related classes, such as UIElement, Geometry, FrameworkTemplate, Style, and ResourceDictionary. For more info on how DependencyObject supports dependency properties, see Dependency properties overview.
open class WindowsUIXaml_DependencyObject: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.IDependencyObjectFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXaml_DependencyObject.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._idependencyObjectFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.IDependencyObject members

    /// Gets the CoreDispatcher that this object is associated with. The CoreDispatcher represents a facility that can access the DependencyObject on the UI thread even if the code is initiated by a non-UI thread.
    /// - Returns: The CoreDispatcher that DependencyObject object is associated with, which represents the UI thread.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_idependencyObject.get_Dispatcher())
        }
    }

    /// Returns the current effective value of a dependency property from a DependencyObject.
    /// - Parameter dp: The DependencyProperty identifier of the property for which to retrieve the value.
    /// - Returns: Returns the current effective value.
    public func getValue(_ dp: WindowsUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_idependencyObject.getValue(dp))
    }

    /// Sets the local value of a dependency property on a DependencyObject.
    /// - Parameter dp: The identifier of the dependency property to set.
    /// - Parameter value: The new local value.
    public func setValue(_ dp: WindowsUIXaml_DependencyProperty?, _ value: WindowsRuntime.IInspectable?) throws {
        try _idependencyObject.setValue(dp, value)
    }

    /// Clears the local value of a dependency property.
    /// - Parameter dp: The DependencyProperty identifier of the property for which to clear the value.
    public func clearValue(_ dp: WindowsUIXaml_DependencyProperty?) throws {
        try _idependencyObject.clearValue(dp)
    }

    /// Returns the local value of a dependency property, if a local value is set.
    /// - Parameter dp: The DependencyProperty identifier of the property for which to retrieve the local value.
    /// - Returns: Returns the local value, or returns the sentinel value UnsetValue if no local value is set.
    public func readLocalValue(_ dp: WindowsUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_idependencyObject.readLocalValue(dp))
    }

    /// Returns any base value established for a dependency property, which would apply in cases where an animation is not active.
    /// - Parameter dp: The identifier for the desired dependency property.
    /// - Returns: The returned base value.
    public func getAnimationBaseValue(_ dp: WindowsUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_idependencyObject.getAnimationBaseValue(dp))
    }

    // MARK: Windows.UI.Xaml.IDependencyObject2 members

    /// Registers a notification function for listening to changes to a specific DependencyProperty on this DependencyObject instance.
    /// - Parameter dp: The dependency property identifier of the property to register for property-changed notification.
    /// - Parameter callback: A callback based on the DependencyPropertyChangedCallback delegate, which the system invokes when the value of the specified property changes.
    /// - Returns: A token that represents the callback, used to identify the callback in calls to UnregisterPropertyChangedCallback.
    public func registerPropertyChangedCallback(_ dp: WindowsUIXaml_DependencyProperty?, _ callback: WindowsUIXaml_DependencyPropertyChangedCallback?) throws -> Swift.Int64 {
        try _idependencyObject2.registerPropertyChangedCallback(dp, callback)
    }

    /// Cancels a change notification that was previously registered by calling RegisterPropertyChangedCallback.
    /// - Parameter dp: The dependency property identifier of the property to unregister for property-changed notification.
    /// - Parameter token: A token that represents the callback (returned by RegisterPropertyChangedCallback ).
    public func unregisterPropertyChangedCallback(_ dp: WindowsUIXaml_DependencyProperty?, _ token: Swift.Int64) throws {
        try _idependencyObject2.unregisterPropertyChangedCallback(dp, token)
    }

    // MARK: Implementation details

    private var _idependencyObject_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObject>? = nil

    internal var _idependencyObject: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObject> {
        get throws {
            try _idependencyObject_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDependencyObject.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDependencyObject.self)
            }
        }
    }

    private var _idependencyObject2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObject2>? = nil

    internal var _idependencyObject2: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObject2> {
        get throws {
            try _idependencyObject2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXaml_IDependencyObject2.iid).cast(to: CWinRT.SWRT_WindowsUIXaml_IDependencyObject2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXaml_IDependencyObject>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _idependencyObject_storage?.release()
        _idependencyObject2_storage?.release()
    }

    private static var _idependencyObjectFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObjectFactory>? = nil

    internal static var _idependencyObjectFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXaml_IDependencyObjectFactory> {
        get throws {
            try _idependencyObjectFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.DependencyObject", id: CWinRT.SWRT_WindowsUIXaml_IDependencyObjectFactory.iid)
            }
        }
    }
}