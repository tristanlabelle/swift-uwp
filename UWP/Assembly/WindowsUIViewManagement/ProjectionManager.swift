// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines a set of methods for managing the windows (app views) sent to secondary displays, such as projectors.
public enum WindowsUIViewManagement_ProjectionManager {
    // MARK: Windows.UI.ViewManagement.IProjectionManagerStatics2 members

    /// Asynchronously sends a window (app view) to the projector or other secondary display, and provides info about the display.
    /// - Parameter projectionViewId: The new ID of the window to be displayed by the projector or other secondary display.
    /// - Parameter anchorViewId: The ID of the original window before projection.
    /// - Parameter displayDeviceInfo: Information about the display device.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func startProjectingAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32, _ displayDeviceInfo: WindowsDevicesEnumeration_DeviceInformation?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iprojectionManagerStatics2.startProjectingWithDeviceInfoAsync(projectionViewId, anchorViewId, displayDeviceInfo))
    }

    /// Makes a request to asynchronously sends a window (app view) to the projector or other secondary display.
    /// - Parameter projectionViewId: The new ID of the window to be displayed by the projector or other secondary display.
    /// - Parameter anchorViewId: The ID of the original window before projection.
    /// - Parameter selection: The area to one side of which the flyout is displayed.
    /// - Returns: **true** if projection started; otherwise, **false**.
    public static func requestStartProjectingAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32, _ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iprojectionManagerStatics2.requestStartProjectingAsync(projectionViewId, anchorViewId, selection))
    }

    /// Makes a request to asynchronously sends a window (app view) to the projector or other secondary display with the specified preferred placement.
    /// - Parameter projectionViewId: The new ID of the window to be displayed by the projector or other secondary display.
    /// - Parameter anchorViewId: The ID of the original window before projection.
    /// - Parameter selection: The area to one side of which the flyout is displayed.
    /// - Parameter prefferedPlacement: The side of the rectangle where the flyout should appear.
    /// - Returns: **true** if projection started; otherwise, **false**.
    public static func requestStartProjectingAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32, _ selection: WindowsFoundation_Rect, _ prefferedPlacement: WindowsUIPopups_Placement) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iprojectionManagerStatics2.requestStartProjectingWithPlacementAsync(projectionViewId, anchorViewId, selection, prefferedPlacement))
    }

    /// Returns a string that is used to enumerate device services.
    /// - Returns: A string that is used to enumerate device services.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iprojectionManagerStatics2.getDeviceSelector()
    }

    // MARK: Windows.UI.ViewManagement.IProjectionManagerStatics members

    /// Gets whether or not a projection display is available to use.
    /// - Returns: **true** if a projection display is available on the current computer; **false** if it is not.
    public static var projectionDisplayAvailable: Swift.Bool {
        get throws {
            try _iprojectionManagerStatics.get_ProjectionDisplayAvailable()
        }
    }

    /// Occurs when a projector or other secondary display becomes available or unavailable.
    public static func projectionDisplayAvailableChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iprojectionManagerStatics.add_ProjectionDisplayAvailableChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: projectionDisplayAvailableChanged)
    }

    public static func projectionDisplayAvailableChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iprojectionManagerStatics.remove_ProjectionDisplayAvailableChanged(token)
    }

    /// Asynchronously sends a window (app view) to the projector or other secondary display.
    /// - Parameter projectionViewId: The new ID of the window to be displayed by the projector or other secondary display.
    /// - Parameter anchorViewId: The ID of the original window before projection.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func startProjectingAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iprojectionManagerStatics.startProjectingAsync(projectionViewId, anchorViewId))
    }

    /// Asynchronously swaps the calling window (app view) with the window displayed on the projector or other secondary display. The result is that the calling window is displayed on the projector, and the formerly projected window is displayed on the device screen.
    /// - Parameter projectionViewId: The ID of the window currently displayed by the projector.
    /// - Parameter anchorViewId: The ID of the window to swap with the projected window.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func swapDisplaysForViewsAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iprojectionManagerStatics.swapDisplaysForViewsAsync(projectionViewId, anchorViewId))
    }

    /// Asynchronously hides a window (app view) displayed by a projector or other secondary display.
    /// - Parameter projectionViewId: The ID of the window currently displayed by the projector or other secondary display.
    /// - Parameter anchorViewId: The ID of the original window before projection.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func stopProjectingAsync(_ projectionViewId: Swift.Int32, _ anchorViewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iprojectionManagerStatics.stopProjectingAsync(projectionViewId, anchorViewId))
    }

    // MARK: Implementation details

    private static var _iprojectionManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics2>? = nil

    internal static var _iprojectionManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics2> {
        get throws {
            try _iprojectionManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ProjectionManager", id: CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics2.iid)
            }
        }
    }

    private static var _iprojectionManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics>? = nil

    internal static var _iprojectionManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics> {
        get throws {
            try _iprojectionManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ProjectionManager", id: CWinRT.SWRT_WindowsUIViewManagement_IProjectionManagerStatics.iid)
            }
        }
    }
}