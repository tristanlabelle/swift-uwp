// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the app view switching behaviors for an app.
public enum WindowsUIViewManagement_ApplicationViewSwitcher {
    // MARK: Windows.UI.ViewManagement.IApplicationViewSwitcherStatics2 members

    /// Disables Windows shell control of the view selection on activation, and lets the app handle it instead.
    public static func disableSystemViewActivationPolicy() throws {
        try _iapplicationViewSwitcherStatics2.disableSystemViewActivationPolicy()
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewSwitcherStatics members

    /// Disables the primary window (app view) when the app is activated, showing the most recently displayed window instead.
    public static func disableShowingMainViewOnActivation() throws {
        try _iapplicationViewSwitcherStatics.disableShowingMainViewOnActivation()
    }

    /// Displays another window (app view) for the app on the screen, adjacent to the original window
    /// - Parameter viewId: The ID of the new window to display.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func tryShowAsStandaloneAsync(_ viewId: Swift.Int32) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.tryShowAsStandaloneAsync(viewId))
    }

    /// Displays another window (app view) for the app on the screen, adjacent to the original window
    /// - Parameter viewId: The ID of the new window to display.
    /// - Parameter sizePreference: The preferred general sizing of the new window.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func tryShowAsStandaloneAsync(_ viewId: Swift.Int32, _ sizePreference: WindowsUIViewManagement_ViewSizePreference) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.tryShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference))
    }

    /// Displays another window (app view) for the app on the screen, adjacent to the original window.
    /// - Parameter viewId: The ID of the new window to display.
    /// - Parameter sizePreference: The preferred general sizing of the new window.
    /// - Parameter anchorViewId: The ID of the calling (anchor) window.
    /// - Parameter anchorSizePreference: The preferred new general sizing of the calling window if this call succeeds.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func tryShowAsStandaloneAsync(_ viewId: Swift.Int32, _ sizePreference: WindowsUIViewManagement_ViewSizePreference, _ anchorViewId: Swift.Int32, _ anchorSizePreference: WindowsUIViewManagement_ViewSizePreference) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.tryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(viewId, sizePreference, anchorViewId, anchorSizePreference))
    }

    /// Visually replaces the calling window (app view) with a specified window.
    /// - Parameter viewId: The ID of the window under preparation for display.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func switchAsync(_ viewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.switchAsync(viewId))
    }

    /// Visually replaces the calling window (app view) with a specified window.
    /// - Parameter toViewId: The ID of the window under preparation for display.
    /// - Parameter fromViewId: The ID of the calling, currently displayed window.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func switchAsync(_ toViewId: Swift.Int32, _ fromViewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.switchFromViewAsync(toViewId, fromViewId))
    }

    /// Visually replaces the calling window (app view) with a specified window.
    /// - Parameter toViewId: The ID of the window under preparation for display.
    /// - Parameter fromViewId: The ID of the calling, currently displayed window.
    /// - Parameter options: Options for the display transition behaviors.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public static func switchAsync(_ toViewId: Swift.Int32, _ fromViewId: Swift.Int32, _ options: WindowsUIViewManagement_ApplicationViewSwitchingOptions) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.switchFromViewWithOptionsAsync(toViewId, fromViewId, options))
    }

    /// Prepares your app to visually transition between two windows with a custom animation.
    /// - Parameter toViewId: The ID of the window from which your app is transitioning.
    /// - Parameter fromViewId: The ID of the window to which your app is transitioning.
    /// - Parameter options: Enumeration value that specifies thw view switching behaviors.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func prepareForCustomAnimatedSwitchAsync(_ toViewId: Swift.Int32, _ fromViewId: Swift.Int32, _ options: WindowsUIViewManagement_ApplicationViewSwitchingOptions) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics.prepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options))
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewSwitcherStatics3 members

    /// Displays a view as a standalone view in the desired view mode.
    /// - Parameter viewId: The ID of the window to display.
    /// - Parameter viewMode: The desired view mode for the window.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func tryShowAsViewModeAsync(_ viewId: Swift.Int32, _ viewMode: WindowsUIViewManagement_ApplicationViewMode) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics3.tryShowAsViewModeAsync(viewId, viewMode))
    }

    /// Displays a view as a standalone view in the desired view mode with the specified options.
    /// - Parameter viewId: The ID of the window to display.
    /// - Parameter viewMode: The desired view mode for the window.
    /// - Parameter viewModePreferences: Preferred settings for the desired view mode.
    /// - Returns: Asynchronously returns **true** if the call succeeds; **false** if it does not.
    public static func tryShowAsViewModeAsync(_ viewId: Swift.Int32, _ viewMode: WindowsUIViewManagement_ApplicationViewMode, _ viewModePreferences: WindowsUIViewManagement_ViewModePreferences?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationViewSwitcherStatics3.tryShowAsViewModeWithPreferencesAsync(viewId, viewMode, viewModePreferences))
    }

    // MARK: Implementation details

    private static var _iapplicationViewSwitcherStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics2>? = nil

    internal static var _iapplicationViewSwitcherStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics2> {
        get throws {
            try _iapplicationViewSwitcherStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationViewSwitcher", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics2.iid)
            }
        }
    }

    private static var _iapplicationViewSwitcherStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics>? = nil

    internal static var _iapplicationViewSwitcherStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics> {
        get throws {
            try _iapplicationViewSwitcherStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationViewSwitcher", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics.iid)
            }
        }
    }

    private static var _iapplicationViewSwitcherStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics3>? = nil

    internal static var _iapplicationViewSwitcherStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics3> {
        get throws {
            try _iapplicationViewSwitcherStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationViewSwitcher", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewSwitcherStatics3.iid)
            }
        }
    }
}