// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the active application view and associated states and behaviors.
public final class WindowsUIViewManagement_ApplicationView: WindowsRuntime.WinRTImport<WindowsUIViewManagement_ApplicationViewProjection> {
    // MARK: Windows.UI.ViewManagement.IApplicationView members

    /// Gets a value that indicates whether the current window is in close proximity to the left edge of the screen.
    /// - Returns: **true** if the current window is in close proximity to the left edge of the screen; otherwise, **false**.
    public var adjacentToLeftDisplayEdge: Swift.Bool {
        get throws {
            try _interop.get_AdjacentToLeftDisplayEdge()
        }
    }

    /// Gets a value that indicates whether the current window is in close proximity to the right edge of the screen.
    /// - Returns: **true** if the current window is in close proximity to the right edge of the screen; otherwise, **false**.
    public var adjacentToRightDisplayEdge: Swift.Bool {
        get throws {
            try _interop.get_AdjacentToRightDisplayEdge()
        }
    }

    /// Gets the ID of the window (app view).
    /// - Returns: The ID of the window. It is unique for all windows managed by the app.
    public var id: Swift.Int32 {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a value that indicates whether the window touches both the left and right sides of the display.
    /// - Returns: **true** if the window touches both the left and right sides of the display; otherwise, **false**.
    public var isFullScreen: Swift.Bool {
        get throws {
            try _interop.get_IsFullScreen()
        }
    }

    /// Gets whether the window (app view) is on the Windows lock screen.
    /// - Returns: **true** if the calling window is on the lock screen; **false** if it is not.
    public var isOnLockScreen: Swift.Bool {
        get throws {
            try _interop.get_IsOnLockScreen()
        }
    }

    /// Gets or sets whether screen capture is enabled for the window (app view).
    /// - Returns: **true** if screen capture is enabled for the window; **false** if it is not.
    public var isScreenCaptureEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsScreenCaptureEnabled()
        }
    }

    /// Gets or sets whether screen capture is enabled for the window (app view).
    /// - Returns: **true** if screen capture is enabled for the window; **false** if it is not.
    public func isScreenCaptureEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsScreenCaptureEnabled(value)
    }

    /// Gets the current orientation (landscape or portrait) of the window (app view) with respect to the display.
    /// - Returns: The current orientation of the calling window.
    public var orientation: WindowsUIViewManagement_ApplicationViewOrientation {
        get throws {
            try _interop.get_Orientation()
        }
    }

    /// Gets or sets the displayed title of the window.
    /// - Returns: The title of the window.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Gets or sets the displayed title of the window.
    /// - Returns: The title of the window.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Occurs when the window is removed from the list of recently used apps, or if the user executes a close gesture on it.
    public func consolidated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_ApplicationView?, WindowsUIViewManagement_ApplicationViewConsolidatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Consolidated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: consolidated)
    }

    public func consolidated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Consolidated(token)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationView2 members

    /// Gets a value that indicates the bounds used by the framework to lay out the contents of the window (app view).
    /// - Returns: The current layout bounds of the window. The default is **UseVisible**.
    public var desiredBoundsMode: WindowsUIViewManagement_ApplicationViewBoundsMode {
        get throws {
            try _iapplicationView2.get_DesiredBoundsMode()
        }
    }

    /// Gets or sets a value indicating whether or not system overlays (such as overlay applications or the soft steering wheel) should be shown.
    /// - Returns: **true** if system overlays (such as overlay applications or the soft steering wheel) should be shown; otherwise, **false**.
    public var suppressSystemOverlays: Swift.Bool {
        get throws {
            try _iapplicationView2.get_SuppressSystemOverlays()
        }
    }

    /// Gets or sets a value indicating whether or not system overlays (such as overlay applications or the soft steering wheel) should be shown.
    /// - Returns: **true** if system overlays (such as overlay applications or the soft steering wheel) should be shown; otherwise, **false**.
    public func suppressSystemOverlays(_ value: Swift.Bool) throws {
        try _iapplicationView2.put_SuppressSystemOverlays(value)
    }

    /// Gets the visible region of the window (app view). The visible region is the region not occluded by chrome such as the status bar and app bar.
    /// - Returns: The visible region of the window (app view).
    public var visibleBounds: WindowsFoundation_Rect {
        get throws {
            try _iapplicationView2.get_VisibleBounds()
        }
    }

    /// This event is raised when the value of VisibleBounds changes, typically as a result of the status bar, app bar, or other chrome being shown or hidden.
    public func visibleBoundsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_ApplicationView?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplicationView2.add_VisibleBoundsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: visibleBoundsChanged)
    }

    public func visibleBoundsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplicationView2.remove_VisibleBoundsChanged(token)
    }

    /// Sets a value indicating the bounds used by the framework to lay out the contents of the window (app view).
    /// - Parameter boundsMode: The bounds that the framework should use to lay out the contents of the window (app view).
    /// - Returns: **true** to confirm that the change to DesiredBoundsMode was successful; otherwise, **false**.
    public func setDesiredBoundsMode(_ boundsMode: WindowsUIViewManagement_ApplicationViewBoundsMode) throws -> Swift.Bool {
        try _iapplicationView2.setDesiredBoundsMode(boundsMode)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationView3 members

    /// Gets or sets a value that indicates how an app in full-screen mode responds to edge swipe actions.
    /// - Returns: A value from the FullScreenSystemOverlayMode enumeration that indicates how an app in full-screen mode responds to edge swipe actions.
    public var fullScreenSystemOverlayMode: WindowsUIViewManagement_FullScreenSystemOverlayMode {
        get throws {
            try _iapplicationView3.get_FullScreenSystemOverlayMode()
        }
    }

    /// Gets or sets a value that indicates how an app in full-screen mode responds to edge swipe actions.
    /// - Returns: A value from the FullScreenSystemOverlayMode enumeration that indicates how an app in full-screen mode responds to edge swipe actions.
    public func fullScreenSystemOverlayMode(_ value: WindowsUIViewManagement_FullScreenSystemOverlayMode) throws {
        try _iapplicationView3.put_FullScreenSystemOverlayMode(value)
    }

    /// Gets a value that indicates whether the app is running in full-screen mode.
    /// - Returns: **true** if the app is running in full-screen mode; otherwise, **false**. The default is **false**.
    public var isFullScreenMode: Swift.Bool {
        get throws {
            try _iapplicationView3.get_IsFullScreenMode()
        }
    }

    /// Gets the title bar of the app.
    /// - Returns: The title bar of the app.
    public var titleBar: WindowsUIViewManagement_ApplicationViewTitleBar {
        get throws {
            try COM.NullResult.unwrap(_iapplicationView3.get_TitleBar())
        }
    }

    /// Attempts to place the app in full-screen mode.
    /// - Returns: **true** if the app is placed in full-screen mode; otherwise, **false**.
    public func tryEnterFullScreenMode() throws -> Swift.Bool {
        try _iapplicationView3.tryEnterFullScreenMode()
    }

    /// Takes the app out of full-screen mode.
    public func exitFullScreenMode() throws {
        try _iapplicationView3.exitFullScreenMode()
    }

    /// Shows system UI elements, like the title bar, over a full-screen app.
    public func showStandardSystemOverlays() throws {
        try _iapplicationView3.showStandardSystemOverlays()
    }

    /// Attempts to change the size of the view to the specified size in effective pixels.
    /// - Parameter value: The new size of the view in effective pixels.
    /// - Returns: **true** if the view is resized to the requested size; otherwise, **false**.
    public func tryResizeView(_ value: WindowsFoundation_Size) throws -> Swift.Bool {
        try _iapplicationView3.tryResizeView(value)
    }

    /// Sets the smallest size, in effective pixels, allowed for the app window.
    /// - Parameter minSize: The smallest size allowed for the app window, or a Size whose height and width are both zero to use the system default minimum size.
    public func setPreferredMinSize(_ minSize: WindowsFoundation_Size) throws {
        try _iapplicationView3.setPreferredMinSize(minSize)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationView4 members

    /// Gets the app view mode for the current view.
    /// - Returns: A value of the enumeration that indicates the view mode of the current view.
    public var viewMode: WindowsUIViewManagement_ApplicationViewMode {
        get throws {
            try _iapplicationView4.get_ViewMode()
        }
    }

    /// Determines whether the specified view mode is supported on the current device.
    /// - Parameter viewMode: A value of the enumeration that indicates the desired view mode.
    /// - Returns: **true** if the specified view mode is supported; otherwise, **false**.
    public func isViewModeSupported(_ viewMode: WindowsUIViewManagement_ApplicationViewMode) throws -> Swift.Bool {
        try _iapplicationView4.isViewModeSupported(viewMode)
    }

    /// Attempts to change the app view to the specified view mode.
    /// - Parameter viewMode: A value of the enumeration that indicates the desired view mode.
    /// - Returns: **true** if the app view was changed to the specified view mode; otherwise, **false**.
    public func tryEnterViewModeAsync(_ viewMode: WindowsUIViewManagement_ApplicationViewMode) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationView4.tryEnterViewModeAsync(viewMode))
    }

    /// Attempts to change the app view to the specified view mode using the specified options.
    /// - Parameter viewMode: A value of the enumeration that indicates the desired view mode.
    /// - Parameter viewModePreferences: Preferred settings for the desired view mode.
    /// - Returns: **true** if the app view was changed to the specified view mode; otherwise, **false**.
    public func tryEnterViewModeAsync(_ viewMode: WindowsUIViewManagement_ApplicationViewMode, _ viewModePreferences: WindowsUIViewManagement_ViewModePreferences?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationView4.tryEnterViewModeWithPreferencesAsync(viewMode, viewModePreferences))
    }

    /// Tries to close the current app view. This method is a programmatic equivalent to a user initiating a close gesture for the app view.
    /// - Returns: **true** if the app views are consolidated; otherwise, **false**.
    public func tryConsolidateAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iapplicationView4.tryConsolidateAsync())
    }

    // MARK: Windows.UI.ViewManagement.IApplicationView7 members

    /// Gets or sets a string that identifies this view for tracking and saving state.
    /// - Returns: A string that identifies this view for tracking and saving state.
    public var persistedStateId: Swift.String {
        get throws {
            try _iapplicationView7.get_PersistedStateId()
        }
    }

    /// Gets or sets a string that identifies this view for tracking and saving state.
    /// - Returns: A string that identifies this view for tracking and saving state.
    public func persistedStateId(_ value: Swift.String) throws {
        try _iapplicationView7.put_PersistedStateId(value)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationView9 members

    /// Gets the windowing environment for the view.
    /// - Returns: The windowing environment for the view.
    public var windowingEnvironment: WindowsUIWindowManagement_WindowingEnvironment {
        get throws {
            try COM.NullResult.unwrap(_iapplicationView9.get_WindowingEnvironment())
        }
    }

    /// Returns the collection of display regions available for the view.
    /// - Returns: The collection of display regions available for the view.
    public func getDisplayRegions() throws -> WindowsFoundationCollections_IVectorView<WindowsUIWindowManagement_DisplayRegion?> {
        try COM.NullResult.unwrap(_iapplicationView9.getDisplayRegions())
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewWithContext members

    /// Gets the context identifier for the view.
    /// - Returns: The context identifier for the view.
    public var uicontext: WindowsUI_UIContext {
        get throws {
            try COM.NullResult.unwrap(_iapplicationViewWithContext.get_UIContext())
        }
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewStatics3 members

    /// Gets or sets the size that the app launches with when the ApplicationView.PreferredLaunchWindowingMode property is set to **PreferredLaunchViewSize**, except in cases where the system manages the window size directly.
    /// - Returns: The size that the app launches with when the ApplicationView.PreferredLaunchWindowingMode property is set to **PreferredLaunchViewSize**, except in cases where the system manages the window size directly.
    public static var preferredLaunchViewSize: WindowsFoundation_Size {
        get throws {
            try _iapplicationViewStatics3.get_PreferredLaunchViewSize()
        }
    }

    /// Gets or sets the size that the app launches with when the ApplicationView.PreferredLaunchWindowingMode property is set to **PreferredLaunchViewSize**, except in cases where the system manages the window size directly.
    /// - Returns: The size that the app launches with when the ApplicationView.PreferredLaunchWindowingMode property is set to **PreferredLaunchViewSize**, except in cases where the system manages the window size directly.
    public static func preferredLaunchViewSize(_ value: WindowsFoundation_Size) throws {
        try _iapplicationViewStatics3.put_PreferredLaunchViewSize(value)
    }

    /// Gets or sets a value that indicates the windowing mode the app launches with.
    /// - Returns: An enumeration value that indicates the windowing mode of the app.
    public static var preferredLaunchWindowingMode: WindowsUIViewManagement_ApplicationViewWindowingMode {
        get throws {
            try _iapplicationViewStatics3.get_PreferredLaunchWindowingMode()
        }
    }

    /// Gets or sets a value that indicates the windowing mode the app launches with.
    /// - Returns: An enumeration value that indicates the windowing mode of the app.
    public static func preferredLaunchWindowingMode(_ value: WindowsUIViewManagement_ApplicationViewWindowingMode) throws {
        try _iapplicationViewStatics3.put_PreferredLaunchWindowingMode(value)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewStatics4 members

    /// Clears any properties the system has saved for any view PersistedStateId for the given application.
    public static func clearAllPersistedState() throws {
        try _iapplicationViewStatics4.clearAllPersistedState()
    }

    /// Clears any properties the system has saved for the view with the specified identifier for the given application.
    /// - Parameter key: The PersistedStateId for the view to be cleared.
    public static func clearPersistedState(_ key: Swift.String) throws {
        try _iapplicationViewStatics4.clearPersistedState(key)
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewFullscreenStatics members

    /// Attempts to unsnap a previously snapped app.
    /// - Returns: **true** if the app has been successfully unsnapped; **false** if the unsnap attempt failed.
    public static func tryUnsnapToFullscreen() throws -> Swift.Bool {
        try _iapplicationViewFullscreenStatics.tryUnsnapToFullscreen()
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewStatics2 members

    /// Indicates whether the app terminates when the last window is closed.
    /// - Returns: **true** if the app terminates when the last open window is closed; **false** if it doesn't terminate.
    public static var terminateAppOnFinalViewClose: Swift.Bool {
        get throws {
            try _iapplicationViewStatics2.get_TerminateAppOnFinalViewClose()
        }
    }

    /// Indicates whether the app terminates when the last window is closed.
    /// - Returns: **true** if the app terminates when the last open window is closed; **false** if it doesn't terminate.
    public static func terminateAppOnFinalViewClose(_ value: Swift.Bool) throws {
        try _iapplicationViewStatics2.put_TerminateAppOnFinalViewClose(value)
    }

    /// Gets the view state and behavior settings of the active application.
    /// - Returns: An ApplicationView instance that can be used to get and set app display properties.
    public static func getForCurrentView() throws -> WindowsUIViewManagement_ApplicationView {
        try COM.NullResult.unwrap(_iapplicationViewStatics2.getForCurrentView())
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewStatics members

    /// Gets the state of the current window (app view).
    /// - Returns: The state of the current window (app view). This state indicates the orientation (landscape or portrait) and whether or not the app is snapped.
    public static var value: WindowsUIViewManagement_ApplicationViewState {
        get throws {
            try _iapplicationViewStatics.get_Value()
        }
    }

    /// Attempts to unsnap a previously snapped app. This call will only succeed when the app is running in the foreground.
    /// - Returns: **true** if the app has been successfully unsnapped; **false** if the unsnap attempt failed.
    public static func tryUnsnap() throws -> Swift.Bool {
        try _iapplicationViewStatics.tryUnsnap()
    }

    // MARK: Windows.UI.ViewManagement.IApplicationViewInteropStatics members

    /// Gets the window ID that corresponds to a specific CoreWindow managed by the app.
    /// - Parameter window: Reference to the CoreWindow object that contains a window handle used by the app.
    /// - Returns: The ID of the window associated with the supplied CoreWindow.
    public static func getApplicationViewIdForWindow(_ window: WindowsUICore_ICoreWindow?) throws -> Swift.Int32 {
        try _iapplicationViewInteropStatics.getApplicationViewIdForWindow(window)
    }

    // MARK: Implementation details

    private var _iapplicationView2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView2>? = nil

    internal var _iapplicationView2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView2> {
        get throws {
            try _iapplicationView2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationView2.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationView2.self)
            }
        }
    }

    private var _iapplicationView3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView3>? = nil

    internal var _iapplicationView3: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView3> {
        get throws {
            try _iapplicationView3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationView3.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationView3.self)
            }
        }
    }

    private var _iapplicationView4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView4>? = nil

    internal var _iapplicationView4: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView4> {
        get throws {
            try _iapplicationView4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationView4.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationView4.self)
            }
        }
    }

    private var _iapplicationView7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView7>? = nil

    internal var _iapplicationView7: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView7> {
        get throws {
            try _iapplicationView7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationView7.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationView7.self)
            }
        }
    }

    private var _iapplicationView9_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView9>? = nil

    internal var _iapplicationView9: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationView9> {
        get throws {
            try _iapplicationView9_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationView9.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationView9.self)
            }
        }
    }

    private var _iapplicationViewWithContext_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewWithContext>? = nil

    internal var _iapplicationViewWithContext: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewWithContext> {
        get throws {
            try _iapplicationViewWithContext_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewWithContext.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewWithContext.self)
            }
        }
    }

    deinit {
        _iapplicationView2_storage?.release()
        _iapplicationView3_storage?.release()
        _iapplicationView4_storage?.release()
        _iapplicationView7_storage?.release()
        _iapplicationView9_storage?.release()
        _iapplicationViewWithContext_storage?.release()
    }

    private static var _iapplicationViewStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics3>? = nil

    internal static var _iapplicationViewStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics3> {
        get throws {
            try _iapplicationViewStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics3.iid)
            }
        }
    }

    private static var _iapplicationViewStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics4>? = nil

    internal static var _iapplicationViewStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics4> {
        get throws {
            try _iapplicationViewStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics4.iid)
            }
        }
    }

    private static var _iapplicationViewFullscreenStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewFullscreenStatics>? = nil

    internal static var _iapplicationViewFullscreenStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewFullscreenStatics> {
        get throws {
            try _iapplicationViewFullscreenStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewFullscreenStatics.iid)
            }
        }
    }

    private static var _iapplicationViewStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics2>? = nil

    internal static var _iapplicationViewStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics2> {
        get throws {
            try _iapplicationViewStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics2.iid)
            }
        }
    }

    private static var _iapplicationViewStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics>? = nil

    internal static var _iapplicationViewStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics> {
        get throws {
            try _iapplicationViewStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewStatics.iid)
            }
        }
    }

    private static var _iapplicationViewInteropStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewInteropStatics>? = nil

    internal static var _iapplicationViewInteropStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewInteropStatics> {
        get throws {
            try _iapplicationViewInteropStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.ApplicationView", id: CWinRT.SWRT_WindowsUIViewManagement_IApplicationViewInteropStatics.iid)
            }
        }
    }
}