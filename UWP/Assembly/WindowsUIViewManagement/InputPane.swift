// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Enables an app to receive notifications when the docked touch keyboard, or Soft Input Panel (SIP), is about to be displayed or hidden, and to determine which portion of the application's window is obscured by the input pane.
public final class WindowsUIViewManagement_InputPane: WindowsRuntime.WinRTImport<WindowsUIViewManagement_InputPaneProjection> {
    // MARK: Windows.UI.ViewManagement.IInputPane members

    /// Gets the region of the app window obscured by the input pane.
    /// - Returns: The rectangle, in client coordinates, representing the region of the app window hidden behind the input pane. Specified in device-independent pixel (DIP).
    public var occludedRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_OccludedRect()
        }
    }

    /// Occurs when the input pane starts sliding out of view.
    public func hiding(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_InputPane?, WindowsUIViewManagement_InputPaneVisibilityEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Hiding(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: hiding)
    }

    public func hiding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Hiding(token)
    }

    /// Occurs when the input pane starts sliding into view.
    public func showing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_InputPane?, WindowsUIViewManagement_InputPaneVisibilityEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Showing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: showing)
    }

    public func showing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Showing(token)
    }

    // MARK: Windows.UI.ViewManagement.IInputPane2 members

    /// Tries to show the InputPane, if it is hidden.
    /// - Returns: **true** if the request to show the InputPane was accepted; otherwise **false**.
    public func tryShow() throws -> Swift.Bool {
        try _iinputPane2.tryShow()
    }

    /// Tries to hide the InputPane, if it is visible.
    /// - Returns: **true** if the request to hide the InputPane was accepted; otherwise **false**.
    public func tryHide() throws -> Swift.Bool {
        try _iinputPane2.tryHide()
    }

    // MARK: Windows.UI.ViewManagement.IInputPaneControl members

    /// Gets or sets a value that indicates whether the input pane is shown.
    /// - Returns: **true** if the input pane is shown; otherwise, **false**.
    public var visible: Swift.Bool {
        get throws {
            try _iinputPaneControl.get_Visible()
        }
    }

    /// Gets or sets a value that indicates whether the input pane is shown.
    /// - Returns: **true** if the input pane is shown; otherwise, **false**.
    public func visible(_ value: Swift.Bool) throws {
        try _iinputPaneControl.put_Visible(value)
    }

    // MARK: Windows.UI.ViewManagement.IInputPaneStatics2 members

    /// Gets the InputPane object associated with the view with the specified context identifier.
    /// - Parameter context: The context identifier of the view to get the input pane for.
    /// - Returns: The input pane.
    public static func getForUIContext(_ context: WindowsUI_UIContext?) throws -> WindowsUIViewManagement_InputPane {
        try COM.NullResult.unwrap(_iinputPaneStatics2.getForUIContext(context))
    }

    // MARK: Windows.UI.ViewManagement.IInputPaneStatics members

    /// Gets the InputPane object associated with the application window that is currently visible.
    /// - Returns: The input pane.
    public static func getForCurrentView() throws -> WindowsUIViewManagement_InputPane {
        try COM.NullResult.unwrap(_iinputPaneStatics.getForCurrentView())
    }

    // MARK: Implementation details

    private var _iinputPane2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPane2>? = nil

    internal var _iinputPane2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPane2> {
        get throws {
            try _iinputPane2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IInputPane2.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IInputPane2.self)
            }
        }
    }

    private var _iinputPaneControl_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneControl>? = nil

    internal var _iinputPaneControl: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneControl> {
        get throws {
            try _iinputPaneControl_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IInputPaneControl.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IInputPaneControl.self)
            }
        }
    }

    deinit {
        _iinputPane2_storage?.release()
        _iinputPaneControl_storage?.release()
    }

    private static var _iinputPaneStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics2>? = nil

    internal static var _iinputPaneStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics2> {
        get throws {
            try _iinputPaneStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.InputPane", id: CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics2.iid)
            }
        }
    }

    private static var _iinputPaneStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics>? = nil

    internal static var _iinputPaneStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics> {
        get throws {
            try _iinputPaneStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.InputPane", id: CWinRT.SWRT_WindowsUIViewManagement_IInputPaneStatics.iid)
            }
        }
    }
}