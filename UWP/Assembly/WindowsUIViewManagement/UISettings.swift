// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains a set of common app user interface settings and operations.
public final class WindowsUIViewManagement_UISettings: WindowsRuntime.WinRTImport<WindowsUIViewManagement_UISettingsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIViewManagement_UISettingsProjection.self))
    }

    // MARK: Windows.UI.ViewManagement.IUISettings members

    /// Gets whether animations are enabled for the user interface.
    /// - Returns: **true** if animations are enabled; **false** if not.
    public var animationsEnabled: Swift.Bool {
        get throws {
            try _interop.get_AnimationsEnabled()
        }
    }

    /// Gets the blink rate of a new caret created by the app view.
    /// - Returns: The blink rate of the new caret, in milliseconds.
    public var caretBlinkRate: Swift.UInt32 {
        get throws {
            try _interop.get_CaretBlinkRate()
        }
    }

    /// Gets whether the caret can be used for browse operations.
    /// - Returns: True if the caret can be used for browse operations; false if it cannot.
    public var caretBrowsingEnabled: Swift.Bool {
        get throws {
            try _interop.get_CaretBrowsingEnabled()
        }
    }

    /// Gets the width of a new caret created by the app view.
    /// - Returns: The width of a new caret, in pixels.
    public var caretWidth: Swift.UInt32 {
        get throws {
            try _interop.get_CaretWidth()
        }
    }

    /// Gets the size of a new cursor created by the app view.
    /// - Returns: The size of a new cursor.
    public var cursorSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_CursorSize()
        }
    }

    /// Gets the maximum allowed time between clicks in a double-click operation.
    /// - Returns: The delta of a double-click operation, in milliseconds.
    public var doubleClickTime: Swift.UInt32 {
        get throws {
            try _interop.get_DoubleClickTime()
        }
    }

    /// Gets the directional preference of the user interface created by the app view.
    /// - Returns: The directional preference of the user interface.
    public var handPreference: WindowsUIViewManagement_HandPreference {
        get throws {
            try _interop.get_HandPreference()
        }
    }

    /// Gets the length of time a message is displayed for the app view.
    /// - Returns: The duration the message is displayed, in seconds.
    public var messageDuration: Swift.UInt32 {
        get throws {
            try _interop.get_MessageDuration()
        }
    }

    /// Gets the amount of time the mouse pointer can rest in a hover rectangle before a hover event is raised.
    /// - Returns: The hover time before a hover event is raised, in milliseconds.
    public var mouseHoverTime: Swift.UInt32 {
        get throws {
            try _interop.get_MouseHoverTime()
        }
    }

    /// Gets the size of a scroll bar arrow for windows associated with the app view.
    /// - Returns: The size of a scroll bar arrow.
    public var scrollBarArrowSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_ScrollBarArrowSize()
        }
    }

    /// Gets the size of a scroll bar for windows associated with the app view.
    /// - Returns: The size of the scroll bar.
    public var scrollBarSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_ScrollBarSize()
        }
    }

    /// Gets the size of a thumb box for windows associated with the app view.
    /// - Returns: The size of the thumb box.
    public var scrollBarThumbBoxSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_ScrollBarThumbBoxSize()
        }
    }

    /// Gets the color used for a specific user interface element type, such as a button face or window text.
    /// - Parameter desiredElement: The type of element for which the color will be obtained.
    /// - Returns: The color of the element type, expressed as a 32-bit color value.
    public func uielementColor(_ desiredElement: WindowsUIViewManagement_UIElementType) throws -> WindowsUI_Color {
        try _interop.uielementColor(desiredElement)
    }

    // MARK: Windows.UI.ViewManagement.IUISettings2 members

    /// Gets the value of the system text size setting.
    /// - Returns: The value ranges from 1 to 2.25.
    public var textScaleFactor: Swift.Double {
        get throws {
            try _iuisettings2.get_TextScaleFactor()
        }
    }

    /// Occurs when the system text size setting is changed.
    public func textScaleFactorChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings2.add_TextScaleFactorChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: textScaleFactorChanged)
    }

    public func textScaleFactorChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings2.remove_TextScaleFactorChanged(cookie)
    }

    // MARK: Windows.UI.ViewManagement.IUISettings3 members

    /// Occurs when color values have changed.
    public func colorValuesChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings3.add_ColorValuesChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: colorValuesChanged)
    }

    public func colorValuesChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings3.remove_ColorValuesChanged(cookie)
    }

    /// Returns the color value of the specified color type.
    /// - Parameter desiredColor: An enumeration value that specifies the type of color to get a value for.
    /// - Returns: The color value of the specified color type.
    public func getColorValue(_ desiredColor: WindowsUIViewManagement_UIColorType) throws -> WindowsUI_Color {
        try _iuisettings3.getColorValue(desiredColor)
    }

    // MARK: Windows.UI.ViewManagement.IUISettings4 members

    /// Gets a value that indicates whether the system Transparency effects setting is enabled.
    /// - Returns: **true** if Transparency UI effects are enabled; otherwise, **false**.
    public var advancedEffectsEnabled: Swift.Bool {
        get throws {
            try _iuisettings4.get_AdvancedEffectsEnabled()
        }
    }

    /// Occurs when the system advanced UI effects setting is enabled or disabled.
    public func advancedEffectsEnabledChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings4.add_AdvancedEffectsEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: advancedEffectsEnabledChanged)
    }

    public func advancedEffectsEnabledChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings4.remove_AdvancedEffectsEnabledChanged(cookie)
    }

    // MARK: Windows.UI.ViewManagement.IUISettings5 members

    /// Gets whether the user has specified that scroll bars should be automatically hidden when not being interacted with.
    /// - Returns: True, if **Settings -> Ease of Access -> Display -> Automatically hide scroll bars in Windows** is set. Otherwise, false.
    public var autoHideScrollBars: Swift.Bool {
        get throws {
            try _iuisettings5.get_AutoHideScrollBars()
        }
    }

    /// Event invoked when the AutoHideScrollBars state changes.
    public func autoHideScrollBarsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsUIViewManagement_UISettingsAutoHideScrollBarsChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings5.add_AutoHideScrollBarsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: autoHideScrollBarsChanged)
    }

    public func autoHideScrollBarsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings5.remove_AutoHideScrollBarsChanged(token)
    }

    // MARK: Windows.UI.ViewManagement.IUISettings6 members

    /// Occurs when the value of the AnimationsEnabled property has changed.
    public func animationsEnabledChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsUIViewManagement_UISettingsAnimationsEnabledChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings6.add_AnimationsEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: animationsEnabledChanged)
    }

    public func animationsEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings6.remove_AnimationsEnabledChanged(token)
    }

    /// Occurs when the value of the MessageDuration property has changed.
    public func messageDurationChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIViewManagement_UISettings?, WindowsUIViewManagement_UISettingsMessageDurationChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuisettings6.add_MessageDurationChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: messageDurationChanged)
    }

    public func messageDurationChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuisettings6.remove_MessageDurationChanged(token)
    }

    // MARK: Implementation details

    private var _iuisettings2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings2>? = nil

    internal var _iuisettings2: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings2> {
        get throws {
            try _iuisettings2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IUISettings2.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IUISettings2.self)
            }
        }
    }

    private var _iuisettings3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings3>? = nil

    internal var _iuisettings3: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings3> {
        get throws {
            try _iuisettings3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IUISettings3.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IUISettings3.self)
            }
        }
    }

    private var _iuisettings4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings4>? = nil

    internal var _iuisettings4: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings4> {
        get throws {
            try _iuisettings4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IUISettings4.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IUISettings4.self)
            }
        }
    }

    private var _iuisettings5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings5>? = nil

    internal var _iuisettings5: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings5> {
        get throws {
            try _iuisettings5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IUISettings5.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IUISettings5.self)
            }
        }
    }

    private var _iuisettings6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings6>? = nil

    internal var _iuisettings6: COM.COMInterop<CWinRT.SWRT_WindowsUIViewManagement_IUISettings6> {
        get throws {
            try _iuisettings6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIViewManagement_IUISettings6.iid).cast(to: CWinRT.SWRT_WindowsUIViewManagement_IUISettings6.self)
            }
        }
    }

    deinit {
        _iuisettings2_storage?.release()
        _iuisettings3_storage?.release()
        _iuisettings4_storage?.release()
        _iuisettings5_storage?.release()
        _iuisettings6_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.ViewManagement.UISettings", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}