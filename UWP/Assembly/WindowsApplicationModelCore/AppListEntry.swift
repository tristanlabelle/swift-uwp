// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides an app's display info such as its display name and description, and a method to launch the app.
public final class WindowsApplicationModelCore_AppListEntry: WindowsRuntime.WinRTImport<WindowsApplicationModelCore_AppListEntryProjection> {
    // MARK: Windows.ApplicationModel.Core.IAppListEntry members

    /// Provides an app's display name, description, and logo.
    /// - Returns: An object representing the app's display name, description, and logo.
    public var displayInfo: WindowsApplicationModel_AppDisplayInfo {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DisplayInfo())
        }
    }

    /// Launch the app associated with this AppListEntry
    /// - Returns: Returns **true** if the launch succeeds; otherwise, **false**.
    public func launchAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.launchAsync())
    }

    // MARK: Windows.ApplicationModel.Core.IAppListEntry2 members

    /// Gets the Application User Model ID (AUMID) for this **AppListEntry**.
    /// - Returns: A string representing the app's identity.
    public var appUserModelId: Swift.String {
        get throws {
            try _iappListEntry2.get_AppUserModelId()
        }
    }

    // MARK: Windows.ApplicationModel.Core.IAppListEntry3 members

    /// Launch the app associated with this AppListEntry within the context of a specified user.
    /// - Parameter user: The user context that the app should be launched under.
    /// - Returns: Returns **true** if the launch succeeds; otherwise, **false**.
    public func launchForUserAsync(_ user: WindowsSystem_User?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappListEntry3.launchForUserAsync(user))
    }

    // MARK: Windows.ApplicationModel.Core.IAppListEntry4 members

    public var appInfo: WindowsApplicationModel_AppInfo {
        get throws {
            try COM.NullResult.unwrap(_iappListEntry4.get_AppInfo())
        }
    }

    // MARK: Implementation details

    private var _iappListEntry2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry2>? = nil

    internal var _iappListEntry2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry2> {
        get throws {
            try _iappListEntry2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry2.self)
            }
        }
    }

    private var _iappListEntry3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry3>? = nil

    internal var _iappListEntry3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry3> {
        get throws {
            try _iappListEntry3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry3.self)
            }
        }
    }

    private var _iappListEntry4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry4>? = nil

    internal var _iappListEntry4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry4> {
        get throws {
            try _iappListEntry4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelCore_IAppListEntry4.self)
            }
        }
    }

    deinit {
        _iappListEntry2_storage?.release()
        _iappListEntry3_storage?.release()
        _iappListEntry4_storage?.release()
    }
}