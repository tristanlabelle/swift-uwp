// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides optical character recognition (OCR) functionality.
public final class WindowsMediaOcr_OcrEngine: WindowsRuntime.WinRTImport<WindowsMediaOcr_OcrEngineProjection> {
    // MARK: Windows.Media.Ocr.IOcrEngine members

    /// Gets the language being used for text recognition.
    /// - Returns: The language being used for text recognition.
    public var recognizerLanguage: WindowsGlobalization_Language {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RecognizerLanguage())
        }
    }

    /// Scans the specified image for text in the language specified by the RecognizerLanguage property.
    /// - Parameter bitmap: Represents an uncompressed bitmap.
    /// - Returns: The result of the OCR that was initiated by the OcrEngine object.
    public func recognizeAsync(_ bitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaOcr_OcrResult?> {
        try COM.NullResult.unwrap(_interop.recognizeAsync(bitmap))
    }

    // MARK: Windows.Media.Ocr.IOcrEngineStatics members

    /// Returns a collection of all available OCR languages on the device.
    /// - Returns: A collection of all available OCR languages on the device.
    public static var availableRecognizerLanguages: WindowsFoundationCollections_IVectorView<WindowsGlobalization_Language?> {
        get throws {
            try COM.NullResult.unwrap(_iocrEngineStatics.get_AvailableRecognizerLanguages())
        }
    }

    /// Gets the maximum image pixel dimensions supported by the OCR engine.
    /// - Returns: The maximum image pixel dimensions supported by the OCR engine.
    public static var maxImageDimension: Swift.UInt32 {
        get throws {
            try _iocrEngineStatics.get_MaxImageDimension()
        }
    }

    /// Returns true if a specified language can be resolved to any of the available OCR languages. See language matching for a further explanation of language resolving.
    /// - Parameter language: The language being used for text recognition.
    /// - Returns: TRUE, if the specified language can be resolved to any of the available OCR languages; otherwise, FALSE.
    public static func isLanguageSupported(_ language: WindowsGlobalization_Language?) throws -> Swift.Bool {
        try _iocrEngineStatics.isLanguageSupported(language)
    }

    /// Creates a new instance of the OcrEngine class.
    /// - Parameter language: The language being used for text recognition.
    /// - Returns: If the specified language can be resolved to any of the OCR languages available on the device, returns new instance of **OcrEngine** class, otherwise returns **null**. See language matching for a further explanation of language resolving.
    public static func tryCreateFromLanguage(_ language: WindowsGlobalization_Language?) throws -> WindowsMediaOcr_OcrEngine {
        try COM.NullResult.unwrap(_iocrEngineStatics.tryCreateFromLanguage(language))
    }

    /// Creates a new instance of the OcrEngine class.
    /// - Returns: If any language from **GlobalizationPreferences.Languages** can be resolved to any of the available OCR languages returns new instance of **OcrEngine** class, otherwise returns **null**.
    public static func tryCreateFromUserProfileLanguages() throws -> WindowsMediaOcr_OcrEngine {
        try COM.NullResult.unwrap(_iocrEngineStatics.tryCreateFromUserProfileLanguages())
    }

    // MARK: Implementation details

    private static var _iocrEngineStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaOcr_IOcrEngineStatics>? = nil

    internal static var _iocrEngineStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaOcr_IOcrEngineStatics> {
        get throws {
            try _iocrEngineStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Ocr.OcrEngine", id: CWinRT.SWRT_WindowsMediaOcr_IOcrEngineStatics.iid)
            }
        }
    }
}