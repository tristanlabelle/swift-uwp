// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a physical game controller connected to the system using GIP.SYS (for Xbox One accesories).
public final class WindowsGamingInputCustom_GipGameControllerProvider: WindowsRuntime.WinRTImport<WindowsGamingInputCustom_GipGameControllerProviderProjection>, WindowsGamingInputCustom_IGameControllerProviderProtocol {
    // MARK: Windows.Gaming.Input.Custom.IGipGameControllerProvider members

    /// Sends a message.
    /// - Parameter messageClass: The class of the message.
    /// - Parameter messageId: The ID of the message.
    /// - Parameter messageBuffer: A buffer holding the message contents.
    public func sendMessage(_ messageClass: WindowsGamingInputCustom_GipMessageClass, _ messageId: Swift.UInt8, _ messageBuffer: [Swift.UInt8]) throws {
        try _interop.sendMessage(messageClass, messageId, messageBuffer)
    }

    /// Sends a request for a message.
    /// - Parameter messageClass: The class of the message.
    /// - Parameter messageId: The ID of the message.
    /// - Parameter requestMessageBuffer: A buffer containing the request.
    /// - Parameter responseMessageBuffer: A buffer that will contain the request response.
    public func sendReceiveMessage(_ messageClass: WindowsGamingInputCustom_GipMessageClass, _ messageId: Swift.UInt8, _ requestMessageBuffer: [Swift.UInt8], _ responseMessageBuffer: [Swift.UInt8]) throws {
        try _interop.sendReceiveMessage(messageClass, messageId, requestMessageBuffer, responseMessageBuffer)
    }

    /// Attempts to asynchronously update the firmware for the controller.
    /// - Parameter firmwareImage: A stream pointing to the firmware image with which to update the controller.
    /// - Returns: Returns the result of the asynchronous operation.
    public func updateFirmwareAsync(_ firmwareImage: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsGamingInputCustom_GipFirmwareUpdateResult?, WindowsGamingInputCustom_GipFirmwareUpdateProgress> {
        try COM.NullResult.unwrap(_interop.updateFirmwareAsync(firmwareImage))
    }

    // MARK: Windows.Gaming.Input.Custom.IGameControllerProvider members

    /// The firmware version of the controller.
    /// - Returns: The firmware version of the controller.
    public var firmwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_FirmwareVersionInfo()
        }
    }

    /// The hardware product ID of the controller.
    /// - Returns: The hardware product ID of the controller.
    public var hardwareProductId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareProductId()
        }
    }

    /// The hardware vendor ID of the controller.
    /// - Returns: The hardware vendor ID of the controller.
    public var hardwareVendorId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareVendorId()
        }
    }

    /// Contains information on the hardware version of the controller.
    /// - Returns: Contains information on the hardware version of the controller.
    public var hardwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_HardwareVersionInfo()
        }
    }

    /// Boolean value indicating whether the controller is connected.
    /// - Returns: Boolean value indicating whether the controller is connected.
    public var isConnected: Swift.Bool {
        get throws {
            try _igameControllerProvider.get_IsConnected()
        }
    }

    // MARK: Implementation details

    private var _igameControllerProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider>? = nil

    internal var _igameControllerProvider: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider> {
        get throws {
            try _igameControllerProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.iid).cast(to: CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.self)
            }
        }
    }

    deinit {
        _igameControllerProvider_storage?.release()
    }
}