// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the physical game controller devices connected to the system using XUSB22.SYS (for Xbox 360 accessories).
public final class WindowsGamingInputCustom_XusbGameControllerProvider: WindowsRuntime.WinRTImport<WindowsGamingInputCustom_XusbGameControllerProviderProjection>, WindowsGamingInputCustom_IGameControllerProviderProtocol {
    // MARK: Windows.Gaming.Input.Custom.IXusbGameControllerProvider members

    /// Sets the speed on the controller's vibration motor.
    /// - Parameter lowFrequencyMotorSpeed: The low frequency motor speed.
    /// - Parameter highFrequencyMotorSpeed: The high frequency motor speed.
    public func setVibration(_ lowFrequencyMotorSpeed: Swift.Double, _ highFrequencyMotorSpeed: Swift.Double) throws {
        try _interop.setVibration(lowFrequencyMotorSpeed, highFrequencyMotorSpeed)
    }

    // MARK: Windows.Gaming.Input.Custom.IGameControllerProvider members

    /// The firmware version of the controller.
    /// - Returns: The firmware version of the controller.
    public var firmwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_FirmwareVersionInfo()
        }
    }

    /// The hardware product ID of the controller.
    /// - Returns: The hardware product ID of the controller.
    public var hardwareProductId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareProductId()
        }
    }

    /// The hardware vendor ID of the controller.
    /// - Returns: The hardware vendor ID of the controller.
    public var hardwareVendorId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareVendorId()
        }
    }

    /// Contains information on the hardware version of the controller.
    /// - Returns: Information on the hardware version of the controller.
    public var hardwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_HardwareVersionInfo()
        }
    }

    /// Boolean indicating whether the controller is connected.
    /// - Returns: Boolean indicating whether the controller is connected.
    public var isConnected: Swift.Bool {
        get throws {
            try _igameControllerProvider.get_IsConnected()
        }
    }

    // MARK: Implementation details

    private var _igameControllerProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider>? = nil

    internal var _igameControllerProvider: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider> {
        get throws {
            try _igameControllerProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.iid).cast(to: CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.self)
            }
        }
    }

    deinit {
        _igameControllerProvider_storage?.release()
    }
}