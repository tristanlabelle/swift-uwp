// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the underlying device for a HID (Human Interface Device) game controller.
public final class WindowsGamingInputCustom_HidGameControllerProvider: WindowsRuntime.WinRTImport<WindowsGamingInputCustom_HidGameControllerProviderProjection>, WindowsGamingInputCustom_IGameControllerProviderProtocol {
    // MARK: Windows.Gaming.Input.Custom.IHidGameControllerProvider members

    /// The usage ID of the top-level collection.
    /// - Returns: The usage ID of the top-level collection.
    public var usageId: Swift.UInt16 {
        get throws {
            try _interop.get_UsageId()
        }
    }

    /// The usage page of the top-level collection.
    /// - Returns: The usage page of the top-level collection.
    public var usagePage: Swift.UInt16 {
        get throws {
            try _interop.get_UsagePage()
        }
    }

    /// Gets the specified HID (Human Interface Device) feature report from the controller.
    /// - Parameter reportId: The ID of the report to get.
    /// - Parameter reportBuffer: The buffer in which the report data is returned.
    public func getFeatureReport(_ reportId: Swift.UInt8, _ reportBuffer: [Swift.UInt8]) throws {
        try _interop.getFeatureReport(reportId, reportBuffer)
    }

    /// Sends the specified HID (Human Interface Device) feature report to the device.
    /// - Parameter reportId: The ID of the report to send.
    /// - Parameter reportBuffer: The buffer containing the report data to send.
    public func sendFeatureReport(_ reportId: Swift.UInt8, _ reportBuffer: [Swift.UInt8]) throws {
        try _interop.sendFeatureReport(reportId, reportBuffer)
    }

    /// Sends the specified HID (Human Interface Device) output report to the device.
    /// - Parameter reportId: The ID of the report to send.
    /// - Parameter reportBuffer: The buffer containing the report data to send.
    public func sendOutputReport(_ reportId: Swift.UInt8, _ reportBuffer: [Swift.UInt8]) throws {
        try _interop.sendOutputReport(reportId, reportBuffer)
    }

    // MARK: Windows.Gaming.Input.Custom.IGameControllerProvider members

    /// The firmware version of the controller.
    /// - Returns: The firmware version of the controller.
    public var firmwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_FirmwareVersionInfo()
        }
    }

    /// The hardware product ID of the controller.
    /// - Returns: The hardware product ID of the controller.
    public var hardwareProductId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareProductId()
        }
    }

    /// The hardware vendor ID of the controller.
    /// - Returns: The hardware vendor ID of the controller.
    public var hardwareVendorId: Swift.UInt16 {
        get throws {
            try _igameControllerProvider.get_HardwareVendorId()
        }
    }

    /// Contains information on the hardware version of the controller.
    /// - Returns: Contains information on the hardware version of the controller.
    public var hardwareVersionInfo: WindowsGamingInputCustom_GameControllerVersionInfo {
        get throws {
            try _igameControllerProvider.get_HardwareVersionInfo()
        }
    }

    /// Boolean value indicating whether the controller is connected.
    /// - Returns: Boolean value indicating whether the controller is connected.
    public var isConnected: Swift.Bool {
        get throws {
            try _igameControllerProvider.get_IsConnected()
        }
    }

    // MARK: Implementation details

    private var _igameControllerProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider>? = nil

    internal var _igameControllerProvider: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider> {
        get throws {
            try _igameControllerProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.iid).cast(to: CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerProvider.self)
            }
        }
    }

    deinit {
        _igameControllerProvider_storage?.release()
    }
}