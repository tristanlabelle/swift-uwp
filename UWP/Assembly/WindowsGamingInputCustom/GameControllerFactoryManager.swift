// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages factories for custom controllers.
public enum WindowsGamingInputCustom_GameControllerFactoryManager {
    // MARK: Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics members

    /// Registers a factory for a custom Gip controller.
    /// - Parameter factory: The factory to register.
    /// - Parameter interfaceId: The interface ID of the factory.
    public static func registerCustomFactoryForGipInterface(_ factory: WindowsGamingInputCustom_ICustomGameControllerFactory?, _ interfaceId: Foundation.UUID) throws {
        try _igameControllerFactoryManagerStatics.registerCustomFactoryForGipInterface(factory, interfaceId)
    }

    /// Registers a factory for a custom hardware ID controller.
    /// - Parameter factory: The factory to register.
    /// - Parameter hardwareVendorId: The hardware vendor ID.
    /// - Parameter hardwareProductId: The hardware product ID.
    public static func registerCustomFactoryForHardwareId(_ factory: WindowsGamingInputCustom_ICustomGameControllerFactory?, _ hardwareVendorId: Swift.UInt16, _ hardwareProductId: Swift.UInt16) throws {
        try _igameControllerFactoryManagerStatics.registerCustomFactoryForHardwareId(factory, hardwareVendorId, hardwareProductId)
    }

    /// Registers a factory for a Xusb type controller.
    /// - Parameter factory: The factory to register.
    /// - Parameter xusbType: The Xusb device type.
    /// - Parameter xusbSubtype: The Xusb device subtype.
    public static func registerCustomFactoryForXusbType(_ factory: WindowsGamingInputCustom_ICustomGameControllerFactory?, _ xusbType: WindowsGamingInputCustom_XusbDeviceType, _ xusbSubtype: WindowsGamingInputCustom_XusbDeviceSubtype) throws {
        try _igameControllerFactoryManagerStatics.registerCustomFactoryForXusbType(factory, xusbType, xusbSubtype)
    }

    // MARK: Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics2 members

    /// Tries to get a game controller that belongs to the specified factory and references the same underlying game controller as the one that was specified.
    /// - Parameter factory: The factory for the type of game controller that you want to get.
    /// - Parameter gameController: The game controller that references the underlying device for which you want to get another game controller representation.
    /// - Returns: If found, a game controller that belongs to the specified factory and references the same underlying device as the specified game controller; otherwise, **null**.
    public static func tryGetFactoryControllerFromGameController(_ factory: WindowsGamingInputCustom_ICustomGameControllerFactory?, _ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_IGameController {
        try COM.NullResult.unwrap(_igameControllerFactoryManagerStatics2.tryGetFactoryControllerFromGameController(factory, gameController))
    }

    // MARK: Implementation details

    private static var _igameControllerFactoryManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics>? = nil

    internal static var _igameControllerFactoryManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics> {
        get throws {
            try _igameControllerFactoryManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.Custom.GameControllerFactoryManager", id: CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics.iid)
            }
        }
    }

    private static var _igameControllerFactoryManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics2>? = nil

    internal static var _igameControllerFactoryManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics2> {
        get throws {
            try _igameControllerFactoryManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.Custom.GameControllerFactoryManager", id: CWinRT.SWRT_WindowsGamingInputCustom_IGameControllerFactoryManagerStatics2.iid)
            }
        }
    }
}