// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the definition of a video transform effect.
public final class WindowsMediaEffects_VideoTransformEffectDefinition: WindowsRuntime.WinRTImport<WindowsMediaEffects_VideoTransformEffectDefinitionProjection>, WindowsMediaEffects_IVideoEffectDefinitionProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaEffects_VideoTransformEffectDefinitionProjection.self))
    }

    // MARK: Windows.Media.Effects.IVideoEffectDefinition members

    /// Gets the activatable class ID of the video transform effect definition.
    /// - Returns: The activatable class ID of the video transform effect definition.
    public var activatableClassId: Swift.String {
        get throws {
            try _interop.get_ActivatableClassId()
        }
    }

    /// Gets the set of properties for configuring the VideoTransformEffectDefinition object.
    /// - Returns: The set of properties for configuring the VideoTransformEffectDefinition object.
    public var properties: WindowsFoundationCollections_IPropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    // MARK: Windows.Media.Effects.IVideoTransformEffectDefinition members

    /// Gets or sets the rectangle within which the video will be cropped, specified in pixels.
    /// - Returns: The rectangle within which the video will be cropped
    public var cropRectangle: WindowsFoundation_Rect {
        get throws {
            try _ivideoTransformEffectDefinition.get_CropRectangle()
        }
    }

    /// Gets or sets the rectangle within which the video will be cropped, specified in pixels.
    /// - Returns: The rectangle within which the video will be cropped
    public func cropRectangle(_ value: WindowsFoundation_Rect) throws {
        try _ivideoTransformEffectDefinition.put_CropRectangle(value)
    }

    /// Gets or sets the direction in which the video will be mirrored.
    /// - Returns: The direction in which the video will be mirrored.
    public var mirror: WindowsMediaMediaProperties_MediaMirroringOptions {
        get throws {
            try _ivideoTransformEffectDefinition.get_Mirror()
        }
    }

    /// Gets or sets the direction in which the video will be mirrored.
    /// - Returns: The direction in which the video will be mirrored.
    public func mirror(_ value: WindowsMediaMediaProperties_MediaMirroringOptions) throws {
        try _ivideoTransformEffectDefinition.put_Mirror(value)
    }

    /// Gets or sets the output size of the video, in pixels.
    /// - Returns: The output size of the video, in pixels.
    public var outputSize: WindowsFoundation_Size {
        get throws {
            try _ivideoTransformEffectDefinition.get_OutputSize()
        }
    }

    /// Gets or sets the output size of the video, in pixels.
    /// - Returns: The output size of the video, in pixels.
    public func outputSize(_ value: WindowsFoundation_Size) throws {
        try _ivideoTransformEffectDefinition.put_OutputSize(value)
    }

    /// Gets or sets the color that will be used to fill pixels in the frame that are not filled with video, such as when video is letterboxed.
    /// - Returns: The color that will be used to fill pixels in the frame that are not filled with video
    public var paddingColor: WindowsUI_Color {
        get throws {
            try _ivideoTransformEffectDefinition.get_PaddingColor()
        }
    }

    /// Gets or sets the color that will be used to fill pixels in the frame that are not filled with video, such as when video is letterboxed.
    /// - Returns: The color that will be used to fill pixels in the frame that are not filled with video
    public func paddingColor(_ value: WindowsUI_Color) throws {
        try _ivideoTransformEffectDefinition.put_PaddingColor(value)
    }

    /// Gets or sets the media processing algorithm that is used for the video transform.
    /// - Returns: The media processing algorithm that is used for the video transform.
    public var processingAlgorithm: WindowsMediaTranscoding_MediaVideoProcessingAlgorithm {
        get throws {
            try _ivideoTransformEffectDefinition.get_ProcessingAlgorithm()
        }
    }

    /// Gets or sets the media processing algorithm that is used for the video transform.
    /// - Returns: The media processing algorithm that is used for the video transform.
    public func processingAlgorithm(_ value: WindowsMediaTranscoding_MediaVideoProcessingAlgorithm) throws {
        try _ivideoTransformEffectDefinition.put_ProcessingAlgorithm(value)
    }

    /// Gets or sets the angle and direction in which the video will be rotated.
    /// - Returns: The angle and direction in which the video will be rotated.
    public var rotation: WindowsMediaMediaProperties_MediaRotation {
        get throws {
            try _ivideoTransformEffectDefinition.get_Rotation()
        }
    }

    /// Gets or sets the angle and direction in which the video will be rotated.
    /// - Returns: The angle and direction in which the video will be rotated.
    public func rotation(_ value: WindowsMediaMediaProperties_MediaRotation) throws {
        try _ivideoTransformEffectDefinition.put_Rotation(value)
    }

    // MARK: Windows.Media.Effects.IVideoTransformEffectDefinition2 members

    /// Gets a VideoTransformSphericalProjection object that allows you to configure the spherical projection parameters used by the video transform effect.
    /// - Returns: A VideoTransformSphericalProjection object.
    public var sphericalProjection: WindowsMediaEffects_VideoTransformSphericalProjection {
        get throws {
            try COM.NullResult.unwrap(_ivideoTransformEffectDefinition2.get_SphericalProjection())
        }
    }

    // MARK: Implementation details

    private var _ivideoTransformEffectDefinition_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition>? = nil

    internal var _ivideoTransformEffectDefinition: COM.COMInterop<CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition> {
        get throws {
            try _ivideoTransformEffectDefinition_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition.iid).cast(to: CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition.self)
            }
        }
    }

    private var _ivideoTransformEffectDefinition2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition2>? = nil

    internal var _ivideoTransformEffectDefinition2: COM.COMInterop<CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition2> {
        get throws {
            try _ivideoTransformEffectDefinition2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition2.iid).cast(to: CWinRT.SWRT_WindowsMediaEffects_IVideoTransformEffectDefinition2.self)
            }
        }
    }

    deinit {
        _ivideoTransformEffectDefinition_storage?.release()
        _ivideoTransformEffectDefinition2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Effects.VideoTransformEffectDefinition", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}