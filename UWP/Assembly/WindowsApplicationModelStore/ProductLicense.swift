// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides info about a license that is associated with an add-on (also called an in-app product or IAP).
public final class WindowsApplicationModelStore_ProductLicense: WindowsRuntime.WinRTImport<WindowsApplicationModelStore_ProductLicenseProjection> {
    // MARK: Windows.ApplicationModel.Store.IProductLicense members

    /// Gets the current expiration date and time of the add-on (also called an in-app product or IAP) license.
    /// - Returns: The date and time indicating when the add-on license expires.
    public var expirationDate: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_ExpirationDate()
        }
    }

    /// Indicates if the add-on (also called an in-app product or IAP) license is currently active.
    /// - Returns: Returns **true** if the add-on's license is active, and otherwise **false**. This property can return **false** if the license is missing, expired, or revoked.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets the ID of an add-on (also called an in-app product or IAP). This ID is used by the app to get info about the product or feature that is enabled when the customer buys it through an in-app purchase.
    /// - Returns: The ID specified in Partner Center to identify this add-on.
    public var productId: Swift.String {
        get throws {
            try _interop.get_ProductId()
        }
    }

    // MARK: Windows.ApplicationModel.Store.IProductLicenseWithFulfillment members

    /// Indicates if the add-on (also called an in-app product or IAP) is consumable. A consumable add-on can be purchased, used, and purchased again.
    /// - Returns: **true** if the add-on is a consumable add-on; Otherwise, **false**.
    public var isConsumable: Swift.Bool {
        get throws {
            try _iproductLicenseWithFulfillment.get_IsConsumable()
        }
    }

    // MARK: Implementation details

    private var _iproductLicenseWithFulfillment_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_IProductLicenseWithFulfillment>? = nil

    internal var _iproductLicenseWithFulfillment: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_IProductLicenseWithFulfillment> {
        get throws {
            try _iproductLicenseWithFulfillment_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStore_IProductLicenseWithFulfillment.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStore_IProductLicenseWithFulfillment.self)
            }
        }
    }

    deinit {
        _iproductLicenseWithFulfillment_storage?.release()
    }
}