// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the listing info that describes the app in the Microsoft Store.
public final class WindowsApplicationModelStore_ListingInformation: WindowsRuntime.WinRTImport<WindowsApplicationModelStore_ListingInformationProjection> {
    // MARK: Windows.ApplicationModel.Store.IListingInformation members

    /// Gets the age rating for the app.
    /// - Returns: The age rating.
    public var ageRating: Swift.UInt32 {
        get throws {
            try _interop.get_AgeRating()
        }
    }

    /// Gets the country code associated with the user's location, such as **US** or **CA**, that is used to identify their market for transactions in the current session.
    /// - Returns: The country code associated with the user's location, such as **US** or **CA**.
    public var currentMarket: Swift.String {
        get throws {
            try _interop.get_CurrentMarket()
        }
    }

    /// Gets the app's description in the current market.
    /// - Returns: The app's description in the current market.
    public var description: Swift.String {
        get throws {
            try _interop.get_Description()
        }
    }

    /// Gets the app's purchase price formatted for the current market and currency.
    /// - Returns: The app's purchase price with the appropriate formatting for the current market and currency.
    public var formattedPrice: Swift.String {
        get throws {
            try _interop.get_FormattedPrice()
        }
    }

    /// Gets the app's name in the current market.
    /// - Returns: The app's name in the current market.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets information about add-ons (also called in-app products or IAPs) available for purchase.
    /// - Returns: The array of ProductListing objects that describes the app's add-ons.
    public var productListings: WindowsFoundationCollections_IMapView<Swift.String, WindowsApplicationModelStore_ProductListing?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProductListings())
        }
    }

    // MARK: Windows.ApplicationModel.Store.IListingInformation2 members

    /// Gets the currency code associated with the user's market, such as **USD** or **CAD**.
    /// - Returns: The currency code associated with the user's market, such as **USD** or **CAD**.
    public var currencyCode: Swift.String {
        get throws {
            try _ilistingInformation2.get_CurrencyCode()
        }
    }

    /// Gets the app's base price formatted for the current market and currency.
    /// - Returns: The app's base price with the appropriate formatting for the current market and currency.
    public var formattedBasePrice: Swift.String {
        get throws {
            try _ilistingInformation2.get_FormattedBasePrice()
        }
    }

    /// Gets a value that indicates whether the app is on sale.
    /// - Returns: Returns true if the app is on sale, and otherwise false.
    public var isOnSale: Swift.Bool {
        get throws {
            try _ilistingInformation2.get_IsOnSale()
        }
    }

    /// Gets the end date of the sale period for the app.
    /// - Returns: The date and time that the app's sale period will end.
    public var saleEndDate: WindowsFoundation_DateTime {
        get throws {
            try _ilistingInformation2.get_SaleEndDate()
        }
    }

    // MARK: Implementation details

    private var _ilistingInformation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_IListingInformation2>? = nil

    internal var _ilistingInformation2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_IListingInformation2> {
        get throws {
            try _ilistingInformation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStore_IListingInformation2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStore_IListingInformation2.self)
            }
        }
    }

    deinit {
        _ilistingInformation2_storage?.release()
    }
}