// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines methods and properties used to instantiate an object that you can use to get simulated license info during testing.
public enum WindowsApplicationModelStore_CurrentAppSimulator {
    // MARK: Windows.ApplicationModel.Store.ICurrentAppSimulator members

    /// Gets a simulated app ID. Since CurrentAppSimulator is intended only for testing during app development, the returned CurrentAppSimulator.AppId will contain only 0's.
    /// - Returns: The GUID that identifies the app in the Windows Store.
    public static var appId: Foundation.UUID {
        get throws {
            try _icurrentAppSimulator.get_AppId()
        }
    }

    /// Gets the simulated license metadata for the current app as provided by the simulation.
    /// - Returns: The license metadata for the current app as provided by the simulation.
    public static var licenseInformation: WindowsApplicationModelStore_LicenseInformation {
        get throws {
            try COM.NullResult.unwrap(_icurrentAppSimulator.get_LicenseInformation())
        }
    }

    /// Gets the simulated Uniform Resource Identifier (URI) that represents a Microsoft Store listing page for the current app.
    /// - Returns: The Uniform Resource Identifier (URI) of the Microsoft Store listing page for the current app as defined by the simulation.
    public static var linkUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_icurrentAppSimulator.get_LinkUri())
        }
    }

    /// Creates the async operation that simulates a user request to buy a full license for the current app.
    /// - Parameter includeReceipt: Determines if the method should return the receipts for this app.
    /// - Returns: If the *includeReceipt* parameter is set to true, this string contains XML that represents all receipts for the app and any in-app product purchases. If *includeReceipt* is set to false, this string is empty.
    public static func requestAppPurchaseAsync(_ includeReceipt: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icurrentAppSimulator.requestAppPurchaseAsync(includeReceipt))
    }

    /// Creates the async operation that displays the UI that is used to simulate the purchase of an add-on (also called an in-app product or IAP) from the Microsoft Store.
    /// - Parameter productId: The product ID (as defined by the simulation) of the add-on to purchase.
    /// - Parameter includeReceipt: Determines if the method should return the receipts for the specified *productId.*
    /// - Returns: A string providing in-app product purchase details for the provided *productId*. If *includeReceipt* is set **true**, the returned string will include a full receipt xml.
    public static func requestProductPurchaseAsync(_ productId: Swift.String, _ includeReceipt: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icurrentAppSimulator.requestProductPurchaseAsync(productId, includeReceipt))
    }

    /// Loads the simulated app listing information asynchronously. 
    /// - Returns: The app listing information as defined by the simulation. If the method fails, it returns an **HRESULT** error code.
    public static func loadListingInformationAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_ListingInformation?> {
        try COM.NullResult.unwrap(_icurrentAppSimulator.loadListingInformationAsync())
    }

    /// Creates the async operation that the user can use to simulate requesting all receipts for this app and any in-app product purchases. For examples of how receipt information can be used, see Using receipts to verify product purchases.
    /// - Returns: An XML-formatted string that contains all receipts for this app and any in-app product purchases.
    public static func getAppReceiptAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icurrentAppSimulator.getAppReceiptAsync())
    }

    /// Creates the async operation that the user can use to simulate requesting the receipt for the specified product ID. For examples of how receipt information can be used, see Using receipts to verify product purchases.
    /// - Parameter productId: The unique identifier for the product. This ID is that was specified when the product was submitted for the app to the Store.
    /// - Returns: An XML-formatted string that contains the receipt for the specified product ID.
    public static func getProductReceiptAsync(_ productId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icurrentAppSimulator.getProductReceiptAsync(productId))
    }

    /// Reloads the simulator using a StorageFile containing the **WindowsStoreProxy.xml** file.
    /// - Parameter simulatorSettingsFile: The WindowsStoreProxy.xml file that the simulator uses.
    /// - Returns: The async operation that reloads the simulator.
    public static func reloadSimulatorAsync(_ simulatorSettingsFile: WindowsStorage_StorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_icurrentAppSimulator.reloadSimulatorAsync(simulatorSettingsFile))
    }

    // MARK: Windows.ApplicationModel.Store.ICurrentAppSimulatorWithCampaignId members

    /// Retrieves the promotion campaign ID for the current app.
    /// - Returns: The advertising campaign ID for your app.
    public static func getAppPurchaseCampaignIdAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorWithCampaignId.getAppPurchaseCampaignIdAsync())
    }

    // MARK: Windows.ApplicationModel.Store.ICurrentAppSimulatorWithConsumables members

    /// Simulates notifying the Microsoft Store that the purchase of a consumable add-on (also called an in-app product or IAP) is fulfilled and that the user has the right to access the content.
    /// - Parameter productId: The product ID of the consumable add-on to report as fulfilled.
    /// - Parameter transactionId: The transaction ID for the simulated purchase of the consumable add-on.
    /// - Returns: A FulfillmentResult value that indicates the fulfillment status for the consumable add-on.
    public static func reportConsumableFulfillmentAsync(_ productId: Swift.String, _ transactionId: Foundation.UUID) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_FulfillmentResult> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorWithConsumables.reportConsumableFulfillmentAsync(productId, transactionId))
    }

    /// Creates the async operation that displays the UI that is used to simulate the purchase of an add-on (also called an in-app product or IAP) from the Microsoft Store.
    /// - Parameter productId: The product ID (as defined by the simulation) of the add-on to purchase.
    /// - Returns: A PurchaseResults that contains the results of the simulated in-app product purchase request.
    public static func requestProductPurchaseAsync(_ productId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_PurchaseResults?> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorWithConsumables.requestProductPurchaseWithResultsAsync(productId))
    }

    /// Creates the async operation that displays the UI that is used to simulate the purchase of an add-on (also called an in-app product or IAP) from the Microsoft Store. This overload includes parameters you can use to display details for a specific offer within a large catalog of in-app purchases that is represented by a single product entry in the Store.
    /// - Parameter productId: The product ID (as defined by the simulation) of the add-on to purchase.
    /// - Parameter offerId: The specific in-app product within the large purchase catalog represented on the Microsoft Store by the *productId.* This value correlates with the content your app is responsible for fulfilling. The Microsoft Store only uses this parameter value to itemize the PurchaseResults.
    /// - Parameter displayProperties: The name of the in-app product that is displayed to the user at time of purchase.
    /// - Returns: A PurchaseResults that contains the results of the simulated in-app product purchase request.
    public static func requestProductPurchaseAsync(_ productId: Swift.String, _ offerId: Swift.String, _ displayProperties: WindowsApplicationModelStore_ProductPurchaseDisplayProperties?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_PurchaseResults?> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorWithConsumables.requestProductPurchaseWithDisplayPropertiesAsync(productId, offerId, displayProperties))
    }

    /// Returns a list of purchased consumable in-app products that have not been fulfilled locally.
    /// - Returns: When the operation completes, a list of unfulfilled consumable in-app products (UnfulfilledConsumable objects) is returned. Each item in this list provides the product ID, offer ID, and transaction ID associated with a product.
    public static func getUnfulfilledConsumablesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStore_UnfulfilledConsumable?>?> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorWithConsumables.getUnfulfilledConsumablesAsync())
    }

    // MARK: Windows.ApplicationModel.Store.ICurrentAppSimulatorStaticsWithFiltering members

    public static func loadListingInformationByProductIdsAsync(_ productIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_ListingInformation?> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorStaticsWithFiltering.loadListingInformationByProductIdsAsync(productIds))
    }

    public static func loadListingInformationByKeywordsAsync(_ keywords: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStore_ListingInformation?> {
        try COM.NullResult.unwrap(_icurrentAppSimulatorStaticsWithFiltering.loadListingInformationByKeywordsAsync(keywords))
    }

    // MARK: Implementation details

    private static var _icurrentAppSimulator_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulator>? = nil

    internal static var _icurrentAppSimulator: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulator> {
        get throws {
            try _icurrentAppSimulator_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.CurrentAppSimulator", id: CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulator.iid)
            }
        }
    }

    private static var _icurrentAppSimulatorWithCampaignId_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithCampaignId>? = nil

    internal static var _icurrentAppSimulatorWithCampaignId: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithCampaignId> {
        get throws {
            try _icurrentAppSimulatorWithCampaignId_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.CurrentAppSimulator", id: CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithCampaignId.iid)
            }
        }
    }

    private static var _icurrentAppSimulatorWithConsumables_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithConsumables>? = nil

    internal static var _icurrentAppSimulatorWithConsumables: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithConsumables> {
        get throws {
            try _icurrentAppSimulatorWithConsumables_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.CurrentAppSimulator", id: CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorWithConsumables.iid)
            }
        }
    }

    private static var _icurrentAppSimulatorStaticsWithFiltering_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorStaticsWithFiltering>? = nil

    internal static var _icurrentAppSimulatorStaticsWithFiltering: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorStaticsWithFiltering> {
        get throws {
            try _icurrentAppSimulatorStaticsWithFiltering_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.CurrentAppSimulator", id: CWinRT.SWRT_WindowsApplicationModelStore_ICurrentAppSimulatorStaticsWithFiltering.iid)
            }
        }
    }
}