// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the current app's license metadata.
public final class WindowsApplicationModelStore_LicenseInformation: WindowsRuntime.WinRTImport<WindowsApplicationModelStore_LicenseInformationProjection> {
    // MARK: Windows.ApplicationModel.Store.ILicenseInformation members

    /// Gets the license expiration date and time relative to the system clock.
    /// - Returns: The date and time that the app's trial license will expire.
    public var expirationDate: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_ExpirationDate()
        }
    }

    /// Gets a value that indicates whether the license is active.
    /// - Returns: Returns true if the license is active, and otherwise false. Returns false if the license is missing, expired, or revoked. See the remarks in IsTrial for more info.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets a value that indicates whether the license is a trial license.
    /// - Returns: Returns true if the license is a trial license, and otherwise false.
    public var isTrial: Swift.Bool {
        get throws {
            try _interop.get_IsTrial()
        }
    }

    /// Gets the associative list of licenses for in-app products that the user is currently entitled to.
    /// - Returns: The associative list of feature licenses.
    public var productLicenses: WindowsFoundationCollections_IMapView<Swift.String, WindowsApplicationModelStore_ProductLicense?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ProductLicenses())
        }
    }

    /// Raises a notification event when the status of the app's license changes.
    public func licenseChanged(adding handler: WindowsApplicationModelStore_LicenseChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LicenseChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: licenseChanged)
    }

    public func licenseChanged(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LicenseChanged(cookie)
    }

    // MARK: Implementation details
}