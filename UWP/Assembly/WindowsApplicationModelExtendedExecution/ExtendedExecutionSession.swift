// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Supports managing a request for background execution. For more information on how to use Extended Execution, see Run while minimized with Extended Execution
public final class WindowsApplicationModelExtendedExecution_ExtendedExecutionSession: WindowsRuntime.WinRTImport<WindowsApplicationModelExtendedExecution_ExtendedExecutionSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelExtendedExecution_ExtendedExecutionSessionProjection.self))
    }

    // MARK: Windows.ApplicationModel.ExtendedExecution.IExtendedExecutionSession members

    /// This property is not used in the current release.
    /// - Returns: This property is not used in the current release.
    public var description: Swift.String {
        get throws {
            try _interop.get_Description()
        }
    }

    /// This property is not used in the current release.
    /// - Returns: This property is not used in the current release.
    public func description(_ value: Swift.String) throws {
        try _interop.put_Description(value)
    }

    /// This property is not used in the current release.
    /// - Returns: This property is not used in the current release.
    public var percentProgress: Swift.UInt32 {
        get throws {
            try _interop.get_PercentProgress()
        }
    }

    /// This property is not used in the current release.
    /// - Returns: This property is not used in the current release.
    public func percentProgress(_ value: Swift.UInt32) throws {
        try _interop.put_PercentProgress(value)
    }

    /// Gets or sets the reason for the for the background execution request.
    /// - Returns: The reason for the for the background execution request.
    public var reason: WindowsApplicationModelExtendedExecution_ExtendedExecutionReason {
        get throws {
            try _interop.get_Reason()
        }
    }

    /// Gets or sets the reason for the for the background execution request.
    /// - Returns: The reason for the for the background execution request.
    public func reason(_ value: WindowsApplicationModelExtendedExecution_ExtendedExecutionReason) throws {
        try _interop.put_Reason(value)
    }

    /// The **Revoked** event occurs when the system revokes background execution.
    public func revoked(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsApplicationModelExtendedExecution_ExtendedExecutionRevokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Revoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: revoked)
    }

    public func revoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Revoked(token)
    }

    /// Requests background execution.
    /// - Returns: The result of the request.
    public func requestExtensionAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelExtendedExecution_ExtendedExecutionResult> {
        try COM.NullResult.unwrap(_interop.requestExtensionAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the session and removes the application's capability to run in the background.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}