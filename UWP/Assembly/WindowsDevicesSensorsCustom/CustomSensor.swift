// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a custom sensor.
public final class WindowsDevicesSensorsCustom_CustomSensor: WindowsRuntime.WinRTImport<WindowsDevicesSensorsCustom_CustomSensorProjection> {
    // MARK: Windows.Devices.Sensors.Custom.ICustomSensor members

    /// Gets the device identifier of the sensor.
    /// - Returns: The device identifier.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the minimum report interval that is supported by the sensor.
    /// - Returns: The minimum report interval that is supported by the sensor.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets or sets the current report interval for the sensor.
    /// - Returns: The current report interval for the sensor.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the current report interval for the sensor.
    /// - Returns: The current report interval for the sensor.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Occurs each time the sensor reports a new sensor reading.
    public func readingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesSensorsCustom_CustomSensor?, WindowsDevicesSensorsCustom_CustomSensorReadingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: readingChanged)
    }

    public func readingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReadingChanged(token)
    }

    /// Gets the current sensor reading.
    /// - Returns: The current sensor reading.
    public func getCurrentReading() throws -> WindowsDevicesSensorsCustom_CustomSensorReading {
        try COM.NullResult.unwrap(_interop.getCurrentReading())
    }

    // MARK: Windows.Devices.Sensors.Custom.ICustomSensor2 members

    /// Gets the maximum number of events that can be batched by the sensor.
    /// - Returns: The maximum number of batched events.
    public var maxBatchSize: Swift.UInt32 {
        get throws {
            try _icustomSensor2.get_MaxBatchSize()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public var reportLatency: Swift.UInt32 {
        get throws {
            try _icustomSensor2.get_ReportLatency()
        }
    }

    /// Gets or sets the delay between batches of sensor information.
    /// - Returns: The delay between batches of sensor information in milliseconds.
    public func reportLatency(_ value: Swift.UInt32) throws {
        try _icustomSensor2.put_ReportLatency(value)
    }

    // MARK: Windows.Devices.Sensors.Custom.ICustomSensorStatics members

    /// Gets the device selector from the given interface identifier.
    /// - Parameter interfaceId: The interface Guid that is associated with the custom sensor. This Guid is defined and registered by the sensor.
    /// - Returns: Returns the device selector, if it exists; otherwise, null.
    public static func getDeviceSelector(_ interfaceId: Foundation.UUID) throws -> Swift.String {
        try _icustomSensorStatics.getDeviceSelector(interfaceId)
    }

    /// Asynchronously obtains the sensor from its identifier.
    /// - Parameter sensorId: The sensor identifier.
    /// - Returns: Returns the CustomSensor object from its identifier.
    public static func fromIdAsync(_ sensorId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSensorsCustom_CustomSensor?> {
        try COM.NullResult.unwrap(_icustomSensorStatics.fromIdAsync(sensorId))
    }

    // MARK: Implementation details

    private var _icustomSensor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensor2>? = nil

    internal var _icustomSensor2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensor2> {
        get throws {
            try _icustomSensor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensor2.iid).cast(to: CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensor2.self)
            }
        }
    }

    deinit {
        _icustomSensor2_storage?.release()
    }

    private static var _icustomSensorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensorStatics>? = nil

    internal static var _icustomSensorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensorStatics> {
        get throws {
            try _icustomSensorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Sensors.Custom.CustomSensor", id: CWinRT.SWRT_WindowsDevicesSensorsCustom_ICustomSensorStatics.iid)
            }
        }
    }
}