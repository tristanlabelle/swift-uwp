// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the functionality for receiving and handling invitations to join remote sessions. This class begins listening for invitations when it is instantiated.
public final class WindowsSystemRemoteSystems_RemoteSystemSessionInvitationListener: WindowsRuntime.WinRTImport<WindowsSystemRemoteSystems_RemoteSystemSessionInvitationListenerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSystemRemoteSystems_RemoteSystemSessionInvitationListenerProjection.self))
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystemSessionInvitationListener members

    /// Raised when a remote session invitation from another device has been detected.
    public func invitationReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystemRemoteSystems_RemoteSystemSessionInvitationListener?, WindowsSystemRemoteSystems_RemoteSystemSessionInvitationReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_InvitationReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: invitationReceived)
    }

    public func invitationReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_InvitationReceived(token)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.RemoteSystems.RemoteSystemSessionInvitationListener", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}