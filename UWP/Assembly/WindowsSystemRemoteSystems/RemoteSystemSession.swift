// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents and handles a remote session that can be shared between two or more connected devices. See Remarks for information on this feature.
public final class WindowsSystemRemoteSystems_RemoteSystemSession: WindowsRuntime.WinRTImport<WindowsSystemRemoteSystems_RemoteSystemSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.System.RemoteSystems.IRemoteSystemSession members

    /// Gets the machine name of the device that is the controller of this remote session.
    /// - Returns: The machine name of the controller device.
    public var controllerDisplayName: Swift.String {
        get throws {
            try _interop.get_ControllerDisplayName()
        }
    }

    /// Gets the public-facing name for this remote session, given by the controller of the session.
    /// - Returns: The display name for this session.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets the unique identifier for this remote session.
    /// - Returns: An id string unique to this session.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Raised when this device has been disconnected from this remote session.
    public func disconnected(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystemRemoteSystems_RemoteSystemSession?, WindowsSystemRemoteSystems_RemoteSystemSessionDisconnectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Disconnected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: disconnected)
    }

    public func disconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Disconnected(token)
    }

    /// Initializes a RemoteSystemSessionParticipantWatcher to monitor the participants of this remote session.
    /// - Returns: A RemoteSystemSessionParticipantWatcher for this session.
    public func createParticipantWatcher() throws -> WindowsSystemRemoteSystems_RemoteSystemSessionParticipantWatcher {
        try COM.NullResult.unwrap(_interop.createParticipantWatcher())
    }

    /// Invites a given remote device to join this remote session.
    /// - Parameter invitee: The RemoteSystem object representing the system to which this invitation is being sent.
    /// - Returns: An asynchronous operation with a boolean value: **true** if the invitation was sent successfully, otherwise **false**.
    public func sendInvitationAsync(_ invitee: WindowsSystemRemoteSystems_RemoteSystem?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.sendInvitationAsync(invitee))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the session, disconnecting all participants.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystemSessionStatics members

    /// Initializes and returns a RemoteSystemSessionWatcher object to monitor the presence of remote sessions.
    /// - Returns: A watcher object to be used in discovering remote sessions.
    public static func createWatcher() throws -> WindowsSystemRemoteSystems_RemoteSystemSessionWatcher {
        try COM.NullResult.unwrap(_iremoteSystemSessionStatics.createWatcher())
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iremoteSystemSessionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemSessionStatics>? = nil

    internal static var _iremoteSystemSessionStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemSessionStatics> {
        get throws {
            try _iremoteSystemSessionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.RemoteSystems.RemoteSystemSession", id: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemSessionStatics.iid)
            }
        }
    }
}