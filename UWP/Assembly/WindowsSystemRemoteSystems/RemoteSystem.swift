// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// This class manages the attributes of a discovered remote system (device) and provides the capabilities to discover remote systems as part of Project Rome.
public final class WindowsSystemRemoteSystems_RemoteSystem: WindowsRuntime.WinRTImport<WindowsSystemRemoteSystems_RemoteSystemProjection> {
    // MARK: Windows.System.RemoteSystems.IRemoteSystem members

    /// Gets the machine name of the given remote system.
    /// - Returns: The name of the given remote system.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets the unique string identifier for the given remote system.
    /// - Returns: The string identifier for the remote system.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Checks whether the given remote system is available through proximal connection (such as a Bluetooth or local network connection) as opposed to cloud connection.
    /// - Returns: **True** if the given remote system is available by proximal connection, **False** otherwise.
    public var isAvailableByProximity: Swift.Bool {
        get throws {
            try _interop.get_IsAvailableByProximity()
        }
    }

    /// Gets a String representation of the device type of the given remote system (desktop, Xbox, ...).
    /// - Returns: The device type of the remote system.
    public var kind: Swift.String {
        get throws {
            try _interop.get_Kind()
        }
    }

    /// Gets the status of this remote system's availability.
    /// - Returns: The availability status of the remote system.
    public var status: WindowsSystemRemoteSystems_RemoteSystemStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystem2 members

    /// Checks whether the given remote system is available through spatially proximal connection.
    /// - Returns: **true** if the given remote system is available by spatially proximal connection, **false** otherwise.
    public var isAvailableBySpatialProximity: Swift.Bool {
        get throws {
            try _iremoteSystem2.get_IsAvailableBySpatialProximity()
        }
    }

    /// Reports whether the **RemoteSystem** is capable of the given Remote System feature.
    /// - Parameter capabilityName: The Remote System capability to check. This should be the value of one of the properties of KnownRemoteSystemCapabilities.
    /// - Returns: An asynchronous operation with a value of **true** if the **RemoteSystem** is capable, otherwise **false**.
    public func getCapabilitySupportedAsync(_ capabilityName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iremoteSystem2.getCapabilitySupportedAsync(capabilityName))
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystem3 members

    /// Gets the manufacturer name of the given remote system.
    /// - Returns: The name of the given remote system's manufacturer.
    public var manufacturerDisplayName: Swift.String {
        get throws {
            try _iremoteSystem3.get_ManufacturerDisplayName()
        }
    }

    /// Gets the model name of the given remote system.
    /// - Returns: The model name of the given remote system.
    public var modelDisplayName: Swift.String {
        get throws {
            try _iremoteSystem3.get_ModelDisplayName()
        }
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystem4 members

    /// Gets a value describing the OS platform that this remote system is running.
    /// - Returns: A **RemoteSystemPlatform ** value for the corresponding remote system.
    public var platform: WindowsSystemRemoteSystems_RemoteSystemPlatform {
        get throws {
            try _iremoteSystem4.get_Platform()
        }
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystem5 members

    /// A list of the applications on this remote system that have registered with the Connected Devices Platform.
    /// - Returns: The list of applications.
    public var apps: WindowsFoundationCollections_IVectorView<WindowsSystemRemoteSystems_RemoteSystemApp?> {
        get throws {
            try COM.NullResult.unwrap(_iremoteSystem5.get_Apps())
        }
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystem6 members

    /// Gets the User property.
    /// - Returns: The User.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iremoteSystem6.get_User())
        }
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystemStatics2 members

    /// Checks whether the client device is authorized to discover other users' devices or just same-user devices.
    /// - Parameter kind: The RemoteSystemAuthorizationKind to check.
    /// - Returns: Returns **true** if the client device is set to *kind* authorization scheme, otherwise **false**.
    public static func isAuthorizationKindEnabled(_ kind: WindowsSystemRemoteSystems_RemoteSystemAuthorizationKind) throws -> Swift.Bool {
        try _iremoteSystemStatics2.isAuthorizationKindEnabled(kind)
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystemStatics3 members

    /// Returns a RemoteSystemWatcher object that operates in the context of the specified User. The *user* parameter indicates the User to discover devices for.
    /// - Parameter user: The specific User for which the RemoteSystemWatcher will discover remote systems.
    /// - Returns: A watcher that can raise events related to the status of a specific User's discoverable devices.
    public static func createWatcherForUser(_ user: WindowsSystem_User?) throws -> WindowsSystemRemoteSystems_RemoteSystemWatcher {
        try COM.NullResult.unwrap(_iremoteSystemStatics3.createWatcherForUser(user))
    }

    public static func createWatcherForUser(_ user: WindowsSystem_User?, _ filters: WindowsFoundationCollections_IIterable<WindowsSystemRemoteSystems_IRemoteSystemFilter?>?) throws -> WindowsSystemRemoteSystems_RemoteSystemWatcher {
        try COM.NullResult.unwrap(_iremoteSystemStatics3.createWatcherWithFiltersForUser(user, filters))
    }

    // MARK: Windows.System.RemoteSystems.IRemoteSystemStatics members

    /// Attempts to discover a single remote system specified by the *HostName* parameter.
    /// - Parameter hostName: A wrapper object for the address of a remote system to be discovered. For information on how to instantiate a , see the HostName constructor.
    /// - Returns: An asynchronous operation that returns the RemoteSystem that was found. Returns *null* if no  was found.
    public static func findByHostNameAsync(_ hostName: WindowsNetworking_HostName?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystemRemoteSystems_RemoteSystem?> {
        try COM.NullResult.unwrap(_iremoteSystemStatics.findByHostNameAsync(hostName))
    }

    /// Returns a RemoteSystemWatcher object with no filters.
    /// - Returns: A watcher that can raise events related to the status of any discoverable device.
    public static func createWatcher() throws -> WindowsSystemRemoteSystems_RemoteSystemWatcher {
        try COM.NullResult.unwrap(_iremoteSystemStatics.createWatcher())
    }

    public static func createWatcher(_ filters: WindowsFoundationCollections_IIterable<WindowsSystemRemoteSystems_IRemoteSystemFilter?>?) throws -> WindowsSystemRemoteSystems_RemoteSystemWatcher {
        try COM.NullResult.unwrap(_iremoteSystemStatics.createWatcherWithFilters(filters))
    }

    /// Gets the status of the calling app's access to the Remote Systems feature. This method should always be called before an app attempts to discover or otherwise interact with remote systems.
    /// - Returns: An asynchronous operation that returns the status of access.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystemRemoteSystems_RemoteSystemAccessStatus> {
        try COM.NullResult.unwrap(_iremoteSystemStatics.requestAccessAsync())
    }

    // MARK: Implementation details

    private var _iremoteSystem2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem2>? = nil

    internal var _iremoteSystem2: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem2> {
        get throws {
            try _iremoteSystem2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem2.iid).cast(to: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem2.self)
            }
        }
    }

    private var _iremoteSystem3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem3>? = nil

    internal var _iremoteSystem3: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem3> {
        get throws {
            try _iremoteSystem3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem3.iid).cast(to: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem3.self)
            }
        }
    }

    private var _iremoteSystem4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem4>? = nil

    internal var _iremoteSystem4: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem4> {
        get throws {
            try _iremoteSystem4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem4.iid).cast(to: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem4.self)
            }
        }
    }

    private var _iremoteSystem5_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem5>? = nil

    internal var _iremoteSystem5: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem5> {
        get throws {
            try _iremoteSystem5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem5.iid).cast(to: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem5.self)
            }
        }
    }

    private var _iremoteSystem6_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem6>? = nil

    internal var _iremoteSystem6: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem6> {
        get throws {
            try _iremoteSystem6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem6.iid).cast(to: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystem6.self)
            }
        }
    }

    deinit {
        _iremoteSystem2_storage?.release()
        _iremoteSystem3_storage?.release()
        _iremoteSystem4_storage?.release()
        _iremoteSystem5_storage?.release()
        _iremoteSystem6_storage?.release()
    }

    private static var _iremoteSystemStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics2>? = nil

    internal static var _iremoteSystemStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics2> {
        get throws {
            try _iremoteSystemStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.RemoteSystems.RemoteSystem", id: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics2.iid)
            }
        }
    }

    private static var _iremoteSystemStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics3>? = nil

    internal static var _iremoteSystemStatics3: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics3> {
        get throws {
            try _iremoteSystemStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.RemoteSystems.RemoteSystem", id: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics3.iid)
            }
        }
    }

    private static var _iremoteSystemStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics>? = nil

    internal static var _iremoteSystemStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics> {
        get throws {
            try _iremoteSystemStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.RemoteSystems.RemoteSystem", id: CWinRT.SWRT_WindowsSystemRemoteSystems_IRemoteSystemStatics.iid)
            }
        }
    }
}