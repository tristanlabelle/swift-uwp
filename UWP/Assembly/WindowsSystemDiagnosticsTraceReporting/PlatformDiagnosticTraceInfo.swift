// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about the trace.
public final class WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceInfo: WindowsRuntime.WinRTImport<WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceInfoProjection> {
    // MARK: Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceInfo members

    /// Indicates whether the trace is from an ETW AutoLogger session.
    /// - Returns: **True** if the trace is from an ETW autologger session; **false** otherwise.
    public var isAutoLogger: Swift.Bool {
        get throws {
            try _interop.get_IsAutoLogger()
        }
    }

    /// Indicates whether the trace is exclusive.
    /// - Returns: **true** - the trace is exclusive; **false** otherwise.
    public var isExclusive: Swift.Bool {
        get throws {
            try _interop.get_IsExclusive()
        }
    }

    /// Trace files are circular. This property reflects the amount of time that will pass before the trace file starts writing over itself--starting at the beginning of the file.
    /// - Returns: The amount of time until the file overwrites itself, expressed in clock ticks.
    public var maxTraceDurationFileTime: Swift.Int64 {
        get throws {
            try _interop.get_MaxTraceDurationFileTime()
        }
    }

    /// The trace priority.
    /// - Returns: Whether the priority of the trace is normal or has been elevated by the user.
    public var priority: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTracePriority {
        get throws {
            try _interop.get_Priority()
        }
    }

    /// An identifier for this trace.
    /// - Returns: The trace hash value.
    public var profileHash: Swift.UInt64 {
        get throws {
            try _interop.get_ProfileHash()
        }
    }

    /// A unique identifier for this scenario.
    /// - Returns: The globally unique identifier (GUID) for this scenario.
    public var scenarioId: Foundation.UUID {
        get throws {
            try _interop.get_ScenarioId()
        }
    }

    // MARK: Implementation details
}