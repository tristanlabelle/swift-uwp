// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages diagnostic scenarios
public enum WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticActions {
    // MARK: Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics members

    /// Whether a scenario profile has been downloaded to the device.
    /// - Parameter scenarioId: The scenario identifier.
    /// - Returns: *True* if the scenario is available; *false* otherwise.
    public static func isScenarioEnabled(_ scenarioId: Foundation.UUID) throws -> Swift.Bool {
        try _iplatformDiagnosticActionsStatics.isScenarioEnabled(scenarioId)
    }

    public static func tryEscalateScenario(_ scenarioId: Foundation.UUID, _ escalationType: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticEscalationType, _ outputDirectory: Swift.String, _ timestampOutputDirectory: Swift.Bool, _ forceEscalationUpload: Swift.Bool, _ triggers: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws -> Swift.Bool {
        try _iplatformDiagnosticActionsStatics.tryEscalateScenario(scenarioId, escalationType, outputDirectory, timestampOutputDirectory, forceEscalationUpload, triggers)
    }

    /// Downloads the settings that describes which diagnostic data is collected as part of the specified profile.
    /// - Parameter partner: The name of the partner associated with this profile.
    /// - Parameter feature: The name of the feature associated with this profile.
    /// - Parameter isScenarioNamespace: *true* if this profile is associated with a scenario; *false* otherwise.
    /// - Parameter downloadOverCostedNetwork: *true* to download settings even if the device only has access to a costed network connection; *false* otherwise.
    /// - Parameter downloadOverBattery: *true* to download the settings even if the device is running on battery; *false*, otherwise.
    /// - Returns: The result of trying to download the settings.
    public static func downloadLatestSettingsForNamespace(_ partner: Swift.String, _ feature: Swift.String, _ isScenarioNamespace: Swift.Bool, _ downloadOverCostedNetwork: Swift.Bool, _ downloadOverBattery: Swift.Bool) throws -> WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticActionState {
        try _iplatformDiagnosticActionsStatics.downloadLatestSettingsForNamespace(partner, feature, isScenarioNamespace, downloadOverCostedNetwork, downloadOverBattery)
    }

    /// Get the list of scenarios that have been downloaded to the device.
    /// - Returns: A list of GUIDs that identify the scenarios that have been downloaded.
    public static func getActiveScenarioList() throws -> WindowsFoundationCollections_IVectorView<Foundation.UUID> {
        try COM.NullResult.unwrap(_iplatformDiagnosticActionsStatics.getActiveScenarioList())
    }

    /// Cause diagnostic data to be uploaded within the specified parameters.
    /// - Parameter uploadOverCostedNetwork: True to upload even if the device only has access to a cellular data connection; false otherwise.
    /// - Parameter uploadOverBattery: **True** to upload even if the device is running on battery; **false** otherwise.
    public static func forceUpload(_ latency: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticEventBufferLatencies, _ uploadOverCostedNetwork: Swift.Bool, _ uploadOverBattery: Swift.Bool) throws -> WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticActionState {
        try _iplatformDiagnosticActionsStatics.forceUpload(latency, uploadOverCostedNetwork, uploadOverBattery)
    }

    /// Whether a trace for the specified scenario is in progress.
    /// - Parameter slotType: The slot for the scenario.
    /// - Parameter scenarioId: The scenario identifier.
    /// - Parameter traceProfileHash: The trace profile identifier.
    /// - Returns: **True** if the specified trace is running; **false** otherwise.
    public static func isTraceRunning(_ slotType: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceSlotType, _ scenarioId: Foundation.UUID, _ traceProfileHash: Swift.UInt64) throws -> WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceSlotState {
        try _iplatformDiagnosticActionsStatics.isTraceRunning(slotType, scenarioId, traceProfileHash)
    }

    /// Returns the amount of time that a trace in the specified slot has been running.
    /// - Parameter slotType: Which slot to query.
    /// - Returns: How long the trace in the specified slot has been running.
    public static func getActiveTraceRuntime(_ slotType: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceSlotType) throws -> WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceRuntimeInfo {
        try COM.NullResult.unwrap(_iplatformDiagnosticActionsStatics.getActiveTraceRuntime(slotType))
    }

    /// Get the list of diagnostic traces that are available on the system.
    /// - Parameter slotType: The slot for which you want a list of traces.
    /// - Returns: A list that describes the traces available for the slot.
    public static func getKnownTraceList(_ slotType: WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceSlotType) throws -> WindowsFoundationCollections_IVectorView<WindowsSystemDiagnosticsTraceReporting_PlatformDiagnosticTraceInfo?> {
        try COM.NullResult.unwrap(_iplatformDiagnosticActionsStatics.getKnownTraceList(slotType))
    }

    // MARK: Implementation details

    private static var _iplatformDiagnosticActionsStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsTraceReporting_IPlatformDiagnosticActionsStatics>? = nil

    internal static var _iplatformDiagnosticActionsStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnosticsTraceReporting_IPlatformDiagnosticActionsStatics> {
        get throws {
            try _iplatformDiagnosticActionsStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActions", id: CWinRT.SWRT_WindowsSystemDiagnosticsTraceReporting_IPlatformDiagnosticActionsStatics.iid)
            }
        }
    }
}