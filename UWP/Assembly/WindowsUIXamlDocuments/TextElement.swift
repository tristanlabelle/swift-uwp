// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An abstract class used as the base class for the also-abstract Block and Inline classes. TextElement supports common API for classes involved in the XAML text object model, such as properties that control text size, font families and so on.
open class WindowsUIXamlDocuments_TextElement: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Documents.ITextElement members

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _itextElement.get_CharacterSpacing()
        }
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Returns: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _itextElement.put_CharacterSpacing(value)
    }

    /// Gets a TextPointer that represents the end of the content in the element.
    /// - Returns: A TextPointer that represents the end of the content in the TextElement.
    public var contentEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_ContentEnd())
        }
    }

    /// Gets a TextPointer that represents the start of content in the element.
    /// - Returns: A TextPointer that represents the start of the content in the TextElement.
    public var contentStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_ContentStart())
        }
    }

    /// Gets a TextPointer that represents the position just after the end of the element.
    /// - Returns: A TextPointer that represents the position just after the end of the TextElement.
    public var elementEnd: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_ElementEnd())
        }
    }

    /// Gets a TextPointer that represents the position just before the start of the element.
    /// - Returns: A TextPointer that represents the position just before the start of the TextElement.
    public var elementStart: WindowsUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_ElementStart())
        }
    }

    /// Gets or sets the preferred top-level font family for the content of the element.
    /// - Returns: The preferred font family, or a primary preferred font family with one or more fallback font families. See FontFamily for default information.
    public var fontFamily: WindowsUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_FontFamily())
        }
    }

    /// Gets or sets the preferred top-level font family for the content of the element.
    /// - Returns: The preferred font family, or a primary preferred font family with one or more fallback font families. See FontFamily for default information.
    public func fontFamily(_ value: WindowsUIXamlMedia_FontFamily?) throws {
        try _itextElement.put_FontFamily(value)
    }

    /// Gets or sets the font size for the content of the element.
    /// - Returns: The desired font size in pixels. The default is 11 pixels.
    public var fontSize: Swift.Double {
        get throws {
            try _itextElement.get_FontSize()
        }
    }

    /// Gets or sets the font size for the content of the element.
    /// - Returns: The desired font size in pixels. The default is 11 pixels.
    public func fontSize(_ value: Swift.Double) throws {
        try _itextElement.put_FontSize(value)
    }

    /// Gets or sets the glyph width of the font in a family to select.
    /// - Returns: One of the FontStretch constant names, specifying the desired font stretch. The default is **Normal**.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _itextElement.get_FontStretch()
        }
    }

    /// Gets or sets the glyph width of the font in a family to select.
    /// - Returns: One of the FontStretch constant names, specifying the desired font stretch. The default is **Normal**.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _itextElement.put_FontStretch(value)
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: One of the FontStyle constant names, specifying the font style. The default is **Normal**.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _itextElement.get_FontStyle()
        }
    }

    /// Gets or sets the font style for the content in this element.
    /// - Returns: One of the FontStyle constant names, specifying the font style. The default is **Normal**.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _itextElement.put_FontStyle(value)
    }

    /// Gets or sets the top-level font weight to select from the font family for the content in this element.
    /// - Returns: One of the FontWeights property values, specifying the font weight. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _itextElement.get_FontWeight()
        }
    }

    /// Gets or sets the top-level font weight to select from the font family for the content in this element.
    /// - Returns: One of the FontWeights property values, specifying the font weight. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _itextElement.put_FontWeight(value)
    }

    /// Gets or sets the Brush to apply to the content in this element.
    /// - Returns: The brush that is applied to the text content. The default is a SolidColorBrush with Color value Black.
    public var foreground: WindowsUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_itextElement.get_Foreground())
        }
    }

    /// Gets or sets the Brush to apply to the content in this element.
    /// - Returns: The brush that is applied to the text content. The default is a SolidColorBrush with Color value Black.
    public func foreground(_ value: WindowsUIXamlMedia_Brush?) throws {
        try _itextElement.put_Foreground(value)
    }

    /// Gets or sets localization/globalization language information that applies to a TextElement.
    /// - Returns: A string specifying language and culture that follows the RFC 3066 / ISO 639-1 standards. For example, U.S. English is "en-US".
    public var language: Swift.String {
        get throws {
            try _itextElement.get_Language()
        }
    }

    /// Gets or sets localization/globalization language information that applies to a TextElement.
    /// - Returns: A string specifying language and culture that follows the RFC 3066 / ISO 639-1 standards. For example, U.S. English is "en-US".
    public func language(_ value: Swift.String) throws {
        try _itextElement.put_Language(value)
    }

    /// Gets or sets a unique identification for the object. Name can only be set from initial parsing of XAML.
    /// - Returns: The unique identifier for the object. This property is read-only for code, but write-only for XAML, due to special parser handling of XAML properties named "Name".
    public var name: Swift.String {
        get throws {
            try _itextElement.get_Name()
        }
    }

    /// Retrieves an object in the object model / runtime object graph by referencing the object's **x:Name** or **Name** attribute value.
    /// - Parameter name: The name of the object to retrieve.
    /// - Returns: The object that has the specified name, or null if no object is retrieved.
    public func findName(_ name: Swift.String) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_itextElement.findName(name))
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElement2 members

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _itextElement2.get_IsTextScaleFactorEnabled()
        }
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Returns: **true** if automatic text enlargement is enabled; otherwise, **false**.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _itextElement2.put_IsTextScaleFactorEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElement3 members

    /// Gets or sets the access key for this element.
    /// - Returns: The access key for this element.
    public var accessKey: Swift.String {
        get throws {
            try _itextElement3.get_AccessKey()
        }
    }

    /// Gets or sets the access key for this element.
    /// - Returns: The access key for this element.
    public func accessKey(_ value: Swift.String) throws {
        try _itextElement3.put_AccessKey(value)
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public var allowFocusOnInteraction: Swift.Bool {
        get throws {
            try _itextElement3.get_AllowFocusOnInteraction()
        }
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public func allowFocusOnInteraction(_ value: Swift.Bool) throws {
        try _itextElement3.put_AllowFocusOnInteraction(value)
    }

    /// Gets or sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    /// - Returns: **true** to dismiss the access key display when an access key is invoked; otherwise, **false**.
    public var exitDisplayModeOnAccessKeyInvoked: Swift.Bool {
        get throws {
            try _itextElement3.get_ExitDisplayModeOnAccessKeyInvoked()
        }
    }

    /// Gets or sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    /// - Returns: **true** to dismiss the access key display when an access key is invoked; otherwise, **false**.
    public func exitDisplayModeOnAccessKeyInvoked(_ value: Swift.Bool) throws {
        try _itextElement3.put_ExitDisplayModeOnAccessKeyInvoked(value)
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElement4 members

    /// Gets or sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    /// - Returns: The element that defines the access key scope.
    public var accessKeyScopeOwner: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_itextElement4.get_AccessKeyScopeOwner())
        }
    }

    /// Gets or sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    /// - Returns: The element that defines the access key scope.
    public func accessKeyScopeOwner(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _itextElement4.put_AccessKeyScopeOwner(value)
    }

    /// Gets or sets a value that indicates whether an element defines its own access key scope.
    /// - Returns: **true** if an element defines its own scope; otherwise, **false**.
    public var isAccessKeyScope: Swift.Bool {
        get throws {
            try _itextElement4.get_IsAccessKeyScope()
        }
    }

    /// Gets or sets a value that indicates whether an element defines its own access key scope.
    /// - Returns: **true** if an element defines its own scope; otherwise, **false**.
    public func isAccessKeyScope(_ value: Swift.Bool) throws {
        try _itextElement4.put_IsAccessKeyScope(value)
    }

    /// Gets or sets a value that indicates how far left or right the keytip is placed in relation to the text element.
    /// - Returns: The number of pixels to move the KeyTip. Positive values move it right. Negative values move it left.
    public var keyTipHorizontalOffset: Swift.Double {
        get throws {
            try _itextElement4.get_KeyTipHorizontalOffset()
        }
    }

    /// Gets or sets a value that indicates how far left or right the keytip is placed in relation to the text element.
    /// - Returns: The number of pixels to move the KeyTip. Positive values move it right. Negative values move it left.
    public func keyTipHorizontalOffset(_ value: Swift.Double) throws {
        try _itextElement4.put_KeyTipHorizontalOffset(value)
    }

    /// Gets or sets a value that indicates where the KeyTip is placed in relation to the text element.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public var keyTipPlacementMode: WindowsUIXamlInput_KeyTipPlacementMode {
        get throws {
            try _itextElement4.get_KeyTipPlacementMode()
        }
    }

    /// Gets or sets a value that indicates where the KeyTip is placed in relation to the text element.
    /// - Returns: A value of the enumeration. The default is **Auto**.
    public func keyTipPlacementMode(_ value: WindowsUIXamlInput_KeyTipPlacementMode) throws {
        try _itextElement4.put_KeyTipPlacementMode(value)
    }

    /// Gets or sets a value that indicates how far up or down the keytip is placed in relation to the text element.
    /// - Returns: The number of pixels to move the KeyTip. Positive values move it down. Negative values move it up.
    public var keyTipVerticalOffset: Swift.Double {
        get throws {
            try _itextElement4.get_KeyTipVerticalOffset()
        }
    }

    /// Gets or sets a value that indicates how far up or down the keytip is placed in relation to the text element.
    /// - Returns: The number of pixels to move the KeyTip. Positive values move it down. Negative values move it up.
    public func keyTipVerticalOffset(_ value: Swift.Double) throws {
        try _itextElement4.put_KeyTipVerticalOffset(value)
    }

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public var textDecorations: WindowsUIText_TextDecorations {
        get throws {
            try _itextElement4.get_TextDecorations()
        }
    }

    /// Gets or sets a value that indicates what decorations are applied to the text.
    /// - Returns: A value of the enumeration. The default is **None**.
    public func textDecorations(_ value: WindowsUIText_TextDecorations) throws {
        try _itextElement4.put_TextDecorations(value)
    }

    /// Occurs when the access key sequence is complete to notify controls that they should hide access key visuals.
    public func accessKeyDisplayDismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlDocuments_TextElement?, WindowsUIXamlInput_AccessKeyDisplayDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextElement4.add_AccessKeyDisplayDismissed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyDisplayDismissed)
    }

    public func accessKeyDisplayDismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextElement4.remove_AccessKeyDisplayDismissed(token)
    }

    /// Occurs when the access key sequence is started to notify controls that they should show access key visuals.
    public func accessKeyDisplayRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlDocuments_TextElement?, WindowsUIXamlInput_AccessKeyDisplayRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextElement4.add_AccessKeyDisplayRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyDisplayRequested)
    }

    public func accessKeyDisplayRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextElement4.remove_AccessKeyDisplayRequested(token)
    }

    /// Occurs when a user completes an access key sequence to notify the element that the access key action should be invoked.
    public func accessKeyInvoked(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlDocuments_TextElement?, WindowsUIXamlInput_AccessKeyInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextElement4.add_AccessKeyInvoked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: accessKeyInvoked)
    }

    public func accessKeyInvoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextElement4.remove_AccessKeyInvoked(token)
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElement5 members

    /// Gets or sets the XamlRoot in which this element is being viewed.
    /// - Returns: The XamlRoot in which this element is being viewed. The default is **null**.
    public var xamlRoot: WindowsUIXaml_XamlRoot {
        get throws {
            try COM.NullResult.unwrap(_itextElement5.get_XamlRoot())
        }
    }

    /// Gets or sets the XamlRoot in which this element is being viewed.
    /// - Returns: The XamlRoot in which this element is being viewed. The default is **null**.
    public func xamlRoot(_ value: WindowsUIXaml_XamlRoot?) throws {
        try _itextElement5.put_XamlRoot(value)
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElementOverrides members

    /// Override this method to implement how layout and logic should behave when items are removed from a class-specific content or child property.
    open func onDisconnectVisualChildren() throws {
        try _itextElementOverrides.onDisconnectVisualChildren()
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElementStatics4 members

    /// Identifies the **AccessKeyScopeOwner** dependency property.
    /// - Returns: The identifier for the **AccessKeyScopeOwner** dependency property.
    public static var accessKeyScopeOwnerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_AccessKeyScopeOwnerProperty())
        }
    }

    /// Identifies the **IsAccessKeyScope** dependency property.
    /// - Returns: The identifier for the **IsAccessKeyScope** dependency property.
    public static var isAccessKeyScopeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_IsAccessKeyScopeProperty())
        }
    }

    /// Identifies the **KeyTipHorizontalOffset** dependency property.
    /// - Returns: The identifier for the **KeyTipHorizontalOffset** dependency property.
    public static var keyTipHorizontalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_KeyTipHorizontalOffsetProperty())
        }
    }

    /// Identifies the **KeyTipPlacementMode** dependency property.
    /// - Returns: The identifier for the **KeyTipPlacementMode** dependency property.
    public static var keyTipPlacementModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_KeyTipPlacementModeProperty())
        }
    }

    /// Identifies the **KeyTipVerticalOffset** dependency property.
    /// - Returns: The identifier for the **KeyTipVerticalOffset** dependency property.
    public static var keyTipVerticalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_KeyTipVerticalOffsetProperty())
        }
    }

    /// Identifies the **TextDecorations** dependency property.
    /// - Returns: The identifier for the **TextDecorations** dependency property.
    public static var textDecorationsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics4.get_TextDecorationsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElementStatics members

    /// Identifies the CharacterSpacing dependency property.
    /// - Returns: The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the FontFamily dependency property.
    /// - Returns: The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontSize dependency property.
    /// - Returns: Identifier for the FontSize dependency property.
    public static var fontSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontStretch dependency property.
    /// - Returns: Identifier for the FontStretch dependency property.
    public static var fontStretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStyle dependency property.
    /// - Returns: Identifier for the FontStyle dependency property.
    public static var fontStyleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontWeight dependency property.
    /// - Returns: Identifier for the FontWeight dependency property.
    public static var fontWeightProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the Foreground dependency property.
    /// - Returns: Identifier for the Foreground dependency property.
    public static var foregroundProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the Language dependency property.
    /// - Returns: The identifier for the Language dependency property.
    public static var languageProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics.get_LanguageProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElementStatics3 members

    /// Identifies the AccessKey dependency property.
    /// - Returns: The identifier for the AccessKey dependency property.
    public static var accessKeyProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics3.get_AccessKeyProperty())
        }
    }

    /// Identifies the AllowFocusOnInteraction dependency property.
    /// - Returns: The identifier for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics3.get_AllowFocusOnInteractionProperty())
        }
    }

    /// Identifies the ExitDisplayModeOnAccessKeyInvoked dependency property.
    /// - Returns: The identifier for the ExitDisplayModeOnAccessKeyInvoked dependency property.
    public static var exitDisplayModeOnAccessKeyInvokedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics3.get_ExitDisplayModeOnAccessKeyInvokedProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Documents.ITextElementStatics2 members

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    /// - Returns: The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextElementStatics2.get_IsTextScaleFactorEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _itextElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement>? = nil

    internal var _itextElement: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement> {
        get throws {
            try _itextElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement.self)
            }
        }
    }

    private var _itextElement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement2>? = nil

    internal var _itextElement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement2> {
        get throws {
            try _itextElement2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement2.self)
            }
        }
    }

    private var _itextElement3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement3>? = nil

    internal var _itextElement3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement3> {
        get throws {
            try _itextElement3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement3.self)
            }
        }
    }

    private var _itextElement4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement4>? = nil

    internal var _itextElement4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement4> {
        get throws {
            try _itextElement4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement4.self)
            }
        }
    }

    private var _itextElement5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement5>? = nil

    internal var _itextElement5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement5> {
        get throws {
            try _itextElement5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement5.self)
            }
        }
    }

    private var _itextElementOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementOverrides>? = nil

    internal var _itextElementOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementOverrides> {
        get throws {
            try _itextElementOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementOverrides.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElement>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _itextElement_storage?.release()
        _itextElement2_storage?.release()
        _itextElement3_storage?.release()
        _itextElement4_storage?.release()
        _itextElement5_storage?.release()
        _itextElementOverrides_storage?.release()
    }

    private static var _itextElementFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementFactory>? = nil

    internal static var _itextElementFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementFactory> {
        get throws {
            try _itextElementFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Documents.TextElement", id: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementFactory.iid)
            }
        }
    }

    private static var _itextElementStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics4>? = nil

    internal static var _itextElementStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics4> {
        get throws {
            try _itextElementStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Documents.TextElement", id: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics4.iid)
            }
        }
    }

    private static var _itextElementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics>? = nil

    internal static var _itextElementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics> {
        get throws {
            try _itextElementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Documents.TextElement", id: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics.iid)
            }
        }
    }

    private static var _itextElementStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics3>? = nil

    internal static var _itextElementStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics3> {
        get throws {
            try _itextElementStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Documents.TextElement", id: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics3.iid)
            }
        }
    }

    private static var _itextElementStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics2>? = nil

    internal static var _itextElementStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics2> {
        get throws {
            try _itextElementStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Documents.TextElement", id: CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementStatics2.iid)
            }
        }
    }

    // MARK: Override support

    private var _itextElementOverrides_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXamlDocuments_ITextElementOverrides.iid {
            if !_itextElementOverrides_outer.isInitialized {
                _itextElementOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlDocuments_TextElementProjection.VirtualTables.itextElementOverrides)
            }
            return _itextElementOverrides_outer.unknownPointer.addingRef()
        }
        return nil
    }
}