// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a region. This is usually a country, but may be a macroregion.
public final class WindowsGlobalization_GeographicRegion: WindowsRuntime.WinRTImport<WindowsGlobalization_GeographicRegionProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsGlobalization_GeographicRegionProjection.self))
    }

    // MARK: Windows.Globalization.IGeographicRegionFactory members

    public convenience init(_ geographicRegionCode: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeographicRegionFactory.createGeographicRegion(geographicRegionCode)))
    }

    // MARK: Windows.Globalization.IGeographicRegion members

    /// Gets the string that contains the best available identifier that represents the region.
    /// - Returns: Returns a string that contains:
    public var code: Swift.String {
        get throws {
            try _interop.get_Code()
        }
    }

    /// Gets the three-digit identifier for this region, as a string.
    /// - Returns: Returns as a string the ISO-3166-1 numeric three-digit code for the region, or the UN-M49 code. If the region is unknown, returns "999".
    public var codeThreeDigit: Swift.String {
        get throws {
            try _interop.get_CodeThreeDigit()
        }
    }

    /// Gets the three-letter identifier for this region.
    /// - Returns: Returns the three-letter ISO 3166-1 alpha-3 code for this region, if one exists; otherwise, returns "ZZZ".
    public var codeThreeLetter: Swift.String {
        get throws {
            try _interop.get_CodeThreeLetter()
        }
    }

    /// Gets the two-letter identifier for this region.
    /// - Returns: Returns the two-letter ISO 3166-1 alpha-2 code for this region, if one exists; otherwise, returns "ZZ".
    public var codeTwoLetter: Swift.String {
        get throws {
            try _interop.get_CodeTwoLetter()
        }
    }

    /// Gets the set of currencies in use in this region.
    /// - Returns: The set of ISO 4217 3-letter codes for the currencies that are used in the region.
    public var currenciesInUse: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CurrenciesInUse())
        }
    }

    /// Gets a localized string that is suitable for display to the user for identifying the region.
    /// - Returns: The localized name of the region.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets the name of the region in the primary language spoken in this region.
    /// - Returns: The name of the region in the primary language spoken in this region.
    public var nativeName: Swift.String {
        get throws {
            try _interop.get_NativeName()
        }
    }

    // MARK: Windows.Globalization.IGeographicRegionStatics members

    /// Determines whether a geographic region identifier is supported.
    /// - Parameter geographicRegionCode: One of the ISO 3166-1 two-letter or three-letter codes that identify the country, or one of the three-digit UN-M49 codes that identify the geographical region.
    /// - Returns: **True** if the ID is known; otherwise, ** false**. If this method returns **true**, an app can safely construct a region by using this region identifier. If it returns **false**, attempting to construct a region for the given code will throw an exception.
    public static func isSupported(_ geographicRegionCode: Swift.String) throws -> Swift.Bool {
        try _igeographicRegionStatics.isSupported(geographicRegionCode)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.GeographicRegion", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _igeographicRegionFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalization_IGeographicRegionFactory>? = nil

    internal static var _igeographicRegionFactory: COM.COMInterop<CWinRT.SWRT_WindowsGlobalization_IGeographicRegionFactory> {
        get throws {
            try _igeographicRegionFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.GeographicRegion", id: CWinRT.SWRT_WindowsGlobalization_IGeographicRegionFactory.iid)
            }
        }
    }

    private static var _igeographicRegionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalization_IGeographicRegionStatics>? = nil

    internal static var _igeographicRegionStatics: COM.COMInterop<CWinRT.SWRT_WindowsGlobalization_IGeographicRegionStatics> {
        get throws {
            try _igeographicRegionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.GeographicRegion", id: CWinRT.SWRT_WindowsGlobalization_IGeographicRegionStatics.iid)
            }
        }
    }
}