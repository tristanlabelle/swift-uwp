// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for a hostname or an IP address.
public final class WindowsNetworking_HostName: WindowsRuntime.WinRTImport<WindowsNetworking_HostNameProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Networking.IHostNameFactory members

    public convenience init(_ hostName: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ihostNameFactory.createHostName(hostName)))
    }

    // MARK: Windows.Networking.IHostName members

    /// Gets the canonical name for the HostName object.
    /// - Returns: The canonical name for the HostName object.
    public var canonicalName: Swift.String {
        get throws {
            try _interop.get_CanonicalName()
        }
    }

    /// Gets the display name for the HostName object.
    /// - Returns: The display name for the HostName object.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets the IPInformation object for a local IP address assigned to a HostName object.
    /// - Returns: The IPInformation object for the IP address.
    public var ipinformation: WindowsNetworkingConnectivity_IPInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_IPInformation())
        }
    }

    /// Gets the original string used to construct the HostName object.
    /// - Returns: The original string used to construct the HostName object.
    public var rawName: Swift.String {
        get throws {
            try _interop.get_RawName()
        }
    }

    /// Gets the HostNameType of the HostName object.
    /// - Returns: The HostNameType of the HostName object.
    public var type: WindowsNetworking_HostNameType {
        get throws {
            try _interop.get_Type()
        }
    }

    /// Determines whether the specified HostName object has an equivalent value to the current HostName object.
    /// - Parameter hostName: A HostName object that is compared with the current HostName.
    /// - Returns: A Boolean value that indicates whether the specified HostName object is equal to the current HostName object.
    public func isEqual(_ hostName: WindowsNetworking_HostName?) throws -> Swift.Bool {
        try _interop.isEqual(hostName)
    }

    // MARK: Windows.Foundation.IStringable members

    /// Returns a string that represents the HostName object.
    /// - Returns: A string that represents the HostName object.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Networking.IHostNameStatics members

    /// Compares two strings to determine if they represent the same hostname.
    /// - Parameter value1: A hostname or IP address.
    /// - Parameter value2: A hostname or IP address.
    /// - Returns: The return value indicates the lexicographic relation of *value1* to *value2*. If the two parameters represent the same canonical hostname, then zero is returned. If *value1* is less than *value2*, the return value is less than zero. If *value1* is greater than *value2*, the return vale is greater than zero.
    public static func compare(_ value1: Swift.String, _ value2: Swift.String) throws -> Swift.Int32 {
        try _ihostNameStatics.compare(value1, value2)
    }

    // MARK: Implementation details

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _istringable_storage?.release()
    }

    private static var _ihostNameFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworking_IHostNameFactory>? = nil

    internal static var _ihostNameFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworking_IHostNameFactory> {
        get throws {
            try _ihostNameFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.HostName", id: CWinRT.SWRT_WindowsNetworking_IHostNameFactory.iid)
            }
        }
    }

    private static var _ihostNameStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworking_IHostNameStatics>? = nil

    internal static var _ihostNameStatics: COM.COMInterop<CWinRT.SWRT_WindowsNetworking_IHostNameStatics> {
        get throws {
            try _ihostNameStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.HostName", id: CWinRT.SWRT_WindowsNetworking_IHostNameStatics.iid)
            }
        }
    }
}