// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides functionality for accessing the Rich Communication Services (RCS) transport.
public final class WindowsApplicationModelChat_RcsTransport: WindowsRuntime.WinRTImport<WindowsApplicationModelChat_RcsTransportProjection> {
    // MARK: Windows.ApplicationModel.Chat.IRcsTransport members

    /// Gets a configuration object that describes the transport settings.
    /// - Returns: A configuration object that describes the transport settings.
    public var configuration: WindowsApplicationModelChat_RcsTransportConfiguration {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Configuration())
        }
    }

    /// Gets a name-value pair for extensibility of service provider configuration values.
    /// - Returns: A name-value pair for extensibility of service provider configuration values.
    public var extendedProperties: WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ExtendedProperties())
        }
    }

    /// Gets a Boolean value indicating if the transport is active.
    /// - Returns: A Boolean value indicating if the transport is active.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets the friendly name of the transport.
    /// - Returns: The friendly name of the transport.
    public var transportFriendlyName: Swift.String {
        get throws {
            try _interop.get_TransportFriendlyName()
        }
    }

    /// Gets the ID for the transport that is unique on the device.
    /// - Returns: The ID for the transport that is unique on the device.
    public var transportId: Swift.String {
        get throws {
            try _interop.get_TransportId()
        }
    }

    /// Occurs when the service capabilities change.
    public func serviceKindSupportedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelChat_RcsTransport?, WindowsApplicationModelChat_RcsServiceKindSupportedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ServiceKindSupportedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: serviceKindSupportedChanged)
    }

    public func serviceKindSupportedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ServiceKindSupportedChanged(token)
    }

    /// Gets a Boolean value indicating if the specified service kind supports store and forward functionality.
    /// - Parameter serviceKind: The service kind to check for store and forward functionality.
    /// - Returns: A Boolean value indicating if the *serviceKind * supports store and forward.
    public func isStoreAndForwardEnabled(_ serviceKind: WindowsApplicationModelChat_RcsServiceKind) throws -> Swift.Bool {
        try _interop.isStoreAndForwardEnabled(serviceKind)
    }

    /// Gets a Boolean value indicating if the specified service kind is supported, such as chat, group chat, file transfer, and so on.
    /// - Parameter serviceKind: The service kind to verify.
    /// - Returns: TRUE if the RcsServiceKind specified in the *serviceKind* parameter is supported.
    public func isServiceKindSupported(_ serviceKind: WindowsApplicationModelChat_RcsServiceKind) throws -> Swift.Bool {
        try _interop.isServiceKindSupported(serviceKind)
    }

    // MARK: Implementation details
}