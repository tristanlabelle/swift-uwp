// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a conversation in a chat client.
public final class WindowsApplicationModelChat_ChatConversation: WindowsRuntime.WinRTImport<WindowsApplicationModelChat_ChatConversationProjection>, WindowsApplicationModelChat_IChatItemProtocol {
    // MARK: Windows.ApplicationModel.Chat.IChatConversation members

    /// Gets a Boolean value indicating if there are unread messages in the ChatConversation.
    /// - Returns: A Boolean value indicating if there are unread messages in the ChatConversation.
    public var hasUnreadMessages: Swift.Bool {
        get throws {
            try _interop.get_HasUnreadMessages()
        }
    }

    /// Gets the unique identifier for the ChatConversation.
    /// - Returns: The unique identifier for the ChatConversation.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets or sets a Boolean value indicating if the ChatConversation is muted.
    /// - Returns: A Boolean value indicating if the ChatConversation is muted.
    public var isConversationMuted: Swift.Bool {
        get throws {
            try _interop.get_IsConversationMuted()
        }
    }

    /// Gets or sets a Boolean value indicating if the ChatConversation is muted.
    /// - Returns: A Boolean value indicating if the ChatConversation is muted.
    public func isConversationMuted(_ value: Swift.Bool) throws {
        try _interop.put_IsConversationMuted(value)
    }

    /// Gets the ID of the most recent message in the conversation.
    /// - Returns: The ID of the most recent message in the conversation.
    public var mostRecentMessageId: Swift.String {
        get throws {
            try _interop.get_MostRecentMessageId()
        }
    }

    /// Gets a list of all the participants in the conversation.
    /// - Returns: A list of all the participants in the conversation.
    public var participants: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Participants())
        }
    }

    /// Gets or sets the subject of a group conversation.
    /// - Returns: The subject of a group conversation.
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets or sets the subject of a group conversation.
    /// - Returns: The subject of a group conversation.
    public func subject(_ value: Swift.String) throws {
        try _interop.put_Subject(value)
    }

    /// Gets the threading info for the ChatConversation.
    /// - Returns: The threading info for the ChatConversation.
    public var threadingInfo: WindowsApplicationModelChat_ChatConversationThreadingInfo {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ThreadingInfo())
        }
    }

    /// Occurs when the remote user has started or finished typing.
    public func remoteParticipantComposingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelChat_ChatConversation?, WindowsApplicationModelChat_RemoteParticipantComposingChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RemoteParticipantComposingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: remoteParticipantComposingChanged)
    }

    public func remoteParticipantComposingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RemoteParticipantComposingChanged(token)
    }

    /// Asynchronously deletes all of the messages in the ChatConversation and the conversation itself.
    /// - Returns: An async action that indicates when the delete has completed.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteAsync())
    }

    /// Gets the ChatMessageReader for this ChatConversation.
    /// - Returns: The ChatMessageReader for this ChatConversation.
    public func getMessageReader() throws -> WindowsApplicationModelChat_ChatMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReader())
    }

    /// Asynchronously marks all the messages in the conversation as read.
    /// - Returns: An async action indicating that the operation has completed.
    public func markMessagesAsReadAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markAllMessagesAsReadAsync())
    }

    /// Asynchronously marks all the messages in the conversation before the specified DateTime as read.
    /// - Parameter value: Mark all messages before this DateTime as read.
    /// - Returns: An async action indicating that the operation has completed.
    public func markMessagesAsReadAsync(_ value: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markMessagesAsReadAsync(value))
    }

    /// Asynchronously saves the ChatConversation.
    /// - Returns: An async action indicating that the operation has completed.
    public func saveAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.saveAsync())
    }

    /// Call this to indicate that the local participant has started or has completed typing.
    /// - Parameter transportId: Specifies the ChatMessageTransport to use.
    /// - Parameter participantAddress: The address of the remote participant.
    /// - Parameter isComposing: TRUE if the local participant is typing, otherwise FALSE.
    public func notifyLocalParticipantComposing(_ transportId: Swift.String, _ participantAddress: Swift.String, _ isComposing: Swift.Bool) throws {
        try _interop.notifyLocalParticipantComposing(transportId, participantAddress, isComposing)
    }

    /// Locally triggers the event that indicates that a remote participant is typing.
    /// - Parameter transportId: Specifies the ChatMessageTransport to use.
    /// - Parameter participantAddress: The address of the remote participant.
    /// - Parameter isComposing: TRUE if the remote participant is typing, otherwise FALSE.
    public func notifyRemoteParticipantComposing(_ transportId: Swift.String, _ participantAddress: Swift.String, _ isComposing: Swift.Bool) throws {
        try _interop.notifyRemoteParticipantComposing(transportId, participantAddress, isComposing)
    }

    // MARK: Windows.ApplicationModel.Chat.IChatConversation2 members

    /// Gets or sets a boolean that indicates whether participants can be modified or not.
    /// - Returns: A boolean that indicates whether participants can be modified or not.
    public var canModifyParticipants: Swift.Bool {
        get throws {
            try _ichatConversation2.get_CanModifyParticipants()
        }
    }

    /// Gets or sets a boolean that indicates whether participants can be modified or not.
    /// - Returns: A boolean that indicates whether participants can be modified or not.
    public func canModifyParticipants(_ value: Swift.Bool) throws {
        try _ichatConversation2.put_CanModifyParticipants(value)
    }

    // MARK: Windows.ApplicationModel.Chat.IChatItem members

    /// Gets the item kind.
    /// - Returns: The item kind.
    public var itemKind: WindowsApplicationModelChat_ChatItemKind {
        get throws {
            try _ichatItem.get_ItemKind()
        }
    }

    // MARK: Implementation details

    private var _ichatConversation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatConversation2>? = nil

    internal var _ichatConversation2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatConversation2> {
        get throws {
            try _ichatConversation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatConversation2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatConversation2.self)
            }
        }
    }

    private var _ichatItem_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatItem>? = nil

    internal var _ichatItem: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatItem> {
        get throws {
            try _ichatItem_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatItem.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatItem.self)
            }
        }
    }

    deinit {
        _ichatConversation2_storage?.release()
        _ichatItem_storage?.release()
    }
}