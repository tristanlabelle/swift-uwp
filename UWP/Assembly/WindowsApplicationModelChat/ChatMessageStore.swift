// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the methods and properties to read, manage and send messages. An application gets access to the message store using the static ChatMessageManager class.
public final class WindowsApplicationModelChat_ChatMessageStore: WindowsRuntime.WinRTImport<WindowsApplicationModelChat_ChatMessageStoreProjection> {
    // MARK: Windows.ApplicationModel.Chat.IChatMessageStore members

    /// Gets a ChatMessageChangeTracker class object for the message store. A message change tracker allows an application to monitor changes to messages in the message store.
    /// - Returns: The chat message change tracker for the store.
    public var changeTracker: WindowsApplicationModelChat_ChatMessageChangeTracker {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ChangeTracker())
        }
    }

    /// An event that occurs when a message in the message store is changed.
    public func messageChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsApplicationModelChat_ChatMessageStore?, WindowsApplicationModelChat_ChatMessageChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MessageChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: messageChanged)
    }

    public func messageChanged(removing value: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MessageChanged(value)
    }

    /// Deletes a message from the chat message store.
    /// - Parameter localMessageId: The local ID of the message to be deleted.
    /// - Returns: An asynchronous action.
    public func deleteMessageAsync(_ localMessageId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deleteMessageAsync(localMessageId))
    }

    /// Downloads a message specified by the identifier to the message store.
    /// - Parameter localChatMessageId: The local ID of the message to be downloaded.
    /// - Returns: An asynchronous action.
    public func downloadMessageAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.downloadMessageAsync(localChatMessageId))
    }

    /// Retrieves a message specified by an identifier from the message store.
    /// - Parameter localChatMessageId: The local ID of the chat message to be retrieved.
    /// - Returns: An asynchronous operation that returns a chat message upon successful completion.
    public func getMessageAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatMessage?> {
        try COM.NullResult.unwrap(_interop.getMessageAsync(localChatMessageId))
    }

    /// Gets a ChatMessageReader class object which provides a message collection from the message store.
    /// - Returns: The chat message reader.
    public func getMessageReader() throws -> WindowsApplicationModelChat_ChatMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReader1())
    }

    /// Gets a ChatMessageReader class object which provides a message collection from the message store. The collection of messages is limited to the time span provided.
    /// - Parameter recentTimeLimit: The time window for the retrieved reader.
    /// - Returns: The chat message reader.
    public func getMessageReader(_ recentTimeLimit: WindowsFoundation_TimeSpan) throws -> WindowsApplicationModelChat_ChatMessageReader {
        try COM.NullResult.unwrap(_interop.getMessageReader2(recentTimeLimit))
    }

    /// Marks a specified message in the store as already read.
    /// - Parameter localChatMessageId: The local ID of the message to be marked as read.
    /// - Returns: An asynchronous action.
    public func markMessageReadAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.markMessageReadAsync(localChatMessageId))
    }

    /// Attempts a retry of sending a specified message from the message store.
    /// - Parameter localChatMessageId: The local ID of the message to be retried.
    /// - Returns: An asynchronous action.
    public func retrySendMessageAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.retrySendMessageAsync(localChatMessageId))
    }

    /// Attempts to send a chat message. The message is saved to the message store as part of the send operation.
    /// - Parameter chatMessage: The chat message to be sent.
    /// - Returns: An asynchronous action.
    public func sendMessageAsync(_ chatMessage: WindowsApplicationModelChat_ChatMessage?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.sendMessageAsync(chatMessage))
    }

    /// Checks if a chat message is valid and returns the validation result.
    /// - Parameter chatMessage: The chat message to validate.
    /// - Returns: The validation result.
    public func validateMessage(_ chatMessage: WindowsApplicationModelChat_ChatMessage?) throws -> WindowsApplicationModelChat_ChatMessageValidationResult {
        try COM.NullResult.unwrap(_interop.validateMessage(chatMessage))
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessageStore2 members

    /// Occurs when something in the ChatMessageStore has changed.
    public func storeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelChat_ChatMessageStore?, WindowsApplicationModelChat_ChatMessageStoreChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ichatMessageStore2.add_StoreChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: storeChanged)
    }

    public func storeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ichatMessageStore2.remove_StoreChanged(token)
    }

    public func forwardMessageAsync(_ localChatMessageId: Swift.String, _ addresses: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatMessage?> {
        try COM.NullResult.unwrap(_ichatMessageStore2.forwardMessageAsync(localChatMessageId, addresses))
    }

    /// Asynchronously gets a ChatConversation by ID.
    /// - Parameter conversationId: The ID of the conversation to retrieve.
    /// - Returns: The ChatConversation specified by the *conversationId* parameter.
    public func getConversationAsync(_ conversationId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatConversation?> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getConversationAsync(conversationId))
    }

    public func getConversationAsync(_ conversationId: Swift.String, _ transportIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatConversation?> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getConversationForTransportsAsync(conversationId, transportIds))
    }

    /// Asynchronously gets a conversation based on a threading info object.
    /// - Parameter threadingInfo: The threading info that identifies the conversation.
    /// - Returns: The conversation identified by the *threadingInfo* parameter.
    public func getConversationFromThreadingInfoAsync(_ threadingInfo: WindowsApplicationModelChat_ChatConversationThreadingInfo?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatConversation?> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getConversationFromThreadingInfoAsync(threadingInfo))
    }

    /// Gets a new or existing ChatConversationReader for the message store.
    /// - Returns: The new or existing ChatConversationReader.
    public func getConversationReader() throws -> WindowsApplicationModelChat_ChatConversationReader {
        try COM.NullResult.unwrap(_ichatMessageStore2.getConversationReader())
    }

    public func getConversationReader(_ transportIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsApplicationModelChat_ChatConversationReader {
        try COM.NullResult.unwrap(_ichatMessageStore2.getConversationForTransportsReader(transportIds))
    }

    /// Gets a message by its remote ID.
    /// - Parameter transportId: The TransportId to use to get the ChatMessage.
    /// - Parameter remoteId: The RemoteId of the ChatMessage to retrieve.
    /// - Returns: The message.
    public func getMessageByRemoteIdAsync(_ transportId: Swift.String, _ remoteId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatMessage?> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getMessageByRemoteIdAsync(transportId, remoteId))
    }

    /// Asynchronously gets the number of unread chat messages.
    /// - Returns: The number of unread chat messages.
    public func getUnseenCountAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Int32> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getUnseenCountAsync())
    }

    public func getUnseenCountAsync(_ transportIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<Swift.Int32> {
        try COM.NullResult.unwrap(_ichatMessageStore2.getUnseenCountForTransportsReaderAsync(transportIds))
    }

    /// Asynchronously marks all transport messages as seen.
    /// - Returns: An async action indicating that the operation has finished.
    public func markAsSeenAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ichatMessageStore2.markAsSeenAsync())
    }

    public func markAsSeenAsync(_ transportIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ichatMessageStore2.markAsSeenForTransportsAsync(transportIds))
    }

    /// Gets a new or existing ChatSearchReader to be used to search for messages.
    /// - Parameter value: The query options that the search reader will use when looking for matching messages.
    /// - Returns: The new or existing search reader.
    public func getSearchReader(_ value: WindowsApplicationModelChat_ChatQueryOptions?) throws -> WindowsApplicationModelChat_ChatSearchReader {
        try COM.NullResult.unwrap(_ichatMessageStore2.getSearchReader(value))
    }

    /// Asynchronously saves a message to the ChatMessageStore.
    /// - Parameter chatMessage: The message to save.
    /// - Returns: An async action indicating that the operation has finished.
    public func saveMessageAsync(_ chatMessage: WindowsApplicationModelChat_ChatMessage?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ichatMessageStore2.saveMessageAsync(chatMessage))
    }

    /// Asynchronously attempts to cancel downloading the specified message.
    /// - Parameter localChatMessageId: The ID of the message to stop downloading.
    /// - Returns: An async action indicating that the operation has completed.
    public func tryCancelDownloadMessageAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ichatMessageStore2.tryCancelDownloadMessageAsync(localChatMessageId))
    }

    /// Asynchronously attempts to cancel sending the specified message.
    /// - Parameter localChatMessageId: The ID of the message to stop sending.
    /// - Returns: An async action indicating that the operation has completed.
    public func tryCancelSendMessageAsync(_ localChatMessageId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ichatMessageStore2.tryCancelSendMessageAsync(localChatMessageId))
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessageStore3 members

    /// Gets a message by the sync ID.
    /// - Parameter syncId: The sync ID of the message.
    /// - Returns: When the asynchronous operation completes, a ChatMessage object is returned.
    public func getMessageBySyncIdAsync(_ syncId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelChat_ChatMessage?> {
        try COM.NullResult.unwrap(_ichatMessageStore3.getMessageBySyncIdAsync(syncId))
    }

    // MARK: Implementation details

    private var _ichatMessageStore2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore2>? = nil

    internal var _ichatMessageStore2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore2> {
        get throws {
            try _ichatMessageStore2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore2.self)
            }
        }
    }

    private var _ichatMessageStore3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore3>? = nil

    internal var _ichatMessageStore3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore3> {
        get throws {
            try _ichatMessageStore3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageStore3.self)
            }
        }
    }

    deinit {
        _ichatMessageStore2_storage?.release()
        _ichatMessageStore3_storage?.release()
    }
}