// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a chat message.
public final class WindowsApplicationModelChat_ChatMessage: WindowsRuntime.WinRTImport<WindowsApplicationModelChat_ChatMessageProjection>, WindowsApplicationModelChat_IChatItemProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelChat_ChatMessageProjection.self))
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessage members

    /// Gets a list of chat message attachments.
    /// - Returns: A list of chat message attachments.
    public var attachments: WindowsFoundationCollections_IVector<WindowsApplicationModelChat_ChatMessageAttachment?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Attachments())
        }
    }

    /// Gets or sets the body of the chat message.
    /// - Returns: The body of the chat message.
    public var body: Swift.String {
        get throws {
            try _interop.get_Body()
        }
    }

    /// Gets or sets the body of the chat message.
    /// - Returns: The body of the chat message.
    public func body(_ value: Swift.String) throws {
        try _interop.put_Body(value)
    }

    /// Gets the identifier or address of the sender of the message.
    /// - Returns: The sender of the message.
    public var from: Swift.String {
        get throws {
            try _interop.get_From()
        }
    }

    /// Gets the identifier of the message.
    /// - Returns: The ID of the chat message.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a Boolean value indicating if forwarding is disabled.
    /// - Returns: A Boolean value indicating if forwarding is disabled.
    public var isForwardingDisabled: Swift.Bool {
        get throws {
            try _interop.get_IsForwardingDisabled()
        }
    }

    /// Gets Boolean a value indicating if the message is incoming or outgoing.
    /// - Returns: A Boolean value indicating if the message is incoming or outgoing. TRUE indicates incoming, FALSE indicates outgoing.
    public var isIncoming: Swift.Bool {
        get throws {
            try _interop.get_IsIncoming()
        }
    }

    /// Gets a Boolean value indicating if the message has been read.
    /// - Returns: A Boolean value indicating if the message has been read.
    public var isRead: Swift.Bool {
        get throws {
            try _interop.get_IsRead()
        }
    }

    /// Gets the local timestamp of the message.
    /// - Returns: The local timestamp of the message.
    public var localTimestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_LocalTimestamp()
        }
    }

    /// Gets the network timestamp of the message.
    /// - Returns: The network timestamp of the message.
    public var networkTimestamp: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_NetworkTimestamp()
        }
    }

    /// Gets the list of send statuses for the message.
    /// - Returns: The recipient send statuses.
    public var recipientSendStatuses: WindowsFoundationCollections_IMapView<Swift.String, WindowsApplicationModelChat_ChatMessageStatus> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RecipientSendStatuses())
        }
    }

    /// Gets the list of recipients of the message.
    /// - Returns: The list of recipients of the message.
    public var recipients: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Recipients())
        }
    }

    /// Gets the status of the message. Typical states include draft, sent, received, deleted, etc.
    /// - Returns: The status of the message.
    public var status: WindowsApplicationModelChat_ChatMessageStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Gets the subject of the message.
    /// - Returns: The subject of the message.
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets the transport friendly name of the message.
    /// - Returns: The transport friendly name of the message.
    public var transportFriendlyName: Swift.String {
        get throws {
            try _interop.get_TransportFriendlyName()
        }
    }

    /// Gets or sets the transport ID of the message.
    /// - Returns: The transport ID of the message.
    public var transportId: Swift.String {
        get throws {
            try _interop.get_TransportId()
        }
    }

    /// Gets or sets the transport ID of the message.
    /// - Returns: The transport ID of the message.
    public func transportId(_ value: Swift.String) throws {
        try _interop.put_TransportId(value)
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessage2 members

    /// Gets or sets the estimated size of a file to be sent or received.
    /// - Returns: The estimated size of a file to be sent or received.
    public var estimatedDownloadSize: Swift.UInt64 {
        get throws {
            try _ichatMessage2.get_EstimatedDownloadSize()
        }
    }

    /// Gets or sets the estimated size of a file to be sent or received.
    /// - Returns: The estimated size of a file to be sent or received.
    public func estimatedDownloadSize(_ value: Swift.UInt64) throws {
        try _ichatMessage2.put_EstimatedDownloadSize(value)
    }

    /// Gets the identifier or address of the sender of the message.
    /// - Returns: The sender of the message.
    public func from(_ value: Swift.String) throws {
        try _ichatMessage2.put_From(value)
    }

    /// Gets or sets a Boolean value indicating if the message is an auto-reply.
    /// - Returns: A Boolean value indicating if the message is an auto-reply.
    public var isAutoReply: Swift.Bool {
        get throws {
            try _ichatMessage2.get_IsAutoReply()
        }
    }

    /// Gets or sets a Boolean value indicating if the message is an auto-reply.
    /// - Returns: A Boolean value indicating if the message is an auto-reply.
    public func isAutoReply(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsAutoReply(value)
    }

    /// Gets a Boolean value indicating if forwarding is disabled.
    /// - Returns: A Boolean value indicating if forwarding is disabled.
    public func isForwardingDisabled(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsForwardingDisabled(value)
    }

    /// Gets Boolean a value indicating if the message is incoming or outgoing.
    /// - Returns: A Boolean value indicating if the message is incoming or outgoing. TRUE indicates incoming, FALSE indicates outgoing.
    public func isIncoming(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsIncoming(value)
    }

    /// Gets a Boolean value indicating if the message has been read.
    /// - Returns: A Boolean value indicating if the message has been read.
    public func isRead(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsRead(value)
    }

    /// Gets or sets a Boolean value indicating if the message was received during user specified quiet hours.
    /// - Returns: A Boolean value indicating if the message was received during user specified quiet hours.
    public var isReceivedDuringQuietHours: Swift.Bool {
        get throws {
            try _ichatMessage2.get_IsReceivedDuringQuietHours()
        }
    }

    /// Gets or sets a Boolean value indicating if the message was received during user specified quiet hours.
    /// - Returns: A Boolean value indicating if the message was received during user specified quiet hours.
    public func isReceivedDuringQuietHours(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsReceivedDuringQuietHours(value)
    }

    /// Gets a Boolean value indicating if reply is disabled on the ChatMessage.
    /// - Returns: A Boolean value indicating if reply is disabled on the ChatMessage.
    public var isReplyDisabled: Swift.Bool {
        get throws {
            try _ichatMessage2.get_IsReplyDisabled()
        }
    }

    /// Gets or sets a Boolean value indicating if the message has been seen.
    /// - Returns: A Boolean value indicating if the message has been seen.
    public var isSeen: Swift.Bool {
        get throws {
            try _ichatMessage2.get_IsSeen()
        }
    }

    /// Gets or sets a Boolean value indicating if the message has been seen.
    /// - Returns: A Boolean value indicating if the message has been seen.
    public func isSeen(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_IsSeen(value)
    }

    /// Gets a Boolean value indicating if the message is stored on a SIM card.
    /// - Returns: A Boolean value indicating if the message is stored on a SIM card.
    public var isSimMessage: Swift.Bool {
        get throws {
            try _ichatMessage2.get_IsSimMessage()
        }
    }

    /// Gets the local timestamp of the message.
    /// - Returns: The local timestamp of the message.
    public func localTimestamp(_ value: WindowsFoundation_DateTime) throws {
        try _ichatMessage2.put_LocalTimestamp(value)
    }

    /// Gets or sets the type of the ChatMessage.
    /// - Returns: The type of message.
    public var messageKind: WindowsApplicationModelChat_ChatMessageKind {
        get throws {
            try _ichatMessage2.get_MessageKind()
        }
    }

    /// Gets or sets the type of the ChatMessage.
    /// - Returns: The type of message.
    public func messageKind(_ value: WindowsApplicationModelChat_ChatMessageKind) throws {
        try _ichatMessage2.put_MessageKind(value)
    }

    /// Gets or sets a value indicating the type of message operator, such as SMS, MMS, or RCS.
    /// - Returns: The type of message operator.
    public var messageOperatorKind: WindowsApplicationModelChat_ChatMessageOperatorKind {
        get throws {
            try _ichatMessage2.get_MessageOperatorKind()
        }
    }

    /// Gets or sets a value indicating the type of message operator, such as SMS, MMS, or RCS.
    /// - Returns: The type of message operator.
    public func messageOperatorKind(_ value: WindowsApplicationModelChat_ChatMessageOperatorKind) throws {
        try _ichatMessage2.put_MessageOperatorKind(value)
    }

    /// Gets the network timestamp of the message.
    /// - Returns: The network timestamp of the message.
    public func networkTimestamp(_ value: WindowsFoundation_DateTime) throws {
        try _ichatMessage2.put_NetworkTimestamp(value)
    }

    /// Gets the delivery info for each of the recipients of the ChatMessage.
    /// - Returns: The delivery info for the recipients of the ChatMessage.
    public var recipientsDeliveryInfos: WindowsFoundationCollections_IVector<WindowsApplicationModelChat_ChatRecipientDeliveryInfo?> {
        get throws {
            try COM.NullResult.unwrap(_ichatMessage2.get_RecipientsDeliveryInfos())
        }
    }

    /// Gets or sets the remote ID for the ChatMessage.
    /// - Returns: The remote ID for the ChatMessage.
    public func remoteId(_ value: Swift.String) throws {
        try _ichatMessage2.put_RemoteId(value)
    }

    /// Gets or sets a Boolean value indicating if notification of receiving the ChatMessage should be suppressed.
    /// - Returns: A Boolean value indicating if notification of receiving the ChatMessage should be suppressed.
    public var shouldSuppressNotification: Swift.Bool {
        get throws {
            try _ichatMessage2.get_ShouldSuppressNotification()
        }
    }

    /// Gets or sets a Boolean value indicating if notification of receiving the ChatMessage should be suppressed.
    /// - Returns: A Boolean value indicating if notification of receiving the ChatMessage should be suppressed.
    public func shouldSuppressNotification(_ value: Swift.Bool) throws {
        try _ichatMessage2.put_ShouldSuppressNotification(value)
    }

    /// Gets the status of the message. Typical states include draft, sent, received, deleted, etc.
    /// - Returns: The status of the message.
    public func status(_ value: WindowsApplicationModelChat_ChatMessageStatus) throws {
        try _ichatMessage2.put_Status(value)
    }

    /// Gets the subject of the message.
    /// - Returns: The subject of the message.
    public func subject(_ value: Swift.String) throws {
        try _ichatMessage2.put_Subject(value)
    }

    /// Gets or sets the conversation threading info for the ChatMessage.
    /// - Returns: The conversation threading info for the ChatMessage.
    public var threadingInfo: WindowsApplicationModelChat_ChatConversationThreadingInfo {
        get throws {
            try COM.NullResult.unwrap(_ichatMessage2.get_ThreadingInfo())
        }
    }

    /// Gets or sets the conversation threading info for the ChatMessage.
    /// - Returns: The conversation threading info for the ChatMessage.
    public func threadingInfo(_ value: WindowsApplicationModelChat_ChatConversationThreadingInfo?) throws {
        try _ichatMessage2.put_ThreadingInfo(value)
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessage3 members

    /// Gets or sets the remote ID for the ChatMessage.
    /// - Returns: The remote ID for the ChatMessage.
    public var remoteId: Swift.String {
        get throws {
            try _ichatMessage3.get_RemoteId()
        }
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessage4 members

    /// The ID used to identify a message across devices. This ID is generated on creation for all messages. Clients that copy messages between devices also need to copy this ID in order to uniquely identify the same message on different devices
    /// - Returns: Gets and sets the sync ID.
    public var syncId: Swift.String {
        get throws {
            try _ichatMessage4.get_SyncId()
        }
    }

    /// The ID used to identify a message across devices. This ID is generated on creation for all messages. Clients that copy messages between devices also need to copy this ID in order to uniquely identify the same message on different devices
    /// - Returns: Gets and sets the sync ID.
    public func syncId(_ value: Swift.String) throws {
        try _ichatMessage4.put_SyncId(value)
    }

    // MARK: Windows.ApplicationModel.Chat.IChatItem members

    /// Gets the item kind.
    /// - Returns: The item kind.
    public var itemKind: WindowsApplicationModelChat_ChatItemKind {
        get throws {
            try _ichatItem.get_ItemKind()
        }
    }

    // MARK: Implementation details

    private var _ichatMessage2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage2>? = nil

    internal var _ichatMessage2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage2> {
        get throws {
            try _ichatMessage2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage2.self)
            }
        }
    }

    private var _ichatMessage3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage3>? = nil

    internal var _ichatMessage3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage3> {
        get throws {
            try _ichatMessage3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage3.self)
            }
        }
    }

    private var _ichatMessage4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage4>? = nil

    internal var _ichatMessage4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage4> {
        get throws {
            try _ichatMessage4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessage4.self)
            }
        }
    }

    private var _ichatItem_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatItem>? = nil

    internal var _ichatItem: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatItem> {
        get throws {
            try _ichatItem_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatItem.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatItem.self)
            }
        }
    }

    deinit {
        _ichatMessage2_storage?.release()
        _ichatMessage3_storage?.release()
        _ichatMessage4_storage?.release()
        _ichatItem_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Chat.ChatMessage", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}