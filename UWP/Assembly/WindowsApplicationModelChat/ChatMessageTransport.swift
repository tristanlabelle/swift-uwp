// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the identity of a transport for sending and receiving messages. Physically, a chat message transport is a SIM slot on the phone.
public final class WindowsApplicationModelChat_ChatMessageTransport: WindowsRuntime.WinRTImport<WindowsApplicationModelChat_ChatMessageTransportProjection> {
    // MARK: Windows.ApplicationModel.Chat.IChatMessageTransport members

    /// Gets a Boolean value that indicates whether the messaging transport is active.
    /// - Returns: A value indicating if the transport is active.
    public var isActive: Swift.Bool {
        get throws {
            try _interop.get_IsActive()
        }
    }

    /// Gets a Boolean value that indicates whether the current application is set as the messaging notification provider.
    /// - Returns: A value indicating if the app is set as a notification provider.
    public var isAppSetAsNotificationProvider: Swift.Bool {
        get throws {
            try _interop.get_IsAppSetAsNotificationProvider()
        }
    }

    /// Gets a descriptive name identifying the messaging transport.
    /// - Returns: The friendly name for the transport.
    public var transportFriendlyName: Swift.String {
        get throws {
            try _interop.get_TransportFriendlyName()
        }
    }

    /// Gets the messaging transportâ€™s identifier.
    /// - Returns: The ID of the transport.
    public var transportId: Swift.String {
        get throws {
            try _interop.get_TransportId()
        }
    }

    /// Sets the current application to handle messaging notifications.
    /// - Returns: An asynchronous action.
    public func requestSetAsNotificationProviderAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.requestSetAsNotificationProviderAsync())
    }

    // MARK: Windows.ApplicationModel.Chat.IChatMessageTransport2 members

    /// Gets the configuration of the message transport.
    /// - Returns: The configuration of the message transport.
    public var configuration: WindowsApplicationModelChat_ChatMessageTransportConfiguration {
        get throws {
            try COM.NullResult.unwrap(_ichatMessageTransport2.get_Configuration())
        }
    }

    /// Gets the type of the message transport.
    /// - Returns: The type of the message transport.
    public var transportKind: WindowsApplicationModelChat_ChatMessageTransportKind {
        get throws {
            try _ichatMessageTransport2.get_TransportKind()
        }
    }

    // MARK: Implementation details

    private var _ichatMessageTransport2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageTransport2>? = nil

    internal var _ichatMessageTransport2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageTransport2> {
        get throws {
            try _ichatMessageTransport2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageTransport2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelChat_IChatMessageTransport2.self)
            }
        }
    }

    deinit {
        _ichatMessageTransport2_storage?.release()
    }
}