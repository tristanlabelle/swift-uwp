// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an arcade stick.
public final class WindowsGamingInput_ArcadeStick: WindowsRuntime.WinRTImport<WindowsGamingInput_ArcadeStickProjection>, WindowsGamingInput_IGameControllerProtocol, WindowsGamingInput_IGameControllerBatteryInfoProtocol {
    // MARK: Windows.Gaming.Input.IArcadeStick members

    /// Retrieves the button label for the specified button.
    /// - Parameter button: The button for which to retrieve the label.
    /// - Returns: Returns the label for the specified button. If the button label is blank or there is no known label for the controllerâ€™s button, then **None** is returned.
    public func getButtonLabel(_ button: WindowsGamingInput_ArcadeStickButtons) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getButtonLabel(button)
    }

    /// Gets a snapshot of the arcade stick state.
    /// - Returns: The current state of the arcade stick.
    public func getCurrentReading() throws -> WindowsGamingInput_ArcadeStickReading {
        try _interop.getCurrentReading()
    }

    // MARK: Windows.Gaming.Input.IGameController members

    /// The audio headset attached to the arcade stick.
    /// - Returns: The audio headset attached to the arcade stick.
    public var headset: WindowsGamingInput_Headset {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_Headset())
        }
    }

    /// Gets a value that indicates the wireless state of the arcade stick.
    /// - Returns: True if the arcade stick is wireless. Otherwise, false.
    public var isWireless: Swift.Bool {
        get throws {
            try _igameController.get_IsWireless()
        }
    }

    /// The user associated with the arcade stick.
    /// - Returns: The user associated with the arcade stick.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_User())
        }
    }

    /// Signals when a headset is attached to the arcade stick.
    public func headsetConnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetConnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetConnected)
    }

    public func headsetConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetConnected(token)
    }

    /// Signals when a headset is disconnected from the arcade stick.
    public func headsetDisconnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetDisconnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetDisconnected)
    }

    public func headsetDisconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetDisconnected(token)
    }

    /// Signals when the user associated with the arcade stick has changed.
    public func userChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsSystem_UserChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_UserChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: userChanged)
    }

    public func userChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_UserChanged(token)
    }

    // MARK: Windows.Gaming.Input.IGameControllerBatteryInfo members

    /// Gets information about the arcade stick's current battery state.
    /// - Returns: Information about the arcade stick's current battery state.
    public func tryGetBatteryReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_igameControllerBatteryInfo.tryGetBatteryReport())
    }

    // MARK: Windows.Gaming.Input.IArcadeStickStatics members

    /// The list of all connected arcade sticks.
    /// - Returns: The list of all connected arcade sticks.
    public static var arcadeSticks: WindowsFoundationCollections_IVectorView<WindowsGamingInput_ArcadeStick?> {
        get throws {
            try COM.NullResult.unwrap(_iarcadeStickStatics.get_ArcadeSticks())
        }
    }

    /// Signals when a new arcade stick is connected.
    public static func arcadeStickAdded(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_ArcadeStick?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iarcadeStickStatics.add_ArcadeStickAdded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: arcadeStickAdded)
    }

    public static func arcadeStickAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iarcadeStickStatics.remove_ArcadeStickAdded(token)
    }

    /// Signals when an arcade stick is disconnected.
    public static func arcadeStickRemoved(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_ArcadeStick?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iarcadeStickStatics.add_ArcadeStickRemoved(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: arcadeStickRemoved)
    }

    public static func arcadeStickRemoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iarcadeStickStatics.remove_ArcadeStickRemoved(token)
    }

    // MARK: Windows.Gaming.Input.IArcadeStickStatics2 members

    /// Returns the given game controller as an arcade stick.
    /// - Parameter gameController: The game controller to be returned as an arcade stick.
    /// - Returns: The arcade stick that was returned from the given game controller.
    public static func fromGameController(_ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_ArcadeStick {
        try COM.NullResult.unwrap(_iarcadeStickStatics2.fromGameController(gameController))
    }

    // MARK: Implementation details

    private var _igameController_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController>? = nil

    internal var _igameController: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController> {
        get throws {
            try _igameController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameController.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameController.self)
            }
        }
    }

    private var _igameControllerBatteryInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo>? = nil

    internal var _igameControllerBatteryInfo: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo> {
        get throws {
            try _igameControllerBatteryInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.self)
            }
        }
    }

    deinit {
        _igameController_storage?.release()
        _igameControllerBatteryInfo_storage?.release()
    }

    private static var _iarcadeStickStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics>? = nil

    internal static var _iarcadeStickStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics> {
        get throws {
            try _iarcadeStickStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.ArcadeStick", id: CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics.iid)
            }
        }
    }

    private static var _iarcadeStickStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics2>? = nil

    internal static var _iarcadeStickStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics2> {
        get throws {
            try _iarcadeStickStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.ArcadeStick", id: CWinRT.SWRT_WindowsGamingInput_IArcadeStickStatics2.iid)
            }
        }
    }
}