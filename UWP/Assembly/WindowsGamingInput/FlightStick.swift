// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a flight stick.
public final class WindowsGamingInput_FlightStick: WindowsRuntime.WinRTImport<WindowsGamingInput_FlightStickProjection>, WindowsGamingInput_IGameControllerProtocol, WindowsGamingInput_IGameControllerBatteryInfoProtocol {
    // MARK: Windows.Gaming.Input.IFlightStick members

    /// The type of hat switch on the flight stick.
    /// - Returns: The type of hat switch on the flight stick.
    public var hatSwitchKind: WindowsGamingInput_GameControllerSwitchKind {
        get throws {
            try _interop.get_HatSwitchKind()
        }
    }

    /// Retrieves the button label for the specified button.
    /// - Parameter button: The button for which to retrieve the label.
    /// - Returns: The label for the specified button. If the button label is blank or there is no known label for the controllerâ€™s button, then **None** is returned.
    public func getButtonLabel(_ button: WindowsGamingInput_FlightStickButtons) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getButtonLabel(button)
    }

    /// Gets a snapshot of the flight stick state.
    /// - Returns: The current state of the flight stick.
    public func getCurrentReading() throws -> WindowsGamingInput_FlightStickReading {
        try _interop.getCurrentReading()
    }

    // MARK: Windows.Gaming.Input.IGameController members

    /// The audio headset attached to the flight stick.
    /// - Returns: The audio headset attached to the flight stick.
    public var headset: WindowsGamingInput_Headset {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_Headset())
        }
    }

    /// Gets a value that indicates the wireless state of the flight stick.
    /// - Returns: True if the flight stick is wireless. Otherwise, false.
    public var isWireless: Swift.Bool {
        get throws {
            try _igameController.get_IsWireless()
        }
    }

    /// The user associated with the flight stick.
    /// - Returns: The user associated with the flight stick.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_User())
        }
    }

    /// Signals when a headset is attached to the flight stick.
    public func headsetConnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetConnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetConnected)
    }

    public func headsetConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetConnected(token)
    }

    /// Signals when a headset is disconnected from the flight stick.
    public func headsetDisconnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetDisconnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetDisconnected)
    }

    public func headsetDisconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetDisconnected(token)
    }

    /// Signals when the user associated with the flight stick has changed.
    public func userChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsSystem_UserChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_UserChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: userChanged)
    }

    public func userChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_UserChanged(token)
    }

    // MARK: Windows.Gaming.Input.IGameControllerBatteryInfo members

    /// Gets information about the flight stick's current battery state.
    /// - Returns: Information about the flight stick's current battery state.
    public func tryGetBatteryReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_igameControllerBatteryInfo.tryGetBatteryReport())
    }

    // MARK: Windows.Gaming.Input.IFlightStickStatics members

    /// The list of all connected flight sticks.
    /// - Returns: The list of all connected flight sticks.
    public static var flightSticks: WindowsFoundationCollections_IVectorView<WindowsGamingInput_FlightStick?> {
        get throws {
            try COM.NullResult.unwrap(_iflightStickStatics.get_FlightSticks())
        }
    }

    /// Signals when a new flight stick is connected.
    public static func flightStickAdded(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_FlightStick?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflightStickStatics.add_FlightStickAdded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: flightStickAdded)
    }

    public static func flightStickAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflightStickStatics.remove_FlightStickAdded(token)
    }

    /// Signals when a flight stick is disconnected.
    public static func flightStickRemoved(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_FlightStick?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflightStickStatics.add_FlightStickRemoved(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: flightStickRemoved)
    }

    public static func flightStickRemoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflightStickStatics.remove_FlightStickRemoved(token)
    }

    /// Returns the given game controller as a flight stick.
    /// - Parameter gameController: The game controller to be returned as a flight stick.
    /// - Returns: The flight stick that was returned from the given game controller.
    public static func fromGameController(_ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_FlightStick {
        try COM.NullResult.unwrap(_iflightStickStatics.fromGameController(gameController))
    }

    // MARK: Implementation details

    private var _igameController_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController>? = nil

    internal var _igameController: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController> {
        get throws {
            try _igameController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameController.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameController.self)
            }
        }
    }

    private var _igameControllerBatteryInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo>? = nil

    internal var _igameControllerBatteryInfo: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo> {
        get throws {
            try _igameControllerBatteryInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.self)
            }
        }
    }

    deinit {
        _igameController_storage?.release()
        _igameControllerBatteryInfo_storage?.release()
    }

    private static var _iflightStickStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IFlightStickStatics>? = nil

    internal static var _iflightStickStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IFlightStickStatics> {
        get throws {
            try _iflightStickStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.FlightStick", id: CWinRT.SWRT_WindowsGamingInput_IFlightStickStatics.iid)
            }
        }
    }
}