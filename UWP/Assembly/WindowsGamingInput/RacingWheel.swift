// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a racing wheel.
public final class WindowsGamingInput_RacingWheel: WindowsRuntime.WinRTImport<WindowsGamingInput_RacingWheelProjection>, WindowsGamingInput_IGameControllerProtocol, WindowsGamingInput_IGameControllerBatteryInfoProtocol {
    // MARK: Windows.Gaming.Input.IRacingWheel members

    /// Boolean indicating whether the racing wheel has a clutch.
    /// - Returns: Boolean indicating whether the racing wheel has a clutch.
    public var hasClutch: Swift.Bool {
        get throws {
            try _interop.get_HasClutch()
        }
    }

    /// Boolean indicating whether the racing wheel has a handbrake.
    /// - Returns: Boolean indicating whether the racing wheel has a handbrake.
    public var hasHandbrake: Swift.Bool {
        get throws {
            try _interop.get_HasHandbrake()
        }
    }

    /// Boolean indicating whether the racing wheel has a pattern shifter.
    /// - Returns: Boolean indicating whether the racing wheel has a pattern shifter.
    public var hasPatternShifter: Swift.Bool {
        get throws {
            try _interop.get_HasPatternShifter()
        }
    }

    /// The highest gear of the shifter.
    /// - Returns: The highest gear of the shifter.
    public var maxPatternShifterGear: Swift.Int32 {
        get throws {
            try _interop.get_MaxPatternShifterGear()
        }
    }

    /// The maximum angle, in degrees, of the racing wheel.
    /// - Returns: The maximum angle, in degrees, of the racing wheel.
    public var maxWheelAngle: Swift.Double {
        get throws {
            try _interop.get_MaxWheelAngle()
        }
    }

    /// The force feedback motor for the racing wheel.
    /// - Returns: The force feedback motor for the racing wheel. If the controller does not support force feedback, this property will be **null**.
    public var wheelMotor: WindowsGamingInputForceFeedback_ForceFeedbackMotor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WheelMotor())
        }
    }

    /// Retrieves the button label for the specified button.
    /// - Parameter button: The button for which to retrieve the label.
    /// - Returns: Returns the button label for the specified button. If the button label is blank or there is no known label for the controllerâ€™s button, then **None** is returned.
    public func getButtonLabel(_ button: WindowsGamingInput_RacingWheelButtons) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getButtonLabel(button)
    }

    /// Gets a snapshot of the racing wheel's state.
    /// - Returns: The current state of the racing wheel.
    public func getCurrentReading() throws -> WindowsGamingInput_RacingWheelReading {
        try _interop.getCurrentReading()
    }

    // MARK: Windows.Gaming.Input.IGameController members

    /// The audio headset attached to the racing wheel.
    /// - Returns: The audio headset attached to the racing wheel.
    public var headset: WindowsGamingInput_Headset {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_Headset())
        }
    }

    /// Gets a value that indicates the wireless state of the racing wheel.
    /// - Returns: True if the gamepad is wireless. Otherwise, false.
    public var isWireless: Swift.Bool {
        get throws {
            try _igameController.get_IsWireless()
        }
    }

    /// The user associated with the racing wheel.
    /// - Returns: The user associated with the racing wheel.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_User())
        }
    }

    /// Signals when a headset is attached to the racing wheel.
    public func headsetConnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetConnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetConnected)
    }

    public func headsetConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetConnected(token)
    }

    /// Signals when a headset is disconnected from the racing wheel.
    public func headsetDisconnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetDisconnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetDisconnected)
    }

    public func headsetDisconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetDisconnected(token)
    }

    /// Signals when the user associated with the racing wheel has changed.
    public func userChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsSystem_UserChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_UserChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: userChanged)
    }

    public func userChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_UserChanged(token)
    }

    // MARK: Windows.Gaming.Input.IGameControllerBatteryInfo members

    /// Gets information about the racing wheel's current battery state.
    /// - Returns: Information about the racing wheel's current battery state.
    public func tryGetBatteryReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_igameControllerBatteryInfo.tryGetBatteryReport())
    }

    // MARK: Windows.Gaming.Input.IRacingWheelStatics members

    /// The list of all connected racing wheels.
    /// - Returns: The list of all connected racing wheels.
    public static var racingWheels: WindowsFoundationCollections_IVectorView<WindowsGamingInput_RacingWheel?> {
        get throws {
            try COM.NullResult.unwrap(_iracingWheelStatics.get_RacingWheels())
        }
    }

    /// Signals when a new racing wheel is connected.
    public static func racingWheelAdded(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_RacingWheel?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iracingWheelStatics.add_RacingWheelAdded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: racingWheelAdded)
    }

    public static func racingWheelAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iracingWheelStatics.remove_RacingWheelAdded(token)
    }

    /// Signals when a racing wheel is disconnected.
    public static func racingWheelRemoved(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_RacingWheel?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iracingWheelStatics.add_RacingWheelRemoved(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: racingWheelRemoved)
    }

    public static func racingWheelRemoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iracingWheelStatics.remove_RacingWheelRemoved(token)
    }

    // MARK: Windows.Gaming.Input.IRacingWheelStatics2 members

    /// Returns the given game controller as a racing wheel.
    /// - Parameter gameController: The game controller to be returned as a racing wheel.
    /// - Returns: The racing wheel that was returned from the given game controller.
    public static func fromGameController(_ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_RacingWheel {
        try COM.NullResult.unwrap(_iracingWheelStatics2.fromGameController(gameController))
    }

    // MARK: Implementation details

    private var _igameController_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController>? = nil

    internal var _igameController: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController> {
        get throws {
            try _igameController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameController.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameController.self)
            }
        }
    }

    private var _igameControllerBatteryInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo>? = nil

    internal var _igameControllerBatteryInfo: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo> {
        get throws {
            try _igameControllerBatteryInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.self)
            }
        }
    }

    deinit {
        _igameController_storage?.release()
        _igameControllerBatteryInfo_storage?.release()
    }

    private static var _iracingWheelStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics>? = nil

    internal static var _iracingWheelStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics> {
        get throws {
            try _iracingWheelStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.RacingWheel", id: CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics.iid)
            }
        }
    }

    private static var _iracingWheelStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics2>? = nil

    internal static var _iracingWheelStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics2> {
        get throws {
            try _iracingWheelStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.RacingWheel", id: CWinRT.SWRT_WindowsGamingInput_IRacingWheelStatics2.iid)
            }
        }
    }
}