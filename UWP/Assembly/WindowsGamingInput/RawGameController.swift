// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents any type of game controller.
public final class WindowsGamingInput_RawGameController: WindowsRuntime.WinRTImport<WindowsGamingInput_RawGameControllerProjection>, WindowsGamingInput_IGameControllerProtocol, WindowsGamingInput_IGameControllerBatteryInfoProtocol {
    // MARK: Windows.Gaming.Input.IRawGameController members

    /// The number of axes on the raw game controller.
    /// - Returns: The number of axes on the raw game controller.
    public var axisCount: Swift.Int32 {
        get throws {
            try _interop.get_AxisCount()
        }
    }

    /// The number of buttons on the raw game controller.
    /// - Returns: The number of buttons on the raw game controller.
    public var buttonCount: Swift.Int32 {
        get throws {
            try _interop.get_ButtonCount()
        }
    }

    /// The list of force feedback motors in the raw game controller.
    /// - Returns: The list of force feedback motors in the raw game controller.
    public var forceFeedbackMotors: WindowsFoundationCollections_IVectorView<WindowsGamingInputForceFeedback_ForceFeedbackMotor?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ForceFeedbackMotors())
        }
    }

    /// The hardware product ID of the raw game controller.
    /// - Returns: The hardware product ID of the raw game controller.
    public var hardwareProductId: Swift.UInt16 {
        get throws {
            try _interop.get_HardwareProductId()
        }
    }

    /// The hardware vendor ID of the raw game controller.
    /// - Returns: The hardware vendor ID of the raw game controller.
    public var hardwareVendorId: Swift.UInt16 {
        get throws {
            try _interop.get_HardwareVendorId()
        }
    }

    /// The number of switches on the raw game controller.
    /// - Returns: The number of switches on the raw game controller.
    public var switchCount: Swift.Int32 {
        get throws {
            try _interop.get_SwitchCount()
        }
    }

    /// Retrieves the button label for the specified button.
    /// - Parameter buttonIndex: The button for which to retrieve the label.
    /// - Returns: The label for the specified button. If the button label is blank or there is no known label for the controllerâ€™s button, then **None** is returned.
    public func getButtonLabel(_ buttonIndex: Swift.Int32) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getButtonLabel(buttonIndex)
    }

    /// Gets a snapshot of the raw game controller's state.
    /// - Parameter buttonArray: The button array for the raw game controller to be populated with the current state of each button.
    /// - Parameter switchArray: The switch array for the raw game controller to be populated with the current state of each switch.
    /// - Parameter axisArray: The axis array for the raw game controller to be populated with the current state of each axis.
    /// - Returns: The timestamp of when the reading was retrieved from the raw game controller.
    public func getCurrentReading(_ buttonArray: [Swift.Bool], _ switchArray: [WindowsGamingInput_GameControllerSwitchPosition], _ axisArray: [Swift.Double]) throws -> Swift.UInt64 {
        try _interop.getCurrentReading(buttonArray, switchArray, axisArray)
    }

    /// Gets the type of the specified switch on the raw game controller.
    /// - Parameter switchIndex: The index in the raw game controller's switch array of the switch whose type you are querying.
    /// - Returns: The type of the given switch on the raw game controller.
    public func getSwitchKind(_ switchIndex: Swift.Int32) throws -> WindowsGamingInput_GameControllerSwitchKind {
        try _interop.getSwitchKind(switchIndex)
    }

    // MARK: Windows.Gaming.Input.IGameController members

    /// The audio headset attached to the raw game controller.
    /// - Returns: The audio headset attached to the raw game controller.
    public var headset: WindowsGamingInput_Headset {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_Headset())
        }
    }

    /// Gets a value that indicates the wireless state of the raw game controller.
    /// - Returns: True if the raw game controller is wireless. Otherwise, false.
    public var isWireless: Swift.Bool {
        get throws {
            try _igameController.get_IsWireless()
        }
    }

    /// The user associated with the raw game controller.
    /// - Returns: The user associated with the raw game controller.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_User())
        }
    }

    /// Signals when a headset is attached to the raw game controller.
    public func headsetConnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetConnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetConnected)
    }

    public func headsetConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetConnected(token)
    }

    /// Signals when a headset is disconnected from the raw game controller.
    public func headsetDisconnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetDisconnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetDisconnected)
    }

    public func headsetDisconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetDisconnected(token)
    }

    /// Signals when the user associated with the raw game controller has changed.
    public func userChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsSystem_UserChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_UserChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: userChanged)
    }

    public func userChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_UserChanged(token)
    }

    // MARK: Windows.Gaming.Input.IGameControllerBatteryInfo members

    /// Gets information about the raw game controller's current battery state.
    /// - Returns: Information about the raw game controller's current battery state.
    public func tryGetBatteryReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_igameControllerBatteryInfo.tryGetBatteryReport())
    }

    // MARK: Windows.Gaming.Input.IRawGameController2 members

    /// The name of the controller, provided by the hardware.
    /// - Returns: The name of the controller, provided by the hardware.
    public var displayName: Swift.String {
        get throws {
            try _irawGameController2.get_DisplayName()
        }
    }

    /// A unique ID that identifies the controller. As long as the controller is connected, the ID will never change.
    /// - Returns: A unique ID that identifies the controller. As long as the controller is connected, the ID will never change.
    public var nonRoamableId: Swift.String {
        get throws {
            try _irawGameController2.get_NonRoamableId()
        }
    }

    /// A collection of SimpleHapticsController objects representing all available haptic feedback motors available on the device.
    /// - Returns: A collection of SimpleHapticsController objects representing all available haptic feedback motors available on the device.
    public var simpleHapticsControllers: WindowsFoundationCollections_IVectorView<WindowsDevicesHaptics_SimpleHapticsController?> {
        get throws {
            try COM.NullResult.unwrap(_irawGameController2.get_SimpleHapticsControllers())
        }
    }

    // MARK: Windows.Gaming.Input.IRawGameControllerStatics members

    /// The list of all connected raw game controllers.
    /// - Returns: The list of all connected raw game controllers.
    public static var rawGameControllers: WindowsFoundationCollections_IVectorView<WindowsGamingInput_RawGameController?> {
        get throws {
            try COM.NullResult.unwrap(_irawGameControllerStatics.get_RawGameControllers())
        }
    }

    /// Signals when a new raw game controller is connected.
    public static func rawGameControllerAdded(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_RawGameController?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irawGameControllerStatics.add_RawGameControllerAdded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: rawGameControllerAdded)
    }

    public static func rawGameControllerAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irawGameControllerStatics.remove_RawGameControllerAdded(token)
    }

    /// Signals when a raw game controller is disconnected.
    public static func rawGameControllerRemoved(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_RawGameController?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _irawGameControllerStatics.add_RawGameControllerRemoved(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: rawGameControllerRemoved)
    }

    public static func rawGameControllerRemoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _irawGameControllerStatics.remove_RawGameControllerRemoved(token)
    }

    /// Returns the given game controller as a raw game controller.
    /// - Parameter gameController: The game controller to be returned as a raw game controller.
    /// - Returns: The raw game controller that was returned from the given game controller.
    public static func fromGameController(_ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_RawGameController {
        try COM.NullResult.unwrap(_irawGameControllerStatics.fromGameController(gameController))
    }

    // MARK: Implementation details

    private var _igameController_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController>? = nil

    internal var _igameController: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController> {
        get throws {
            try _igameController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameController.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameController.self)
            }
        }
    }

    private var _igameControllerBatteryInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo>? = nil

    internal var _igameControllerBatteryInfo: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo> {
        get throws {
            try _igameControllerBatteryInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.self)
            }
        }
    }

    private var _irawGameController2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRawGameController2>? = nil

    internal var _irawGameController2: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRawGameController2> {
        get throws {
            try _irawGameController2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IRawGameController2.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IRawGameController2.self)
            }
        }
    }

    deinit {
        _igameController_storage?.release()
        _igameControllerBatteryInfo_storage?.release()
        _irawGameController2_storage?.release()
    }

    private static var _irawGameControllerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRawGameControllerStatics>? = nil

    internal static var _irawGameControllerStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IRawGameControllerStatics> {
        get throws {
            try _irawGameControllerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.RawGameController", id: CWinRT.SWRT_WindowsGamingInput_IRawGameControllerStatics.iid)
            }
        }
    }
}