// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a controller of any type that can be used for UI navigation. Most gamepads, arcade sticks, and racing wheels can also be accessed as a **UINavigationController**. It is recommended that games use the controller-specific class during gameplay and the **UINavigationController** class for UI menus.
public final class WindowsGamingInput_UINavigationController: WindowsRuntime.WinRTImport<WindowsGamingInput_UINavigationControllerProjection>, WindowsGamingInput_IGameControllerProtocol, WindowsGamingInput_IGameControllerBatteryInfoProtocol {
    // MARK: Windows.Gaming.Input.IUINavigationController members

    /// Gets a snapshot of the UI navigation controller's state.
    /// - Returns: The state of the UI navigation controller.
    public func getCurrentReading() throws -> WindowsGamingInput_UINavigationReading {
        try _interop.getCurrentReading()
    }

    /// Retrieves a label for an optional UI navigation button.
    /// - Parameter button: Enumeration indicating the UI navigation button whose label to retrieve.
    /// - Returns: The label of the specified button.
    public func getOptionalButtonLabel(_ button: WindowsGamingInput_OptionalUINavigationButtons) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getOptionalButtonLabel(button)
    }

    /// Retrieves a label for a required UI navigation button.
    /// - Parameter button: Enumeration indicating the UI navigation button whose label to retrieve.
    /// - Returns: The label of the specified button.
    public func getRequiredButtonLabel(_ button: WindowsGamingInput_RequiredUINavigationButtons) throws -> WindowsGamingInput_GameControllerButtonLabel {
        try _interop.getRequiredButtonLabel(button)
    }

    // MARK: Windows.Gaming.Input.IGameController members

    /// The audio headset attached to the UI navigation controller.
    /// - Returns: The audio headset attached to the UI navigation controller.
    public var headset: WindowsGamingInput_Headset {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_Headset())
        }
    }

    /// Gets a value that indicates the wireless state of the UI navigation controller.
    /// - Returns: True if the UI navigation controller is wireless. Otherwise, false.
    public var isWireless: Swift.Bool {
        get throws {
            try _igameController.get_IsWireless()
        }
    }

    /// The user associated with the UI navigation controller.
    /// - Returns: The user associated with the UI navigation controller.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_igameController.get_User())
        }
    }

    /// Signals when a headset is attached to the UI navigation controller.
    public func headsetConnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetConnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetConnected)
    }

    public func headsetConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetConnected(token)
    }

    /// Signals when a headset is disconnected from the UI navigation controller.
    public func headsetDisconnected(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsGamingInput_Headset?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_HeadsetDisconnected(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: headsetDisconnected)
    }

    public func headsetDisconnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_HeadsetDisconnected(token)
    }

    /// Signals when the user associated with the UI navigation controller has changed.
    public func userChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsGamingInput_IGameController?, WindowsSystem_UserChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _igameController.add_UserChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: userChanged)
    }

    public func userChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _igameController.remove_UserChanged(token)
    }

    // MARK: Windows.Gaming.Input.IGameControllerBatteryInfo members

    /// Gets information about the UI navigation controller's current battery state.
    /// - Returns: Information about the UI navigation controller's current battery state.
    public func tryGetBatteryReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_igameControllerBatteryInfo.tryGetBatteryReport())
    }

    // MARK: Windows.Gaming.Input.IUINavigationControllerStatics2 members

    /// Returns the given game controller as a UI navigation controller.
    /// - Parameter gameController: The game controller to be returned as a UI navigation controller.
    /// - Returns: The UI navigation controller that was returned from the given game controller.
    public static func fromGameController(_ gameController: WindowsGamingInput_IGameController?) throws -> WindowsGamingInput_UINavigationController {
        try COM.NullResult.unwrap(_iuinavigationControllerStatics2.fromGameController(gameController))
    }

    // MARK: Windows.Gaming.Input.IUINavigationControllerStatics members

    /// The list of all connected UI navigation controllers.
    /// - Returns: The list of all connected UI navigation controllers.
    public static var uinavigationControllers: WindowsFoundationCollections_IVectorView<WindowsGamingInput_UINavigationController?> {
        get throws {
            try COM.NullResult.unwrap(_iuinavigationControllerStatics.get_UINavigationControllers())
        }
    }

    /// Signals when a new UI navigation controller is connected.
    public static func uinavigationControllerAdded(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_UINavigationController?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuinavigationControllerStatics.add_UINavigationControllerAdded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: uinavigationControllerAdded)
    }

    public static func uinavigationControllerAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuinavigationControllerStatics.remove_UINavigationControllerAdded(token)
    }

    /// Signals when a UI navigation controller is disconnected.
    public static func uinavigationControllerRemoved(adding value: WindowsFoundation_EventHandler<WindowsGamingInput_UINavigationController?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuinavigationControllerStatics.add_UINavigationControllerRemoved(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: uinavigationControllerRemoved)
    }

    public static func uinavigationControllerRemoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuinavigationControllerStatics.remove_UINavigationControllerRemoved(token)
    }

    // MARK: Implementation details

    private var _igameController_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController>? = nil

    internal var _igameController: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameController> {
        get throws {
            try _igameController_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameController.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameController.self)
            }
        }
    }

    private var _igameControllerBatteryInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo>? = nil

    internal var _igameControllerBatteryInfo: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo> {
        get throws {
            try _igameControllerBatteryInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.iid).cast(to: CWinRT.SWRT_WindowsGamingInput_IGameControllerBatteryInfo.self)
            }
        }
    }

    deinit {
        _igameController_storage?.release()
        _igameControllerBatteryInfo_storage?.release()
    }

    private static var _iuinavigationControllerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics2>? = nil

    internal static var _iuinavigationControllerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics2> {
        get throws {
            try _iuinavigationControllerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.UINavigationController", id: CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics2.iid)
            }
        }
    }

    private static var _iuinavigationControllerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics>? = nil

    internal static var _iuinavigationControllerStatics: COM.COMInterop<CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics> {
        get throws {
            try _iuinavigationControllerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Gaming.Input.UINavigationController", id: CWinRT.SWRT_WindowsGamingInput_IUINavigationControllerStatics.iid)
            }
        }
    }
}