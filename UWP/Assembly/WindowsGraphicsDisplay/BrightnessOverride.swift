// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Overrides the screen brightness level setting on a device. This API provides the ability to have per-application brightness control on devices that support controllable brightness. 
public final class WindowsGraphicsDisplay_BrightnessOverride: WindowsRuntime.WinRTImport<WindowsGraphicsDisplay_BrightnessOverrideProjection> {
    // MARK: Windows.Graphics.Display.IBrightnessOverride members

    /// Gets the screen brightness level for this BrightnessOverride instance. The brightness level can be changed by calling SetBrightnessLevel().
    public var brightnessLevel: Swift.Double {
        get throws {
            try _interop.get_BrightnessLevel()
        }
    }

    /// BOOLEAN value that indicates whether the brightness override is active. If TRUE, the current brightness level matches the override brightness level. This property value will always be FALSE if StartOverride() isnâ€™t called.
    public var isOverrideActive: Swift.Bool {
        get throws {
            try _interop.get_IsOverrideActive()
        }
    }

    /// Indicates whether the device currently has at least one brightness controllable display. If TRUE, the device has at least one brightness controllable display that supports brightness override.
    public var isSupported: Swift.Bool {
        get throws {
            try _interop.get_IsSupported()
        }
    }

    /// Occurs when the screen brightness level changes.
    public func brightnessLevelChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_BrightnessOverride?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BrightnessLevelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: brightnessLevelChanged)
    }

    public func brightnessLevelChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BrightnessLevelChanged(token)
    }

    /// Occurs when the screen brightness level either starts to match or stops to match the override brightness level. This event is raised when the IsOverrideActive property changes state.
    public func isOverrideActiveChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_BrightnessOverride?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_IsOverrideActiveChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isOverrideActiveChanged)
    }

    public func isOverrideActiveChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_IsOverrideActiveChanged(token)
    }

    /// Occurs when a brightness controllable display is detected or removed. This event is raised when the IsSupported property changes.
    public func isSupportedChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_BrightnessOverride?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_IsSupportedChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: isSupportedChanged)
    }

    public func isSupportedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_IsSupportedChanged(token)
    }

    /// Sets the brightness level and the override options. When your app is ready to change the current brightness with what you want to override it with, call StartOverride().
    /// - Parameter brightnessLevel: Brightness of the screen. Value should be in the range of 0.0 and 1.0, where 1.0 is for 100% brightness.
    /// - Parameter options: Options that modify the brightness level of the screen during the brightness override session.
    public func setBrightnessLevel(_ brightnessLevel: Swift.Double, _ options: WindowsGraphicsDisplay_DisplayBrightnessOverrideOptions) throws {
        try _interop.setBrightnessLevel(brightnessLevel, options)
    }

    /// Sets the brightness level, by specifying a scenario that has a well-known brightness level, and the override options of the brightness override.
    /// - Parameter scenario: A scenario that has a well-known brightness level.
    /// - Parameter options: Options that modify the brightness level of the screen during the brightness override session.
    public func setBrightnessScenario(_ scenario: WindowsGraphicsDisplay_DisplayBrightnessScenario, _ options: WindowsGraphicsDisplay_DisplayBrightnessOverrideOptions) throws {
        try _interop.setBrightnessScenario(scenario, options)
    }

    /// Gets the brightness level associated with the specified scenario.
    /// - Parameter scenario: The enum value of the scenario that you want to retrieve the brightness level for, as defined in DisplayBrightnessScenario.
    /// - Returns: A value to indicate the brightness level.
    public func getLevelForScenario(_ scenario: WindowsGraphicsDisplay_DisplayBrightnessScenario) throws -> Swift.Double {
        try _interop.getLevelForScenario(scenario)
    }

    /// Request to start overriding the screen brightness level. The request to start overriding does not mean that the screen brightness level always changes to match the specified override brightness level. It's still up to the system to decide whether or not to honor this override request. Use IsOverrideActive and IsOverrideActiveChanged properties to determine if the system has honored the override request.
    public func startOverride() throws {
        try _interop.startOverride()
    }

    /// Stops overriding the brightness level.
    public func stopOverride() throws {
        try _interop.stopOverride()
    }

    // MARK: Windows.Graphics.Display.IBrightnessOverrideStatics members

    /// Returns a brightness override object. This method does not require CoreWindow so it can be used by apps that are running in the background.
    /// - Returns: The brightness override object.
    public static func getDefaultForSystem() throws -> WindowsGraphicsDisplay_BrightnessOverride {
        try COM.NullResult.unwrap(_ibrightnessOverrideStatics.getDefaultForSystem())
    }

    /// Returns a brightness override object. This method requires CoreWindow so it can only be used by apps that are currently running in a window. The returned BrightnessOverride object may not be the same between multiple GetForCurrentView() calls on the same thread.
    /// - Returns: The brightness override object.
    public static func getForCurrentView() throws -> WindowsGraphicsDisplay_BrightnessOverride {
        try COM.NullResult.unwrap(_ibrightnessOverrideStatics.getForCurrentView())
    }

    /// Saves the specified brightness override settings by committing these values to user settings. Use this method to persist the override settings after overriding stops. If a NULL object is passed in, the system turns on auto-brightness.
    /// - Parameter value: The brightness override object.
    /// - Returns: BOOLEAN value to indicate if the operation is successful or not.
    public static func saveForSystemAsync(_ value: WindowsGraphicsDisplay_BrightnessOverride?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ibrightnessOverrideStatics.saveForSystemAsync(value))
    }

    // MARK: Implementation details

    private static var _ibrightnessOverrideStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IBrightnessOverrideStatics>? = nil

    internal static var _ibrightnessOverrideStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IBrightnessOverrideStatics> {
        get throws {
            try _ibrightnessOverrideStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Display.BrightnessOverride", id: CWinRT.SWRT_WindowsGraphicsDisplay_IBrightnessOverrideStatics.iid)
            }
        }
    }
}