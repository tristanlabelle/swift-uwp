// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains a snapshot of the Advanced Color-related information of a monitor or display driver.
public final class WindowsGraphicsDisplay_AdvancedColorInfo: WindowsRuntime.WinRTImport<WindowsGraphicsDisplay_AdvancedColorInfoProjection> {
    // MARK: Windows.Graphics.Display.IAdvancedColorInfo members

    /// Gets the native Blue color primary for the display.
    /// - Returns: The native Blue color primary for the display.
    public var bluePrimary: WindowsFoundation_Point {
        get throws {
            try _interop.get_BluePrimary()
        }
    }

    /// Gets the AdvancedColorKind which is currently being set on the display.
    /// - Returns: The AdvancedColorKind which is currently being set on the display.
    public var currentAdvancedColorKind: WindowsGraphicsDisplay_AdvancedColorKind {
        get throws {
            try _interop.get_CurrentAdvancedColorKind()
        }
    }

    /// Gets the native Green color primary for the display.
    /// - Returns: The native Green color primary for the display.
    public var greenPrimary: WindowsFoundation_Point {
        get throws {
            try _interop.get_GreenPrimary()
        }
    }

    /// Gets the maximum frame average luminance of the display which can be achieved on the whole display.
    /// - Returns: The maximum frame average luminance of the display which can be achieved on the whole display.
    public var maxAverageFullFrameLuminanceInNits: Swift.Float {
        get throws {
            try _interop.get_MaxAverageFullFrameLuminanceInNits()
        }
    }

    /// Gets the maximum peak luminance of the display in nits, which is usually valid for a small part of the display.
    /// - Returns: The maximum peak luminance of the display in nits.
    public var maxLuminanceInNits: Swift.Float {
        get throws {
            try _interop.get_MaxLuminanceInNits()
        }
    }

    /// Get the minimum luminance of the display in nits.
    /// - Returns: The minimum luminance of the display in nits.
    public var minLuminanceInNits: Swift.Float {
        get throws {
            try _interop.get_MinLuminanceInNits()
        }
    }

    /// Gets the native Red color primary for the display.
    /// - Returns: The native Red color primary for the display.
    public var redPrimary: WindowsFoundation_Point {
        get throws {
            try _interop.get_RedPrimary()
        }
    }

    /// Get the luminance value, in nits, which is currently being used by the operating system for all the SDR content on this display.
    /// - Returns: The luminance value, in nits.
    public var sdrWhiteLevelInNits: Swift.Float {
        get throws {
            try _interop.get_SdrWhiteLevelInNits()
        }
    }

    /// Gets the native white point for the display.
    /// - Returns: The native white point for the display.
    public var whitePoint: WindowsFoundation_Point {
        get throws {
            try _interop.get_WhitePoint()
        }
    }

    /// Returns a boolean value that describes whether the specified HDR metadata format is supported by the display in its current state.
    /// - Parameter format: The HDR metadata format to check.
    /// - Returns: **True** if the format is supported; otherwise, **false**.
    public func isHdrMetadataFormatCurrentlySupported(_ format: WindowsGraphicsDisplay_HdrMetadataFormat) throws -> Swift.Bool {
        try _interop.isHdrMetadataFormatCurrentlySupported(format)
    }

    /// Returns a boolean value that describes if the specified Advanced Color kind value is inherently supported by the monitor or display driver.
    /// - Parameter kind: The Advanced Color kind to check.
    /// - Returns: **True** if the specified Advanced Color kind is supported; otherwise, **false**.
    public func isAdvancedColorKindAvailable(_ kind: WindowsGraphicsDisplay_AdvancedColorKind) throws -> Swift.Bool {
        try _interop.isAdvancedColorKindAvailable(kind)
    }

    // MARK: Implementation details
}