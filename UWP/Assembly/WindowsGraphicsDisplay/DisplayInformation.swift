// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Monitors and controls display-related information for an application view. The class provides events to allow clients to monitor for changes in the application view affecting which display(s) the view resides on, as well as changes in displays that can affect the application view.
public final class WindowsGraphicsDisplay_DisplayInformation: WindowsRuntime.WinRTImport<WindowsGraphicsDisplay_DisplayInformationProjection> {
    // MARK: Windows.Graphics.Display.IDisplayInformation members

    /// Gets the current orientation of a rectangular monitor.
    /// - Returns: The current orientation of a rectangular monitor.
    public var currentOrientation: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _interop.get_CurrentOrientation()
        }
    }

    /// Gets the pixels per logical inch of the current environment.
    /// - Returns: The pixels per logical inch of the current environment.
    public var logicalDpi: Swift.Float {
        get throws {
            try _interop.get_LogicalDpi()
        }
    }

    /// Gets the native orientation of the display monitor, which is typically the orientation where the buttons on the device match the orientation of the monitor.
    /// - Returns: The native orientation of the display monitor.
    public var nativeOrientation: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _interop.get_NativeOrientation()
        }
    }

    /// Gets the raw dots per inch (DPI) along the x axis of the display monitor.
    /// - Returns: The raw dots per inch (DPI) along the x axis of the display monitor.
    public var rawDpiX: Swift.Float {
        get throws {
            try _interop.get_RawDpiX()
        }
    }

    /// Gets the raw dots per inch (DPI) along the y axis of the display monitor.
    /// - Returns: The raw dots per inch (DPI) along the y axis of the display monitor.
    public var rawDpiY: Swift.Float {
        get throws {
            try _interop.get_RawDpiY()
        }
    }

    /// Gets the scale factor of the immersive environment.
    /// - Returns: The scale factor of the immersive environment.
    public var resolutionScale: WindowsGraphicsDisplay_ResolutionScale {
        get throws {
            try _interop.get_ResolutionScale()
        }
    }

    /// Gets a value that indicates whether the device supports stereoscopic 3D.
    /// - Returns: **TRUE** if the device is capable of stereoscopic 3D and stereoscopic 3D is currently enabled; **FALSE** otherwise.
    public var stereoEnabled: Swift.Bool {
        get throws {
            try _interop.get_StereoEnabled()
        }
    }

    /// Occurs when the physical display's color profile changes.
    public func colorProfileChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ColorProfileChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: colorProfileChanged)
    }

    public func colorProfileChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ColorProfileChanged(token)
    }

    /// Occurs when the LogicalDpi property changes because the pixels per inch (PPI) of the display changes.
    public func dpiChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DpiChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dpiChanged)
    }

    public func dpiChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DpiChanged(token)
    }

    /// Occurs when either the CurrentOrientation or NativeOrientation property changes because of a mode change or a monitor change.
    public func orientationChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_OrientationChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: orientationChanged)
    }

    public func orientationChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_OrientationChanged(token)
    }

    /// Occurs when the StereoEnabled property changes because support for stereoscopic 3D changes.
    public func stereoEnabledChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StereoEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stereoEnabledChanged)
    }

    public func stereoEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StereoEnabledChanged(token)
    }

    /// Asynchronously gets the default International Color Consortium (ICC) color profile that is associated with the physical display.
    /// - Returns: Object that manages the asynchronous retrieval of the color profile.
    public func getColorProfileAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_interop.getColorProfileAsync())
    }

    // MARK: Windows.Graphics.Display.IDisplayInformation2 members

    /// Gets a value representing the number of raw (physical) pixels for each view (layout) pixel.
    /// - Returns: A value representing the number of raw (physical) pixels for each view (layout) pixel.
    public var rawPixelsPerViewPixel: Swift.Double {
        get throws {
            try _idisplayInformation2.get_RawPixelsPerViewPixel()
        }
    }

    // MARK: Windows.Graphics.Display.IDisplayInformation3 members

    /// Diagonal size of the display in inches.
    /// - Returns: Returns the diagonal size of the display in inches. May return null when display size information is not available or undetermined (when connected to a projector, or displays are duplicated).
    public var diagonalSizeInInches: Swift.Double? {
        get throws {
            try _idisplayInformation3.get_DiagonalSizeInInches()
        }
    }

    // MARK: Windows.Graphics.Display.IDisplayInformation4 members

    /// Returns the current height resolution of the logical monitor.
    /// - Returns: Returns the current resolution of the logical monitor containing the application’s view. When the application’s view is moved to another logical monitor, this property will reflect the new logical monitor’s resolution.
    public var screenHeightInRawPixels: Swift.UInt32 {
        get throws {
            try _idisplayInformation4.get_ScreenHeightInRawPixels()
        }
    }

    /// Returns the current width resolution of the logical monitor.
    /// - Returns: Returns the current resolution of the logical monitor containing the application’s view. When the application’s view is moved to another logical monitor, this property will reflect the new logical monitor’s resolution.
    public var screenWidthInRawPixels: Swift.UInt32 {
        get throws {
            try _idisplayInformation4.get_ScreenWidthInRawPixels()
        }
    }

    // MARK: Windows.Graphics.Display.IDisplayInformation5 members

    /// Raised when the advanced color information is changed.
    public func advancedColorInfoChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idisplayInformation5.add_AdvancedColorInfoChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: advancedColorInfoChanged)
    }

    public func advancedColorInfoChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idisplayInformation5.remove_AdvancedColorInfoChanged(token)
    }

    /// Retrieves the Advanced Color information.
    /// - Returns: The Advanced Color information.
    public func getAdvancedColorInfo() throws -> WindowsGraphicsDisplay_AdvancedColorInfo {
        try COM.NullResult.unwrap(_idisplayInformation5.getAdvancedColorInfo())
    }

    // MARK: Windows.Graphics.Display.IDisplayInformationStatics members

    /// Gets and sets the preferred orientation of the app.
    /// - Returns: The orientation of a rectangular monitor.
    public static var autoRotationPreferences: WindowsGraphicsDisplay_DisplayOrientations {
        get throws {
            try _idisplayInformationStatics.get_AutoRotationPreferences()
        }
    }

    /// Gets and sets the preferred orientation of the app.
    /// - Returns: The orientation of a rectangular monitor.
    public static func autoRotationPreferences(_ value: WindowsGraphicsDisplay_DisplayOrientations) throws {
        try _idisplayInformationStatics.put_AutoRotationPreferences(value)
    }

    /// Occurs when the display requires redrawing.
    public static func displayContentsInvalidated(adding handler: WindowsFoundation_TypedEventHandler<WindowsGraphicsDisplay_DisplayInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idisplayInformationStatics.add_DisplayContentsInvalidated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: displayContentsInvalidated)
    }

    public static func displayContentsInvalidated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idisplayInformationStatics.remove_DisplayContentsInvalidated(token)
    }

    /// Gets the  DisplayInformation instance associated with the current thread's CoreApplicationView. This DisplayInformation instance is tied to the view and cannot be used from other threads.
    /// - Returns: A DisplayInformation object that provides display-related information for the current thread's view.
    public static func getForCurrentView() throws -> WindowsGraphicsDisplay_DisplayInformation {
        try COM.NullResult.unwrap(_idisplayInformationStatics.getForCurrentView())
    }

    // MARK: Implementation details

    private var _idisplayInformation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation2>? = nil

    internal var _idisplayInformation2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation2> {
        get throws {
            try _idisplayInformation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation2.iid).cast(to: CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation2.self)
            }
        }
    }

    private var _idisplayInformation3_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation3>? = nil

    internal var _idisplayInformation3: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation3> {
        get throws {
            try _idisplayInformation3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation3.iid).cast(to: CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation3.self)
            }
        }
    }

    private var _idisplayInformation4_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation4>? = nil

    internal var _idisplayInformation4: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation4> {
        get throws {
            try _idisplayInformation4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation4.iid).cast(to: CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation4.self)
            }
        }
    }

    private var _idisplayInformation5_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation5>? = nil

    internal var _idisplayInformation5: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation5> {
        get throws {
            try _idisplayInformation5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation5.iid).cast(to: CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformation5.self)
            }
        }
    }

    deinit {
        _idisplayInformation2_storage?.release()
        _idisplayInformation3_storage?.release()
        _idisplayInformation4_storage?.release()
        _idisplayInformation5_storage?.release()
    }

    private static var _idisplayInformationStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformationStatics>? = nil

    internal static var _idisplayInformationStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformationStatics> {
        get throws {
            try _idisplayInformationStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Display.DisplayInformation", id: CWinRT.SWRT_WindowsGraphicsDisplay_IDisplayInformationStatics.iid)
            }
        }
    }
}