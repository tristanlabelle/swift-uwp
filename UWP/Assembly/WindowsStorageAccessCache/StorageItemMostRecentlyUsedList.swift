// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents your app's most recently used list (MRU) (obtained from the static StorageApplicationPermissions.MostRecentlyUsedList property). You use your MRU to track items (files and/or folders) that the user has accessed most recently. Items are stored in the MRU as StorageFile and StorageFolder objects.
public final class WindowsStorageAccessCache_StorageItemMostRecentlyUsedList: WindowsRuntime.WinRTImport<WindowsStorageAccessCache_StorageItemMostRecentlyUsedListProjection>, WindowsStorageAccessCache_IStorageItemAccessListProtocol {
    // MARK: Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList members

    /// Fires when a storage item is removed from the most recently used (MRU) list.
    public func itemRemoved(adding handler: WindowsFoundation_TypedEventHandler<WindowsStorageAccessCache_StorageItemMostRecentlyUsedList?, WindowsStorageAccessCache_ItemRemovedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ItemRemoved(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: itemRemoved)
    }

    public func itemRemoved(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ItemRemoved(eventCookie)
    }

    // MARK: Windows.Storage.AccessCache.IStorageItemAccessList members

    /// Gets an object for retrieving storage items from the most recently used (MRU) list.
    /// - Returns: The object for retrieving storage items.
    public var entries: WindowsStorageAccessCache_AccessListEntryView {
        get throws {
            try COM.NullResult.unwrap(_istorageItemAccessList.get_Entries())
        }
    }

    /// Gets the maximum number of storage items that the most recently used (MRU) list can contain.
    /// - Returns: The maximum number of storage items.
    public var maximumItemsAllowed: Swift.UInt32 {
        get throws {
            try _istorageItemAccessList.get_MaximumItemsAllowed()
        }
    }

    /// Adds a new storage item to the most recently used (MRU) list.
    /// - Parameter file: The storage item to add.
    /// - Returns: A token that the app can use later to retrieve the storage item.
    public func add(_ file: WindowsStorage_IStorageItem?) throws -> Swift.String {
        try _istorageItemAccessList.addOverloadDefaultMetadata(file)
    }

    /// Adds a new storage item and accompanying metadata to the most recently used (MRU) list.
    /// - Parameter file: The storage item to add.
    /// - Parameter metadata: Optional metadata to associate with the storage item.
    /// - Returns: A token that the app can use later to retrieve the storage item.
    public func add(_ file: WindowsStorage_IStorageItem?, _ metadata: Swift.String) throws -> Swift.String {
        try _istorageItemAccessList.add(file, metadata)
    }

    /// Adds a new storage item to the most recently used (MRU) list, or replaces the specified item if it already exists in the list.
    /// - Parameter token: The token associated with the new storage item. If the access list already contains a storage item that has this token, the new item replaces the existing one.
    /// - Parameter file: The storage item to add or replace.
    public func addOrReplace(_ token: Swift.String, _ file: WindowsStorage_IStorageItem?) throws {
        try _istorageItemAccessList.addOrReplaceOverloadDefaultMetadata(token, file)
    }

    /// Adds a new storage item and accompanying metadata to the most recently used (MRU) list, or replaces the specified item if it already exists in the list.
    /// - Parameter token: The token associated with the new storage item. If the access list already contains a storage item that has this token, the new item replaces the existing one.
    /// - Parameter file: The storage item to add or replace.
    /// - Parameter metadata: Optional metadata to associate with the storage item.
    public func addOrReplace(_ token: Swift.String, _ file: WindowsStorage_IStorageItem?, _ metadata: Swift.String) throws {
        try _istorageItemAccessList.addOrReplace(token, file, metadata)
    }

    /// Retrieves the specified item (like a file or folder) from the most recently used (MRU) list.
    /// - Parameter token: The token of the item to retrieve.
    /// - Returns: When this method completes successfully, it returns the item (type IStorageItem ) that is associated with the specified *token*.
    public func getItemAsync(_ token: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getItemAsync(token))
    }

    /// Retrieves the specified storageFile from the most recently used (MRU) list.
    /// - Parameter token: The token of the storageFile to retrieve.
    /// - Returns: When this method completes successfully, it returns the storageFile that is associated with the specified *token*.
    public func getFileAsync(_ token: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getFileAsync(token))
    }

    /// Retrieves the specified StorageFolder from the most recently used (MRU) list.
    /// - Parameter token: The token of the StorageFolder to retrieve.
    /// - Returns: When this method completes successfully, it returns the StorageFolder that is associated with the specified *token*.
    public func getFolderAsync(_ token: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getFolderAsync(token))
    }

    /// Retrieves the specified item (like a file or folder) from the most recently used (MRU) list using the specified options.
    /// - Parameter token: The token of the item to retrieve.
    /// - Parameter options: The enum value that describes the behavior to use when the app accesses the item.
    /// - Returns: When this method completes successfully, it returns the item (type IStorageItem ) that is associated with the specified *token*.
    public func getItemAsync(_ token: Swift.String, _ options: WindowsStorageAccessCache_AccessCacheOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getItemWithOptionsAsync(token, options))
    }

    /// Retrieves the specified storageFile from the most recently used (MRU) list using the specified options.
    /// - Parameter token: The token of the storageFile to retrieve.
    /// - Parameter options: The enum value that describes the behavior to use when the app accesses the item.
    /// - Returns: When this method completes successfully, it returns the storageFile that is associated with the specified *token*.
    public func getFileAsync(_ token: Swift.String, _ options: WindowsStorageAccessCache_AccessCacheOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getFileWithOptionsAsync(token, options))
    }

    /// Retrieves the specified StorageFolder from the most recently used (MRU) list using the specified options.
    /// - Parameter token: The token of the StorageFolder to retrieve.
    /// - Parameter options: The enum value that describes the behavior to use when the app accesses the item.
    /// - Returns: When this method completes successfully, it returns the StorageFolder that is associated with the specified *token*.
    public func getFolderAsync(_ token: Swift.String, _ options: WindowsStorageAccessCache_AccessCacheOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageItemAccessList.getFolderWithOptionsAsync(token, options))
    }

    /// Removes the specified storage item from the most recently used (MRU) list.
    /// - Parameter token: The token of the storage item to remove.
    public func remove(_ token: Swift.String) throws {
        try _istorageItemAccessList.remove(token)
    }

    /// Determines whether the most recently used (MRU) list contains the specified storage item.
    /// - Parameter token: The token of the storage item to look for.
    /// - Returns: True if the most recently used (MRU) list contains the specified storage item; false otherwise.
    public func containsItem(_ token: Swift.String) throws -> Swift.Bool {
        try _istorageItemAccessList.containsItem(token)
    }

    /// Removes all storage items from the most recently used (MRU) list.
    public func clear() throws {
        try _istorageItemAccessList.clear()
    }

    /// Determines whether the app has access to the specified storage item in the most recently used (MRU) list.
    /// - Parameter file: The storage item to check for access.
    /// - Returns: True if the app can access the storage item; otherwise false.
    public func checkAccess(_ file: WindowsStorage_IStorageItem?) throws -> Swift.Bool {
        try _istorageItemAccessList.checkAccess(file)
    }

    // MARK: Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2 members

    /// Adds a new storage item and accompanying metadata to the most recently used (MRU) list, specifying the extent of its visibility in the list.
    /// - Parameter file: The storage item to add.
    /// - Parameter metadata: Optional metadata to associate with the storage item.
    /// - Parameter visibility: The extent of the visibility of the storage item in the list.
    /// - Returns: A token that the app can use later to retrieve the storage item.
    public func add(_ file: WindowsStorage_IStorageItem?, _ metadata: Swift.String, _ visibility: WindowsStorageAccessCache_RecentStorageItemVisibility) throws -> Swift.String {
        try _istorageItemMostRecentlyUsedList2.addWithMetadataAndVisibility(file, metadata, visibility)
    }

    /// Adds a new storage item and accompanying metadata to the most recently used (MRU) list, or replaces the specified item if it already exists in the list. Also specifies the extent of its visibility in the list.
    /// - Parameter token: The token associated with the new storage item. If the access list already contains a storage item that has this token, the new item replaces the existing one.
    /// - Parameter file: The storage item to add or replace.
    /// - Parameter metadata: Optional metadata to associate with the storage item.
    /// - Parameter visibility: The extent of the visibility of the storage item in the list.
    public func addOrReplace(_ token: Swift.String, _ file: WindowsStorage_IStorageItem?, _ metadata: Swift.String, _ visibility: WindowsStorageAccessCache_RecentStorageItemVisibility) throws {
        try _istorageItemMostRecentlyUsedList2.addOrReplaceWithMetadataAndVisibility(token, file, metadata, visibility)
    }

    // MARK: Implementation details

    private var _istorageItemAccessList_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemAccessList>? = nil

    internal var _istorageItemAccessList: COM.COMInterop<CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemAccessList> {
        get throws {
            try _istorageItemAccessList_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemAccessList.iid).cast(to: CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemAccessList.self)
            }
        }
    }

    private var _istorageItemMostRecentlyUsedList2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemMostRecentlyUsedList2>? = nil

    internal var _istorageItemMostRecentlyUsedList2: COM.COMInterop<CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemMostRecentlyUsedList2> {
        get throws {
            try _istorageItemMostRecentlyUsedList2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemMostRecentlyUsedList2.iid).cast(to: CWinRT.SWRT_WindowsStorageAccessCache_IStorageItemMostRecentlyUsedList2.self)
            }
        }
    }

    deinit {
        _istorageItemAccessList_storage?.release()
        _istorageItemMostRecentlyUsedList2_storage?.release()
    }
}