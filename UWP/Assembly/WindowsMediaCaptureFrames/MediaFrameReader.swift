// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to frames from a MediaFrameSource and notification when a new frame arrives.
public final class WindowsMediaCaptureFrames_MediaFrameReader: WindowsRuntime.WinRTImport<WindowsMediaCaptureFrames_MediaFrameReaderProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Capture.Frames.IMediaFrameReader members

    /// Occurs when a new frame arrives from the media frame source associated with the MediaFrameReader.
    public func frameArrived(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaCaptureFrames_MediaFrameReader?, WindowsMediaCaptureFrames_MediaFrameArrivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_FrameArrived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: frameArrived)
    }

    public func frameArrived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_FrameArrived(token)
    }

    /// Attempts to obtain a MediaFrameReference object representing the latest frame from the MediaFrameSource.
    /// - Returns: A MediaFrameReference representing the latest frame from the media frame source.
    public func tryAcquireLatestFrame() throws -> WindowsMediaCaptureFrames_MediaFrameReference {
        try COM.NullResult.unwrap(_interop.tryAcquireLatestFrame())
    }

    /// Asynchronously starts the reading of frames from a MediaFrameSource.
    /// - Returns: An asynchronous operation that returns a MediaFrameReaderStartStatus on completion.
    public func startAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameReaderStartStatus> {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Asynchronously stops the reading of frames from a MediaFrameSource.
    /// - Returns: An asynchronous action.
    public func stopAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.stopAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes of the object and associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Capture.Frames.IMediaFrameReader2 members

    /// Gets or sets a value that specifies the way that the system should manage frames acquired from a **MediaFrameReader** when a new frame arrives before the app has finished processing the previous frame.
    /// - Returns: A value that specifies the frame reader's acquisition mode.
    public var acquisitionMode: WindowsMediaCaptureFrames_MediaFrameReaderAcquisitionMode {
        get throws {
            try _imediaFrameReader2.get_AcquisitionMode()
        }
    }

    /// Gets or sets a value that specifies the way that the system should manage frames acquired from a **MediaFrameReader** when a new frame arrives before the app has finished processing the previous frame.
    /// - Returns: A value that specifies the frame reader's acquisition mode.
    public func acquisitionMode(_ value: WindowsMediaCaptureFrames_MediaFrameReaderAcquisitionMode) throws {
        try _imediaFrameReader2.put_AcquisitionMode(value)
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _imediaFrameReader2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameReader2>? = nil

    internal var _imediaFrameReader2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameReader2> {
        get throws {
            try _imediaFrameReader2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameReader2.iid).cast(to: CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameReader2.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _imediaFrameReader2_storage?.release()
    }
}