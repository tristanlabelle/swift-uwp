// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows you to get and set properties of a MediaFrameSource and to get a VideoDeviceController, which provides camera controls such as exposure, focus, and zoom.
public final class WindowsMediaCaptureFrames_MediaFrameSourceController: WindowsRuntime.WinRTImport<WindowsMediaCaptureFrames_MediaFrameSourceControllerProjection> {
    // MARK: Windows.Media.Capture.Frames.IMediaFrameSourceController members

    /// Gets a VideoDeviceController for a MediaFrameSource, which provides camera controls such as exposure, focus, and zoom.
    /// - Returns: A VideoDeviceController for the media frame source.
    public var videoDeviceController: WindowsMediaDevices_VideoDeviceController {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoDeviceController())
        }
    }

    /// Asynchronously gets an object that contains the value of a MediaFrameSource property, if the property value is successfully retrieved, and describes the result status of the get operation.
    /// - Parameter propertyId: The identifier of the media frame source property to be retrieved.
    /// - Returns: An asynchronous operation that returns a MediaFrameSourceGetPropertyResult upon completion.
    public func getPropertyAsync(_ propertyId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameSourceGetPropertyResult?> {
        try COM.NullResult.unwrap(_interop.getPropertyAsync(propertyId))
    }

    /// Asynchronously sets the value of a MediaFrameSource property and returns a MediaFrameSourceSetPropertyStatus object describing the result status of the set operation.
    /// - Parameter propertyId: The identifier of the media frame source property to be set.
    /// - Parameter propertyValue: The value of the media frame source property to be set.
    /// - Returns: An asynchronous operation that returns a MediaFrameSourceSetPropertyStatus upon completion.
    public func setPropertyAsync(_ propertyId: Swift.String, _ propertyValue: WindowsRuntime.IInspectable?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameSourceSetPropertyStatus> {
        try COM.NullResult.unwrap(_interop.setPropertyAsync(propertyId, propertyValue))
    }

    // MARK: Windows.Media.Capture.Frames.IMediaFrameSourceController2 members

    public func getPropertyByExtendedIdAsync(_ extendedPropertyId: [Swift.UInt8], _ maxPropertyValueSize: Swift.UInt32?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameSourceGetPropertyResult?> {
        try COM.NullResult.unwrap(_imediaFrameSourceController2.getPropertyByExtendedIdAsync(extendedPropertyId, maxPropertyValueSize))
    }

    /// Asynchronously sets the value of the property with the specified ID on a MediaFrameSource, using an extended ID with custom header information.
    /// - Parameter extendedPropertyId: A byte array containing the extended identifier data.
    /// - Parameter propertyValue: A byte array containing the value to be set for the property.
    /// - Returns: An asynchronous operation that, upon successful completion, returns a MediaFrameSourceSetPropertyStatus value indicating the status of the operation.
    public func setPropertyByExtendedIdAsync(_ extendedPropertyId: [Swift.UInt8], _ propertyValue: [Swift.UInt8]) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaCaptureFrames_MediaFrameSourceSetPropertyStatus> {
        try COM.NullResult.unwrap(_imediaFrameSourceController2.setPropertyByExtendedIdAsync(extendedPropertyId, propertyValue))
    }

    // MARK: Windows.Media.Capture.Frames.IMediaFrameSourceController3 members

    /// Gets an AudioDeviceController for a MediaFrameSource, which provides controls such as setting the volume level or muting the audio device.
    /// - Returns: An AudioDeviceController for the media frame source.
    public var audioDeviceController: WindowsMediaDevices_AudioDeviceController {
        get throws {
            try COM.NullResult.unwrap(_imediaFrameSourceController3.get_AudioDeviceController())
        }
    }

    // MARK: Implementation details

    private var _imediaFrameSourceController2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController2>? = nil

    internal var _imediaFrameSourceController2: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController2> {
        get throws {
            try _imediaFrameSourceController2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController2.iid).cast(to: CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController2.self)
            }
        }
    }

    private var _imediaFrameSourceController3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController3>? = nil

    internal var _imediaFrameSourceController3: COM.COMInterop<CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController3> {
        get throws {
            try _imediaFrameSourceController3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController3.iid).cast(to: CWinRT.SWRT_WindowsMediaCaptureFrames_IMediaFrameSourceController3.self)
            }
        }
    }

    deinit {
        _imediaFrameSourceController2_storage?.release()
        _imediaFrameSourceController3_storage?.release()
    }
}