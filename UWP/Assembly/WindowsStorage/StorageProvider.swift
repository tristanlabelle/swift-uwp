// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive.
public final class WindowsStorage_StorageProvider: WindowsRuntime.WinRTImport<WindowsStorage_StorageProviderProjection> {
    // MARK: Windows.Storage.IStorageProvider members

    /// Gets a user-friendly name for the current provider of files and folders.
    /// - Returns: The user-friendly name for the provider. This name is localized to the current system locale.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets an identifier for the current provider of files and folders.
    /// - Returns: The identifier for the provider.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    // MARK: Windows.Storage.IStorageProvider2 members

    /// Determines if a property is supported by a cloud storage provider.
    /// - Parameter propertyCanonicalName: The name of the property. E.g., "System.Photo.DateTaken" or "System.Music.Artist"
    /// - Returns: **True** if the property is supported by the cloud storage provider; **False** otherwise
    public func isPropertySupportedForPartialFileAsync(_ propertyCanonicalName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_istorageProvider2.isPropertySupportedForPartialFileAsync(propertyCanonicalName))
    }

    // MARK: Implementation details

    private var _istorageProvider2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageProvider2>? = nil

    internal var _istorageProvider2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageProvider2> {
        get throws {
            try _istorageProvider2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageProvider2.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageProvider2.self)
            }
        }
    }

    deinit {
        _istorageProvider2_storage?.release()
    }
}