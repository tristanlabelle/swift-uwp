// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides helper methods for reading and writing files that are represented by objects of type IStorageFile.
public enum WindowsStorage_FileIO {
    // MARK: Windows.Storage.IFileIOStatics members

    /// Reads the contents of the specified file and returns text.
    /// - Parameter file: The file to read.
    /// - Returns: When this method completes successfully, it returns the contents of the file as a text string.
    public static func readTextAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_ifileIOStatics.readTextAsync(file))
    }

    /// Reads the contents of the specified file using the specified character encoding and returns text.
    /// - Parameter file: The file to read.
    /// - Parameter encoding: The character encoding to use.
    /// - Returns: When this method completes successfully, it returns the contents of the file as a text string.
    public static func readTextAsync(_ file: WindowsStorage_IStorageFile?, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_ifileIOStatics.readTextWithEncodingAsync(file, encoding))
    }

    /// Writes text to the specified file.
    /// - Parameter file: The file that the text is written to.
    /// - Parameter contents: The text to write.
    /// - Returns: No object or value is returned when this method completes.
    public static func writeTextAsync(_ file: WindowsStorage_IStorageFile?, _ contents: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeTextAsync(file, contents))
    }

    /// Writes text to the specified file using the specified character encoding.
    /// - Parameter file: The file that the text is written to.
    /// - Parameter contents: The text to write.
    /// - Parameter encoding: The character encoding of the file.
    /// - Returns: No object or value is returned when this method completes.
    public static func writeTextAsync(_ file: WindowsStorage_IStorageFile?, _ contents: Swift.String, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeTextWithEncodingAsync(file, contents, encoding))
    }

    /// Appends text to the specified file.
    /// - Parameter file: The file that the text is appended to.
    /// - Parameter contents: The text to append.
    /// - Returns: No object or value is returned when this method completes.
    public static func appendTextAsync(_ file: WindowsStorage_IStorageFile?, _ contents: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.appendTextAsync(file, contents))
    }

    /// Appends text to the specified file using the specified character encoding.
    /// - Parameter file: The file that the text is appended to.
    /// - Parameter contents: The text to append.
    /// - Parameter encoding: The character encoding of the file.
    /// - Returns: No object or value is returned when this method completes.
    public static func appendTextAsync(_ file: WindowsStorage_IStorageFile?, _ contents: Swift.String, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.appendTextWithEncodingAsync(file, contents, encoding))
    }

    /// Reads the contents of the specified file and returns lines of text.
    /// - Parameter file: The file to read.
    /// - Returns: When this method completes successfully, it returns the contents of the file as a list (type IVector ) of lines of text. Each line of text in the list is represented by a String object.
    public static func readLinesAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<Swift.String>?> {
        try COM.NullResult.unwrap(_ifileIOStatics.readLinesAsync(file))
    }

    /// Reads the contents of the specified file using the specified character encoding and returns lines of text.
    /// - Parameter file: The file to read.
    /// - Parameter encoding: The character encoding to use.
    /// - Returns: When this method completes successfully, it returns the contents of the file as a list (type IVector ) of lines of text. Each line of text in the list is represented by a String object.
    public static func readLinesAsync(_ file: WindowsStorage_IStorageFile?, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<Swift.String>?> {
        try COM.NullResult.unwrap(_ifileIOStatics.readLinesWithEncodingAsync(file, encoding))
    }

    public static func writeLinesAsync(_ file: WindowsStorage_IStorageFile?, _ lines: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeLinesAsync(file, lines))
    }

    public static func writeLinesAsync(_ file: WindowsStorage_IStorageFile?, _ lines: WindowsFoundationCollections_IIterable<Swift.String>?, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeLinesWithEncodingAsync(file, lines, encoding))
    }

    public static func appendLinesAsync(_ file: WindowsStorage_IStorageFile?, _ lines: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.appendLinesAsync(file, lines))
    }

    public static func appendLinesAsync(_ file: WindowsStorage_IStorageFile?, _ lines: WindowsFoundationCollections_IIterable<Swift.String>?, _ encoding: WindowsStorageStreams_UnicodeEncoding) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.appendLinesWithEncodingAsync(file, lines, encoding))
    }

    /// Reads the contents of the specified file and returns a buffer.
    /// - Parameter file: The file to read.
    /// - Returns: When this method completes, it returns an object (type IBuffer ) that represents the contents of the file.
    public static func readBufferAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_ifileIOStatics.readBufferAsync(file))
    }

    /// Writes data from a buffer to the specified file.
    /// - Parameter file: The file that the buffer of data is written to.
    /// - Parameter buffer: The buffer that contains the data to write.
    /// - Returns: No object or value is returned when this method completes.
    public static func writeBufferAsync(_ file: WindowsStorage_IStorageFile?, _ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeBufferAsync(file, buffer))
    }

    /// Writes an array of bytes of data to the specified file.
    /// - Parameter file: The file that the byte is written to.
    /// - Parameter buffer: The array of bytes to write.
    /// - Returns: No object or value is returned when this method completes.
    public static func writeBytesAsync(_ file: WindowsStorage_IStorageFile?, _ buffer: [Swift.UInt8]) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ifileIOStatics.writeBytesAsync(file, buffer))
    }

    // MARK: Implementation details

    private static var _ifileIOStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IFileIOStatics>? = nil

    internal static var _ifileIOStatics: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IFileIOStatics> {
        get throws {
            try _ifileIOStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.FileIO", id: CWinRT.SWRT_WindowsStorage_IFileIOStatics.iid)
            }
        }
    }
}