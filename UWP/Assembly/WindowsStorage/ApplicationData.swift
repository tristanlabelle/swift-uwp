// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the application data store. Application data consists of files and settings that are either local, roaming, or temporary.
public final class WindowsStorage_ApplicationData: WindowsRuntime.WinRTImport<WindowsStorage_ApplicationDataProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Storage.IApplicationData members

    /// Gets the root folder in the local app data store. This folder is backed up to the cloud.
    /// - Returns: The file system folder that contains the files.
    public var localFolder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_LocalFolder())
        }
    }

    /// Gets the application settings container in the local app data store.
    /// - Returns: The application settings container.
    public var localSettings: WindowsStorage_ApplicationDataContainer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_LocalSettings())
        }
    }

    /// Gets the root folder in the roaming app data store.
    /// - Returns: The file system folder that contains the files.
    public var roamingFolder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RoamingFolder())
        }
    }

    /// Gets the application settings container in the roaming app data store.
    /// - Returns: The application settings container.
    public var roamingSettings: WindowsStorage_ApplicationDataContainer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RoamingSettings())
        }
    }

    /// Gets the maximum size of the data that can be synchronized to the cloud from the roaming app data store.
    /// - Returns: The maximum size of the data, in KB.
    public var roamingStorageQuota: Swift.UInt64 {
        get throws {
            try _interop.get_RoamingStorageQuota()
        }
    }

    /// Gets the root folder in the temporary app data store.
    /// - Returns: The file system folder that contains the files.
    public var temporaryFolder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TemporaryFolder())
        }
    }

    /// Gets the version number of the application data in the app data store.
    /// - Returns: The version number of the application data.
    public var version: Swift.UInt32 {
        get throws {
            try _interop.get_Version()
        }
    }

    /// Occurs when roaming application data is synchronized.
    public func dataChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsStorage_ApplicationData?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DataChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dataChanged)
    }

    public func dataChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DataChanged(token)
    }

    /// Sets the version number of the application data in the app data store.
    /// - Parameter desiredVersion: The new version number.
    /// - Parameter handler: The set version event handler.
    /// - Returns: An object that is used to manage the asynchronous set version operation.
    public func setVersionAsync(_ desiredVersion: Swift.UInt32, _ handler: WindowsStorage_ApplicationDataSetVersionHandler?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setVersionAsync(desiredVersion, handler))
    }

    /// Removes all application data from the local, roaming, and temporary app data stores.
    /// - Returns: An object that is used to manage the asynchronous clear operation.
    public func clearAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.clearAllAsync())
    }

    /// Removes all application data from the specified app data store.
    /// - Parameter locality: One of the enumeration values.
    /// - Returns: An object that is used to manage the asynchronous clear operation.
    public func clearAsync(_ locality: WindowsStorage_ApplicationDataLocality) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.clearAsync(locality))
    }

    /// Sends a DataChanged event to all registered event handlers.
    public func signalDataChanged() throws {
        try _interop.signalDataChanged()
    }

    // MARK: Windows.Storage.IApplicationData2 members

    /// Gets the folder in the local app data store where you can save files that are not included in backup and restore.
    /// - Returns: The folder in the local app data store where you can save files that are not included in backup and restore.
    public var localCacheFolder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_iapplicationData2.get_LocalCacheFolder())
        }
    }

    // MARK: Windows.Storage.IApplicationData3 members

    /// Gets the root folder in the shared app data store.
    /// - Returns: The file system folder that contains files.
    public var sharedLocalFolder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_iapplicationData3.get_SharedLocalFolder())
        }
    }

    /// Gets the specified subfolder of the shared storage folder for the publisher of the current app.
    /// - Parameter folderName: The subfolder to get from the shared storage folder for the publisher of the current app.
    /// - Returns: The specified subfolder.
    public func getPublisherCacheFolder(_ folderName: Swift.String) throws -> WindowsStorage_StorageFolder {
        try COM.NullResult.unwrap(_iapplicationData3.getPublisherCacheFolder(folderName))
    }

    /// Clears the files and subfolders from the specified subfolder of the shared storage folder for the publisher of the current app.
    /// - Parameter folderName: The subfolder of the shared storage folder for the publisher of the current app from which to clear the files and subfolders.
    /// - Returns: Represents an asynchronous action that does not return a result and does not have progress notifications. You can use this value to get the results of the operation, or to specify a method to run when the operation completes - for example, to repopulate the shared storage folder with new data.
    public func clearPublisherCacheFolderAsync(_ folderName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iapplicationData3.clearPublisherCacheFolderAsync(folderName))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases system resources that are exposed by a Windows Runtime object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Storage.IApplicationDataStatics2 members

    /// Static method that returns the ApplicationData for a User.
    /// - Parameter user: The User for which the ApplicationData is returned.
    /// - Returns: When this method completes, it returns the requested ApplicationData object.
    public static func getForUserAsync(_ user: WindowsSystem_User?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_ApplicationData?> {
        try COM.NullResult.unwrap(_iapplicationDataStatics2.getForUserAsync(user))
    }

    // MARK: Windows.Storage.IApplicationDataStatics members

    /// Provides access to the app data store associated with the app's app package.
    /// - Returns: The app data store.
    public static var current: WindowsStorage_ApplicationData {
        get throws {
            try COM.NullResult.unwrap(_iapplicationDataStatics.get_Current())
        }
    }

    // MARK: Implementation details

    private var _iapplicationData2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationData2>? = nil

    internal var _iapplicationData2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationData2> {
        get throws {
            try _iapplicationData2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IApplicationData2.iid).cast(to: CWinRT.SWRT_WindowsStorage_IApplicationData2.self)
            }
        }
    }

    private var _iapplicationData3_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationData3>? = nil

    internal var _iapplicationData3: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationData3> {
        get throws {
            try _iapplicationData3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IApplicationData3.iid).cast(to: CWinRT.SWRT_WindowsStorage_IApplicationData3.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iapplicationData2_storage?.release()
        _iapplicationData3_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _iapplicationDataStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationDataStatics2>? = nil

    internal static var _iapplicationDataStatics2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationDataStatics2> {
        get throws {
            try _iapplicationDataStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.ApplicationData", id: CWinRT.SWRT_WindowsStorage_IApplicationDataStatics2.iid)
            }
        }
    }

    private static var _iapplicationDataStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationDataStatics>? = nil

    internal static var _iapplicationDataStatics: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IApplicationDataStatics> {
        get throws {
            try _iapplicationDataStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.ApplicationData", id: CWinRT.SWRT_WindowsStorage_IApplicationDataStatics.iid)
            }
        }
    }
}