// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates files and folders inside the Downloads folder.
public enum WindowsStorage_DownloadsFolder {
    // MARK: Windows.Storage.IDownloadsFolderStatics members

    /// Creates a new file inside the Downloads folder.
    /// - Parameter desiredName: The desired name of the file to create.
    /// - Returns: When this method completes, it returns the new file as a StorageFile object.
    public static func createFileAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics.createFileAsync(desiredName))
    }

    /// Creates a new subfolder in the Downloads folder.
    /// - Parameter desiredName: The desired name of the subfolder to create.
    /// - Returns: When this method completes, it returns the new subfolder as a StorageFolder.
    public static func createFolderAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics.createFolderAsync(desiredName))
    }

    /// Creates a new file in the Downloads folder, and specifies what to do if a file with the same name already exists in the Downloads folder.
    /// - Parameter desiredName: The desired name of the file to create.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing file in the current folder.
    /// - Returns: When this method completes, it returns the new file as a StorageFile object.
    public static func createFileAsync(_ desiredName: Swift.String, _ option: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics.createFileWithCollisionOptionAsync(desiredName, option))
    }

    /// Creates a new subfolder in the Downloads folder, and specifies what to do if a subfolder with the same name already exists in the Downloads folder.
    /// - Parameter desiredName: The desired name of the subfolder to create.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing subfolder in the Downloads folder.
    /// - Returns: When this method completes, it returns the new subfolder as a StorageFolder.
    public static func createFolderAsync(_ desiredName: Swift.String, _ option: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics.createFolderWithCollisionOptionAsync(desiredName, option))
    }

    // MARK: Windows.Storage.IDownloadsFolderStatics2 members

    /// Creates a new file inside the Downloads folder of a specific User.
    /// - Parameter user: The User for which the file is created.
    /// - Parameter desiredName: The desired name of the file to create.
    /// - Returns: When this method completes, it returns the new file as a StorageFile object.
    public static func createFileForUserAsync(_ user: WindowsSystem_User?, _ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics2.createFileForUserAsync(user, desiredName))
    }

    /// Creates a new subfolder inside the Downloads folder of a specific User.
    /// - Parameter user: The User for which the folder is created.
    /// - Parameter desiredName: The desired name of the subfolder to create.
    /// - Returns: When this method completes, it returns the new subfolder as a StorageFolder.
    public static func createFolderForUserAsync(_ user: WindowsSystem_User?, _ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics2.createFolderForUserAsync(user, desiredName))
    }

    /// Creates a new file in the Downloads folder of a specific User, and specifies what to do if a file with the same name already exists in the Downloads folder.
    /// - Parameter user: The User for which the file is created.
    /// - Parameter desiredName: The desired name of the file to create.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing file in the current folder.
    /// - Returns: When this method completes, it returns the new file as a StorageFile object.
    public static func createFileForUserAsync(_ user: WindowsSystem_User?, _ desiredName: Swift.String, _ option: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics2.createFileForUserWithCollisionOptionAsync(user, desiredName, option))
    }

    /// Creates a new subfolder in the Downloads folder of a specific User, and specifies what to do if a subfolder with the same name already exists in the Downloads folder.
    /// - Parameter user: The User for which the folder is created.
    /// - Parameter desiredName: The desired name of the subfolder to create.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing subfolder in the Downloads folder.
    /// - Returns: When this method completes, it returns the new subfolder as a StorageFolder.
    public static func createFolderForUserAsync(_ user: WindowsSystem_User?, _ desiredName: Swift.String, _ option: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_idownloadsFolderStatics2.createFolderForUserWithCollisionOptionAsync(user, desiredName, option))
    }

    // MARK: Implementation details

    private static var _idownloadsFolderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics>? = nil

    internal static var _idownloadsFolderStatics: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics> {
        get throws {
            try _idownloadsFolderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.DownloadsFolder", id: CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics.iid)
            }
        }
    }

    private static var _idownloadsFolderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics2>? = nil

    internal static var _idownloadsFolderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics2> {
        get throws {
            try _idownloadsFolderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.DownloadsFolder", id: CWinRT.SWRT_WindowsStorage_IDownloadsFolderStatics2.iid)
            }
        }
    }
}