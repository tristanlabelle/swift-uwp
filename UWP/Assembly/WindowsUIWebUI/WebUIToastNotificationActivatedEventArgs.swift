// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about an event that occurs when the app is activated because a user tapped on the body of a toast notification or performed an action inside a toast notification.
public final class WindowsUIWebUI_WebUIToastNotificationActivatedEventArgs: WindowsRuntime.WinRTImport<WindowsUIWebUI_WebUIToastNotificationActivatedEventArgsProjection>, WindowsApplicationModelActivation_IToastNotificationActivatedEventArgsProtocol, WindowsApplicationModelActivation_IActivatedEventArgsProtocol, WindowsUIWebUI_IActivatedEventArgsDeferralProtocol, WindowsApplicationModelActivation_IActivatedEventArgsWithUserProtocol {
    // MARK: Windows.ApplicationModel.Activation.IToastNotificationActivatedEventArgs members

    /// Gets the arguments that the app can retrieve after it is activated through an interactive toast notification.
    /// - Returns: The arguments that the app can retrieve after it is activated through an interactive toast notification. The value of this property is defined previously in the XML that describes the data to deliver for the toast notification. The following elements and attributes of that XML define the value:
    public var argument: Swift.String {
        get throws {
            try _interop.get_Argument()
        }
    }

    /// Gets a set of values that you can use to obtain the user input from an interactive toast notification.
    /// - Returns: A set of values that you can use to obtain the user input from an interactive toast notification. This information consists of pairs of keys and values, in which the keys are the identifiers for the input elements for which the user provided input and the values represent the input from the user. For input elements that specify that the type of the input is text, the value is the string that the user specified.
    public var userInput: WindowsFoundationCollections_ValueSet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UserInput())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgs members

    /// Gets the kind of activation.
    /// - Returns: The kind of activation.
    public var kind: WindowsApplicationModelActivation_ActivationKind {
        get throws {
            try _iactivatedEventArgs.get_Kind()
        }
    }

    /// Gets the previous execution state of the app.
    /// - Returns: The previous execution state of the app.
    public var previousExecutionState: WindowsApplicationModelActivation_ApplicationExecutionState {
        get throws {
            try _iactivatedEventArgs.get_PreviousExecutionState()
        }
    }

    /// Gets the splash screen object that provides information about the transition from the splash screen to the activated app.
    /// - Returns: The splash screen object.
    public var splashScreen: WindowsApplicationModelActivation_SplashScreen {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgs.get_SplashScreen())
        }
    }

    // MARK: Windows.UI.WebUI.IActivatedEventArgsDeferral members

    /// Gets the app activation operation.
    /// - Returns: The app activation operation.
    public var activatedOperation: WindowsUIWebUI_ActivatedOperation {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsDeferral.get_ActivatedOperation())
        }
    }

    // MARK: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser members

    /// Gets the user that the app was activated for.
    /// - Returns: The user that the app was activated for.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_iactivatedEventArgsWithUser.get_User())
        }
    }

    // MARK: Implementation details

    private var _iactivatedEventArgs_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs>? = nil

    internal var _iactivatedEventArgs: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs> {
        get throws {
            try _iactivatedEventArgs_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgs.self)
            }
        }
    }

    private var _iactivatedEventArgsDeferral_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIWebUI_IActivatedEventArgsDeferral>? = nil

    internal var _iactivatedEventArgsDeferral: COM.COMInterop<CWinRT.SWRT_WindowsUIWebUI_IActivatedEventArgsDeferral> {
        get throws {
            try _iactivatedEventArgsDeferral_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIWebUI_IActivatedEventArgsDeferral.iid).cast(to: CWinRT.SWRT_WindowsUIWebUI_IActivatedEventArgsDeferral.self)
            }
        }
    }

    private var _iactivatedEventArgsWithUser_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser>? = nil

    internal var _iactivatedEventArgsWithUser: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser> {
        get throws {
            try _iactivatedEventArgsWithUser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelActivation_IActivatedEventArgsWithUser.self)
            }
        }
    }

    deinit {
        _iactivatedEventArgs_storage?.release()
        _iactivatedEventArgsDeferral_storage?.release()
        _iactivatedEventArgsWithUser_storage?.release()
    }
}