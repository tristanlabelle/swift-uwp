// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to an instance of a background task.
public final class WindowsUIWebUI_WebUIBackgroundTaskInstanceRuntimeClass: WindowsRuntime.WinRTImport<WindowsUIWebUI_WebUIBackgroundTaskInstanceRuntimeClassProjection>, WindowsUIWebUI_IWebUIBackgroundTaskInstanceProtocol, WindowsApplicationModelBackground_IBackgroundTaskInstanceProtocol {
    // MARK: Windows.UI.WebUI.IWebUIBackgroundTaskInstance members

    /// Gets or sets the success value for the background task. The success value is what is returned to the foreground instance of your app in the completed event.
    /// - Returns: An app can set this property to **false** to indicate that the background task has failed. Otherwise this property is always **true.**
    public var succeeded: Swift.Bool {
        get throws {
            try _interop.get_Succeeded()
        }
    }

    /// Gets or sets the success value for the background task. The success value is what is returned to the foreground instance of your app in the completed event.
    /// - Returns: An app can set this property to **false** to indicate that the background task has failed. Otherwise this property is always **true.**
    public func succeeded(_ succeeded: Swift.Bool) throws {
        try _interop.put_Succeeded(succeeded)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskInstance members

    /// Gets the instance ID of the background task instance.
    /// - Returns: A unique identifier for the background task instance. This identifier is generated by the system when the instance is created.
    public var instanceId: Foundation.UUID {
        get throws {
            try _ibackgroundTaskInstance.get_InstanceId()
        }
    }

    /// Gets or sets progress status for a background task instance.
    /// - Returns: A value defined by the application to indicate the task's progress.
    public var progress: Swift.UInt32 {
        get throws {
            try _ibackgroundTaskInstance.get_Progress()
        }
    }

    /// Gets or sets progress status for a background task instance.
    /// - Returns: A value defined by the application to indicate the task's progress.
    public func progress(_ value: Swift.UInt32) throws {
        try _ibackgroundTaskInstance.put_Progress(value)
    }

    /// Gets the number of times resource management policy caused the background task to be suspended.
    /// - Returns: The number of times the background task has been suspended.
    public var suspendedCount: Swift.UInt32 {
        get throws {
            try _ibackgroundTaskInstance.get_SuspendedCount()
        }
    }

    /// Gets access to the registered background task for this background task instance.
    /// - Returns: An interface that provides access to the registered background task.
    public var task: WindowsApplicationModelBackground_BackgroundTaskRegistration {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTaskInstance.get_Task())
        }
    }

    /// Gets additional information associated with a background task instance.
    /// - Returns: Represents additional information for the background task. If the background task is triggered by a mobile network operator notification, this property is an instance of a NetworkOperatorNotificationEventDetails class. If the background task is triggered by a system event or time event, this property is not used.
    public var triggerDetails: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTaskInstance.get_TriggerDetails())
        }
    }

    /// Attaches a cancellation event handler to the background task instance.
    public func canceled(adding cancelHandler: WindowsApplicationModelBackground_BackgroundTaskCanceledEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibackgroundTaskInstance.add_Canceled(cancelHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: canceled)
    }

    public func canceled(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _ibackgroundTaskInstance.remove_Canceled(cookie)
    }

    /// Informs the system that the background task might continue to perform work after the IBackgroundTask.Run method returns. This method is not applicable to JavaScript background tasks.
    /// - Returns: A background task deferral.
    public func getDeferral() throws -> WindowsApplicationModelBackground_BackgroundTaskDeferral {
        try COM.NullResult.unwrap(_ibackgroundTaskInstance.getDeferral())
    }

    // MARK: Implementation details

    private var _ibackgroundTaskInstance_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskInstance>? = nil

    internal var _ibackgroundTaskInstance: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskInstance> {
        get throws {
            try _ibackgroundTaskInstance_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskInstance.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskInstance.self)
            }
        }
    }

    deinit {
        _ibackgroundTaskInstance_storage?.release()
    }
}