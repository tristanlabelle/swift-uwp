// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides synchronous access to the properties exposed off StorageFile and lets an app perform asynchronous file operations such as copy, delete, move, and rename.
public final class WindowsStorageBulkAccess_FileInformation: WindowsRuntime.WinRTImport<WindowsStorageBulkAccess_FileInformationProjection>, WindowsStorageBulkAccess_IStorageItemInformationProtocol, WindowsStorage_IStorageFileProtocol, WindowsStorageStreams_IInputStreamReferenceProtocol, WindowsStorageStreams_IRandomAccessStreamReferenceProtocol, WindowsStorage_IStorageItemProtocol, WindowsStorage_IStorageItemPropertiesProtocol, WindowsStorage_IStorageItem2Protocol, WindowsStorage_IStorageItemPropertiesWithProviderProtocol, WindowsStorage_IStorageFilePropertiesWithAvailabilityProtocol, WindowsStorage_IStorageFile2Protocol {
    // MARK: Windows.Storage.BulkAccess.IStorageItemInformation members

    /// Gets an object that contains the basic properties information of the file.
    /// - Returns: The basic properties object.
    public var basicProperties: WindowsStorageFileProperties_BasicProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BasicProperties())
        }
    }

    /// Gets an object that provides access to the document properties of the StorageFile, such as the title, author name, and so on.
    /// - Returns: The document properties.
    public var documentProperties: WindowsStorageFileProperties_DocumentProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DocumentProperties())
        }
    }

    /// Gets the image properties of the StorageFile, such as the title, rating, date that the image was taken,
    /// - Returns: The image properties.
    public var imageProperties: WindowsStorageFileProperties_ImageProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ImageProperties())
        }
    }

    /// Gets the music properties associated with the StorageFile, such as the album name, artist name, bit rate, and so on.
    /// - Returns: The music properties.
    public var musicProperties: WindowsStorageFileProperties_MusicProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MusicProperties())
        }
    }

    /// Gets the thumbnail associated with the StorageFile.
    /// - Returns: The thumbnail.
    public var thumbnail: WindowsStorageFileProperties_StorageItemThumbnail {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Thumbnail())
        }
    }

    /// Gets an object that provides access to the video properties of the StorageFile, such as the duration, rating, date released, and so on.
    /// - Returns: The video properties.
    public var videoProperties: WindowsStorageFileProperties_VideoProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoProperties())
        }
    }

    /// Occurs when one or more of the StorageFile 's properties is updated.
    public func propertiesUpdated(adding changedHandler: WindowsFoundation_TypedEventHandler<WindowsStorageBulkAccess_IStorageItemInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PropertiesUpdated(changedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: propertiesUpdated)
    }

    public func propertiesUpdated(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PropertiesUpdated(eventCookie)
    }

    /// Fires when the StorageFile 's thumbnail is updated or a better quality thumbnail is available.
    public func thumbnailUpdated(adding changedHandler: WindowsFoundation_TypedEventHandler<WindowsStorageBulkAccess_IStorageItemInformation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ThumbnailUpdated(changedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: thumbnailUpdated)
    }

    public func thumbnailUpdated(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ThumbnailUpdated(eventCookie)
    }

    // MARK: Windows.Storage.IStorageFile members

    /// Gets a string that describes the contents of the file.
    /// - Returns: The content type string.
    public var contentType: Swift.String {
        get throws {
            try _istorageFile.get_ContentType()
        }
    }

    /// Gets the file type.
    /// - Returns: The file type.
    public var fileType: Swift.String {
        get throws {
            try _istorageFile.get_FileType()
        }
    }

    /// Opens a random-access stream with the specified options over the specified file.
    /// - Parameter accessMode: One of the enumeration values that specifies the type of access to allow.
    /// - Returns: When this method completes, it returns an IRandomAccessStream that contains the requested random-access stream.
    public func openAsync(_ accessMode: WindowsStorage_FileAccessMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_istorageFile.openAsync(accessMode))
    }

    /// Opens a random-access stream to the file that can be used for transacted-write operations.
    /// - Returns: When this method completes, it returns a StorageStreamTransaction that contains the random-access stream and methods that can be used to complete transactions.
    public func openTransactedWriteAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
        try COM.NullResult.unwrap(_istorageFile.openTransactedWriteAsync())
    }

    /// Creates a copy of the StorageFile and stores it in the specified StorageFolder.
    /// - Parameter destinationFolder: The folder in which to store the copied file.
    /// - Returns: When this method completes successfully, it returns the copy as a StorageFile object.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFile.copyOverloadDefaultNameAndOptions(destinationFolder))
    }

    /// Creates a copy of the StorageFile, gives it the specified file name, and stores it in the specified StorageFolder.
    /// - Parameter destinationFolder: The folder in which to store the copied file.
    /// - Parameter desiredNewName: The name of the new copy.
    /// - Returns: When this method completes successfully, it returns the copy as a StorageFile object.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFile.copyOverloadDefaultOptions(destinationFolder, desiredNewName))
    }

    /// Creates a copy of the StorageFile, gives it the specified file name, and stores it in the specified StorageFolder. The method also specifies what to do if a file with the same name already exists in the specified folder.
    /// - Parameter destinationFolder: The folder in which to store the copied file.
    /// - Parameter desiredNewName: The name of the new copy.
    /// - Parameter option: A value that indicates what to do if the file name already exists in the destination folder.
    /// - Returns: When this method completes successfully, it returns the copy as a StorageFile object.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFile.copyOverload(destinationFolder, desiredNewName, option))
    }

    /// Replaces the specified StorageFile with a copy of the current file.
    /// - Parameter fileToReplace: The StorageFile to be replaced.
    /// - Returns: No object or value is returned when this method completes.
    public func copyAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageFile.copyAndReplaceAsync(fileToReplace))
    }

    /// Moves the StorageFile to the specified StorageFolder.
    /// - Parameter destinationFolder: The destination folder.
    /// - Returns: No object or value is returned when this method completes.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageFile.moveOverloadDefaultNameAndOptions(destinationFolder))
    }

    /// Moves the StorageFile to the specified folder, and gives the file the specified file name.
    /// - Parameter destinationFolder: The destination folder.
    /// - Parameter desiredNewName: The new file name.
    /// - Returns: No object or value is returned when this method completes.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageFile.moveOverloadDefaultOptions(destinationFolder, desiredNewName))
    }

    /// Moves the StorageFile to the specified folder and gives it the specified file name. The method also specifies what to do if a file with the same name already exists in the specified folder.
    /// - Parameter destinationFolder: The destination folder.
    /// - Parameter desiredNewName: The new file name.
    /// - Parameter option: A value that indicates what to do if the file name already exists in the destination folder.
    /// - Returns: No object or value is returned when this method completes.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageFile.moveOverload(destinationFolder, desiredNewName, option))
    }

    /// Moves the current StorageFile from its location and uses it to replace the specified StorageFile.
    /// - Parameter fileToReplace: The StorageFile to be replaced.
    /// - Returns: An object for managing the asynchronous move and replace operation.
    public func moveAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageFile.moveAndReplaceAsync(fileToReplace))
    }

    // MARK: Windows.Storage.Streams.IInputStreamReference members

    /// Opens a read-only, sequential-access stream over the StorageFile.
    /// - Returns: When this method completes successfully, it returns a read-only, sequential-access stream (type IInputStream ).
    public func openSequentialReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?> {
        try COM.NullResult.unwrap(_iinputStreamReference.openSequentialReadAsync())
    }

    // MARK: Windows.Storage.Streams.IRandomAccessStreamReference members

    /// Opens a read-only, random-access stream over the StorageFile.
    /// - Returns: When this method completes successfully, it returns a read-only, random-access stream (type IRandomAccessStreamWithContentType ).
    public func openReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamWithContentType?> {
        try COM.NullResult.unwrap(_irandomAccessStreamReference.openReadAsync())
    }

    // MARK: Windows.Storage.IStorageItem members

    /// Gets the attributes of a file.
    /// - Returns: The file attributes.
    public var attributes: WindowsStorage_FileAttributes {
        get throws {
            try _istorageItem.get_Attributes()
        }
    }

    /// Gets the date that the file was created.
    /// - Returns: The file creation date.
    public var dateCreated: WindowsFoundation_DateTime {
        get throws {
            try _istorageItem.get_DateCreated()
        }
    }

    /// Gets the name of the StorageFile.
    /// - Returns: The name.
    public var name: Swift.String {
        get throws {
            try _istorageItem.get_Name()
        }
    }

    /// Gets the path of the StorageFile.
    /// - Returns: The path.
    public var path: Swift.String {
        get throws {
            try _istorageItem.get_Path()
        }
    }

    /// Renames the StorageFile.
    /// - Parameter desiredName: The new name.
    /// - Returns: No object or value is returned when this method completes.
    public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsyncOverloadDefaultOptions(desiredName))
    }

    /// Renames the StorageFile, and specifies what to do if a file with the same name already exists in the current folder.
    /// - Parameter desiredName: The new name.
    /// - Parameter option: A value that indicates what to do if the file name already exists in the current folder.
    /// - Returns: No object or value is returned when this method completes.
    public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsync(desiredName, option))
    }

    /// Deletes a file.
    /// - Returns: No object or value is returned when this method completes.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsyncOverloadDefaultOptions())
    }

    /// Deletes a file, optionally moving the deleted file to the recycle bin.
    /// - Parameter option: A value that specifies whether the deleted file is moved to the recycle bin.
    /// - Returns: No object or value is returned when this method completes.
    public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsync(option))
    }

    /// Retrieves the basic properties of the StorageFile.
    /// - Returns: When this method completes successfully, it returns a BasicProperties object.
    public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
        try COM.NullResult.unwrap(_istorageItem.getBasicPropertiesAsync())
    }

    /// Determines whether the loaded StorageFile is the specified type.
    /// - Parameter type: The type of item to check against.
    /// - Returns: True if the loaded StorageFile is the specified type; otherwise false.
    public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
        try _istorageItem.isOfType(type)
    }

    // MARK: Windows.Storage.IStorageItemProperties members

    /// Gets the user-friendly name of the StorageFile.
    /// - Returns: The user-friendly name of the StorageFile.
    public var displayName: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayName()
        }
    }

    /// Gets the display type of the StorageFile.
    /// - Returns: The display type.
    public var displayType: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayType()
        }
    }

    /// Gets the identifier that uniquely identifies the StorageFile relative to other items in the same folder.
    /// - Returns: The folder-relative identifier.
    public var folderRelativeId: Swift.String {
        get throws {
            try _istorageItemProperties.get_FolderRelativeId()
        }
    }

    /// Gets an object for retrieving the properties of the StorageFile.
    /// - Returns: An object for retrieving StorageFile properties.
    public var properties: WindowsStorageFileProperties_StorageItemContentProperties {
        get throws {
            try COM.NullResult.unwrap(_istorageItemProperties.get_Properties())
        }
    }

    /// Retrieves the thumbnail that is associated with the StorageFile.
    /// - Parameter mode: The thumbnail mode to retrieve.
    /// - Returns: When this method completes successfully, it returns the thumbnail image as a StorageItemThumbnail object.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode))
    }

    /// Retrieves the thumbnail that is associated with the StorageFile, scaling it to the specified size.
    /// - Parameter mode: The thumbnail mode to retrieve.
    /// - Parameter requestedSize: The requested size in pixels of thumbnail to retrieve.
    /// - Returns: When this method completes successfully, it returns the thumbnail image as a StorageItemThumbnail object.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultOptions(mode, requestedSize))
    }

    /// Retrieves the thumbnail that is associated with the StorageFile, based on the specified options.
    /// - Parameter mode: The thumbnail mode to retrieve.
    /// - Parameter requestedSize: The requested size in pixels of thumbnail to retrieve.
    /// - Parameter options: The thumbnail retrieval options.
    /// - Returns: When this method completes successfully, it returns the thumbnail image as a StorageItemThumbnail object.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsync(mode, requestedSize, options))
    }

    // MARK: Windows.Storage.IStorageItem2 members

    /// Gets the parent folder of the current file.
    /// - Returns: When this method completes, it returns the parent folder as a StorageFolder.
    public func getParentAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageItem2.getParentAsync())
    }

    /// Indicates whether the current file is the same as the specified storage item.
    /// - Parameter item: The IStorageItem object that represents a storage item to compare against.
    /// - Returns: Returns **true** if the current storage item is the same as the specified storage item; otherwise **false**.
    public func isEqual(_ item: WindowsStorage_IStorageItem?) throws -> Swift.Bool {
        try _istorageItem2.isEqual(item)
    }

    // MARK: Windows.Storage.IStorageItemPropertiesWithProvider members

    /// Gets the StorageProvider object that contains info about the service that stores the current file.
    /// - Returns: The StorageProvider object that contains info about the service that stores the current file. The file may be stored by the local file system or by a remote service like Microsoft OneDrive.
    public var provider: WindowsStorage_StorageProvider {
        get throws {
            try COM.NullResult.unwrap(_istorageItemPropertiesWithProvider.get_Provider())
        }
    }

    // MARK: Windows.Storage.IStorageFilePropertiesWithAvailability members

    /// Indicates if the current file has been downloaded or can be downloaded.
    /// - Returns: **True** if the file has been downloaded or can be downloaded. Otherwise, **false**.
    public var isAvailable: Swift.Bool {
        get throws {
            try _istorageFilePropertiesWithAvailability.get_IsAvailable()
        }
    }

    // MARK: Windows.Storage.IStorageFile2 members

    /// Opens a random-access stream with the specified options over the specified file.
    /// - Parameter accessMode: One of the enumeration values that specifies the type of access to allow.
    /// - Parameter options: A bitwise combination of the enumeration values that specify options for opening the stream.
    /// - Returns: When this method completes, it returns an IRandomAccessStream that contains the requested random-access stream.
    public func openAsync(_ accessMode: WindowsStorage_FileAccessMode, _ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_istorageFile2.openWithOptionsAsync(accessMode, options))
    }

    /// Opens a random-access stream to the file that can be used for transacted-write operations with the specified options.
    /// - Parameter options: A bitwise combination of the enumeration values that specify options for opening the stream.
    /// - Returns: When this method completes, it returns a StorageStreamTransaction that contains the random-access stream and methods that can be used to complete transactions.
    public func openTransactedWriteAsync(_ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
        try COM.NullResult.unwrap(_istorageFile2.openTransactedWriteWithOptionsAsync(options))
    }

    // MARK: Implementation details

    private var _istorageFile_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFile>? = nil

    internal var _istorageFile: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFile> {
        get throws {
            try _istorageFile_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageFile.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageFile.self)
            }
        }
    }

    private var _iinputStreamReference_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IInputStreamReference>? = nil

    internal var _iinputStreamReference: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IInputStreamReference> {
        get throws {
            try _iinputStreamReference_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IInputStreamReference.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IInputStreamReference.self)
            }
        }
    }

    private var _irandomAccessStreamReference_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamReference>? = nil

    internal var _irandomAccessStreamReference: COM.COMInterop<CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamReference> {
        get throws {
            try _irandomAccessStreamReference_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamReference.iid).cast(to: CWinRT.SWRT_WindowsStorageStreams_IRandomAccessStreamReference.self)
            }
        }
    }

    private var _istorageItem_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItem>? = nil

    internal var _istorageItem: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItem> {
        get throws {
            try _istorageItem_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageItem.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageItem.self)
            }
        }
    }

    private var _istorageItemProperties_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItemProperties>? = nil

    internal var _istorageItemProperties: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItemProperties> {
        get throws {
            try _istorageItemProperties_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageItemProperties.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageItemProperties.self)
            }
        }
    }

    private var _istorageItem2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItem2>? = nil

    internal var _istorageItem2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItem2> {
        get throws {
            try _istorageItem2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageItem2.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageItem2.self)
            }
        }
    }

    private var _istorageItemPropertiesWithProvider_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItemPropertiesWithProvider>? = nil

    internal var _istorageItemPropertiesWithProvider: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageItemPropertiesWithProvider> {
        get throws {
            try _istorageItemPropertiesWithProvider_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageItemPropertiesWithProvider.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageItemPropertiesWithProvider.self)
            }
        }
    }

    private var _istorageFilePropertiesWithAvailability_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability>? = nil

    internal var _istorageFilePropertiesWithAvailability: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability> {
        get throws {
            try _istorageFilePropertiesWithAvailability_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability.self)
            }
        }
    }

    private var _istorageFile2_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFile2>? = nil

    internal var _istorageFile2: COM.COMInterop<CWinRT.SWRT_WindowsStorage_IStorageFile2> {
        get throws {
            try _istorageFile2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorage_IStorageFile2.iid).cast(to: CWinRT.SWRT_WindowsStorage_IStorageFile2.self)
            }
        }
    }

    deinit {
        _istorageFile_storage?.release()
        _iinputStreamReference_storage?.release()
        _irandomAccessStreamReference_storage?.release()
        _istorageItem_storage?.release()
        _istorageItemProperties_storage?.release()
        _istorageItem2_storage?.release()
        _istorageItemPropertiesWithProvider_storage?.release()
        _istorageFilePropertiesWithAvailability_storage?.release()
        _istorageFile2_storage?.release()
    }
}