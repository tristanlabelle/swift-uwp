// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Sets and retrieves dynamic AppUriHandlerHost entries for a given AppUriHandler registration.
public final class WindowsSystem_AppUriHandlerRegistration: WindowsRuntime.WinRTImport<WindowsSystem_AppUriHandlerRegistrationProjection> {
    // MARK: Windows.System.IAppUriHandlerRegistration members

    /// The name of the registration.
    /// - Returns: The name of the registration.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// The user context of this registration.
    /// - Returns: The user context of this registration.
    public var user: WindowsSystem_User {
        get throws {
            try COM.NullResult.unwrap(_interop.get_User())
        }
    }

    /// Retrieves the set of hosts added by SetAppAddedHostsAsync for the given registration.
    /// - Returns: The set of hosts last added by SetAppAddedHostsAsync.
    public func getAppAddedHostsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsSystem_AppUriHandlerHost?>?> {
        try COM.NullResult.unwrap(_interop.getAppAddedHostsAsync())
    }

    public func setAppAddedHostsAsync(_ hosts: WindowsFoundationCollections_IIterable<WindowsSystem_AppUriHandlerHost?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setAppAddedHostsAsync(hosts))
    }

    // MARK: Windows.System.IAppUriHandlerRegistration2 members

    public var packageFamilyName: Swift.String {
        get throws {
            try _iappUriHandlerRegistration2.get_PackageFamilyName()
        }
    }

    public func getAllHosts() throws -> WindowsFoundationCollections_IVector<WindowsSystem_AppUriHandlerHost?> {
        try COM.NullResult.unwrap(_iappUriHandlerRegistration2.getAllHosts())
    }

    public func updateHosts(_ hosts: WindowsFoundationCollections_IIterable<WindowsSystem_AppUriHandlerHost?>?) throws {
        try _iappUriHandlerRegistration2.updateHosts(hosts)
    }

    // MARK: Implementation details

    private var _iappUriHandlerRegistration2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerRegistration2>? = nil

    internal var _iappUriHandlerRegistration2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerRegistration2> {
        get throws {
            try _iappUriHandlerRegistration2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppUriHandlerRegistration2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppUriHandlerRegistration2.self)
            }
        }
    }

    deinit {
        _iappUriHandlerRegistration2_storage?.release()
    }
}