// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// An object representation of the Host field in an AppUriHandler registration. These are used in conjunction with AppUriHandlerRegistration.
public final class WindowsSystem_AppUriHandlerHost: WindowsRuntime.WinRTImport<WindowsSystem_AppUriHandlerHostProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSystem_AppUriHandlerHostProjection.self))
    }

    // MARK: Windows.System.IAppUriHandlerHostFactory members

    public convenience init(_ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iappUriHandlerHostFactory.createInstance(name)))
    }

    // MARK: Windows.System.IAppUriHandlerHost members

    /// A website hostname.
    /// - Returns: A website hostname.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// A website hostname.
    /// - Returns: A website hostname.
    public func name(_ value: Swift.String) throws {
        try _interop.put_Name(value)
    }

    // MARK: Windows.System.IAppUriHandlerHost2 members

    public var isEnabled: Swift.Bool {
        get throws {
            try _iappUriHandlerHost2.get_IsEnabled()
        }
    }

    public func isEnabled(_ value: Swift.Bool) throws {
        try _iappUriHandlerHost2.put_IsEnabled(value)
    }

    // MARK: Implementation details

    private var _iappUriHandlerHost2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerHost2>? = nil

    internal var _iappUriHandlerHost2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerHost2> {
        get throws {
            try _iappUriHandlerHost2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppUriHandlerHost2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppUriHandlerHost2.self)
            }
        }
    }

    deinit {
        _iappUriHandlerHost2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.AppUriHandlerHost", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iappUriHandlerHostFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerHostFactory>? = nil

    internal static var _iappUriHandlerHostFactory: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppUriHandlerHostFactory> {
        get throws {
            try _iappUriHandlerHostFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.AppUriHandlerHost", id: CWinRT.SWRT_WindowsSystem_IAppUriHandlerHostFactory.iid)
            }
        }
    }
}