// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains APIs for getting a basic set of diagnostic information for all running apps.
public final class WindowsSystem_AppDiagnosticInfo: WindowsRuntime.WinRTImport<WindowsSystem_AppDiagnosticInfoProjection> {
    // MARK: Windows.System.IAppDiagnosticInfo members

    /// Provides info about the app's package family name and package-relative app name.
    public var appInfo: WindowsApplicationModel_AppInfo {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AppInfo())
        }
    }

    // MARK: Windows.System.IAppDiagnosticInfo2 members

    /// Gets diagnostic information such as memory usage over time, energy use over time, and so on, for each resource group in the app.
    /// - Returns: Diagnostic info for each resource group in the app.
    public func getResourceGroups() throws -> WindowsFoundationCollections_IVector<WindowsSystem_AppResourceGroupInfo?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfo2.getResourceGroups())
    }

    /// Creates a **ResourceGroupInfoWatcher** that monitors the execution state of an app or task, and provides notifications when its state changes.
    /// - Returns: A **ResourceGroupInfoWatcher** that can be used to monitor diagnostic info.
    public func createResourceGroupWatcher() throws -> WindowsSystem_AppResourceGroupInfoWatcher {
        try COM.NullResult.unwrap(_iappDiagnosticInfo2.createResourceGroupWatcher())
    }

    // MARK: Windows.System.IAppDiagnosticInfo3 members

    /// Launches the app associated with the diagnostic info.
    /// - Returns: On success, `AppActivationResult.AppResourceGroupInfo` will correspond to the newly-activated app instance.
    public func launchAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_AppActivationResult?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfo3.launchAsync())
    }

    // MARK: Windows.System.IAppDiagnosticInfoStatics members

    /// Gets a collection of AppDiagnosticInfo objects for all running apps that have a package family name.
    /// - Returns: A list of AppDiagnosticInfo objects for all running apps that have a package family name.
    public static func requestInfoAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsSystem_AppDiagnosticInfo?>?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics.requestInfoAsync())
    }

    // MARK: Windows.System.IAppDiagnosticInfoStatics2 members

    /// Creates an **AppDiagnosticInfoWatcher ** that monitors information about the execution state of an app, and provides notifications when its state changes.
    /// - Returns: An **AppDiagnosticInfoWatcher ** that can be used to monitor diagnostic info.
    public static func createWatcher() throws -> WindowsSystem_AppDiagnosticInfoWatcher {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics2.createWatcher())
    }

    /// Asynchronously requests access to diagnostic information.
    /// - Returns: Returns an async operation with a **DiagnosticAccessStatus ** value indicating the level of diagnostic info available to this app.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_DiagnosticAccessStatus> {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics2.requestAccessAsync())
    }

    /// Gets a collection of AppDiagnosticInfo objects for all instances of the specified app package.
    /// - Parameter packageFamilyName: The identifier of the app package for which to get the AppDiagnosticInfo.
    /// - Returns: A collection of AppDiagnosticInfo objects for all instances of the app package specified by *packageFamilyName*.
    public static func requestInfoForPackageAsync(_ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsSystem_AppDiagnosticInfo?>?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics2.requestInfoForPackageAsync(packageFamilyName))
    }

    /// Gets a collection of AppDiagnosticInfo objects for all running instances of this app.
    /// - Returns: A collection of AppDiagnosticInfo objects for all running instances of this app.
    public static func requestInfoForAppAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsSystem_AppDiagnosticInfo?>?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics2.requestInfoForAppAsync())
    }

    /// Gets a collection of AppDiagnosticInfo objects for all instances of the specified running app.
    /// - Parameter appUserModelId: The identifier of the running app for which to get the AppDiagnosticInfo.
    /// - Returns: A collection of AppDiagnosticInfo objects for all instances of the app specified by *appUserModelId*.
    public static func requestInfoForAppAsync(_ appUserModelId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVector<WindowsSystem_AppDiagnosticInfo?>?> {
        try COM.NullResult.unwrap(_iappDiagnosticInfoStatics2.requestInfoForAppUserModelId(appUserModelId))
    }

    // MARK: Implementation details

    private var _iappDiagnosticInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo2>? = nil

    internal var _iappDiagnosticInfo2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo2> {
        get throws {
            try _iappDiagnosticInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo2.self)
            }
        }
    }

    private var _iappDiagnosticInfo3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo3>? = nil

    internal var _iappDiagnosticInfo3: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo3> {
        get throws {
            try _iappDiagnosticInfo3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo3.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfo3.self)
            }
        }
    }

    deinit {
        _iappDiagnosticInfo2_storage?.release()
        _iappDiagnosticInfo3_storage?.release()
    }

    private static var _iappDiagnosticInfoStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics>? = nil

    internal static var _iappDiagnosticInfoStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics> {
        get throws {
            try _iappDiagnosticInfoStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.AppDiagnosticInfo", id: CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics.iid)
            }
        }
    }

    private static var _iappDiagnosticInfoStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics2>? = nil

    internal static var _iappDiagnosticInfoStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics2> {
        get throws {
            try _iappDiagnosticInfoStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.AppDiagnosticInfo", id: CWinRT.SWRT_WindowsSystem_IAppDiagnosticInfoStatics2.iid)
            }
        }
    }
}