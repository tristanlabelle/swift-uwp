// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents app memory usage at a single point in time.
public final class WindowsSystem_AppMemoryReport: WindowsRuntime.WinRTImport<WindowsSystem_AppMemoryReportProjection> {
    // MARK: Windows.System.IAppMemoryReport members

    /// Gets the app's peak usage of private commit.
    /// - Returns: The app's peak usage of private commit.
    public var peakPrivateCommitUsage: Swift.UInt64 {
        get throws {
            try _interop.get_PeakPrivateCommitUsage()
        }
    }

    /// Gets the app's usage of private commit.
    /// - Returns: The app's usage of private commit.
    public var privateCommitUsage: Swift.UInt64 {
        get throws {
            try _interop.get_PrivateCommitUsage()
        }
    }

    /// Gets the app's total cap for private plus shared commit.
    /// - Returns: The app's total usage of private plus shared commit.
    public var totalCommitLimit: Swift.UInt64 {
        get throws {
            try _interop.get_TotalCommitLimit()
        }
    }

    /// Gets the app's total usage of private plus shared commit.
    /// - Returns: The app's total cap for private plus shared commit.
    public var totalCommitUsage: Swift.UInt64 {
        get throws {
            try _interop.get_TotalCommitUsage()
        }
    }

    // MARK: Windows.System.IAppMemoryReport2 members

    /// Gets the expected commit limit for the current app.
    /// - Returns: The expected commit limit in bytes.
    public var expectedTotalCommitLimit: Swift.UInt64 {
        get throws {
            try _iappMemoryReport2.get_ExpectedTotalCommitLimit()
        }
    }

    // MARK: Implementation details

    private var _iappMemoryReport2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppMemoryReport2>? = nil

    internal var _iappMemoryReport2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppMemoryReport2> {
        get throws {
            try _iappMemoryReport2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppMemoryReport2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppMemoryReport2.self)
            }
        }
    }

    deinit {
        _iappMemoryReport2_storage?.release()
    }
}