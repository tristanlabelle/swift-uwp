// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages a prioritized queue on which tasks execute in a serial fashion on a thread.
public final class WindowsSystem_DispatcherQueue: WindowsRuntime.WinRTImport<WindowsSystem_DispatcherQueueProjection> {
    // MARK: Windows.System.IDispatcherQueue members

    /// Fires after the **DispatcherQueue** event loop stops which is the last step in the **DispatcherQueue** shutdown process.
    public func shutdownCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shutdownCompleted)
    }

    public func shutdownCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownCompleted(token)
    }

    /// Fires before the dispatcher queue initiates an exit from its event loop.
    public func shutdownStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsSystem_DispatcherQueueShutdownStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: shutdownStarting)
    }

    public func shutdownStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownStarting(token)
    }

    /// Creates a **DispatcherQueueTimer** on the **DispatcherQueue** to execute a task periodically after a time interval has elapsed.
    /// - Returns: An **DispatcherQueueTimer** that can queue tasks on a timed basis to the current **DispatcherQueue**.
    public func createTimer() throws -> WindowsSystem_DispatcherQueueTimer {
        try COM.NullResult.unwrap(_interop.createTimer())
    }

    /// Adds a task to the **DispatcherQueue** which will be executed on the thread  associated with the **DispatcherQueue**.
    /// - Parameter callback: The task to execute.
    /// - Returns: **True** indicates that the task was added to the queue; **false**, otherwise.
    public func tryEnqueue(_ callback: WindowsSystem_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueue(callback)
    }

    /// Adds a task to the **DispatcherQueue** which will be executed on the thread associated with the **DispatcherQueue**.
    /// - Parameter priority: The priority of the task such as Low, Normal, or High.
    /// - Parameter callback: A delegate to the task to execute.
    /// - Returns: **True** indicates that the task was added to the queue; **false**, otherwise.
    public func tryEnqueue(_ priority: WindowsSystem_DispatcherQueuePriority, _ callback: WindowsSystem_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueueWithPriority(priority, callback)
    }

    // MARK: Windows.System.IDispatcherQueue2 members

    /// Gets a value indicating whether the DispatcherQueue has access to the current thread.
    public var hasThreadAccess: Swift.Bool {
        get throws {
            try _idispatcherQueue2.get_HasThreadAccess()
        }
    }

    // MARK: Windows.System.IDispatcherQueueStatics members

    /// Gets the **DispatcherQueue** associated with the current thread.
    /// - Returns: A **DispatcherQueue** instance that will execute tasks serially on the current thread.
    public static func getForCurrentThread() throws -> WindowsSystem_DispatcherQueue {
        try COM.NullResult.unwrap(_idispatcherQueueStatics.getForCurrentThread())
    }

    // MARK: Implementation details

    private var _idispatcherQueue2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IDispatcherQueue2>? = nil

    internal var _idispatcherQueue2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IDispatcherQueue2> {
        get throws {
            try _idispatcherQueue2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IDispatcherQueue2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IDispatcherQueue2.self)
            }
        }
    }

    deinit {
        _idispatcherQueue2_storage?.release()
    }

    private static var _idispatcherQueueStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IDispatcherQueueStatics>? = nil

    internal static var _idispatcherQueueStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IDispatcherQueueStatics> {
        get throws {
            try _idispatcherQueueStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.DispatcherQueue", id: CWinRT.SWRT_WindowsSystem_IDispatcherQueueStatics.iid)
            }
        }
    }
}