// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the options used to launch the default app for a file or URI.
public final class WindowsSystem_LauncherOptions: WindowsRuntime.WinRTImport<WindowsSystem_LauncherOptionsProjection>, WindowsSystem_ILauncherViewOptionsProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSystem_LauncherOptionsProjection.self))
    }

    // MARK: Windows.System.ILauncherOptions members

    /// Gets or sets the content type that is associated with a URI that represents a file on the network.
    /// - Returns: The content type of the URI.
    public var contentType: Swift.String {
        get throws {
            try _interop.get_ContentType()
        }
    }

    /// Gets or sets the content type that is associated with a URI that represents a file on the network.
    /// - Returns: The content type of the URI.
    public func contentType(_ value: Swift.String) throws {
        try _interop.put_ContentType(value)
    }

    /// Gets or sets a value that indicates whether to display the **Open With** dialog whenever the association launching API is called.
    /// - Returns: True if the **Open With** dialog should always be displayed; otherwise false.
    public var displayApplicationPicker: Swift.Bool {
        get throws {
            try _interop.get_DisplayApplicationPicker()
        }
    }

    /// Gets or sets a value that indicates whether to display the **Open With** dialog whenever the association launching API is called.
    /// - Returns: True if the **Open With** dialog should always be displayed; otherwise false.
    public func displayApplicationPicker(_ value: Swift.Bool) throws {
        try _interop.put_DisplayApplicationPicker(value)
    }

    /// Gets or sets a value that represents a URI that the user should be taken to in the browser if no app exists to handle the file type or URI.
    /// - Returns: URI that the user should be taken to in the browser.
    public var fallbackUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FallbackUri())
        }
    }

    /// Gets or sets a value that represents a URI that the user should be taken to in the browser if no app exists to handle the file type or URI.
    /// - Returns: URI that the user should be taken to in the browser.
    public func fallbackUri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_FallbackUri(value)
    }

    /// Gets or sets a value that represents the display name of the app in the store that the user should install if no app exists to handle the file type or URI.
    /// - Returns: The display name of the app.
    public var preferredApplicationDisplayName: Swift.String {
        get throws {
            try _interop.get_PreferredApplicationDisplayName()
        }
    }

    /// Gets or sets a value that represents the display name of the app in the store that the user should install if no app exists to handle the file type or URI.
    /// - Returns: The display name of the app.
    public func preferredApplicationDisplayName(_ value: Swift.String) throws {
        try _interop.put_PreferredApplicationDisplayName(value)
    }

    /// Gets or sets a value that represents the package family name of the app in the Store that the user should install if no app exists to handle the file type or URI.
    /// - Returns: The package family name of the app.
    public var preferredApplicationPackageFamilyName: Swift.String {
        get throws {
            try _interop.get_PreferredApplicationPackageFamilyName()
        }
    }

    /// Gets or sets a value that represents the package family name of the app in the Store that the user should install if no app exists to handle the file type or URI.
    /// - Returns: The package family name of the app.
    public func preferredApplicationPackageFamilyName(_ value: Swift.String) throws {
        try _interop.put_PreferredApplicationPackageFamilyName(value)
    }

    /// Gets or sets a value that indicates whether the system should display a warning that the file or URI is potentially unsafe when starting the app associated with a file or URI.
    /// - Returns: True if the warning should be displayed; otherwise false.
    public var treatAsUntrusted: Swift.Bool {
        get throws {
            try _interop.get_TreatAsUntrusted()
        }
    }

    /// Gets or sets a value that indicates whether the system should display a warning that the file or URI is potentially unsafe when starting the app associated with a file or URI.
    /// - Returns: True if the warning should be displayed; otherwise false.
    public func treatAsUntrusted(_ value: Swift.Bool) throws {
        try _interop.put_TreatAsUntrusted(value)
    }

    /// Gets the user interface (UI) options when starting a default app.
    /// - Returns: The UI options.
    public var ui: WindowsSystem_LauncherUIOptions {
        get throws {
            try COM.NullResult.unwrap(_interop.get_UI())
        }
    }

    // MARK: Windows.System.ILauncherOptions2 members

    /// Enables an app to access files that are related to the file used to activate the app.
    /// - Returns: A query containing the list of related files.
    public var neighboringFilesQuery: WindowsStorageSearch_StorageFileQueryResult {
        get throws {
            try COM.NullResult.unwrap(_ilauncherOptions2.get_NeighboringFilesQuery())
        }
    }

    /// Enables an app to access files that are related to the file used to activate the app.
    /// - Returns: A query containing the list of related files.
    public func neighboringFilesQuery(_ value: WindowsStorageSearch_StorageFileQueryResult?) throws {
        try _ilauncherOptions2.put_NeighboringFilesQuery(value)
    }

    /// The package family name of the target package that should be used to launch a file or URI. This property is optional.
    /// - Returns: The package family name of the target package that should be used to launch a file or URI. This property is optional.
    public var targetApplicationPackageFamilyName: Swift.String {
        get throws {
            try _ilauncherOptions2.get_TargetApplicationPackageFamilyName()
        }
    }

    /// The package family name of the target package that should be used to launch a file or URI. This property is optional.
    /// - Returns: The package family name of the target package that should be used to launch a file or URI. This property is optional.
    public func targetApplicationPackageFamilyName(_ value: Swift.String) throws {
        try _ilauncherOptions2.put_TargetApplicationPackageFamilyName(value)
    }

    // MARK: Windows.System.ILauncherOptions3 members

    /// Indicates whether to ignore handlers that can handle http(s) schemes (such as browsers). Instead, launch will fall back to the default browser.
    /// - Returns: **True** indicates that apps that can handle http(s) schemes will be ignored and instead the URI will be opened in the default browser; **false** otherwise.
    public var ignoreAppUriHandlers: Swift.Bool {
        get throws {
            try _ilauncherOptions3.get_IgnoreAppUriHandlers()
        }
    }

    /// Indicates whether to ignore handlers that can handle http(s) schemes (such as browsers). Instead, launch will fall back to the default browser.
    /// - Returns: **True** indicates that apps that can handle http(s) schemes will be ignored and instead the URI will be opened in the default browser; **false** otherwise.
    public func ignoreAppUriHandlers(_ value: Swift.Bool) throws {
        try _ilauncherOptions3.put_IgnoreAppUriHandlers(value)
    }

    // MARK: Windows.System.ILauncherOptions4 members

    /// Gets or sets whether to limit the picker for the launcher to the current app and its associated URI handlers.
    /// - Returns: True if the launcher should limit the picker to the current app and its associated URI handlers; otherwise, false.
    public var limitPickerToCurrentAppAndAppUriHandlers: Swift.Bool {
        get throws {
            try _ilauncherOptions4.get_LimitPickerToCurrentAppAndAppUriHandlers()
        }
    }

    /// Gets or sets whether to limit the picker for the launcher to the current app and its associated URI handlers.
    /// - Returns: True if the launcher should limit the picker to the current app and its associated URI handlers; otherwise, false.
    public func limitPickerToCurrentAppAndAppUriHandlers(_ value: Swift.Bool) throws {
        try _ilauncherOptions4.put_LimitPickerToCurrentAppAndAppUriHandlers(value)
    }

    // MARK: Windows.System.ILauncherViewOptions members

    /// Launch a target app and have the currently running source app remain on the screen by sharing the space equally with the target app or by taking up more or less space than the target app.
    /// - Returns: A ViewSizePreference -typed value that specifies the app’s desired view size.
    public var desiredRemainingView: WindowsUIViewManagement_ViewSizePreference {
        get throws {
            try _ilauncherViewOptions.get_DesiredRemainingView()
        }
    }

    /// Launch a target app and have the currently running source app remain on the screen by sharing the space equally with the target app or by taking up more or less space than the target app.
    /// - Returns: A ViewSizePreference -typed value that specifies the app’s desired view size.
    public func desiredRemainingView(_ value: WindowsUIViewManagement_ViewSizePreference) throws {
        try _ilauncherViewOptions.put_DesiredRemainingView(value)
    }

    // MARK: Implementation details

    private var _ilauncherOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions2>? = nil

    internal var _ilauncherOptions2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions2> {
        get throws {
            try _ilauncherOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_ILauncherOptions2.iid).cast(to: CWinRT.SWRT_WindowsSystem_ILauncherOptions2.self)
            }
        }
    }

    private var _ilauncherOptions3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions3>? = nil

    internal var _ilauncherOptions3: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions3> {
        get throws {
            try _ilauncherOptions3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_ILauncherOptions3.iid).cast(to: CWinRT.SWRT_WindowsSystem_ILauncherOptions3.self)
            }
        }
    }

    private var _ilauncherOptions4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions4>? = nil

    internal var _ilauncherOptions4: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherOptions4> {
        get throws {
            try _ilauncherOptions4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_ILauncherOptions4.iid).cast(to: CWinRT.SWRT_WindowsSystem_ILauncherOptions4.self)
            }
        }
    }

    private var _ilauncherViewOptions_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherViewOptions>? = nil

    internal var _ilauncherViewOptions: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherViewOptions> {
        get throws {
            try _ilauncherViewOptions_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_ILauncherViewOptions.iid).cast(to: CWinRT.SWRT_WindowsSystem_ILauncherViewOptions.self)
            }
        }
    }

    deinit {
        _ilauncherOptions2_storage?.release()
        _ilauncherOptions3_storage?.release()
        _ilauncherOptions4_storage?.release()
        _ilauncherViewOptions_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.LauncherOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}