// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to information on an app's memory usage.
public enum WindowsSystem_MemoryManager {
    // MARK: Windows.System.IMemoryManagerStatics2 members

    /// Gets an AppMemoryReport for the app, which provides information about its memory usage.
    /// - Returns: Information about the process' memory usage.
    public static func getAppMemoryReport() throws -> WindowsSystem_AppMemoryReport {
        try COM.NullResult.unwrap(_imemoryManagerStatics2.getAppMemoryReport())
    }

    /// Gets a ProcessMemoryReport for a process, which provides information about its memory usage.
    /// - Returns: Information about the process' memory usage.
    public static func getProcessMemoryReport() throws -> WindowsSystem_ProcessMemoryReport {
        try COM.NullResult.unwrap(_imemoryManagerStatics2.getProcessMemoryReport())
    }

    // MARK: Windows.System.IMemoryManagerStatics4 members

    /// Gets the amount of memory that your app may expect to have available.
    /// - Returns: The expected memory cap in bytes.
    public static var expectedAppMemoryUsageLimit: Swift.UInt64 {
        get throws {
            try _imemoryManagerStatics4.get_ExpectedAppMemoryUsageLimit()
        }
    }

    // MARK: Windows.System.IMemoryManagerStatics3 members

    /// Tries to set a specific memory cap for the current app or task. In cases where memory caps are shared between foreground and background components, any difference between the default cap and the new request will be assigned to the other component.
    /// - Parameter value: The new memory limit to set.
    /// - Returns: **True** if the operation succeeded; otherwise, **false**.
    public static func trySetAppMemoryUsageLimit(_ value: Swift.UInt64) throws -> Swift.Bool {
        try _imemoryManagerStatics3.trySetAppMemoryUsageLimit(value)
    }

    // MARK: Windows.System.IMemoryManagerStatics members

    /// Gets the app's current memory usage.
    /// - Returns: The app's current memory usage in bytes.
    public static var appMemoryUsage: Swift.UInt64 {
        get throws {
            try _imemoryManagerStatics.get_AppMemoryUsage()
        }
    }

    /// Gets the app's memory usage level.
    /// - Returns: The app's memory usage level.
    public static var appMemoryUsageLevel: WindowsSystem_AppMemoryUsageLevel {
        get throws {
            try _imemoryManagerStatics.get_AppMemoryUsageLevel()
        }
    }

    /// Gets the app's memory usage limit.
    /// - Returns: The app's memory usage limit in bytes.
    public static var appMemoryUsageLimit: Swift.UInt64 {
        get throws {
            try _imemoryManagerStatics.get_AppMemoryUsageLimit()
        }
    }

    /// Raised when the app's memory consumption has decreased to a lower value in the AppMemoryUsageLevel enumeration.
    public static func appMemoryUsageDecreased(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imemoryManagerStatics.add_AppMemoryUsageDecreased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: appMemoryUsageDecreased)
    }

    public static func appMemoryUsageDecreased(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imemoryManagerStatics.remove_AppMemoryUsageDecreased(token)
    }

    /// Raised when the app's memory consumption has increased to a higher value in the AppMemoryUsageLevel enumeration.
    public static func appMemoryUsageIncreased(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imemoryManagerStatics.add_AppMemoryUsageIncreased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: appMemoryUsageIncreased)
    }

    public static func appMemoryUsageIncreased(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imemoryManagerStatics.remove_AppMemoryUsageIncreased(token)
    }

    /// Raised just before the limit of how much total memory the app can use is changed.
    public static func appMemoryUsageLimitChanging(adding handler: WindowsFoundation_EventHandler<WindowsSystem_AppMemoryUsageLimitChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imemoryManagerStatics.add_AppMemoryUsageLimitChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: appMemoryUsageLimitChanging)
    }

    public static func appMemoryUsageLimitChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imemoryManagerStatics.remove_AppMemoryUsageLimitChanging(token)
    }

    // MARK: Implementation details

    private static var _imemoryManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics2>? = nil

    internal static var _imemoryManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics2> {
        get throws {
            try _imemoryManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.MemoryManager", id: CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics2.iid)
            }
        }
    }

    private static var _imemoryManagerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics4>? = nil

    internal static var _imemoryManagerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics4> {
        get throws {
            try _imemoryManagerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.MemoryManager", id: CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics4.iid)
            }
        }
    }

    private static var _imemoryManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics3>? = nil

    internal static var _imemoryManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics3> {
        get throws {
            try _imemoryManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.MemoryManager", id: CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics3.iid)
            }
        }
    }

    private static var _imemoryManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics>? = nil

    internal static var _imemoryManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics> {
        get throws {
            try _imemoryManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.MemoryManager", id: CWinRT.SWRT_WindowsSystem_IMemoryManagerStatics.iid)
            }
        }
    }
}