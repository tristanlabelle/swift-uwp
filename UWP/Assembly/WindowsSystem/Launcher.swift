// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Starts the default app associated with the specified file or URI.
public enum WindowsSystem_Launcher {
    // MARK: Windows.System.ILauncherStatics members

    /// Starts the default app associated with the specified file.
    /// - Parameter file: The file.
    /// - Returns: The launch operation.
    public static func launchFileAsync(_ file: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics.launchFileAsync(file))
    }

    /// Starts the default app associated with the specified file, using the specified options.
    /// - Parameter file: The file.
    /// - Parameter options: The launch options for the app.
    /// - Returns: The launch operation.
    public static func launchFileAsync(_ file: WindowsStorage_IStorageFile?, _ options: WindowsSystem_LauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics.launchFileWithOptionsAsync(file, options))
    }

    /// Starts the default app associated with the URI scheme name for the specified URI.
    /// - Parameter uri: The URI.
    /// - Returns: Returns **true** if the default app for the URI scheme was launched; **false** otherwise.
    public static func launchUriAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics.launchUriAsync(uri))
    }

    /// Starts the default app associated with the URI scheme name or the one specified by the ContentType for the specified URI, using the specified options.
    /// - Parameter uri: The URI.
    /// - Parameter options: The launch options for the app.
    /// - Returns: Returns **true** if the default app for the URI scheme was launched; **false** otherwise.
    public static func launchUriAsync(_ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics.launchUriWithOptionsAsync(uri, options))
    }

    // MARK: Windows.System.ILauncherStatics3 members

    /// Launches File Explorer and displays the contents of the specified folder.
    /// - Parameter folder: The folder to display in File Explorer.
    /// - Returns: The result of the operation.
    public static func launchFolderAsync(_ folder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics3.launchFolderAsync(folder))
    }

    /// Launches File Explorer with the specified options and displays the contents of the specified folder.
    /// - Parameter folder: The folder to display in File Explorer.
    /// - Parameter options: Options that specify the amount of screen space that File Explorer fills, and the list of items to select in the specified folder.
    /// - Returns: The result of the operation.
    public static func launchFolderAsync(_ folder: WindowsStorage_IStorageFolder?, _ options: WindowsSystem_FolderLauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics3.launchFolderWithOptionsAsync(folder, options))
    }

    // MARK: Windows.System.ILauncherStatics4 members

    /// Asynchronously query whether there is an app that can handle the specified URI.
    /// - Parameter uri: The URI of the website.
    /// - Returns: A value that indicates whether an application is available to handle the URI.
    public static func queryAppUriSupportAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics4.queryAppUriSupportAsync(uri))
    }

    /// Asynchronously query whether the specified app can handle the specified URI.
    /// - Parameter uri: The URI of the website.
    /// - Parameter packageFamilyName: Specifies a specific package that will be used to launch this URI.
    /// - Returns: A value that indicates whether the application is available to launch the URI.
    public static func queryAppUriSupportAsync(_ uri: WindowsFoundation_Uri?, _ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics4.queryAppUriSupportWithPackageFamilyNameAsync(uri, packageFamilyName))
    }

    /// Enumerate the Uniform Resource Identifiers (URI) handlers on the device.
    /// - Parameter uri: The Uri that you want to find handlers for.
    /// - Returns: A list of AppInfo objects representing each application that handles the specified http(s) URI.
    public static func findAppUriHandlersAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModel_AppInfo?>?> {
        try COM.NullResult.unwrap(_ilauncherStatics4.findAppUriHandlersAsync(uri))
    }

    /// Starts the default multi-user app associated with the URI scheme name for the specified URI and provides a specific User as context.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter uri: The URI scheme.
    /// - Returns: The status of the launch attempt.
    public static func launchUriForUserAsync(_ user: WindowsSystem_User?, _ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics4.launchUriForUserAsync(user, uri))
    }

    /// Starts the default multi-user app associated with the URI scheme name for the specified URI using the specified options, and provides a specific User as context.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter uri: The URI scheme.
    /// - Parameter options: The launch options for the app.
    /// - Returns: The status of the launch attempt.
    public static func launchUriForUserAsync(_ user: WindowsSystem_User?, _ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics4.launchUriWithOptionsForUserAsync(user, uri, options))
    }

    /// Starts the default multi-user app associated with the URI scheme name for the specified URI, using the specified options and input data, and provides a specific User as context.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter uri: The URI scheme.
    /// - Parameter options: The launch options for the app.
    /// - Parameter inputData: The input data for the app.
    /// - Returns: The status of the launch attempt.
    public static func launchUriForUserAsync(_ user: WindowsSystem_User?, _ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?, _ inputData: WindowsFoundationCollections_ValueSet?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics4.launchUriWithDataForUserAsync(user, uri, options, inputData))
    }

    /// Asynchronously starts the default app associated with the URI scheme name for the specified URI using the specified options, and provides a specific User as context.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter uri: The Uri.
    /// - Parameter options: The launch options.
    /// - Returns: When this method completes, it returns the results of the launch.
    public static func launchUriForResultsForUserAsync(_ user: WindowsSystem_User?, _ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriResult?> {
        try COM.NullResult.unwrap(_ilauncherStatics4.launchUriForResultsForUserAsync(user, uri, options))
    }

    /// Asynchronously starts the default app associated with the URI scheme name for the specified URI using the specified options and input data, and provides a specific User as context.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter uri: The Uri.
    /// - Parameter options: The launch options.
    /// - Parameter inputData: The data to send to the launched app.
    /// - Returns: When this method completes, it returns the results of the launch.
    public static func launchUriForResultsForUserAsync(_ user: WindowsSystem_User?, _ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?, _ inputData: WindowsFoundationCollections_ValueSet?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriResult?> {
        try COM.NullResult.unwrap(_ilauncherStatics4.launchUriForResultsWithDataForUserAsync(user, uri, options, inputData))
    }

    // MARK: Windows.System.ILauncherStatics5 members

    /// Launches File Explorer and displays the contents of the specified folder.
    /// - Parameter path: A filepath to the folder to open.
    /// - Returns: The result of the operation.
    public static func launchFolderPathAsync(_ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics5.launchFolderPathAsync(path))
    }

    /// Launches File Explorer with the specified options and displays the contents of the specified folder.
    /// - Parameter path: A filepath to the folder to open.
    /// - Parameter options: Options that specify the amount of screen space that File Explorer fills, and the list of items to select in the specified folder.
    /// - Returns: The result of the operation.
    public static func launchFolderPathAsync(_ path: Swift.String, _ options: WindowsSystem_FolderLauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics5.launchFolderPathWithOptionsAsync(path, options))
    }

    /// Launches File Explorer and displays the contents of the specified folder.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter path: A filepath to the folder to open.
    /// - Returns: The result of the operation.
    public static func launchFolderPathForUserAsync(_ user: WindowsSystem_User?, _ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics5.launchFolderPathForUserAsync(user, path))
    }

    /// Launches File Explorer with the specified options and displays the contents of the specified folder.
    /// - Parameter user: The user context to pass to the launched app.
    /// - Parameter path: A filepath to the folder to open.
    /// - Parameter options: Options that specify the amount of screen space that File Explorer fills, and the list of items to select in the specified folder.
    /// - Returns: The result of the operation.
    public static func launchFolderPathForUserAsync(_ user: WindowsSystem_User?, _ path: Swift.String, _ options: WindowsSystem_FolderLauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics5.launchFolderPathWithOptionsForUserAsync(user, path, options))
    }

    // MARK: Windows.System.ILauncherStatics2 members

    /// Asynchronously starts the default app associated with the URI scheme name for the specified URI, using the specified options.
    /// - Parameter uri: The Uri to launch.
    /// - Parameter options: The launch options.
    /// - Returns: When this method completes, it returns the results of the launch.
    public static func launchUriForResultsAsync(_ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriResult?> {
        try COM.NullResult.unwrap(_ilauncherStatics2.launchUriForResultsAsync(uri, options))
    }

    /// Asynchronously starts the default app associated with the URI scheme name for the specified URI, using the specified options and input data.
    /// - Parameter uri: The Uri to launch.
    /// - Parameter options: The launch options.
    /// - Parameter inputData: The data to send to the launched app.
    /// - Returns: When this method completes, it returns the results of the launch.
    public static func launchUriForResultsAsync(_ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?, _ inputData: WindowsFoundationCollections_ValueSet?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchUriResult?> {
        try COM.NullResult.unwrap(_ilauncherStatics2.launchUriForResultsWithDataAsync(uri, options, inputData))
    }

    /// Starts the default app associated with the URI scheme name for the specified URI, using the specified options and input data.
    /// - Parameter uri: The URI.
    /// - Parameter options: The launch options for the app.
    /// - Parameter inputData: The input data for the app.
    /// - Returns: Returns **true** if the default app for the URI scheme was launched; **false** otherwise.
    public static func launchUriAsync(_ uri: WindowsFoundation_Uri?, _ options: WindowsSystem_LauncherOptions?, _ inputData: WindowsFoundationCollections_ValueSet?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilauncherStatics2.launchUriWithDataAsync(uri, options, inputData))
    }

    /// Asynchronously query whether an app can be activated for the specified URI and launch type.
    /// - Parameter uri: The URI for which to query support.
    /// - Parameter launchQuerySupportType: The type of launch for which to query support.
    /// - Returns: A value that indicates whether an application is available to launch the URI.
    public static func queryUriSupportAsync(_ uri: WindowsFoundation_Uri?, _ launchQuerySupportType: WindowsSystem_LaunchQuerySupportType) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics2.queryUriSupportAsync(uri, launchQuerySupportType))
    }

    /// Asynchronously query whether an app can be activated for the specified URI, launch type, and package name.
    /// - Parameter uri: The URI for which to query support.
    /// - Parameter launchQuerySupportType: The type of launch for which to query support.
    /// - Parameter packageFamilyName: Specifies a specific package that will be used to launch this URI.
    /// - Returns: A value that indicates whether the application is available to launch the URI.
    public static func queryUriSupportAsync(_ uri: WindowsFoundation_Uri?, _ launchQuerySupportType: WindowsSystem_LaunchQuerySupportType, _ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics2.queryUriSupportWithPackageFamilyNameAsync(uri, launchQuerySupportType, packageFamilyName))
    }

    /// Asynchronously query whether an app can be activated for the specified file.
    /// - Parameter file: The file for which to query support.
    /// - Returns: A value that indicates whether an application can be activated for the file.
    public static func queryFileSupportAsync(_ file: WindowsStorage_StorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics2.queryFileSupportAsync(file))
    }

    /// Asynchronously query whether an app with the specified package name can be activated for the specified file.
    /// - Parameter file: The file for which to query support.
    /// - Parameter packageFamilyName: The package for which to query support.
    /// - Returns: A value that indicates whether an application can be activated for the file.
    public static func queryFileSupportAsync(_ file: WindowsStorage_StorageFile?, _ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_LaunchQuerySupportStatus> {
        try COM.NullResult.unwrap(_ilauncherStatics2.queryFileSupportWithPackageFamilyNameAsync(file, packageFamilyName))
    }

    /// Enumerate the scheme handlers on the device.
    /// - Parameter scheme: The scheme name that you find to find handlers for. For example, "ms-lens".
    /// - Returns: A list of AppInfo s for each application that handles the specified scheme.
    public static func findUriSchemeHandlersAsync(_ scheme: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModel_AppInfo?>?> {
        try COM.NullResult.unwrap(_ilauncherStatics2.findUriSchemeHandlersAsync(scheme))
    }

    /// Enumerate the scheme handlers on the device.
    /// - Parameter scheme: The scheme name that you find to find handlers for. For example, "ms-lens".
    /// - Parameter launchQuerySupportType: Filter the list of handlers by whether they can be launched for results or not.
    /// - Returns: A list of AppInfo s for each application that handles the specified scheme.
    public static func findUriSchemeHandlersAsync(_ scheme: Swift.String, _ launchQuerySupportType: WindowsSystem_LaunchQuerySupportType) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModel_AppInfo?>?> {
        try COM.NullResult.unwrap(_ilauncherStatics2.findUriSchemeHandlersWithLaunchUriTypeAsync(scheme, launchQuerySupportType))
    }

    /// Enumerate the file handlers on the device.
    /// - Parameter extension: The file extension that you want to find handlers for. For example, ".bat". Include the leading period '.'.
    /// - Returns: A list of AppInfo s for each application that handles the specified file extension.
    public static func findFileHandlersAsync(_ `extension`: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModel_AppInfo?>?> {
        try COM.NullResult.unwrap(_ilauncherStatics2.findFileHandlersAsync(extension))
    }

    // MARK: Implementation details

    private static var _ilauncherStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics>? = nil

    internal static var _ilauncherStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics> {
        get throws {
            try _ilauncherStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Launcher", id: CWinRT.SWRT_WindowsSystem_ILauncherStatics.iid)
            }
        }
    }

    private static var _ilauncherStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics3>? = nil

    internal static var _ilauncherStatics3: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics3> {
        get throws {
            try _ilauncherStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Launcher", id: CWinRT.SWRT_WindowsSystem_ILauncherStatics3.iid)
            }
        }
    }

    private static var _ilauncherStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics4>? = nil

    internal static var _ilauncherStatics4: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics4> {
        get throws {
            try _ilauncherStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Launcher", id: CWinRT.SWRT_WindowsSystem_ILauncherStatics4.iid)
            }
        }
    }

    private static var _ilauncherStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics5>? = nil

    internal static var _ilauncherStatics5: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics5> {
        get throws {
            try _ilauncherStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Launcher", id: CWinRT.SWRT_WindowsSystem_ILauncherStatics5.iid)
            }
        }
    }

    private static var _ilauncherStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics2>? = nil

    internal static var _ilauncherStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_ILauncherStatics2> {
        get throws {
            try _ilauncherStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Launcher", id: CWinRT.SWRT_WindowsSystem_ILauncherStatics2.iid)
            }
        }
    }
}