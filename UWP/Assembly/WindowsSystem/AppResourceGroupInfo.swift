// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides diagnostic information such as memory usage and energy use.
public final class WindowsSystem_AppResourceGroupInfo: WindowsRuntime.WinRTImport<WindowsSystem_AppResourceGroupInfoProjection> {
    // MARK: Windows.System.IAppResourceGroupInfo members

    /// Gets the instance identifier.
    /// - Returns: The instance ID.
    public var instanceId: Foundation.UUID {
        get throws {
            try _interop.get_InstanceId()
        }
    }

    /// Indicates whether the group is part of a shared resource group. Being part of a shared resource group indicates that there are multiple apps in the package and that they share a common component.
    /// - Returns: **True** means the group is part of a shared resource group; **false**, otherwise.
    public var isShared: Swift.Bool {
        get throws {
            try _interop.get_IsShared()
        }
    }

    /// Provides information about background tasks such as their entry points, names, task ids, and trigger names.
    /// - Returns: Information about each background task.
    public func getBackgroundTaskReports() throws -> WindowsFoundationCollections_IVector<WindowsSystem_AppResourceGroupBackgroundTaskReport?> {
        try COM.NullResult.unwrap(_interop.getBackgroundTaskReports())
    }

    /// Provides information about memory usage such as the commit limit, commit usage, and so on.
    /// - Returns: Information about memory usage.
    public func getMemoryReport() throws -> WindowsSystem_AppResourceGroupMemoryReport {
        try COM.NullResult.unwrap(_interop.getMemoryReport())
    }

    /// Gets process diagnostic information for the group such as used CPU time, disk I/O usage, and so on.
    /// - Returns: The process diagnostic info.
    public func getProcessDiagnosticInfos() throws -> WindowsFoundationCollections_IVector<WindowsSystemDiagnostics_ProcessDiagnosticInfo?> {
        try COM.NullResult.unwrap(_interop.getProcessDiagnosticInfos())
    }

    /// Gets the state report information such as execution state, energy quota state, and so on.
    /// - Returns: The state info.
    public func getStateReport() throws -> WindowsSystem_AppResourceGroupStateReport {
        try COM.NullResult.unwrap(_interop.getStateReport())
    }

    // MARK: Windows.System.IAppResourceGroupInfo2 members

    /// Initiate moving the associated app to the suspended state.
    /// - Returns: The result of trying to suspend the app.
    public func startSuspendAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_AppExecutionStateChangeResult?> {
        try COM.NullResult.unwrap(_iappResourceGroupInfo2.startSuspendAsync())
    }

    /// Initiate moving the associated app to the active state.
    /// - Returns: The result of trying to resume the app.
    public func startResumeAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_AppExecutionStateChangeResult?> {
        try COM.NullResult.unwrap(_iappResourceGroupInfo2.startResumeAsync())
    }

    /// Initiate moving the associated app to the terminated state.
    /// - Returns: The result of trying to terminate the app.
    public func startTerminateAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsSystem_AppExecutionStateChangeResult?> {
        try COM.NullResult.unwrap(_iappResourceGroupInfo2.startTerminateAsync())
    }

    // MARK: Implementation details

    private var _iappResourceGroupInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppResourceGroupInfo2>? = nil

    internal var _iappResourceGroupInfo2: COM.COMInterop<CWinRT.SWRT_WindowsSystem_IAppResourceGroupInfo2> {
        get throws {
            try _iappResourceGroupInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystem_IAppResourceGroupInfo2.iid).cast(to: CWinRT.SWRT_WindowsSystem_IAppResourceGroupInfo2.self)
            }
        }
    }

    deinit {
        _iappResourceGroupInfo2_storage?.release()
    }
}