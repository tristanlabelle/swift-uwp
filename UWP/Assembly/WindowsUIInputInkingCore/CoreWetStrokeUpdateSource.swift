// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the InkPresenter that manages the input, processing, and rendering of ink stroke data.
public final class WindowsUIInputInkingCore_CoreWetStrokeUpdateSource: WindowsRuntime.WinRTImport<WindowsUIInputInkingCore_CoreWetStrokeUpdateSourceProjection> {
    // MARK: Windows.UI.Input.Inking.Core.ICoreWetStrokeUpdateSource members

    /// Gets the InkPresenter object that manages the input, processing, and rendering of ink stroke data.
    /// - Returns: Object that manages the input, processing, and rendering of ink stroke data.
    public var inkPresenter: WindowsUIInputInking_InkPresenter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InkPresenter())
        }
    }

    /// Occurs when the InkPresenter stops processing an ink stroke in an unexpected way, CoreWetStrokeDisposition is set to Canceled, or the input is invalid, indicating the stroke was not completed.
    public func wetStrokeCanceled(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInkingCore_CoreWetStrokeUpdateSource?, WindowsUIInputInkingCore_CoreWetStrokeUpdateEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_WetStrokeCanceled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: wetStrokeCanceled)
    }

    public func wetStrokeCanceled(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_WetStrokeCanceled(cookie)
    }

    /// Occurs after the InkPresenter stops processing an ink stroke (WetStrokeStopping ) or CoreWetStrokeDisposition is set to Completed, indicating the stroke is complete.
    public func wetStrokeCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInkingCore_CoreWetStrokeUpdateSource?, WindowsUIInputInkingCore_CoreWetStrokeUpdateEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_WetStrokeCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: wetStrokeCompleted)
    }

    public func wetStrokeCompleted(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_WetStrokeCompleted(cookie)
    }

    /// Occurs after the InkPresenter starts processing an ink stroke and before it stops processing the same stroke, indicating ink data continues to be captured.
    public func wetStrokeContinuing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInkingCore_CoreWetStrokeUpdateSource?, WindowsUIInputInkingCore_CoreWetStrokeUpdateEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_WetStrokeContinuing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: wetStrokeContinuing)
    }

    public func wetStrokeContinuing(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_WetStrokeContinuing(cookie)
    }

    /// Occurs when the InkPresenter starts processing an ink stroke.
    public func wetStrokeStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInkingCore_CoreWetStrokeUpdateSource?, WindowsUIInputInkingCore_CoreWetStrokeUpdateEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_WetStrokeStarting(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: wetStrokeStarting)
    }

    public func wetStrokeStarting(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_WetStrokeStarting(cookie)
    }

    /// Occurs when the InkPresenter stops processing an ink stroke, but before the stroke is finalized (WetStrokeCompleted ).
    public func wetStrokeStopping(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIInputInkingCore_CoreWetStrokeUpdateSource?, WindowsUIInputInkingCore_CoreWetStrokeUpdateEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_WetStrokeStopping(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: wetStrokeStopping)
    }

    public func wetStrokeStopping(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_WetStrokeStopping(cookie)
    }

    // MARK: Windows.UI.Input.Inking.Core.ICoreWetStrokeUpdateSourceStatics members

    /// Retrieves a CoreWetStrokeUpdateSource object for handling "wet" ink strokes prior to processing by an InkPresenter object.
    /// - Parameter inkPresenter: Object that manages the input, processing, and rendering of InkStroke data.
    /// - Returns: Object that handles the "wet" ink data for an InkPresenter object.
    public static func create(_ inkPresenter: WindowsUIInputInking_InkPresenter?) throws -> WindowsUIInputInkingCore_CoreWetStrokeUpdateSource {
        try COM.NullResult.unwrap(_icoreWetStrokeUpdateSourceStatics.create(inkPresenter))
    }

    // MARK: Implementation details

    private static var _icoreWetStrokeUpdateSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInkingCore_ICoreWetStrokeUpdateSourceStatics>? = nil

    internal static var _icoreWetStrokeUpdateSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIInputInkingCore_ICoreWetStrokeUpdateSourceStatics> {
        get throws {
            try _icoreWetStrokeUpdateSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Input.Inking.Core.CoreWetStrokeUpdateSource", id: CWinRT.SWRT_WindowsUIInputInkingCore_ICoreWetStrokeUpdateSourceStatics.iid)
            }
        }
    }
}