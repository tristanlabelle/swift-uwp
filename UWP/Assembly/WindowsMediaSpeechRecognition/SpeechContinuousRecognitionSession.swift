// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages speech input for free-form dictation, or an arbitrary sequence of words or phrases that are defined in a local grammar file constraint.
public final class WindowsMediaSpeechRecognition_SpeechContinuousRecognitionSession: WindowsRuntime.WinRTImport<WindowsMediaSpeechRecognition_SpeechContinuousRecognitionSessionProjection> {
    // MARK: Windows.Media.SpeechRecognition.ISpeechContinuousRecognitionSession members

    /// Gets or sets the time threshold at which the continuous recognition session ends due to lack of audio input.
    /// - Returns: The time threshold.
    public var autoStopSilenceTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_AutoStopSilenceTimeout()
        }
    }

    /// Gets or sets the time threshold at which the continuous recognition session ends due to lack of audio input.
    /// - Returns: The time threshold.
    public func autoStopSilenceTimeout(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_AutoStopSilenceTimeout(value)
    }

    /// Occurs when a continuous recognition session ends.
    public func completed(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaSpeechRecognition_SpeechContinuousRecognitionSession?, WindowsMediaSpeechRecognition_SpeechContinuousRecognitionCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Completed(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: completed)
    }

    public func completed(removing value: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Completed(value)
    }

    /// Occurs when the speech recognizer returns the result from a continuous recognition session.
    public func resultGenerated(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaSpeechRecognition_SpeechContinuousRecognitionSession?, WindowsMediaSpeechRecognition_SpeechContinuousRecognitionResultGeneratedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ResultGenerated(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: resultGenerated)
    }

    public func resultGenerated(removing value: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ResultGenerated(value)
    }

    /// *Overload*
    /// - Returns: An asynchronous handler called when the operation is complete.
    public func startAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// *Overload*
    /// - Parameter mode: The speech recognition behavior.
    /// - Returns: An asynchronous handler called when the operation is complete.
    public func startAsync(_ mode: WindowsMediaSpeechRecognition_SpeechContinuousRecognitionMode) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startWithModeAsync(mode))
    }

    /// Asynchronously end a continuous speech recognition session and pass all pending recognition results to the ResultGenerated event.
    /// - Returns: An asynchronous handler called when the operation is complete.
    public func stopAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.stopAsync())
    }

    /// Asynchronously cancel the continuous speech recognition session and discard all pending recognition results.
    /// - Returns: An asynchronous handler called when the operation is complete.
    public func cancelAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.cancelAsync())
    }

    /// Asynchronously pause a continuous speech recognition session to update a local grammar file or list constraint.
    /// - Returns: An asynchronous handler called when the operation is complete.
    public func pauseAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.pauseAsync())
    }

    /// Resumes a continuous speech recognition session, if paused.
    public func resume() throws {
        try _interop.resume()
    }

    // MARK: Implementation details
}