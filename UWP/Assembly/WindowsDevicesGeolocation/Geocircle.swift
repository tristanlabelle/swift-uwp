// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes a geographic circle with a center point and a radius.
public final class WindowsDevicesGeolocation_Geocircle: WindowsRuntime.WinRTImport<WindowsDevicesGeolocation_GeocircleProjection>, WindowsDevicesGeolocation_IGeoshapeProtocol {
    // MARK: Windows.Devices.Geolocation.IGeocircleFactory members

    public convenience init(_ position: WindowsDevicesGeolocation_BasicGeoposition, _ radius: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeocircleFactory.create(position, radius)))
    }

    public convenience init(_ position: WindowsDevicesGeolocation_BasicGeoposition, _ radius: Swift.Double, _ altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeocircleFactory.createWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem)))
    }

    public convenience init(_ position: WindowsDevicesGeolocation_BasicGeoposition, _ radius: Swift.Double, _ altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem, _ spatialReferenceId: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeocircleFactory.createWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId)))
    }

    // MARK: Windows.Devices.Geolocation.IGeocircle members

    /// The center point of a geographic circle.
    /// - Returns: The center point of a geographic circle.
    public var center: WindowsDevicesGeolocation_BasicGeoposition {
        get throws {
            try _interop.get_Center()
        }
    }

    /// The radius of a geographic circle in meters.
    /// - Returns: The radius of a geographic circle.
    public var radius: Swift.Double {
        get throws {
            try _interop.get_Radius()
        }
    }

    // MARK: Windows.Devices.Geolocation.IGeoshape members

    /// The altitude reference system of the geographic circle.
    /// - Returns: The altitude reference system of the geographic circle.
    public var altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem {
        get throws {
            try _igeoshape.get_AltitudeReferenceSystem()
        }
    }

    /// The type of geographic shape.
    /// - Returns: The type of geographic shape.
    public var geoshapeType: WindowsDevicesGeolocation_GeoshapeType {
        get throws {
            try _igeoshape.get_GeoshapeType()
        }
    }

    /// The spatial reference identifier for the geographic circle, corresponding to a spatial reference system based on the specific ellipsoid used for either flat-earth mapping or round-earth mapping.
    /// - Returns: The spatial reference identifier for the geographic circle, corresponding to a spatial reference system based on the specific ellipsoid used for either flat-earth mapping or round-earth mapping.
    public var spatialReferenceId: Swift.UInt32 {
        get throws {
            try _igeoshape.get_SpatialReferenceId()
        }
    }

    // MARK: Implementation details

    private var _igeoshape_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape>? = nil

    internal var _igeoshape: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape> {
        get throws {
            try _igeoshape_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape.iid).cast(to: CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape.self)
            }
        }
    }

    deinit {
        _igeoshape_storage?.release()
    }

    private static var _igeocircleFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeocircleFactory>? = nil

    internal static var _igeocircleFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeocircleFactory> {
        get throws {
            try _igeocircleFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.Geocircle", id: CWinRT.SWRT_WindowsDevicesGeolocation_IGeocircleFactory.iid)
            }
        }
    }
}