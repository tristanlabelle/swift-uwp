// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the current geographic location.
public final class WindowsDevicesGeolocation_Geolocator: WindowsRuntime.WinRTImport<WindowsDevicesGeolocation_GeolocatorProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesGeolocation_GeolocatorProjection.self))
    }

    // MARK: Windows.Devices.Geolocation.IGeolocator members

    /// The accuracy level at which the Geolocator provides location updates.
    /// - Returns: The accuracy level at which the Geolocator provides location updates.
    public var desiredAccuracy: WindowsDevicesGeolocation_PositionAccuracy {
        get throws {
            try _interop.get_DesiredAccuracy()
        }
    }

    /// The accuracy level at which the Geolocator provides location updates.
    /// - Returns: The accuracy level at which the Geolocator provides location updates.
    public func desiredAccuracy(_ value: WindowsDevicesGeolocation_PositionAccuracy) throws {
        try _interop.put_DesiredAccuracy(value)
    }

    /// The status that indicates the ability of the Geolocator to provide location updates.
    /// - Returns: The status of the Geolocator.
    public var locationStatus: WindowsDevicesGeolocation_PositionStatus {
        get throws {
            try _interop.get_LocationStatus()
        }
    }

    /// The distance of movement, in meters, relative to the coordinate from the last PositionChanged event, that is required for the Geolocator to raise a PositionChanged event.
    /// - Returns: The distance of required movement, in meters, for location services to raise a PositionChanged event. The default value is 0.
    public var movementThreshold: Swift.Double {
        get throws {
            try _interop.get_MovementThreshold()
        }
    }

    /// The distance of movement, in meters, relative to the coordinate from the last PositionChanged event, that is required for the Geolocator to raise a PositionChanged event.
    /// - Returns: The distance of required movement, in meters, for location services to raise a PositionChanged event. The default value is 0.
    public func movementThreshold(_ value: Swift.Double) throws {
        try _interop.put_MovementThreshold(value)
    }

    /// The requested minimum time interval between location updates, in milliseconds. If your application requires updates infrequently, set this value so that location services can conserve power by calculating location only when needed.
    /// - Returns: The requested minimum time interval between location updates.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// The requested minimum time interval between location updates, in milliseconds. If your application requires updates infrequently, set this value so that location services can conserve power by calculating location only when needed.
    /// - Returns: The requested minimum time interval between location updates.
    public func reportInterval(_ value: Swift.UInt32) throws {
        try _interop.put_ReportInterval(value)
    }

    /// Raised when the location is updated.
    public func positionChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesGeolocation_Geolocator?, WindowsDevicesGeolocation_PositionChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PositionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: positionChanged)
    }

    public func positionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PositionChanged(token)
    }

    /// Raised when the ability of the Geolocator to provide updated location changes.
    public func statusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesGeolocation_Geolocator?, WindowsDevicesGeolocation_StatusChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusChanged)
    }

    public func statusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusChanged(token)
    }

    /// Starts an asynchronous operation to retrieve the current location of the device.
    /// - Returns: An asynchronous operation that, upon completion, returns a Geoposition marking the found location.
    public func getGeopositionAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesGeolocation_Geoposition?> {
        try COM.NullResult.unwrap(_interop.getGeopositionAsync())
    }

    /// Starts an asynchronous operation to retrieve the current location of the device.
    /// - Parameter maximumAge: The maximum acceptable age of cached location data. A TimeSpan is a time period expressed in 100-nanosecond units.
    /// - Parameter timeout: The timeout. A TimeSpan is a time period expressed in 100-nanosecond units.
    /// - Returns: An asynchronous operation that, upon completion, returns a Geoposition marking the found location.
    public func getGeopositionAsync(_ maximumAge: WindowsFoundation_TimeSpan, _ timeout: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesGeolocation_Geoposition?> {
        try COM.NullResult.unwrap(_interop.getGeopositionAsyncWithAgeAndTimeout(maximumAge, timeout))
    }

    // MARK: Windows.Devices.Geolocation.IGeolocatorWithScalarAccuracy members

    /// Gets or sets the desired accuracy in meters for data returned from the location service.
    /// - Returns: The desired accuracy in meters for data returned from the location service.
    public var desiredAccuracyInMeters: Swift.UInt32? {
        get throws {
            try _igeolocatorWithScalarAccuracy.get_DesiredAccuracyInMeters()
        }
    }

    /// Gets or sets the desired accuracy in meters for data returned from the location service.
    /// - Returns: The desired accuracy in meters for data returned from the location service.
    public func desiredAccuracyInMeters(_ value: Swift.UInt32?) throws {
        try _igeolocatorWithScalarAccuracy.put_DesiredAccuracyInMeters(value)
    }

    // MARK: Windows.Devices.Geolocation.IGeolocator2 members

    /// Sets the Geolocator to use coarse location as a fallback option (see Remarks).
    public func allowFallbackToConsentlessPositions() throws {
        try _igeolocator2.allowFallbackToConsentlessPositions()
    }

    // MARK: Windows.Devices.Geolocation.IGeolocatorStatics2 members

    /// Gets the location manually entered into the system by the user, to be utilized if no better options exist.
    /// - Returns: The location manually entered by the user.
    public static var defaultGeoposition: WindowsFoundation_IReference<WindowsDevicesGeolocation_BasicGeoposition>? {
        get throws {
            try _igeolocatorStatics2.get_DefaultGeoposition()
        }
    }

    /// Gets the location manually entered into the system by the user, to be utilized if no better options exist.
    /// - Returns: The location manually entered by the user.
    public static func defaultGeoposition(_ value: WindowsFoundation_IReference<WindowsDevicesGeolocation_BasicGeoposition>?) throws {
        try _igeolocatorStatics2.put_DefaultGeoposition(value)
    }

    /// Indicates whether the user should be prompted to set a default location manually.
    /// - Returns: **true** if the app would benefit from a manually-set location, **false** if a better option is available.
    public static var isDefaultGeopositionRecommended: Swift.Bool {
        get throws {
            try _igeolocatorStatics2.get_IsDefaultGeopositionRecommended()
        }
    }

    // MARK: Windows.Devices.Geolocation.IGeolocatorStatics members

    /// Requests permission to access location data.
    /// - Returns: A GeolocationAccessStatus that indicates if permission to location data has been granted.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesGeolocation_GeolocationAccessStatus> {
        try COM.NullResult.unwrap(_igeolocatorStatics.requestAccessAsync())
    }

    /// Starts an asynchronous operation to retrieve the location history of the device.
    /// - Parameter startTime: Represents the beginning of the time span for which positions are to be returned.
    /// - Returns: Positions (of type Geoposition ) that were collected during the specified time span.
    public static func getGeopositionHistoryAsync(_ startTime: WindowsFoundation_DateTime) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesGeolocation_Geoposition?>?> {
        try COM.NullResult.unwrap(_igeolocatorStatics.getGeopositionHistoryAsync(startTime))
    }

    /// Starts an asynchronous operation to retrieve the location history of the device.
    /// - Parameter startTime: Represents the beginning of the time span for which positions are to be returned.
    /// - Parameter duration: Represents the length of time after *startTime* for which positions are to be returned.
    /// - Returns: Positions (of type Geoposition ) that were collected during the specified time span.
    public static func getGeopositionHistoryAsync(_ startTime: WindowsFoundation_DateTime, _ duration: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesGeolocation_Geoposition?>?> {
        try COM.NullResult.unwrap(_igeolocatorStatics.getGeopositionHistoryWithDurationAsync(startTime, duration))
    }

    // MARK: Implementation details

    private var _igeolocatorWithScalarAccuracy_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorWithScalarAccuracy>? = nil

    internal var _igeolocatorWithScalarAccuracy: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorWithScalarAccuracy> {
        get throws {
            try _igeolocatorWithScalarAccuracy_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorWithScalarAccuracy.iid).cast(to: CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorWithScalarAccuracy.self)
            }
        }
    }

    private var _igeolocator2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocator2>? = nil

    internal var _igeolocator2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocator2> {
        get throws {
            try _igeolocator2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocator2.iid).cast(to: CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocator2.self)
            }
        }
    }

    deinit {
        _igeolocatorWithScalarAccuracy_storage?.release()
        _igeolocator2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.Geolocator", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _igeolocatorStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics2>? = nil

    internal static var _igeolocatorStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics2> {
        get throws {
            try _igeolocatorStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.Geolocator", id: CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics2.iid)
            }
        }
    }

    private static var _igeolocatorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics>? = nil

    internal static var _igeolocatorStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics> {
        get throws {
            try _igeolocatorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.Geolocator", id: CWinRT.SWRT_WindowsDevicesGeolocation_IGeolocatorStatics.iid)
            }
        }
    }
}