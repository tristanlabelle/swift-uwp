// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a rectangle that defines a geographic area.
public final class WindowsDevicesGeolocation_GeoboundingBox: WindowsRuntime.WinRTImport<WindowsDevicesGeolocation_GeoboundingBoxProjection>, WindowsDevicesGeolocation_IGeoshapeProtocol {
    // MARK: Windows.Devices.Geolocation.IGeoboundingBoxFactory members

    public convenience init(_ northwestCorner: WindowsDevicesGeolocation_BasicGeoposition, _ southeastCorner: WindowsDevicesGeolocation_BasicGeoposition) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeoboundingBoxFactory.create(northwestCorner, southeastCorner)))
    }

    public convenience init(_ northwestCorner: WindowsDevicesGeolocation_BasicGeoposition, _ southeastCorner: WindowsDevicesGeolocation_BasicGeoposition, _ altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeoboundingBoxFactory.createWithAltitudeReference(northwestCorner, southeastCorner, altitudeReferenceSystem)))
    }

    public convenience init(_ northwestCorner: WindowsDevicesGeolocation_BasicGeoposition, _ southeastCorner: WindowsDevicesGeolocation_BasicGeoposition, _ altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem, _ spatialReferenceId: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._igeoboundingBoxFactory.createWithAltitudeReferenceAndSpatialReference(northwestCorner, southeastCorner, altitudeReferenceSystem, spatialReferenceId)))
    }

    // MARK: Windows.Devices.Geolocation.IGeoboundingBox members

    /// Gets the center of the GeoboundingBox.
    /// - Returns: The center of the GeoboundingBox.
    public var center: WindowsDevicesGeolocation_BasicGeoposition {
        get throws {
            try _interop.get_Center()
        }
    }

    /// Gets the altitude of the highest corner of the GeoboundingBox.
    /// - Returns: The altitude of the highest corner of the GeoboundingBox.
    public var maxAltitude: Swift.Double {
        get throws {
            try _interop.get_MaxAltitude()
        }
    }

    /// Gets the altitude of the lowest corner of the GeoboundingBox.
    /// - Returns: The altitude of the lowest corner of the GeoboundingBox.
    public var minAltitude: Swift.Double {
        get throws {
            try _interop.get_MinAltitude()
        }
    }

    /// Gets the northwest corner of the GeoboundingBox.
    /// - Returns: The northwest corner of the GeoboundingBox.
    public var northwestCorner: WindowsDevicesGeolocation_BasicGeoposition {
        get throws {
            try _interop.get_NorthwestCorner()
        }
    }

    /// Gets the southeast corner of the GeoboundingBox.
    /// - Returns: The southeast corner of the GeoboundingBox.
    public var southeastCorner: WindowsDevicesGeolocation_BasicGeoposition {
        get throws {
            try _interop.get_SoutheastCorner()
        }
    }

    // MARK: Windows.Devices.Geolocation.IGeoshape members

    /// Gets the altitude reference system used by the GeoboundingBox.
    /// - Returns: The altitude reference system used by the GeoboundingBox.
    public var altitudeReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem {
        get throws {
            try _igeoshape.get_AltitudeReferenceSystem()
        }
    }

    /// Gets the type of geographic shape represented by the GeoboundingBox.
    /// - Returns: The type of geographic shape represented by the GeoboundingBox.
    public var geoshapeType: WindowsDevicesGeolocation_GeoshapeType {
        get throws {
            try _igeoshape.get_GeoshapeType()
        }
    }

    /// Gets the spatial reference ID (SRID) used by the GeoboundingBox.
    /// - Returns: The spatial reference ID (SRID) used by the GeoboundingBox.
    public var spatialReferenceId: Swift.UInt32 {
        get throws {
            try _igeoshape.get_SpatialReferenceId()
        }
    }

    // MARK: Windows.Devices.Geolocation.IGeoboundingBoxStatics members

    public static func tryCompute(_ positions: WindowsFoundationCollections_IIterable<WindowsDevicesGeolocation_BasicGeoposition>?) throws -> WindowsDevicesGeolocation_GeoboundingBox {
        try COM.NullResult.unwrap(_igeoboundingBoxStatics.tryCompute(positions))
    }

    public static func tryCompute(_ positions: WindowsFoundationCollections_IIterable<WindowsDevicesGeolocation_BasicGeoposition>?, _ altitudeRefSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem) throws -> WindowsDevicesGeolocation_GeoboundingBox {
        try COM.NullResult.unwrap(_igeoboundingBoxStatics.tryComputeWithAltitudeReference(positions, altitudeRefSystem))
    }

    public static func tryCompute(_ positions: WindowsFoundationCollections_IIterable<WindowsDevicesGeolocation_BasicGeoposition>?, _ altitudeRefSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem, _ spatialReferenceId: Swift.UInt32) throws -> WindowsDevicesGeolocation_GeoboundingBox {
        try COM.NullResult.unwrap(_igeoboundingBoxStatics.tryComputeWithAltitudeReferenceAndSpatialReference(positions, altitudeRefSystem, spatialReferenceId))
    }

    // MARK: Implementation details

    private var _igeoshape_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape>? = nil

    internal var _igeoshape: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape> {
        get throws {
            try _igeoshape_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape.iid).cast(to: CWinRT.SWRT_WindowsDevicesGeolocation_IGeoshape.self)
            }
        }
    }

    deinit {
        _igeoshape_storage?.release()
    }

    private static var _igeoboundingBoxFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxFactory>? = nil

    internal static var _igeoboundingBoxFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxFactory> {
        get throws {
            try _igeoboundingBoxFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.GeoboundingBox", id: CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxFactory.iid)
            }
        }
    }

    private static var _igeoboundingBoxStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxStatics>? = nil

    internal static var _igeoboundingBoxStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxStatics> {
        get throws {
            try _igeoboundingBoxStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Geolocation.GeoboundingBox", id: CWinRT.SWRT_WindowsDevicesGeolocation_IGeoboundingBoxStatics.iid)
            }
        }
    }
}