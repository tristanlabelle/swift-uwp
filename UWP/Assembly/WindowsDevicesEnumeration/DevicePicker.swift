// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a picker flyout that contains a list of devices for the user to choose from.
public final class WindowsDevicesEnumeration_DevicePicker: WindowsRuntime.WinRTImport<WindowsDevicesEnumeration_DevicePickerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsDevicesEnumeration_DevicePickerProjection.self))
    }

    // MARK: Windows.Devices.Enumeration.IDevicePicker members

    /// Gets the colors of the picker.
    /// - Returns: The color of the picker.
    public var appearance: WindowsDevicesEnumeration_DevicePickerAppearance {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Appearance())
        }
    }

    /// Gets the filter used to choose what devices to show in the picker.
    /// - Returns: The filter.
    public var filter: WindowsDevicesEnumeration_DevicePickerFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Filter())
        }
    }

    /// Gets a collection of properties for the returned device information object.
    /// - Returns: The properties you want returned.
    public var requestedProperties: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RequestedProperties())
        }
    }

    /// Indicates that the device picker was light dismissed by the user. Light dismiss happens when the user clicks somewhere other than the picker UI and the picker UI disappears.
    public func devicePickerDismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DevicePicker?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DevicePickerDismissed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: devicePickerDismissed)
    }

    public func devicePickerDismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DevicePickerDismissed(token)
    }

    /// Indicates that the user selected a device in the picker.
    public func deviceSelected(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DevicePicker?, WindowsDevicesEnumeration_DeviceSelectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DeviceSelected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: deviceSelected)
    }

    public func deviceSelected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DeviceSelected(token)
    }

    /// Indicates that the user clicked or tapped the disconnect button for a device in the picker.
    public func disconnectButtonClicked(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DevicePicker?, WindowsDevicesEnumeration_DeviceDisconnectButtonClickedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DisconnectButtonClicked(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: disconnectButtonClicked)
    }

    public func disconnectButtonClicked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DisconnectButtonClicked(token)
    }

    /// Shows the picker UI. The picker flies out from the edge of the specified rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to fly out.
    public func show(_ selection: WindowsFoundation_Rect) throws {
        try _interop.show(selection)
    }

    /// Shows the picker UI. The picker flies out from the specified edge of the specified rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to fly out.
    /// - Parameter placement: The edge of the rectangle from which you want the picker to fly out.
    public func show(_ selection: WindowsFoundation_Rect, _ placement: WindowsUIPopups_Placement) throws {
        try _interop.showWithPlacement(selection, placement)
    }

    /// Shows the picker UI and returns the selected device; does not require you to register for an event. The picker flies out from the edge of the specified rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to fly out.
    /// - Returns: The device selected by the user.
    public func pickSingleDeviceAsync(_ selection: WindowsFoundation_Rect) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesEnumeration_DeviceInformation?> {
        try COM.NullResult.unwrap(_interop.pickSingleDeviceAsync(selection))
    }

    /// Shows the picker UI and returns the selected device; does not require you to register for an event. The picker flies out from the specified edge of the specified rectangle.
    /// - Parameter selection: The rectangle from which you want the picker to fly out.
    /// - Parameter placement: The edge of the rectangle from which you want the picker to fly out.
    /// - Returns: The device selected.
    public func pickSingleDeviceAsync(_ selection: WindowsFoundation_Rect, _ placement: WindowsUIPopups_Placement) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesEnumeration_DeviceInformation?> {
        try COM.NullResult.unwrap(_interop.pickSingleDeviceAsyncWithPlacement(selection, placement))
    }

    /// Hides the picker.
    public func hide() throws {
        try _interop.hide()
    }

    /// Updates the picker UI to reflect the provided status and display options for a specified device.
    /// - Parameter device: The device information.
    /// - Parameter status: The status to display.
    /// - Parameter options: The display options for the device.
    public func setDisplayStatus(_ device: WindowsDevicesEnumeration_DeviceInformation?, _ status: Swift.String, _ options: WindowsDevicesEnumeration_DevicePickerDisplayStatusOptions) throws {
        try _interop.setDisplayStatus(device, status, options)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Enumeration.DevicePicker", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}