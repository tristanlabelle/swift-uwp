// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the kind of DeviceInformation object.
public struct WindowsDevicesEnumeration_DeviceInformationKind: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// The object is of an unknown type. This value is not used.
    public static let unknown = Self()

    /// The DeviceInformation object represents a PnP device interface. These are exposed by device drivers to enable an app to talk to the device, typically using device IOCTLS (input output controls).
    public static let deviceInterface = Self(rawValue: 1)

    /// The DeviceInformation object represents a device container. *DeviceContainer* objects describe a collection of device objects that exist in the same physical device. For example, a multi-function printer may have several different devices included, but they would all exist as part of the parent *DeviceContainer* object.
    public static let deviceContainer = Self(rawValue: 2)

    /// The DeviceInformation object represents a device object. This could also be referred to as a devnode. These devices are objects that represent a piece of the device functionality and optionally have drivers loaded on them. When a physical device is paired with windows, multiple *Device* objects are created for it. A device contains 0 or more *DeviceInterface* objects, is a child to one *DeviceContainer* object, and is related to 0 or 1 *AssociationEndpoint* objects.
    public static let device = Self(rawValue: 3)

    /// The DeviceInformation object represents a device interface class. Every *DeviceInterface* object belongs to a certain *DeviceInterfaceClass*. This is similar to a contract definition. These contracts are represented with an id and properties, just like every other PnP object. *DeviceInterfaceClass* objects contain little more information than a unique identifier and possibly a name.
    public static let deviceInterfaceClass = Self(rawValue: 4)

    /// The DeviceInformation object represents a device association endpoint (AEP). AEPs usually represent a device discovered over a wireless or network protocol. Some of these endpoints can be used without needing to first pair the device. Use CanPair to determine if a device supports pairing and IsPaired to determine if a device is already paired with the system. Only *AssociationEndpoint* objects have a non-NULL value for Pairing.
    public static let associationEndpoint = Self(rawValue: 5)

    /// The DeviceInformation object represents an association endpoint (AEP) container. An *AssociationEndpointContainer* object represents a single physical device that might have more than one *AssociationEndpoint* objects associated with it. For example, if a television supports two different network protocols, the *AssociationEndpointContainer* would be the television. It would also have two *AssociationEndpoint* objects to represent each protocol.
    public static let associationEndpointContainer = Self(rawValue: 6)

    /// The DeviceInformation object represents an association endpoint (AEP) Service. An *AssociationEndpointService* object represents a functional service contract exposed by the device. Not all protocols support AEP services. An *AssociationEndpointService* can have a single parent *AssociationEndpointContainer* object.
    public static let associationEndpointService = Self(rawValue: 7)

    /// The DeviceInformation object represents a single physical face of a device enclosure.
    public static let devicePanel = Self(rawValue: 8)
}