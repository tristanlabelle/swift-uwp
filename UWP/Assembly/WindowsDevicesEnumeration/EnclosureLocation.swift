// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the physical location of a device in its enclosure.
public final class WindowsDevicesEnumeration_EnclosureLocation: WindowsRuntime.WinRTImport<WindowsDevicesEnumeration_EnclosureLocationProjection> {
    // MARK: Windows.Devices.Enumeration.IEnclosureLocation members

    /// Indicates whether the device is physically located in the docking station of the portable computer.
    /// - Returns: A value that is **True** if the device is physically located in the docking station, and **False** if it is not.
    public var inDock: Swift.Bool {
        get throws {
            try _interop.get_InDock()
        }
    }

    /// Indicates whether the device is physically located in the lid of the portable computer.
    /// - Returns: A value that is **True** if the device is physically located in the lid, and **False** if it is not.
    public var inLid: Swift.Bool {
        get throws {
            try _interop.get_InLid()
        }
    }

    /// Indicates which panel of the computer the device is physically located on.
    /// - Returns: One of the values of the Panel enumeration that indicates which panel of the computer the device is physically located on.
    public var panel: WindowsDevicesEnumeration_Panel {
        get throws {
            try _interop.get_Panel()
        }
    }

    // MARK: Windows.Devices.Enumeration.IEnclosureLocation2 members

    /// Gets the physical degree of rotation for a device in its enclosure.
    /// - Returns: The degrees of rotation for the device in its enclosure. This is in a clockwise direction.
    public var rotationAngleInDegreesClockwise: Swift.UInt32 {
        get throws {
            try _ienclosureLocation2.get_RotationAngleInDegreesClockwise()
        }
    }

    // MARK: Implementation details

    private var _ienclosureLocation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IEnclosureLocation2>? = nil

    internal var _ienclosureLocation2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IEnclosureLocation2> {
        get throws {
            try _ienclosureLocation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesEnumeration_IEnclosureLocation2.iid).cast(to: CWinRT.SWRT_WindowsDevicesEnumeration_IEnclosureLocation2.self)
            }
        }
    }

    deinit {
        _ienclosureLocation2_storage?.release()
    }
}