// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the PairingRequested event.
public final class WindowsDevicesEnumeration_DevicePairingRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsDevicesEnumeration_DevicePairingRequestedEventArgsProjection> {
    // MARK: Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs members

    /// Gets the DeviceInformation object associated with this pairing request.
    /// - Returns: The DeviceInformation object associated with this pairing request.
    public var deviceInformation: WindowsDevicesEnumeration_DeviceInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeviceInformation())
        }
    }

    /// Gets the kind of pairing associated with this pairing event.
    /// - Returns: The kind of pairing used for this pairing request.
    public var pairingKind: WindowsDevicesEnumeration_DevicePairingKinds {
        get throws {
            try _interop.get_PairingKind()
        }
    }

    /// Gets the pin associated with a pairing request.
    /// - Returns: The pin associated with a pairing request.
    public var pin: Swift.String {
        get throws {
            try _interop.get_Pin()
        }
    }

    /// Accepts a PairingRequested event and pairs the device with the application.
    public func accept() throws {
        try _interop.accept()
    }

    /// Accepts a PairingRequested event and pairs the device with the application. Requires a pin for pairing purposes.
    /// - Parameter pin: The pin to use for attempting to pair a device.
    public func accept(_ pin: Swift.String) throws {
        try _interop.acceptWithPin(pin)
    }

    /// Requests a Deferral to support asynchronous operations.
    /// - Returns: The deferral necessary to support asynchronous actions.
    public func getDeferral() throws -> WindowsFoundation_Deferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    // MARK: Windows.Devices.Enumeration.IDevicePairingRequestedEventArgs2 members

    /// Accepts a PairingRequested event and pairs the device with the application. Requires a user name and password for pairing purposes.
    /// - Parameter passwordCredential: An object that encapsulates the user name and password for attempting to pair the device.
    public func acceptWithPasswordCredential(_ passwordCredential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _idevicePairingRequestedEventArgs2.acceptWithPasswordCredential(passwordCredential)
    }

    // MARK: Implementation details

    private var _idevicePairingRequestedEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IDevicePairingRequestedEventArgs2>? = nil

    internal var _idevicePairingRequestedEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IDevicePairingRequestedEventArgs2> {
        get throws {
            try _idevicePairingRequestedEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesEnumeration_IDevicePairingRequestedEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsDevicesEnumeration_IDevicePairingRequestedEventArgs2.self)
            }
        }
    }

    deinit {
        _idevicePairingRequestedEventArgs2_storage?.release()
    }
}