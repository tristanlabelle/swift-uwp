// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Enumerates devices dynamically, so that the app receives notifications if devices are added, removed, or changed after the initial enumeration is complete.
public final class WindowsDevicesEnumeration_DeviceWatcher: WindowsRuntime.WinRTImport<WindowsDevicesEnumeration_DeviceWatcherProjection> {
    // MARK: Windows.Devices.Enumeration.IDeviceWatcher members

    /// The status of the DeviceWatcher.
    /// - Returns: The status of the DeviceWatcher.
    public var status: WindowsDevicesEnumeration_DeviceWatcherStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Event that is raised when a device is added to the collection enumerated by the DeviceWatcher.
    public func added(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DeviceWatcher?, WindowsDevicesEnumeration_DeviceInformation?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Added(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: added)
    }

    public func added(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Added(token)
    }

    /// Event that is raised when the enumeration of devices completes.
    public func enumerationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DeviceWatcher?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_EnumerationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: enumerationCompleted)
    }

    public func enumerationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_EnumerationCompleted(token)
    }

    /// Event that is raised when a device is removed from the collection of enumerated devices.
    public func removed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DeviceWatcher?, WindowsDevicesEnumeration_DeviceInformationUpdate?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Removed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: removed)
    }

    public func removed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Removed(token)
    }

    /// Event that is raised when the enumeration operation has been stopped.
    public func stopped(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DeviceWatcher?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Stopped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stopped)
    }

    public func stopped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Stopped(token)
    }

    /// Event that is raised when a device is updated in the collection of enumerated devices.
    public func updated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesEnumeration_DeviceWatcher?, WindowsDevicesEnumeration_DeviceInformationUpdate?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Updated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: updated)
    }

    public func updated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Updated(token)
    }

    /// Starts a search for devices, and subscribes to device enumeration events.
    public func start() throws {
        try _interop.start()
    }

    /// Stop raising the events that add, update and remove enumeration results.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Devices.Enumeration.IDeviceWatcher2 members

    public func getBackgroundTrigger(_ requestedEventKinds: WindowsFoundationCollections_IIterable<WindowsDevicesEnumeration_DeviceWatcherEventKind>?) throws -> WindowsApplicationModelBackground_DeviceWatcherTrigger {
        try COM.NullResult.unwrap(_ideviceWatcher2.getBackgroundTrigger(requestedEventKinds))
    }

    // MARK: Implementation details

    private var _ideviceWatcher2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IDeviceWatcher2>? = nil

    internal var _ideviceWatcher2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesEnumeration_IDeviceWatcher2> {
        get throws {
            try _ideviceWatcher2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesEnumeration_IDeviceWatcher2.iid).cast(to: CWinRT.SWRT_WindowsDevicesEnumeration_IDeviceWatcher2.self)
            }
        }
    }

    deinit {
        _ideviceWatcher2_storage?.release()
    }
}