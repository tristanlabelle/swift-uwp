// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Formats dates and times.
public final class WindowsGlobalizationDateTimeFormatting_DateTimeFormatter: WindowsRuntime.WinRTImport<WindowsGlobalizationDateTimeFormatting_DateTimeFormatterProjection> {
    // MARK: Windows.Globalization.DateTimeFormatting.IDateTimeFormatterFactory members

    public convenience init(_ formatTemplate: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatter(formatTemplate)))
    }

    public convenience init(_ formatTemplate: Swift.String, _ languages: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterLanguages(formatTemplate, languages)))
    }

    public convenience init(_ formatTemplate: Swift.String, _ languages: WindowsFoundationCollections_IIterable<Swift.String>?, _ geographicRegion: Swift.String, _ calendar: Swift.String, _ clock: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterContext(formatTemplate, languages, geographicRegion, calendar, clock)))
    }

    public convenience init(_ yearFormat: WindowsGlobalizationDateTimeFormatting_YearFormat, _ monthFormat: WindowsGlobalizationDateTimeFormatting_MonthFormat, _ dayFormat: WindowsGlobalizationDateTimeFormatting_DayFormat, _ dayOfWeekFormat: WindowsGlobalizationDateTimeFormatting_DayOfWeekFormat) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterDate(yearFormat, monthFormat, dayFormat, dayOfWeekFormat)))
    }

    public convenience init(_ hourFormat: WindowsGlobalizationDateTimeFormatting_HourFormat, _ minuteFormat: WindowsGlobalizationDateTimeFormatting_MinuteFormat, _ secondFormat: WindowsGlobalizationDateTimeFormatting_SecondFormat) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterTime(hourFormat, minuteFormat, secondFormat)))
    }

    public convenience init(_ yearFormat: WindowsGlobalizationDateTimeFormatting_YearFormat, _ monthFormat: WindowsGlobalizationDateTimeFormatting_MonthFormat, _ dayFormat: WindowsGlobalizationDateTimeFormatting_DayFormat, _ dayOfWeekFormat: WindowsGlobalizationDateTimeFormatting_DayOfWeekFormat, _ hourFormat: WindowsGlobalizationDateTimeFormatting_HourFormat, _ minuteFormat: WindowsGlobalizationDateTimeFormatting_MinuteFormat, _ secondFormat: WindowsGlobalizationDateTimeFormatting_SecondFormat, _ languages: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterDateTimeLanguages(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages)))
    }

    public convenience init(_ yearFormat: WindowsGlobalizationDateTimeFormatting_YearFormat, _ monthFormat: WindowsGlobalizationDateTimeFormatting_MonthFormat, _ dayFormat: WindowsGlobalizationDateTimeFormatting_DayFormat, _ dayOfWeekFormat: WindowsGlobalizationDateTimeFormatting_DayOfWeekFormat, _ hourFormat: WindowsGlobalizationDateTimeFormatting_HourFormat, _ minuteFormat: WindowsGlobalizationDateTimeFormatting_MinuteFormat, _ secondFormat: WindowsGlobalizationDateTimeFormatting_SecondFormat, _ languages: WindowsFoundationCollections_IIterable<Swift.String>?, _ geographicRegion: Swift.String, _ calendar: Swift.String, _ clock: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._idateTimeFormatterFactory.createDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages, geographicRegion, calendar, clock)))
    }

    // MARK: Windows.Globalization.DateTimeFormatting.IDateTimeFormatter members

    /// Gets the calendar that is used when formatting dates.
    /// - Returns: The calendar that is used.
    public var calendar: Swift.String {
        get throws {
            try _interop.get_Calendar()
        }
    }

    /// Gets the clock that is used when formatting times.
    /// - Returns: The clock that is used.
    public var clock: Swift.String {
        get throws {
            try _interop.get_Clock()
        }
    }

    /// Gets or sets the region that is used when formatting dates and times.
    /// - Returns: The region that is used.
    public var geographicRegion: Swift.String {
        get throws {
            try _interop.get_GeographicRegion()
        }
    }

    /// Gets the DayFormat in the template.
    /// - Returns: Specifies whether the day is included. If it is, this property specifies the format for the day in the template.
    public var includeDay: WindowsGlobalizationDateTimeFormatting_DayFormat {
        get throws {
            try _interop.get_IncludeDay()
        }
    }

    /// Gets the DayOfWeekFormat in the template.
    /// - Returns: Specifies whether the day of week is included. If it is, this property specifies the format for the day of week in the template.
    public var includeDayOfWeek: WindowsGlobalizationDateTimeFormatting_DayOfWeekFormat {
        get throws {
            try _interop.get_IncludeDayOfWeek()
        }
    }

    /// Gets the HourFormat in the template.
    /// - Returns: Specifies whether the hour is included. If it is, this property specifies the format for the hour in the template.
    public var includeHour: WindowsGlobalizationDateTimeFormatting_HourFormat {
        get throws {
            try _interop.get_IncludeHour()
        }
    }

    /// Gets the MinuteFormat in the template.
    /// - Returns: Specifies whether the minute is included. If it is, this property specifies the format for the minute in the template.
    public var includeMinute: WindowsGlobalizationDateTimeFormatting_MinuteFormat {
        get throws {
            try _interop.get_IncludeMinute()
        }
    }

    /// Gets the MonthFormat in the template.
    /// - Returns: Specifies whether the month is included. If it is, this property specifies the format for the month in the template.
    public var includeMonth: WindowsGlobalizationDateTimeFormatting_MonthFormat {
        get throws {
            try _interop.get_IncludeMonth()
        }
    }

    /// Gets the SecondFormat in the template.
    /// - Returns: Specifies whether the second is included. If it is, this property specifies the format for the second in the template.
    public var includeSecond: WindowsGlobalizationDateTimeFormatting_SecondFormat {
        get throws {
            try _interop.get_IncludeSecond()
        }
    }

    /// Gets the YearFormat in the template.
    /// - Returns: Specifies whether the year is included. If it is, this format specifies the format for the year in the template.
    public var includeYear: WindowsGlobalizationDateTimeFormatting_YearFormat {
        get throws {
            try _interop.get_IncludeYear()
        }
    }

    /// Gets the priority list of language identifiers that is used when formatting dates and times.
    /// - Returns: The list of languages that is used.
    public var languages: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Languages())
        }
    }

    /// Gets or sets the numbering system that is used to format dates and times.
    /// - Returns: A string that indicates the numeral system of the formatter, such as "Latn" for the Latin numeral system (0123456789) or "Arab" for the Arabic-Indic numeral system (٠١٢٣٤٥ ٦٧٨٩).
    public var numeralSystem: Swift.String {
        get throws {
            try _interop.get_NumeralSystem()
        }
    }

    /// Gets or sets the numbering system that is used to format dates and times.
    /// - Returns: A string that indicates the numeral system of the formatter, such as "Latn" for the Latin numeral system (0123456789) or "Arab" for the Arabic-Indic numeral system (٠١٢٣٤٥ ٦٧٨٩).
    public func numeralSystem(_ value: Swift.String) throws {
        try _interop.put_NumeralSystem(value)
    }

    /// Gets the patterns corresponding to this template that are used when formatting dates and times.
    /// - Returns: The pattern that provides the requested components in the template. See the remarks for the DateTimeFormatter class for a list of valid format patterns.
    public var patterns: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Patterns())
        }
    }

    /// Gets the geographic region that was most recently used to format dates and times.
    /// - Returns: The geographic region that was most recently used to format dates and times.
    public var resolvedGeographicRegion: Swift.String {
        get throws {
            try _interop.get_ResolvedGeographicRegion()
        }
    }

    /// Gets the language that was most recently used to format dates and times.
    /// - Returns: The language from the priority list of language identifiers that was most recently used to format dates and times.
    public var resolvedLanguage: Swift.String {
        get throws {
            try _interop.get_ResolvedLanguage()
        }
    }

    /// Gets a string representation of this format template.
    /// - Returns: A string that represents this format template. If the DateTimeFormatter object was constructed with a format template or format enumerations, the string can be used to construct the same DateTimeFormatter. If a pattern was used to construct the DateTimeFormatter, this property returns the empty string. See the remarks for the DateTimeFormatter class for a list of valid format templates.
    public var template: Swift.String {
        get throws {
            try _interop.get_Template()
        }
    }

    /// Returns a string representation of the provided date and time.
    /// - Parameter value: The DateTime to be formatted.
    /// - Returns: A string that represents the date and time.
    public func format(_ value: WindowsFoundation_DateTime) throws -> Swift.String {
        try _interop.format(value)
    }

    // MARK: Windows.Globalization.DateTimeFormatting.IDateTimeFormatter2 members

    /// Returns a string that represents the given date and time in the given time zone, conforming to the template the formatter is currently using.
    /// - Parameter datetime: The DateTime to be formatted.
    /// - Parameter timeZoneId: An identifier from the IANA Time Zone Database that identifies the time zone to use (for example, "Americas/Los_Angeles" for Pacific Time).
    /// - Returns: A string that represents the date, time, and time zone.
    public func format(_ datetime: WindowsFoundation_DateTime, _ timeZoneId: Swift.String) throws -> Swift.String {
        try _idateTimeFormatter2.formatUsingTimeZone(datetime, timeZoneId)
    }

    // MARK: Windows.Globalization.DateTimeFormatting.IDateTimeFormatterStatics members

    /// Gets the DateTimeFormatter object that formats dates according to the user's choice of long date pattern.
    /// - Returns: A DateTimeFormatter object equivalent to one constructed with the "longdate" template.
    public static var longDate: WindowsGlobalizationDateTimeFormatting_DateTimeFormatter {
        get throws {
            try COM.NullResult.unwrap(_idateTimeFormatterStatics.get_LongDate())
        }
    }

    /// Gets the DateTimeFormatter object that formats times according to the user's choice of long time pattern.
    /// - Returns: A DateTimeFormatter object equivalent to one constructed with the "longtime" template.
    public static var longTime: WindowsGlobalizationDateTimeFormatting_DateTimeFormatter {
        get throws {
            try COM.NullResult.unwrap(_idateTimeFormatterStatics.get_LongTime())
        }
    }

    /// Gets the DateTimeFormatter object that formats dates according to the user's choice of short date pattern.
    /// - Returns: A DateTimeFormatter object equivalent to one constructed with the "shortdate" template.
    public static var shortDate: WindowsGlobalizationDateTimeFormatting_DateTimeFormatter {
        get throws {
            try COM.NullResult.unwrap(_idateTimeFormatterStatics.get_ShortDate())
        }
    }

    /// Gets the DateTimeFormatter object that formats times according to the user's choice of short time pattern.
    /// - Returns: A DateTimeFormatter object equivalent to one constructed with the "shorttime" template.
    public static var shortTime: WindowsGlobalizationDateTimeFormatting_DateTimeFormatter {
        get throws {
            try COM.NullResult.unwrap(_idateTimeFormatterStatics.get_ShortTime())
        }
    }

    // MARK: Implementation details

    private var _idateTimeFormatter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatter2>? = nil

    internal var _idateTimeFormatter2: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatter2> {
        get throws {
            try _idateTimeFormatter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatter2.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatter2.self)
            }
        }
    }

    deinit {
        _idateTimeFormatter2_storage?.release()
    }

    private static var _idateTimeFormatterFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterFactory>? = nil

    internal static var _idateTimeFormatterFactory: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterFactory> {
        get throws {
            try _idateTimeFormatterFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.DateTimeFormatting.DateTimeFormatter", id: CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterFactory.iid)
            }
        }
    }

    private static var _idateTimeFormatterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterStatics>? = nil

    internal static var _idateTimeFormatterStatics: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterStatics> {
        get throws {
            try _idateTimeFormatterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.DateTimeFormatting.DateTimeFormatter", id: CWinRT.SWRT_WindowsGlobalizationDateTimeFormatting_IDateTimeFormatterStatics.iid)
            }
        }
    }
}