// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes the position and other physical characteristics of an emitter from which the audio of an AudioGraph node is emitted when spatial audio processing is used.
public final class WindowsMediaAudio_AudioNodeEmitter: WindowsRuntime.WinRTImport<WindowsMediaAudio_AudioNodeEmitterProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaAudio_AudioNodeEmitterProjection.self))
    }

    // MARK: Windows.Media.Audio.IAudioNodeEmitterFactory members

    public convenience init(_ shape: WindowsMediaAudio_AudioNodeEmitterShape?, _ decayModel: WindowsMediaAudio_AudioNodeEmitterDecayModel?, _ settings: WindowsMediaAudio_AudioNodeEmitterSettings) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iaudioNodeEmitterFactory.createAudioNodeEmitter(shape, decayModel, settings)))
    }

    // MARK: Windows.Media.Audio.IAudioNodeEmitter members

    /// Gets an object describing the decay model for the AudioNodeEmitter.
    /// - Returns: An object describing the decay model for the emitter.
    public var decayModel: WindowsMediaAudio_AudioNodeEmitterDecayModel {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DecayModel())
        }
    }

    /// A vector expressing the direction in which audio is emitted from the AudioNodeEmitter.
    /// - Returns: The direction in which audio is emitted from the emitter.
    public var direction: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Direction()
        }
    }

    /// A vector expressing the direction in which audio is emitted from the AudioNodeEmitter.
    /// - Returns: The direction in which audio is emitted from the emitter.
    public func direction(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Direction(value)
    }

    /// Gets or sets the scale of the position of the emitter. All distances used when calculating spatial audio effects are expressed in meters. Setting this value allows you to automatically scale the calculations to use some other unit.
    /// - Returns: The scale of the position of the emitter.
    public var distanceScale: Swift.Double {
        get throws {
            try _interop.get_DistanceScale()
        }
    }

    /// Gets or sets the scale of the position of the emitter. All distances used when calculating spatial audio effects are expressed in meters. Setting this value allows you to automatically scale the calculations to use some other unit.
    /// - Returns: The scale of the position of the emitter.
    public func distanceScale(_ value: Swift.Double) throws {
        try _interop.put_DistanceScale(value)
    }

    /// Gets or sets the scale of the doppler velocity of the emitter. The DopplerVelocity of an emitter is expressed in meters per second. Setting this value allows you to automatically scale the velocity to some other unit.
    /// - Returns: The scale of the doppler velocity of the emitter.
    public var dopplerScale: Swift.Double {
        get throws {
            try _interop.get_DopplerScale()
        }
    }

    /// Gets or sets the scale of the doppler velocity of the emitter. The DopplerVelocity of an emitter is expressed in meters per second. Setting this value allows you to automatically scale the velocity to some other unit.
    /// - Returns: The scale of the doppler velocity of the emitter.
    public func dopplerScale(_ value: Swift.Double) throws {
        try _interop.put_DopplerScale(value)
    }

    /// Gets or sets a Vector3 expressing the velocity at which the emitter is moving in 3D space, expressed in meters per second.
    /// - Returns: A Vector3 expressing the velocity at which the emitter is moving.
    public var dopplerVelocity: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_DopplerVelocity()
        }
    }

    /// Gets or sets a Vector3 expressing the velocity at which the emitter is moving in 3D space, expressed in meters per second.
    /// - Returns: A Vector3 expressing the velocity at which the emitter is moving.
    public func dopplerVelocity(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_DopplerVelocity(value)
    }

    /// Gets or sets a value indicating the gain applied to the signal by the emitter.
    /// - Returns: A value indicating the gain applied to the signal by the emitter.
    public var gain: Swift.Double {
        get throws {
            try _interop.get_Gain()
        }
    }

    /// Gets or sets a value indicating the gain applied to the signal by the emitter.
    /// - Returns: A value indicating the gain applied to the signal by the emitter.
    public func gain(_ value: Swift.Double) throws {
        try _interop.put_Gain(value)
    }

    /// Gets a value indicating whether Doppler processing is disabled for the emitter.
    /// - Returns: True if Doppler processing is disabled; otherwise, false.
    public var isDopplerDisabled: Swift.Bool {
        get throws {
            try _interop.get_IsDopplerDisabled()
        }
    }

    /// Gets or sets a vector representing the position of the emitter in 3D space, expressed in meters.
    /// - Returns: A vector representing the position of the emitter in 3D space
    public var position: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets or sets a vector representing the position of the emitter in 3D space, expressed in meters.
    /// - Returns: A vector representing the position of the emitter in 3D space
    public func position(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Position(value)
    }

    /// Gets an object describing the shape in which the emitter emits audio.
    /// - Returns: An object describing the shape in which the emitter emits audio.
    public var shape: WindowsMediaAudio_AudioNodeEmitterShape {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Shape())
        }
    }

    // MARK: Windows.Media.Audio.IAudioNodeEmitter2 members

    /// Gets or sets a value that specifies the spatial audio processing model used by the emitter.
    /// - Returns: A value that specifies the spatial audio processing model used by the emitter.
    public var spatialAudioModel: WindowsMediaAudio_SpatialAudioModel {
        get throws {
            try _iaudioNodeEmitter2.get_SpatialAudioModel()
        }
    }

    /// Gets or sets a value that specifies the spatial audio processing model used by the emitter.
    /// - Returns: A value that specifies the spatial audio processing model used by the emitter.
    public func spatialAudioModel(_ value: WindowsMediaAudio_SpatialAudioModel) throws {
        try _iaudioNodeEmitter2.put_SpatialAudioModel(value)
    }

    // MARK: Implementation details

    private var _iaudioNodeEmitter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitter2>? = nil

    internal var _iaudioNodeEmitter2: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitter2> {
        get throws {
            try _iaudioNodeEmitter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitter2.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitter2.self)
            }
        }
    }

    deinit {
        _iaudioNodeEmitter2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Audio.AudioNodeEmitter", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iaudioNodeEmitterFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitterFactory>? = nil

    internal static var _iaudioNodeEmitterFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitterFactory> {
        get throws {
            try _iaudioNodeEmitterFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Audio.AudioNodeEmitter", id: CWinRT.SWRT_WindowsMediaAudio_IAudioNodeEmitterFactory.iid)
            }
        }
    }
}