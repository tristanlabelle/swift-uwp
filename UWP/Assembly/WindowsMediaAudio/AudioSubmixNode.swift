// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an audio submix node that mixes the output of one or more nodes into single output that can be connected to output nodes or other submix nodes.
public final class WindowsMediaAudio_AudioSubmixNode: WindowsRuntime.WinRTImport<WindowsMediaAudio_AudioSubmixNodeProjection>, WindowsMediaAudio_IAudioInputNodeProtocol, WindowsMediaAudio_IAudioNodeProtocol, WindowsFoundation_IClosableProtocol, WindowsMediaAudio_IAudioInputNode2Protocol {
    // MARK: Windows.Media.Audio.IAudioInputNode members

    /// Gets outgoing connections from the audio submix node to other nodes in the audio graph.
    /// - Returns: A collection of objects representing audio graph connections.
    public var outgoingConnections: WindowsFoundationCollections_IVectorView<WindowsMediaAudio_AudioGraphConnection?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OutgoingConnections())
        }
    }

    /// Adds an outgoing connection to the audio submix node.
    /// - Parameter destination: The destination node for the connection.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _interop.addOutgoingConnection(destination)
    }

    /// Adds an outgoing connection with gain to the audio submix node.
    /// - Parameter destination: The destination node for the connection.
    /// - Parameter gain: A value indicating the gain associated with the connection. This is a scalar multiplier of the audio signal. The default value is 1.0.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?, _ gain: Swift.Double) throws {
        try _interop.addOutgoingConnectionWithGain(destination, gain)
    }

    /// Removes the outgoing connection from the audio submix node to the specified node.
    /// - Parameter destination: The audio node for which the outgoing connection is removed.
    public func removeOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _interop.removeOutgoingConnection(destination)
    }

    // MARK: Windows.Media.Audio.IAudioNode members

    /// Gets or sets a value indicating if the audio submix node consumes input.
    /// - Returns: True if the audio submix node consumes input, and false otherwise.
    public var consumeInput: Swift.Bool {
        get throws {
            try _iaudioNode.get_ConsumeInput()
        }
    }

    /// Gets or sets a value indicating if the audio submix node consumes input.
    /// - Returns: True if the audio submix node consumes input, and false otherwise.
    public func consumeInput(_ value: Swift.Bool) throws {
        try _iaudioNode.put_ConsumeInput(value)
    }

    /// Gets the list of effect definitions for the audio submix node. The effects in the list process audio data that flows through the node in the order in which they appear in the list.
    /// - Returns: The list of effect definitions for the node.
    public var effectDefinitions: WindowsFoundationCollections_IVector<WindowsMediaEffects_IAudioEffectDefinition?> {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EffectDefinitions())
        }
    }

    /// Gets the encoding properties for the audio device submix node.
    /// - Returns: The encoding properties for the node.
    public var encodingProperties: WindowsMediaMediaProperties_AudioEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EncodingProperties())
        }
    }

    /// Gets or sets the outgoing gain for the audio submix node.
    /// - Returns: The outgoing gain value.
    public var outgoingGain: Swift.Double {
        get throws {
            try _iaudioNode.get_OutgoingGain()
        }
    }

    /// Gets or sets the outgoing gain for the audio submix node.
    /// - Returns: The outgoing gain value.
    public func outgoingGain(_ value: Swift.Double) throws {
        try _iaudioNode.put_OutgoingGain(value)
    }

    /// Starts the audio submix node.
    public func start() throws {
        try _iaudioNode.start()
    }

    /// Stops the audio submix node.
    public func stop() throws {
        try _iaudioNode.stop()
    }

    /// Resets the audio submix node.
    public func reset() throws {
        try _iaudioNode.reset()
    }

    /// Disables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to disable.
    public func disableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.disableEffectsByDefinition(definition)
    }

    /// Enables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to enable.
    public func enableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.enableEffectsByDefinition(definition)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the audio submix node and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Audio.IAudioInputNode2 members

    /// Gets the AudioNodeEmitter that describes the position and other physical characteristics of the emitter from which the AudioSubmixNode output audio is emitted when spatial audio processing is used.
    /// - Returns: The spatial audio emitter associated with the AudioSubmixNode.
    public var emitter: WindowsMediaAudio_AudioNodeEmitter {
        get throws {
            try COM.NullResult.unwrap(_iaudioInputNode2.get_Emitter())
        }
    }

    // MARK: Implementation details

    private var _iaudioNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode>? = nil

    internal var _iaudioNode: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode> {
        get throws {
            try _iaudioNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioNode.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioNode.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iaudioInputNode2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2>? = nil

    internal var _iaudioInputNode2: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2> {
        get throws {
            try _iaudioInputNode2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.self)
            }
        }
    }

    deinit {
        _iaudioNode_storage?.release()
        _iclosable_storage?.release()
        _iaudioInputNode2_storage?.release()
    }
}