// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows a UWP app to determine if any of the app's audio streams are currently being muted or having their volume reduced by the system.
public final class WindowsMediaAudio_AudioStateMonitor: WindowsRuntime.WinRTImport<WindowsMediaAudio_AudioStateMonitorProjection> {
    // MARK: Windows.Media.Audio.IAudioStateMonitor members

    /// Gets a value indicating the current sound level of the audio streams being monitored by the AudioStateMonitor.
    /// - Returns: A value indicating the current sound level of the monitored audio streams.
    public var soundLevel: WindowsMedia_SoundLevel {
        get throws {
            try _interop.get_SoundLevel()
        }
    }

    /// Occurs when the system changes the sound level of the audio streams being monitored by the AudioStateMonitor.
    public func soundLevelChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaAudio_AudioStateMonitor?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SoundLevelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: soundLevelChanged)
    }

    public func soundLevelChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SoundLevelChanged(token)
    }

    // MARK: Windows.Media.Audio.IAudioStateMonitorStatics members

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for all audio render streams.
    /// - Returns: An AudioStateMonitor object.
    public static func createForRenderMonitoring() throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForRenderMonitoring())
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for audio render streams with the specified MediaCategory.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Returns: An AudioStateMonitor object.
    public static func createForRenderMonitoring(_ category: WindowsMediaRender_AudioRenderCategory) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForRenderMonitoringWithCategory(category))
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for render streams with the specified MediaCategory and  AudioDeviceRole.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Parameter role: A value from the AudioDeviceRole enumeration indicating the device role of audio streams that will be monitored. The system may use the device role of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Returns: An AudioStateMonitor object.
    public static func createForRenderMonitoring(_ category: WindowsMediaRender_AudioRenderCategory, _ role: WindowsMediaDevices_AudioDeviceRole) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForRenderMonitoringWithCategoryAndDeviceRole(category, role))
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for audio render streams with the specified MediaCategory that are using the specified audio device.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Parameter deviceId: A string containing the unique identifier of a audio device for which associated audio streams will be monitored.
    /// - Returns: An AudioStateMonitor object.
    public static func createForRenderMonitoringWithCategoryAndDeviceId(_ category: WindowsMediaRender_AudioRenderCategory, _ deviceId: Swift.String) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForRenderMonitoringWithCategoryAndDeviceId(category, deviceId))
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for all audio capture streams.
    /// - Returns: An AudioStateMonitor object.
    public static func createForCaptureMonitoring() throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForCaptureMonitoring())
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for audio capture streams with the specified MediaCategory.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Returns: An AudioStateMonitor object.
    public static func createForCaptureMonitoring(_ category: WindowsMediaCapture_MediaCategory) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForCaptureMonitoringWithCategory(category))
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for audio capture streams with the specified MediaCategory and  AudioDeviceRole.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Parameter role: A value from the AudioDeviceRole enumeration indicating the device role of audio streams that will be monitored. The system may use the device role of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Returns: An AudioStateMonitor object.
    public static func createForCaptureMonitoring(_ category: WindowsMediaCapture_MediaCategory, _ role: WindowsMediaDevices_AudioDeviceRole) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForCaptureMonitoringWithCategoryAndDeviceRole(category, role))
    }

    /// Initializes a new instance of the AudioStateMonitor class that monitors the sound level for audio capture streams with the specified MediaCategory that are using the specified audio device.
    /// - Parameter category: A value from the MediaCategory enumeration indicating the categories of audio streams that will be monitored. The system may use the category of an audio stream to determine if it should be muted or have its volume lowered in response to a particular system event.
    /// - Parameter deviceId: A string containing the unique identifier of a audio device for which associated audio streams will be monitored.
    /// - Returns: An AudioStateMonitor object.
    public static func createForCaptureMonitoringWithCategoryAndDeviceId(_ category: WindowsMediaCapture_MediaCategory, _ deviceId: Swift.String) throws -> WindowsMediaAudio_AudioStateMonitor {
        try COM.NullResult.unwrap(_iaudioStateMonitorStatics.createForCaptureMonitoringWithCategoryAndDeviceId(category, deviceId))
    }

    // MARK: Implementation details

    private static var _iaudioStateMonitorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioStateMonitorStatics>? = nil

    internal static var _iaudioStateMonitorStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioStateMonitorStatics> {
        get throws {
            try _iaudioStateMonitorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Audio.AudioStateMonitor", id: CWinRT.SWRT_WindowsMediaAudio_IAudioStateMonitorStatics.iid)
            }
        }
    }
}