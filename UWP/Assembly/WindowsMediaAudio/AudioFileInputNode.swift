// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a node in an audio graph node that inputs audio data into the graph from an audio file.
public final class WindowsMediaAudio_AudioFileInputNode: WindowsRuntime.WinRTImport<WindowsMediaAudio_AudioFileInputNodeProjection>, WindowsMediaAudio_IAudioInputNodeProtocol, WindowsMediaAudio_IAudioNodeProtocol, WindowsFoundation_IClosableProtocol, WindowsMediaAudio_IAudioInputNode2Protocol {
    // MARK: Windows.Media.Audio.IAudioFileInputNode members

    /// Gets the duration for the audio input file.
    /// - Returns: A value indicating the duration for the audio input file.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets the end time for the audio file input node, which determines when playback of the media content ends.
    /// - Returns: A value indicating the end time.
    public var endTime: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_EndTime()
        }
    }

    /// Gets or sets the end time for the audio file input node, which determines when playback of the media content ends.
    /// - Returns: A value indicating the end time.
    public func endTime(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_EndTime(value)
    }

    /// Gets or sets the loop count of the audio file input node.
    /// - Returns: A reference to an integer representing the loop count.
    public var loopCount: Swift.Int32? {
        get throws {
            try _interop.get_LoopCount()
        }
    }

    /// Gets or sets the loop count of the audio file input node.
    /// - Returns: A reference to an integer representing the loop count.
    public func loopCount(_ value: Swift.Int32?) throws {
        try _interop.put_LoopCount(value)
    }

    /// Gets or sets the playback speed factor for the audio file input node.
    /// - Returns: A value indicating the playback speed factor.
    public var playbackSpeedFactor: Swift.Double {
        get throws {
            try _interop.get_PlaybackSpeedFactor()
        }
    }

    /// Gets or sets the playback speed factor for the audio file input node.
    /// - Returns: A value indicating the playback speed factor.
    public func playbackSpeedFactor(_ value: Swift.Double) throws {
        try _interop.put_PlaybackSpeedFactor(value)
    }

    /// Gets the playback position of the audio file input node.
    /// - Returns: The current playback position within the audio file, in seconds.
    public var position: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets the source audio file for the audio file input node.
    /// - Returns: A StorageFile object representing the source audio file.
    public var sourceFile: WindowsStorage_StorageFile {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SourceFile())
        }
    }

    /// Gets or sets the start time for the audio file input node.
    /// - Returns: A value indicating the start time.
    public var startTime: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_StartTime()
        }
    }

    /// Gets or sets the start time for the audio file input node.
    /// - Returns: A value indicating the start time.
    public func startTime(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_StartTime(value)
    }

    /// Occurs when the playback position reaches the end of the audio file or the position specified with the EndTime property.
    public func fileCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaAudio_AudioFileInputNode?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_FileCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: fileCompleted)
    }

    public func fileCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_FileCompleted(token)
    }

    /// Moves the playback position of the node to the specified time within the audio input file.
    /// - Parameter position: A value indicating the position to which the node should seek.
    public func seek(_ position: WindowsFoundation_TimeSpan) throws {
        try _interop.seek(position)
    }

    // MARK: Windows.Media.Audio.IAudioInputNode members

    /// Gets the list of outgoing connections from the audio file input node to other nodes in the audio graph.
    /// - Returns: A collection of AudioGraphConnection objects representing the supported connections.
    public var outgoingConnections: WindowsFoundationCollections_IVectorView<WindowsMediaAudio_AudioGraphConnection?> {
        get throws {
            try COM.NullResult.unwrap(_iaudioInputNode.get_OutgoingConnections())
        }
    }

    /// Adds an outgoing connection to the audio file input node.
    /// - Parameter destination: The destination node for the connection.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _iaudioInputNode.addOutgoingConnection(destination)
    }

    /// Adds an outgoing connection with gain to the audio file input node.
    /// - Parameter destination: The destination node for the connection.
    /// - Parameter gain: A value indicating the gain associated with the connection. This is a scalar multiplier of the audio signal. The default value is 1.0.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?, _ gain: Swift.Double) throws {
        try _iaudioInputNode.addOutgoingConnectionWithGain(destination, gain)
    }

    /// Removes the outgoing connection from the audio file input node to the specified node.
    /// - Parameter destination: The audio node for which the outgoing connection is removed.
    public func removeOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _iaudioInputNode.removeOutgoingConnection(destination)
    }

    // MARK: Windows.Media.Audio.IAudioNode members

    /// Gets or sets a value indicating if the audio file input node consumes input.
    /// - Returns: True if the audio file input node consumes input, and false otherwise.
    public var consumeInput: Swift.Bool {
        get throws {
            try _iaudioNode.get_ConsumeInput()
        }
    }

    /// Gets or sets a value indicating if the audio file input node consumes input.
    /// - Returns: True if the audio file input node consumes input, and false otherwise.
    public func consumeInput(_ value: Swift.Bool) throws {
        try _iaudioNode.put_ConsumeInput(value)
    }

    /// Gets the list of effect definitions for the audio file input node. The effects in the list process audio data that flows through the node in the order in which they appear in the list.
    /// - Returns: The list of effect definitions for the node.
    public var effectDefinitions: WindowsFoundationCollections_IVector<WindowsMediaEffects_IAudioEffectDefinition?> {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EffectDefinitions())
        }
    }

    /// Gets the encoding properties for the audio file input node.
    /// - Returns: The encoding properties for the node.
    public var encodingProperties: WindowsMediaMediaProperties_AudioEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EncodingProperties())
        }
    }

    /// Gets or sets the outgoing gain for the audio file input node.
    /// - Returns: The outgoing gain value.
    public var outgoingGain: Swift.Double {
        get throws {
            try _iaudioNode.get_OutgoingGain()
        }
    }

    /// Gets or sets the outgoing gain for the audio file input node.
    /// - Returns: The outgoing gain value.
    public func outgoingGain(_ value: Swift.Double) throws {
        try _iaudioNode.put_OutgoingGain(value)
    }

    /// Starts the audio file input node.
    public func start() throws {
        try _iaudioNode.start()
    }

    /// Stops the audio file input node.
    public func stop() throws {
        try _iaudioNode.stop()
    }

    /// Resets the audio file input node.
    public func reset() throws {
        try _iaudioNode.reset()
    }

    /// Disables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to disable.
    public func disableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.disableEffectsByDefinition(definition)
    }

    /// Enables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to enable.
    public func enableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.enableEffectsByDefinition(definition)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the audio file input node and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Audio.IAudioInputNode2 members

    /// Gets the AudioNodeEmitter that describes the position and other physical characteristics of the emitter from which the AudioFileInputNode audio is emitted when spatial audio processing is used.
    /// - Returns: The spatial audio emitter associated with the AudioFileInputNode.
    public var emitter: WindowsMediaAudio_AudioNodeEmitter {
        get throws {
            try COM.NullResult.unwrap(_iaudioInputNode2.get_Emitter())
        }
    }

    // MARK: Implementation details

    private var _iaudioInputNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode>? = nil

    internal var _iaudioInputNode: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode> {
        get throws {
            try _iaudioInputNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode.self)
            }
        }
    }

    private var _iaudioNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode>? = nil

    internal var _iaudioNode: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode> {
        get throws {
            try _iaudioNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioNode.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioNode.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iaudioInputNode2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2>? = nil

    internal var _iaudioInputNode2: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2> {
        get throws {
            try _iaudioInputNode2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.self)
            }
        }
    }

    deinit {
        _iaudioInputNode_storage?.release()
        _iaudioNode_storage?.release()
        _iclosable_storage?.release()
        _iaudioInputNode2_storage?.release()
    }
}