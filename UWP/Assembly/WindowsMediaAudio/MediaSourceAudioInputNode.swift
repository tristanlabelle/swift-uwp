// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a node in an audio graph that inputs audio data into the graph from a MediaSource object.
public final class WindowsMediaAudio_MediaSourceAudioInputNode: WindowsRuntime.WinRTImport<WindowsMediaAudio_MediaSourceAudioInputNodeProjection>, WindowsMediaAudio_IAudioInputNode2Protocol, WindowsMediaAudio_IAudioInputNodeProtocol, WindowsMediaAudio_IAudioNodeProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Audio.IMediaSourceAudioInputNode members

    /// Gets the duration for the media content represented by the MediaSource associated with the node.
    /// - Returns: A value indicating the duration for the audio input file media content.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets or sets the end time for the **MediaSource** input node, which determines when playback of the media content ends.
    /// - Returns: A value indicating the end time.
    public var endTime: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_EndTime()
        }
    }

    /// Gets or sets the end time for the **MediaSource** input node, which determines when playback of the media content ends.
    /// - Returns: A value indicating the end time.
    public func endTime(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_EndTime(value)
    }

    /// Gets or sets the loop count of the **MediaSource** input node.
    /// - Returns: A reference to an integer representing the loop count.
    public var loopCount: Swift.Int32? {
        get throws {
            try _interop.get_LoopCount()
        }
    }

    /// Gets or sets the loop count of the **MediaSource** input node.
    /// - Returns: A reference to an integer representing the loop count.
    public func loopCount(_ value: Swift.Int32?) throws {
        try _interop.put_LoopCount(value)
    }

    /// Gets the **MediaSource** associated with the audio input node.
    /// - Returns: The **MediaSource** associated with the audio input node.
    public var mediaSource: WindowsMediaCore_MediaSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaSource())
        }
    }

    /// Gets or sets the playback speed factor for the **MediaSource** audio input node.
    /// - Returns: A value indicating the playback speed factor.
    public var playbackSpeedFactor: Swift.Double {
        get throws {
            try _interop.get_PlaybackSpeedFactor()
        }
    }

    /// Gets or sets the playback speed factor for the **MediaSource** audio input node.
    /// - Returns: A value indicating the playback speed factor.
    public func playbackSpeedFactor(_ value: Swift.Double) throws {
        try _interop.put_PlaybackSpeedFactor(value)
    }

    /// Gets the playback position of the **MediaSource** input node.
    /// - Returns: The current playback position within the media content, in seconds.
    public var position: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets or sets the start time for the **MediaSource** input node.
    /// - Returns: A value indicating the start time.
    public var startTime: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _interop.get_StartTime()
        }
    }

    /// Gets or sets the start time for the **MediaSource** input node.
    /// - Returns: A value indicating the start time.
    public func startTime(_ value: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>?) throws {
        try _interop.put_StartTime(value)
    }

    /// Occurs when the playback position reaches the end of the media content or the position specified with the EndTime property.
    public func mediaSourceCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaAudio_MediaSourceAudioInputNode?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaSourceCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaSourceCompleted)
    }

    public func mediaSourceCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaSourceCompleted(token)
    }

    /// Moves the playback position of the node to the specified time within the media content.
    /// - Parameter position: A value indicating the position to which the node should seek.
    public func seek(_ position: WindowsFoundation_TimeSpan) throws {
        try _interop.seek(position)
    }

    // MARK: Windows.Media.Audio.IAudioInputNode2 members

    /// Gets the AudioNodeEmitter that describes the position and other physical characteristics of the emitter from which the AudioSubmixNode output audio is emitted when spatial audio processing is used.
    /// - Returns: The spatial audio emitter associated with the **MediaSource** audio input node.
    public var emitter: WindowsMediaAudio_AudioNodeEmitter {
        get throws {
            try COM.NullResult.unwrap(_iaudioInputNode2.get_Emitter())
        }
    }

    // MARK: Windows.Media.Audio.IAudioInputNode members

    /// Gets the list of outgoing connections from the **MediaSource** input node to other nodes in the audio graph.
    /// - Returns: A collection of AudioGraphConnection objects representing the supported connections.
    public var outgoingConnections: WindowsFoundationCollections_IVectorView<WindowsMediaAudio_AudioGraphConnection?> {
        get throws {
            try COM.NullResult.unwrap(_iaudioInputNode.get_OutgoingConnections())
        }
    }

    /// Adds an outgoing connection with gain to the **MediaSource** input node.
    /// - Parameter destination: The destination node for the connection.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _iaudioInputNode.addOutgoingConnection(destination)
    }

    /// Adds an outgoing connection with gain to the **MediaSource** input node.
    /// - Parameter destination: The destination node for the connection.
    /// - Parameter gain: A value indicating the gain associated with the connection. This is a scalar multiplier of the audio signal. The default value is 1.0.
    public func addOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?, _ gain: Swift.Double) throws {
        try _iaudioInputNode.addOutgoingConnectionWithGain(destination, gain)
    }

    /// Removes the outgoing connection from the **MediaSource** audio input node to the specified node.
    /// - Parameter destination: The audio node for which the outgoing connection is removed.
    public func removeOutgoingConnection(_ destination: WindowsMediaAudio_IAudioNode?) throws {
        try _iaudioInputNode.removeOutgoingConnection(destination)
    }

    // MARK: Windows.Media.Audio.IAudioNode members

    /// Gets or sets a value indicating if the **MediaSource** input node consumes input.
    /// - Returns: True if the node consumes input; otherwise, false.
    public var consumeInput: Swift.Bool {
        get throws {
            try _iaudioNode.get_ConsumeInput()
        }
    }

    /// Gets or sets a value indicating if the **MediaSource** input node consumes input.
    /// - Returns: True if the node consumes input; otherwise, false.
    public func consumeInput(_ value: Swift.Bool) throws {
        try _iaudioNode.put_ConsumeInput(value)
    }

    /// Gets the list of effect definitions for the **MediaSource** node. The effects in the list process audio data that flows through the node in the order in which they appear in the list.
    /// - Returns: The list of effect definitions for the node.
    public var effectDefinitions: WindowsFoundationCollections_IVector<WindowsMediaEffects_IAudioEffectDefinition?> {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EffectDefinitions())
        }
    }

    /// Gets the encoding properties for the audio device submix node.
    /// - Returns: The encoding properties for the audio device submix node.
    public var encodingProperties: WindowsMediaMediaProperties_AudioEncodingProperties {
        get throws {
            try COM.NullResult.unwrap(_iaudioNode.get_EncodingProperties())
        }
    }

    /// Gets or sets the outgoing gain for the **MediaSource** audio input node.
    /// - Returns: The outgoing gain value.
    public var outgoingGain: Swift.Double {
        get throws {
            try _iaudioNode.get_OutgoingGain()
        }
    }

    /// Gets or sets the outgoing gain for the **MediaSource** audio input node.
    /// - Returns: The outgoing gain value.
    public func outgoingGain(_ value: Swift.Double) throws {
        try _iaudioNode.put_OutgoingGain(value)
    }

    /// Starts the **MediaSource** input node.
    public func start() throws {
        try _iaudioNode.start()
    }

    /// Stops the audio file output node.
    public func stop() throws {
        try _iaudioNode.stop()
    }

    /// Resets the **MediaSource** audio input node.
    public func reset() throws {
        try _iaudioNode.reset()
    }

    /// Disables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to disable.
    public func disableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.disableEffectsByDefinition(definition)
    }

    /// Enables all effects in the EffectDefinitions list with the specified effect definition.
    /// - Parameter definition: The effect definition of the effects to enable.
    public func enableEffectsByDefinition(_ definition: WindowsMediaEffects_IAudioEffectDefinition?) throws {
        try _iaudioNode.enableEffectsByDefinition(definition)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the **MediaSource** input node and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iaudioInputNode2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2>? = nil

    internal var _iaudioInputNode2: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2> {
        get throws {
            try _iaudioInputNode2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode2.self)
            }
        }
    }

    private var _iaudioInputNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode>? = nil

    internal var _iaudioInputNode: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode> {
        get throws {
            try _iaudioInputNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioInputNode.self)
            }
        }
    }

    private var _iaudioNode_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode>? = nil

    internal var _iaudioNode: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioNode> {
        get throws {
            try _iaudioNode_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaAudio_IAudioNode.iid).cast(to: CWinRT.SWRT_WindowsMediaAudio_IAudioNode.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iaudioInputNode2_storage?.release()
        _iaudioInputNode_storage?.release()
        _iaudioNode_storage?.release()
        _iclosable_storage?.release()
    }
}