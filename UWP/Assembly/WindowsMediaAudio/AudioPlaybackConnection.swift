// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a connection that allows a remote device to stream audio to a Windows device.
public final class WindowsMediaAudio_AudioPlaybackConnection: WindowsRuntime.WinRTImport<WindowsMediaAudio_AudioPlaybackConnectionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Audio.IAudioPlaybackConnection members

    /// Gets the unique device ID for the underlying device represented by the AudioPlaybackConnection.
    /// - Returns: The unique device ID for the underlying device represented by the **AudioPlaybackConnection**.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the current connection state of the AudioPlaybackConnection.
    /// - Returns: A member of the AudioPlaybackConnectionState enumeration, indicating the current connection state.
    public var state: WindowsMediaAudio_AudioPlaybackConnectionState {
        get throws {
            try _interop.get_State()
        }
    }

    /// Occurs when the connection state of the AudioPlaybackConnection changes.
    public func stateChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaAudio_AudioPlaybackConnection?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StateChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stateChanged)
    }

    public func stateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StateChanged(token)
    }

    /// Configures the system to allow connections from the remote audio source.
    public func start() throws {
        try _interop.start()
    }

    /// Asynchronously configures the system to allow connections from the remote audio source.
    /// - Returns: An asynchronous operation.
    public func startAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Attempts to connect the underlying device. If successful, this causes any audio that is playing on the remote device to be heard on the local device.
    /// - Returns: An AudioPlaybackConnectionOpenResult object. The Status property of this object indicates the result of the connection attempt.
    public func `open`() throws -> WindowsMediaAudio_AudioPlaybackConnectionOpenResult {
        try COM.NullResult.unwrap(_interop.open())
    }

    /// Asynchronously attempts to connect the underlying device. If successful, this causes any audio that is playing on the remote device to be heard on the local device.
    /// - Returns: Upon completion, returns an AudioPlaybackConnectionOpenResult object. The Status property of this object indicates the result of the connection attempt.
    public func openAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsMediaAudio_AudioPlaybackConnectionOpenResult?> {
        try COM.NullResult.unwrap(_interop.openAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the connection represented by the AudioPlaybackConnection object.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Audio.IAudioPlaybackConnectionStatics members

    /// Gets an Advanced Query Syntax (AQS) string for that can be used to find devices for which an AudioPlaybackConnection can be created.
    /// - Returns: An AQS string.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iaudioPlaybackConnectionStatics.getDeviceSelector()
    }

    /// Attempts to create an AudioPlaybackConnection from the specified device ID.
    /// - Parameter id: The identifier for the device for which the connection should be created.
    /// - Returns: If successful, returns an AudioPlaybackConnection. If the specified device does not have support for audio streaming, the return value is null.
    public static func tryCreateFromId(_ id: Swift.String) throws -> WindowsMediaAudio_AudioPlaybackConnection {
        try COM.NullResult.unwrap(_iaudioPlaybackConnectionStatics.tryCreateFromId(id))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iaudioPlaybackConnectionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioPlaybackConnectionStatics>? = nil

    internal static var _iaudioPlaybackConnectionStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaAudio_IAudioPlaybackConnectionStatics> {
        get throws {
            try _iaudioPlaybackConnectionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Audio.AudioPlaybackConnection", id: CWinRT.SWRT_WindowsMediaAudio_IAudioPlaybackConnectionStatics.iid)
            }
        }
    }
}