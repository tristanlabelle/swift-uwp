// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Wi-Fi Direct Services (WFDS) session.
public final class WindowsDevicesWiFiDirectServices_WiFiDirectServiceSession: WindowsRuntime.WinRTImport<WindowsDevicesWiFiDirectServices_WiFiDirectServiceSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceSession members

    /// Gets the advertisement ID for the session.
    /// - Returns: The advertisement ID.
    public var advertisementId: Swift.UInt32 {
        get throws {
            try _interop.get_AdvertisementId()
        }
    }

    /// Gets the error status of the session.
    /// - Returns: An enumeration value giving session error status.
    public var errorStatus: WindowsDevicesWiFiDirectServices_WiFiDirectServiceSessionErrorStatus {
        get throws {
            try _interop.get_ErrorStatus()
        }
    }

    /// Gets the service address for this session.
    /// - Returns: The service address.
    public var serviceAddress: Swift.String {
        get throws {
            try _interop.get_ServiceAddress()
        }
    }

    /// Gets the service name of the advertiser service involved in the session.
    /// - Returns: The service name of the advertiser service.
    public var serviceName: Swift.String {
        get throws {
            try _interop.get_ServiceName()
        }
    }

    /// Gets the session address for the session.
    /// - Returns: The session address.
    public var sessionAddress: Swift.String {
        get throws {
            try _interop.get_SessionAddress()
        }
    }

    /// Gets the session ID.
    /// - Returns: A unique session identifier.
    public var sessionId: Swift.UInt32 {
        get throws {
            try _interop.get_SessionId()
        }
    }

    /// Gets the session status.
    /// - Returns: An enumeration value describing the current session status.
    public var status: WindowsDevicesWiFiDirectServices_WiFiDirectServiceSessionStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Event raised when a new remote port is added to the session. Your event handler should respond by establishing the appropriate socket connection to the new remote port.
    public func remotePortAdded(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFiDirectServices_WiFiDirectServiceSession?, WindowsDevicesWiFiDirectServices_WiFiDirectServiceRemotePortAddedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RemotePortAdded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: remotePortAdded)
    }

    public func remotePortAdded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RemotePortAdded(token)
    }

    /// Event raised when the session status changes.
    public func sessionStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFiDirectServices_WiFiDirectServiceSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SessionStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sessionStatusChanged)
    }

    public func sessionStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SessionStatusChanged(token)
    }

    /// Gets a list of connection endpoint pairs for the session. Your code uses IVectorView operations to enumerate the endpoint pairs in the list.
    /// - Returns: An immutable snapshot list of endpoint pairs involved in the session.
    public func getConnectionEndpointPairs() throws -> WindowsFoundationCollections_IVectorView<WindowsNetworking_EndpointPair?> {
        try COM.NullResult.unwrap(_interop.getConnectionEndpointPairs())
    }

    /// Adds a StreamSocketListener to the session. Your code creates the StreamSocketListener before calling this method. Associating a socket to the session causes port information to be sent to the remote device(s) in the session. (In terms of this API, a RemotePortAdded event is raised on each remote device in the session, specifying the TCP protocol.) A remote device can use that information to open a socket and connect back to the local machine.
    /// - Parameter value: The StreamSocketListener instance to be associated with the session.
    /// - Returns: An asynchronous association action. Returns on successful completion of the association.
    public func addStreamSocketListenerAsync(_ value: WindowsNetworkingSockets_StreamSocketListener?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.addStreamSocketListenerAsync(value))
    }

    /// Adds a DatagramSocket to the session. Your code creates the DatagramSocket before calling this method. Associating a socket to the session causes port information to be sent to the remote device(s) in the session. (In terms of this API, a RemotePortAdded event is raised on each remote device in the session, specifying the UDP protocol.) A remote device can use that information to open a socket and connect back to the local machine.
    /// - Parameter value: The DatagramSocket instance to associate with this session.
    /// - Returns: An asynchronous association action. Returns on successful completion of the association.
    public func addDatagramSocketAsync(_ value: WindowsNetworkingSockets_DatagramSocket?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.addDatagramSocketAsync(value))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the session.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }
}