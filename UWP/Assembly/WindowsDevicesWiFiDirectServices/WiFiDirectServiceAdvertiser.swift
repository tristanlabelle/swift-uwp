// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Service Advertiser. This class is used by code on a device that advertises Wi-Fi Direct Services, to advertise the service.
public final class WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertiser: WindowsRuntime.WinRTImport<WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertiserProjection> {
    // MARK: Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceAdvertiserFactory members

    public convenience init(_ serviceName: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwiFiDirectServiceAdvertiserFactory.createWiFiDirectServiceAdvertiser(serviceName)))
    }

    // MARK: Windows.Devices.WiFiDirect.Services.IWiFiDirectServiceAdvertiser members

    /// Gets a value that describes the current status of the advertisement.
    /// - Returns: An enumeration value that describes current status.
    public var advertisementStatus: WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertisementStatus {
        get throws {
            try _interop.get_AdvertisementStatus()
        }
    }

    /// Gets or sets the Auto Accept property for this service advertisement.
    /// - Returns: When true, then the service automatically accepts all requests from service seekers to establish a session. If this value is false, then the service must actively accept a session request when the SessionRequested event is raised.
    public var autoAcceptSession: Swift.Bool {
        get throws {
            try _interop.get_AutoAcceptSession()
        }
    }

    /// Gets or sets the Auto Accept property for this service advertisement.
    /// - Returns: When true, then the service automatically accepts all requests from service seekers to establish a session. If this value is false, then the service must actively accept a session request when the SessionRequested event is raised.
    public func autoAcceptSession(_ value: Swift.Bool) throws {
        try _interop.put_AutoAcceptSession(value)
    }

    /// Gets or sets a custom service status code. Only valid if the ServiceStatus property value is **Custom**.
    /// - Returns: If ServiceStatus is set to **Custom**, this property is the custom status value. Custom values must be in the range 2 - 255.
    public var customServiceStatusCode: Swift.UInt32 {
        get throws {
            try _interop.get_CustomServiceStatusCode()
        }
    }

    /// Gets or sets a custom service status code. Only valid if the ServiceStatus property value is **Custom**.
    /// - Returns: If ServiceStatus is set to **Custom**, this property is the custom status value. Custom values must be in the range 2 - 255.
    public func customServiceStatusCode(_ value: Swift.UInt32) throws {
        try _interop.put_CustomServiceStatusCode(value)
    }

    /// Gets or sets the service-specific information that is passed to a session requester when establishing a session will not be completed immediately, as when, for example, the service is waiting for user input to complete the request. A requester should implement a 120 second timeout when its request is deferred.
    /// - Returns: The information to be sent to the session requester. Format is service-specific, and total size cannot exceed 144 bytes.
    public var deferredSessionInfo: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeferredSessionInfo())
        }
    }

    /// Gets or sets the service-specific information that is passed to a session requester when establishing a session will not be completed immediately, as when, for example, the service is waiting for user input to complete the request. A requester should implement a 120 second timeout when its request is deferred.
    /// - Returns: The information to be sent to the session requester. Format is service-specific, and total size cannot exceed 144 bytes.
    public func deferredSessionInfo(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_DeferredSessionInfo(value)
    }

    /// Gets or sets a value indicating whether the service requires that it be the Wi-Fi Direct Peer to Peer (P2P) Group Owner.
    /// - Returns: If true, the service must be the Group Owner (GO) of the Peer to Peer (P2P) connection between seeker and service. If false, the service will accept connections whether it is the GO or not.
    public var preferGroupOwnerMode: Swift.Bool {
        get throws {
            try _interop.get_PreferGroupOwnerMode()
        }
    }

    /// Gets or sets a value indicating whether the service requires that it be the Wi-Fi Direct Peer to Peer (P2P) Group Owner.
    /// - Returns: If true, the service must be the Group Owner (GO) of the Peer to Peer (P2P) connection between seeker and service. If false, the service will accept connections whether it is the GO or not.
    public func preferGroupOwnerMode(_ value: Swift.Bool) throws {
        try _interop.put_PreferGroupOwnerMode(value)
    }

    /// Gets a list (that implements the IVector interface) of preferred session configuration methods. Your code uses IVector operations on the list to add or remove elements from the list.
    /// - Returns: An ordered list of enumeration values indicating preferred configuration methods. The earlier a configuration method appears in the list, the higher the preference for using that method when configuring sessions with this advertiser.
    public var preferredConfigurationMethods: WindowsFoundationCollections_IVector<WindowsDevicesWiFiDirectServices_WiFiDirectServiceConfigurationMethod> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PreferredConfigurationMethods())
        }
    }

    /// Gets a specific error code when AdvertisementStatus is **Aborted**.
    /// - Returns: An enumeration value that gives a more specific cause for AdvertisementStatus being **Aborted**.
    public var serviceError: WindowsDevicesWiFiDirectServices_WiFiDirectServiceError {
        get throws {
            try _interop.get_ServiceError()
        }
    }

    /// Gets or sets the service information blob. The format and contents of the blob are determined by the individual service, and are intended to be used by Seekers during service discovery.
    /// - Returns: The service information blob.
    public var serviceInfo: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServiceInfo())
        }
    }

    /// Gets or sets the service information blob. The format and contents of the blob are determined by the individual service, and are intended to be used by Seekers during service discovery.
    /// - Returns: The service information blob.
    public func serviceInfo(_ value: WindowsStorageStreams_IBuffer?) throws {
        try _interop.put_ServiceInfo(value)
    }

    /// Gets the service name.
    /// - Returns: The service name.
    public var serviceName: Swift.String {
        get throws {
            try _interop.get_ServiceName()
        }
    }

    /// Gets a list of service name prefixes that should match this service when a seeker is using prefix searching. Your code uses IVector methods to add or remove elements from the list.
    /// - Returns: The list of prefixes. Prefix values
    public var serviceNamePrefixes: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ServiceNamePrefixes())
        }
    }

    /// Gets or sets the service status.
    /// - Returns: An enumeration value that corresponds to the service status. Note that if this value is **Custom**, then the CustomServiceStatusCode property gives the actual custom status code value.
    public var serviceStatus: WindowsDevicesWiFiDirectServices_WiFiDirectServiceStatus {
        get throws {
            try _interop.get_ServiceStatus()
        }
    }

    /// Gets or sets the service status.
    /// - Returns: An enumeration value that corresponds to the service status. Note that if this value is **Custom**, then the CustomServiceStatusCode property gives the actual custom status code value.
    public func serviceStatus(_ value: WindowsDevicesWiFiDirectServices_WiFiDirectServiceStatus) throws {
        try _interop.put_ServiceStatus(value)
    }

    /// Event raised when the AdvertisementStatus property value changes.
    public func advertisementStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertiser?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AdvertisementStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: advertisementStatusChanged)
    }

    public func advertisementStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AdvertisementStatusChanged(token)
    }

    /// Event raised when the service has automatically accepted a session request. Your event handler should establish socket connections for the endpoint pairs listed in the event arguments object.
    public func autoAcceptSessionConnected(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertiser?, WindowsDevicesWiFiDirectServices_WiFiDirectServiceAutoAcceptSessionConnectedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AutoAcceptSessionConnected(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: autoAcceptSessionConnected)
    }

    public func autoAcceptSessionConnected(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AutoAcceptSessionConnected(token)
    }

    /// Event raised when a Seeker has requested that a session be established with the service associated with this WiFiDirectServiceAdvertiser instance. To accept the request, call WiFiDirectServiceAdvertiser.ConnectAsync in your event handler.
    public func sessionRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesWiFiDirectServices_WiFiDirectServiceAdvertiser?, WindowsDevicesWiFiDirectServices_WiFiDirectServiceSessionRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SessionRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sessionRequested)
    }

    public func sessionRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SessionRequested(token)
    }

    /// Accepts a session request without requiring a PIN.
    /// - Parameter deviceInfo: Describes the device to be connected. Pass in the WiFiDirectServiceSessionRequestedEventArgs.DeviceInformation property value.
    /// - Returns: An asynchronous connection operation. On successful completion, returns an object that describes the session that has been created.
    public func connectAsync(_ deviceInfo: WindowsDevicesEnumeration_DeviceInformation?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFiDirectServices_WiFiDirectServiceSession?> {
        try COM.NullResult.unwrap(_interop.connectAsync(deviceInfo))
    }

    /// Accepts a session request by connecting with the given PIN.
    /// - Parameter deviceInfo: Describes the device to be connected. Pass in the WiFiDirectServiceSessionRequestedEventArgs.DeviceInformation property value.
    /// - Parameter pin: The PIN to be used to configure the session.
    /// - Returns: An asynchronous connection operation. On successful completion, returns an object that describes the session that has been created.
    public func connectAsync(_ deviceInfo: WindowsDevicesEnumeration_DeviceInformation?, _ pin: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesWiFiDirectServices_WiFiDirectServiceSession?> {
        try COM.NullResult.unwrap(_interop.connectAsyncWithPin(deviceInfo, pin))
    }

    /// Starts advertising the service, using current property values to set the parameters of the advertisement.
    public func start() throws {
        try _interop.start()
    }

    /// Stops advertising the service. This does not affect existing sessions that are connected to the service.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Implementation details

    private static var _iwiFiDirectServiceAdvertiserFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFiDirectServices_IWiFiDirectServiceAdvertiserFactory>? = nil

    internal static var _iwiFiDirectServiceAdvertiserFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesWiFiDirectServices_IWiFiDirectServiceAdvertiserFactory> {
        get throws {
            try _iwiFiDirectServiceAdvertiserFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.WiFiDirect.Services.WiFiDirectServiceAdvertiser", id: CWinRT.SWRT_WindowsDevicesWiFiDirectServices_IWiFiDirectServiceAdvertiserFactory.iid)
            }
        }
    }
}