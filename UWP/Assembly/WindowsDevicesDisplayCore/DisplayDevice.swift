// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a context for creating and presenting content directly to the display driver. A **DisplayDevice** is analogous to a Direct3D device in the Direct3D API.
public final class WindowsDevicesDisplayCore_DisplayDevice: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayDeviceProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayDevice members

    /// Creates a DisplaySource object, which provides the ability to directly scan out/present to the DisplayTarget object or objects currently connected to this source.
    /// - Parameter target: An active DisplayTarget for which to create a display source.
    /// - Returns: A DisplaySource value.
    public func createScanoutSource(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws -> WindowsDevicesDisplayCore_DisplaySource {
        try COM.NullResult.unwrap(_interop.createScanoutSource(target))
    }

    /// Creates a primary surface (or just "primary") for use with the display controller. The resulting primary surface is compatible with a DisplayScanout, which is used for presenting content directly to the screen.
    /// - Parameter target: An active DisplayTarget, which is used to determine which source the primary will be optimized for.
    /// - Parameter desc: A description of the primary surface to create, such as width, height, and pixel format.
    /// - Returns: A DisplaySurface value.
    public func createPrimary(_ target: WindowsDevicesDisplayCore_DisplayTarget?, _ desc: WindowsDevicesDisplayCore_DisplayPrimaryDescription?) throws -> WindowsDevicesDisplayCore_DisplaySurface {
        try COM.NullResult.unwrap(_interop.createPrimary(target, desc))
    }

    /// Creates a DisplayTaskPool, which can create and execute DisplayTask objects on this DisplayDevice.
    /// - Returns: A DisplayTaskPool value.
    public func createTaskPool() throws -> WindowsDevicesDisplayCore_DisplayTaskPool {
        try COM.NullResult.unwrap(_interop.createTaskPool())
    }

    /// Creates a DisplayFence object that is automatically signaled by the system with an incrementing value at a certain time every vertical refresh cycle.
    /// - Parameter target: The DisplayTarget (which must be currently active) whose vertical refresh cycle will be used by the periodic fence.
    /// - Parameter offsetFromVBlank: A time offset from the display controller's V-blank interrupt to signal the fence every vertical refresh cycle.
    /// - Returns: A DisplayFence object.
    public func createPeriodicFence(_ target: WindowsDevicesDisplayCore_DisplayTarget?, _ offsetFromVBlank: WindowsFoundation_TimeSpan) throws -> WindowsDevicesDisplayCore_DisplayFence {
        try COM.NullResult.unwrap(_interop.createPeriodicFence(target, offsetFromVBlank))
    }

    /// Synchronously waits for the next V-blank interrupt to be fired by the primary DisplayTarget for a given DisplaySource.
    /// - Parameter source: The DisplaySource whose primary display target's V-blank interrupt to wait for.
    public func waitForVBlank(_ source: WindowsDevicesDisplayCore_DisplaySource?) throws {
        try _interop.waitForVBlank(source)
    }

    /// Creates a DisplayScanout object, which can be used to present a full-screen surface directly to the screen.
    /// - Parameter pSource: A DisplaySource to present full-screen content to.
    /// - Parameter pSurface: A full-screen primary surface.
    /// - Returns: A DisplayScanout value.
    public func createSimpleScanout(_ pSource: WindowsDevicesDisplayCore_DisplaySource?, _ pSurface: WindowsDevicesDisplayCore_DisplaySurface?, _ SubResourceIndex: Swift.UInt32, _ SyncInterval: Swift.UInt32) throws -> WindowsDevicesDisplayCore_DisplayScanout {
        try COM.NullResult.unwrap(_interop.createSimpleScanout(pSource, pSurface, SubResourceIndex, SyncInterval))
    }

    /// Retrieves a Boolean value indicating whether or not a given capability is supported by this DisplayDevice.
    /// - Parameter capability: The DisplayDeviceCapability to query about.
    /// - Returns: `true` if the capability is supported, otherwise `false`.
    public func isCapabilitySupported(_ capability: WindowsDevicesDisplayCore_DisplayDeviceCapability) throws -> Swift.Bool {
        try _interop.isCapabilitySupported(capability)
    }

    // MARK: Windows.Devices.Display.Core.IDisplayDevice2 members

    public func createSimpleScanoutWithDirtyRectsAndOptions(_ source: WindowsDevicesDisplayCore_DisplaySource?, _ surface: WindowsDevicesDisplayCore_DisplaySurface?, _ subresourceIndex: Swift.UInt32, _ syncInterval: Swift.UInt32, _ dirtyRects: WindowsFoundationCollections_IIterable<WindowsGraphics_RectInt32>?, _ options: WindowsDevicesDisplayCore_DisplayScanoutOptions) throws -> WindowsDevicesDisplayCore_DisplayScanout {
        try COM.NullResult.unwrap(_idisplayDevice2.createSimpleScanoutWithDirtyRectsAndOptions(source, surface, subresourceIndex, syncInterval, dirtyRects, options))
    }

    // MARK: Implementation details

    private var _idisplayDevice2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayDevice2>? = nil

    internal var _idisplayDevice2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayDevice2> {
        get throws {
            try _idisplayDevice2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayDevice2.iid).cast(to: CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayDevice2.self)
            }
        }
    }

    deinit {
        _idisplayDevice2_storage?.release()
    }
}