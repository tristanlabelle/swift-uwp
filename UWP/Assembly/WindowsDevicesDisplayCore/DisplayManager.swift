// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manages the ownership of a DisplayTarget object or objects, and provides methods to create DisplayState objects.
public final class WindowsDevicesDisplayCore_DisplayManager: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayManagerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.Display.Core.IDisplayManager members

    /// An event that is raised when system display hardware is added, removed, or modified. This can occur whenever the enumerations of DisplayAdapter objects and DisplayTarget objects are different, so we recommended that you subscribe to this event and call GetCurrentAdapters and/or GetCurrentTargets to determine what has changed.
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesDisplayCore_DisplayManager?, WindowsDevicesDisplayCore_DisplayManagerChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: changed)
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// An event raised whenever the current session's display stack is disabled, and when DisplayManager.Stop is called. You can disable the session display stack in several cases, such as switching Terminal Services sessions, or to recover from driver failures. We recommend that subscribers attempt to clean up when **Disabled** is invoked. Most display APIs will fail while the session display stack is disabled.
    public func disabled(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesDisplayCore_DisplayManager?, WindowsDevicesDisplayCore_DisplayManagerDisabledEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Disabled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: disabled)
    }

    public func disabled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Disabled(token)
    }

    /// An event raised whenever the current session's display stack is enabled, and when DisplayManager.Start is called. You can re-enable the session display stack in several cases, such as switching Terminal Services sessions, or to recover from driver failures. We recommend that subscribers re-enumerate all targets and state in this call, since the system display stack could be left in any state before this event is raised.
    public func enabled(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesDisplayCore_DisplayManager?, WindowsDevicesDisplayCore_DisplayManagerEnabledEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Enabled(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: enabled)
    }

    public func enabled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Enabled(token)
    }

    /// An event that is raised whenever a display path is failed or invalidated asynchronously by the system. This can be due to changing hardware bandwidth requirements, or due to driver failures.
    public func pathsFailedOrInvalidated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesDisplayCore_DisplayManager?, WindowsDevicesDisplayCore_DisplayManagerPathsFailedOrInvalidatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PathsFailedOrInvalidated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pathsFailedOrInvalidated)
    }

    public func pathsFailedOrInvalidated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PathsFailedOrInvalidated(token)
    }

    /// Enumerates the set of display targets currently present on the system.
    /// - Returns: A collection of DisplayTarget values.
    public func getCurrentTargets() throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesDisplayCore_DisplayTarget?> {
        try COM.NullResult.unwrap(_interop.getCurrentTargets())
    }

    /// Enumerates the set of display adapters currently present on the system.
    /// - Returns: A collection of DisplayAdapter values.
    public func getCurrentAdapters() throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesDisplayCore_DisplayAdapter?> {
        try COM.NullResult.unwrap(_interop.getCurrentAdapters())
    }

    /// Attempts to acquire exclusive ownership of a DisplayTarget.
    /// - Parameter target: The DisplayTarget to try to acquire exclusive ownership of.
    /// - Returns: A DisplayManagerResult value detailing the success or failure of acquiring the target.
    public func tryAcquireTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws -> WindowsDevicesDisplayCore_DisplayManagerResult {
        try _interop.tryAcquireTarget(target)
    }

    /// Releases ownership of the specified display target, allowing other components on the system to acquire ownership.
    /// - Parameter target: The DisplayTarget to release ownership of.
    public func releaseTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws {
        try _interop.releaseTarget(target)
    }

    /// Creates a read-only DisplayState object populated with the entire system display state for all targets.
    /// - Returns: A DisplayManagerResultWithState value.
    public func tryReadCurrentStateForAllTargets() throws -> WindowsDevicesDisplayCore_DisplayManagerResultWithState {
        try COM.NullResult.unwrap(_interop.tryReadCurrentStateForAllTargets())
    }

    public func tryAcquireTargetsAndReadCurrentState(_ targets: WindowsFoundationCollections_IIterable<WindowsDevicesDisplayCore_DisplayTarget?>?) throws -> WindowsDevicesDisplayCore_DisplayManagerResultWithState {
        try COM.NullResult.unwrap(_interop.tryAcquireTargetsAndReadCurrentState(targets))
    }

    public func tryAcquireTargetsAndCreateEmptyState(_ targets: WindowsFoundationCollections_IIterable<WindowsDevicesDisplayCore_DisplayTarget?>?) throws -> WindowsDevicesDisplayCore_DisplayManagerResultWithState {
        try COM.NullResult.unwrap(_interop.tryAcquireTargetsAndCreateEmptyState(targets))
    }

    public func tryAcquireTargetsAndCreateSubstate(_ existingState: WindowsDevicesDisplayCore_DisplayState?, _ targets: WindowsFoundationCollections_IIterable<WindowsDevicesDisplayCore_DisplayTarget?>?) throws -> WindowsDevicesDisplayCore_DisplayManagerResultWithState {
        try COM.NullResult.unwrap(_interop.tryAcquireTargetsAndCreateSubstate(existingState, targets))
    }

    /// Creates a DisplayDevice object for the given adapter. The **DisplayDevice** can be used to create and present full-screen content to targets on the given adapter.
    /// - Parameter adapter: The DisplayAdapter to create a DisplayDevice for.
    /// - Returns: A DisplayDevice value.
    public func createDisplayDevice(_ adapter: WindowsDevicesDisplayCore_DisplayAdapter?) throws -> WindowsDevicesDisplayCore_DisplayDevice {
        try COM.NullResult.unwrap(_interop.createDisplayDevice(adapter))
    }

    /// Starts listening for all DisplayManager events atomically. DisplayManager events are not raised until you call **Start**.
    public func start() throws {
        try _interop.start()
    }

    /// Stops listening to all DisplayManager events atomically, and triggers Disabled synchronously.
    public func stop() throws {
        try _interop.stop()
    }

    // MARK: Windows.Foundation.IClosable members

    /// Revokes ownership of all DisplayTarget objects owned by this DisplayManager instance.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.Display.Core.IDisplayManagerStatics members

    /// Creates a DisplayManager instance with the specified options.
    /// - Returns: A DisplayManager value.
    public static func create(_ options: WindowsDevicesDisplayCore_DisplayManagerOptions) throws -> WindowsDevicesDisplayCore_DisplayManager {
        try COM.NullResult.unwrap(_idisplayManagerStatics.create(options))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _idisplayManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayManagerStatics>? = nil

    internal static var _idisplayManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayManagerStatics> {
        get throws {
            try _idisplayManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Display.Core.DisplayManager", id: CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayManagerStatics.iid)
            }
        }
    }
}