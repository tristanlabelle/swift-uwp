// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides methods to allocate and execute tasks on a DisplayDevice.
public final class WindowsDevicesDisplayCore_DisplayTaskPool: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayTaskPoolProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayTaskPool members

    /// Creates a DisplayTask object.
    /// - Returns: A DisplayTask value.
    public func createTask() throws -> WindowsDevicesDisplayCore_DisplayTask {
        try COM.NullResult.unwrap(_interop.createTask())
    }

    /// Queues a DisplayTask for execution on the device. Tasks are executed asynchronously, so this method returns immediately.
    public func executeTask(_ task: WindowsDevicesDisplayCore_DisplayTask?) throws {
        try _interop.executeTask(task)
    }

    // MARK: Windows.Devices.Display.Core.IDisplayTaskPool2 members

    public func tryExecuteTask(_ task: WindowsDevicesDisplayCore_DisplayTask?) throws -> WindowsDevicesDisplayCore_DisplayTaskResult {
        try COM.NullResult.unwrap(_idisplayTaskPool2.tryExecuteTask(task))
    }

    // MARK: Implementation details

    private var _idisplayTaskPool2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayTaskPool2>? = nil

    internal var _idisplayTaskPool2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayTaskPool2> {
        get throws {
            try _idisplayTaskPool2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayTaskPool2.iid).cast(to: CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayTaskPool2.self)
            }
        }
    }

    deinit {
        _idisplayTaskPool2_storage?.release()
    }
}