// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a hardware display controller. This is typically a GPU (graphics processing unit).
public final class WindowsDevicesDisplayCore_DisplayAdapter: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayAdapterProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayAdapter members

    /// Gets the PnP device interface path for this adapter.
    /// - Returns: A string containing a PnP device interface path.
    public var deviceInterfacePath: Swift.String {
        get throws {
            try _interop.get_DeviceInterfacePath()
        }
    }

    /// Gets a numeric locally unique ID (LUID) that refers to the runtime instance of the display adapter. This ID changes if the adapter's PnP device is stopped/started, or if the system reboots.
    /// - Returns: A DisplayAdapterId containing a locally unique numeric ID (LUID) value.
    public var id: WindowsGraphics_DisplayAdapterId {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the PCI device ID of the adapter.
    /// - Returns: A value containing the PCI device ID of the adapter.
    public var pciDeviceId: Swift.UInt32 {
        get throws {
            try _interop.get_PciDeviceId()
        }
    }

    /// Gets the PCI revision number of the adapter.
    /// - Returns: A value containing the PCI revision number of the adapter.
    public var pciRevision: Swift.UInt32 {
        get throws {
            try _interop.get_PciRevision()
        }
    }

    /// Gets the PCI subsystem ID of the adapter.
    /// - Returns: A value containing the PCI subsystem ID of the adapter.
    public var pciSubSystemId: Swift.UInt32 {
        get throws {
            try _interop.get_PciSubSystemId()
        }
    }

    /// Gets the PCI vendor ID of the adapter.
    /// - Returns: A value containing the PCI vendor ID of the adapter.
    public var pciVendorId: Swift.UInt32 {
        get throws {
            try _interop.get_PciVendorId()
        }
    }

    /// Gets a collection containing the properties of the display adapter.
    /// - Returns: An IMapView, keyed by **Guid**, of objects representing properties.
    public var properties: WindowsFoundationCollections_IMapView<Foundation.UUID, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets the number (the count) of hardware sources exposed by the display driver. This is typically the maximum number of simultaneous paths allowed by the adapter.
    /// - Returns: A value containing the number (the count) of hardware sources exposed by the display driver.
    public var sourceCount: Swift.UInt32 {
        get throws {
            try _interop.get_SourceCount()
        }
    }

    // MARK: Windows.Devices.Display.Core.IDisplayAdapterStatics members

    /// Retrieves a DisplayAdapter for the given display adapter ID, if the adapter still exists on the system. This method throws an exception if the specified adapter cannot be found, or if it is no longer present on the system.
    /// - Parameter id: The DisplayAdapterId identifying the display adapter to retrieve. The identifier is a locally unique numeric ID (LUID) value.
    /// - Returns: A DisplayAdapter object representing the specified adapter.
    public static func fromId(_ id: WindowsGraphics_DisplayAdapterId) throws -> WindowsDevicesDisplayCore_DisplayAdapter {
        try COM.NullResult.unwrap(_idisplayAdapterStatics.fromId(id))
    }

    // MARK: Implementation details

    private static var _idisplayAdapterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayAdapterStatics>? = nil

    internal static var _idisplayAdapterStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayAdapterStatics> {
        get throws {
            try _idisplayAdapterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Display.Core.DisplayAdapter", id: CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayAdapterStatics.iid)
            }
        }
    }
}