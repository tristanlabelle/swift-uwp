// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a slice in time of a logical "target" for the display pipeline. This is typically analogous to a physical connector on a GPU, such as an HDMI port, but it can be a virtual target representing daisy-chained DisplayPort targets.
public final class WindowsDevicesDisplayCore_DisplayTarget: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayTargetProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayTarget members

    /// Gets the adapter that enumerates this DisplayTarget.
    /// - Returns: The DisplayAdapter that enumerates this DisplayTarget.
    public var adapter: WindowsDevicesDisplayCore_DisplayAdapter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Adapter())
        }
    }

    /// Gets a driver-defined identifier for this target that uniquely identifies the connector across device starts and reboots. Note that this identifier is only unique within its adapter, and does not refer to the connected monitor at all.
    /// - Returns: The driver-defined identifier for this target.
    public var adapterRelativeId: Swift.UInt32 {
        get throws {
            try _interop.get_AdapterRelativeId()
        }
    }

    /// Gets the PnP device interface of any monitor connected to the target when the object was created, or `null` if no monitor was connected.
    /// - Returns: The PnP device interface of any monitor connected to the target when the object was created, or `null` if no monitor was connected.
    public var deviceInterfacePath: Swift.String {
        get throws {
            try _interop.get_DeviceInterfacePath()
        }
    }

    /// Gets a Boolean value indicating whether a monitor was connected to this DisplayTarget when it was created.
    /// - Returns: `true` if a monitor was connected to this DisplayTarget when it was created, otherwise `false`.
    public var isConnected: Swift.Bool {
        get throws {
            try _interop.get_IsConnected()
        }
    }

    /// Gets a value indicating whether the system display state has changed since this DisplayTarget was created.
    /// - Returns: `true` if the system display state has changed since this DisplayTarget was created, otherwise `false`.
    public var isStale: Swift.Bool {
        get throws {
            try _interop.get_IsStale()
        }
    }

    /// Returns a Boolean value indicating whether this target supports virtual modes.
    /// - Returns: `true` if this target supports virtual modes, otherwise `false`.
    public var isVirtualModeEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsVirtualModeEnabled()
        }
    }

    /// Returns a Boolean value indicating whether this target supports virtual/software clone.
    /// - Returns: `true` if this target supports virtual/software clone, otherwise `false`.
    public var isVirtualTopologyEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsVirtualTopologyEnabled()
        }
    }

    /// Gets a value representing how a monitor connected to the target is virtually persisted when the hardware no longer reports any connected monitor.
    /// - Returns: A DisplayTargetPersistence value.
    public var monitorPersistence: WindowsDevicesDisplayCore_DisplayTargetPersistence {
        get throws {
            try _interop.get_MonitorPersistence()
        }
    }

    /// Reserved for future use.
    public var properties: WindowsFoundationCollections_IMapView<Foundation.UUID, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets a value representing a stable monitor identifier.
    /// - Returns: A string containing the identifier.
    public var stableMonitorId: Swift.String {
        get throws {
            try _interop.get_StableMonitorId()
        }
    }

    /// Gets a value representing the usage kind.
    /// - Returns: A DisplayMonitorUsageKind value.
    public var usageKind: WindowsDevicesDisplay_DisplayMonitorUsageKind {
        get throws {
            try _interop.get_UsageKind()
        }
    }

    /// Tries to retrieve an object describing the monitor currently connected to this DisplayTarget. This method can fail or return a different monitor than the properties on the **DisplayTarget** describe if monitors have been plugged or unplugged from the **DisplayTarget** since the **DisplayTarget** object was created. **IsStale** returns true if the monitor has changed since the **DisplayTarget** was created.
    public func tryGetMonitor() throws -> WindowsDevicesDisplay_DisplayMonitor {
        try COM.NullResult.unwrap(_interop.tryGetMonitor())
    }

    /// Determines whether this target object refers to the same underlying hardware target as another target object, by comparing the **Adapter** and the **AdapterRelativeId** properties. Since new DisplayTarget objects are created on each call to GetCurrentTargets, this method can be used to match previously discovered targets to newly created targets.
    public func isSame(_ otherTarget: WindowsDevicesDisplayCore_DisplayTarget?) throws -> Swift.Bool {
        try _interop.isSame(otherTarget)
    }

    /// Determines whether all properties of the target are equivalent to another target, indicating that there has been no change to the target.
    public func isEqual(_ otherTarget: WindowsDevicesDisplayCore_DisplayTarget?) throws -> Swift.Bool {
        try _interop.isEqual(otherTarget)
    }

    // MARK: Implementation details
}