// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Describes valid combinations of properties for a DisplayPath. The property values on this object can be set on a **DisplayPath** using the ApplyPropertiesFromMode method. Note that this object refers to a range of valid wire formats, not just one specific wire format.
public final class WindowsDevicesDisplayCore_DisplayModeInfo: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayModeInfoProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayModeInfo members

    /// Gets a value indicating whether the DisplayModeInfo is interlaced.
    /// - Returns: `true` if this is an interlaced DisplayModeInfo, otherwise `false`.
    public var isInterlaced: Swift.Bool {
        get throws {
            try _interop.get_IsInterlaced()
        }
    }

    /// Gets a value indicating whether the DisplayModeInfo is stereoscopic 3D.
    /// - Returns: `true` if this is a stereoscopic 3D DisplayModeInfo, otherwise `false`.
    public var isStereo: Swift.Bool {
        get throws {
            try _interop.get_IsStereo()
        }
    }

    /// Gets the presentation rate of the DisplayModeInfo.
    /// - Returns: A DisplayPresentationRate value.
    public var presentationRate: WindowsDevicesDisplayCore_DisplayPresentationRate {
        get throws {
            try _interop.get_PresentationRate()
        }
    }

    /// Gets a collection containing the properties of the DisplayModeInfo.
    /// - Returns: An IMapView, keyed by **Guid**, of objects representing properties.
    public var properties: WindowsFoundationCollections_IMapView<Foundation.UUID, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets or sets the pixel format of the surfaces that will be allowed to present to this DisplayModeInfo.
    /// - Returns: A DirectXPixelFormat value.
    public var sourcePixelFormat: WindowsGraphicsDirectX_DirectXPixelFormat {
        get throws {
            try _interop.get_SourcePixelFormat()
        }
    }

    /// Gets or sets an optional value for the size of the pixel buffer used for scanout, before it is transformed to fit into the target resolution.
    /// - Returns: A value indicating the size of the pixel buffer used for scanout.
    public var sourceResolution: WindowsGraphics_SizeInt32 {
        get throws {
            try _interop.get_SourceResolution()
        }
    }

    /// Gets or sets an optional value for the size of the frame provided to the target's monitor. This can differ from the size of the "source" frame buffer, in which case the display pipeline transforms the content using the Rotation and Scaling properties.
    /// - Returns: A value indicating the size of the frame provided to the target's monitor.
    public var targetResolution: WindowsGraphics_SizeInt32 {
        get throws {
            try _interop.get_TargetResolution()
        }
    }

    /// Retrieves a value containing zero or more display bits-per-channel flags (logically OR-ed together) that are valid for the DisplayModeInfo, for a supplied display wire format pixel encoding.
    /// - Parameter encoding: The desired DisplayWireFormatPixelEncoding for determining which bits-per-channel settings are valid.
    /// - Returns: A DisplayBitsPerChannel value containing zero or more display bits-per-channel flags (logically OR-ed together).
    public func getWireFormatSupportedBitsPerChannel(_ encoding: WindowsDevicesDisplayCore_DisplayWireFormatPixelEncoding) throws -> WindowsDevicesDisplayCore_DisplayBitsPerChannel {
        try _interop.getWireFormatSupportedBitsPerChannel(encoding)
    }

    /// Retrieves a Boolean value indicating whether the DisplayModeInfo supports the specified format.
    /// - Parameter wireFormat: A DisplayWireFormat.
    /// - Returns: `true` if the format is supported, otherwise `false`.
    public func isWireFormatSupported(_ wireFormat: WindowsDevicesDisplayCore_DisplayWireFormat?) throws -> Swift.Bool {
        try _interop.isWireFormatSupported(wireFormat)
    }

    // MARK: Windows.Devices.Display.Core.IDisplayModeInfo2 members

    public var physicalPresentationRate: WindowsDevicesDisplayCore_DisplayPresentationRate {
        get throws {
            try _idisplayModeInfo2.get_PhysicalPresentationRate()
        }
    }

    // MARK: Implementation details

    private var _idisplayModeInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayModeInfo2>? = nil

    internal var _idisplayModeInfo2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayModeInfo2> {
        get throws {
            try _idisplayModeInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayModeInfo2.iid).cast(to: CWinRT.SWRT_WindowsDevicesDisplayCore_IDisplayModeInfo2.self)
            }
        }
    }

    deinit {
        _idisplayModeInfo2_storage?.release()
    }
}