// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a slice in time of display pipeline state for a subset of the system's display targets. If IsReadOnly is `false`, then this object can be modified by connecting targets that are owned by the caller's DisplayManager, or by modifying path properties. Modifying a **DisplayState** object, or its child objects, does not directly modify the system's display state until you call TryApply.
public final class WindowsDevicesDisplayCore_DisplayState: WindowsRuntime.WinRTImport<WindowsDevicesDisplayCore_DisplayStateProjection> {
    // MARK: Windows.Devices.Display.Core.IDisplayState members

    /// Gets a value indicating whether this DisplayState and its child views and paths can be modified.
    /// - Returns: `true` if this DisplayState and its child views and paths cannot be modified, otherwise `false`.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _interop.get_IsReadOnly()
        }
    }

    /// Gets a value indicating whether the system display state has changed since this DisplayState was created.
    /// - Returns: `true` if the system display state has changed since this DisplayState was created, otherwise `false`.
    public var isStale: Swift.Bool {
        get throws {
            try _interop.get_IsStale()
        }
    }

    /// Reserved for future use.
    public var properties: WindowsFoundationCollections_IMap<Foundation.UUID, WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Returns the set of DisplayTarget objects used to create this DisplayState object.
    public var targets: WindowsFoundationCollections_IVectorView<WindowsDevicesDisplayCore_DisplayTarget?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Targets())
        }
    }

    /// Gets a collection containing the views of the DisplayState.
    /// - Returns: An IVectorView of DisplayView objects.
    public var views: WindowsFoundationCollections_IVectorView<WindowsDevicesDisplayCore_DisplayView?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Views())
        }
    }

    public func connectTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws -> WindowsDevicesDisplayCore_DisplayPath {
        try COM.NullResult.unwrap(_interop.connectTarget(target))
    }

    /// Connects the specified target to an existing logical clone group and returns the resulting path.
    public func connectTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?, _ view: WindowsDevicesDisplayCore_DisplayView?) throws -> WindowsDevicesDisplayCore_DisplayPath {
        try COM.NullResult.unwrap(_interop.connectTargetToView(target, view))
    }

    public func canConnectTargetToView(_ target: WindowsDevicesDisplayCore_DisplayTarget?, _ view: WindowsDevicesDisplayCore_DisplayView?) throws -> Swift.Bool {
        try _interop.canConnectTargetToView(target, view)
    }

    public func getViewForTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws -> WindowsDevicesDisplayCore_DisplayView {
        try COM.NullResult.unwrap(_interop.getViewForTarget(target))
    }

    public func getPathForTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws -> WindowsDevicesDisplayCore_DisplayPath {
        try COM.NullResult.unwrap(_interop.getPathForTarget(target))
    }

    public func disconnectTarget(_ target: WindowsDevicesDisplayCore_DisplayTarget?) throws {
        try _interop.disconnectTarget(target)
    }

    /// Attempts to "functionalize" this DisplayState by trying to evaluate the best modes on all paths given all specified DisplayPath properties as constraints. This method then (optionally, see **Remarks**) updates all **DisplayPath** and DisplayView properties with the results of the functionalization. In particular, all **DisplayPath** and **DisplayView** properties set to null will have their values computed and set.
    /// - Parameter options: The DisplayStateFunctionalizeOptions to use.
    /// - Returns: A DisplayStateOperationResult value detailing the success or failure of the operation.
    public func tryFunctionalize(_ options: WindowsDevicesDisplayCore_DisplayStateFunctionalizeOptions) throws -> WindowsDevicesDisplayCore_DisplayStateOperationResult {
        try COM.NullResult.unwrap(_interop.tryFunctionalize(options))
    }

    /// Attempts to atomically apply this DisplayState to the relevant hardware. Implicitly, this involves "functionalizing" all paths to determine the best modes matching all DisplayPath and DisplayView properties.
    /// - Parameter options: The DisplayStateApplyOptions to use.
    /// - Returns: A DisplayStateOperationResult value detailing the success or failure of the operation.
    public func tryApply(_ options: WindowsDevicesDisplayCore_DisplayStateApplyOptions) throws -> WindowsDevicesDisplayCore_DisplayStateOperationResult {
        try COM.NullResult.unwrap(_interop.tryApply(options))
    }

    /// Creates a copy of this **DisplayState** object, including copies of all views and paths.
    public func clone() throws -> WindowsDevicesDisplayCore_DisplayState {
        try COM.NullResult.unwrap(_interop.clone())
    }

    // MARK: Implementation details
}