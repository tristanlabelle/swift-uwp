// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an error from a web account provider.
public final class WindowsSecurityAuthenticationWebCore_WebProviderError: WindowsRuntime.WinRTImport<WindowsSecurityAuthenticationWebCore_WebProviderErrorProjection> {
    // MARK: Windows.Security.Authentication.Web.Core.IWebProviderErrorFactory members

    public convenience init(_ errorCode: Swift.UInt32, _ errorMessage: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iwebProviderErrorFactory.create(errorCode, errorMessage)))
    }

    // MARK: Windows.Security.Authentication.Web.Core.IWebProviderError members

    /// Gets the error code.
    /// - Returns: The error code.
    public var errorCode: Swift.UInt32 {
        get throws {
            try _interop.get_ErrorCode()
        }
    }

    /// Gets the error message.
    /// - Returns: The error message.
    public var errorMessage: Swift.String {
        get throws {
            try _interop.get_ErrorMessage()
        }
    }

    /// Gets the error properties.
    /// - Returns: The error properties.
    public var properties: WindowsFoundationCollections_IMap<Swift.String, Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    // MARK: Implementation details

    private static var _iwebProviderErrorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebCore_IWebProviderErrorFactory>? = nil

    internal static var _iwebProviderErrorFactory: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebCore_IWebProviderErrorFactory> {
        get throws {
            try _iwebProviderErrorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Core.WebProviderError", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebCore_IWebProviderErrorFactory.iid)
            }
        }
    }
}