// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an app that is in the installation queue.
public final class WindowsApplicationModelStorePreviewInstallControl_AppInstallItem: WindowsRuntime.WinRTImport<WindowsApplicationModelStorePreviewInstallControl_AppInstallItemProjection> {
    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem members

    /// Gets the type of the current app install.
    /// - Returns: A value that indicates whether the app is being installed, updated, or repaired.
    public var installType: WindowsApplicationModelStorePreviewInstallControl_AppInstallType {
        get throws {
            try _interop.get_InstallType()
        }
    }

    /// Indicates whether the current app install was initiated by the user.
    /// - Returns: True if the current app install was initiated by the user; otherwise, false.
    public var isUserInitiated: Swift.Bool {
        get throws {
            try _interop.get_IsUserInitiated()
        }
    }

    /// Gets the package family name for the current app.
    /// - Returns: The package family name for the current app.
    public var packageFamilyName: Swift.String {
        get throws {
            try _interop.get_PackageFamilyName()
        }
    }

    /// Gets the product ID for the current app.
    /// - Returns: The product ID for the current app.
    public var productId: Swift.String {
        get throws {
            try _interop.get_ProductId()
        }
    }

    /// Occurs when the installation of the current app has finished.
    public func completed(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Completed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: completed)
    }

    public func completed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Completed(token)
    }

    /// Occurs when the installation status of the current app has changed.
    public func statusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusChanged)
    }

    public func statusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusChanged(token)
    }

    /// Gets the installation status of the current app.
    /// - Returns: A value that specifies the installation status of the current app.
    public func getCurrentStatus() throws -> WindowsApplicationModelStorePreviewInstallControl_AppInstallStatus {
        try COM.NullResult.unwrap(_interop.getCurrentStatus())
    }

    /// Cancels the installation of the current app.
    public func cancel() throws {
        try _interop.cancel()
    }

    /// Pauses the installation of the current app.
    public func pause() throws {
        try _interop.pause()
    }

    /// Restarts the installation of the current app.
    public func restart() throws {
        try _interop.restart()
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2 members

    /// Cancels the installation of the current app, with the option to generate telemetry data.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func cancel(_ correlationVector: Swift.String) throws {
        try _iappInstallItem2.cancelWithTelemetry(correlationVector)
    }

    /// Pauses the installation of the current app, with the option to generate telemetry data.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func pause(_ correlationVector: Swift.String) throws {
        try _iappInstallItem2.pauseWithTelemetry(correlationVector)
    }

    /// Restarts the installation of the current app, with the option to generate telemetry data.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func restart(_ correlationVector: Swift.String) throws {
        try _iappInstallItem2.restartWithTelemetry(correlationVector)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3 members

    /// Retrieves information about app installs that are children of the current app install. This property only returns a value if the current app install is the parent of other app installs that are part of a the same app bundle.
    /// - Returns: A collection of AppInstallItem objects that represent the children app installs of the current app install.
    public var children: WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallItem3.get_Children())
        }
    }

    /// Indicates whether the current app install is part of an app bundle, and therefore pausing or canceling the app install might affect other items in the installation queue.
    /// - Returns: True if the current app install is part of an app bundle, and therefore pausing or canceling the app install might affect other items in the installation queue; otherwise, false.
    public var itemOperationsMightAffectOtherItems: Swift.Bool {
        get throws {
            try _iappInstallItem3.get_ItemOperationsMightAffectOtherItems()
        }
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4 members

    /// Gets a value that indicates whether the app that is in the installation queue will be automatically launched after it is installed.
    /// - Returns: True if the app in the installation queue will be automatically launched after it is installed; otherwise, false.
    public var launchAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallItem4.get_LaunchAfterInstall()
        }
    }

    /// Gets a value that indicates whether the app that is in the installation queue will be automatically launched after it is installed.
    /// - Returns: True if the app in the installation queue will be automatically launched after it is installed; otherwise, false.
    public func launchAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallItem4.put_LaunchAfterInstall(value)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5 members

    /// Gets or sets the notification toast mode for when the app installation completes.
    /// - Returns: An object that indicates whether the system will show a toast or not when an app completes its install. The choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public var completedInstallToastNotificationMode: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode {
        get throws {
            try _iappInstallItem5.get_CompletedInstallToastNotificationMode()
        }
    }

    /// Gets or sets the notification toast mode for when the app installation completes.
    /// - Returns: An object that indicates whether the system will show a toast or not when an app completes its install. The choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public func completedInstallToastNotificationMode(_ value: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode) throws {
        try _iappInstallItem5.put_CompletedInstallToastNotificationMode(value)
    }

    /// Gets or sets the notification toast mode for when the app installation is in progress.
    /// - Returns: A value that indicates whether the system will show a toast or not during app installation. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public var installInProgressToastNotificationMode: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode {
        get throws {
            try _iappInstallItem5.get_InstallInProgressToastNotificationMode()
        }
    }

    /// Gets or sets the notification toast mode for when the app installation is in progress.
    /// - Returns: A value that indicates whether the system will show a toast or not during app installation. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public func installInProgressToastNotificationMode(_ value: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode) throws {
        try _iappInstallItem5.put_InstallInProgressToastNotificationMode(value)
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the desktop after installation is complete.
    /// - Returns: True to pin the app to the desktop; otherwise, false.
    public var pinToDesktopAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallItem5.get_PinToDesktopAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the desktop after installation is complete.
    /// - Returns: True to pin the app to the desktop; otherwise, false.
    public func pinToDesktopAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallItem5.put_PinToDesktopAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the **Start** menu after installation is complete.
    /// - Returns: True to pin the app to the **Start** menu; otherwise, false.
    public var pinToStartAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallItem5.get_PinToStartAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the **Start** menu after installation is complete.
    /// - Returns: True to pin the app to the **Start** menu; otherwise, false.
    public func pinToStartAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallItem5.put_PinToStartAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the taskbar after installation is complete.
    /// - Returns: True to pin the app to the taskbar; otherwise, false.
    public var pinToTaskbarAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallItem5.get_PinToTaskbarAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the taskbar after installation is complete.
    /// - Returns: True to pin the app to the taskbar; otherwise, false.
    public func pinToTaskbarAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallItem5.put_PinToTaskbarAfterInstall(value)
    }

    // MARK: Implementation details

    private var _iappInstallItem2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem2>? = nil

    internal var _iappInstallItem2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem2> {
        get throws {
            try _iappInstallItem2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem2.self)
            }
        }
    }

    private var _iappInstallItem3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem3>? = nil

    internal var _iappInstallItem3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem3> {
        get throws {
            try _iappInstallItem3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem3.self)
            }
        }
    }

    private var _iappInstallItem4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem4>? = nil

    internal var _iappInstallItem4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem4> {
        get throws {
            try _iappInstallItem4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem4.self)
            }
        }
    }

    private var _iappInstallItem5_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem5>? = nil

    internal var _iappInstallItem5: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem5> {
        get throws {
            try _iappInstallItem5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem5.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallItem5.self)
            }
        }
    }

    deinit {
        _iappInstallItem2_storage?.release()
        _iappInstallItem3_storage?.release()
        _iappInstallItem4_storage?.release()
        _iappInstallItem5_storage?.release()
    }
}