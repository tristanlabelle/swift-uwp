// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides options you can use in several method overloads of the AppInstallManager class for searching for app updates.
public final class WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptions: WindowsRuntime.WinRTImport<WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptionsProjection.self))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions members

    /// Gets or sets a value that specifies whether to allow a forced restart of the app that is being queried for updates.
    /// - Returns: True to allow a forced restart of the app; otherwise, false.
    public var allowForcedAppRestart: Swift.Bool {
        get throws {
            try _interop.get_AllowForcedAppRestart()
        }
    }

    /// Gets or sets a value that specifies whether to allow a forced restart of the app that is being queried for updates.
    /// - Returns: True to allow a forced restart of the app; otherwise, false.
    public func allowForcedAppRestart(_ value: Swift.Bool) throws {
        try _interop.put_AllowForcedAppRestart(value)
    }

    /// Gets or sets the catalog ID of the app to be queried for updates.
    /// - Returns: The catalog ID of the app to be queried for updates.
    public var catalogId: Swift.String {
        get throws {
            try _interop.get_CatalogId()
        }
    }

    /// Gets or sets the catalog ID of the app to be queried for updates.
    /// - Returns: The catalog ID of the app to be queried for updates.
    public func catalogId(_ value: Swift.String) throws {
        try _interop.put_CatalogId(value)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2 members

    /// Gets or sets a value that indicates whether the updates should be automatically downloaded and installed if they are found.
    /// - Returns: True to automatically queue up, download and install app updates if any are found. False adds the updates to the install queue in a paused state.
    public var automaticallyDownloadAndInstallUpdateIfFound: Swift.Bool {
        get throws {
            try _iappUpdateOptions2.get_AutomaticallyDownloadAndInstallUpdateIfFound()
        }
    }

    /// Gets or sets a value that indicates whether the updates should be automatically downloaded and installed if they are found.
    /// - Returns: True to automatically queue up, download and install app updates if any are found. False adds the updates to the install queue in a paused state.
    public func automaticallyDownloadAndInstallUpdateIfFound(_ value: Swift.Bool) throws {
        try _iappUpdateOptions2.put_AutomaticallyDownloadAndInstallUpdateIfFound(value)
    }

    // MARK: Implementation details

    private var _iappUpdateOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppUpdateOptions2>? = nil

    internal var _iappUpdateOptions2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppUpdateOptions2> {
        get throws {
            try _iappUpdateOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppUpdateOptions2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppUpdateOptions2.self)
            }
        }
    }

    deinit {
        _iappUpdateOptions2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}