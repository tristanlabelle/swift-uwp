// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides options you can use in several method overloads of the AppInstallManager class for installing app updates.
public final class WindowsApplicationModelStorePreviewInstallControl_AppInstallOptions: WindowsRuntime.WinRTImport<WindowsApplicationModelStorePreviewInstallControl_AppInstallOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelStorePreviewInstallControl_AppInstallOptionsProjection.self))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions members

    /// Gets or sets a value that indicates whether to allow a forced restart of the app that is being installed.
    /// - Returns: True to allow a forced restart of the app that is being installed; otherwise, false.
    public var allowForcedAppRestart: Swift.Bool {
        get throws {
            try _interop.get_AllowForcedAppRestart()
        }
    }

    /// Gets or sets a value that indicates whether to allow a forced restart of the app that is being installed.
    /// - Returns: True to allow a forced restart of the app that is being installed; otherwise, false.
    public func allowForcedAppRestart(_ value: Swift.Bool) throws {
        try _interop.put_AllowForcedAppRestart(value)
    }

    /// Gets or sets the catalog ID of the app to install.
    /// - Returns: The catalog ID of the app to install.
    public var catalogId: Swift.String {
        get throws {
            try _interop.get_CatalogId()
        }
    }

    /// Gets or sets the catalog ID of the app to install.
    /// - Returns: The catalog ID of the app to install.
    public func catalogId(_ value: Swift.String) throws {
        try _interop.put_CatalogId(value)
    }

    /// Gets or sets a value that indicates whether to install the app to non-removable storage even if the user has configured apps to install to SD card, or whether to install the app to non-removable storage or SD card according to the user's settings.
    /// - Returns: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    public var forceUseOfNonRemovableStorage: Swift.Bool {
        get throws {
            try _interop.get_ForceUseOfNonRemovableStorage()
        }
    }

    /// Gets or sets a value that indicates whether to install the app to non-removable storage even if the user has configured apps to install to SD card, or whether to install the app to non-removable storage or SD card according to the user's settings.
    /// - Returns: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    public func forceUseOfNonRemovableStorage(_ value: Swift.Bool) throws {
        try _interop.put_ForceUseOfNonRemovableStorage(value)
    }

    /// Gets or sets a value that indicates whether to automatically launch the app after it is installed.
    /// - Returns: True to automatically launch the app after it is installed; otherwise, false.
    public var launchAfterInstall: Swift.Bool {
        get throws {
            try _interop.get_LaunchAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether to automatically launch the app after it is installed.
    /// - Returns: True to automatically launch the app after it is installed; otherwise, false.
    public func launchAfterInstall(_ value: Swift.Bool) throws {
        try _interop.put_LaunchAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether to attempt to repair the installation of an app that is already installed.
    /// - Returns: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    public var repair: Swift.Bool {
        get throws {
            try _interop.get_Repair()
        }
    }

    /// Gets or sets a value that indicates whether to attempt to repair the installation of an app that is already installed.
    /// - Returns: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    public func repair(_ value: Swift.Bool) throws {
        try _interop.put_Repair(value)
    }

    /// Gets or sets the package storage volume where the app or app bundle will be installed.
    /// - Returns: The package storage volume where the app or app bundle will be installed.
    public var targetVolume: WindowsManagementDeployment_PackageVolume {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TargetVolume())
        }
    }

    /// Gets or sets the package storage volume where the app or app bundle will be installed.
    /// - Returns: The package storage volume where the app or app bundle will be installed.
    public func targetVolume(_ value: WindowsManagementDeployment_PackageVolume?) throws {
        try _interop.put_TargetVolume(value)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2 members

    /// Gets or sets the promotion campaign ID that is associated with the app to install.
    /// - Returns: The promotion campaign ID that is associated with the app to install.
    public var campaignId: Swift.String {
        get throws {
            try _iappInstallOptions2.get_CampaignId()
        }
    }

    /// Gets or sets the promotion campaign ID that is associated with the app to install.
    /// - Returns: The promotion campaign ID that is associated with the app to install.
    public func campaignId(_ value: Swift.String) throws {
        try _iappInstallOptions2.put_CampaignId(value)
    }

    /// Gets or sets the notification toast mode for when the app installation completes.
    /// - Returns: A value that indicates whether the system will show a toast or not when an app completes its install. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public var completedInstallToastNotificationMode: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode {
        get throws {
            try _iappInstallOptions2.get_CompletedInstallToastNotificationMode()
        }
    }

    /// Gets or sets the notification toast mode for when the app installation completes.
    /// - Returns: A value that indicates whether the system will show a toast or not when an app completes its install. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public func completedInstallToastNotificationMode(_ value: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode) throws {
        try _iappInstallOptions2.put_CompletedInstallToastNotificationMode(value)
    }

    /// Gets or sets the extended promotion campaign ID that is associated with the app to install.
    /// - Returns: The extended promotion campaign ID that is associated with the app to install.
    public var extendedCampaignId: Swift.String {
        get throws {
            try _iappInstallOptions2.get_ExtendedCampaignId()
        }
    }

    /// Gets or sets the extended promotion campaign ID that is associated with the app to install.
    /// - Returns: The extended promotion campaign ID that is associated with the app to install.
    public func extendedCampaignId(_ value: Swift.String) throws {
        try _iappInstallOptions2.put_ExtendedCampaignId(value)
    }

    /// Gets or sets a value that indicates whether the application will be installed for all users.
    /// - Returns: True to install the application for all users; false to install the application for the current user only.
    public var installForAllUsers: Swift.Bool {
        get throws {
            try _iappInstallOptions2.get_InstallForAllUsers()
        }
    }

    /// Gets or sets a value that indicates whether the application will be installed for all users.
    /// - Returns: True to install the application for all users; false to install the application for the current user only.
    public func installForAllUsers(_ value: Swift.Bool) throws {
        try _iappInstallOptions2.put_InstallForAllUsers(value)
    }

    /// Gets or sets the notification toast mode for when the app installation is in progress.
    /// - Returns: A value that indicates whether the system will show a toast or not during app installation. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public var installInProgressToastNotificationMode: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode {
        get throws {
            try _iappInstallOptions2.get_InstallInProgressToastNotificationMode()
        }
    }

    /// Gets or sets the notification toast mode for when the app installation is in progress.
    /// - Returns: A value that indicates whether the system will show a toast or not during app installation. Choices include default, toast with or without a popup, and no toast. If the default is set, the system will choose the appropriate toast.
    public func installInProgressToastNotificationMode(_ value: WindowsApplicationModelStorePreviewInstallControl_AppInstallationToastNotificationMode) throws {
        try _iappInstallOptions2.put_InstallInProgressToastNotificationMode(value)
    }

    /// Gets or sets a value that determines whether the product being installed should be pinned to the desktop after installation is complete.
    /// - Returns: True to pin the app to the desktop; otherwise, false.
    public var pinToDesktopAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallOptions2.get_PinToDesktopAfterInstall()
        }
    }

    /// Gets or sets a value that determines whether the product being installed should be pinned to the desktop after installation is complete.
    /// - Returns: True to pin the app to the desktop; otherwise, false.
    public func pinToDesktopAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallOptions2.put_PinToDesktopAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the **Start** menu after installation is complete.
    /// - Returns: True to pin the app to the **Start** menu; otherwise, false.
    public var pinToStartAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallOptions2.get_PinToStartAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the **Start** menu after installation is complete.
    /// - Returns: True to pin the app to the **Start** menu; otherwise, false.
    public func pinToStartAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallOptions2.put_PinToStartAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the taskbar after installation is complete.
    /// - Returns: True to pin the app to the taskbar; otherwise, false.
    public var pinToTaskbarAfterInstall: Swift.Bool {
        get throws {
            try _iappInstallOptions2.get_PinToTaskbarAfterInstall()
        }
    }

    /// Gets or sets a value that indicates whether the product being installed should be pinned to the taskbar after installation is complete.
    /// - Returns: True to pin the app to the taskbar; otherwise, false.
    public func pinToTaskbarAfterInstall(_ value: Swift.Bool) throws {
        try _iappInstallOptions2.put_PinToTaskbarAfterInstall(value)
    }

    /// Gets or sets a value that indicates whether the installation of the app should pause after the download and staging step but not complete the final install.
    /// - Returns: True to pause the install after the download and staging of the app but not complete the final app registration; otherwise, false.
    public var stageButDoNotInstall: Swift.Bool {
        get throws {
            try _iappInstallOptions2.get_StageButDoNotInstall()
        }
    }

    /// Gets or sets a value that indicates whether the installation of the app should pause after the download and staging step but not complete the final install.
    /// - Returns: True to pause the install after the download and staging of the app but not complete the final app registration; otherwise, false.
    public func stageButDoNotInstall(_ value: Swift.Bool) throws {
        try _iappInstallOptions2.put_StageButDoNotInstall(value)
    }

    // MARK: Implementation details

    private var _iappInstallOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallOptions2>? = nil

    internal var _iappInstallOptions2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallOptions2> {
        get throws {
            try _iappInstallOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallOptions2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallOptions2.self)
            }
        }
    }

    deinit {
        _iappInstallOptions2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}