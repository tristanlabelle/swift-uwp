// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides members for programmatically installing apps, including the ability to start an app install and get a list of app installs currently in progress.
public final class WindowsApplicationModelStorePreviewInstallControl_AppInstallManager: WindowsRuntime.WinRTImport<WindowsApplicationModelStorePreviewInstallControl_AppInstallManagerProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelStorePreviewInstallControl_AppInstallManagerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager members

    /// Gets or sets the user identity associated with the app installs.
    /// - Returns: The user identity associated with the app installs.
    public var acquisitionIdentity: Swift.String {
        get throws {
            try _interop.get_AcquisitionIdentity()
        }
    }

    /// Gets or sets the user identity associated with the app installs.
    /// - Returns: The user identity associated with the app installs.
    public func acquisitionIdentity(_ value: Swift.String) throws {
        try _interop.put_AcquisitionIdentity(value)
    }

    /// Retrieves information about all apps that are currently in the installation queue.
    /// - Returns: A collection of AppInstallItem objects that represent all apps that are currently in the installation queue.
    public var appInstallItems: WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AppInstallItems())
        }
    }

    /// Gets or sets the auto update setting for apps on the current computer or device.
    /// - Returns: A value that specifies the auto update setting for apps on the current computer or device.
    public var autoUpdateSetting: WindowsApplicationModelStorePreviewInstallControl_AutoUpdateSetting {
        get throws {
            try _interop.get_AutoUpdateSetting()
        }
    }

    /// Gets or sets the auto update setting for apps on the current computer or device.
    /// - Returns: A value that specifies the auto update setting for apps on the current computer or device.
    public func autoUpdateSetting(_ value: WindowsApplicationModelStorePreviewInstallControl_AutoUpdateSetting) throws {
        try _interop.put_AutoUpdateSetting(value)
    }

    /// Occurs when an app has finished installing.
    public func itemCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelStorePreviewInstallControl_AppInstallManager?, WindowsApplicationModelStorePreviewInstallControl_AppInstallManagerItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ItemCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: itemCompleted)
    }

    public func itemCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ItemCompleted(token)
    }

    /// Occurs when the status of an app in the installation queue has changed.
    public func itemStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelStorePreviewInstallControl_AppInstallManager?, WindowsApplicationModelStorePreviewInstallControl_AppInstallManagerItemEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ItemStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: itemStatusChanged)
    }

    public func itemStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ItemStatusChanged(token)
    }

    /// Cancels the installation of the specified app.
    /// - Parameter productId: The product ID of the app whose installation should be canceled.
    public func cancel(_ productId: Swift.String) throws {
        try _interop.cancel(productId)
    }

    /// Pauses the installation of the specified app.
    /// - Parameter productId: The product ID of the app whose installation should be paused.
    public func pause(_ productId: Swift.String) throws {
        try _interop.pause(productId)
    }

    /// Restarts the installation of the specified app.
    /// - Parameter productId: The product ID of the app whose installation should be restarted.
    public func restart(_ productId: Swift.String) throws {
        try _interop.restart(productId)
    }

    /// Determines whether the specified app can be installed on the current computer or device.
    /// - Parameter productId: The product ID of the app that this method will check to determine if it can be installed.
    /// - Parameter skuId: The SKU ID of the app that this method will check to determine if it can be installed.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app can be installed; otherwise false.
    public func getIsApplicableAsync(_ productId: Swift.String, _ skuId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.getIsApplicableAsync(productId, skuId))
    }

    /// Starts the installation of the specified app.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter skuId: The SKU ID of the app to install.
    /// - Parameter repair: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    /// - Parameter forceUseOfNonRemovableStorage: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the app that was added to the installation queue.
    public func startAppInstallAsync(_ productId: Swift.String, _ skuId: Swift.String, _ repair: Swift.Bool, _ forceUseOfNonRemovableStorage: Swift.Bool) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_interop.startAppInstallAsync(productId, skuId, repair, forceUseOfNonRemovableStorage))
    }

    /// Starts the update of an app specified by the package family name.
    /// - Parameter packageFamilyName: The package family name of the app to update.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the app update that was added to the installation queue.
    public func updateAppByPackageFamilyNameAsync(_ packageFamilyName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_interop.updateAppByPackageFamilyNameAsync(packageFamilyName))
    }

    /// Searches for updates for the specified app.
    /// - Parameter productId: The product ID of the app to be queried for updates.
    /// - Parameter skuId: The SKU to be queried for updates.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the available update.
    public func searchForUpdatesAsync(_ productId: Swift.String, _ skuId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_interop.searchForUpdatesAsync(productId, skuId))
    }

    /// Searches for all available updates to apps installed on the current computer or device.
    /// - Returns: An asynchronous operation that, on successful completion, returns the collection of apps that have available updates. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func searchForAllUpdatesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_interop.searchForAllUpdatesAsync())
    }

    /// Determines whether the specified app is blocked by policy on the current computer or device.
    /// - Parameter storeClientName: The name of the app that this method will check to determine if is blocked by policy.
    /// - Parameter storeClientPublisher: The publisher name of the app that this method will check to determine if is blocked by policy.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app can be installed; otherwise false.
    public func isStoreBlockedByPolicyAsync(_ storeClientName: Swift.String, _ storeClientPublisher: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.isStoreBlockedByPolicyAsync(storeClientName, storeClientPublisher))
    }

    /// Determines whether the specified app has permission to install on the current computer or device.
    /// - Parameter productId: The product ID of the app that this method will check to determine if it has permission to be installed.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app has permission to be installed; otherwise false.
    public func getIsAppAllowedToInstallAsync(_ productId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.getIsAppAllowedToInstallAsync(productId))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2 members

    /// Starts the installation of the specified app, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter skuId: The SKU ID of the app to install.
    /// - Parameter repair: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    /// - Parameter forceUseOfNonRemovableStorage: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    /// - Parameter catalogId: The catalog ID of the app to install.
    /// - Parameter bundleId: The bundle ID of the app to install.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the app that was added to the installation queue.
    public func startAppInstallAsync(_ productId: Swift.String, _ skuId: Swift.String, _ repair: Swift.Bool, _ forceUseOfNonRemovableStorage: Swift.Bool, _ catalogId: Swift.String, _ bundleId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager2.startAppInstallWithTelemetryAsync(productId, skuId, repair, forceUseOfNonRemovableStorage, catalogId, bundleId, correlationVector))
    }

    /// Starts the update of an app specified by the package family name, with the option to generate telemetry data.
    /// - Parameter packageFamilyName: The package family name of the app to update.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the app update that was added to the installation queue.
    public func updateAppByPackageFamilyNameAsync(_ packageFamilyName: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager2.updateAppByPackageFamilyNameWithTelemetryAsync(packageFamilyName, correlationVector))
    }

    /// Searches for updates for the specified app, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app to be queried for updates.
    /// - Parameter skuId: The SKU ID of the app to be queried for updates.
    /// - Parameter catalogId: The catalog ID of the app to be queried for updates.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the available update.
    public func searchForUpdatesAsync(_ productId: Swift.String, _ skuId: Swift.String, _ catalogId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager2.searchForUpdatesWithTelemetryAsync(productId, skuId, catalogId, correlationVector))
    }

    /// Searches for all available updates to apps installed on the current computer or device, with the option to generate telemetry data.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns the collection of apps that have available updates. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func searchForAllUpdatesAsync(_ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager2.searchForAllUpdatesWithTelemetryAsync(correlationVector))
    }

    /// Determines whether the specified app has permission to install on the current computer or device, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter skuId: The SKU ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter catalogId: The catalog ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app has permission to be installed; otherwise false.
    public func getIsAppAllowedToInstallAsync(_ productId: Swift.String, _ skuId: Swift.String, _ catalogId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappInstallManager2.getIsAppAllowedToInstallWithTelemetryAsync(productId, skuId, catalogId, correlationVector))
    }

    /// Cancels the installation of the specified app, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app whose installation should be canceled.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func cancel(_ productId: Swift.String, _ correlationVector: Swift.String) throws {
        try _iappInstallManager2.cancelWithTelemetry(productId, correlationVector)
    }

    /// Pauses the installation of the specified app, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app whose installation should be paused.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func pause(_ productId: Swift.String, _ correlationVector: Swift.String) throws {
        try _iappInstallManager2.pauseWithTelemetry(productId, correlationVector)
    }

    /// Restarts the installation of the specified app, with the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app whose installation should be restarted.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func restart(_ productId: Swift.String, _ correlationVector: Swift.String) throws {
        try _iappInstallManager2.restartWithTelemetry(productId, correlationVector)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3 members

    /// Starts the installation of the specified app or app bundle.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter catalogId: The catalog ID of the app to install.
    /// - Parameter flightId: The flight ID of the app to install.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter repair: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    /// - Parameter forceUseOfNonRemovableStorage: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter targetVolume: The package storage volume where the app or app bundle will be installed.
    /// - Returns: An asynchronous operation that, on successful completion, returns the app or set of apps (for an app bundle) that were added to the installation queue. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func startProductInstallAsync(_ productId: Swift.String, _ catalogId: Swift.String, _ flightId: Swift.String, _ clientId: Swift.String, _ repair: Swift.Bool, _ forceUseOfNonRemovableStorage: Swift.Bool, _ correlationVector: Swift.String, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager3.startProductInstallAsync(productId, catalogId, flightId, clientId, repair, forceUseOfNonRemovableStorage, correlationVector, targetVolume))
    }

    /// Starts the installation of the specified app or app bundle for the specified user.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter catalogId: The catalog ID of the app to install.
    /// - Parameter flightId: The flight ID of the app to install.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter repair: True to attempt to repair the installation of an app that is already installed; otherwise, false.
    /// - Parameter forceUseOfNonRemovableStorage: True to install the app to non-removable storage even if the user has configured apps to install to SD card; false to install the app to non-removable storage or SD card according to the user's settings.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter targetVolume: The package storage volume where the app or app bundle will be installed.
    /// - Returns: An asynchronous operation that, on successful completion, returns the app or set of apps (for an app bundle) that were added to the installation queue. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func startProductInstallForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ catalogId: Swift.String, _ flightId: Swift.String, _ clientId: Swift.String, _ repair: Swift.Bool, _ forceUseOfNonRemovableStorage: Swift.Bool, _ correlationVector: Swift.String, _ targetVolume: WindowsManagementDeployment_PackageVolume?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager3.startProductInstallForUserAsync(user, productId, catalogId, flightId, clientId, repair, forceUseOfNonRemovableStorage, correlationVector, targetVolume))
    }

    /// Starts the update of an app for a given user specified by the package family name, with the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter packageFamilyName: The package family name of the app to update.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the app update that was added to the installation queue.
    public func updateAppByPackageFamilyNameForUserAsync(_ user: WindowsSystem_User?, _ packageFamilyName: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager3.updateAppByPackageFamilyNameForUserAsync(user, packageFamilyName, correlationVector))
    }

    /// Searches for updates for the specified app and user, with the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app to be queried for updates.
    /// - Parameter skuId: The SKU ID of the app to be queried for updates.
    /// - Parameter catalogId: The catalog ID of the app to be queried for updates.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the available update.
    public func searchForUpdatesForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ skuId: Swift.String, _ catalogId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager3.searchForUpdatesForUserAsync(user, productId, skuId, catalogId, correlationVector))
    }

    /// Searches for all available updates to apps installed on the current computer or device for the specified user, with the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns the collection of apps that have available updates. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func searchForAllUpdatesForUserAsync(_ user: WindowsSystem_User?, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager3.searchForAllUpdatesForUserAsync(user, correlationVector))
    }

    /// Determines whether the specified app has permission to install on the current computer or device for the specified user, with the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter skuId: The SKU ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter catalogId: The catalog ID of the app that this method will check to determine if it has permission to be installed.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app has permission to be installed; otherwise false.
    public func getIsAppAllowedToInstallForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ skuId: Swift.String, _ catalogId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappInstallManager3.getIsAppAllowedToInstallForUserAsync(user, productId, skuId, catalogId, correlationVector))
    }

    /// Determines whether the specified app can be installed on the current computer or device for the specified user.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app that this method will check to determine if it can be installed.
    /// - Parameter skuId: The SKU ID of the app that this method will check to determine if it can be installed.
    /// - Returns: An asynchronous operation that, on successful completion, returns true if the app can be installed; otherwise false.
    public func getIsApplicableForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ skuId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappInstallManager3.getIsApplicableForUserAsync(user, productId, skuId))
    }

    /// Moves the specified app to the front of the download queue.
    /// - Parameter productId: The product ID of the app to move to the front of the download queue.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    public func moveToFrontOfDownloadQueue(_ productId: Swift.String, _ correlationVector: Swift.String) throws {
        try _iappInstallManager3.moveToFrontOfDownloadQueue(productId, correlationVector)
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4 members

    /// Grants a free entitlement for the specified app to the current user.
    /// - Parameter storeId: The Store ID of the app for which you want to grant the entitlement.
    /// - Parameter campaignId: The ID of the campaign that is associated with the entitlement.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns a GetEntitlementResult object that indicates the status of the entitlement grant.
    public func getFreeUserEntitlementAsync(_ storeId: Swift.String, _ campaignId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_GetEntitlementResult?> {
        try COM.NullResult.unwrap(_iappInstallManager4.getFreeUserEntitlementAsync(storeId, campaignId, correlationVector))
    }

    /// Grants a free entitlement for the specified app to the specified user.
    /// - Parameter user: A Windows.System.User object that represents the user to which you want to grant the entitlement.
    /// - Parameter storeId: The Store ID of the app for which you want to grant the entitlement.
    /// - Parameter campaignId: The ID of the campaign that is associated with the entitlement.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns a GetEntitlementResult object that indicates the status of the entitlement grant.
    public func getFreeUserEntitlementForUserAsync(_ user: WindowsSystem_User?, _ storeId: Swift.String, _ campaignId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_GetEntitlementResult?> {
        try COM.NullResult.unwrap(_iappInstallManager4.getFreeUserEntitlementForUserAsync(user, storeId, campaignId, correlationVector))
    }

    /// Grants a free entitlement for the specified app to all users on the current device.
    /// - Parameter storeId: The Store ID of the app for which you want to grant the entitlement.
    /// - Parameter campaignId: The ID of the campaign that is associated with the entitlement.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Returns: An asynchronous operation that, on successful completion, returns a GetEntitlementResult object that indicates the status of the entitlement grant.
    public func getFreeDeviceEntitlementAsync(_ storeId: Swift.String, _ campaignId: Swift.String, _ correlationVector: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_GetEntitlementResult?> {
        try COM.NullResult.unwrap(_iappInstallManager4.getFreeDeviceEntitlementAsync(storeId, campaignId, correlationVector))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager5 members

    /// Retrieves information about all the apps that are part of a single app bundle that is currently in the installation queue.
    /// - Returns: A collection of AppInstallItem objects that represent all the apps that are part of a single app bundle that is currently in the installation queue.
    public var appInstallItemsWithGroupSupport: WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        get throws {
            try COM.NullResult.unwrap(_iappInstallManager5.get_AppInstallItemsWithGroupSupport())
        }
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6 members

    /// Searches for all available updates to apps installed on the current computer or device, with the ability to allow forced app restarts and the option to generate telemetry data.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter updateOptions: Provides additional options for the operation, including the ability to allow forced app restarts.
    /// - Returns: An asynchronous operation that, on successful completion, returns the collection of apps that have available updates. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func searchForAllUpdatesAsync(_ correlationVector: Swift.String, _ clientId: Swift.String, _ updateOptions: WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager6.searchForAllUpdatesWithUpdateOptionsAsync(correlationVector, clientId, updateOptions))
    }

    /// Searches for all available updates to apps installed on the current computer or device for the specified user, with the ability to allow forced app restarts and the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter updateOptions: Provides additional options for the operation, including the ability to allow forced app restarts.
    /// - Returns: An asynchronous operation that, on successful completion, returns the collection of apps that have available updates. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func searchForAllUpdatesForUserAsync(_ user: WindowsSystem_User?, _ correlationVector: Swift.String, _ clientId: Swift.String, _ updateOptions: WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager6.searchForAllUpdatesWithUpdateOptionsForUserAsync(user, correlationVector, clientId, updateOptions))
    }

    /// Searches for updates for the specified app, with the ability to allow a forced app restart and the option to generate telemetry data.
    /// - Parameter productId: The product ID of the app to be queried for updates.
    /// - Parameter skuId: The SKU ID of the app to be queried for updates.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter updateOptions: Provides additional options for the operation, including the ability to allow a forced app restart.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the available update.
    public func searchForUpdatesAsync(_ productId: Swift.String, _ skuId: Swift.String, _ correlationVector: Swift.String, _ clientId: Swift.String, _ updateOptions: WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager6.searchForUpdatesWithUpdateOptionsAsync(productId, skuId, correlationVector, clientId, updateOptions))
    }

    /// Searches for updates for the specified app and user, with the ability to allow a forced app restart and the option to generate telemetry data.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app to be queried for updates.
    /// - Parameter skuId: The SKU ID of the app to be queried for updates.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter updateOptions: Provides additional options for the operation, including the ability to allow a forced app restart.
    /// - Returns: An asynchronous operation that, on successful completion, returns an AppInstallItem that represents the available update.
    public func searchForUpdatesForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ skuId: Swift.String, _ correlationVector: Swift.String, _ clientId: Swift.String, _ updateOptions: WindowsApplicationModelStorePreviewInstallControl_AppUpdateOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?> {
        try COM.NullResult.unwrap(_iappInstallManager6.searchForUpdatesWithUpdateOptionsForUserAsync(user, productId, skuId, correlationVector, clientId, updateOptions))
    }

    /// Starts the installation of the specified app or app bundle, with the ability to specify additional install options such as whether to allow a forced app restart.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter flightId: The flight ID of the app to install.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter installOptions: Provides additional options for the operation, including the ability to allow a forced app restart.
    /// - Returns: An asynchronous operation that, on successful completion, returns the app or set of apps (for an app bundle) that were added to the installation queue. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func startProductInstallAsync(_ productId: Swift.String, _ flightId: Swift.String, _ clientId: Swift.String, _ correlationVector: Swift.String, _ installOptions: WindowsApplicationModelStorePreviewInstallControl_AppInstallOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager6.startProductInstallWithOptionsAsync(productId, flightId, clientId, correlationVector, installOptions))
    }

    /// Starts the installation of the specified app or app bundle for the specified user, with the ability to specify additional install options such as whether to allow a forced app restart.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter productId: The product ID of the app to install.
    /// - Parameter flightId: The flight ID of the app to install.
    /// - Parameter clientId: The ID of the caller.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data.
    /// - Parameter installOptions: Provides additional options for the operation, including the ability to allow a forced app restart.
    /// - Returns: An asynchronous operation that, on successful completion, returns the app or set of apps (for an app bundle) that were added to the installation queue. If you use Asynchronous programming, the result type is a read-only list/vector of AppInstallItem items. (You can use APIs of IVectorView<AppInstallItem> for C++ or JavaScript, APIs of IReadOnlyList<AppInstallItem> for .NET.)
    public func startProductInstallForUserAsync(_ user: WindowsSystem_User?, _ productId: Swift.String, _ flightId: Swift.String, _ clientId: Swift.String, _ correlationVector: Swift.String, _ installOptions: WindowsApplicationModelStorePreviewInstallControl_AppInstallOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsApplicationModelStorePreviewInstallControl_AppInstallItem?>?> {
        try COM.NullResult.unwrap(_iappInstallManager6.startProductInstallWithOptionsForUserAsync(user, productId, flightId, clientId, correlationVector, installOptions))
    }

    /// Returns a value that indicates whether the package with the specified identity info is allowed to be installed on the current device.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data for the operation.
    /// - Parameter packageIdentityName: The identity name of the package, as specified in the package manifest.
    /// - Parameter publisherCertificateName: The publisher name of the package, as specified in the package manifest.
    /// - Returns: True if the package with the specified identity info is allowed to be installed on the current device; otherwise, false.
    public func getIsPackageIdentityAllowedToInstallAsync(_ correlationVector: Swift.String, _ packageIdentityName: Swift.String, _ publisherCertificateName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappInstallManager6.getIsPackageIdentityAllowedToInstallAsync(correlationVector, packageIdentityName, publisherCertificateName))
    }

    /// Returns a value that indicates whether the package with the specified identity info is allowed to be installed on the current device for the specified user.
    /// - Parameter user: An object that identifies the user to specify for this operation.
    /// - Parameter correlationVector: A correlation vector string that can be used to generate telemetry data for the operation.
    /// - Parameter packageIdentityName: The identity name of the package, as specified in the package manifest.
    /// - Parameter publisherCertificateName: The publisher name of the package, as specified in the package manifest.
    /// - Returns: True if the package with the specified identity info is allowed to be installed on the current device for the specified user; otherwise, false.
    public func getIsPackageIdentityAllowedToInstallForUserAsync(_ user: WindowsSystem_User?, _ correlationVector: Swift.String, _ packageIdentityName: Swift.String, _ publisherCertificateName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iappInstallManager6.getIsPackageIdentityAllowedToInstallForUserAsync(user, correlationVector, packageIdentityName, publisherCertificateName))
    }

    // MARK: Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager7 members

    /// Gets or sets a value that indicates whether the calling app has elevated administrative privileges to ensure installing an app for all users will succeed.
    /// - Returns: True indicates the calling app has elevated administrative privileges; otherwise, false.
    public var canInstallForAllUsers: Swift.Bool {
        get throws {
            try _iappInstallManager7.get_CanInstallForAllUsers()
        }
    }

    // MARK: Implementation details

    private var _iappInstallManager2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager2>? = nil

    internal var _iappInstallManager2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager2> {
        get throws {
            try _iappInstallManager2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager2.self)
            }
        }
    }

    private var _iappInstallManager3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager3>? = nil

    internal var _iappInstallManager3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager3> {
        get throws {
            try _iappInstallManager3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager3.self)
            }
        }
    }

    private var _iappInstallManager4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager4>? = nil

    internal var _iappInstallManager4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager4> {
        get throws {
            try _iappInstallManager4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager4.self)
            }
        }
    }

    private var _iappInstallManager5_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager5>? = nil

    internal var _iappInstallManager5: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager5> {
        get throws {
            try _iappInstallManager5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager5.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager5.self)
            }
        }
    }

    private var _iappInstallManager6_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager6>? = nil

    internal var _iappInstallManager6: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager6> {
        get throws {
            try _iappInstallManager6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager6.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager6.self)
            }
        }
    }

    private var _iappInstallManager7_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager7>? = nil

    internal var _iappInstallManager7: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager7> {
        get throws {
            try _iappInstallManager7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager7.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelStorePreviewInstallControl_IAppInstallManager7.self)
            }
        }
    }

    deinit {
        _iappInstallManager2_storage?.release()
        _iappInstallManager3_storage?.release()
        _iappInstallManager4_storage?.release()
        _iappInstallManager5_storage?.release()
        _iappInstallManager6_storage?.release()
        _iappInstallManager7_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}