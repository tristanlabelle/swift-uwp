// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the ManipulationStarting, event.
public final class WindowsUIXamlInput_ManipulationStartingRoutedEventArgs: WindowsRuntime.WinRTImport<WindowsUIXamlInput_ManipulationStartingRoutedEventArgsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlInput_ManipulationStartingRoutedEventArgsProjection.self))
    }

    // MARK: Windows.UI.Xaml.Input.IManipulationStartingRoutedEventArgs members

    /// Gets the UIElement that is considered the container of the manipulation.
    /// - Returns: The UIElement that is considered the container of the manipulation.
    public var container: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Container())
        }
    }

    /// Gets the UIElement that is considered the container of the manipulation.
    /// - Returns: The UIElement that is considered the container of the manipulation.
    public func container(_ value: WindowsUIXaml_UIElement?) throws {
        try _interop.put_Container(value)
    }

    /// Gets or sets a value that marks the routed event as handled. Setting to **true** prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled; **false** to leave the routed event unhandled, which permits the event to potentially route further. The default is **false**.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Gets or sets a value that marks the routed event as handled. Setting to **true** prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled; **false** to leave the routed event unhandled, which permits the event to potentially route further. The default is **false**.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Gets or sets which types of manipulations are possible.
    /// - Returns: One of the enumeration values. The default is **All**.
    public var mode: WindowsUIXamlInput_ManipulationModes {
        get throws {
            try _interop.get_Mode()
        }
    }

    /// Gets or sets which types of manipulations are possible.
    /// - Returns: One of the enumeration values. The default is **All**.
    public func mode(_ value: WindowsUIXamlInput_ManipulationModes) throws {
        try _interop.put_Mode(value)
    }

    /// Gets or sets an object that describes the pivot for a single-point manipulation.
    /// - Returns: An object that describes the pivot for a single-point manipulation.
    public var pivot: WindowsUIXamlInput_ManipulationPivot {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Pivot())
        }
    }

    /// Gets or sets an object that describes the pivot for a single-point manipulation.
    /// - Returns: An object that describes the pivot for a single-point manipulation.
    public func pivot(_ value: WindowsUIXamlInput_ManipulationPivot?) throws {
        try _interop.put_Pivot(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}