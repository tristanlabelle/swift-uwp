// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies a particular named input mode (InputScopeName ) used to populate an InputScope.
public struct WindowsUIXamlInput_InputScopeNameValue: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// No input scope is applied.
    public static let `default` = Self()

    /// Indicates a Uniform Resource Identifier (URI). This can include URL, File, or File Transfer Protocol (FTP) formats.
    public static let url = Self(rawValue: 1)

    /// Input scope is intended for working with a Simple Mail Transport Protocol (SMTP) form e-mail address (accountnamehost).
    public static let emailSmtpAddress = Self(rawValue: 5)

    /// Input scope is intended for working with a complete personal name.
    public static let personalFullName = Self(rawValue: 7)

    /// Input scope is intended for working with amount and symbol of currency.
    public static let currencyAmountAndSymbol = Self(rawValue: 20)

    /// Input scope is intended for working with a currency amount (no currency symbol).
    public static let currencyAmount = Self(rawValue: 21)

    /// Input scope is intended for working with a numeric month of the year.
    public static let dateMonthNumber = Self(rawValue: 23)

    /// Input scope is intended for working with a numeric day of the month.
    public static let dateDayNumber = Self(rawValue: 24)

    /// Input scope is intended for working with a numeric year.
    public static let dateYear = Self(rawValue: 25)

    /// Input scope is intended for working with a collection of numbers.
    public static let digits = Self(rawValue: 28)

    /// Input scope is intended for working with digits 0-9.
    public static let number = Self(rawValue: 29)

    /// Input scope is intended for working with an alphanumeric password, including other symbols, such as punctuation and mathematical symbols.
    public static let password = Self(rawValue: 31)

    /// Input scope is intended for working with telephone numbers.
    public static let telephoneNumber = Self(rawValue: 32)

    /// Input scope is intended for working with a numeric telephone country code.
    public static let telephoneCountryCode = Self(rawValue: 33)

    /// Input scope is intended for working with a numeric telephone area code.
    public static let telephoneAreaCode = Self(rawValue: 34)

    /// Input scope is intended for working with a local telephone number.
    public static let telephoneLocalNumber = Self(rawValue: 35)

    /// Input scope is intended for working with a numeric hour of the day.
    public static let timeHour = Self(rawValue: 37)

    /// Input scope is intended for working with a numeric minute of the hour, or second of the minute.
    public static let timeMinutesOrSeconds = Self(rawValue: 38)

    /// Input scope is intended for full-width number characters.
    public static let numberFullWidth = Self(rawValue: 39)

    /// Input scope is intended for alphanumeric half-width characters.
    public static let alphanumericHalfWidth = Self(rawValue: 40)

    /// Input scope is intended for alphanumeric full-width characters.
    public static let alphanumericFullWidth = Self(rawValue: 41)

    /// Input scope is intended for Hiragana characters.
    public static let hiragana = Self(rawValue: 44)

    /// Input scope is intended for Katakana half-width characters.
    public static let katakanaHalfWidth = Self(rawValue: 45)

    /// Input scope is intended for Katakana full-width characters.
    public static let katakanaFullWidth = Self(rawValue: 46)

    /// Input scope is intended for Hanja characters.
    public static let hanja = Self(rawValue: 47)

    /// Input scope is intended for Hangul half-width characters.
    public static let hangulHalfWidth = Self(rawValue: 48)

    /// Input scope is intended for Hangul full-width characters.
    public static let hangulFullWidth = Self(rawValue: 49)

    /// Input scope is intended for search strings.
    public static let search = Self(rawValue: 50)

    /// Input scope is intended for spreadsheet formula strings.
    public static let formula = Self(rawValue: 51)

    /// Input scope is intended for search boxes where incremental results are displayed as the user types.
    public static let searchIncremental = Self(rawValue: 52)

    /// Input scope is intended for Chinese half-width characters.
    public static let chineseHalfWidth = Self(rawValue: 53)

    /// Input scope is intended for Chinese full-width characters.
    public static let chineseFullWidth = Self(rawValue: 54)

    /// Input scope is intended for native script.
    public static let nativeScript = Self(rawValue: 55)

    /// Input scope is intended for working with text.
    public static let text = Self(rawValue: 57)

    /// Input scope is intended for chat strings.
    public static let chat = Self(rawValue: 58)

    /// Input scope is intended for working with a name or telephone number.
    public static let nameOrPhoneNumber = Self(rawValue: 59)

    /// Input scope is intended for working with an email, name, or address.
    public static let emailNameOrAddress = Self(rawValue: 60)
    public static let `private` = Self(rawValue: 61)

    /// Input scope is intended for working with a map location.
    public static let maps = Self(rawValue: 62)

    /// Expected input is a numeric password, or PIN.
    public static let numericPassword = Self(rawValue: 63)

    /// Expected input is a numeric PIN.
    public static let numericPin = Self(rawValue: 64)

    /// Expected input is an alphanumeric PIN.
    public static let alphanumericPin = Self(rawValue: 65)

    /// Expected input is a mathematical formula. Advises input processors to show the number page.
    public static let formulaNumber = Self(rawValue: 67)

    /// Expected input does not include emoji. Advises input processors to not show the emoji key.
    public static let chatWithoutEmoji = Self(rawValue: 68)
}