// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies how a rotation occurs with one point of user input.
public final class WindowsUIXamlInput_ManipulationPivot: WindowsRuntime.WinRTImport<WindowsUIXamlInput_ManipulationPivotProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlInput_ManipulationPivotProjection.self))
    }

    // MARK: Windows.UI.Xaml.Input.IManipulationPivotFactory members

    public convenience init(_ center: WindowsFoundation_Point, _ radius: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imanipulationPivotFactory.createInstanceWithCenterAndRadius(center, radius)))
    }

    // MARK: Windows.UI.Xaml.Input.IManipulationPivot members

    /// Gets or sets the center point for rotation manipulations.
    /// - Returns: The center point for rotation manipulations.
    public var center: WindowsFoundation_Point {
        get throws {
            try _interop.get_Center()
        }
    }

    /// Gets or sets the center point for rotation manipulations.
    /// - Returns: The center point for rotation manipulations.
    public func center(_ value: WindowsFoundation_Point) throws {
        try _interop.put_Center(value)
    }

    /// Gets or sets the effective radius of rotation for rotation manipulations.
    /// - Returns: A value in pixels.
    public var radius: Swift.Double {
        get throws {
            try _interop.get_Radius()
        }
    }

    /// Gets or sets the effective radius of rotation for rotation manipulations.
    /// - Returns: A value in pixels.
    public func radius(_ value: Swift.Double) throws {
        try _interop.put_Radius(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.ManipulationPivot", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imanipulationPivotFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IManipulationPivotFactory>? = nil

    internal static var _imanipulationPivotFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IManipulationPivotFactory> {
        get throws {
            try _imanipulationPivotFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.ManipulationPivot", id: CWinRT.SWRT_WindowsUIXamlInput_IManipulationPivotFactory.iid)
            }
        }
    }
}