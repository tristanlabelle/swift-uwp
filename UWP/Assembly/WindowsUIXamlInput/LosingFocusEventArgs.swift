// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides data for the FocusManager.LosingFocus and UIElement.LosingFocus events.
public final class WindowsUIXamlInput_LosingFocusEventArgs: WindowsRuntime.WinRTImport<WindowsUIXamlInput_LosingFocusEventArgsProjection> {
    // MARK: Windows.UI.Xaml.Input.ILosingFocusEventArgs members

    /// Gets or sets whether focus navigation should be canceled.
    /// - Returns: **true** if focus navigation should be canceled. Otherwise, **false**.
    public var cancel: Swift.Bool {
        get throws {
            try _interop.get_Cancel()
        }
    }

    /// Gets or sets whether focus navigation should be canceled.
    /// - Returns: **true** if focus navigation should be canceled. Otherwise, **false**.
    public func cancel(_ value: Swift.Bool) throws {
        try _interop.put_Cancel(value)
    }

    /// Gets the direction that focus moved from element to element within the app UI.
    /// - Returns: The direction of focus movement.
    public var direction: WindowsUIXamlInput_FocusNavigationDirection {
        get throws {
            try _interop.get_Direction()
        }
    }

    /// Gets the input mode through which an element obtained focus.
    /// - Returns: How the element obtained focus.
    public var focusState: WindowsUIXaml_FocusState {
        get throws {
            try _interop.get_FocusState()
        }
    }

    /// Gets or sets a value that marks the routed event as handled. A **true** value for **Handled** prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled. **false** to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is **false**.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Gets or sets a value that marks the routed event as handled. A **true** value for **Handled** prevents most handlers along the event route from handling the same event again.
    /// - Returns: **true** to mark the routed event handled. **false** to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is **false**.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Gets the input device type from which input events are received.
    /// - Returns: The input device type.
    public var inputDevice: WindowsUIXamlInput_FocusInputDeviceKind {
        get throws {
            try _interop.get_InputDevice()
        }
    }

    /// Gets the most recent focused object.
    /// - Returns: The most recent focused object.
    public var newFocusedElement: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_interop.get_NewFocusedElement())
        }
    }

    /// Gets the most recent focused object.
    /// - Returns: The most recent focused object.
    public func newFocusedElement(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _interop.put_NewFocusedElement(value)
    }

    /// Gets the last focused object.
    /// - Returns: The last focused object.
    public var oldFocusedElement: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OldFocusedElement())
        }
    }

    // MARK: Windows.UI.Xaml.Input.ILosingFocusEventArgs2 members

    /// Attempts to cancel the ongoing focus action.
    /// - Returns: True, if the focus action is canceled; otherwise, false.
    public func tryCancel() throws -> Swift.Bool {
        try _ilosingFocusEventArgs2.tryCancel()
    }

    /// Attempts to redirect focus from the targeted element to the specified element.
    /// - Parameter element: The object on which to set focus.
    /// - Returns: True, if the focus action is redirected; otherwise, false.
    public func trySetNewFocusedElement(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _ilosingFocusEventArgs2.trySetNewFocusedElement(element)
    }

    // MARK: Windows.UI.Xaml.Input.ILosingFocusEventArgs3 members

    /// Gets the unique ID generated when a focus movement event is initiated.
    /// - Returns: The unique ID, if any. Otherwise, **null**.
    public var correlationId: Foundation.UUID {
        get throws {
            try _ilosingFocusEventArgs3.get_CorrelationId()
        }
    }

    // MARK: Implementation details

    private var _ilosingFocusEventArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs2>? = nil

    internal var _ilosingFocusEventArgs2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs2> {
        get throws {
            try _ilosingFocusEventArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs2.self)
            }
        }
    }

    private var _ilosingFocusEventArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs3>? = nil

    internal var _ilosingFocusEventArgs3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs3> {
        get throws {
            try _ilosingFocusEventArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlInput_ILosingFocusEventArgs3.self)
            }
        }
    }

    deinit {
        _ilosingFocusEventArgs2_storage?.release()
        _ilosingFocusEventArgs3_storage?.release()
    }
}