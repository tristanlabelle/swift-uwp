// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A helper class that enables global management of focus actions and events across all elements in an application.
public final class WindowsUIXamlInput_FocusManager: WindowsRuntime.WinRTImport<WindowsUIXamlInput_FocusManagerProjection> {
    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics2 members

    /// Attempts to change focus from the element with focus to the next focusable element in the specified direction.
    /// - Parameter focusNavigationDirection: The direction to traverse (in tab order).
    /// - Returns: **true** if focus moved; otherwise, **false**.
    public static func tryMoveFocus(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection) throws -> Swift.Bool {
        try _ifocusManagerStatics2.tryMoveFocus(focusNavigationDirection)
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics members

    /// Retrieves the element in the UI that has focus.
    /// - Returns: The object that has focus. Typically, this is a Control class.
    public static func getFocusedElement() throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_ifocusManagerStatics.getFocusedElement())
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics3 members

    /// Retrieves the element that should receive focus based on the specified navigation direction.
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the application UI.
    /// - Returns: **null** if focus cannot be set in the specified direction.
    public static func findNextFocusableElement(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection) throws -> WindowsUIXaml_UIElement {
        try COM.NullResult.unwrap(_ifocusManagerStatics3.findNextFocusableElement(focusNavigationDirection))
    }

    /// Retrieves the element that should receive focus based on the specified navigation direction and hint rectangle.
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the app UI.
    /// - Parameter hintRect: A bounding rectangle used to influence which element is most likely to be considered the next to receive focus. Examples where this can be useful include:
    /// - Returns: **null** if focus cannot be set in the specified direction.
    public static func findNextFocusableElement(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection, _ hintRect: WindowsFoundation_Rect) throws -> WindowsUIXaml_UIElement {
        try COM.NullResult.unwrap(_ifocusManagerStatics3.findNextFocusableElementWithHint(focusNavigationDirection, hintRect))
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics5 members

    /// Asynchronously attempts to set focus on an element when the application is initialized.
    /// - Parameter element: The object on which to set focus.
    /// - Parameter value: One of the values from the FocusState enumeration that specify how an elemnent can obtain focus.
    /// - Returns: The FocusMovementResult that indicates whether focus was successfully set.
    public static func tryFocusAsync(_ element: WindowsUIXaml_DependencyObject?, _ value: WindowsUIXaml_FocusState) throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlInput_FocusMovementResult?> {
        try COM.NullResult.unwrap(_ifocusManagerStatics5.tryFocusAsync(element, value))
    }

    /// Asynchronously attempts to change focus from the current element with focus to the next focusable element in the specified direction.
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the app UI.
    /// - Returns: The FocusMovementResult that indicates whether focus was successfully set.
    public static func tryMoveFocusAsync(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection) throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlInput_FocusMovementResult?> {
        try COM.NullResult.unwrap(_ifocusManagerStatics5.tryMoveFocusAsync(focusNavigationDirection))
    }

    /// Asynchronously attempts to change focus from the current element with focus to the next focusable element in the specified direction and subject to the specified navigation options.
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the app UI.
    /// - Parameter focusNavigationOptions: The navigation options used to identify the focus candidate.
    /// - Returns: The FocusMovementResult that indicates whether focus was successfully set.
    public static func tryMoveFocusAsync(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection, _ focusNavigationOptions: WindowsUIXamlInput_FindNextElementOptions?) throws -> WindowsFoundation_IAsyncOperation<WindowsUIXamlInput_FocusMovementResult?> {
        try COM.NullResult.unwrap(_ifocusManagerStatics5.tryMoveFocusWithOptionsAsync(focusNavigationDirection, focusNavigationOptions))
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics7 members

    /// Retrieves the focused element within the Xaml island container.
    /// - Returns: The object that has focus. Typically, this is a Control class.
    public static func getFocusedElement(_ xamlRoot: WindowsUIXaml_XamlRoot?) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_ifocusManagerStatics7.getFocusedElement(xamlRoot))
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics4 members

    /// Attempts to change focus from the element with focus to the next focusable element in the specified direction, using the specified navigation options.
    /// - Parameter focusNavigationDirection: The direction to traverse (in tab order).
    /// - Parameter focusNavigationOptions: The options to help identify the next element to receive focus with keyboard/controller/remote navigation.
    /// - Returns: **true** if focus moved; otherwise, **false**.
    public static func tryMoveFocus(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection, _ focusNavigationOptions: WindowsUIXamlInput_FindNextElementOptions?) throws -> Swift.Bool {
        try _ifocusManagerStatics4.tryMoveFocusWithOptions(focusNavigationDirection, focusNavigationOptions)
    }

    /// Retrieves the element that should receive focus based on the specified navigation direction.
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the app UI.
    /// - Returns: The next object to receive focus.
    public static func findNextElement(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_ifocusManagerStatics4.findNextElement(focusNavigationDirection))
    }

    /// Retrieves the first element that can receive focus based on the specified scope.
    /// - Parameter searchScope: The root object from which to search. If **null**, the search scope is the current window.
    /// - Returns: The first focusable object.
    public static func findFirstFocusableElement(_ searchScope: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_ifocusManagerStatics4.findFirstFocusableElement(searchScope))
    }

    /// Retrieves the last element that can receive focus based on the specified scope.
    /// - Parameter searchScope: The root object from which to search. If **null**, the search scope is the current window.
    /// - Returns: The last focusable object.
    public static func findLastFocusableElement(_ searchScope: WindowsUIXaml_DependencyObject?) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_ifocusManagerStatics4.findLastFocusableElement(searchScope))
    }

    /// Retrieves the element that should receive focus based on the specified navigation direction (cannot be used with tab navigation, see remarks).
    /// - Parameter focusNavigationDirection: The direction that focus moves from element to element within the app UI.
    /// - Parameter focusNavigationOptions: The options to help identify the next element to receive focus with keyboard/controller/remote navigation.
    /// - Returns: The next object to receive focus.
    public static func findNextElement(_ focusNavigationDirection: WindowsUIXamlInput_FocusNavigationDirection, _ focusNavigationOptions: WindowsUIXamlInput_FindNextElementOptions?) throws -> WindowsUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_ifocusManagerStatics4.findNextElementWithOptions(focusNavigationDirection, focusNavigationOptions))
    }

    // MARK: Windows.UI.Xaml.Input.IFocusManagerStatics6 members

    /// Occurs before an element actually receives focus. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    public static func gettingFocus(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlInput_GettingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ifocusManagerStatics6.add_GettingFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gettingFocus)
    }

    public static func gettingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ifocusManagerStatics6.remove_GettingFocus(token)
    }

    /// Occurs when an element within a container element (a focus scope) receives focus. This event is raised asynchronously, so focus might move before bubbling is complete.
    public static func gotFocus(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlInput_FocusManagerGotFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ifocusManagerStatics6.add_GotFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: gotFocus)
    }

    public static func gotFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ifocusManagerStatics6.remove_GotFocus(token)
    }

    /// Occurs before focus moves from the current element with focus to the target element. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    public static func losingFocus(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlInput_LosingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ifocusManagerStatics6.add_LosingFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: losingFocus)
    }

    public static func losingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ifocusManagerStatics6.remove_LosingFocus(token)
    }

    /// Occurs when an element within a container element (a focus scope) loses focus. This event is raised asynchronously, so focus might move again before bubbling is complete.
    public static func lostFocus(adding handler: WindowsFoundation_EventHandler<WindowsUIXamlInput_FocusManagerLostFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ifocusManagerStatics6.add_LostFocus(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: lostFocus)
    }

    public static func lostFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ifocusManagerStatics6.remove_LostFocus(token)
    }

    // MARK: Implementation details

    private static var _ifocusManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics2>? = nil

    internal static var _ifocusManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics2> {
        get throws {
            try _ifocusManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics2.iid)
            }
        }
    }

    private static var _ifocusManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics>? = nil

    internal static var _ifocusManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics> {
        get throws {
            try _ifocusManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics.iid)
            }
        }
    }

    private static var _ifocusManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics3>? = nil

    internal static var _ifocusManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics3> {
        get throws {
            try _ifocusManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics3.iid)
            }
        }
    }

    private static var _ifocusManagerStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics5>? = nil

    internal static var _ifocusManagerStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics5> {
        get throws {
            try _ifocusManagerStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics5.iid)
            }
        }
    }

    private static var _ifocusManagerStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics7>? = nil

    internal static var _ifocusManagerStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics7> {
        get throws {
            try _ifocusManagerStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics7.iid)
            }
        }
    }

    private static var _ifocusManagerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics4>? = nil

    internal static var _ifocusManagerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics4> {
        get throws {
            try _ifocusManagerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics4.iid)
            }
        }
    }

    private static var _ifocusManagerStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics6>? = nil

    internal static var _ifocusManagerStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics6> {
        get throws {
            try _ifocusManagerStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Input.FocusManager", id: CWinRT.SWRT_WindowsUIXamlInput_IFocusManagerStatics6.iid)
            }
        }
    }
}