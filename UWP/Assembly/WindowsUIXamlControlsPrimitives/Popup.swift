// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Displays content on top of existing content, within the bounds of the application window.
public final class WindowsUIXamlControlsPrimitives_Popup: WindowsRuntime.WinRTImport<WindowsUIXamlControlsPrimitives_PopupProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControlsPrimitives_PopupProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopup members

    /// Gets or sets the content to be hosted in the popup.
    /// - Returns: The content to be hosted in the popup.
    public var child: WindowsUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Child())
        }
    }

    /// Gets or sets the content to be hosted in the popup.
    /// - Returns: The content to be hosted in the popup.
    public func child(_ value: WindowsUIXaml_UIElement?) throws {
        try _interop.put_Child(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to child content of a Popup.
    /// - Returns: The strongly typed collection of Transition style elements.
    public var childTransitions: WindowsUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ChildTransitions())
        }
    }

    /// Gets or sets the collection of Transition style elements that apply to child content of a Popup.
    /// - Returns: The strongly typed collection of Transition style elements.
    public func childTransitions(_ value: WindowsUIXamlMediaAnimation_TransitionCollection?) throws {
        try _interop.put_ChildTransitions(value)
    }

    /// Gets or sets the distance between the left side of the application window and the left side of the popup.
    /// - Returns: A measurement in pixels.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _interop.get_HorizontalOffset()
        }
    }

    /// Gets or sets the distance between the left side of the application window and the left side of the popup.
    /// - Returns: A measurement in pixels.
    public func horizontalOffset(_ value: Swift.Double) throws {
        try _interop.put_HorizontalOffset(value)
    }

    /// Gets or sets a value that determines how the Popup can be dismissed.
    /// - Returns: **true** if *light dismiss* is enabled for this control; otherwise, **false**.
    public var isLightDismissEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsLightDismissEnabled()
        }
    }

    /// Gets or sets a value that determines how the Popup can be dismissed.
    /// - Returns: **true** if *light dismiss* is enabled for this control; otherwise, **false**.
    public func isLightDismissEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsLightDismissEnabled(value)
    }

    /// Gets or sets whether the popup is currently displayed on the screen.
    /// - Returns: **true** if the popup is currently displayed; otherwise, **false**. The default is **false**.
    public var isOpen: Swift.Bool {
        get throws {
            try _interop.get_IsOpen()
        }
    }

    /// Gets or sets whether the popup is currently displayed on the screen.
    /// - Returns: **true** if the popup is currently displayed; otherwise, **false**. The default is **false**.
    public func isOpen(_ value: Swift.Bool) throws {
        try _interop.put_IsOpen(value)
    }

    /// Gets or sets the distance between the top of the application window and the top of the popup.
    /// - Returns: A measurement in pixels.
    public var verticalOffset: Swift.Double {
        get throws {
            try _interop.get_VerticalOffset()
        }
    }

    /// Gets or sets the distance between the top of the application window and the top of the popup.
    /// - Returns: A measurement in pixels.
    public func verticalOffset(_ value: Swift.Double) throws {
        try _interop.put_VerticalOffset(value)
    }

    /// Fires when the IsOpen property is set to false.
    public func closed(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closed(token)
    }

    /// Fires when the IsOpen property is set to true.
    public func opened(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Opened(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopup2 members

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public var lightDismissOverlayMode: WindowsUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _ipopup2.get_LightDismissOverlayMode()
        }
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public func lightDismissOverlayMode(_ value: WindowsUIXamlControls_LightDismissOverlayMode) throws {
        try _ipopup2.put_LightDismissOverlayMode(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopup3 members

    /// Gets a value that indicates whether the popup is shown within the bounds of the XAML root.
    /// - Returns: **true** if the popup is shown within the bounds of the XAML root; otherwise, **false**.
    public var isConstrainedToRootBounds: Swift.Bool {
        get throws {
            try _ipopup3.get_IsConstrainedToRootBounds()
        }
    }

    /// Gets or sets a value that indicates whether the popup should be shown within the bounds of the XAML root.
    /// - Returns: **true** if the popup should be shown within the bounds of the XAML root; otherwise, **false**. The default is **true**.
    public var shouldConstrainToRootBounds: Swift.Bool {
        get throws {
            try _ipopup3.get_ShouldConstrainToRootBounds()
        }
    }

    /// Gets or sets a value that indicates whether the popup should be shown within the bounds of the XAML root.
    /// - Returns: **true** if the popup should be shown within the bounds of the XAML root; otherwise, **false**. The default is **true**.
    public func shouldConstrainToRootBounds(_ value: Swift.Bool) throws {
        try _ipopup3.put_ShouldConstrainToRootBounds(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopup4 members

    public var actualPlacement: WindowsUIXamlControlsPrimitives_PopupPlacementMode {
        get throws {
            try _ipopup4.get_ActualPlacement()
        }
    }

    public var desiredPlacement: WindowsUIXamlControlsPrimitives_PopupPlacementMode {
        get throws {
            try _ipopup4.get_DesiredPlacement()
        }
    }

    public func desiredPlacement(_ value: WindowsUIXamlControlsPrimitives_PopupPlacementMode) throws {
        try _ipopup4.put_DesiredPlacement(value)
    }

    public var placementTarget: WindowsUIXaml_FrameworkElement {
        get throws {
            try COM.NullResult.unwrap(_ipopup4.get_PlacementTarget())
        }
    }

    public func placementTarget(_ value: WindowsUIXaml_FrameworkElement?) throws {
        try _ipopup4.put_PlacementTarget(value)
    }

    public func actualPlacementChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ipopup4.add_ActualPlacementChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: actualPlacementChanged)
    }

    public func actualPlacementChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ipopup4.remove_ActualPlacementChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopupStatics2 members

    /// Identifies the LightDismissOverlayMode dependency property.
    /// - Returns: The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics2.get_LightDismissOverlayModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopupStatics members

    /// Gets the identifier for the Child dependency property.
    /// - Returns: The identifier for the Child dependency property.
    public static var childProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_ChildProperty())
        }
    }

    /// Identifies the ChildTransitions dependency property.
    /// - Returns: The identifier for the ChildTransitions dependency property.
    public static var childTransitionsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_ChildTransitionsProperty())
        }
    }

    /// Gets the identifier for the HorizontalOffset dependency property.
    /// - Returns: The identifier for the HorizontalOffset dependency property.
    public static var horizontalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_HorizontalOffsetProperty())
        }
    }

    /// Identifies the IsLightDismissEnabled dependency property.
    /// - Returns: The identifier for the IsLightDismissEnabled dependency property.
    public static var isLightDismissEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_IsLightDismissEnabledProperty())
        }
    }

    /// Gets the identifier for the IsOpen dependency property.
    /// - Returns: The identifier for the IsOpen dependency property.
    public static var isOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_IsOpenProperty())
        }
    }

    /// Gets the identifier for the VerticalOffset dependency property.
    /// - Returns: The identifier for the VerticalOffset dependency property.
    public static var verticalOffsetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics.get_VerticalOffsetProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopupStatics3 members

    /// Identifies the ShouldConstrainToRootBounds dependency property.
    /// - Returns: The identifier for the ShouldConstrainToRootBounds dependency property.
    public static var shouldConstrainToRootBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics3.get_ShouldConstrainToRootBoundsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IPopupStatics4 members

    public static var desiredPlacementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics4.get_DesiredPlacementProperty())
        }
    }

    public static var placementTargetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ipopupStatics4.get_PlacementTargetProperty())
        }
    }

    // MARK: Implementation details

    private var _ipopup2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup2>? = nil

    internal var _ipopup2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup2> {
        get throws {
            try _ipopup2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup2.self)
            }
        }
    }

    private var _ipopup3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup3>? = nil

    internal var _ipopup3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup3> {
        get throws {
            try _ipopup3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup3.self)
            }
        }
    }

    private var _ipopup4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup4>? = nil

    internal var _ipopup4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup4> {
        get throws {
            try _ipopup4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopup4.self)
            }
        }
    }

    deinit {
        _ipopup2_storage?.release()
        _ipopup3_storage?.release()
        _ipopup4_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Popup", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ipopupStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics2>? = nil

    internal static var _ipopupStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics2> {
        get throws {
            try _ipopupStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Popup", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics2.iid)
            }
        }
    }

    private static var _ipopupStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics>? = nil

    internal static var _ipopupStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics> {
        get throws {
            try _ipopupStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Popup", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics.iid)
            }
        }
    }

    private static var _ipopupStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics3>? = nil

    internal static var _ipopupStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics3> {
        get throws {
            try _ipopupStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Popup", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics3.iid)
            }
        }
    }

    private static var _ipopupStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics4>? = nil

    internal static var _ipopupStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics4> {
        get throws {
            try _ipopupStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Popup", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IPopupStatics4.iid)
            }
        }
    }
}