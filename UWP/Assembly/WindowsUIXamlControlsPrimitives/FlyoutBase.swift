// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the base class for flyout controls, such as Flyout and MenuFlyout.
open class WindowsUIXamlControlsPrimitives_FlyoutBase: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsPrimitives_FlyoutBase.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iflyoutBaseFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase members

    /// Gets or sets the default placement to be used for the flyout, in relation to its placement target.
    /// - Returns: A named constant of the enumeration that indicates where the flyout is placed in relation to its placement target. The default is Top.
    public var placement: WindowsUIXamlControlsPrimitives_FlyoutPlacementMode {
        get throws {
            try _iflyoutBase.get_Placement()
        }
    }

    /// Gets or sets the default placement to be used for the flyout, in relation to its placement target.
    /// - Returns: A named constant of the enumeration that indicates where the flyout is placed in relation to its placement target. The default is Top.
    public func placement(_ value: WindowsUIXamlControlsPrimitives_FlyoutPlacementMode) throws {
        try _iflyoutBase.put_Placement(value)
    }

    /// Occurs when the flyout is hidden.
    public func closed(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Closed(token)
    }

    /// Occurs when the flyout is shown.
    public func opened(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Opened(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opened)
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Opened(token)
    }

    /// Occurs before the flyout is shown.
    public func opening(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Opening(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: opening)
    }

    public func opening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Opening(token)
    }

    /// Shows the flyout placed in relation to the specified element.
    /// - Parameter placementTarget: The element to use as the flyout's placement target.
    public func showAt(_ placementTarget: WindowsUIXaml_FrameworkElement?) throws {
        try _iflyoutBase.showAt(placementTarget)
    }

    /// Closes the flyout.
    public func hide() throws {
        try _iflyoutBase.hide()
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase2 members

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public var allowFocusOnInteraction: Swift.Bool {
        get throws {
            try _iflyoutBase2.get_AllowFocusOnInteraction()
        }
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Returns: **true** if the element gets focus when a user interacts with it; otherwise, **false**.
    public func allowFocusOnInteraction(_ value: Swift.Bool) throws {
        try _iflyoutBase2.put_AllowFocusOnInteraction(value)
    }

    /// Gets or sets a value that specifies whether the control can receive focus when it's disabled.
    /// - Returns: **true** if the control can receive focus when it's disabled; otherwise, **false**.
    public var allowFocusWhenDisabled: Swift.Bool {
        get throws {
            try _iflyoutBase2.get_AllowFocusWhenDisabled()
        }
    }

    /// Gets or sets a value that specifies whether the control can receive focus when it's disabled.
    /// - Returns: **true** if the control can receive focus when it's disabled; otherwise, **false**.
    public func allowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try _iflyoutBase2.put_AllowFocusWhenDisabled(value)
    }

    /// Gets or sets a value that specifies the control's preference for whether it plays sounds.
    /// - Returns: An enumeration value that specifies the control's preference for whether it plays sounds. The default is **Default**.
    public var elementSoundMode: WindowsUIXaml_ElementSoundMode {
        get throws {
            try _iflyoutBase2.get_ElementSoundMode()
        }
    }

    /// Gets or sets a value that specifies the control's preference for whether it plays sounds.
    /// - Returns: An enumeration value that specifies the control's preference for whether it plays sounds. The default is **Default**.
    public func elementSoundMode(_ value: WindowsUIXaml_ElementSoundMode) throws {
        try _iflyoutBase2.put_ElementSoundMode(value)
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public var lightDismissOverlayMode: WindowsUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _iflyoutBase2.get_LightDismissOverlayMode()
        }
    }

    /// Gets or sets a value that specifies whether the area outside of a *light-dismiss* UI is darkened.
    /// - Returns: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is **Auto**.
    public func lightDismissOverlayMode(_ value: WindowsUIXamlControls_LightDismissOverlayMode) throws {
        try _iflyoutBase2.put_LightDismissOverlayMode(value)
    }

    /// Gets the element to use as the flyout's placement target.
    /// - Returns: The element to use as the flyout's placement target.
    public var target: WindowsUIXaml_FrameworkElement {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase2.get_Target())
        }
    }

    /// Occurs when the flyout starts to be hidden.
    public func closing(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsPrimitives_FlyoutBase?, WindowsUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase2.add_Closing(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closing)
    }

    public func closing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase2.remove_Closing(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase3 members

    /// Gets or sets an element that should receive pointer input events even when underneath the flyout's overlay.
    /// - Returns: The element that should receive pointer input events even when underneath the flyout's overlay.
    public var overlayInputPassThroughElement: WindowsUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase3.get_OverlayInputPassThroughElement())
        }
    }

    /// Gets or sets an element that should receive pointer input events even when underneath the flyout's overlay.
    /// - Returns: The element that should receive pointer input events even when underneath the flyout's overlay.
    public func overlayInputPassThroughElement(_ value: WindowsUIXaml_DependencyObject?) throws {
        try _iflyoutBase3.put_OverlayInputPassThroughElement(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase4 members

    /// Attempts to invoke a keyboard shortcut (accelerator).
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    public func tryInvokeKeyboardAccelerator(_ args: WindowsUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iflyoutBase4.tryInvokeKeyboardAccelerator(args)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase5 members

    /// Gets or sets a value that indicates whether animations are played when the flyout is opened or closed.
    /// - Returns: **true** if animations are played when the flyout is opened or closed; otherwise, **false**.
    public var areOpenCloseAnimationsEnabled: Swift.Bool {
        get throws {
            try _iflyoutBase5.get_AreOpenCloseAnimationsEnabled()
        }
    }

    /// Gets or sets a value that indicates whether animations are played when the flyout is opened or closed.
    /// - Returns: **true** if animations are played when the flyout is opened or closed; otherwise, **false**.
    public func areOpenCloseAnimationsEnabled(_ value: Swift.Bool) throws {
        try _iflyoutBase5.put_AreOpenCloseAnimationsEnabled(value)
    }

    /// Gets a value that indicates whether the input device used to open the flyout does not easily open the secondary commands.
    /// - Returns: **true** if the input device used to open the flyout does not easily open the secondary commands; otherwise, **false**.
    public var inputDevicePrefersPrimaryCommands: Swift.Bool {
        get throws {
            try _iflyoutBase5.get_InputDevicePrefersPrimaryCommands()
        }
    }

    /// Gets a value that indicates whether the flyout is open.
    /// - Returns: **true** if the flyout is open; otherwise, **false**.
    public var isOpen: Swift.Bool {
        get throws {
            try _iflyoutBase5.get_IsOpen()
        }
    }

    /// Gets or sets a value that indicates how a flyout behaves when shown.
    /// - Returns: A value of the enumeration that indicates how a flyout behaves when shown.
    public var showMode: WindowsUIXamlControlsPrimitives_FlyoutShowMode {
        get throws {
            try _iflyoutBase5.get_ShowMode()
        }
    }

    /// Gets or sets a value that indicates how a flyout behaves when shown.
    /// - Returns: A value of the enumeration that indicates how a flyout behaves when shown.
    public func showMode(_ value: WindowsUIXamlControlsPrimitives_FlyoutShowMode) throws {
        try _iflyoutBase5.put_ShowMode(value)
    }

    /// Shows the flyout placed in relation to the specified element using the specified options.
    /// - Parameter placementTarget: The element to use as the flyout's placement target.
    /// - Parameter showOptions: The options to use when showing the flyout.
    public func showAt(_ placementTarget: WindowsUIXaml_DependencyObject?, _ showOptions: WindowsUIXamlControlsPrimitives_FlyoutShowOptions?) throws {
        try _iflyoutBase5.showAt(placementTarget, showOptions)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBase6 members

    /// Gets a value that indicates whether the flyout is shown within the bounds of the XAML root.
    /// - Returns: **true** if the flyout is shown within the bounds of the XAML root; otherwise, **false**.
    public var isConstrainedToRootBounds: Swift.Bool {
        get throws {
            try _iflyoutBase6.get_IsConstrainedToRootBounds()
        }
    }

    /// Gets or sets a value that indicates whether the flyout should be shown within the bounds of the XAML root.
    /// - Returns: **true** if the flyout should be shown within the bounds of the XAML root; otherwise, **false**. The default is **false**.
    public var shouldConstrainToRootBounds: Swift.Bool {
        get throws {
            try _iflyoutBase6.get_ShouldConstrainToRootBounds()
        }
    }

    /// Gets or sets a value that indicates whether the flyout should be shown within the bounds of the XAML root.
    /// - Returns: **true** if the flyout should be shown within the bounds of the XAML root; otherwise, **false**. The default is **false**.
    public func shouldConstrainToRootBounds(_ value: Swift.Bool) throws {
        try _iflyoutBase6.put_ShouldConstrainToRootBounds(value)
    }

    /// Gets or sets the XamlRoot in which this flyout is being viewed.
    /// - Returns: The XamlRoot in which this flyout is being viewed. The default is **null**.
    public var xamlRoot: WindowsUIXaml_XamlRoot {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase6.get_XamlRoot())
        }
    }

    /// Gets or sets the XamlRoot in which this flyout is being viewed.
    /// - Returns: The XamlRoot in which this flyout is being viewed. The default is **null**.
    public func xamlRoot(_ value: WindowsUIXaml_XamlRoot?) throws {
        try _iflyoutBase6.put_XamlRoot(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides members

    /// When overridden in a derived class, initializes a control to show the flyout content as appropriate for the derived control. Note: This method has no base class implementation and must be overridden in a derived class.
    /// - Returns: The control that displays the content of the flyout.
    open func createPresenter() throws -> WindowsUIXamlControls_Control {
        try COM.NullResult.unwrap(_iflyoutBaseOverrides.createPresenter())
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides4 members

    /// Called just before a keyboard shortcut (accelerator) is processed in your app. Invoked whenever application code or internal processes call ProcessKeyboardAccelerators. Override this method to influence the default accelerator handling.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    open func onProcessKeyboardAccelerators(_ args: WindowsUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iflyoutBaseOverrides4.onProcessKeyboardAccelerators(args)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2 members

    /// Identifies the AllowFocusOnInteraction dependency property.
    /// - Returns: The identifier for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics2.get_AllowFocusOnInteractionProperty())
        }
    }

    /// Identifies the AllowFocusWhenDisabled dependency property.
    /// - Returns: The identifier for the AllowFocusWhenDisabled dependency property.
    public static var allowFocusWhenDisabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics2.get_AllowFocusWhenDisabledProperty())
        }
    }

    /// Identifies the ElementSoundMode dependency property.
    /// - Returns: The identifier for the ElementSoundMode dependency property.
    public static var elementSoundModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics2.get_ElementSoundModeProperty())
        }
    }

    /// Identifies the LightDismissOverlayMode dependency property.
    /// - Returns: The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics2.get_LightDismissOverlayModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics members

    /// Identifies the FlyoutBase.AttachedFlyout XAML attached property.
    /// - Returns: The identifier for the FlyoutBase.AttachedFlyout XAML attached property.
    public static var attachedFlyoutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_AttachedFlyoutProperty())
        }
    }

    /// Identifies the Placement dependency property.
    /// - Returns: The identifier for the Placement dependency property.
    public static var placementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_PlacementProperty())
        }
    }

    /// Gets the flyout associated with the specified element.
    /// - Parameter element: The element for which to get the associated flyout.
    /// - Returns: The flyout attached to the specified element.
    public static func getAttachedFlyout(_ element: WindowsUIXaml_FrameworkElement?) throws -> WindowsUIXamlControlsPrimitives_FlyoutBase {
        try COM.NullResult.unwrap(_iflyoutBaseStatics.getAttachedFlyout(element))
    }

    /// Associates the specified flyout with the specified FrameworkElement.
    /// - Parameter element: The element to associate the flyout with.
    /// - Parameter value: The flyout to associate with the specified element.
    public static func setAttachedFlyout(_ element: WindowsUIXaml_FrameworkElement?, _ value: WindowsUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _iflyoutBaseStatics.setAttachedFlyout(element, value)
    }

    /// Shows the flyout associated with the specified element, if any.
    /// - Parameter flyoutOwner: The element for which to show the associated flyout.
    public static func showAttachedFlyout(_ flyoutOwner: WindowsUIXaml_FrameworkElement?) throws {
        try _iflyoutBaseStatics.showAttachedFlyout(flyoutOwner)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics6 members

    /// Identifies the ShouldConstrainToRootBounds dependency property.
    /// - Returns: The identifier for the ShouldConstrainToRootBounds dependency property.
    public static var shouldConstrainToRootBoundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics6.get_ShouldConstrainToRootBoundsProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics5 members

    /// Identifies the AreOpenCloseAnimationsEnabled dependency property.
    /// - Returns: The identifier for the AreOpenCloseAnimationsEnabled dependency property.
    public static var areOpenCloseAnimationsEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics5.get_AreOpenCloseAnimationsEnabledProperty())
        }
    }

    /// Identifies the InputDevicePrefersPrimaryCommands dependency property.
    /// - Returns: The identifier for the InputDevicePrefersPrimaryCommands dependency property.
    public static var inputDevicePrefersPrimaryCommandsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics5.get_InputDevicePrefersPrimaryCommandsProperty())
        }
    }

    /// Identifies the IsOpen dependency property.
    /// - Returns: The identifier for the IsOpen dependency property.
    public static var isOpenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics5.get_IsOpenProperty())
        }
    }

    /// Identifies the ShowMode dependency property.
    /// - Returns: The identifier for the ShowMode dependency property.
    public static var showModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics5.get_ShowModeProperty())
        }
    }

    /// Identifies the Target dependency property.
    /// - Returns: The identifier for the Target dependency property.
    public static var targetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics5.get_TargetProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics3 members

    /// Identifies the **OverlayInputPassThroughElement** dependency property.
    /// - Returns: The identifier for the **OverlayInputPassThroughElement** dependency property.
    public static var overlayInputPassThroughElementProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics3.get_OverlayInputPassThroughElementProperty())
        }
    }

    // MARK: Implementation details

    private var _iflyoutBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase>? = nil

    internal var _iflyoutBase: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase> {
        get throws {
            try _iflyoutBase_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase.self)
            }
        }
    }

    private var _iflyoutBase2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase2>? = nil

    internal var _iflyoutBase2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase2> {
        get throws {
            try _iflyoutBase2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase2.self)
            }
        }
    }

    private var _iflyoutBase3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase3>? = nil

    internal var _iflyoutBase3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase3> {
        get throws {
            try _iflyoutBase3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase3.self)
            }
        }
    }

    private var _iflyoutBase4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase4>? = nil

    internal var _iflyoutBase4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase4> {
        get throws {
            try _iflyoutBase4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase4.self)
            }
        }
    }

    private var _iflyoutBase5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase5>? = nil

    internal var _iflyoutBase5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase5> {
        get throws {
            try _iflyoutBase5_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase5.self)
            }
        }
    }

    private var _iflyoutBase6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase6>? = nil

    internal var _iflyoutBase6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase6> {
        get throws {
            try _iflyoutBase6_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase6.self)
            }
        }
    }

    private var _iflyoutBaseOverrides_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides>? = nil

    internal var _iflyoutBaseOverrides: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides> {
        get throws {
            try _iflyoutBaseOverrides_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides.self)
            }
        }
    }

    private var _iflyoutBaseOverrides4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides4>? = nil

    internal var _iflyoutBaseOverrides4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides4> {
        get throws {
            try _iflyoutBaseOverrides4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides4.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBase>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iflyoutBase_storage?.release()
        _iflyoutBase2_storage?.release()
        _iflyoutBase3_storage?.release()
        _iflyoutBase4_storage?.release()
        _iflyoutBase5_storage?.release()
        _iflyoutBase6_storage?.release()
        _iflyoutBaseOverrides_storage?.release()
        _iflyoutBaseOverrides4_storage?.release()
    }

    private static var _iflyoutBaseFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseFactory>? = nil

    internal static var _iflyoutBaseFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseFactory> {
        get throws {
            try _iflyoutBaseFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseFactory.iid)
            }
        }
    }

    private static var _iflyoutBaseStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics2>? = nil

    internal static var _iflyoutBaseStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics2> {
        get throws {
            try _iflyoutBaseStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics2.iid)
            }
        }
    }

    private static var _iflyoutBaseStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics>? = nil

    internal static var _iflyoutBaseStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics> {
        get throws {
            try _iflyoutBaseStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics.iid)
            }
        }
    }

    private static var _iflyoutBaseStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics6>? = nil

    internal static var _iflyoutBaseStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics6> {
        get throws {
            try _iflyoutBaseStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics6.iid)
            }
        }
    }

    private static var _iflyoutBaseStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics5>? = nil

    internal static var _iflyoutBaseStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics5> {
        get throws {
            try _iflyoutBaseStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics5.iid)
            }
        }
    }

    private static var _iflyoutBaseStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics3>? = nil

    internal static var _iflyoutBaseStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics3> {
        get throws {
            try _iflyoutBaseStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.FlyoutBase", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseStatics3.iid)
            }
        }
    }

    // MARK: Override support

    private var _iflyoutBaseOverrides_outer: COM.COMExportedInterface = .uninitialized
    private var _iflyoutBaseOverrides4_outer: COM.COMExportedInterface = .uninitialized

    public override func _queryOverridesInterfacePointer(_ id: COM.COMInterfaceID) throws -> COM.IUnknownPointer? {
        if id == CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides.iid {
            if !_iflyoutBaseOverrides_outer.isInitialized {
                _iflyoutBaseOverrides_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControlsPrimitives_FlyoutBaseProjection.VirtualTables.iflyoutBaseOverrides)
            }
            return _iflyoutBaseOverrides_outer.unknownPointer.addingRef()
        }
        if id == CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IFlyoutBaseOverrides4.iid {
            if !_iflyoutBaseOverrides4_outer.isInitialized {
                _iflyoutBaseOverrides4_outer = COM.COMExportedInterface(
                    swiftObject: self, virtualTable: &WindowsUIXamlControlsPrimitives_FlyoutBaseProjection.VirtualTables.iflyoutBaseOverrides4)
            }
            return _iflyoutBaseOverrides4_outer.unknownPointer.addingRef()
        }
        return nil
    }
}