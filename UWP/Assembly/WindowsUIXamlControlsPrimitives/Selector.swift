// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that enables a user to select an item from a collection of items.
open class WindowsUIXamlControlsPrimitives_Selector: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Primitives.ISelector members

    /// Gets or sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
    /// - Returns: **true** if the SelectedItem is always synchronized with the current item in the ItemCollection; **false** if the SelectedItem is never synchronized with the current item; **null** if the SelectedItem is synchronized with the current item only if the Selector uses an ICollectionView. The default value is **null**/indeterminate.
    public var isSynchronizedWithCurrentItem: Swift.Bool? {
        get throws {
            try _iselector.get_IsSynchronizedWithCurrentItem()
        }
    }

    /// Gets or sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
    /// - Returns: **true** if the SelectedItem is always synchronized with the current item in the ItemCollection; **false** if the SelectedItem is never synchronized with the current item; **null** if the SelectedItem is synchronized with the current item only if the Selector uses an ICollectionView. The default value is **null**/indeterminate.
    public func isSynchronizedWithCurrentItem(_ value: Swift.Bool?) throws {
        try _iselector.put_IsSynchronizedWithCurrentItem(value)
    }

    /// Gets or sets the index of the selected item.
    /// - Returns: The index of the selected item. The default is -1, which indicates that no item is selected.
    public var selectedIndex: Swift.Int32 {
        get throws {
            try _iselector.get_SelectedIndex()
        }
    }

    /// Gets or sets the index of the selected item.
    /// - Returns: The index of the selected item. The default is -1, which indicates that no item is selected.
    public func selectedIndex(_ value: Swift.Int32) throws {
        try _iselector.put_SelectedIndex(value)
    }

    /// Gets or sets the selected item.
    /// - Returns: The selected item. The default is null.
    public var selectedItem: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iselector.get_SelectedItem())
        }
    }

    /// Gets or sets the selected item.
    /// - Returns: The selected item. The default is null.
    public func selectedItem(_ value: WindowsRuntime.IInspectable?) throws {
        try _iselector.put_SelectedItem(value)
    }

    /// Gets or sets the value of the selected item, obtained by using the SelectedValuePath.
    /// - Returns: The value of the selected item, obtained by using the SelectedValuePath, or null if no item is selected. The default value is null.
    public var selectedValue: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iselector.get_SelectedValue())
        }
    }

    /// Gets or sets the value of the selected item, obtained by using the SelectedValuePath.
    /// - Returns: The value of the selected item, obtained by using the SelectedValuePath, or null if no item is selected. The default value is null.
    public func selectedValue(_ value: WindowsRuntime.IInspectable?) throws {
        try _iselector.put_SelectedValue(value)
    }

    /// Gets or sets the property path that is used to get the SelectedValue property of the SelectedItem property.
    /// - Returns: The property path that is used to get the SelectedValue property of the SelectedItem property. The default is String.Empty.
    public var selectedValuePath: Swift.String {
        get throws {
            try _iselector.get_SelectedValuePath()
        }
    }

    /// Gets or sets the property path that is used to get the SelectedValue property of the SelectedItem property.
    /// - Returns: The property path that is used to get the SelectedValue property of the SelectedItem property. The default is String.Empty.
    public func selectedValuePath(_ value: Swift.String) throws {
        try _iselector.put_SelectedValuePath(value)
    }

    /// Occurs when the currently selected item changes.
    public func selectionChanged(adding handler: WindowsUIXamlControls_SelectionChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iselector.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: selectionChanged)
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iselector.remove_SelectionChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.ISelectorStatics members

    /// Identifies the IsSynchronizedWithCurrentItem dependency property.
    /// - Returns: The identifier for the IsSynchronizedWithCurrentItem dependency property.
    public static var isSynchronizedWithCurrentItemProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_IsSynchronizedWithCurrentItemProperty())
        }
    }

    /// Identifies the SelectedIndex dependency property.
    /// - Returns: The identifier for the SelectedIndex dependency property.
    public static var selectedIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedIndexProperty())
        }
    }

    /// Identifies the SelectedItem dependency property.
    /// - Returns: The identifier for the SelectedItem dependency property.
    public static var selectedItemProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedItemProperty())
        }
    }

    /// Gets the identifier for the SelectedValuePath dependency property.
    /// - Returns: The identifier for the SelectedValuePath dependency property.
    public static var selectedValuePathProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedValuePathProperty())
        }
    }

    /// Gets the identifier for the SelectedValue dependency property.
    /// - Returns: The identifier for the SelectedValue dependency property.
    public static var selectedValueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedValueProperty())
        }
    }

    /// Gets a value that indicates whether the specified Selector has the focus.
    /// - Parameter element: The Selector to evaluate.
    /// - Returns: **true** to indicate that the Selector has the focus; otherwise, **false**.
    public static func getIsSelectionActive(_ element: WindowsUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iselectorStatics.getIsSelectionActive(element)
    }

    // MARK: Implementation details

    private var _iselector_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelector>? = nil

    internal var _iselector: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelector> {
        get throws {
            try _iselector_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelector.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelector.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelector>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iselector_storage?.release()
    }

    private static var _iselectorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorFactory>? = nil

    internal static var _iselectorFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorFactory> {
        get throws {
            try _iselectorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Selector", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorFactory.iid)
            }
        }
    }

    private static var _iselectorStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorStatics>? = nil

    internal static var _iselectorStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorStatics> {
        get throws {
            try _iselectorStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.Selector", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_ISelectorStatics.iid)
            }
        }
    }
}