// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// A panel for positioning and arranging child LoopingSelector elements.
public final class WindowsUIXamlControlsPrimitives_LoopingSelectorPanel: WindowsRuntime.WinRTImport<WindowsUIXamlControlsPrimitives_LoopingSelectorPanelProjection>, WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfoProtocol {
    // MARK: Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo members

    /// Gets a value that determines whether the horizontal snap points for the LoopingSelectorPanel are equidistant from each other.
    /// - Returns: **True** if the horizontal snap points are equidistant from each other; otherwise, **false**.
    public var areHorizontalSnapPointsRegular: Swift.Bool {
        get throws {
            try _iscrollSnapPointsInfo.get_AreHorizontalSnapPointsRegular()
        }
    }

    /// Gets a value that determines whether the vertical snap points for the LoopingSelectorPanel are equidistant from each other.
    /// - Returns: **True** if the vertical snap points are regular equidistant from each other; otherwise, **false**.
    public var areVerticalSnapPointsRegular: Swift.Bool {
        get throws {
            try _iscrollSnapPointsInfo.get_AreVerticalSnapPointsRegular()
        }
    }

    /// Occurs when the horizontal snap points change.
    public func horizontalSnapPointsChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollSnapPointsInfo.add_HorizontalSnapPointsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: horizontalSnapPointsChanged)
    }

    public func horizontalSnapPointsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollSnapPointsInfo.remove_HorizontalSnapPointsChanged(token)
    }

    /// Occurs when the vertical snap points change.
    public func verticalSnapPointsChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollSnapPointsInfo.add_VerticalSnapPointsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: verticalSnapPointsChanged)
    }

    public func verticalSnapPointsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollSnapPointsInfo.remove_VerticalSnapPointsChanged(token)
    }

    /// Returns a read-only collection of numbers that represent the irregular snap points for the specified orientation.
    /// - Parameter orientation: The orientation of the requested snap points.
    /// - Parameter alignment: The alignment used by the caller when applying the requested snap points.
    /// - Returns: A read-only collection of numbers that represent the irregular snap points for the specified orientation, or an empty collection when no irregular snap points are present.
    public func getIrregularSnapPoints(_ orientation: WindowsUIXamlControls_Orientation, _ alignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment) throws -> WindowsFoundationCollections_IVectorView<Swift.Float> {
        try COM.NullResult.unwrap(_iscrollSnapPointsInfo.getIrregularSnapPoints(orientation, alignment))
    }

    /// Returns a read-only collection of numbers that represent the regular snap points for the specified orientation.
    /// - Parameter orientation: The orientation of the requested snap points.
    /// - Parameter alignment: The alignment used by the caller when applying the requested snap points.
    /// - Parameter offset: The offset of the first snap point.
    /// - Returns: A read-only collection of numbers that represent the regular snap points for the specified orientation, or an empty collection when no regular snap points are present.
    public func getRegularSnapPoints(_ orientation: WindowsUIXamlControls_Orientation, _ alignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment, _ offset: inout Swift.Float) throws -> Swift.Float {
        try _iscrollSnapPointsInfo.getRegularSnapPoints(orientation, alignment, &offset)
    }

    // MARK: Implementation details

    private var _iscrollSnapPointsInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo>? = nil

    internal var _iscrollSnapPointsInfo: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo> {
        get throws {
            try _iscrollSnapPointsInfo_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo.self)
            }
        }
    }

    deinit {
        _iscrollSnapPointsInfo_storage?.release()
    }
}