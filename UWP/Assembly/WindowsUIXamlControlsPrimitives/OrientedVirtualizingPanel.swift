// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Adds infrastructure (provides base class) for virtualizing layout containers that support spatial cues, such as VirtualizingStackPanel and WrapGrid.
open class WindowsUIXamlControlsPrimitives_OrientedVirtualizingPanel: WindowsRuntime.WinRTComposableClass, WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfoProtocol, WindowsUIXamlControls_IInsertionPanelProtocol {
    // MARK: Windows.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel members

    /// Gets or sets a value that determines how the OrientedVirtualizingPanel measures space for child elements for possible scrolling in the horizontal dimension.
    /// - Returns: **true** to support a potentially infinite horizontal layout dimension. **false** to restrict to available size.
    public var canHorizontallyScroll: Swift.Bool {
        get throws {
            try _iorientedVirtualizingPanel.get_CanHorizontallyScroll()
        }
    }

    /// Gets or sets a value that determines how the OrientedVirtualizingPanel measures space for child elements for possible scrolling in the horizontal dimension.
    /// - Returns: **true** to support a potentially infinite horizontal layout dimension. **false** to restrict to available size.
    public func canHorizontallyScroll(_ value: Swift.Bool) throws {
        try _iorientedVirtualizingPanel.put_CanHorizontallyScroll(value)
    }

    /// Gets or sets a value that determines how the OrientedVirtualizingPanel measures space for child elements for possible scrolling in the vertical dimension.
    /// - Returns: **true** to support a potentially infinite vertical layout dimension. **false** to restrict to available size.
    public var canVerticallyScroll: Swift.Bool {
        get throws {
            try _iorientedVirtualizingPanel.get_CanVerticallyScroll()
        }
    }

    /// Gets or sets a value that determines how the OrientedVirtualizingPanel measures space for child elements for possible scrolling in the vertical dimension.
    /// - Returns: **true** to support a potentially infinite vertical layout dimension. **false** to restrict to available size.
    public func canVerticallyScroll(_ value: Swift.Bool) throws {
        try _iorientedVirtualizingPanel.put_CanVerticallyScroll(value)
    }

    /// Gets the vertical size of the panel extent.
    /// - Returns: A value in pixels.
    public var extentHeight: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_ExtentHeight()
        }
    }

    /// Gets the horizontal size of the panel extent.
    /// - Returns: A value in pixels.
    public var extentWidth: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_ExtentWidth()
        }
    }

    /// Gets the horizontal offset of the scrolled content.
    /// - Returns: A value in pixels.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_HorizontalOffset()
        }
    }

    /// Gets or sets a reference to a ScrollViewer that is the scroll host or scroll owner for scrolling behavior of the OrientedVirtualizingPanel.
    /// - Returns: The scroll host or scroll owner for scrolling behavior.
    public var scrollOwner: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iorientedVirtualizingPanel.get_ScrollOwner())
        }
    }

    /// Gets or sets a reference to a ScrollViewer that is the scroll host or scroll owner for scrolling behavior of the OrientedVirtualizingPanel.
    /// - Returns: The scroll host or scroll owner for scrolling behavior.
    public func scrollOwner(_ value: WindowsRuntime.IInspectable?) throws {
        try _iorientedVirtualizingPanel.put_ScrollOwner(value)
    }

    /// Gets the vertical offset of the scrolled content.
    /// - Returns: A value in pixels.
    public var verticalOffset: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_VerticalOffset()
        }
    }

    /// Gets the vertical size of the viewport or content area.
    /// - Returns: A value in pixels.
    public var viewportHeight: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_ViewportHeight()
        }
    }

    /// Gets the horizontal size of the viewport or content area.
    /// - Returns: A value in pixels.
    public var viewportWidth: Swift.Double {
        get throws {
            try _iorientedVirtualizingPanel.get_ViewportWidth()
        }
    }

    /// Scrolls content by one line toward the top.
    public func lineUp() throws {
        try _iorientedVirtualizingPanel.lineUp()
    }

    /// Scrolls content by one line toward the bottom.
    public func lineDown() throws {
        try _iorientedVirtualizingPanel.lineDown()
    }

    /// Scrolls content by one line toward the left.
    public func lineLeft() throws {
        try _iorientedVirtualizingPanel.lineLeft()
    }

    /// Scrolls content by one line toward the right.
    public func lineRight() throws {
        try _iorientedVirtualizingPanel.lineRight()
    }

    /// Scrolls content by one page toward the top.
    public func pageUp() throws {
        try _iorientedVirtualizingPanel.pageUp()
    }

    /// Scrolls content by one page toward the bottom.
    public func pageDown() throws {
        try _iorientedVirtualizingPanel.pageDown()
    }

    /// Scrolls content by one page toward the left.
    public func pageLeft() throws {
        try _iorientedVirtualizingPanel.pageLeft()
    }

    /// Scrolls content by one page toward the right.
    public func pageRight() throws {
        try _iorientedVirtualizingPanel.pageRight()
    }

    /// Scrolls content by one mouse-wheel click toward the top.
    public func mouseWheelUp() throws {
        try _iorientedVirtualizingPanel.mouseWheelUp()
    }

    /// Scrolls content by one mouse-wheel click toward the bottom.
    public func mouseWheelDown() throws {
        try _iorientedVirtualizingPanel.mouseWheelDown()
    }

    /// Scrolls content by one mouse-wheel click toward the left.
    public func mouseWheelLeft() throws {
        try _iorientedVirtualizingPanel.mouseWheelLeft()
    }

    /// Scrolls content by one mouse-wheel click toward the right.
    public func mouseWheelRight() throws {
        try _iorientedVirtualizingPanel.mouseWheelRight()
    }

    /// Changes the horizontal offset of content within the OrientedVirtualizingPanel viewport.
    /// - Parameter offset: The horizontal offset to set, in pixels.
    public func setHorizontalOffset(_ offset: Swift.Double) throws {
        try _iorientedVirtualizingPanel.setHorizontalOffset(offset)
    }

    /// Changes the vertical offset of content within the OrientedVirtualizingPanel viewport.
    /// - Parameter offset: The offset to set, in pixels.
    public func setVerticalOffset(_ offset: Swift.Double) throws {
        try _iorientedVirtualizingPanel.setVerticalOffset(offset)
    }

    /// Changes existing offsets in order to make the provided element visible in the viewport, and returns a Rect measurement of the area.
    /// - Parameter visual: The element to make visible.
    /// - Parameter rectangle: A rectangle representing the element's coordinate space.
    /// - Returns: A rectangle representing the input *rectangle*Rect transformed using the OrientedVirtualizingPanel coordinate space after scrolling happens. 
    public func makeVisible(_ visual: WindowsUIXaml_UIElement?, _ rectangle: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _iorientedVirtualizingPanel.makeVisible(visual, rectangle)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo members

    /// Gets a value that indicates whether the horizontal snap points for the OrientedVirtualizingPanel are equidistant from each other.
    /// - Returns: **true** if the horizontal snap points for the OrientedVirtualizingPanel are equidistant from each other; otherwise, **false**.
    public var areHorizontalSnapPointsRegular: Swift.Bool {
        get throws {
            try _iscrollSnapPointsInfo.get_AreHorizontalSnapPointsRegular()
        }
    }

    /// Gets a value that indicates whether the vertical snap points for the OrientedVirtualizingPanel are equidistant from each other.
    /// - Returns: **true** if the vertical snap points for the OrientedVirtualizingPanel are equidistant from each other; otherwise, **false**.
    public var areVerticalSnapPointsRegular: Swift.Bool {
        get throws {
            try _iscrollSnapPointsInfo.get_AreVerticalSnapPointsRegular()
        }
    }

    /// Fires when the measurements for horizontal snap points change.
    public func horizontalSnapPointsChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollSnapPointsInfo.add_HorizontalSnapPointsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: horizontalSnapPointsChanged)
    }

    public func horizontalSnapPointsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollSnapPointsInfo.remove_HorizontalSnapPointsChanged(token)
    }

    /// Fires when the measurements for vertical snap points change.
    public func verticalSnapPointsChanged(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iscrollSnapPointsInfo.add_VerticalSnapPointsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: verticalSnapPointsChanged)
    }

    public func verticalSnapPointsChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iscrollSnapPointsInfo.remove_VerticalSnapPointsChanged(token)
    }

    /// Returns the set of distances between irregular snap points for a specified orientation and alignment.
    /// - Parameter orientation: The orientation for the desired snap point set.
    /// - Parameter alignment: The alignment to use when applying the snap points.
    /// - Returns: The read-only collection of snap point distances. Returns an empty collection when no snap points are present.
    public func getIrregularSnapPoints(_ orientation: WindowsUIXamlControls_Orientation, _ alignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment) throws -> WindowsFoundationCollections_IVectorView<Swift.Float> {
        try COM.NullResult.unwrap(_iscrollSnapPointsInfo.getIrregularSnapPoints(orientation, alignment))
    }

    /// Gets the distance between regular snap points for a specified orientation and alignment.
    /// - Parameter orientation: The orientation for the desired snap point set.
    /// - Parameter alignment: The alignment to use when applying the snap points.
    /// - Parameter offset: Out parameter. The offset of the first snap point.
    /// - Returns: The distance between the equidistant snap points. Returns 0 when no snap points are present.
    public func getRegularSnapPoints(_ orientation: WindowsUIXamlControls_Orientation, _ alignment: WindowsUIXamlControlsPrimitives_SnapPointsAlignment, _ offset: inout Swift.Float) throws -> Swift.Float {
        try _iscrollSnapPointsInfo.getRegularSnapPoints(orientation, alignment, &offset)
    }

    // MARK: Windows.UI.Xaml.Controls.IInsertionPanel members

    /// Returns the index values of the items that the specified point is between.
    /// - Parameter position: The point for which to get insertion indexes.
    /// - Parameter first: The index of the item before the specified point.
    /// - Parameter second: The index of the item after the specified point.
    public func getInsertionIndexes(_ position: WindowsFoundation_Point, _ first: inout Swift.Int32, _ second: inout Swift.Int32) throws {
        try _iinsertionPanel.getInsertionIndexes(position, &first, &second)
    }

    // MARK: Implementation details

    private var _iorientedVirtualizingPanel_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanel>? = nil

    internal var _iorientedVirtualizingPanel: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanel> {
        get throws {
            try _iorientedVirtualizingPanel_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanel.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanel.self)
            }
        }
    }

    private var _iscrollSnapPointsInfo_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo>? = nil

    internal var _iscrollSnapPointsInfo: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo> {
        get throws {
            try _iscrollSnapPointsInfo_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollSnapPointsInfo.self)
            }
        }
    }

    private var _iinsertionPanel_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInsertionPanel>? = nil

    internal var _iinsertionPanel: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControls_IInsertionPanel> {
        get throws {
            try _iinsertionPanel_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControls_IInsertionPanel.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControls_IInsertionPanel.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanel>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iorientedVirtualizingPanel_storage?.release()
        _iscrollSnapPointsInfo_storage?.release()
        _iinsertionPanel_storage?.release()
    }

    private static var _iorientedVirtualizingPanelFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanelFactory>? = nil

    internal static var _iorientedVirtualizingPanelFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanelFactory> {
        get throws {
            try _iorientedVirtualizingPanelFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IOrientedVirtualizingPanelFactory.iid)
            }
        }
    }
}