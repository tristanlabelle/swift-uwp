// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that lets a user choose a color from a visual spectrum.
open class WindowsUIXamlControlsPrimitives_ColorSpectrum: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Primitives.IColorSpectrumFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsPrimitives_ColorSpectrum.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._icolorSpectrumFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IColorSpectrum members

    /// Gets or sets the current color value.
    /// - Returns: The current color value.
    public var color: WindowsUI_Color {
        get throws {
            try _icolorSpectrum.get_Color()
        }
    }

    /// Gets or sets the current color value.
    /// - Returns: The current color value.
    public func color(_ value: WindowsUI_Color) throws {
        try _icolorSpectrum.put_Color(value)
    }

    /// Gets or sets a value that indicates how the Hue-Saturation-Value (HSV) color components are mapped onto the ColorSpectrum.
    /// - Returns: A value of the enumeration. The default is **HueSaturation**.
    public var components: WindowsUIXamlControls_ColorSpectrumComponents {
        get throws {
            try _icolorSpectrum.get_Components()
        }
    }

    /// Gets or sets a value that indicates how the Hue-Saturation-Value (HSV) color components are mapped onto the ColorSpectrum.
    /// - Returns: A value of the enumeration. The default is **HueSaturation**.
    public func components(_ value: WindowsUIXamlControls_ColorSpectrumComponents) throws {
        try _icolorSpectrum.put_Components(value)
    }

    /// Gets or sets the current color value as a Vector4.
    /// - Returns: The current HSV color value.
    public var hsvColor: WindowsFoundationNumerics_Vector4 {
        get throws {
            try _icolorSpectrum.get_HsvColor()
        }
    }

    /// Gets or sets the current color value as a Vector4.
    /// - Returns: The current HSV color value.
    public func hsvColor(_ value: WindowsFoundationNumerics_Vector4) throws {
        try _icolorSpectrum.put_HsvColor(value)
    }

    /// Gets or sets the maximum Hue value in the range 0-359.
    /// - Returns: The maximum Hue value in the range 0-359. The default is 359.
    public var maxHue: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MaxHue()
        }
    }

    /// Gets or sets the maximum Hue value in the range 0-359.
    /// - Returns: The maximum Hue value in the range 0-359. The default is 359.
    public func maxHue(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MaxHue(value)
    }

    /// Gets or sets the maximum Saturation value in the range 0-100.
    /// - Returns: The maximum Saturation value in the range 0-100. The default is 100.
    public var maxSaturation: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MaxSaturation()
        }
    }

    /// Gets or sets the maximum Saturation value in the range 0-100.
    /// - Returns: The maximum Saturation value in the range 0-100. The default is 100.
    public func maxSaturation(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MaxSaturation(value)
    }

    /// Gets or sets the maximum Value value in the range 0-100.
    /// - Returns: The maximum Value value in the range 0-100. The default is 100.
    public var maxValue: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MaxValue()
        }
    }

    /// Gets or sets the maximum Value value in the range 0-100.
    /// - Returns: The maximum Value value in the range 0-100. The default is 100.
    public func maxValue(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MaxValue(value)
    }

    /// Gets or sets the minimum Hue value in the range 0-359.
    /// - Returns: The minimum Hue value in the range 0-359. The default is 0.
    public var minHue: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MinHue()
        }
    }

    /// Gets or sets the minimum Hue value in the range 0-359.
    /// - Returns: The minimum Hue value in the range 0-359. The default is 0.
    public func minHue(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MinHue(value)
    }

    /// Gets or sets the minimum Saturation value in the range 0-100.
    /// - Returns: The minimum Saturation value in the range 0-100. The default is 100.
    public var minSaturation: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MinSaturation()
        }
    }

    /// Gets or sets the minimum Saturation value in the range 0-100.
    /// - Returns: The minimum Saturation value in the range 0-100. The default is 100.
    public func minSaturation(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MinSaturation(value)
    }

    /// Gets or sets the minimum Value value in the range 0-100.
    /// - Returns: The minimum Value value in the range 0-100. The default is 100.
    public var minValue: Swift.Int32 {
        get throws {
            try _icolorSpectrum.get_MinValue()
        }
    }

    /// Gets or sets the minimum Value value in the range 0-100.
    /// - Returns: The minimum Value value in the range 0-100. The default is 100.
    public func minValue(_ value: Swift.Int32) throws {
        try _icolorSpectrum.put_MinValue(value)
    }

    /// Gets or sets a value that indicates whether the ColorSpectrum is shown as a square or a circle.
    /// - Returns: A value of the enumeration. The default is **Box**, which shows the spectrum as a square.
    public var shape: WindowsUIXamlControls_ColorSpectrumShape {
        get throws {
            try _icolorSpectrum.get_Shape()
        }
    }

    /// Gets or sets a value that indicates whether the ColorSpectrum is shown as a square or a circle.
    /// - Returns: A value of the enumeration. The default is **Box**, which shows the spectrum as a square.
    public func shape(_ value: WindowsUIXamlControls_ColorSpectrumShape) throws {
        try _icolorSpectrum.put_Shape(value)
    }

    /// Occurs when the Color property has changed.
    public func colorChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsPrimitives_ColorSpectrum?, WindowsUIXamlControls_ColorChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icolorSpectrum.add_ColorChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: colorChanged)
    }

    public func colorChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icolorSpectrum.remove_ColorChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IColorSpectrumStatics members

    /// Identifies the Color dependency property.
    /// - Returns: The identifier for the Color dependency property.
    public static var colorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_ColorProperty())
        }
    }

    /// Identifies the Components dependency property.
    /// - Returns: The identifier for the Components dependency property.
    public static var componentsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_ComponentsProperty())
        }
    }

    /// Identifies the HsvColor dependency property.
    /// - Returns: The identifier for the HsvColor dependency property.
    public static var hsvColorProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_HsvColorProperty())
        }
    }

    /// Identifies the MaxHue dependency property.
    /// - Returns: The identifier for the MaxHue dependency property.
    public static var maxHueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MaxHueProperty())
        }
    }

    /// Identifies the MaxSaturation dependency property.
    /// - Returns: The identifier for the MaxSaturation dependency property.
    public static var maxSaturationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MaxSaturationProperty())
        }
    }

    /// Identifies the MaxValue dependency property.
    /// - Returns: The identifier for the MaxValue dependency property.
    public static var maxValueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MaxValueProperty())
        }
    }

    /// Identifies the MinHue dependency property.
    /// - Returns: The identifier for the MinHue dependency property.
    public static var minHueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MinHueProperty())
        }
    }

    /// Identifies the MinSaturation dependency property.
    /// - Returns: The identifier for the MinSaturation dependency property.
    public static var minSaturationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MinSaturationProperty())
        }
    }

    /// Identifies the MinValue dependency property.
    /// - Returns: The identifier for the MinValue dependency property.
    public static var minValueProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_MinValueProperty())
        }
    }

    /// Identifies the Shape dependency property.
    /// - Returns: The identifier for the Shape dependency property.
    public static var shapeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icolorSpectrumStatics.get_ShapeProperty())
        }
    }

    // MARK: Implementation details

    private var _icolorSpectrum_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrum>? = nil

    internal var _icolorSpectrum: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrum> {
        get throws {
            try _icolorSpectrum_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrum.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrum.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrum>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _icolorSpectrum_storage?.release()
    }

    private static var _icolorSpectrumFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumFactory>? = nil

    internal static var _icolorSpectrumFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumFactory> {
        get throws {
            try _icolorSpectrumFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.ColorSpectrum", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumFactory.iid)
            }
        }
    }

    private static var _icolorSpectrumStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumStatics>? = nil

    internal static var _icolorSpectrumStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumStatics> {
        get throws {
            try _icolorSpectrumStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.ColorSpectrum", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IColorSpectrumStatics.iid)
            }
        }
    }
}