// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that raises its Click event repeatedly when it is pressed and held.
public final class WindowsUIXamlControlsPrimitives_RepeatButton: WindowsRuntime.WinRTImport<WindowsUIXamlControlsPrimitives_RepeatButtonProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControlsPrimitives_RepeatButtonProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IRepeatButton members

    /// Gets or sets the time, in milliseconds, that the RepeatButton waits when it is pressed before it starts repeating the click action.
    /// - Returns: The time, in milliseconds, that the RepeatButton waits when it is pressed before it starts repeating the click action. The default is 250.
    public var delay: Swift.Int32 {
        get throws {
            try _interop.get_Delay()
        }
    }

    /// Gets or sets the time, in milliseconds, that the RepeatButton waits when it is pressed before it starts repeating the click action.
    /// - Returns: The time, in milliseconds, that the RepeatButton waits when it is pressed before it starts repeating the click action. The default is 250.
    public func delay(_ value: Swift.Int32) throws {
        try _interop.put_Delay(value)
    }

    /// Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.
    /// - Returns: The time, in milliseconds, between repetitions of the click action, as soon as repeating starts. The default is 250.
    public var interval: Swift.Int32 {
        get throws {
            try _interop.get_Interval()
        }
    }

    /// Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.
    /// - Returns: The time, in milliseconds, between repetitions of the click action, as soon as repeating starts. The default is 250.
    public func interval(_ value: Swift.Int32) throws {
        try _interop.put_Interval(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IRepeatButtonStatics members

    /// Identifies the Delay dependency property.
    /// - Returns: The identifier for the Delay dependency property.
    public static var delayProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irepeatButtonStatics.get_DelayProperty())
        }
    }

    /// Identifies the Interval dependency property.
    /// - Returns: The identifier for the Interval dependency property.
    public static var intervalProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_irepeatButtonStatics.get_IntervalProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.RepeatButton", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _irepeatButtonStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IRepeatButtonStatics>? = nil

    internal static var _irepeatButtonStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IRepeatButtonStatics> {
        get throws {
            try _irepeatButtonStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.RepeatButton", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IRepeatButtonStatics.iid)
            }
        }
    }
}