// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a control that provides a scroll bar that has a sliding Thumb whose position corresponds to a value.
public final class WindowsUIXamlControlsPrimitives_ScrollBar: WindowsRuntime.WinRTImport<WindowsUIXamlControlsPrimitives_ScrollBarProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControlsPrimitives_ScrollBarProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IScrollBar members

    /// Gets or sets a value that results in different input indicator modes for the ScrollBar.
    /// - Returns: A value of the enumeration. The default is **None**.
    public var indicatorMode: WindowsUIXamlControlsPrimitives_ScrollingIndicatorMode {
        get throws {
            try _interop.get_IndicatorMode()
        }
    }

    /// Gets or sets a value that results in different input indicator modes for the ScrollBar.
    /// - Returns: A value of the enumeration. The default is **None**.
    public func indicatorMode(_ value: WindowsUIXamlControlsPrimitives_ScrollingIndicatorMode) throws {
        try _interop.put_IndicatorMode(value)
    }

    /// Gets or sets a value that indicates whether the ScrollBar is displayed horizontally or vertically.
    /// - Returns: An Orientation enumeration value that defines whether the ScrollBar is displayed horizontally or vertically. The default is **Horizontal**. Specific control templates might change this value, which would cause the templated value to be the apparent runtime default.
    public var orientation: WindowsUIXamlControls_Orientation {
        get throws {
            try _interop.get_Orientation()
        }
    }

    /// Gets or sets a value that indicates whether the ScrollBar is displayed horizontally or vertically.
    /// - Returns: An Orientation enumeration value that defines whether the ScrollBar is displayed horizontally or vertically. The default is **Horizontal**. Specific control templates might change this value, which would cause the templated value to be the apparent runtime default.
    public func orientation(_ value: WindowsUIXamlControls_Orientation) throws {
        try _interop.put_Orientation(value)
    }

    /// Gets or sets the amount of the scrollable content that is currently visible.
    /// - Returns: The amount of the scrollable content that is currently visible. The default is 0.
    public var viewportSize: Swift.Double {
        get throws {
            try _interop.get_ViewportSize()
        }
    }

    /// Gets or sets the amount of the scrollable content that is currently visible.
    /// - Returns: The amount of the scrollable content that is currently visible. The default is 0.
    public func viewportSize(_ value: Swift.Double) throws {
        try _interop.put_ViewportSize(value)
    }

    /// Occurs one or more times as content scrolls in a ScrollBar when the user moves the Thumb by using the mouse.
    public func scroll(adding handler: WindowsUIXamlControlsPrimitives_ScrollEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Scroll(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: scroll)
    }

    public func scroll(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Scroll(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Primitives.IScrollBarStatics members

    /// Identifies the IndicatorMode dependency property.
    /// - Returns: The identifier for the IndicatorMode dependency property.
    public static var indicatorModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollBarStatics.get_IndicatorModeProperty())
        }
    }

    /// Identifies the Orientation dependency property.
    /// - Returns: The identifier for the Orientation dependency property.
    public static var orientationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollBarStatics.get_OrientationProperty())
        }
    }

    /// Identifies the ViewportSize dependency property.
    /// - Returns: The identifier for the ViewportSize dependency property.
    public static var viewportSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iscrollBarStatics.get_ViewportSizeProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.ScrollBar", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iscrollBarStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollBarStatics>? = nil

    internal static var _iscrollBarStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollBarStatics> {
        get throws {
            try _iscrollBarStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Primitives.ScrollBar", id: CWinRT.SWRT_WindowsUIXamlControlsPrimitives_IScrollBarStatics.iid)
            }
        }
    }
}