// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Allows the application to take screen captures.
public final class WindowsGraphicsCapture_GraphicsCaptureSession: WindowsRuntime.WinRTImport<WindowsGraphicsCapture_GraphicsCaptureSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Graphics.Capture.IGraphicsCaptureSession members

    /// Starts the capture session, allowing the application to capture frames.
    public func startCapture() throws {
        try _interop.startCapture()
    }

    // MARK: Windows.Graphics.Capture.IGraphicsCaptureSession2 members

    /// Gets or sets a value specifying whether the capture session will include the cursor in the captured content.
    /// - Returns: True if the cursor should be captured; otherwise, false.
    public var isCursorCaptureEnabled: Swift.Bool {
        get throws {
            try _igraphicsCaptureSession2.get_IsCursorCaptureEnabled()
        }
    }

    /// Gets or sets a value specifying whether the capture session will include the cursor in the captured content.
    /// - Returns: True if the cursor should be captured; otherwise, false.
    public func isCursorCaptureEnabled(_ value: Swift.Bool) throws {
        try _igraphicsCaptureSession2.put_IsCursorCaptureEnabled(value)
    }

    // MARK: Windows.Graphics.Capture.IGraphicsCaptureSession3 members

    public var isBorderRequired: Swift.Bool {
        get throws {
            try _igraphicsCaptureSession3.get_IsBorderRequired()
        }
    }

    public func isBorderRequired(_ value: Swift.Bool) throws {
        try _igraphicsCaptureSession3.put_IsBorderRequired(value)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the capture session and releases resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Graphics.Capture.IGraphicsCaptureSessionStatics members

    /// Returns true if screen capture is supported on the device.
    /// - Returns: True if screen capture is supported on the device.
    public static func isSupported() throws -> Swift.Bool {
        try _igraphicsCaptureSessionStatics.isSupported()
    }

    // MARK: Implementation details

    private var _igraphicsCaptureSession2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession2>? = nil

    internal var _igraphicsCaptureSession2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession2> {
        get throws {
            try _igraphicsCaptureSession2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession2.iid).cast(to: CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession2.self)
            }
        }
    }

    private var _igraphicsCaptureSession3_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession3>? = nil

    internal var _igraphicsCaptureSession3: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession3> {
        get throws {
            try _igraphicsCaptureSession3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession3.iid).cast(to: CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSession3.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _igraphicsCaptureSession2_storage?.release()
        _igraphicsCaptureSession3_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _igraphicsCaptureSessionStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSessionStatics>? = nil

    internal static var _igraphicsCaptureSessionStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSessionStatics> {
        get throws {
            try _igraphicsCaptureSessionStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Capture.GraphicsCaptureSession", id: CWinRT.SWRT_WindowsGraphicsCapture_IGraphicsCaptureSessionStatics.iid)
            }
        }
    }
}