// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a collection of certificate stores.
public enum WindowsSecurityCryptographyCertificates_CertificateStores {
    // MARK: Windows.Security.Cryptography.Certificates.ICertificateStoresStatics members

    /// Gets the certificate store of intermediate certification authorities for an app.
    /// - Returns: The certificate store of intermediate certification authorities for an app.
    public static var intermediateCertificationAuthorities: WindowsSecurityCryptographyCertificates_CertificateStore {
        get throws {
            try COM.NullResult.unwrap(_icertificateStoresStatics.get_IntermediateCertificationAuthorities())
        }
    }

    /// Gets the certificate store of trusted root certificates for an app.
    /// - Returns: The certificate store of trusted root certificates for an app.
    public static var trustedRootCertificationAuthorities: WindowsSecurityCryptographyCertificates_CertificateStore {
        get throws {
            try COM.NullResult.unwrap(_icertificateStoresStatics.get_TrustedRootCertificationAuthorities())
        }
    }

    /// Get all certificates from the certificate stores.
    /// - Returns: An asynchronous operation to retrieve the list of certificates.
    public static func findAllAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?>?> {
        try COM.NullResult.unwrap(_icertificateStoresStatics.findAllAsync())
    }

    /// Get all certificates from the certificate stores that match the specified query parameters.
    /// - Parameter query: The certificate values to search for.
    /// - Returns: An asynchronous operation to retrieve the list of certificates.
    public static func findAllAsync(_ query: WindowsSecurityCryptographyCertificates_CertificateQuery?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?>?> {
        try COM.NullResult.unwrap(_icertificateStoresStatics.findAllWithQueryAsync(query))
    }

    /// Gets a certificate store from the collection of certificate stores by name.
    /// - Parameter storeName: The name of the certificate store to return. The *storeName* parameter value cannot be "MY".
    /// - Returns: The requested certificate store.
    public static func getStoreByName(_ storeName: Swift.String) throws -> WindowsSecurityCryptographyCertificates_CertificateStore {
        try COM.NullResult.unwrap(_icertificateStoresStatics.getStoreByName(storeName))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateStoresStatics2 members

    /// Gets a user certificate store from the collection of certificate stores by name.
    /// - Parameter storeName: The name of the user certificate store to return.
    /// - Returns: The user certificate store.
    public static func getUserStoreByName(_ storeName: Swift.String) throws -> WindowsSecurityCryptographyCertificates_UserCertificateStore {
        try COM.NullResult.unwrap(_icertificateStoresStatics2.getUserStoreByName(storeName))
    }

    // MARK: Implementation details

    private static var _icertificateStoresStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics>? = nil

    internal static var _icertificateStoresStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics> {
        get throws {
            try _icertificateStoresStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateStores", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics.iid)
            }
        }
    }

    private static var _icertificateStoresStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics2>? = nil

    internal static var _icertificateStoresStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics2> {
        get throws {
            try _icertificateStoresStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateStores", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateStoresStatics2.iid)
            }
        }
    }
}