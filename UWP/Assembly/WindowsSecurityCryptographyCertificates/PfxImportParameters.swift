// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents PFX import parameters.
public final class WindowsSecurityCryptographyCertificates_PfxImportParameters: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCertificates_PfxImportParametersProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCryptographyCertificates_PfxImportParametersProjection.self))
    }

    // MARK: Windows.Security.Cryptography.Certificates.IPfxImportParameters members

    /// Gets or sets the container name prefix.
    /// - Returns: The container name prefix.
    public var containerNamePrefix: Swift.String {
        get throws {
            try _interop.get_ContainerNamePrefix()
        }
    }

    /// Gets or sets the container name prefix.
    /// - Returns: The container name prefix.
    public func containerNamePrefix(_ value: Swift.String) throws {
        try _interop.put_ContainerNamePrefix(value)
    }

    /// Gets or sets the export option.
    /// - Returns: The export option.
    public var exportable: WindowsSecurityCryptographyCertificates_ExportOption {
        get throws {
            try _interop.get_Exportable()
        }
    }

    /// Gets or sets the export option.
    /// - Returns: The export option.
    public func exportable(_ value: WindowsSecurityCryptographyCertificates_ExportOption) throws {
        try _interop.put_Exportable(value)
    }

    /// Gets or sets the friendly name.
    /// - Returns: The friendly name.
    public var friendlyName: Swift.String {
        get throws {
            try _interop.get_FriendlyName()
        }
    }

    /// Gets or sets the friendly name.
    /// - Returns: The friendly name.
    public func friendlyName(_ value: Swift.String) throws {
        try _interop.put_FriendlyName(value)
    }

    /// Gets or sets the install options.
    /// - Returns: The install options.
    public var installOptions: WindowsSecurityCryptographyCertificates_InstallOptions {
        get throws {
            try _interop.get_InstallOptions()
        }
    }

    /// Gets or sets the install options.
    /// - Returns: The install options.
    public func installOptions(_ value: WindowsSecurityCryptographyCertificates_InstallOptions) throws {
        try _interop.put_InstallOptions(value)
    }

    /// Gets or sets the key protection level.
    /// - Returns: The key protection level.
    public var keyProtectionLevel: WindowsSecurityCryptographyCertificates_KeyProtectionLevel {
        get throws {
            try _interop.get_KeyProtectionLevel()
        }
    }

    /// Gets or sets the key protection level.
    /// - Returns: The key protection level.
    public func keyProtectionLevel(_ value: WindowsSecurityCryptographyCertificates_KeyProtectionLevel) throws {
        try _interop.put_KeyProtectionLevel(value)
    }

    /// Gets or sets the key storage provider name.
    /// - Returns: The key storage provider name.
    public var keyStorageProviderName: Swift.String {
        get throws {
            try _interop.get_KeyStorageProviderName()
        }
    }

    /// Gets or sets the key storage provider name.
    /// - Returns: The key storage provider name.
    public func keyStorageProviderName(_ value: Swift.String) throws {
        try _interop.put_KeyStorageProviderName(value)
    }

    /// Gets or sets the reader name.
    /// - Returns: The reader name.
    public var readerName: Swift.String {
        get throws {
            try _interop.get_ReaderName()
        }
    }

    /// Gets or sets the reader name.
    /// - Returns: The reader name.
    public func readerName(_ value: Swift.String) throws {
        try _interop.put_ReaderName(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.PfxImportParameters", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}