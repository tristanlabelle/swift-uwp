// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the usages of a certificate key.
public final class WindowsSecurityCryptographyCertificates_CertificateKeyUsages: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCertificates_CertificateKeyUsagesProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCryptographyCertificates_CertificateKeyUsagesProjection.self))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateKeyUsages members

    /// Gets or sets if the key is for cRLSign.
    /// - Returns: True if the key is for cRLSign; otherwise, false.
    public var crlSign: Swift.Bool {
        get throws {
            try _interop.get_CrlSign()
        }
    }

    /// Gets or sets if the key is for cRLSign.
    /// - Returns: True if the key is for cRLSign; otherwise, false.
    public func crlSign(_ value: Swift.Bool) throws {
        try _interop.put_CrlSign(value)
    }

    /// Gets or sets if the key is for data encipherment.
    /// - Returns: True if the key is for data encipherment; otherwise, false.
    public var dataEncipherment: Swift.Bool {
        get throws {
            try _interop.get_DataEncipherment()
        }
    }

    /// Gets or sets if the key is for data encipherment.
    /// - Returns: True if the key is for data encipherment; otherwise, false.
    public func dataEncipherment(_ value: Swift.Bool) throws {
        try _interop.put_DataEncipherment(value)
    }

    /// Gets or sets if the key is for digital signature.
    /// - Returns: True if the key is for digital signature; otherwise, false.
    public var digitalSignature: Swift.Bool {
        get throws {
            try _interop.get_DigitalSignature()
        }
    }

    /// Gets or sets if the key is for digital signature.
    /// - Returns: True if the key is for digital signature; otherwise, false.
    public func digitalSignature(_ value: Swift.Bool) throws {
        try _interop.put_DigitalSignature(value)
    }

    /// Gets or sets if the key is for encipher only.
    /// - Returns: True if the key is for encipher only; otherwise, false.
    public var encipherOnly: Swift.Bool {
        get throws {
            try _interop.get_EncipherOnly()
        }
    }

    /// Gets or sets if the key is for encipher only.
    /// - Returns: True if the key is for encipher only; otherwise, false.
    public func encipherOnly(_ value: Swift.Bool) throws {
        try _interop.put_EncipherOnly(value)
    }

    /// Gets or sets if the key is for key agreement.
    /// - Returns: True if the key is for key agreement; otherwise, false.
    public var keyAgreement: Swift.Bool {
        get throws {
            try _interop.get_KeyAgreement()
        }
    }

    /// Gets or sets if the key is for key agreement.
    /// - Returns: True if the key is for key agreement; otherwise, false.
    public func keyAgreement(_ value: Swift.Bool) throws {
        try _interop.put_KeyAgreement(value)
    }

    /// Gets or sets if the key is for key certificate sign.
    /// - Returns: True if the key is for key certificate sign; otherwise, false.
    public var keyCertificateSign: Swift.Bool {
        get throws {
            try _interop.get_KeyCertificateSign()
        }
    }

    /// Gets or sets if the key is for key certificate sign.
    /// - Returns: True if the key is for key certificate sign; otherwise, false.
    public func keyCertificateSign(_ value: Swift.Bool) throws {
        try _interop.put_KeyCertificateSign(value)
    }

    /// Gets or sets if the key is for key encipherment.
    /// - Returns: True if the key is for key encipherment; otherwise, false.
    public var keyEncipherment: Swift.Bool {
        get throws {
            try _interop.get_KeyEncipherment()
        }
    }

    /// Gets or sets if the key is for key encipherment.
    /// - Returns: True if the key is for key encipherment; otherwise, false.
    public func keyEncipherment(_ value: Swift.Bool) throws {
        try _interop.put_KeyEncipherment(value)
    }

    /// Gets or sets if the key is for non-repudiation.
    /// - Returns: True if the key is for non-repudiation; otherwise, false.
    public var nonRepudiation: Swift.Bool {
        get throws {
            try _interop.get_NonRepudiation()
        }
    }

    /// Gets or sets if the key is for non-repudiation.
    /// - Returns: True if the key is for non-repudiation; otherwise, false.
    public func nonRepudiation(_ value: Swift.Bool) throws {
        try _interop.put_NonRepudiation(value)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateKeyUsages", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}