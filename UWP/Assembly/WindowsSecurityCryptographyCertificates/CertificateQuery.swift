// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents parameters for a query for certificates from the certificate store for an app.
public final class WindowsSecurityCryptographyCertificates_CertificateQuery: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCertificates_CertificateQueryProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCryptographyCertificates_CertificateQueryProjection.self))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateQuery members

    /// Gets a collection of object identifiers (OIDs) for the enhanced key usage extension to search for.
    /// - Returns: A collection of object identifiers (OIDs) for the enhanced key usage extension to search for.
    public var enhancedKeyUsages: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_EnhancedKeyUsages())
        }
    }

    /// Gets or sets the certificate friendly name to search for.
    /// - Returns: The certificate friendly name to search for.
    public var friendlyName: Swift.String {
        get throws {
            try _interop.get_FriendlyName()
        }
    }

    /// Gets or sets the certificate friendly name to search for.
    /// - Returns: The certificate friendly name to search for.
    public func friendlyName(_ value: Swift.String) throws {
        try _interop.put_FriendlyName(value)
    }

    /// Gets or sets a value that indicates whether only hardware certificates (SC or TPM) are to be returned from the query.
    /// - Returns: True if only hardware certificates (SC or TPM) are to be returned from the query; otherwise false.
    public var hardwareOnly: Swift.Bool {
        get throws {
            try _interop.get_HardwareOnly()
        }
    }

    /// Gets or sets a value that indicates whether only hardware certificates (SC or TPM) are to be returned from the query.
    /// - Returns: True if only hardware certificates (SC or TPM) are to be returned from the query; otherwise false.
    public func hardwareOnly(_ value: Swift.Bool) throws {
        try _interop.put_HardwareOnly(value)
    }

    /// Gets or sets the name of the certificate issuer to search for.
    /// - Returns: The name of the certificate issuer to search for.
    public var issuerName: Swift.String {
        get throws {
            try _interop.get_IssuerName()
        }
    }

    /// Gets or sets the name of the certificate issuer to search for.
    /// - Returns: The name of the certificate issuer to search for.
    public func issuerName(_ value: Swift.String) throws {
        try _interop.put_IssuerName(value)
    }

    /// Gets or sets a certificate thumbprint to search for.
    /// - Returns: A certificate thumbprint to search for.
    public var thumbprint: [Swift.UInt8] {
        get throws {
            try _interop.get_Thumbprint()
        }
    }

    /// Gets or sets a certificate thumbprint to search for.
    /// - Returns: A certificate thumbprint to search for.
    public func thumbprint(_ value: [Swift.UInt8]) throws {
        try _interop.put_Thumbprint(value)
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateQuery2 members

    /// Gets or sets whether to include duplicates.
    /// - Returns: True if duplicates are included; otherwise, false.
    public var includeDuplicates: Swift.Bool {
        get throws {
            try _icertificateQuery2.get_IncludeDuplicates()
        }
    }

    /// Gets or sets whether to include duplicates.
    /// - Returns: True if duplicates are included; otherwise, false.
    public func includeDuplicates(_ value: Swift.Bool) throws {
        try _icertificateQuery2.put_IncludeDuplicates(value)
    }

    /// Gets or sets whether to include expired certificates.
    /// - Returns: True if expired certificates should be included; otherwise, false.
    public var includeExpiredCertificates: Swift.Bool {
        get throws {
            try _icertificateQuery2.get_IncludeExpiredCertificates()
        }
    }

    /// Gets or sets whether to include expired certificates.
    /// - Returns: True if expired certificates should be included; otherwise, false.
    public func includeExpiredCertificates(_ value: Swift.Bool) throws {
        try _icertificateQuery2.put_IncludeExpiredCertificates(value)
    }

    /// Gets or sets the store name.
    /// - Returns: The store name.
    public var storeName: Swift.String {
        get throws {
            try _icertificateQuery2.get_StoreName()
        }
    }

    /// Gets or sets the store name.
    /// - Returns: The store name.
    public func storeName(_ value: Swift.String) throws {
        try _icertificateQuery2.put_StoreName(value)
    }

    // MARK: Implementation details

    private var _icertificateQuery2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateQuery2>? = nil

    internal var _icertificateQuery2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateQuery2> {
        get throws {
            try _icertificateQuery2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateQuery2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateQuery2.self)
            }
        }
    }

    deinit {
        _icertificateQuery2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateQuery", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}