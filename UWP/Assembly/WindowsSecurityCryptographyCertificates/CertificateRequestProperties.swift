// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the properties of a certificate request.
public final class WindowsSecurityCryptographyCertificates_CertificateRequestProperties: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCertificates_CertificateRequestPropertiesProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsSecurityCryptographyCertificates_CertificateRequestPropertiesProjection.self))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateRequestProperties members

    /// Gets or sets a value that specifies whether the private key created for the request can be exported.
    /// - Returns: Specifies whether the key can be exported.
    public var exportable: WindowsSecurityCryptographyCertificates_ExportOption {
        get throws {
            try _interop.get_Exportable()
        }
    }

    /// Gets or sets a value that specifies whether the private key created for the request can be exported.
    /// - Returns: Specifies whether the key can be exported.
    public func exportable(_ value: WindowsSecurityCryptographyCertificates_ExportOption) throws {
        try _interop.put_Exportable(value)
    }

    /// Gets or sets the display name of the enrolled certificate.
    /// - Returns: The display name.
    public var friendlyName: Swift.String {
        get throws {
            try _interop.get_FriendlyName()
        }
    }

    /// Gets or sets the display name of the enrolled certificate.
    /// - Returns: The display name.
    public func friendlyName(_ value: Swift.String) throws {
        try _interop.put_FriendlyName(value)
    }

    /// Gets or sets the hash algorithm used when creating the certificate request signature.
    /// - Returns: Hash algorithm.
    public var hashAlgorithmName: Swift.String {
        get throws {
            try _interop.get_HashAlgorithmName()
        }
    }

    /// Gets or sets the hash algorithm used when creating the certificate request signature.
    /// - Returns: Hash algorithm.
    public func hashAlgorithmName(_ value: Swift.String) throws {
        try _interop.put_HashAlgorithmName(value)
    }

    /// Gets or sets the public key algorithm.
    /// - Returns: Algorithm name.
    public var keyAlgorithmName: Swift.String {
        get throws {
            try _interop.get_KeyAlgorithmName()
        }
    }

    /// Gets or sets the public key algorithm.
    /// - Returns: Algorithm name.
    public func keyAlgorithmName(_ value: Swift.String) throws {
        try _interop.put_KeyAlgorithmName(value)
    }

    /// Gets or sets the level of strong key protection.
    /// - Returns: Strong key protection level.
    public var keyProtectionLevel: WindowsSecurityCryptographyCertificates_KeyProtectionLevel {
        get throws {
            try _interop.get_KeyProtectionLevel()
        }
    }

    /// Gets or sets the level of strong key protection.
    /// - Returns: Strong key protection level.
    public func keyProtectionLevel(_ value: WindowsSecurityCryptographyCertificates_KeyProtectionLevel) throws {
        try _interop.put_KeyProtectionLevel(value)
    }

    /// Gets or sets the size, in bits, of the private key to be generated.
    /// - Returns: The size, in bits, of the private key.
    public var keySize: Swift.UInt32 {
        get throws {
            try _interop.get_KeySize()
        }
    }

    /// Gets or sets the size, in bits, of the private key to be generated.
    /// - Returns: The size, in bits, of the private key.
    public func keySize(_ value: Swift.UInt32) throws {
        try _interop.put_KeySize(value)
    }

    /// Gets or sets the name of the key storage provider (KSP) that will be used to generate the private key.
    /// - Returns: The KSP name. The default value is "Microsoft Software Key Storage Provider".
    public var keyStorageProviderName: Swift.String {
        get throws {
            try _interop.get_KeyStorageProviderName()
        }
    }

    /// Gets or sets the name of the key storage provider (KSP) that will be used to generate the private key.
    /// - Returns: The KSP name. The default value is "Microsoft Software Key Storage Provider".
    public func keyStorageProviderName(_ value: Swift.String) throws {
        try _interop.put_KeyStorageProviderName(value)
    }

    /// Gets or sets the operation that can be performed by the private key created for this certificate request. The default value is **Signing**.
    /// - Returns: Private key usage.
    public var keyUsages: WindowsSecurityCryptographyCertificates_EnrollKeyUsages {
        get throws {
            try _interop.get_KeyUsages()
        }
    }

    /// Gets or sets the operation that can be performed by the private key created for this certificate request. The default value is **Signing**.
    /// - Returns: Private key usage.
    public func keyUsages(_ value: WindowsSecurityCryptographyCertificates_EnrollKeyUsages) throws {
        try _interop.put_KeyUsages(value)
    }

    /// Gets or sets the subject name.
    /// - Returns: The X.500 distinguished name (DN).
    public var subject: Swift.String {
        get throws {
            try _interop.get_Subject()
        }
    }

    /// Gets or sets the subject name.
    /// - Returns: The X.500 distinguished name (DN).
    public func subject(_ value: Swift.String) throws {
        try _interop.put_Subject(value)
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2 members

    /// Gets or sets the CA exchange certificate that is used to encrypt a key attestation certificate request.
    /// - Returns: The CA exchange certificate that is used to encrypt a key attestation certificate request.
    public var attestationCredentialCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_icertificateRequestProperties2.get_AttestationCredentialCertificate())
        }
    }

    /// Gets or sets the CA exchange certificate that is used to encrypt a key attestation certificate request.
    /// - Returns: The CA exchange certificate that is used to encrypt a key attestation certificate request.
    public func attestationCredentialCertificate(_ value: WindowsSecurityCryptographyCertificates_Certificate?) throws {
        try _icertificateRequestProperties2.put_AttestationCredentialCertificate(value)
    }

    /// Gets or sets the certificate used to sign the certificate request.
    /// - Returns: The certificate used to sign the certificate request.
    public var signingCertificate: WindowsSecurityCryptographyCertificates_Certificate {
        get throws {
            try COM.NullResult.unwrap(_icertificateRequestProperties2.get_SigningCertificate())
        }
    }

    /// Gets or sets the certificate used to sign the certificate request.
    /// - Returns: The certificate used to sign the certificate request.
    public func signingCertificate(_ value: WindowsSecurityCryptographyCertificates_Certificate?) throws {
        try _icertificateRequestProperties2.put_SigningCertificate(value)
    }

    /// Gets or sets the name of the smart card reader used to create the certificate request.
    /// - Returns: The name of the smart card reader used to create the certificate request.
    public var smartcardReaderName: Swift.String {
        get throws {
            try _icertificateRequestProperties2.get_SmartcardReaderName()
        }
    }

    /// Gets or sets the name of the smart card reader used to create the certificate request.
    /// - Returns: The name of the smart card reader used to create the certificate request.
    public func smartcardReaderName(_ value: Swift.String) throws {
        try _icertificateRequestProperties2.put_SmartcardReaderName(value)
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3 members

    /// Gets or sets the container name.
    /// - Returns: The container name.
    public var containerName: Swift.String {
        get throws {
            try _icertificateRequestProperties3.get_ContainerName()
        }
    }

    /// Gets or sets the container name.
    /// - Returns: The container name.
    public func containerName(_ value: Swift.String) throws {
        try _icertificateRequestProperties3.put_ContainerName(value)
    }

    /// Gets or sets the prefix of the container name.
    /// - Returns: The prefix of the container name.
    public var containerNamePrefix: Swift.String {
        get throws {
            try _icertificateRequestProperties3.get_ContainerNamePrefix()
        }
    }

    /// Gets or sets the prefix of the container name.
    /// - Returns: The prefix of the container name.
    public func containerNamePrefix(_ value: Swift.String) throws {
        try _icertificateRequestProperties3.put_ContainerNamePrefix(value)
    }

    /// Gets or sets the name of the elliptic curve.
    /// - Returns: The name of the elliptic curve.
    public var curveName: Swift.String {
        get throws {
            try _icertificateRequestProperties3.get_CurveName()
        }
    }

    /// Gets or sets the name of the elliptic curve.
    /// - Returns: The name of the elliptic curve.
    public func curveName(_ value: Swift.String) throws {
        try _icertificateRequestProperties3.put_CurveName(value)
    }

    /// Gets or sets the parameters of the elliptic curve.
    /// - Returns: The parameters of the elliptic curve.
    public var curveParameters: [Swift.UInt8] {
        get throws {
            try _icertificateRequestProperties3.get_CurveParameters()
        }
    }

    /// Gets or sets the parameters of the elliptic curve.
    /// - Returns: The parameters of the elliptic curve.
    public func curveParameters(_ value: [Swift.UInt8]) throws {
        try _icertificateRequestProperties3.put_CurveParameters(value)
    }

    /// Gets or sets whether to use the existing key.
    /// - Returns: True if using the existing key; otherwise, false.
    public var useExistingKey: Swift.Bool {
        get throws {
            try _icertificateRequestProperties3.get_UseExistingKey()
        }
    }

    /// Gets or sets whether to use the existing key.
    /// - Returns: True if using the existing key; otherwise, false.
    public func useExistingKey(_ value: Swift.Bool) throws {
        try _icertificateRequestProperties3.put_UseExistingKey(value)
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4 members

    /// Gets a vector of certificate extensions.
    /// - Returns: A vector of certificate extensions.
    public var extensions: WindowsFoundationCollections_IVector<WindowsSecurityCryptographyCertificates_CertificateExtension?> {
        get throws {
            try COM.NullResult.unwrap(_icertificateRequestProperties4.get_Extensions())
        }
    }

    /// Gets the subject alternative name.
    /// - Returns: The subject alternative name.
    public var subjectAlternativeName: WindowsSecurityCryptographyCertificates_SubjectAlternativeNameInfo {
        get throws {
            try COM.NullResult.unwrap(_icertificateRequestProperties4.get_SubjectAlternativeName())
        }
    }

    /// Gets a vector of suppressed defaults.
    /// - Returns: A vector of suppressed defaults.
    public var suppressedDefaults: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_icertificateRequestProperties4.get_SuppressedDefaults())
        }
    }

    // MARK: Implementation details

    private var _icertificateRequestProperties2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties2>? = nil

    internal var _icertificateRequestProperties2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties2> {
        get throws {
            try _icertificateRequestProperties2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties2.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties2.self)
            }
        }
    }

    private var _icertificateRequestProperties3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties3>? = nil

    internal var _icertificateRequestProperties3: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties3> {
        get throws {
            try _icertificateRequestProperties3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties3.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties3.self)
            }
        }
    }

    private var _icertificateRequestProperties4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties4>? = nil

    internal var _icertificateRequestProperties4: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties4> {
        get throws {
            try _icertificateRequestProperties4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties4.iid).cast(to: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateRequestProperties4.self)
            }
        }
    }

    deinit {
        _icertificateRequestProperties2_storage?.release()
        _icertificateRequestProperties3_storage?.release()
        _icertificateRequestProperties4_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateRequestProperties", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}