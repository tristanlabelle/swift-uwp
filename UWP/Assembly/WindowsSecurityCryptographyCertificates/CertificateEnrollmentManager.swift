// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a certificate enrollment manager.
public enum WindowsSecurityCryptographyCertificates_CertificateEnrollmentManager {
    // MARK: Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics members

    /// Asynchronously creates a PKCS #10 certificate request based on properties specified in a CertificateRequestProperties object.
    /// - Parameter request: A CertificateRequestProperties object that contains the property values used to create the certificate request.
    /// - Returns: This method returns a string that contains the base64 encoded PKCS #10 certificate request.
    public static func createRequestAsync(_ request: WindowsSecurityCryptographyCertificates_CertificateRequestProperties?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics.createRequestAsync(request))
    }

    /// Asynchronously Installs a certificate chain into the app container on the local computer.
    /// - Parameter certificate: The encoded certificate. The *certificate* is encoded by using Distinguished Encoding Rules (DER) as defined by the Abstract Syntax Notation One (ASN.1) standard.
    /// - Parameter installOption: An InstallOptions enumeration value that specifies the certificate installation option.
    /// - Returns: This method does not return a value.
    public static func installCertificateAsync(_ certificate: Swift.String, _ installOption: WindowsSecurityCryptographyCertificates_InstallOptions) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics.installCertificateAsync(certificate, installOption))
    }

    /// Asynchronously imports a certificate from a Personal Information Exchange (PFX) message.
    /// - Parameter pfxData: Base64-encoded PFX message.
    /// - Parameter password: The password used to decrypt and verify the PFX packet. The password must be exactly the same as the password that was used to encrypt the packet.
    /// - Parameter exportable: A value of the ExportOption enumeration that specifies whether the key can be exported.
    /// - Parameter keyProtectionLevel: A value of the KeyProtectionLevel enumeration that specifies the strength of the key protection. The default is **NoConsent**.
    /// - Parameter installOption: An InstallOptions enumeration value that specifies the certificate installation option.
    /// - Parameter friendlyName: The display name of the enrolled certificate. This value overwrites the **FriendlyName** property inside the PFX message.
    /// - Returns: This method does not return a value.
    public static func importPfxDataAsync(_ pfxData: Swift.String, _ password: Swift.String, _ exportable: WindowsSecurityCryptographyCertificates_ExportOption, _ keyProtectionLevel: WindowsSecurityCryptographyCertificates_KeyProtectionLevel, _ installOption: WindowsSecurityCryptographyCertificates_InstallOptions, _ friendlyName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics.importPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics3 members

    /// Asynchronously imports a certificate from a Personal Information Exchange (PFX) message using import parameters.
    /// - Parameter pfxData: Base64-encoded PFX message.
    /// - Parameter password: The password used to decrypt and verify the PFX packet. The password must be exactly the same as the password that was used to encrypt the packet.
    /// - Parameter pfxImportParameters: The PFX import parameters.
    /// - Returns: This method does not return a value.
    public static func importPfxDataAsync(_ pfxData: Swift.String, _ password: Swift.String, _ pfxImportParameters: WindowsSecurityCryptographyCertificates_PfxImportParameters?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics3.importPfxDataToKspWithParametersAsync(pfxData, password, pfxImportParameters))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2 members

    /// Gets the associated UserCertificateEnrollmentManager.
    /// - Returns: The associated UserCertificateEnrollmentManager.
    public static var userCertificateEnrollmentManager: WindowsSecurityCryptographyCertificates_UserCertificateEnrollmentManager {
        get throws {
            try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics2.get_UserCertificateEnrollmentManager())
        }
    }

    /// Asynchronously imports a certificate from a Personal Information Exchange (PFX) message using the specified key storage provider.
    /// - Parameter pfxData: Base64-encoded PFX message.
    /// - Parameter password: The password used to decrypt and verify the PFX packet. The password must be exactly the same as the password that was used to encrypt the packet.
    /// - Parameter exportable: A value of the ExportOption enumeration that specifies whether the key can be exported.
    /// - Parameter keyProtectionLevel: A value of the KeyProtectionLevel enumeration that specifies the strength of the key protection. The default is **NoConsent**.
    /// - Parameter installOption: An InstallOptions enumeration value that specifies the certificate installation option.
    /// - Parameter friendlyName: The display name of the enrolled certificate. This value overwrites the **FriendlyName** property inside the PFX message.
    /// - Parameter keyStorageProvider: The name of the key storage provider to use when importing the certificate.
    /// - Returns: This method does not return a value.
    public static func importPfxDataAsync(_ pfxData: Swift.String, _ password: Swift.String, _ exportable: WindowsSecurityCryptographyCertificates_ExportOption, _ keyProtectionLevel: WindowsSecurityCryptographyCertificates_KeyProtectionLevel, _ installOption: WindowsSecurityCryptographyCertificates_InstallOptions, _ friendlyName: Swift.String, _ keyStorageProvider: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_icertificateEnrollmentManagerStatics2.importPfxDataToKspAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider))
    }

    // MARK: Implementation details

    private static var _icertificateEnrollmentManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics>? = nil

    internal static var _icertificateEnrollmentManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics> {
        get throws {
            try _icertificateEnrollmentManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics.iid)
            }
        }
    }

    private static var _icertificateEnrollmentManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics3>? = nil

    internal static var _icertificateEnrollmentManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics3> {
        get throws {
            try _icertificateEnrollmentManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics3.iid)
            }
        }
    }

    private static var _icertificateEnrollmentManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics2>? = nil

    internal static var _icertificateEnrollmentManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics2> {
        get throws {
            try _icertificateEnrollmentManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICertificateEnrollmentManagerStatics2.iid)
            }
        }
    }
}