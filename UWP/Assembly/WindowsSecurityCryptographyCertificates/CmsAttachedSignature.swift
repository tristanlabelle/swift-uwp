// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a signature attached to a signed CMS message.
public final class WindowsSecurityCryptographyCertificates_CmsAttachedSignature: WindowsRuntime.WinRTImport<WindowsSecurityCryptographyCertificates_CmsAttachedSignatureProjection> {
    // MARK: Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureFactory members

    public convenience init(_ inputBlob: WindowsStorageStreams_IBuffer?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icmsAttachedSignatureFactory.createCmsAttachedSignature(inputBlob)))
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICmsAttachedSignature members

    /// Gets the list of certificates that are used for chain building for the signer certificate.
    /// - Returns: The list of certificates that are used for chain building for the signer certificate.
    public var certificates: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_Certificate?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Certificates())
        }
    }

    /// Gets the content of the signed CMS message.
    /// - Returns: The content of the signed CMS message.
    public var content: [Swift.UInt8] {
        get throws {
            try _interop.get_Content()
        }
    }

    /// Gets the list of signers that are used for creating or verifying the signature.
    /// - Returns: The list of signers that are used for creating or verifying the signature.
    public var signers: WindowsFoundationCollections_IVectorView<WindowsSecurityCryptographyCertificates_CmsSignerInfo?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Signers())
        }
    }

    /// Verifies the signature contained in the signed CMS message.
    /// - Returns: The result of the signature verification operation.
    public func verifySignature() throws -> WindowsSecurityCryptographyCertificates_SignatureValidationResult {
        try _interop.verifySignature()
    }

    // MARK: Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureStatics members

    public static func generateSignatureAsync(_ data: WindowsStorageStreams_IBuffer?, _ signers: WindowsFoundationCollections_IIterable<WindowsSecurityCryptographyCertificates_CmsSignerInfo?>?, _ certificates: WindowsFoundationCollections_IIterable<WindowsSecurityCryptographyCertificates_Certificate?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_icmsAttachedSignatureStatics.generateSignatureAsync(data, signers, certificates))
    }

    // MARK: Implementation details

    private static var _icmsAttachedSignatureFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureFactory>? = nil

    internal static var _icmsAttachedSignatureFactory: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureFactory> {
        get throws {
            try _icmsAttachedSignatureFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CmsAttachedSignature", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureFactory.iid)
            }
        }
    }

    private static var _icmsAttachedSignatureStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureStatics>? = nil

    internal static var _icmsAttachedSignatureStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureStatics> {
        get throws {
            try _icmsAttachedSignatureStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Cryptography.Certificates.CmsAttachedSignature", id: CWinRT.SWRT_WindowsSecurityCryptographyCertificates_ICmsAttachedSignatureStatics.iid)
            }
        }
    }
}