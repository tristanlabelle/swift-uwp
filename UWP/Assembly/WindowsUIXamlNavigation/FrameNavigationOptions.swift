// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents options for a frame navigation, including whether it is recorded in the navigation stack and what transition animation is used.
open class WindowsUIXamlNavigation_FrameNavigationOptions: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Navigation.IFrameNavigationOptionsFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlNavigation_FrameNavigationOptions.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._iframeNavigationOptionsFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Navigation.IFrameNavigationOptions members

    /// Gets or sets a value that indicates whether navigation is recorded in the Frame's ForwardStack or BackStack.
    /// - Returns: **true** if navigation is recorded in the Frame's ForwardStack or BackStack; otherwise, **false**. The default is **true**.
    public var isNavigationStackEnabled: Swift.Bool {
        get throws {
            try _iframeNavigationOptions.get_IsNavigationStackEnabled()
        }
    }

    /// Gets or sets a value that indicates whether navigation is recorded in the Frame's ForwardStack or BackStack.
    /// - Returns: **true** if navigation is recorded in the Frame's ForwardStack or BackStack; otherwise, **false**. The default is **true**.
    public func isNavigationStackEnabled(_ value: Swift.Bool) throws {
        try _iframeNavigationOptions.put_IsNavigationStackEnabled(value)
    }

    /// Gets or sets a value that indicates the animated transition associated with the navigation.
    /// - Returns: Info about the animated transition.
    public var transitionInfoOverride: WindowsUIXamlMediaAnimation_NavigationTransitionInfo {
        get throws {
            try COM.NullResult.unwrap(_iframeNavigationOptions.get_TransitionInfoOverride())
        }
    }

    /// Gets or sets a value that indicates the animated transition associated with the navigation.
    /// - Returns: Info about the animated transition.
    public func transitionInfoOverride(_ value: WindowsUIXamlMediaAnimation_NavigationTransitionInfo?) throws {
        try _iframeNavigationOptions.put_TransitionInfoOverride(value)
    }

    // MARK: Implementation details

    private var _iframeNavigationOptions_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptions>? = nil

    internal var _iframeNavigationOptions: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptions> {
        get throws {
            try _iframeNavigationOptions_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptions.iid).cast(to: CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptions.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptions>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _iframeNavigationOptions_storage?.release()
    }

    private static var _iframeNavigationOptionsFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptionsFactory>? = nil

    internal static var _iframeNavigationOptionsFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptionsFactory> {
        get throws {
            try _iframeNavigationOptionsFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Navigation.FrameNavigationOptions", id: CWinRT.SWRT_WindowsUIXamlNavigation_IFrameNavigationOptionsFactory.iid)
            }
        }
    }
}