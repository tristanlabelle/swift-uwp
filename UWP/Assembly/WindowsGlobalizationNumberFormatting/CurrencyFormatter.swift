// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Formats and parses currencies.
public final class WindowsGlobalizationNumberFormatting_CurrencyFormatter: WindowsRuntime.WinRTImport<WindowsGlobalizationNumberFormatting_CurrencyFormatterProjection>, WindowsGlobalizationNumberFormatting_INumberParserProtocol, WindowsGlobalizationNumberFormatting_INumberFormatter2Protocol, WindowsGlobalizationNumberFormatting_INumberFormatterProtocol, WindowsGlobalizationNumberFormatting_INumberFormatterOptionsProtocol, WindowsGlobalizationNumberFormatting_ISignificantDigitsOptionProtocol, WindowsGlobalizationNumberFormatting_INumberRounderOptionProtocol, WindowsGlobalizationNumberFormatting_ISignedZeroOptionProtocol {
    // MARK: Windows.Globalization.NumberFormatting.ICurrencyFormatterFactory members

    public convenience init(_ currencyCode: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icurrencyFormatterFactory.createCurrencyFormatterCode(currencyCode)))
    }

    public convenience init(_ currencyCode: Swift.String, _ languages: WindowsFoundationCollections_IIterable<Swift.String>?, _ geographicRegion: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._icurrencyFormatterFactory.createCurrencyFormatterCodeContext(currencyCode, languages, geographicRegion)))
    }

    // MARK: Windows.Globalization.NumberFormatting.ICurrencyFormatter members

    /// Gets the identifier for the currency to be used for formatting and parsing currency values.
    /// - Returns: The currency identifier to use when formatting and parsing currency values.
    public var currency: Swift.String {
        get throws {
            try _interop.get_Currency()
        }
    }

    /// Gets the identifier for the currency to be used for formatting and parsing currency values.
    /// - Returns: The currency identifier to use when formatting and parsing currency values.
    public func currency(_ value: Swift.String) throws {
        try _interop.put_Currency(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberParser members

    /// Attempts to parse a string representation of an integer currency value.
    /// - Parameter text: The text to be parsed.
    /// - Returns: If successful, an **Int64** that corresponds to the string representation, and otherwise **null**.
    public func parseInt(_ text: Swift.String) throws -> Swift.Int64? {
        try _inumberParser.parseInt(text)
    }

    /// Attempts to parse a string representation of an unsigned integer currency value.
    /// - Parameter text: The text to be parsed.
    /// - Returns: If successful, a **UInt64** that corresponds to the string representation, and otherwise **null**.
    public func parseUInt(_ text: Swift.String) throws -> Swift.UInt64? {
        try _inumberParser.parseUInt(text)
    }

    /// Attempts to parse a string representation of a **Double** currency value.
    /// - Parameter text: The text to be parsed.
    /// - Returns: If successful, a **Double** that corresponds to the string representation, and otherwise **null**.
    public func parseDouble(_ text: Swift.String) throws -> Swift.Double? {
        try _inumberParser.parseDouble(text)
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberFormatter2 members

    /// Returns a string representation of an **Int64** currency value.
    /// - Parameter value: The **Int64** currency value to be formatted.
    /// - Returns: A string that represents the value.
    public func formatInt(_ value: Swift.Int64) throws -> Swift.String {
        try _inumberFormatter2.formatInt(value)
    }

    /// Returns a string representation of a **UInt64** currency value.
    /// - Parameter value: The **UInt64** currency value to be formatted.
    /// - Returns: The **UInt64** currency value to be formatted.
    public func formatUInt(_ value: Swift.UInt64) throws -> Swift.String {
        try _inumberFormatter2.formatUInt(value)
    }

    /// Returns a string representation of a **Double** currency value.
    /// - Parameter value: The **Double** currency value to be formatted.
    /// - Returns: A string that represents the value.
    public func formatDouble(_ value: Swift.Double) throws -> Swift.String {
        try _inumberFormatter2.formatDouble(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberFormatter members

    /// Returns a string representation of an **Int64** value.
    /// - Parameter value: The **Int64** value to be formatted.
    /// - Returns: A string that represents the value.
    public func format(_ value: Swift.Int64) throws -> Swift.String {
        try _inumberFormatter.formatInt(value)
    }

    /// Returns a string representation of a **UInt64** value.
    /// - Parameter value: The **UInt64** value to be formatted.
    /// - Returns: A string that represents the value.
    public func format(_ value: Swift.UInt64) throws -> Swift.String {
        try _inumberFormatter.formatUInt(value)
    }

    /// Returns a string representation of a **Double** value.
    /// - Parameter value: The **Double** value to be formatted.
    /// - Returns: A string that represents the value.
    public func format(_ value: Swift.Double) throws -> Swift.String {
        try _inumberFormatter.formatDouble(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberFormatterOptions members

    /// Gets or sets the minimum number of digits to display for the fraction part of the currency value.
    /// - Returns: The minimum number of digits to display.
    public var fractionDigits: Swift.Int32 {
        get throws {
            try _inumberFormatterOptions.get_FractionDigits()
        }
    }

    /// Gets or sets the minimum number of digits to display for the fraction part of the currency value.
    /// - Returns: The minimum number of digits to display.
    public func fractionDigits(_ value: Swift.Int32) throws {
        try _inumberFormatterOptions.put_FractionDigits(value)
    }

    /// Gets the region that is used when formatting and parsing currency values.
    /// - Returns: The region that is used.
    public var geographicRegion: Swift.String {
        get throws {
            try _inumberFormatterOptions.get_GeographicRegion()
        }
    }

    /// Gets or sets the minimum number of digits to display for the integer part of the currency value.
    /// - Returns: The minimum number of digits to display.
    public var integerDigits: Swift.Int32 {
        get throws {
            try _inumberFormatterOptions.get_IntegerDigits()
        }
    }

    /// Gets or sets the minimum number of digits to display for the integer part of the currency value.
    /// - Returns: The minimum number of digits to display.
    public func integerDigits(_ value: Swift.Int32) throws {
        try _inumberFormatterOptions.put_IntegerDigits(value)
    }

    /// Gets or sets whether the decimal point of the currency value should always be displayed.
    /// - Returns: **True** if the decimal point of the value should always be displayed, and **false** otherwise.
    public var isDecimalPointAlwaysDisplayed: Swift.Bool {
        get throws {
            try _inumberFormatterOptions.get_IsDecimalPointAlwaysDisplayed()
        }
    }

    /// Gets or sets whether the decimal point of the currency value should always be displayed.
    /// - Returns: **True** if the decimal point of the value should always be displayed, and **false** otherwise.
    public func isDecimalPointAlwaysDisplayed(_ value: Swift.Bool) throws {
        try _inumberFormatterOptions.put_IsDecimalPointAlwaysDisplayed(value)
    }

    /// Gets or sets whether the integer part of the currency value should be grouped. The default value is `false`.
    /// - Returns: `true` if the integer part of the value should be grouped, otherwise `false`.
    public var isGrouped: Swift.Bool {
        get throws {
            try _inumberFormatterOptions.get_IsGrouped()
        }
    }

    /// Gets or sets whether the integer part of the currency value should be grouped. The default value is `false`.
    /// - Returns: `true` if the integer part of the value should be grouped, otherwise `false`.
    public func isGrouped(_ value: Swift.Bool) throws {
        try _inumberFormatterOptions.put_IsGrouped(value)
    }

    /// Gets the priority list of language identifiers that is used when formatting and parsing currency values.
    /// - Returns: The priority list of language identifiers.
    public var languages: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_inumberFormatterOptions.get_Languages())
        }
    }

    /// Gets or sets the numbering system that is used to format and parse currency values.
    /// - Returns: A string that indicates the numeral system of the formatter, such as "Latn" for the Latin numeral system (0123456789) or "Arab" for the Arabic-Indic numeral system (٠١٢٣٤٥٦٧٨٩). See the supported [NumeralSystem values](https://docs.microsoft.com/previous-versions/windows/apps/jj236471(v=win.10)).
    public var numeralSystem: Swift.String {
        get throws {
            try _inumberFormatterOptions.get_NumeralSystem()
        }
    }

    /// Gets or sets the numbering system that is used to format and parse currency values.
    /// - Returns: A string that indicates the numeral system of the formatter, such as "Latn" for the Latin numeral system (0123456789) or "Arab" for the Arabic-Indic numeral system (٠١٢٣٤٥٦٧٨٩). See the supported [NumeralSystem values](https://docs.microsoft.com/previous-versions/windows/apps/jj236471(v=win.10)).
    public func numeralSystem(_ value: Swift.String) throws {
        try _inumberFormatterOptions.put_NumeralSystem(value)
    }

    /// Gets the geographic region that was most recently used to format or parse currency values.
    /// - Returns: The geographic region that was most recently used to format or parse currency values.
    public var resolvedGeographicRegion: Swift.String {
        get throws {
            try _inumberFormatterOptions.get_ResolvedGeographicRegion()
        }
    }

    /// Gets the language that was most recently used to format or parse currency values.
    /// - Returns: The language from the priority list of language identifiers that was most recently used to format or parse currency values.
    public var resolvedLanguage: Swift.String {
        get throws {
            try _inumberFormatterOptions.get_ResolvedLanguage()
        }
    }

    // MARK: Windows.Globalization.NumberFormatting.ICurrencyFormatter2 members

    /// Gets or sets whether the currency is formatted with the currency symbol or currency code.
    /// - Returns: The CurrencyFormatterMode value which specifies how the currency is formatted.
    public var mode: WindowsGlobalizationNumberFormatting_CurrencyFormatterMode {
        get throws {
            try _icurrencyFormatter2.get_Mode()
        }
    }

    /// Gets or sets whether the currency is formatted with the currency symbol or currency code.
    /// - Returns: The CurrencyFormatterMode value which specifies how the currency is formatted.
    public func mode(_ value: WindowsGlobalizationNumberFormatting_CurrencyFormatterMode) throws {
        try _icurrencyFormatter2.put_Mode(value)
    }

    /// Applies the specified rounding algorithm to the CurrencyFormatter.
    /// - Parameter roundingAlgorithm: A value of the RoundingAlgorithm enumeration.
    public func applyRoundingForCurrency(_ roundingAlgorithm: WindowsGlobalizationNumberFormatting_RoundingAlgorithm) throws {
        try _icurrencyFormatter2.applyRoundingForCurrency(roundingAlgorithm)
    }

    // MARK: Windows.Globalization.NumberFormatting.ISignificantDigitsOption members

    /// Gets or sets the current padding to significant digits when a currency amount is formatted.
    /// - Returns: The number of significant digits.
    public var significantDigits: Swift.Int32 {
        get throws {
            try _isignificantDigitsOption.get_SignificantDigits()
        }
    }

    /// Gets or sets the current padding to significant digits when a currency amount is formatted.
    /// - Returns: The number of significant digits.
    public func significantDigits(_ value: Swift.Int32) throws {
        try _isignificantDigitsOption.put_SignificantDigits(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberRounderOption members

    /// Gets or sets the current rounding strategy to be used when formatting currency amounts.
    /// - Returns: A number rounder object: IncrementNumberRounder or SignificantDigitsNumberRounder.
    public var numberRounder: WindowsGlobalizationNumberFormatting_INumberRounder {
        get throws {
            try COM.NullResult.unwrap(_inumberRounderOption.get_NumberRounder())
        }
    }

    /// Gets or sets the current rounding strategy to be used when formatting currency amounts.
    /// - Returns: A number rounder object: IncrementNumberRounder or SignificantDigitsNumberRounder.
    public func numberRounder(_ value: WindowsGlobalizationNumberFormatting_INumberRounder?) throws {
        try _inumberRounderOption.put_NumberRounder(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.ISignedZeroOption members

    /// Gets or sets whether -0 is formatted using the conventions for negative numbers or for positive numbers. (In the Latin numeral system, the choice is "-0" or "0".)
    /// - Returns: **True** if -0 is formatted as a negative number, and **false** if -0 is formatted as a positive number ("-0" or "0" in the Latin numeral system).
    public var isZeroSigned: Swift.Bool {
        get throws {
            try _isignedZeroOption.get_IsZeroSigned()
        }
    }

    /// Gets or sets whether -0 is formatted using the conventions for negative numbers or for positive numbers. (In the Latin numeral system, the choice is "-0" or "0".)
    /// - Returns: **True** if -0 is formatted as a negative number, and **false** if -0 is formatted as a positive number ("-0" or "0" in the Latin numeral system).
    public func isZeroSigned(_ value: Swift.Bool) throws {
        try _isignedZeroOption.put_IsZeroSigned(value)
    }

    // MARK: Implementation details

    private var _inumberParser_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberParser>? = nil

    internal var _inumberParser: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberParser> {
        get throws {
            try _inumberParser_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberParser.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberParser.self)
            }
        }
    }

    private var _inumberFormatter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter2>? = nil

    internal var _inumberFormatter2: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter2> {
        get throws {
            try _inumberFormatter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter2.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter2.self)
            }
        }
    }

    private var _inumberFormatter_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter>? = nil

    internal var _inumberFormatter: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter> {
        get throws {
            try _inumberFormatter_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatter.self)
            }
        }
    }

    private var _inumberFormatterOptions_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatterOptions>? = nil

    internal var _inumberFormatterOptions: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatterOptions> {
        get throws {
            try _inumberFormatterOptions_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatterOptions.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberFormatterOptions.self)
            }
        }
    }

    private var _icurrencyFormatter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatter2>? = nil

    internal var _icurrencyFormatter2: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatter2> {
        get throws {
            try _icurrencyFormatter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatter2.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatter2.self)
            }
        }
    }

    private var _isignificantDigitsOption_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignificantDigitsOption>? = nil

    internal var _isignificantDigitsOption: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignificantDigitsOption> {
        get throws {
            try _isignificantDigitsOption_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignificantDigitsOption.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignificantDigitsOption.self)
            }
        }
    }

    private var _inumberRounderOption_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberRounderOption>? = nil

    internal var _inumberRounderOption: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberRounderOption> {
        get throws {
            try _inumberRounderOption_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberRounderOption.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_INumberRounderOption.self)
            }
        }
    }

    private var _isignedZeroOption_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignedZeroOption>? = nil

    internal var _isignedZeroOption: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignedZeroOption> {
        get throws {
            try _isignedZeroOption_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignedZeroOption.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ISignedZeroOption.self)
            }
        }
    }

    deinit {
        _inumberParser_storage?.release()
        _inumberFormatter2_storage?.release()
        _inumberFormatter_storage?.release()
        _inumberFormatterOptions_storage?.release()
        _icurrencyFormatter2_storage?.release()
        _isignificantDigitsOption_storage?.release()
        _inumberRounderOption_storage?.release()
        _isignedZeroOption_storage?.release()
    }

    private static var _icurrencyFormatterFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatterFactory>? = nil

    internal static var _icurrencyFormatterFactory: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatterFactory> {
        get throws {
            try _icurrencyFormatterFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.NumberFormatting.CurrencyFormatter", id: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_ICurrencyFormatterFactory.iid)
            }
        }
    }
}