// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Rounds numbers to a specified increment.
public final class WindowsGlobalizationNumberFormatting_IncrementNumberRounder: WindowsRuntime.WinRTImport<WindowsGlobalizationNumberFormatting_IncrementNumberRounderProjection>, WindowsGlobalizationNumberFormatting_INumberRounderProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsGlobalizationNumberFormatting_IncrementNumberRounderProjection.self))
    }

    // MARK: Windows.Globalization.NumberFormatting.INumberRounder members

    /// Rounds an **Int32** number to the specified increment.
    /// - Parameter value: The **Int32** value to be rounded.
    /// - Returns: The rounded 32 bit integer.
    public func roundInt32(_ value: Swift.Int32) throws -> Swift.Int32 {
        try _interop.roundInt32(value)
    }

    /// Rounds a **UInt32** number to the specified increment.
    /// - Parameter value: The **UInt32** value to be rounded.
    /// - Returns: The rounded unsigned 32 bit integer.
    public func roundUInt32(_ value: Swift.UInt32) throws -> Swift.UInt32 {
        try _interop.roundUInt32(value)
    }

    /// Rounds an **Int64** number to the specified increment.
    /// - Parameter value: The **Int64** value to be rounded.
    /// - Returns: The rounded 64 bit integer.
    public func roundInt64(_ value: Swift.Int64) throws -> Swift.Int64 {
        try _interop.roundInt64(value)
    }

    /// Rounds a **UInt64** number to the specified increment.
    /// - Parameter value: The **UInt64** value to be rounded.
    /// - Returns: The rounded unsigned 64 bit integer.
    public func roundUInt64(_ value: Swift.UInt64) throws -> Swift.UInt64 {
        try _interop.roundUInt64(value)
    }

    /// Rounds a **Single** number to the specified increment.
    /// - Parameter value: The **Single** value to be rounded.
    /// - Returns: The rounded number. This result is a single precision floating point number, which is not necessarily an integer.
    public func roundSingle(_ value: Swift.Float) throws -> Swift.Float {
        try _interop.roundSingle(value)
    }

    /// Rounds a **Double** number to the specified increment.
    /// - Parameter value: The **Double** value to be rounded.
    /// - Returns: The rounded number. This result is a double precision floating point number, which is not necessarily an integer.
    public func roundDouble(_ value: Swift.Double) throws -> Swift.Double {
        try _interop.roundDouble(value)
    }

    // MARK: Windows.Globalization.NumberFormatting.IIncrementNumberRounder members

    /// Gets or sets the increment this IncrementNumberRounder object uses for rounding.
    /// - Returns: The increment used for rounding.
    public var increment: Swift.Double {
        get throws {
            try _iincrementNumberRounder.get_Increment()
        }
    }

    /// Gets or sets the increment this IncrementNumberRounder object uses for rounding.
    /// - Returns: The increment used for rounding.
    public func increment(_ value: Swift.Double) throws {
        try _iincrementNumberRounder.put_Increment(value)
    }

    /// Gets or sets the rounding algorithm used when incrementing.
    /// - Returns: A value of the RoundingAlgorithm enumeration.
    public var roundingAlgorithm: WindowsGlobalizationNumberFormatting_RoundingAlgorithm {
        get throws {
            try _iincrementNumberRounder.get_RoundingAlgorithm()
        }
    }

    /// Gets or sets the rounding algorithm used when incrementing.
    /// - Returns: A value of the RoundingAlgorithm enumeration.
    public func roundingAlgorithm(_ value: WindowsGlobalizationNumberFormatting_RoundingAlgorithm) throws {
        try _iincrementNumberRounder.put_RoundingAlgorithm(value)
    }

    // MARK: Implementation details

    private var _iincrementNumberRounder_storage: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_IIncrementNumberRounder>? = nil

    internal var _iincrementNumberRounder: COM.COMInterop<CWinRT.SWRT_WindowsGlobalizationNumberFormatting_IIncrementNumberRounder> {
        get throws {
            try _iincrementNumberRounder_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGlobalizationNumberFormatting_IIncrementNumberRounder.iid).cast(to: CWinRT.SWRT_WindowsGlobalizationNumberFormatting_IIncrementNumberRounder.self)
            }
        }
    }

    deinit {
        _iincrementNumberRounder_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Globalization.NumberFormatting.IncrementNumberRounder", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}