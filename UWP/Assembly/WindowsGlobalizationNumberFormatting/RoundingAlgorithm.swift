// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the algorithm used to round numbers.
public struct WindowsGlobalizationNumberFormatting_RoundingAlgorithm: RawRepresentable, Hashable, Codable {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// **Do not use.**
    public static let none = Self()

    /// Round towards negative infinity. (Return the largest integer, increment, or significant digit which does not exceed the input.)
    public static let roundDown = Self(rawValue: 1)

    /// Round towards infinity. (Return the smallest integer, increment, or significant digit which is not less than the input.)
    public static let roundUp = Self(rawValue: 2)

    /// Round towards zero. This is the equivalent of **RoundDown** if the input is positive, or **RoundUp** if the input is negative.
    public static let roundTowardsZero = Self(rawValue: 3)

    /// Round away from zero. This is the equivalent of **RoundUp** if the input is positive, or **RoundDown** if the input is negative.
    public static let roundAwayFromZero = Self(rawValue: 4)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, this is the equivalent of **RoundDown**.
    public static let roundHalfDown = Self(rawValue: 5)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, this is the equivalent of **RoundUp**.
    public static let roundHalfUp = Self(rawValue: 6)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, this is the equivalent of **RoundTowardsZero**.
    public static let roundHalfTowardsZero = Self(rawValue: 7)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, this is the equivalent of **RoundAwayFromZero**.
    public static let roundHalfAwayFromZero = Self(rawValue: 8)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, round to the nearest even output.
    public static let roundHalfToEven = Self(rawValue: 9)

    /// Round to the integer, increment, or significant digit that is closest to the input. If the input is exactly halfway between the possible outputs, round to the nearest odd output.
    public static let roundHalfToOdd = Self(rawValue: 10)
}