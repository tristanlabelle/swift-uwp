// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an event that a Windows Runtime app can trigger to initiate a long-running operation with a device or sensor.
public final class WindowsApplicationModelBackground_DeviceUseTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_DeviceUseTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_DeviceUseTriggerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IDeviceUseTrigger members

    /// Triggers the background task and returns a DeviceTriggerResult indicating success or failure of the trigger request. Takes the *DeviceInformation.ID* of the device or sensor that the background task will access.
    /// - Parameter deviceId: The *DeviceInformation.ID* of the device or sensor that the background task will access. It must match the device or sensor that will perform the background operation. It is used by Windows to ensure that policy requirements are met.
    /// - Returns: This method returns a DeviceTriggerResult when it completes asynchronously.
    public func requestAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_DeviceTriggerResult> {
        try COM.NullResult.unwrap(_interop.requestAsyncSimple(deviceId))
    }

    /// Triggers the background task and returns a DeviceTriggerResult indicating success or failure of the trigger request. Takes the *DeviceInformation.ID* of the device or sensor that the background task will access, and an optional app-specific string passed to the background task identifying which operation to perform.
    /// - Parameter deviceId: The *DeviceInformation.ID* of the device or sensor that the background task will access. It must match the device or sensor that will perform the background operation. It is used by Windows to ensure that policy requirements are met.
    /// - Parameter arguments: Optional value. A string specified by your app and passed to the background task, identifying which operation to perform.
    /// - Returns: This method returns a DeviceTriggerResult when it completes asynchronously.
    public func requestAsync(_ deviceId: Swift.String, _ arguments: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_DeviceTriggerResult> {
        try COM.NullResult.unwrap(_interop.requestAsyncWithArguments(deviceId, arguments))
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.DeviceUseTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}