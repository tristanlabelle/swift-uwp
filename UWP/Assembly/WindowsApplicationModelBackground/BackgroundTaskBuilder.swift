// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a background task to register with the system.
public final class WindowsApplicationModelBackground_BackgroundTaskBuilder: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_BackgroundTaskBuilderProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_BackgroundTaskBuilderProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskBuilder members

    /// Gets or sets the name of a background task.
    /// - Returns: A description of the background task.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets or sets the name of a background task.
    /// - Returns: A description of the background task.
    public func name(_ value: Swift.String) throws {
        try _interop.put_Name(value)
    }

    /// Gets or sets the class that performs the work of a background task.
    /// - Returns: The name of an application-defined class that performs the work of a background task.
    public var taskEntryPoint: Swift.String {
        get throws {
            try _interop.get_TaskEntryPoint()
        }
    }

    /// Gets or sets the class that performs the work of a background task.
    /// - Returns: The name of an application-defined class that performs the work of a background task.
    public func taskEntryPoint(_ value: Swift.String) throws {
        try _interop.put_TaskEntryPoint(value)
    }

    /// Sets the event trigger for a background task.
    /// - Parameter trigger: An instance of an event trigger object such as a SystemTrigger, TimeTrigger, or NetworkOperatorNotificationTrigger.
    public func setTrigger(_ trigger: WindowsApplicationModelBackground_IBackgroundTrigger?) throws {
        try _interop.setTrigger(trigger)
    }

    /// Adds a condition to a background task.
    /// - Parameter condition: An instance of a SystemCondition object.
    public func addCondition(_ condition: WindowsApplicationModelBackground_IBackgroundCondition?) throws {
        try _interop.addCondition(condition)
    }

    /// Registers a background task with the system.
    /// - Returns: An instance of a BackgroundTaskRegistration object.
    public func register() throws -> WindowsApplicationModelBackground_BackgroundTaskRegistration {
        try COM.NullResult.unwrap(_interop.register())
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskBuilder2 members

    /// Indicates whether the background task will be canceled if at least one of its required conditions is no longer met.
    /// - Returns: Whether or not the background task will be canceled if at least one of its required conditions is no longer met.
    public var cancelOnConditionLoss: Swift.Bool {
        get throws {
            try _ibackgroundTaskBuilder2.get_CancelOnConditionLoss()
        }
    }

    /// Indicates whether the background task will be canceled if at least one of its required conditions is no longer met.
    /// - Returns: Whether or not the background task will be canceled if at least one of its required conditions is no longer met.
    public func cancelOnConditionLoss(_ value: Swift.Bool) throws {
        try _ibackgroundTaskBuilder2.put_CancelOnConditionLoss(value)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskBuilder3 members

    /// Indicates whether to keep the network up while running the background task.
    /// - Returns: `True`: ensure that the network is up while running the background task. `False`, otherwise.
    public var isNetworkRequested: Swift.Bool {
        get throws {
            try _ibackgroundTaskBuilder3.get_IsNetworkRequested()
        }
    }

    /// Indicates whether to keep the network up while running the background task.
    /// - Returns: `True`: ensure that the network is up while running the background task. `False`, otherwise.
    public func isNetworkRequested(_ value: Swift.Bool) throws {
        try _ibackgroundTaskBuilder3.put_IsNetworkRequested(value)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskBuilder4 members

    /// Gets and sets the group identifier.
    /// - Returns: The group identifier.
    public var taskGroup: WindowsApplicationModelBackground_BackgroundTaskRegistrationGroup {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTaskBuilder4.get_TaskGroup())
        }
    }

    /// Gets and sets the group identifier.
    /// - Returns: The group identifier.
    public func taskGroup(_ value: WindowsApplicationModelBackground_BackgroundTaskRegistrationGroup?) throws {
        try _ibackgroundTaskBuilder4.put_TaskGroup(value)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskBuilder5 members

    public func setTaskEntryPointClsid(_ TaskEntryPoint: Foundation.UUID) throws {
        try _ibackgroundTaskBuilder5.setTaskEntryPointClsid(TaskEntryPoint)
    }

    // MARK: Implementation details

    private var _ibackgroundTaskBuilder2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder2>? = nil

    internal var _ibackgroundTaskBuilder2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder2> {
        get throws {
            try _ibackgroundTaskBuilder2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder2.self)
            }
        }
    }

    private var _ibackgroundTaskBuilder3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder3>? = nil

    internal var _ibackgroundTaskBuilder3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder3> {
        get throws {
            try _ibackgroundTaskBuilder3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder3.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder3.self)
            }
        }
    }

    private var _ibackgroundTaskBuilder4_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder4>? = nil

    internal var _ibackgroundTaskBuilder4: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder4> {
        get throws {
            try _ibackgroundTaskBuilder4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder4.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder4.self)
            }
        }
    }

    private var _ibackgroundTaskBuilder5_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder5>? = nil

    internal var _ibackgroundTaskBuilder5: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder5> {
        get throws {
            try _ibackgroundTaskBuilder5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder5.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskBuilder5.self)
            }
        }
    }

    deinit {
        _ibackgroundTaskBuilder2_storage?.release()
        _ibackgroundTaskBuilder3_storage?.release()
        _ibackgroundTaskBuilder4_storage?.release()
        _ibackgroundTaskBuilder5_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BackgroundTaskBuilder", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}