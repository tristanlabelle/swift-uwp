// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an event that an application can trigger to initiate a long-running update (firmware or settings) of a device.
public final class WindowsApplicationModelBackground_DeviceServicingTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_DeviceServicingTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_DeviceServicingTriggerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IDeviceServicingTrigger members

    /// Triggers the background task (settings or firmware update) and returns a DeviceTriggerResult indicating success or failure of the trigger request. Takes the *DeviceInformation.ID* string and an optional estimated time the background task will run. If your app cannot determine an appropriate time estimate, provide zero as the estimated time.
    /// - Parameter deviceId: The *DeviceInformation.ID* of the device the background task will access. The device path must match the device that will perform the background operation and is used by Windows to ensure that policy requirements are met.
    /// - Parameter expectedDuration: Optional value. The expected duration of the background settings update or background firmware update. If provided, it will be displayed to the user in the system consent dialog when the task is triggered by your app. Set this value to zero if an appropriate time estimate cannot be determined.
    /// - Returns: This method returns a DeviceTriggerResult when it completes asynchronously.
    public func requestAsync(_ deviceId: Swift.String, _ expectedDuration: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_DeviceTriggerResult> {
        try COM.NullResult.unwrap(_interop.requestAsyncSimple(deviceId, expectedDuration))
    }

    /// Triggers the background task (settings or firmware update) and returns a DeviceTriggerResult indicating success or failure of the trigger request. Takes the *DeviceInformation.ID* string, an optional estimated time the background task will run, and an optional app-specific string passed to the background task identifying which device operation to perform. If your app cannot determine an appropriate time estimate, provide zero as the estimated time.
    /// - Parameter deviceId: The *DeviceInformation.ID* of the device the background task will access. The device path must match the device that will perform the background operation and is used by Windows to ensure that policy requirements are met.
    /// - Parameter expectedDuration: Optional value. The expected duration of the background settings update or background firmware update. If provided, it will be displayed to the user in the system consent dialog when the task is triggered by your app. Set this value to zero if an appropriate time estimate cannot be determined.
    /// - Parameter arguments: Optional value. An app-specific string passed to the background task identifying which device operation to perform.
    /// - Returns: This method returns a DeviceTriggerResult when it completes asynchronously.
    public func requestAsync(_ deviceId: Swift.String, _ expectedDuration: WindowsFoundation_TimeSpan, _ arguments: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_DeviceTriggerResult> {
        try COM.NullResult.unwrap(_interop.requestAsyncWithArguments(deviceId, expectedDuration, arguments))
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.DeviceServicingTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}