// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that is registered to scan for Bluetooth LE advertisement in the background.
public final class WindowsApplicationModelBackground_BluetoothLEAdvertisementWatcherTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_BluetoothLEAdvertisementWatcherTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_BluetoothLEAdvertisementWatcherTriggerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger members

    /// Gets or sets the configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    /// - Returns: The configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    public var advertisementFilter: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AdvertisementFilter())
        }
    }

    /// Gets or sets the configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    /// - Returns: The configuration of Bluetooth LE advertisement filtering that uses payload section-based filtering.
    public func advertisementFilter(_ value: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisementFilter?) throws {
        try _interop.put_AdvertisementFilter(value)
    }

    /// Gets the maximum out of range timeout supported for the SignalStrengthFilter property of this trigger.
    /// - Returns: The maximum out of range timeout supported for the SignalStrengthFilter property of this trigger.
    public var maxOutOfRangeTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MaxOutOfRangeTimeout()
        }
    }

    /// Gets the maximum sampling interval supported for the SignalStrengthFilter property of this trigger. The maximum sampling interval is used to deactivate the sampling filter and only trigger received events based on the device coming in and out of range.
    /// - Returns: The maximum sampling interval supported for the SignalStrengthFilter property of this trigger.
    public var maxSamplingInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MaxSamplingInterval()
        }
    }

    /// Gets the minimum out of range timeout supported for the SignalStrengthFilter property of this trigger.
    /// - Returns: The minimum out of range timeout supported for the SignalStrengthFilter property of this trigger.
    public var minOutOfRangeTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MinOutOfRangeTimeout()
        }
    }

    /// Gets the minimum sampling interval supported for the SignalStrengthFilter property of this trigger. The minimum sampling interval for the background watcher cannot be zero unlike its foreground counterpart.
    /// - Returns: Gets the minimum sampling interval supported for the SignalStrengthFilter property of this trigger.
    public var minSamplingInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_MinSamplingInterval()
        }
    }

    /// Gets or sets the configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    /// - Returns: The configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    public var signalStrengthFilter: WindowsDevicesBluetooth_BluetoothSignalStrengthFilter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SignalStrengthFilter())
        }
    }

    /// Gets or sets the configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    /// - Returns: The configuration of Bluetooth LE advertisement filtering that uses signal strength-based filtering.
    public func signalStrengthFilter(_ value: WindowsDevicesBluetooth_BluetoothSignalStrengthFilter?) throws {
        try _interop.put_SignalStrengthFilter(value)
    }

    // MARK: Windows.ApplicationModel.Background.IBluetoothLEAdvertisementWatcherTrigger2 members

    /// Enables reception of advertisements using the Extended Advertising format. Defaults to False.
    /// - Returns: Indicates whether advertisements of the Extended Advertising format can be received. The default value is False.
    public var allowExtendedAdvertisements: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementWatcherTrigger2.get_AllowExtendedAdvertisements()
        }
    }

    /// Enables reception of advertisements using the Extended Advertising format. Defaults to False.
    /// - Returns: Indicates whether advertisements of the Extended Advertising format can be received. The default value is False.
    public func allowExtendedAdvertisements(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementWatcherTrigger2.put_AllowExtendedAdvertisements(value)
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    private var _ibluetoothLEAdvertisementWatcherTrigger2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementWatcherTrigger2>? = nil

    internal var _ibluetoothLEAdvertisementWatcherTrigger2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementWatcherTrigger2> {
        get throws {
            try _ibluetoothLEAdvertisementWatcherTrigger2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementWatcherTrigger2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementWatcherTrigger2.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
        _ibluetoothLEAdvertisementWatcherTrigger2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}