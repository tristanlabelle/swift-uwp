// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that launches a background task when an RFCOMM inbound or outbound connections are established.
public final class WindowsApplicationModelBackground_RfcommConnectionTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_RfcommConnectionTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_RfcommConnectionTriggerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IRfcommConnectionTrigger members

    /// Gets or sets whether the app wants to handle multiple connections at a time.
    /// - Returns: True if the app wants to handle multiple connections at a time; Otherwise False. The default is False.
    public var allowMultipleConnections: Swift.Bool {
        get throws {
            try _interop.get_AllowMultipleConnections()
        }
    }

    /// Gets or sets whether the app wants to handle multiple connections at a time.
    /// - Returns: True if the app wants to handle multiple connections at a time; Otherwise False. The default is False.
    public func allowMultipleConnections(_ value: Swift.Bool) throws {
        try _interop.put_AllowMultipleConnections(value)
    }

    /// Gets or sets the RfcommInboundConnectionInformation object that describes how the system will advertise and listen for inbound connections on behalf of the app.
    /// - Returns: The RfcommInboundConnectionInformation object that describes how the system will advertise and listen for inbound connections on behalf of the app. The default is null.
    public var inboundConnection: WindowsDevicesBluetoothBackground_RfcommInboundConnectionInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InboundConnection())
        }
    }

    /// Gets or sets the RfcommOutboundConnectionInformation object that describes how the system will create outgoing connections on behalf of the app.
    /// - Returns: The RfcommOutboundConnectionInformation object that describes how the system will create outgoing connections on behalf of the app. The default is null.
    public var outboundConnection: WindowsDevicesBluetoothBackground_RfcommOutboundConnectionInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OutboundConnection())
        }
    }

    /// Gets or sets the minimum protection level required for connections that are created or accepted on behalf of the app.
    /// - Returns: The minimum protection level required for connections that are created or accepted on behalf of the app. The default is BluetoothEncryptionWithAuthentication.
    public var protectionLevel: WindowsNetworkingSockets_SocketProtectionLevel {
        get throws {
            try _interop.get_ProtectionLevel()
        }
    }

    /// Gets or sets the minimum protection level required for connections that are created or accepted on behalf of the app.
    /// - Returns: The minimum protection level required for connections that are created or accepted on behalf of the app. The default is BluetoothEncryptionWithAuthentication.
    public func protectionLevel(_ value: WindowsNetworkingSockets_SocketProtectionLevel) throws {
        try _interop.put_ProtectionLevel(value)
    }

    /// Gets or sets specific remote Bluetooth device the system will connect to, or accept connections from, on behalf of the app.
    /// - Returns: Gets or sets specific remote Bluetooth device the system will connect to, or accept connections from, on behalf of the app. If this property is not set, the system will connect to and/or accept connections from any paired Bluetooth device that supports the relevant service.
    public var remoteHostName: WindowsNetworking_HostName {
        get throws {
            try COM.NullResult.unwrap(_interop.get_RemoteHostName())
        }
    }

    /// Gets or sets specific remote Bluetooth device the system will connect to, or accept connections from, on behalf of the app.
    /// - Returns: Gets or sets specific remote Bluetooth device the system will connect to, or accept connections from, on behalf of the app. If this property is not set, the system will connect to and/or accept connections from any paired Bluetooth device that supports the relevant service.
    public func remoteHostName(_ value: WindowsNetworking_HostName?) throws {
        try _interop.put_RemoteHostName(value)
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.RfcommConnectionTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}