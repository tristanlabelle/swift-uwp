// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a location event that triggers a background task. This is used for Geofencing.
public final class WindowsApplicationModelBackground_LocationTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_LocationTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: Windows.ApplicationModel.Background.ILocationTriggerFactory members

    public convenience init(_ triggerType: WindowsApplicationModelBackground_LocationTriggerType) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ilocationTriggerFactory.create(triggerType)))
    }

    // MARK: Windows.ApplicationModel.Background.ILocationTrigger members

    /// The type of location event for this trigger.
    /// - Returns: The type of location event for this trigger.
    public var triggerType: WindowsApplicationModelBackground_LocationTriggerType {
        get throws {
            try _interop.get_TriggerType()
        }
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _ilocationTriggerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_ILocationTriggerFactory>? = nil

    internal static var _ilocationTriggerFactory: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_ILocationTriggerFactory> {
        get throws {
            try _ilocationTriggerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.LocationTrigger", id: CWinRT.SWRT_WindowsApplicationModelBackground_ILocationTriggerFactory.iid)
            }
        }
    }
}