// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that is registered to advertise a Bluetooth LE advertisement in the background.
public final class WindowsApplicationModelBackground_BluetoothLEAdvertisementPublisherTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_BluetoothLEAdvertisementPublisherTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsApplicationModelBackground_BluetoothLEAdvertisementPublisherTriggerProjection.self))
    }

    // MARK: Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger members

    /// Gets the Bluetooth LE advertisement to configure and publish in the background.
    /// - Returns: The Bluetooth LE advertisement to configure and publish in the background.
    public var advertisement: WindowsDevicesBluetoothAdvertisement_BluetoothLEAdvertisement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Advertisement())
        }
    }

    // MARK: Windows.ApplicationModel.Background.IBluetoothLEAdvertisementPublisherTrigger2 members

    /// Specifies whether the transmit power level is included in the advertisement header. Defaults to False.
    /// - Returns: Indicates whether the transmit power level is included. The default value is False.
    public var includeTransmitPowerLevel: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisherTrigger2.get_IncludeTransmitPowerLevel()
        }
    }

    /// Specifies whether the transmit power level is included in the advertisement header. Defaults to False.
    /// - Returns: Indicates whether the transmit power level is included. The default value is False.
    public func includeTransmitPowerLevel(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisherTrigger2.put_IncludeTransmitPowerLevel(value)
    }

    /// Specifies whether or not the device address is included in the advertisement header. By default, the address is included.
    /// - Returns: Indicates whether the device address is hidden. The default value is False, indicating that the address is included.
    public var isAnonymous: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisherTrigger2.get_IsAnonymous()
        }
    }

    /// Specifies whether or not the device address is included in the advertisement header. By default, the address is included.
    /// - Returns: Indicates whether the device address is hidden. The default value is False, indicating that the address is included.
    public func isAnonymous(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisherTrigger2.put_IsAnonymous(value)
    }

    /// If specified, requests that the radio use the indicated transmit power level for the advertisement. Defaults to Null.
    /// - Returns: The requested power level for the radio transmission. The default is Null.
    public var preferredTransmitPowerLevelInDBm: Swift.Int16? {
        get throws {
            try _ibluetoothLEAdvertisementPublisherTrigger2.get_PreferredTransmitPowerLevelInDBm()
        }
    }

    /// If specified, requests that the radio use the indicated transmit power level for the advertisement. Defaults to Null.
    /// - Returns: The requested power level for the radio transmission. The default is Null.
    public func preferredTransmitPowerLevelInDBm(_ value: Swift.Int16?) throws {
        try _ibluetoothLEAdvertisementPublisherTrigger2.put_PreferredTransmitPowerLevelInDBm(value)
    }

    /// Specifies that the advertisement publisher should use the Extended Advertising format.
    /// - Returns: Indicates whether or not the Extended Advertising format should be used. The default value is False.
    public var useExtendedFormat: Swift.Bool {
        get throws {
            try _ibluetoothLEAdvertisementPublisherTrigger2.get_UseExtendedFormat()
        }
    }

    /// Specifies that the advertisement publisher should use the Extended Advertising format.
    /// - Returns: Indicates whether or not the Extended Advertising format should be used. The default value is False.
    public func useExtendedFormat(_ value: Swift.Bool) throws {
        try _ibluetoothLEAdvertisementPublisherTrigger2.put_UseExtendedFormat(value)
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    private var _ibluetoothLEAdvertisementPublisherTrigger2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementPublisherTrigger2>? = nil

    internal var _ibluetoothLEAdvertisementPublisherTrigger2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementPublisherTrigger2> {
        get throws {
            try _ibluetoothLEAdvertisementPublisherTrigger2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementPublisherTrigger2.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBluetoothLEAdvertisementPublisherTrigger2.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
        _ibluetoothLEAdvertisementPublisherTrigger2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}