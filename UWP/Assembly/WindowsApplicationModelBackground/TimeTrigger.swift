// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a time event that triggers a background task to run.
public final class WindowsApplicationModelBackground_TimeTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_TimeTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: Windows.ApplicationModel.Background.ITimeTriggerFactory members

    public convenience init(_ freshnessTime: Swift.UInt32, _ oneShot: Swift.Bool) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._itimeTriggerFactory.create(freshnessTime, oneShot)))
    }

    // MARK: Windows.ApplicationModel.Background.ITimeTrigger members

    /// Gets the interval of a time event trigger.
    /// - Returns: Specifies the number of minutes to wait before scheduling the background task. The minimum value for **FreshnessTime** is 15 minutes. The system schedules the task within 15 minutes after **FreshnessTime** elapses.
    public var freshnessTime: Swift.UInt32 {
        get throws {
            try _interop.get_FreshnessTime()
        }
    }

    /// Gets whether the time event trigger will be used only once or each time the FreshnessTime interval elapses.
    /// - Returns: True if the time event trigger will be used once; false if it will be used each time the FreshnessTime interval elapses.
    public var oneShot: Swift.Bool {
        get throws {
            try _interop.get_OneShot()
        }
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _itimeTriggerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_ITimeTriggerFactory>? = nil

    internal static var _itimeTriggerFactory: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_ITimeTriggerFactory> {
        get throws {
            try _itimeTriggerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.TimeTrigger", id: CWinRT.SWRT_WindowsApplicationModelBackground_ITimeTriggerFactory.iid)
            }
        }
    }
}