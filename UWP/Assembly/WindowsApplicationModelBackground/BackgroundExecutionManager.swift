// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Manage permission to run background tasks.
public enum WindowsApplicationModelBackground_BackgroundExecutionManager {
    // MARK: Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics members

    /// Requests that the app be permitted to run background tasks.
    /// - Returns: When the operation completes, it returns a member of the BackgroundAccessStatus enumeration that specifies the outcome.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_BackgroundAccessStatus> {
        try COM.NullResult.unwrap(_ibackgroundExecutionManagerStatics.requestAccessAsync())
    }

    /// Asynchronously requests that the app be permitted to run background tasks.
    /// - Parameter applicationId: The package-relative application identifier (PRAID) of the app to be permitted to run background tasks. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    /// - Returns: An asynchronous request operation. On successful completion, contains a member of the BackgroundAccessStatus enumeration that specifies the outcome.
    public static func requestAccessAsync(_ applicationId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_BackgroundAccessStatus> {
        try COM.NullResult.unwrap(_ibackgroundExecutionManagerStatics.requestAccessForApplicationAsync(applicationId))
    }

    /// Removes the calling app from the list of apps that may run background tasks.
    public static func removeAccess() throws {
        try _ibackgroundExecutionManagerStatics.removeAccess()
    }

    /// Removes a specific app from the list of apps that may run background tasks.
    /// - Parameter applicationId: The package-relative application identifier (PRAID) of the app to be removed from the list of apps that may run background tasks. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    public static func removeAccess(_ applicationId: Swift.String) throws {
        try _ibackgroundExecutionManagerStatics.removeAccessForApplication(applicationId)
    }

    /// Gets the app's background task execution capability.
    /// - Returns: An enumeration value that specifies the app's background capabilities.
    public static func getAccessStatus() throws -> WindowsApplicationModelBackground_BackgroundAccessStatus {
        try _ibackgroundExecutionManagerStatics.getAccessStatus()
    }

    /// Gets the specified app's background task execution capability.
    /// - Parameter applicationId: The package-relative application identifier (PRAID) of the app whose capabilities are being retrieved. The specified app must be in the same package as the calling app. For more info on the PRAID, see the **Id** attribute of the Application element.
    /// - Returns: An enumeration value that specifies the app's background capabilities.
    public static func getAccessStatus(_ applicationId: Swift.String) throws -> WindowsApplicationModelBackground_BackgroundAccessStatus {
        try _ibackgroundExecutionManagerStatics.getAccessStatusForApplication(applicationId)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics3 members

    public static func requestAccessKindForModernStandbyAsync(_ requestedAccess: WindowsApplicationModelBackground_BackgroundAccessRequestKind, _ reason: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ibackgroundExecutionManagerStatics3.requestAccessKindForModernStandbyAsync(requestedAccess, reason))
    }

    public static func getAccessStatusForModernStandby() throws -> WindowsApplicationModelBackground_BackgroundAccessStatus {
        try _ibackgroundExecutionManagerStatics3.getAccessStatusForModernStandby()
    }

    public static func getAccessStatusForModernStandby(_ applicationId: Swift.String) throws -> WindowsApplicationModelBackground_BackgroundAccessStatus {
        try _ibackgroundExecutionManagerStatics3.getAccessStatusForModernStandbyForApplication(applicationId)
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundExecutionManagerStatics2 members

    /// Prompts the user whether they consent to allow the app to perform the specified level of background activity in the background. On the Desktop OS Edition this may present a prompt to the user for their consent.
    /// - Parameter requestedAccess: The type of background activity the app wishes to perform.
    /// - Parameter reason: The string to display in the prompt that the system will raise to the user to describe why the app is requesting to run in the background. For example, the string that appears after "The app says:"
    /// - Returns: **True** indicates that the user or the system approved the requested background activity; **false**, otherwise.
    public static func requestAccessKindAsync(_ requestedAccess: WindowsApplicationModelBackground_BackgroundAccessRequestKind, _ reason: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ibackgroundExecutionManagerStatics2.requestAccessKindAsync(requestedAccess, reason))
    }

    // MARK: Implementation details

    private static var _ibackgroundExecutionManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics>? = nil

    internal static var _ibackgroundExecutionManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics> {
        get throws {
            try _ibackgroundExecutionManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BackgroundExecutionManager", id: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics.iid)
            }
        }
    }

    private static var _ibackgroundExecutionManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics3>? = nil

    internal static var _ibackgroundExecutionManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics3> {
        get throws {
            try _ibackgroundExecutionManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BackgroundExecutionManager", id: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics3.iid)
            }
        }
    }

    private static var _ibackgroundExecutionManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics2>? = nil

    internal static var _ibackgroundExecutionManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics2> {
        get throws {
            try _ibackgroundExecutionManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BackgroundExecutionManager", id: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundExecutionManagerStatics2.iid)
            }
        }
    }
}