// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides grouping semantics so that background task registration can be maintained separately.
public final class WindowsApplicationModelBackground_BackgroundTaskRegistrationGroup: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_BackgroundTaskRegistrationGroupProjection> {
    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroupFactory members

    public convenience init(_ id: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibackgroundTaskRegistrationGroupFactory.create(id)))
    }

    public convenience init(_ id: Swift.String, _ name: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibackgroundTaskRegistrationGroupFactory.createWithName(id, name)))
    }

    // MARK: Windows.ApplicationModel.Background.IBackgroundTaskRegistrationGroup members

    /// Gets all of the background tasks that belong to the group.
    /// - Returns: The background tasks that belong to the group.
    public var allTasks: WindowsFoundationCollections_IMapView<Foundation.UUID, WindowsApplicationModelBackground_BackgroundTaskRegistration?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AllTasks())
        }
    }

    /// Gets the group ID.
    /// - Returns: The group ID.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the friendly name of the group.
    /// - Returns: The friendly name.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// This event is fired when a background task that belongs to a group starts.
    public func backgroundActivated(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelBackground_BackgroundTaskRegistrationGroup?, WindowsApplicationModelActivation_BackgroundActivatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BackgroundActivated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: backgroundActivated)
    }

    public func backgroundActivated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BackgroundActivated(token)
    }

    // MARK: Implementation details

    private static var _ibackgroundTaskRegistrationGroupFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskRegistrationGroupFactory>? = nil

    internal static var _ibackgroundTaskRegistrationGroupFactory: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskRegistrationGroupFactory> {
        get throws {
            try _ibackgroundTaskRegistrationGroupFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup", id: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTaskRegistrationGroupFactory.iid)
            }
        }
    }
}