// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that is activated when the ActivitySensor receives input. This is used when your application needs to respond to the activity sensor.
public final class WindowsApplicationModelBackground_ActivitySensorTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_ActivitySensorTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: Windows.ApplicationModel.Background.IActivitySensorTriggerFactory members

    public convenience init(_ reportIntervalInMilliseconds: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iactivitySensorTriggerFactory.create(reportIntervalInMilliseconds)))
    }

    // MARK: Windows.ApplicationModel.Background.IActivitySensorTrigger members

    /// Gets the minimum supported report interval for the sensor trigger.
    /// - Returns: The minimum supported interval in milliseconds.
    public var minimumReportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_MinimumReportInterval()
        }
    }

    /// Gets the report interval for the trigger.
    /// - Returns: The current report interval for the trigger in milliseconds.
    public var reportInterval: Swift.UInt32 {
        get throws {
            try _interop.get_ReportInterval()
        }
    }

    /// Gets or sets the list of activities your trigger is subscribed to.
    /// - Returns: The list of subscribed activities.
    public var subscribedActivities: WindowsFoundationCollections_IVector<WindowsDevicesSensors_ActivityType> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SubscribedActivities())
        }
    }

    /// Gets the list of supported activities you can subscribe to.
    /// - Returns: The list of supported activities for subscription.
    public var supportedActivities: WindowsFoundationCollections_IVectorView<WindowsDevicesSensors_ActivityType> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedActivities())
        }
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _iactivitySensorTriggerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IActivitySensorTriggerFactory>? = nil

    internal static var _iactivitySensorTriggerFactory: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IActivitySensorTriggerFactory> {
        get throws {
            try _iactivitySensorTriggerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.ActivitySensorTrigger", id: CWinRT.SWRT_WindowsApplicationModelBackground_IActivitySensorTriggerFactory.iid)
            }
        }
    }
}