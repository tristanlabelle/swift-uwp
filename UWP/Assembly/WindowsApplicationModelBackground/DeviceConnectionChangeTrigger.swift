// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a trigger that launches a background task when the connection status of a device changes.
public final class WindowsApplicationModelBackground_DeviceConnectionChangeTrigger: WindowsRuntime.WinRTImport<WindowsApplicationModelBackground_DeviceConnectionChangeTriggerProjection>, WindowsApplicationModelBackground_IBackgroundTriggerProtocol {
    // MARK: Windows.ApplicationModel.Background.IDeviceConnectionChangeTrigger members

    /// Gets whether the system can maintain a connection to the specified device.
    /// - Returns: True if the system can maintain a connection to the specified device; Otherwise, false. If false, an attempt to register a trigger with MaintainConnection = true will throw an exception. The default value of this property is true for Bluetooth LE devices and false for all other device types.
    public var canMaintainConnection: Swift.Bool {
        get throws {
            try _interop.get_CanMaintainConnection()
        }
    }

    /// Gets the device Id associated with the device.
    /// - Returns: The device Id associated with the device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets or sets whether the system should automatically attempt to keep the referenced device connected.
    /// - Returns: True of the system should try to keep the device connected; Otherwise, false. Default is false.
    public var maintainConnection: Swift.Bool {
        get throws {
            try _interop.get_MaintainConnection()
        }
    }

    /// Gets or sets whether the system should automatically attempt to keep the referenced device connected.
    /// - Returns: True of the system should try to keep the device connected; Otherwise, false. Default is false.
    public func maintainConnection(_ value: Swift.Bool) throws {
        try _interop.put_MaintainConnection(value)
    }

    // MARK: Windows.ApplicationModel.Background.IDeviceConnectionChangeTriggerStatics members

    /// Begins an asynchronous operation to get the DeviceConnectionChangeTrigger associated with the specified Id.
    /// - Parameter deviceId: The device Id with which to find the associated trigger.
    /// - Returns: The DeviceConnectionChangeTrigger object associated with the specified device Id.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelBackground_DeviceConnectionChangeTrigger?> {
        try COM.NullResult.unwrap(_ideviceConnectionChangeTriggerStatics.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _ibackgroundTrigger_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger>? = nil

    internal var _ibackgroundTrigger: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger> {
        get throws {
            try _ibackgroundTrigger_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.iid).cast(to: CWinRT.SWRT_WindowsApplicationModelBackground_IBackgroundTrigger.self)
            }
        }
    }

    deinit {
        _ibackgroundTrigger_storage?.release()
    }

    private static var _ideviceConnectionChangeTriggerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IDeviceConnectionChangeTriggerStatics>? = nil

    internal static var _ideviceConnectionChangeTriggerStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelBackground_IDeviceConnectionChangeTriggerStatics> {
        get throws {
            try _ideviceConnectionChangeTriggerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger", id: CWinRT.SWRT_WindowsApplicationModelBackground_IDeviceConnectionChangeTriggerStatics.iid)
            }
        }
    }
}