// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a photo import session with a photo import source.
public final class WindowsMediaImport_PhotoImportSession: WindowsRuntime.WinRTImport<WindowsMediaImport_PhotoImportSessionProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Import.IPhotoImportSession members

    /// Gets or sets a value specifying whether the session date should be appended to the destination folder name.
    /// - Returns: True if the session date should be appended to the folder name; otherwise, false.
    public var appendSessionDateToDestinationFolder: Swift.Bool {
        get throws {
            try _interop.get_AppendSessionDateToDestinationFolder()
        }
    }

    /// Gets or sets a value specifying whether the session date should be appended to the destination folder name.
    /// - Returns: True if the session date should be appended to the folder name; otherwise, false.
    public func appendSessionDateToDestinationFolder(_ value: Swift.Bool) throws {
        try _interop.put_AppendSessionDateToDestinationFolder(value)
    }

    /// Gets or sets the prefix for the destination file name.
    /// - Returns: The prefix for the destination file name.
    public var destinationFileNamePrefix: Swift.String {
        get throws {
            try _interop.get_DestinationFileNamePrefix()
        }
    }

    /// Gets or sets the prefix for the destination file name.
    /// - Returns: The prefix for the destination file name.
    public func destinationFileNamePrefix(_ value: Swift.String) throws {
        try _interop.put_DestinationFileNamePrefix(value)
    }

    /// Gets or sets the destination folder for the photo import session.
    /// - Returns: The destination folder for the photo import session.
    public var destinationFolder: WindowsStorage_IStorageFolder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DestinationFolder())
        }
    }

    /// Gets or sets the destination folder for the photo import session.
    /// - Returns: The destination folder for the photo import session.
    public func destinationFolder(_ value: WindowsStorage_IStorageFolder?) throws {
        try _interop.put_DestinationFolder(value)
    }

    /// Gets a unique identifier for the import session.
    /// - Returns: A unique identifier for the import session.
    public var sessionId: Foundation.UUID {
        get throws {
            try _interop.get_SessionId()
        }
    }

    /// Gets an object representing the source device associated with the photo import session.
    /// - Returns: An object representing the source device associated with the photo import session.
    public var source: WindowsMediaImport_PhotoImportSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets or sets a value indicating the method used for naming subfolders within the destination folder.
    /// - Returns: A value indicating method used for naming subfolders within the destination folder.
    public var subfolderCreationMode: WindowsMediaImport_PhotoImportSubfolderCreationMode {
        get throws {
            try _interop.get_SubfolderCreationMode()
        }
    }

    /// Gets or sets a value indicating the method used for naming subfolders within the destination folder.
    /// - Returns: A value indicating method used for naming subfolders within the destination folder.
    public func subfolderCreationMode(_ value: WindowsMediaImport_PhotoImportSubfolderCreationMode) throws {
        try _interop.put_SubfolderCreationMode(value)
    }

    /// Asynchronously finds items on the source device that are available for import.
    /// - Parameter contentTypeFilter: A value indicating whether the find operation includes images, videos, or both in the results.
    /// - Parameter itemSelectionMode: A value indicating whether all items, no items, or only new items in the results are initially marked as selected.
    /// - Returns: An asynchronous operation that returns a PhotoImportFindItemsResult on successful completion.
    public func findItemsAsync(_ contentTypeFilter: WindowsMediaImport_PhotoImportContentTypeFilter, _ itemSelectionMode: WindowsMediaImport_PhotoImportItemSelectionMode) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsMediaImport_PhotoImportFindItemsResult?, Swift.UInt32> {
        try COM.NullResult.unwrap(_interop.findItemsAsync(contentTypeFilter, itemSelectionMode))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the photo import session and releases associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Import.IPhotoImportSession2 members

    /// Gets a value indicating whether the deselected items for the session should be remembered.
    /// - Returns: True if the deselected items for the session should be remembered; otherwise, false.
    public var rememberDeselectedItems: Swift.Bool {
        get throws {
            try _iphotoImportSession2.get_RememberDeselectedItems()
        }
    }

    /// Gets a value indicating whether the deselected items for the session should be remembered.
    /// - Returns: True if the deselected items for the session should be remembered; otherwise, false.
    public func rememberDeselectedItems(_ value: Swift.Bool) throws {
        try _iphotoImportSession2.put_RememberDeselectedItems(value)
    }

    /// Gets or sets a value indicating the date format used by the session for subfolders.
    /// - Returns: A value indicating the date format used by the session for subfolders.
    public var subfolderDateFormat: WindowsMediaImport_PhotoImportSubfolderDateFormat {
        get throws {
            try _iphotoImportSession2.get_SubfolderDateFormat()
        }
    }

    /// Gets or sets a value indicating the date format used by the session for subfolders.
    /// - Returns: A value indicating the date format used by the session for subfolders.
    public func subfolderDateFormat(_ value: WindowsMediaImport_PhotoImportSubfolderDateFormat) throws {
        try _iphotoImportSession2.put_SubfolderDateFormat(value)
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _iphotoImportSession2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaImport_IPhotoImportSession2>? = nil

    internal var _iphotoImportSession2: COM.COMInterop<CWinRT.SWRT_WindowsMediaImport_IPhotoImportSession2> {
        get throws {
            try _iphotoImportSession2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaImport_IPhotoImportSession2.iid).cast(to: CWinRT.SWRT_WindowsMediaImport_IPhotoImportSession2.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
        _iphotoImportSession2_storage?.release()
    }
}