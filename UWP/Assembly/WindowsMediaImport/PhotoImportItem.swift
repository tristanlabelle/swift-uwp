// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an media item that has been imported from a source.
public final class WindowsMediaImport_PhotoImportItem: WindowsRuntime.WinRTImport<WindowsMediaImport_PhotoImportItemProjection> {
    // MARK: Windows.Media.Import.IPhotoImportItem members

    /// Gets the content type of the imported item.
    /// - Returns: The content type of the imported item.
    public var contentType: WindowsMediaImport_PhotoImportContentType {
        get throws {
            try _interop.get_ContentType()
        }
    }

    /// Gets the creation date of the imported item.
    /// - Returns: The creation date of the imported item.
    public var date: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Date()
        }
    }

    /// Gets a list of the names of files associated with this item that were deleted.
    /// - Returns: A list of the names of files associated with this item that were deleted.
    public var deletedFileNames: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DeletedFileNames())
        }
    }

    /// Gets a list of the names of files associated with this item that were imported.
    /// - Returns: A list of the names of files associated with this item that were imported.
    public var importedFileNames: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ImportedFileNames())
        }
    }

    /// Gets a value indicating whether the item is currently selected for import.
    /// - Returns: True if the item is currently selected; otherwise, false.
    public var isSelected: Swift.Bool {
        get throws {
            try _interop.get_IsSelected()
        }
    }

    /// Gets a value indicating whether the item is currently selected for import.
    /// - Returns: True if the item is currently selected; otherwise, false.
    public func isSelected(_ value: Swift.Bool) throws {
        try _interop.put_IsSelected(value)
    }

    /// Gets the key used to identify the item.
    /// - Returns: The key used to identify the item.
    public var itemKey: Swift.UInt64 {
        get throws {
            try _interop.get_ItemKey()
        }
    }

    /// Gets the name of the item.
    /// - Returns: The name of the item.
    public var name: Swift.String {
        get throws {
            try _interop.get_Name()
        }
    }

    /// Gets the sibling file associated with the item, if one exists.
    /// - Returns: The sibling file associated with the item
    public var sibling: WindowsMediaImport_PhotoImportSidecar {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Sibling())
        }
    }

    /// Gets the list of sidecar files associated with the item, if any exists.
    /// - Returns: The list of sidecar files associated with the item
    public var sidecars: WindowsFoundationCollections_IVectorView<WindowsMediaImport_PhotoImportSidecar?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Sidecars())
        }
    }

    /// Gets the size of the item, in bytes.
    /// - Returns: The size of the item, in bytes.
    public var sizeInBytes: Swift.UInt64 {
        get throws {
            try _interop.get_SizeInBytes()
        }
    }

    /// Gets a random access stream containing the thumbnail image associated with the item.
    /// - Returns: A random access stream containing the thumbnail image associated with the item.
    public var thumbnail: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Thumbnail())
        }
    }

    /// Gets the list of video segments associated with the item.
    /// - Returns: The list of video segments associated with the item.
    public var videoSegments: WindowsFoundationCollections_IVectorView<WindowsMediaImport_PhotoImportVideoSegment?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoSegments())
        }
    }

    // MARK: Windows.Media.Import.IPhotoImportItem2 members

    /// Gets the file system path of the PhotoImportItem.
    /// - Returns: The file system path of the PhotoImportItem.
    public var path: Swift.String {
        get throws {
            try _iphotoImportItem2.get_Path()
        }
    }

    // MARK: Implementation details

    private var _iphotoImportItem2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaImport_IPhotoImportItem2>? = nil

    internal var _iphotoImportItem2: COM.COMInterop<CWinRT.SWRT_WindowsMediaImport_IPhotoImportItem2> {
        get throws {
            try _iphotoImportItem2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaImport_IPhotoImportItem2.iid).cast(to: CWinRT.SWRT_WindowsMediaImport_IPhotoImportItem2.self)
            }
        }
    }

    deinit {
        _iphotoImportItem2_storage?.release()
    }
}