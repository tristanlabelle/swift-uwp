// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents advanced routing options.
public final class WindowsServicesMaps_MapRouteDrivingOptions: WindowsRuntime.WinRTImport<WindowsServicesMaps_MapRouteDrivingOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsServicesMaps_MapRouteDrivingOptionsProjection.self))
    }

    // MARK: Windows.Services.Maps.IMapRouteDrivingOptions members

    /// Gets or sets the preferred start direction of the route from the current location in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The preferred start direction of the route from the current location in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public var initialHeading: Swift.Double? {
        get throws {
            try _interop.get_InitialHeading()
        }
    }

    /// Gets or sets the preferred start direction of the route from the current location in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The preferred start direction of the route from the current location in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public func initialHeading(_ value: Swift.Double?) throws {
        try _interop.put_InitialHeading(value)
    }

    /// Gets or sets a value that indicates the maximum number of alternative routes that are to be provided, if available.
    /// - Returns: The maximum number of alternative routes that are to be provided, if available.
    public var maxAlternateRouteCount: Swift.UInt32 {
        get throws {
            try _interop.get_MaxAlternateRouteCount()
        }
    }

    /// Gets or sets a value that indicates the maximum number of alternative routes that are to be provided, if available.
    /// - Returns: The maximum number of alternative routes that are to be provided, if available.
    public func maxAlternateRouteCount(_ value: Swift.UInt32) throws {
        try _interop.put_MaxAlternateRouteCount(value)
    }

    /// Gets or sets the optimization applied to the route(s).
    /// - Returns: The MapRouteOptimization applied to the route(s).
    public var routeOptimization: WindowsServicesMaps_MapRouteOptimization {
        get throws {
            try _interop.get_RouteOptimization()
        }
    }

    /// Gets or sets the optimization applied to the route(s).
    /// - Returns: The MapRouteOptimization applied to the route(s).
    public func routeOptimization(_ value: WindowsServicesMaps_MapRouteOptimization) throws {
        try _interop.put_RouteOptimization(value)
    }

    /// Gets or sets the restriction applied to the route(s).
    /// - Returns: The MapRouteRestriction applied to the route(s).
    public var routeRestrictions: WindowsServicesMaps_MapRouteRestrictions {
        get throws {
            try _interop.get_RouteRestrictions()
        }
    }

    /// Gets or sets the restriction applied to the route(s).
    /// - Returns: The MapRouteRestriction applied to the route(s).
    public func routeRestrictions(_ value: WindowsServicesMaps_MapRouteRestrictions) throws {
        try _interop.put_RouteRestrictions(value)
    }

    // MARK: Windows.Services.Maps.IMapRouteDrivingOptions2 members

    /// Gets or sets the date and time of the departure on a route.
    /// - Returns: The date and time of departure on a route.
    public var departureTime: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _imapRouteDrivingOptions2.get_DepartureTime()
        }
    }

    /// Gets or sets the date and time of the departure on a route.
    /// - Returns: The date and time of departure on a route.
    public func departureTime(_ value: WindowsFoundation_IReference<WindowsFoundation_DateTime>?) throws {
        try _imapRouteDrivingOptions2.put_DepartureTime(value)
    }

    // MARK: Implementation details

    private var _imapRouteDrivingOptions2_storage: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteDrivingOptions2>? = nil

    internal var _imapRouteDrivingOptions2: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteDrivingOptions2> {
        get throws {
            try _imapRouteDrivingOptions2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsServicesMaps_IMapRouteDrivingOptions2.iid).cast(to: CWinRT.SWRT_WindowsServicesMaps_IMapRouteDrivingOptions2.self)
            }
        }
    }

    deinit {
        _imapRouteDrivingOptions2_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Services.Maps.MapRouteDrivingOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}