// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Returns the result of a MapRouteFinder query.
public final class WindowsServicesMaps_MapRouteFinderResult: WindowsRuntime.WinRTImport<WindowsServicesMaps_MapRouteFinderResultProjection> {
    // MARK: Windows.Services.Maps.IMapRouteFinderResult members

    /// Gets the route found by a MapRouteFinder query.
    /// - Returns: The route found by a MapRouteFinder query.
    public var route: WindowsServicesMaps_MapRoute {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Route())
        }
    }

    /// Gets the status of a MapRouteFinder query.
    /// - Returns: The status of a MapRouteFinder query.
    public var status: WindowsServicesMaps_MapRouteFinderStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    // MARK: Windows.Services.Maps.IMapRouteFinderResult2 members

    /// Gets alternate routes between the same start and end points (if available).
    /// - Returns: Alternate routes, of type MapRoute, between the same start and end points (if available); otherwise, **null**.
    public var alternateRoutes: WindowsFoundationCollections_IVectorView<WindowsServicesMaps_MapRoute?> {
        get throws {
            try COM.NullResult.unwrap(_imapRouteFinderResult2.get_AlternateRoutes())
        }
    }

    // MARK: Implementation details

    private var _imapRouteFinderResult2_storage: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteFinderResult2>? = nil

    internal var _imapRouteFinderResult2: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteFinderResult2> {
        get throws {
            try _imapRouteFinderResult2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsServicesMaps_IMapRouteFinderResult2.iid).cast(to: CWinRT.SWRT_WindowsServicesMaps_IMapRouteFinderResult2.self)
            }
        }
    }

    deinit {
        _imapRouteFinderResult2_storage?.release()
    }
}