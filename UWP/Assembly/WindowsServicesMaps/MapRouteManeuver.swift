// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents actions to be taken along the path of a route leg.
public final class WindowsServicesMaps_MapRouteManeuver: WindowsRuntime.WinRTImport<WindowsServicesMaps_MapRouteManeuverProjection> {
    // MARK: Windows.Services.Maps.IMapRouteManeuver members

    /// Gets the exit number of route maneuver.
    /// - Returns: The exit number of route maneuver.
    public var exitNumber: Swift.String {
        get throws {
            try _interop.get_ExitNumber()
        }
    }

    /// Gets the instruction text associated with the maneuver.
    /// - Returns: The instruction text associated with the maneuver.
    public var instructionText: Swift.String {
        get throws {
            try _interop.get_InstructionText()
        }
    }

    /// Gets the type of the maneuver.
    /// - Returns: The type of the maneuver.
    public var kind: WindowsServicesMaps_MapRouteManeuverKind {
        get throws {
            try _interop.get_Kind()
        }
    }

    /// Gets the distance in meters to the start of the next maneuver.
    /// - Returns: The distance in meters to the start of the next maneuver.
    public var lengthInMeters: Swift.Double {
        get throws {
            try _interop.get_LengthInMeters()
        }
    }

    /// Gets additional information associated with the maneuver.
    /// - Returns: Additional information associated with the maneuver.
    public var maneuverNotices: WindowsServicesMaps_MapManeuverNotices {
        get throws {
            try _interop.get_ManeuverNotices()
        }
    }

    /// Gets the location where the maneuver starts.
    /// - Returns: The location where the maneuver starts.
    public var startingPoint: WindowsDevicesGeolocation_Geopoint {
        get throws {
            try COM.NullResult.unwrap(_interop.get_StartingPoint())
        }
    }

    // MARK: Windows.Services.Maps.IMapRouteManeuver2 members

    /// Gets a value that indicates the heading at the end of the maneuver in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The heading at the end of the maneuver in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public var endHeading: Swift.Double {
        get throws {
            try _imapRouteManeuver2.get_EndHeading()
        }
    }

    /// Gets a value that indicates the heading at the start of the maneuver in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The heading at the start of the maneuver in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public var startHeading: Swift.Double {
        get throws {
            try _imapRouteManeuver2.get_StartHeading()
        }
    }

    /// Gets the street name specified in InstructionText, if available.
    /// - Returns: The street name specified in InstructionText, if available.
    public var streetName: Swift.String {
        get throws {
            try _imapRouteManeuver2.get_StreetName()
        }
    }

    // MARK: Windows.Services.Maps.IMapRouteManeuver3 members

    /// Gets a list of potential issues along a route leg.
    /// - Returns: A list of potential issues along a route leg.
    public var warnings: WindowsFoundationCollections_IVectorView<WindowsServicesMaps_ManeuverWarning?> {
        get throws {
            try COM.NullResult.unwrap(_imapRouteManeuver3.get_Warnings())
        }
    }

    // MARK: Implementation details

    private var _imapRouteManeuver2_storage: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver2>? = nil

    internal var _imapRouteManeuver2: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver2> {
        get throws {
            try _imapRouteManeuver2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver2.iid).cast(to: CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver2.self)
            }
        }
    }

    private var _imapRouteManeuver3_storage: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver3>? = nil

    internal var _imapRouteManeuver3: COM.COMInterop<CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver3> {
        get throws {
            try _imapRouteManeuver3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver3.iid).cast(to: CWinRT.SWRT_WindowsServicesMaps_IMapRouteManeuver3.self)
            }
        }
    }

    deinit {
        _imapRouteManeuver2_storage?.release()
        _imapRouteManeuver3_storage?.release()
    }
}