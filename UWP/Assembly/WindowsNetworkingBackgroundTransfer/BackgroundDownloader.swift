// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Used to configure downloads prior to the actual creation of the download operation using CreateDownload. For an overview of Background Transfer capabilities, see [Transferring data in the background](https://docs.microsoft.com/previous-versions/windows/apps/hh452979(v=win.10)). Download the Background Transfer sample for examples in JavaScript, C#, and C++.
public final class WindowsNetworkingBackgroundTransfer_BackgroundDownloader: WindowsRuntime.WinRTImport<WindowsNetworkingBackgroundTransfer_BackgroundDownloaderProjection>, WindowsNetworkingBackgroundTransfer_IBackgroundTransferBaseProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingBackgroundTransfer_BackgroundDownloaderProjection.self))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderFactory members

    public convenience init(_ completionGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferCompletionGroup?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibackgroundDownloaderFactory.createWithCompletionGroup(completionGroup)))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloader members

    /// Initializes a DownloadOperation object that contains the specified Uri and the file that the response is written to.
    /// - Parameter uri: The location of the resource.
    /// - Parameter resultFile: The file that the response will be written to.
    /// - Returns: The resultant download operation.
    public func createDownload(_ uri: WindowsFoundation_Uri?, _ resultFile: WindowsStorage_IStorageFile?) throws -> WindowsNetworkingBackgroundTransfer_DownloadOperation {
        try COM.NullResult.unwrap(_interop.createDownload(uri, resultFile))
    }

    /// Initializes a DownloadOperation object with the resource Uri, the file that the response is written to, and the request entity body.
    /// - Parameter uri: The location of the resource.
    /// - Parameter resultFile: The file that the response will be written to.
    /// - Parameter requestBodyFile: A file that represents the request entity body, which contains additional data the server requires before the download can begin. The file this object points to must be valid for the duration of the download.
    /// - Returns: The resultant download operation.
    public func createDownload(_ uri: WindowsFoundation_Uri?, _ resultFile: WindowsStorage_IStorageFile?, _ requestBodyFile: WindowsStorage_IStorageFile?) throws -> WindowsNetworkingBackgroundTransfer_DownloadOperation {
        try COM.NullResult.unwrap(_interop.createDownloadFromFile(uri, resultFile, requestBodyFile))
    }

    /// Creates an asynchronous download operation that includes a URI, the file that the response will be written to, and the IInputStream object from which the file contents are read.
    /// - Parameter uri: The location of the resource.
    /// - Parameter resultFile: Represents the file that the response will be written to.
    /// - Parameter requestBodyStream: A stream that represents the request entity body.
    /// - Returns: The resultant asynchronous download operation.
    public func createDownloadAsync(_ uri: WindowsFoundation_Uri?, _ resultFile: WindowsStorage_IStorageFile?, _ requestBodyStream: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_DownloadOperation?> {
        try COM.NullResult.unwrap(_interop.createDownloadAsync(uri, resultFile, requestBodyStream))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferBase members

    /// Gets or sets the cost policy for the background download operation.
    /// - Returns: Indicates whether transfers can occur on costed networks.
    public var costPolicy: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy {
        get throws {
            try _ibackgroundTransferBase.get_CostPolicy()
        }
    }

    /// Gets or sets the cost policy for the background download operation.
    /// - Returns: Indicates whether transfers can occur on costed networks.
    public func costPolicy(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy) throws {
        try _ibackgroundTransferBase.put_CostPolicy(value)
    }

    /// Gets or sets a string value (for example, a GUID ) indicating the group the transfer will belong to. A download operation with a group ID will only appear in operation enumerations using GetCurrentDownloadsAsync(String) with the specific group string value.
    /// - Returns: The group name.
    public var group: Swift.String {
        get throws {
            try _ibackgroundTransferBase.get_Group()
        }
    }

    /// Gets or sets a string value (for example, a GUID ) indicating the group the transfer will belong to. A download operation with a group ID will only appear in operation enumerations using GetCurrentDownloadsAsync(String) with the specific group string value.
    /// - Returns: The group name.
    public func group(_ value: Swift.String) throws {
        try _ibackgroundTransferBase.put_Group(value)
    }

    /// Gets or sets the HTTP method used for the background download. The default method used for download operations is GET.
    /// - Returns: The method to use for the background download. Setting this property will override the default method used for the operation.
    public var method: Swift.String {
        get throws {
            try _ibackgroundTransferBase.get_Method()
        }
    }

    /// Gets or sets the HTTP method used for the background download. The default method used for download operations is GET.
    /// - Returns: The method to use for the background download. Setting this property will override the default method used for the operation.
    public func method(_ value: Swift.String) throws {
        try _ibackgroundTransferBase.put_Method(value)
    }

    /// Gets or sets the proxy credentials for the background transfer.
    /// - Returns: The credentials used to authenticate with an HTTP proxy.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferBase.get_ProxyCredential())
        }
    }

    /// Gets or sets the proxy credentials for the background transfer.
    /// - Returns: The credentials used to authenticate with an HTTP proxy.
    public func proxyCredential(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ibackgroundTransferBase.put_ProxyCredential(credential)
    }

    /// Gets or sets the credentials to use to authenticate with the origin server.
    /// - Returns: The credential to use for authentication.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferBase.get_ServerCredential())
        }
    }

    /// Gets or sets the credentials to use to authenticate with the origin server.
    /// - Returns: The credential to use for authentication.
    public func serverCredential(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ibackgroundTransferBase.put_ServerCredential(credential)
    }

    /// Used to set an HTTP request header.
    /// - Parameter headerName: The header name.
    /// - Parameter headerValue: The header value.
    public func setRequestHeader(_ headerName: Swift.String, _ headerValue: Swift.String) throws {
        try _ibackgroundTransferBase.setRequestHeader(headerName, headerValue)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 members

    /// Gets or sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating failure of a download to the user.
    /// - Returns: The TileNotification used to indicate download failure.
    public var failureTileNotification: WindowsUINotifications_TileNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader2.get_FailureTileNotification())
        }
    }

    /// Gets or sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating failure of a download to the user.
    /// - Returns: The TileNotification used to indicate download failure.
    public func failureTileNotification(_ value: WindowsUINotifications_TileNotification?) throws {
        try _ibackgroundDownloader2.put_FailureTileNotification(value)
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate failure of a download to the user.
    /// - Returns: The ToastNotification used to indicate download failure.
    public var failureToastNotification: WindowsUINotifications_ToastNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader2.get_FailureToastNotification())
        }
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate failure of a download to the user.
    /// - Returns: The ToastNotification used to indicate download failure.
    public func failureToastNotification(_ value: WindowsUINotifications_ToastNotification?) throws {
        try _ibackgroundDownloader2.put_FailureToastNotification(value)
    }

    /// Gets or sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating success of a download to the user.
    /// - Returns: The TileNotification used to indicate download success.
    public var successTileNotification: WindowsUINotifications_TileNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader2.get_SuccessTileNotification())
        }
    }

    /// Gets or sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating success of a download to the user.
    /// - Returns: The TileNotification used to indicate download success.
    public func successTileNotification(_ value: WindowsUINotifications_TileNotification?) throws {
        try _ibackgroundDownloader2.put_SuccessTileNotification(value)
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate success of a download to the user.
    /// - Returns: The ToastNotification used to indicate download success.
    public var successToastNotification: WindowsUINotifications_ToastNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader2.get_SuccessToastNotification())
        }
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate success of a download to the user.
    /// - Returns: The ToastNotification used to indicate download success.
    public func successToastNotification(_ value: WindowsUINotifications_ToastNotification?) throws {
        try _ibackgroundDownloader2.put_SuccessToastNotification(value)
    }

    /// Gets or sets the group that a download operation will belong to.
    /// - Returns: The group to associate with the download.
    public var transferGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader2.get_TransferGroup())
        }
    }

    /// Gets or sets the group that a download operation will belong to.
    /// - Returns: The group to associate with the download.
    public func transferGroup(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup?) throws {
        try _ibackgroundDownloader2.put_TransferGroup(value)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloader3 members

    /// Gets the BackgroundTransferCompletionGroup associated with the BackgroundDownloader.
    /// - Returns: The BackgroundTransferCompletionGroup associated with the BackgroundDownloader . This property can be null.
    public var completionGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferCompletionGroup {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundDownloader3.get_CompletionGroup())
        }
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods2 members

    /// Gets all downloads associated with the provided BackgroundTransferGroup.
    /// - Parameter group: Contains information used to identify a group of downloads.
    /// - Returns: A list of downloads currently associated with the specified group.
    public static func getCurrentDownloadsForTransferGroupAsync(_ group: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_DownloadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundDownloaderStaticMethods2.getCurrentDownloadsForTransferGroupAsync(group))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods members

    /// Returns a collection of pending downloads that are not associated with a BackgroundTransferGroup.
    /// - Returns: A collection of pending downloads for the current application instance.
    public static func getCurrentDownloadsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_DownloadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundDownloaderStaticMethods.getCurrentDownloadsAsync())
    }

    /// Returns a collection of pending downloads for a specific Group.
    /// - Parameter group: A string indicating a specific group of transfers.
    /// - Returns: A collection of pending downloads for the specific group.
    public static func getCurrentDownloadsAsync(_ group: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_DownloadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundDownloaderStaticMethods.getCurrentDownloadsForGroupAsync(group))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderUserConsent members

    public static func requestUnconstrainedDownloadsAsync(_ operations: WindowsFoundationCollections_IIterable<WindowsNetworkingBackgroundTransfer_DownloadOperation?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UnconstrainedTransferRequestResult?> {
        try COM.NullResult.unwrap(_ibackgroundDownloaderUserConsent.requestUnconstrainedDownloadsAsync(operations))
    }

    // MARK: Implementation details

    private var _ibackgroundTransferBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase>? = nil

    internal var _ibackgroundTransferBase: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase> {
        get throws {
            try _ibackgroundTransferBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase.self)
            }
        }
    }

    private var _ibackgroundDownloader2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader2>? = nil

    internal var _ibackgroundDownloader2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader2> {
        get throws {
            try _ibackgroundDownloader2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader2.self)
            }
        }
    }

    private var _ibackgroundDownloader3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader3>? = nil

    internal var _ibackgroundDownloader3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader3> {
        get throws {
            try _ibackgroundDownloader3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloader3.self)
            }
        }
    }

    deinit {
        _ibackgroundTransferBase_storage?.release()
        _ibackgroundDownloader2_storage?.release()
        _ibackgroundDownloader3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundDownloader", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibackgroundDownloaderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderFactory>? = nil

    internal static var _ibackgroundDownloaderFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderFactory> {
        get throws {
            try _ibackgroundDownloaderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundDownloader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderFactory.iid)
            }
        }
    }

    private static var _ibackgroundDownloaderStaticMethods2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods2>? = nil

    internal static var _ibackgroundDownloaderStaticMethods2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods2> {
        get throws {
            try _ibackgroundDownloaderStaticMethods2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundDownloader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods2.iid)
            }
        }
    }

    private static var _ibackgroundDownloaderStaticMethods_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods>? = nil

    internal static var _ibackgroundDownloaderStaticMethods: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods> {
        get throws {
            try _ibackgroundDownloaderStaticMethods_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundDownloader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderStaticMethods.iid)
            }
        }
    }

    private static var _ibackgroundDownloaderUserConsent_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderUserConsent>? = nil

    internal static var _ibackgroundDownloaderUserConsent: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderUserConsent> {
        get throws {
            try _ibackgroundDownloaderUserConsent_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundDownloader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundDownloaderUserConsent.iid)
            }
        }
    }
}