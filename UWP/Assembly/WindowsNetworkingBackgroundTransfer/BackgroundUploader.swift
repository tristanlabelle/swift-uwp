// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Used to configure upload prior to the actual creation of the upload operation using CreateUpload. For an overview of Background Transfer capabilities, see [Transferring data in the background](https://docs.microsoft.com/previous-versions/windows/apps/hh452979(v=win.10)). Download the Background Transfer sample for examples in JavaScript, C#, and C++.
public final class WindowsNetworkingBackgroundTransfer_BackgroundUploader: WindowsRuntime.WinRTImport<WindowsNetworkingBackgroundTransfer_BackgroundUploaderProjection>, WindowsNetworkingBackgroundTransfer_IBackgroundTransferBaseProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsNetworkingBackgroundTransfer_BackgroundUploaderProjection.self))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploaderFactory members

    public convenience init(_ completionGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferCompletionGroup?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibackgroundUploaderFactory.createWithCompletionGroup(completionGroup)))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploader members

    /// Initializes an UploadOperation that indicates the location for and file for upload.
    /// - Parameter uri: The location for the upload.
    /// - Parameter sourceFile: The file for upload.
    /// - Returns: The resultant upload operation.
    public func createUpload(_ uri: WindowsFoundation_Uri?, _ sourceFile: WindowsStorage_IStorageFile?) throws -> WindowsNetworkingBackgroundTransfer_UploadOperation {
        try COM.NullResult.unwrap(_interop.createUpload(uri, sourceFile))
    }

    /// Returns an asynchronous operation that, on completion, returns an UploadOperation with the specified URI and the source stream.
    /// - Parameter uri: The URI associated with the resource.
    /// - Parameter sourceStream: Represents the source stream.
    /// - Returns: The resultant asynchronous upload operation.
    public func createUploadFromStreamAsync(_ uri: WindowsFoundation_Uri?, _ sourceStream: WindowsStorageStreams_IInputStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.createUploadFromStreamAsync(uri, sourceStream))
    }

    public func createUploadAsync(_ uri: WindowsFoundation_Uri?, _ parts: WindowsFoundationCollections_IIterable<WindowsNetworkingBackgroundTransfer_BackgroundTransferContentPart?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.createUploadWithFormDataAndAutoBoundaryAsync(uri, parts))
    }

    public func createUploadAsync(_ uri: WindowsFoundation_Uri?, _ parts: WindowsFoundationCollections_IIterable<WindowsNetworkingBackgroundTransfer_BackgroundTransferContentPart?>?, _ subType: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.createUploadWithSubTypeAsync(uri, parts, subType))
    }

    public func createUploadAsync(_ uri: WindowsFoundation_Uri?, _ parts: WindowsFoundationCollections_IIterable<WindowsNetworkingBackgroundTransfer_BackgroundTransferContentPart?>?, _ subType: Swift.String, _ boundary: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.createUploadWithSubTypeAndBoundaryAsync(uri, parts, subType, boundary))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferBase members

    /// Gets or sets the cost policy for the background upload operation.
    /// - Returns: Indicates whether transfers can occur on costed networks.
    public var costPolicy: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy {
        get throws {
            try _ibackgroundTransferBase.get_CostPolicy()
        }
    }

    /// Gets or sets the cost policy for the background upload operation.
    /// - Returns: Indicates whether transfers can occur on costed networks.
    public func costPolicy(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy) throws {
        try _ibackgroundTransferBase.put_CostPolicy(value)
    }

    /// Gets or sets a string value (for example, a GUID ) indicating the group the upload will belong to. An upload operation with a group ID will only appear in operation enumerations using GetCurrentDownloadsAsync(String) with the specific group string value.
    /// - Returns: The group name.
    public var group: Swift.String {
        get throws {
            try _ibackgroundTransferBase.get_Group()
        }
    }

    /// Gets or sets a string value (for example, a GUID ) indicating the group the upload will belong to. An upload operation with a group ID will only appear in operation enumerations using GetCurrentDownloadsAsync(String) with the specific group string value.
    /// - Returns: The group name.
    public func group(_ value: Swift.String) throws {
        try _ibackgroundTransferBase.put_Group(value)
    }

    /// Gets or sets the HTTP method used for the upload. The default method used for upload operations is POST.
    /// - Returns: The method to use for the background upload. Setting this property will override the default method used for the operation.
    public var method: Swift.String {
        get throws {
            try _ibackgroundTransferBase.get_Method()
        }
    }

    /// Gets or sets the HTTP method used for the upload. The default method used for upload operations is POST.
    /// - Returns: The method to use for the background upload. Setting this property will override the default method used for the operation.
    public func method(_ value: Swift.String) throws {
        try _ibackgroundTransferBase.put_Method(value)
    }

    /// Gets or sets the proxy credentials for the upload.
    /// - Returns: The credentials used to authenticate with an HTTP proxy.
    public var proxyCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferBase.get_ProxyCredential())
        }
    }

    /// Gets or sets the proxy credentials for the upload.
    /// - Returns: The credentials used to authenticate with an HTTP proxy.
    public func proxyCredential(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ibackgroundTransferBase.put_ProxyCredential(credential)
    }

    /// Gets or sets the credentials to use to authenticate with the origin server.
    /// - Returns: The credential to use for authentication.
    public var serverCredential: WindowsSecurityCredentials_PasswordCredential {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferBase.get_ServerCredential())
        }
    }

    /// Gets or sets the credentials to use to authenticate with the origin server.
    /// - Returns: The credential to use for authentication.
    public func serverCredential(_ credential: WindowsSecurityCredentials_PasswordCredential?) throws {
        try _ibackgroundTransferBase.put_ServerCredential(credential)
    }

    /// Used to set an HTTP request header.
    /// - Parameter headerName: The header name.
    /// - Parameter headerValue: The header value.
    public func setRequestHeader(_ headerName: Swift.String, _ headerValue: Swift.String) throws {
        try _ibackgroundTransferBase.setRequestHeader(headerName, headerValue)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploader2 members

    /// Gets and sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating failure of an upload to the user.
    /// - Returns: The TileNotification used to indicate upload failure.
    public var failureTileNotification: WindowsUINotifications_TileNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader2.get_FailureTileNotification())
        }
    }

    /// Gets and sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating failure of an upload to the user.
    /// - Returns: The TileNotification used to indicate upload failure.
    public func failureTileNotification(_ value: WindowsUINotifications_TileNotification?) throws {
        try _ibackgroundUploader2.put_FailureTileNotification(value)
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate failure of an upload to the user.
    /// - Returns: The ToastNotification used to indicate upload failure.
    public var failureToastNotification: WindowsUINotifications_ToastNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader2.get_FailureToastNotification())
        }
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate failure of an upload to the user.
    /// - Returns: The ToastNotification used to indicate upload failure.
    public func failureToastNotification(_ value: WindowsUINotifications_ToastNotification?) throws {
        try _ibackgroundUploader2.put_FailureToastNotification(value)
    }

    /// Gets and sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating success of an upload to the user.
    /// - Returns: The TileNotification used to indicate upload success.
    public var successTileNotification: WindowsUINotifications_TileNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader2.get_SuccessTileNotification())
        }
    }

    /// Gets and sets the TileNotification used to define the visuals, identification tag, and expiration time of a tile notification used to update the app tile when indicating success of an upload to the user.
    /// - Returns: The TileNotification used to indicate upload success.
    public func successTileNotification(_ value: WindowsUINotifications_TileNotification?) throws {
        try _ibackgroundUploader2.put_SuccessTileNotification(value)
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate success of an upload to the user.
    /// - Returns: The ToastNotification used to indicate upload success.
    public var successToastNotification: WindowsUINotifications_ToastNotification {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader2.get_SuccessToastNotification())
        }
    }

    /// Gets or sets the ToastNotification that defines the content, associated metadata, and events used in a toast notification to indicate success of an upload to the user.
    /// - Returns: The ToastNotification used to indicate upload success.
    public func successToastNotification(_ value: WindowsUINotifications_ToastNotification?) throws {
        try _ibackgroundUploader2.put_SuccessToastNotification(value)
    }

    /// Gets or sets the group that an upload operation will belong to.
    /// - Returns: The group to associate with the upload.
    public var transferGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader2.get_TransferGroup())
        }
    }

    /// Gets or sets the group that an upload operation will belong to.
    /// - Returns: The group to associate with the upload.
    public func transferGroup(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup?) throws {
        try _ibackgroundUploader2.put_TransferGroup(value)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploader3 members

    /// Gets the BackgroundTransferCompletionGroup associated with the BackgroundUploader.
    /// - Returns: The BackgroundTransferCompletionGroup associated with the BackgroundUploader. This property can be null.
    public var completionGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferCompletionGroup {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundUploader3.get_CompletionGroup())
        }
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods2 members

    /// Gets all uploads associated with the provided BackgroundTransferGroup.
    /// - Parameter group: Contains information used to identify a group of uploads.
    /// - Returns: A list of uploads currently associated with the specified group.
    public static func getCurrentUploadsForTransferGroupAsync(_ group: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_UploadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundUploaderStaticMethods2.getCurrentUploadsForTransferGroupAsync(group))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploaderUserConsent members

    public static func requestUnconstrainedUploadsAsync(_ operations: WindowsFoundationCollections_IIterable<WindowsNetworkingBackgroundTransfer_UploadOperation?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsNetworkingBackgroundTransfer_UnconstrainedTransferRequestResult?> {
        try COM.NullResult.unwrap(_ibackgroundUploaderUserConsent.requestUnconstrainedUploadsAsync(operations))
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods members

    /// Returns a collection of pending uploads that are not associated with a group.
    /// - Returns: A collection of pending uploads for the current application instance.
    public static func getCurrentUploadsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_UploadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundUploaderStaticMethods.getCurrentUploadsAsync())
    }

    /// Returns a collection of pending uploads for a specific Group.
    /// - Parameter group: A string indicating a specific group of uploads.
    /// - Returns: A collection of pending uploads for the specific group.
    public static func getCurrentUploadsAsync(_ group: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsNetworkingBackgroundTransfer_UploadOperation?>?> {
        try COM.NullResult.unwrap(_ibackgroundUploaderStaticMethods.getCurrentUploadsForGroupAsync(group))
    }

    // MARK: Implementation details

    private var _ibackgroundTransferBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase>? = nil

    internal var _ibackgroundTransferBase: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase> {
        get throws {
            try _ibackgroundTransferBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferBase.self)
            }
        }
    }

    private var _ibackgroundUploader2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader2>? = nil

    internal var _ibackgroundUploader2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader2> {
        get throws {
            try _ibackgroundUploader2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader2.self)
            }
        }
    }

    private var _ibackgroundUploader3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader3>? = nil

    internal var _ibackgroundUploader3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader3> {
        get throws {
            try _ibackgroundUploader3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploader3.self)
            }
        }
    }

    deinit {
        _ibackgroundTransferBase_storage?.release()
        _ibackgroundUploader2_storage?.release()
        _ibackgroundUploader3_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundUploader", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _ibackgroundUploaderFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderFactory>? = nil

    internal static var _ibackgroundUploaderFactory: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderFactory> {
        get throws {
            try _ibackgroundUploaderFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundUploader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderFactory.iid)
            }
        }
    }

    private static var _ibackgroundUploaderStaticMethods2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods2>? = nil

    internal static var _ibackgroundUploaderStaticMethods2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods2> {
        get throws {
            try _ibackgroundUploaderStaticMethods2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundUploader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods2.iid)
            }
        }
    }

    private static var _ibackgroundUploaderUserConsent_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderUserConsent>? = nil

    internal static var _ibackgroundUploaderUserConsent: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderUserConsent> {
        get throws {
            try _ibackgroundUploaderUserConsent_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundUploader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderUserConsent.iid)
            }
        }
    }

    private static var _ibackgroundUploaderStaticMethods_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods>? = nil

    internal static var _ibackgroundUploaderStaticMethods: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods> {
        get throws {
            try _ibackgroundUploaderStaticMethods_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Networking.BackgroundTransfer.BackgroundUploader", id: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundUploaderStaticMethods.iid)
            }
        }
    }
}