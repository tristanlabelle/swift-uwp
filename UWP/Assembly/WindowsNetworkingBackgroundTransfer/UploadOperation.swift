// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Performs an asynchronous upload operation. For an overview of Background Transfer capabilities, see [Transferring data in the background](https://docs.microsoft.com/previous-versions/windows/apps/hh452979(v=win.10)). Download the Background Transfer sample for examples in JavaScript, C#, and C++.
public final class WindowsNetworkingBackgroundTransfer_UploadOperation: WindowsRuntime.WinRTImport<WindowsNetworkingBackgroundTransfer_UploadOperationProjection>, WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationProtocol, WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriorityProtocol {
    // MARK: Windows.Networking.BackgroundTransfer.IUploadOperation members

    /// Gets the current progress of the upload operation.
    /// - Returns: The delegate to invoke when progress is available for a transfer operation.
    public var progress: WindowsNetworkingBackgroundTransfer_BackgroundUploadProgress {
        get throws {
            try _interop.get_Progress()
        }
    }

    /// Specifies the IStorageFile to upload.
    /// - Returns: The file item to upload.
    public var sourceFile: WindowsStorage_IStorageFile {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SourceFile())
        }
    }

    /// Starts an asynchronous upload operation.
    /// - Returns: An asynchronous upload operation that includes progress updates.
    public func startAsync() throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsNetworkingBackgroundTransfer_UploadOperation?, WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Returns an asynchronous operation that can be used to monitor progress and completion of the attached upload. Calling this method allows an app to attach upload operations that were started in a previous app instance.
    /// - Returns: Upload operation with callback.
    public func attachAsync() throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsNetworkingBackgroundTransfer_UploadOperation?, WindowsNetworkingBackgroundTransfer_UploadOperation?> {
        try COM.NullResult.unwrap(_interop.attachAsync())
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation members

    /// Gets and sets the cost policy for the upload.
    /// - Returns: Specifies whether the transfer can happen over costed networks.
    public var costPolicy: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy {
        get throws {
            try _ibackgroundTransferOperation.get_CostPolicy()
        }
    }

    /// Gets and sets the cost policy for the upload.
    /// - Returns: Specifies whether the transfer can happen over costed networks.
    public func costPolicy(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy) throws {
        try _ibackgroundTransferOperation.put_CostPolicy(value)
    }

    /// Gets a string value indicating the group the upload belongs to.
    /// - Returns: The group name.
    public var group: Swift.String {
        get throws {
            try _ibackgroundTransferOperation.get_Group()
        }
    }

    /// This is a unique identifier for a specific upload operation. A GUID associated to a upload operation will not change for the duration of the upload.
    /// - Returns: The unique ID for this upload operation.
    public var guid: Foundation.UUID {
        get throws {
            try _ibackgroundTransferOperation.get_Guid()
        }
    }

    /// Gets the method to use for the upload.
    /// - Returns: The method to use for the upload. This value can be **GET**, **PUT**, **POST**, **RETR**, **STOR**, or any custom value supported by the server.
    public var method: Swift.String {
        get throws {
            try _ibackgroundTransferOperation.get_Method()
        }
    }

    /// Gets the URI to upload from.
    /// - Returns: The URI to upload from.
    public var requestedUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferOperation.get_RequestedUri())
        }
    }

    /// Gets the partially uploaded response at the specified location.
    /// - Parameter position: The position at which to start reading.
    /// - Returns: The result stream.
    public func getResultStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_ibackgroundTransferOperation.getResultStreamAt(position))
    }

    /// Gets the response information.
    /// - Returns: Contains the data returned by a server response.
    public func getResponseInformation() throws -> WindowsNetworkingBackgroundTransfer_ResponseInformation {
        try COM.NullResult.unwrap(_ibackgroundTransferOperation.getResponseInformation())
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority members

    /// Gets or sets the transfer priority of this upload operation when within a BackgroundTransferGroup. Possible values are defined by BackgroundTransferPriority.
    /// - Returns: The operation priority.
    public var priority: WindowsNetworkingBackgroundTransfer_BackgroundTransferPriority {
        get throws {
            try _ibackgroundTransferOperationPriority.get_Priority()
        }
    }

    /// Gets or sets the transfer priority of this upload operation when within a BackgroundTransferGroup. Possible values are defined by BackgroundTransferPriority.
    /// - Returns: The operation priority.
    public func priority(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferPriority) throws {
        try _ibackgroundTransferOperationPriority.put_Priority(value)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IUploadOperation2 members

    /// Gets the group that this upload operation belongs to.
    /// - Returns: The transfer group.
    public var transferGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup {
        get throws {
            try COM.NullResult.unwrap(_iuploadOperation2.get_TransferGroup())
        }
    }

    // MARK: Windows.Networking.BackgroundTransfer.IUploadOperation3 members

    /// Prioritizes the upload transfer operation (and any transfers that follow it in the same transfer group). Calling this method on a transfer that doesn't belong to a transfer group has no effect.
    public func makeCurrentInTransferGroup() throws {
        try _iuploadOperation3.makeCurrentInTransferGroup()
    }

    // MARK: Windows.Networking.BackgroundTransfer.IUploadOperation4 members

    /// Used to set an HTTP request header.
    /// - Parameter headerName: The header name.
    /// - Parameter headerValue: The header value.
    public func setRequestHeader(_ headerName: Swift.String, _ headerValue: Swift.String) throws {
        try _iuploadOperation4.setRequestHeader(headerName, headerValue)
    }

    /// Used to remove an HTTP request header.
    /// - Parameter headerName: The header name.
    public func removeRequestHeader(_ headerName: Swift.String) throws {
        try _iuploadOperation4.removeRequestHeader(headerName)
    }

    // MARK: Implementation details

    private var _ibackgroundTransferOperation_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation>? = nil

    internal var _ibackgroundTransferOperation: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation> {
        get throws {
            try _ibackgroundTransferOperation_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation.self)
            }
        }
    }

    private var _ibackgroundTransferOperationPriority_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority>? = nil

    internal var _ibackgroundTransferOperationPriority: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority> {
        get throws {
            try _ibackgroundTransferOperationPriority_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority.self)
            }
        }
    }

    private var _iuploadOperation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation2>? = nil

    internal var _iuploadOperation2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation2> {
        get throws {
            try _iuploadOperation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation2.self)
            }
        }
    }

    private var _iuploadOperation3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation3>? = nil

    internal var _iuploadOperation3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation3> {
        get throws {
            try _iuploadOperation3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation3.self)
            }
        }
    }

    private var _iuploadOperation4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation4>? = nil

    internal var _iuploadOperation4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation4> {
        get throws {
            try _iuploadOperation4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation4.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IUploadOperation4.self)
            }
        }
    }

    deinit {
        _ibackgroundTransferOperation_storage?.release()
        _ibackgroundTransferOperationPriority_storage?.release()
        _iuploadOperation2_storage?.release()
        _iuploadOperation3_storage?.release()
        _iuploadOperation4_storage?.release()
    }
}