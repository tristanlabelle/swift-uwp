// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Performs an asynchronous download operation. The Background Transfer sample demonstrates this functionality. For an overview of Background Transfer capabilities, see [Transferring data in the background](https://docs.microsoft.com/previous-versions/windows/apps/hh452979(v=win.10)). Download the Background Transfer sample for examples in JavaScript, C#, and C++/CX.
public final class WindowsNetworkingBackgroundTransfer_DownloadOperation: WindowsRuntime.WinRTImport<WindowsNetworkingBackgroundTransfer_DownloadOperationProjection>, WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationProtocol, WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriorityProtocol {
    // MARK: Windows.Networking.BackgroundTransfer.IDownloadOperation members

    /// Gets the current progress of the operation.
    /// - Returns: An instance of a BackgroundDownloadProgress struct describing the current download operation's progress.
    public var progress: WindowsNetworkingBackgroundTransfer_BackgroundDownloadProgress {
        get throws {
            try _interop.get_Progress()
        }
    }

    /// Returns the IStorageFile object provided by the caller when creating the DownloadOperation object using CreateDownload.
    /// - Returns: The returned file object.
    public var resultFile: WindowsStorage_IStorageFile {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ResultFile())
        }
    }

    /// Starts an asynchronous download operation.
    /// - Returns: An asynchronous download operation that includes progress updates.
    public func startAsync() throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsNetworkingBackgroundTransfer_DownloadOperation?, WindowsNetworkingBackgroundTransfer_DownloadOperation?> {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Returns an asynchronous operation that can be used to monitor progress and completion of the attached download. Calling this method allows an app to attach download operations that were started in a previous app instance.
    /// - Returns: Download operation with callback.
    public func attachAsync() throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsNetworkingBackgroundTransfer_DownloadOperation?, WindowsNetworkingBackgroundTransfer_DownloadOperation?> {
        try COM.NullResult.unwrap(_interop.attachAsync())
    }

    /// Pauses a download operation.
    public func pause() throws {
        try _interop.pause()
    }

    /// Resumes a paused download operation.
    public func resume() throws {
        try _interop.resume()
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation members

    /// Gets and sets the cost policy for the download.
    /// - Returns: Specifies whether the transfer can happen over costed networks.
    public var costPolicy: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy {
        get throws {
            try _ibackgroundTransferOperation.get_CostPolicy()
        }
    }

    /// Gets and sets the cost policy for the download.
    /// - Returns: Specifies whether the transfer can happen over costed networks.
    public func costPolicy(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferCostPolicy) throws {
        try _ibackgroundTransferOperation.put_CostPolicy(value)
    }

    /// Gets a string value indicating the group the transfer belongs to.
    /// - Returns: The group name.
    public var group: Swift.String {
        get throws {
            try _ibackgroundTransferOperation.get_Group()
        }
    }

    /// This is a unique identifier for a specific download operation. A GUID associated to a download operation will not change for the duration of the download.
    /// - Returns: The unique ID for this download operation.
    public var guid: Foundation.UUID {
        get throws {
            try _ibackgroundTransferOperation.get_Guid()
        }
    }

    /// Gets the method to use for the download.
    /// - Returns: The method to use for the download. This value can be **GET**, **PUT**, **RETR**, or **STOR**.
    public var method: Swift.String {
        get throws {
            try _ibackgroundTransferOperation.get_Method()
        }
    }

    /// Gets the URI from which to download the file.
    /// - Returns: The URI to download from.
    public var requestedUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ibackgroundTransferOperation.get_RequestedUri())
        }
    }

    /// Gets the partially downloaded response at the specified position.
    /// - Parameter position: The position at which to start reading.
    /// - Returns: The result stream.
    public func getResultStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IInputStream {
        try COM.NullResult.unwrap(_ibackgroundTransferOperation.getResultStreamAt(position))
    }

    /// Gets the response information.
    /// - Returns: Contains the data returned by a server response.
    public func getResponseInformation() throws -> WindowsNetworkingBackgroundTransfer_ResponseInformation {
        try COM.NullResult.unwrap(_ibackgroundTransferOperation.getResponseInformation())
    }

    // MARK: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority members

    /// Gets or sets the transfer priority of this download operation when within a BackgroundTransferGroup. Possible values are defined by BackgroundTransferPriority.
    /// - Returns: The operation priority.
    public var priority: WindowsNetworkingBackgroundTransfer_BackgroundTransferPriority {
        get throws {
            try _ibackgroundTransferOperationPriority.get_Priority()
        }
    }

    /// Gets or sets the transfer priority of this download operation when within a BackgroundTransferGroup. Possible values are defined by BackgroundTransferPriority.
    /// - Returns: The operation priority.
    public func priority(_ value: WindowsNetworkingBackgroundTransfer_BackgroundTransferPriority) throws {
        try _ibackgroundTransferOperationPriority.put_Priority(value)
    }

    // MARK: Windows.Networking.BackgroundTransfer.IDownloadOperation2 members

    /// Gets the group that this download operation belongs to.
    /// - Returns: The transfer group.
    public var transferGroup: WindowsNetworkingBackgroundTransfer_BackgroundTransferGroup {
        get throws {
            try COM.NullResult.unwrap(_idownloadOperation2.get_TransferGroup())
        }
    }

    // MARK: Windows.Networking.BackgroundTransfer.IDownloadOperation3 members

    /// A transfer's WebErrorStatus, which can be monitored during the lifetime of the DownloadOperation.
    /// - Returns: A WebErrorStatus error.
    public var currentWebErrorStatus: WindowsFoundation_IReference<WindowsWeb_WebErrorStatus>? {
        get throws {
            try _idownloadOperation3.get_CurrentWebErrorStatus()
        }
    }

    /// A boolean property to enable random access. The property must be set to TRUE before calling StartAsync() on a DownloadOperation object to use the random access feature. After calling StartAsync(), call GetResultRandomAccessStreamReference to get a reference to the random access stream and read from it.
    /// - Returns: TRUE to use the random access feature. The default value is FALSE.
    public var isRandomAccessRequired: Swift.Bool {
        get throws {
            try _idownloadOperation3.get_IsRandomAccessRequired()
        }
    }

    /// A boolean property to enable random access. The property must be set to TRUE before calling StartAsync() on a DownloadOperation object to use the random access feature. After calling StartAsync(), call GetResultRandomAccessStreamReference to get a reference to the random access stream and read from it.
    /// - Returns: TRUE to use the random access feature. The default value is FALSE.
    public func isRandomAccessRequired(_ value: Swift.Bool) throws {
        try _idownloadOperation3.put_IsRandomAccessRequired(value)
    }

    /// A set of WebErrorStatus values that applications anticipate the download will hit, and that the applications know how to handle.
    /// - Returns: A set of WebErrorStatus values.
    public var recoverableWebErrorStatuses: WindowsFoundationCollections_IVector<WindowsWeb_WebErrorStatus> {
        get throws {
            try COM.NullResult.unwrap(_idownloadOperation3.get_RecoverableWebErrorStatuses())
        }
    }

    /// Gets the URI from which to download the file.
    /// - Returns: The URI to download from.
    public func requestedUri(_ value: WindowsFoundation_Uri?) throws {
        try _idownloadOperation3.put_RequestedUri(value)
    }

    /// Provides access to incremental download progress.
    public func rangesDownloaded(adding eventHandler: WindowsFoundation_TypedEventHandler<WindowsNetworkingBackgroundTransfer_DownloadOperation?, WindowsNetworkingBackgroundTransfer_BackgroundTransferRangesDownloadedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idownloadOperation3.add_RangesDownloaded(eventHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: rangesDownloaded)
    }

    public func rangesDownloaded(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _idownloadOperation3.remove_RangesDownloaded(eventCookie)
    }

    /// Gets a reference to the random access stream and reads from it. It's necessary to set IsRandomAccessRequired to TRUE before calling GetResultRandomAccessStreamReference.
    /// - Returns: A reference to the random access stream.
    public func getResultRandomAccessStreamReference() throws -> WindowsStorageStreams_IRandomAccessStreamReference {
        try COM.NullResult.unwrap(_idownloadOperation3.getResultRandomAccessStreamReference())
    }

    /// Returns the full list of file ranges that have been downloaded so far.
    /// - Returns: Returns an IVector<BackgroundTransferFileRange>.
    public func getDownloadedRanges() throws -> WindowsFoundationCollections_IVector<WindowsNetworkingBackgroundTransfer_BackgroundTransferFileRange> {
        try COM.NullResult.unwrap(_idownloadOperation3.getDownloadedRanges())
    }

    // MARK: Windows.Networking.BackgroundTransfer.IDownloadOperation4 members

    /// Prioritizes the download transfer operation (and any transfers that follow it in the same transfer group). Calling this method on a transfer that doesn't belong to a transfer group has no effect.
    public func makeCurrentInTransferGroup() throws {
        try _idownloadOperation4.makeCurrentInTransferGroup()
    }

    // MARK: Windows.Networking.BackgroundTransfer.IDownloadOperation5 members

    /// Used to set an HTTP request header.
    /// - Parameter headerName: The header name.
    /// - Parameter headerValue: The header value.
    public func setRequestHeader(_ headerName: Swift.String, _ headerValue: Swift.String) throws {
        try _idownloadOperation5.setRequestHeader(headerName, headerValue)
    }

    /// Used to remove an HTTP request header.
    /// - Parameter headerName: The header name.
    public func removeRequestHeader(_ headerName: Swift.String) throws {
        try _idownloadOperation5.removeRequestHeader(headerName)
    }

    // MARK: Implementation details

    private var _ibackgroundTransferOperation_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation>? = nil

    internal var _ibackgroundTransferOperation: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation> {
        get throws {
            try _ibackgroundTransferOperation_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperation.self)
            }
        }
    }

    private var _ibackgroundTransferOperationPriority_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority>? = nil

    internal var _ibackgroundTransferOperationPriority: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority> {
        get throws {
            try _ibackgroundTransferOperationPriority_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IBackgroundTransferOperationPriority.self)
            }
        }
    }

    private var _idownloadOperation2_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation2>? = nil

    internal var _idownloadOperation2: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation2> {
        get throws {
            try _idownloadOperation2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation2.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation2.self)
            }
        }
    }

    private var _idownloadOperation3_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation3>? = nil

    internal var _idownloadOperation3: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation3> {
        get throws {
            try _idownloadOperation3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation3.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation3.self)
            }
        }
    }

    private var _idownloadOperation4_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation4>? = nil

    internal var _idownloadOperation4: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation4> {
        get throws {
            try _idownloadOperation4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation4.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation4.self)
            }
        }
    }

    private var _idownloadOperation5_storage: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation5>? = nil

    internal var _idownloadOperation5: COM.COMInterop<CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation5> {
        get throws {
            try _idownloadOperation5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation5.iid).cast(to: CWinRT.SWRT_WindowsNetworkingBackgroundTransfer_IDownloadOperation5.self)
            }
        }
    }

    deinit {
        _ibackgroundTransferOperation_storage?.release()
        _ibackgroundTransferOperationPriority_storage?.release()
        _idownloadOperation2_storage?.release()
        _idownloadOperation3_storage?.release()
        _idownloadOperation4_storage?.release()
        _idownloadOperation5_storage?.release()
    }
}