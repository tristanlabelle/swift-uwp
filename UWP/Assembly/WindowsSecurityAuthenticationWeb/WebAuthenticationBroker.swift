// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Starts the authentication operation. You can call the methods of this class multiple times in a single application or across multiple applications at the same time. The Web authentication broker sample in the Samples gallery is an example of how to use the WebAuthenticationBroker class for single sign on (SSO) connections.
public enum WindowsSecurityAuthenticationWeb_WebAuthenticationBroker {
    // MARK: Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics2 members

    /// Starts the authentication operation with one input.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    public static func authenticateAndContinue(_ requestUri: WindowsFoundation_Uri?) throws {
        try _iwebAuthenticationBrokerStatics2.authenticateAndContinue(requestUri)
    }

    /// Starts the authentication operation with two inputs.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Parameter callbackUri: The callback URI that indicates the completion of the web authentication. The broker matches this URI against every URI that it is about to navigate to. The broker never navigates to this URI, instead the broker returns the control back to the application when the user clicks a link or a web server redirection is made.
    public static func authenticateAndContinue(_ requestUri: WindowsFoundation_Uri?, _ callbackUri: WindowsFoundation_Uri?) throws {
        try _iwebAuthenticationBrokerStatics2.authenticateWithCallbackUriAndContinue(requestUri, callbackUri)
    }

    /// Starts the authentication operation with four inputs.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Parameter callbackUri: The callback URI that indicates the completion of the web authentication. The broker matches this URI against every URI that it is about to navigate to. The broker never navigates to this URI, instead the broker returns the control back to the application when the user clicks a link or a web server redirection is made.
    /// - Parameter continuationData: Continuation data to be passed as part of the authentication operation.
    /// - Parameter options: The options for the authentication operation.
    public static func authenticateAndContinue(_ requestUri: WindowsFoundation_Uri?, _ callbackUri: WindowsFoundation_Uri?, _ continuationData: WindowsFoundationCollections_ValueSet?, _ options: WindowsSecurityAuthenticationWeb_WebAuthenticationOptions) throws {
        try _iwebAuthenticationBrokerStatics2.authenticateWithCallbackUriContinuationDataAndOptionsAndContinue(requestUri, callbackUri, continuationData, options)
    }

    /// Starts the asynchronous authentication operation silently (no UI will be shown) with one input. You can call this method multiple times in a single application or across multiple applications at the same time.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Returns: The way to query the status and get the results of the authentication operation. If you are getting an invalid parameter error, the most common cause is that you are not using HTTPS for the requestUri parameter.
    public static func authenticateSilentlyAsync(_ requestUri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationWeb_WebAuthenticationResult?> {
        try COM.NullResult.unwrap(_iwebAuthenticationBrokerStatics2.authenticateSilentlyAsync(requestUri))
    }

    /// Starts the asynchronous authentication operation silently (no UI will be shown) with two inputs. You can call this method multiple times in a single application or across multiple applications at the same time.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Parameter options: The options for the authentication operation.
    /// - Returns: The way to query the status and get the results of the authentication operation. If you are getting an invalid parameter error, the most common cause is that you are not using HTTPS for the requestUri parameter.
    public static func authenticateSilentlyAsync(_ requestUri: WindowsFoundation_Uri?, _ options: WindowsSecurityAuthenticationWeb_WebAuthenticationOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationWeb_WebAuthenticationResult?> {
        try COM.NullResult.unwrap(_iwebAuthenticationBrokerStatics2.authenticateSilentlyWithOptionsAsync(requestUri, options))
    }

    // MARK: Windows.Security.Authentication.Web.IWebAuthenticationBrokerStatics members

    /// Starts the asynchronous authentication operation with three inputs. You can call this method multiple times in a single application or across multiple applications at the same time.
    /// - Parameter options: The options for the authentication operation.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Parameter callbackUri: The callback URI that indicates the completion of the web authentication. The broker matches this URI against every URI that it is about to navigate to. The broker never navigates to this URI, instead the broker returns the control back to the application when the user clicks a link or a web server redirection is made.
    /// - Returns: The way to query the status and get the results of the authentication operation. If you are getting an invalid parameter error, the most common cause is that you are not using HTTPS for the *requestUri* parameter.
    public static func authenticateAsync(_ options: WindowsSecurityAuthenticationWeb_WebAuthenticationOptions, _ requestUri: WindowsFoundation_Uri?, _ callbackUri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationWeb_WebAuthenticationResult?> {
        try COM.NullResult.unwrap(_iwebAuthenticationBrokerStatics.authenticateWithCallbackUriAsync(options, requestUri, callbackUri))
    }

    /// Starts the asynchronous authentication operation with two inputs. You can call this method multiple times in a single application or across multiple applications at the same time.
    /// - Parameter options: The options for the authentication operation.
    /// - Parameter requestUri: The starting URI of the web service. This URI must be a secure address of https://.
    /// - Returns: The way to query the status and get the results of the authentication operation. If you are getting an invalid parameter error, the most common cause is that you are not using HTTPS for the *requestUri* parameter.
    public static func authenticateAsync(_ options: WindowsSecurityAuthenticationWeb_WebAuthenticationOptions, _ requestUri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityAuthenticationWeb_WebAuthenticationResult?> {
        try COM.NullResult.unwrap(_iwebAuthenticationBrokerStatics.authenticateWithoutCallbackUriAsync(options, requestUri))
    }

    /// Gets the current application callback URI.
    /// - Returns: The URI of the current application.
    public static func getCurrentApplicationCallbackUri() throws -> WindowsFoundation_Uri {
        try COM.NullResult.unwrap(_iwebAuthenticationBrokerStatics.getCurrentApplicationCallbackUri())
    }

    // MARK: Implementation details

    private static var _iwebAuthenticationBrokerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics2>? = nil

    internal static var _iwebAuthenticationBrokerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics2> {
        get throws {
            try _iwebAuthenticationBrokerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.WebAuthenticationBroker", id: CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics2.iid)
            }
        }
    }

    private static var _iwebAuthenticationBrokerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics>? = nil

    internal static var _iwebAuthenticationBrokerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics> {
        get throws {
            try _iwebAuthenticationBrokerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.WebAuthenticationBroker", id: CWinRT.SWRT_WindowsSecurityAuthenticationWeb_IWebAuthenticationBrokerStatics.iid)
            }
        }
    }
}