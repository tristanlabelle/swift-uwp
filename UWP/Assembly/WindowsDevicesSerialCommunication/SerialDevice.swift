// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a serial port. The object provides methods and properties that an app can use to find the port (in the system).
public final class WindowsDevicesSerialCommunication_SerialDevice: WindowsRuntime.WinRTImport<WindowsDevicesSerialCommunication_SerialDeviceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.SerialCommunication.ISerialDevice members

    /// Gets or sets the baud rate.
    /// - Returns: The baud rate of the serial port.
    public var baudRate: Swift.UInt32 {
        get throws {
            try _interop.get_BaudRate()
        }
    }

    /// Gets or sets the baud rate.
    /// - Returns: The baud rate of the serial port.
    public func baudRate(_ value: Swift.UInt32) throws {
        try _interop.put_BaudRate(value)
    }

    /// Gets or sets the break signal state.
    /// - Returns: Toggles the TX line to enable or disable data transmission.
    public var breakSignalState: Swift.Bool {
        get throws {
            try _interop.get_BreakSignalState()
        }
    }

    /// Gets or sets the break signal state.
    /// - Returns: Toggles the TX line to enable or disable data transmission.
    public func breakSignalState(_ value: Swift.Bool) throws {
        try _interop.put_BreakSignalState(value)
    }

    /// Represents the number of bytes received by the last read operation of the input stream.
    /// - Returns: The number of bytes received by the last read operation of the input stream.
    public var bytesReceived: Swift.UInt32 {
        get throws {
            try _interop.get_BytesReceived()
        }
    }

    /// Gets the state of the Carrier Detect (CD) line.
    /// - Returns: Detects the state of Carrier Detect line. If the line is detected, value is **true**; otherwise, **false**.
    public var carrierDetectState: Swift.Bool {
        get throws {
            try _interop.get_CarrierDetectState()
        }
    }

    /// Gets the state of the Clear-to-Send (CTS) line.
    /// - Returns: Detects the state of Clear-to-Send line. If the line is detected, value is **true**; otherwise, **false**.
    public var clearToSendState: Swift.Bool {
        get throws {
            try _interop.get_ClearToSendState()
        }
    }

    /// The number of data bits in each character value that is transmitted or received, and does not include parity bits or stop bits.
    /// - Returns: The number of data bits in each character value that is transmitted or received.
    public var dataBits: Swift.UInt16 {
        get throws {
            try _interop.get_DataBits()
        }
    }

    /// The number of data bits in each character value that is transmitted or received, and does not include parity bits or stop bits.
    /// - Returns: The number of data bits in each character value that is transmitted or received.
    public func dataBits(_ value: Swift.UInt16) throws {
        try _interop.put_DataBits(value)
    }

    /// Gets the state of the Data Set Ready (DSR) signal.
    /// - Returns: Indicates whether DSR has been sent to the serial port. If the signal was sent, value is **true**; otherwise, **false**.
    public var dataSetReadyState: Swift.Bool {
        get throws {
            try _interop.get_DataSetReadyState()
        }
    }

    /// Gets or sets the handshaking protocol for flow control.
    /// - Returns: One of the values defined in SerialHandshake enumeration.
    public var handshake: WindowsDevicesSerialCommunication_SerialHandshake {
        get throws {
            try _interop.get_Handshake()
        }
    }

    /// Gets or sets the handshaking protocol for flow control.
    /// - Returns: One of the values defined in SerialHandshake enumeration.
    public func handshake(_ value: WindowsDevicesSerialCommunication_SerialHandshake) throws {
        try _interop.put_Handshake(value)
    }

    /// Input stream that contains the data received on the serial port.
    /// - Returns: Input stream that contains the data received
    public var inputStream: WindowsStorageStreams_IInputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InputStream())
        }
    }

    /// Gets or sets a value that enables the Data Terminal Ready (DTR) signal.
    /// - Returns: Enables or disables the Data Terminal Ready (DTR) signal. **true** enables DTR; Otherwise, **false**.
    public var isDataTerminalReadyEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDataTerminalReadyEnabled()
        }
    }

    /// Gets or sets a value that enables the Data Terminal Ready (DTR) signal.
    /// - Returns: Enables or disables the Data Terminal Ready (DTR) signal. **true** enables DTR; Otherwise, **false**.
    public func isDataTerminalReadyEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDataTerminalReadyEnabled(value)
    }

    /// Gets or sets a value that enables the Request to Send (RTS) signal.
    /// - Returns: Enables or disables the Request to Send (RTS) signal. **true** enables DTR; Otherwise, **false**.
    public var isRequestToSendEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsRequestToSendEnabled()
        }
    }

    /// Gets or sets a value that enables the Request to Send (RTS) signal.
    /// - Returns: Enables or disables the Request to Send (RTS) signal. **true** enables DTR; Otherwise, **false**.
    public func isRequestToSendEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsRequestToSendEnabled(value)
    }

    /// Gets an output stream to which the app can write data to transmit through the serial port.
    /// - Returns: The output steam that contains the transfer data.
    public var outputStream: WindowsStorageStreams_IOutputStream {
        get throws {
            try COM.NullResult.unwrap(_interop.get_OutputStream())
        }
    }

    /// Gets or sets the parity bit for error-checking.
    /// - Returns: One of the values defined in SerialParity enumeration.
    public var parity: WindowsDevicesSerialCommunication_SerialParity {
        get throws {
            try _interop.get_Parity()
        }
    }

    /// Gets or sets the parity bit for error-checking.
    /// - Returns: One of the values defined in SerialParity enumeration.
    public func parity(_ value: WindowsDevicesSerialCommunication_SerialParity) throws {
        try _interop.put_Parity(value)
    }

    /// Gets the port name for serial communications.
    /// - Returns: The communication port name. For example "COM1".
    public var portName: Swift.String {
        get throws {
            try _interop.get_PortName()
        }
    }

    /// Gets or sets the time-out value for a read operation.
    /// - Returns: The span of time before a time-out occurs when a read operation does not finish.
    public var readTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_ReadTimeout()
        }
    }

    /// Gets or sets the time-out value for a read operation.
    /// - Returns: The span of time before a time-out occurs when a read operation does not finish.
    public func readTimeout(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_ReadTimeout(value)
    }

    /// Gets or sets the standard number of stop bits per byte.
    /// - Returns: One of the values defined in the SerialStopBitCount enumeration.
    public var stopBits: WindowsDevicesSerialCommunication_SerialStopBitCount {
        get throws {
            try _interop.get_StopBits()
        }
    }

    /// Gets or sets the standard number of stop bits per byte.
    /// - Returns: One of the values defined in the SerialStopBitCount enumeration.
    public func stopBits(_ value: WindowsDevicesSerialCommunication_SerialStopBitCount) throws {
        try _interop.put_StopBits(value)
    }

    /// Gets the **idProduct** field of the USB device descriptor. This value indicates the device-specific product identifier and is assigned by the manufacturer.
    /// - Returns: The device-defined product identifier.
    public var usbProductId: Swift.UInt16 {
        get throws {
            try _interop.get_UsbProductId()
        }
    }

    /// Gets the **idVendor** field of the USB device descriptor. The value indicates the vendor identifier for the device as assigned by the USB specification committee.
    /// - Returns: The vendor identifier for the device as assigned by the USB specification committee.
    public var usbVendorId: Swift.UInt16 {
        get throws {
            try _interop.get_UsbVendorId()
        }
    }

    /// Gets or sets the time-out value for a write operation.
    /// - Returns: The span of time before a time-out occurs when a write operation does not finish.
    public var writeTimeout: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_WriteTimeout()
        }
    }

    /// Gets or sets the time-out value for a write operation.
    /// - Returns: The span of time before a time-out occurs when a write operation does not finish.
    public func writeTimeout(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_WriteTimeout(value)
    }

    /// Event handler that is invoked when error occurs on the serial port.
    public func errorReceived(adding reportHandler: WindowsFoundation_TypedEventHandler<WindowsDevicesSerialCommunication_SerialDevice?, WindowsDevicesSerialCommunication_ErrorReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ErrorReceived(reportHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: errorReceived)
    }

    public func errorReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ErrorReceived(token)
    }

    /// Event handler that is invoked when the state of a signal or line changes on the serial port.
    public func pinChanged(adding reportHandler: WindowsFoundation_TypedEventHandler<WindowsDevicesSerialCommunication_SerialDevice?, WindowsDevicesSerialCommunication_PinChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PinChanged(reportHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pinChanged)
    }

    public func pinChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PinChanged(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases the reference to the SerialDevice object that was previously obtained by calling FromIdAsync.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.SerialCommunication.ISerialDeviceStatics members

    /// Gets an Advanced Query Syntax (AQS) string that the app can pass to DeviceInformation.FindAllAsync in order to find all serial devices on the system.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iserialDeviceStatics.getDeviceSelector()
    }

    /// Gets an Advanced Query Syntax (AQS) string that the app can pass to DeviceInformation.FindAllAsync in order to find a serial device by specifying its port name.
    /// - Parameter portName: The serial port name. For example, "COM1".
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelector(_ portName: Swift.String) throws -> Swift.String {
        try _iserialDeviceStatics.getDeviceSelectorFromPortName(portName)
    }

    /// Gets an Advanced Query Syntax (AQS) string that the app can pass to DeviceInformation.FindAllAsync in order to find a specific Serial-to-USB device by specifying it's VID and PID.
    /// - Parameter vendorId: Specifies the vendor identifier for the device as assigned by the USB specification committee. Possible values are 0 through 0xffff.
    /// - Parameter productId: Specifies the product identifier. This value is assigned by the manufacturer and is device-specific. Possible values are 0 through 0xffff.
    /// - Returns: String formatted as an AQS query.
    public static func getDeviceSelectorFromUsbVidPid(_ vendorId: Swift.UInt16, _ productId: Swift.UInt16) throws -> Swift.String {
        try _iserialDeviceStatics.getDeviceSelectorFromUsbVidPid(vendorId, productId)
    }

    /// Starts an asynchronous operation that creates a SerialDevice object.
    /// - Parameter deviceId: The device instance path of the device. To obtain that value, get the DeviceInformation.Id property value.
    /// - Returns: Returns an IAsyncOperation(SerialDevice) object that returns the results of the operation.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesSerialCommunication_SerialDevice?> {
        try COM.NullResult.unwrap(_iserialDeviceStatics.fromIdAsync(deviceId))
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _iserialDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSerialCommunication_ISerialDeviceStatics>? = nil

    internal static var _iserialDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesSerialCommunication_ISerialDeviceStatics> {
        get throws {
            try _iserialDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.SerialCommunication.SerialDevice", id: CWinRT.SWRT_WindowsDevicesSerialCommunication_ISerialDeviceStatics.iid)
            }
        }
    }
}