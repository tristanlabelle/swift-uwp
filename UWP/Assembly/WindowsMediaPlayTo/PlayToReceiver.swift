// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a Play To target.
public final class WindowsMediaPlayTo_PlayToReceiver: WindowsRuntime.WinRTImport<WindowsMediaPlayTo_PlayToReceiverProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaPlayTo_PlayToReceiverProjection.self))
    }

    // MARK: Windows.Media.PlayTo.IPlayToReceiver members

    /// Gets or sets the display name of the Play To target.
    /// - Returns: The display name of the Play To target.
    public var friendlyName: Swift.String {
        get throws {
            try _interop.get_FriendlyName()
        }
    }

    /// Gets or sets the display name of the Play To target.
    /// - Returns: The display name of the Play To target.
    public func friendlyName(_ value: Swift.String) throws {
        try _interop.put_FriendlyName(value)
    }

    /// Gets a set of custom properties for the Play To receiver.
    /// - Returns: A set of custom properties for the Play To receiver.
    public var properties: WindowsFoundationCollections_IPropertySet {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets or sets a value that indicates whether the Play To target supports audio.
    /// - Returns: True if the Play To target supports audio; otherwise false.
    public var supportsAudio: Swift.Bool {
        get throws {
            try _interop.get_SupportsAudio()
        }
    }

    /// Gets or sets a value that indicates whether the Play To target supports audio.
    /// - Returns: True if the Play To target supports audio; otherwise false.
    public func supportsAudio(_ value: Swift.Bool) throws {
        try _interop.put_SupportsAudio(value)
    }

    /// Gets or sets a value that indicates whether the Play To target supports images.
    /// - Returns: True if the Play To target supports images; otherwise false.
    public var supportsImage: Swift.Bool {
        get throws {
            try _interop.get_SupportsImage()
        }
    }

    /// Gets or sets a value that indicates whether the Play To target supports images.
    /// - Returns: True if the Play To target supports images; otherwise false.
    public func supportsImage(_ value: Swift.Bool) throws {
        try _interop.put_SupportsImage(value)
    }

    /// Gets or sets a value that indicates whether the Play To target supports video.
    /// - Returns: True if the Play To target supports video; otherwise false.
    public var supportsVideo: Swift.Bool {
        get throws {
            try _interop.get_SupportsVideo()
        }
    }

    /// Gets or sets a value that indicates whether the Play To target supports video.
    /// - Returns: True if the Play To target supports video; otherwise false.
    public func supportsVideo(_ value: Swift.Bool) throws {
        try _interop.put_SupportsVideo(value)
    }

    /// Occurs when the time location of the playback has changed.
    public func currentTimeChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsMediaPlayTo_CurrentTimeChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CurrentTimeChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: currentTimeChangeRequested)
    }

    public func currentTimeChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CurrentTimeChangeRequested(token)
    }

    /// Occurs when the audio has been muted or unmuted.
    public func muteChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsMediaPlayTo_MuteChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MuteChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: muteChangeRequested)
    }

    public func muteChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MuteChangeRequested(token)
    }

    /// Occurs when audio or video playback has been paused.
    public func pauseRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PauseRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pauseRequested)
    }

    public func pauseRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PauseRequested(token)
    }

    /// Occurs when audio or video playback starts.
    public func playRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PlayRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: playRequested)
    }

    public func playRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PlayRequested(token)
    }

    /// Occurs when the rate of audio or video playback has changed.
    public func playbackRateChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsMediaPlayTo_PlaybackRateChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PlaybackRateChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackRateChangeRequested)
    }

    public func playbackRateChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PlaybackRateChangeRequested(token)
    }

    /// Occurs when the source media for the Play To receiver have changed.
    public func sourceChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsMediaPlayTo_SourceChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SourceChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: sourceChangeRequested)
    }

    public func sourceChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SourceChangeRequested(token)
    }

    /// Occurs when a request has been made for the Play To receiver to stop playing the streamed media.
    public func stopRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StopRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: stopRequested)
    }

    public func stopRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StopRequested(token)
    }

    /// Occurs when the current playback position has changed.
    public func timeUpdateRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TimeUpdateRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: timeUpdateRequested)
    }

    public func timeUpdateRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TimeUpdateRequested(token)
    }

    /// Occurs when the volume for the source audio or video has changed.
    public func volumeChangeRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayTo_PlayToReceiver?, WindowsMediaPlayTo_VolumeChangeRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VolumeChangeRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: volumeChangeRequested)
    }

    public func volumeChangeRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VolumeChangeRequested(token)
    }

    /// Notifies the Play To receiver that the volume of the audio or video playback has changed.
    /// - Parameter volume: The new value for the volume.
    /// - Parameter mute: True if the volume was muted; otherwise false.
    public func notifyVolumeChange(_ volume: Swift.Double, _ mute: Swift.Bool) throws {
        try _interop.notifyVolumeChange(volume, mute)
    }

    /// Notifies the Play To receiver that the rate of the audio or video playback has changed.
    /// - Parameter rate: The new value of the playback rate.
    public func notifyRateChange(_ rate: Swift.Double) throws {
        try _interop.notifyRateChange(rate)
    }

    /// Notifies the Play To receiver that metadata for the media has finished loading.
    public func notifyLoadedMetadata() throws {
        try _interop.notifyLoadedMetadata()
    }

    /// Notifies the Play To receiver that the time location of the audio or video playback has changed.
    /// - Parameter currentTime: The new time location of the playback.
    public func notifyTimeUpdate(_ currentTime: WindowsFoundation_TimeSpan) throws {
        try _interop.notifyTimeUpdate(currentTime)
    }

    /// Notifies the Play To receiver that the duration of the audio or video playback has changed.
    /// - Parameter duration: The new duration of the audio or video media.
    public func notifyDurationChange(_ duration: WindowsFoundation_TimeSpan) throws {
        try _interop.notifyDurationChange(duration)
    }

    /// Notifies the Play To receiver that the audio or video playback element is seeking a new playback location.
    public func notifySeeking() throws {
        try _interop.notifySeeking()
    }

    /// Notifies the Play To receiver that the audio or video playback element has started at a new playback location.
    public func notifySeeked() throws {
        try _interop.notifySeeked()
    }

    /// Notifies the Play To receiver that the audio or video playback has been paused.
    public func notifyPaused() throws {
        try _interop.notifyPaused()
    }

    /// Notifies the Play To receiver that the audio or video playback has started.
    public func notifyPlaying() throws {
        try _interop.notifyPlaying()
    }

    /// Notifies the Play To receiver that the audio or video playback has ended.
    public func notifyEnded() throws {
        try _interop.notifyEnded()
    }

    /// Notifies the Play To receiver that an error has occurred in displaying or playing the media.
    public func notifyError() throws {
        try _interop.notifyError()
    }

    /// Notifies the Play To receiver that the audio or video playback has stopped.
    public func notifyStopped() throws {
        try _interop.notifyStopped()
    }

    /// Start receiving Play To commands.
    /// - Returns: An asynchronous handler that's called when the start operation is complete.
    public func startAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.startAsync())
    }

    /// Stop receiving Play To commands.
    /// - Returns: An asynchronous handler that's called when the stop operation is complete.
    public func stopAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.stopAsync())
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.PlayTo.PlayToReceiver", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}