// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about a battery controller that is currently connected to the device. For more info, see [Get battery information](https://docs.microsoft.com/previous-versions/windows/apps/dn895210(v=win.10)).
public final class WindowsDevicesPower_Battery: WindowsRuntime.WinRTImport<WindowsDevicesPower_BatteryProjection> {
    // MARK: Windows.Devices.Power.IBattery members

    /// Gets the identifier (ID) for an individual battery controller.
    /// - Returns: The battery controller identifier (ID).
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// <!--***in what increments does this change? Can it return a battery  aggregate?***-->
    public func reportUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPower_Battery?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReportUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: reportUpdated)
    }

    public func reportUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReportUpdated(token)
    }

    /// Gets a BatteryReport object that indicates the charge, capacity, and status of the battery or aggregate.
    /// - Returns: Indicates the charge, capacity, and status of the battery or aggregate.
    public func getReport() throws -> WindowsDevicesPower_BatteryReport {
        try COM.NullResult.unwrap(_interop.getReport())
    }

    // MARK: Windows.Devices.Power.IBatteryStatics members

    /// Gets a Battery object that represents all battery controllers connected to the device.
    /// - Returns: A Battery object that represents overall battery power.
    public static var aggregateBattery: WindowsDevicesPower_Battery {
        get throws {
            try COM.NullResult.unwrap(_ibatteryStatics.get_AggregateBattery())
        }
    }

    /// Gets a Battery object that represents an individual battery controller connected to the device.
    /// - Parameter deviceId: The device ID of the battery controller (DeviceId ).
    /// - Returns: A Battery object that corresponds to the specified battery controller.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPower_Battery?> {
        try COM.NullResult.unwrap(_ibatteryStatics.fromIdAsync(deviceId))
    }

    /// Gets an Advanced Query Syntax (AQS) string that can be used to find all battery controllers that are connected to the device.
    /// - Returns: An AQS string that can be used to find all battery controllers connected to the device.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibatteryStatics.getDeviceSelector()
    }

    // MARK: Implementation details

    private static var _ibatteryStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPower_IBatteryStatics>? = nil

    internal static var _ibatteryStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPower_IBatteryStatics> {
        get throws {
            try _ibatteryStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Power.Battery", id: CWinRT.SWRT_WindowsDevicesPower_IBatteryStatics.iid)
            }
        }
    }
}