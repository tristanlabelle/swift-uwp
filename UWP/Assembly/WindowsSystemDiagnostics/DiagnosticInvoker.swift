// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains functionality for executing a diagnostics troubleshooting package.
public final class WindowsSystemDiagnostics_DiagnosticInvoker: WindowsRuntime.WinRTImport<WindowsSystemDiagnostics_DiagnosticInvokerProjection> {
    // MARK: Windows.System.Diagnostics.IDiagnosticInvoker members

    /// Asynchronously runs the diagnostics invoker with the specified diagnostics context.
    /// - Parameter context: A Json object containing the context for the diagnostics action.
    /// - Returns: Returns an async operation object that indicates when the action has completed. A DiagnosticActionState enum value is in the result.
    public func runDiagnosticActionAsync(_ context: WindowsDataJson_JsonObject?) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsSystemDiagnostics_DiagnosticActionResult?, WindowsSystemDiagnostics_DiagnosticActionState> {
        try COM.NullResult.unwrap(_interop.runDiagnosticActionAsync(context))
    }

    // MARK: Windows.System.Diagnostics.IDiagnosticInvoker2 members

    /// Asynchronously runs the diagnostics invoker with the specified diagnostics context.
    /// - Parameter context: A string containing the context for the diagnostics action.
    /// - Returns: Returns an async operation object that indicates when the action has completed. A DiagnosticActionState enum value is in the result.
    public func runDiagnosticActionFromStringAsync(_ context: Swift.String) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsSystemDiagnostics_DiagnosticActionResult?, WindowsSystemDiagnostics_DiagnosticActionState> {
        try COM.NullResult.unwrap(_idiagnosticInvoker2.runDiagnosticActionFromStringAsync(context))
    }

    // MARK: Windows.System.Diagnostics.IDiagnosticInvokerStatics members

    /// Gets a Boolean value indicating if the diagnostics invoker is supported.
    /// - Returns: A Boolean value indicating if the diagnostics invoker is supported.
    public static var isSupported: Swift.Bool {
        get throws {
            try _idiagnosticInvokerStatics.get_IsSupported()
        }
    }

    /// Gets the default diagnostics invoker.
    /// - Returns: Returns the default diagnostics invoker.
    public static func getDefault() throws -> WindowsSystemDiagnostics_DiagnosticInvoker {
        try COM.NullResult.unwrap(_idiagnosticInvokerStatics.getDefault())
    }

    /// Gets the diagnostics invoker for the specified user.
    /// - Parameter user: The user for which to get the diagnostics invoker.
    /// - Returns: Returns the diagnostics invoker for the specified *user*.
    public static func getForUser(_ user: WindowsSystem_User?) throws -> WindowsSystemDiagnostics_DiagnosticInvoker {
        try COM.NullResult.unwrap(_idiagnosticInvokerStatics.getForUser(user))
    }

    // MARK: Implementation details

    private var _idiagnosticInvoker2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvoker2>? = nil

    internal var _idiagnosticInvoker2: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvoker2> {
        get throws {
            try _idiagnosticInvoker2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvoker2.iid).cast(to: CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvoker2.self)
            }
        }
    }

    deinit {
        _idiagnosticInvoker2_storage?.release()
    }

    private static var _idiagnosticInvokerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvokerStatics>? = nil

    internal static var _idiagnosticInvokerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvokerStatics> {
        get throws {
            try _idiagnosticInvokerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Diagnostics.DiagnosticInvoker", id: CWinRT.SWRT_WindowsSystemDiagnostics_IDiagnosticInvokerStatics.iid)
            }
        }
    }
}