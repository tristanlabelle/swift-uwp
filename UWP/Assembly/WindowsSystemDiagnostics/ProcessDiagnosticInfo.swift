// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides diagnostic information about a process, such as CPU usage, disk usage, memory usage and so on.
public final class WindowsSystemDiagnostics_ProcessDiagnosticInfo: WindowsRuntime.WinRTImport<WindowsSystemDiagnostics_ProcessDiagnosticInfoProjection> {
    // MARK: Windows.System.Diagnostics.IProcessDiagnosticInfo members

    /// Gets the CPU time used by the process.
    /// - Returns: The CPU time used by the process.
    public var cpuUsage: WindowsSystemDiagnostics_ProcessCpuUsage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CpuUsage())
        }
    }

    /// Gets the disk I/O usage of the process.
    /// - Returns: The disk I/O usage of the process.
    public var diskUsage: WindowsSystemDiagnostics_ProcessDiskUsage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DiskUsage())
        }
    }

    /// Gets the name of the executable file for the process.
    /// - Returns: The name of the executable file for the process.
    public var executableFileName: Swift.String {
        get throws {
            try _interop.get_ExecutableFileName()
        }
    }

    /// Gets memory usage data for the process.
    /// - Returns: Memory usage data for the process.
    public var memoryUsage: WindowsSystemDiagnostics_ProcessMemoryUsage {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MemoryUsage())
        }
    }

    /// Gets the ProcessDiagnosticInfo for the parent process.
    /// - Returns: The ProcessDiagnosticInfo for the parent process.
    public var parent: WindowsSystemDiagnostics_ProcessDiagnosticInfo {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parent())
        }
    }

    /// Gets the unique process ID.
    /// - Returns: The unique process ID.
    public var processId: Swift.UInt32 {
        get throws {
            try _interop.get_ProcessId()
        }
    }

    /// Gets the time the process was started.
    /// - Returns: The time the process was started.
    public var processStartTime: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_ProcessStartTime()
        }
    }

    // MARK: Windows.System.Diagnostics.IProcessDiagnosticInfo2 members

    /// Gets a Boolean value indicating whether or not this ProcessDiagnosticInfo instance has any related UWP information.
    /// - Returns: A Boolean value indicating whether or not this ProcessDiagnosticInfo instance has any related UWP information.
    public var isPackaged: Swift.Bool {
        get throws {
            try _iprocessDiagnosticInfo2.get_IsPackaged()
        }
    }

    /// Gets one or more AppDiagnosticInfo objects if the IsPackaged property is **true**.
    /// - Returns: Returns one or more AppDiagnosticInfo objects.
    public func getAppDiagnosticInfos() throws -> WindowsFoundationCollections_IVector<WindowsSystem_AppDiagnosticInfo?> {
        try COM.NullResult.unwrap(_iprocessDiagnosticInfo2.getAppDiagnosticInfos())
    }

    // MARK: Windows.System.Diagnostics.IProcessDiagnosticInfoStatics members

    /// Gets a list of ProcessDiagnosticInfo objects for all running processes that are accessible to the caller.
    /// - Returns: A list of ProcessDiagnosticInfo objects for all running processes.
    public static func getForProcesses() throws -> WindowsFoundationCollections_IVectorView<WindowsSystemDiagnostics_ProcessDiagnosticInfo?> {
        try COM.NullResult.unwrap(_iprocessDiagnosticInfoStatics.getForProcesses())
    }

    /// Gets the ProcessDiagnosticInfo for the currently running process.
    /// - Returns: The ProcessDiagnosticInfo for the currently running process.
    public static func getForCurrentProcess() throws -> WindowsSystemDiagnostics_ProcessDiagnosticInfo {
        try COM.NullResult.unwrap(_iprocessDiagnosticInfoStatics.getForCurrentProcess())
    }

    // MARK: Windows.System.Diagnostics.IProcessDiagnosticInfoStatics2 members

    /// Gets a ProcessDiagnosticInfo object for the specified process.
    /// - Parameter processId: The identifier of the process for which to retrieve a ProcessDiagnosticInfo object.
    public static func tryGetForProcessId(_ processId: Swift.UInt32) throws -> WindowsSystemDiagnostics_ProcessDiagnosticInfo {
        try COM.NullResult.unwrap(_iprocessDiagnosticInfoStatics2.tryGetForProcessId(processId))
    }

    // MARK: Implementation details

    private var _iprocessDiagnosticInfo2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfo2>? = nil

    internal var _iprocessDiagnosticInfo2: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfo2> {
        get throws {
            try _iprocessDiagnosticInfo2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfo2.iid).cast(to: CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfo2.self)
            }
        }
    }

    deinit {
        _iprocessDiagnosticInfo2_storage?.release()
    }

    private static var _iprocessDiagnosticInfoStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics>? = nil

    internal static var _iprocessDiagnosticInfoStatics: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics> {
        get throws {
            try _iprocessDiagnosticInfoStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Diagnostics.ProcessDiagnosticInfo", id: CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics.iid)
            }
        }
    }

    private static var _iprocessDiagnosticInfoStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics2>? = nil

    internal static var _iprocessDiagnosticInfoStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics2> {
        get throws {
            try _iprocessDiagnosticInfoStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.System.Diagnostics.ProcessDiagnosticInfo", id: CWinRT.SWRT_WindowsSystemDiagnostics_IProcessDiagnosticInfoStatics2.iid)
            }
        }
    }
}