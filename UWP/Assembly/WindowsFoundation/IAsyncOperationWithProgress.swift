// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an asynchronous operation that can report progress updates to callers. This is the return type for many Windows Runtime asynchronous methods that have results and also report progress.
public protocol WindowsFoundation_IAsyncOperationWithProgressProtocol<TResult, TProgress>: WindowsFoundation_IAsyncInfoProtocol {
    associatedtype TResult
    associatedtype TProgress

    /// Gets or sets the method that handles progress notifications.
    /// - Returns: A reference to the callback method that handles progress notifications. Implement the AsyncOperationProgressHandler<TResult, TProgress> delegate to define your callback. *TProgress* defines the progress unit type, which varies by method implementation.
    var progress: WindowsFoundation_AsyncOperationProgressHandler<TResult, TProgress> { get throws }
    func progress(_ handler: WindowsFoundation_AsyncOperationProgressHandler<TResult, TProgress>?) throws

    /// Gets or sets the method that handles the operation completed notification.
    /// - Returns: The method that handles the notification.
    var completed: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<TResult, TProgress> { get throws }
    func completed(_ handler: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<TResult, TProgress>?) throws

    /// Returns the results of the operation.
    /// - Returns: The results of the operation.
    func getResults() throws -> TResult
}

/// Represents an asynchronous operation that can report progress updates to callers. This is the return type for many Windows Runtime asynchronous methods that have results and also report progress.
public typealias WindowsFoundation_IAsyncOperationWithProgress<TResult, TProgress> = any WindowsFoundation_IAsyncOperationWithProgressProtocol<TResult, TProgress>

extension WindowsFoundation_IAsyncOperationWithProgressProtocol {
    public func get() async throws -> TResult {
        if try status == .started {
            guard try COM.NullResult.catch(completed) == nil else { throw COM.HResult.Error.illegalMethodCall }
            let awaiter = WindowsRuntime.AsyncAwaiter()
            try completed({ _, _ in _Concurrency.Task { await awaiter.signal() } })
            await awaiter.wait()
        }
        return try getResults()
    }
}