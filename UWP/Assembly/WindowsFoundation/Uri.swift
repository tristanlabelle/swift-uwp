// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Defines an object that represents a Uniform Resource Identifier (URI) value and parses it into components. The Uri object is used by many other Windows Runtime APIs that are not necessarily confined to web browser scenarios.
public final class WindowsFoundation_Uri: WindowsRuntime.WinRTImport<WindowsFoundation_UriProjection>, WindowsFoundation_IStringableProtocol {
    // MARK: Windows.Foundation.IUriRuntimeClassFactory members

    public convenience init(_ uri: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iuriRuntimeClassFactory.createUri(uri)))
    }

    public convenience init(_ baseUri: Swift.String, _ relativeUri: Swift.String) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iuriRuntimeClassFactory.createWithRelativeUri(baseUri, relativeUri)))
    }

    // MARK: Windows.Foundation.IUriRuntimeClass members

    /// Gets the entire, non-canonical URI (It is non-canonical because it might actually be an IRI, per the Windows.Foundation.Uri encoding behavior; see Remarks.).
    /// - Returns: The entire, non-canonical URI.
    public var absoluteUri: Swift.String {
        get throws {
            try _interop.get_AbsoluteUri()
        }
    }

    /// Gets a representation of the Uniform Resource Identifier (URI) that can be used for display purposes.
    /// - Returns: The Uniform Resource Identifier (URI) for display.
    public var displayUri: Swift.String {
        get throws {
            try _interop.get_DisplayUri()
        }
    }

    /// Gets the domain name component, including top-level domain, from a Uniform Resource Identifier (URI).
    /// - Returns: The domain name.
    public var domain: Swift.String {
        get throws {
            try _interop.get_Domain()
        }
    }

    /// Gets the file name extension of the resource that is referenced in the Uri.
    /// - Returns: The file name extension including the dot (.), if applicable.
    public var `extension`: Swift.String {
        get throws {
            try _interop.get_Extension()
        }
    }

    /// Gets the text following a fragment marker (#), including the fragment marker itself.
    /// - Returns: The text that represents the fragment.
    public var fragment: Swift.String {
        get throws {
            try _interop.get_Fragment()
        }
    }

    /// Gets the fully qualified domain name.
    /// - Returns: The fully qualified domain name.
    public var host: Swift.String {
        get throws {
            try _interop.get_Host()
        }
    }

    /// Gets the password component of the Uniform Resource Identifier (URI) as stored in this Uri instance.
    /// - Returns: The password.
    public var password: Swift.String {
        get throws {
            try _interop.get_Password()
        }
    }

    /// Gets the path and resource name component of the Uniform Resource Identifier (URI) as stored in this Uri instance.
    /// - Returns: The path, including the resource name, and including the extension. Does not include query or fragment.
    public var path: Swift.String {
        get throws {
            try _interop.get_Path()
        }
    }

    /// Gets the port number component of the Uniform Resource Identifier (URI) as stored in this Uri instance
    /// - Returns: The port number.
    public var port: Swift.Int32 {
        get throws {
            try _interop.get_Port()
        }
    }

    /// Gets the query string component of the Uniform Resource Identifier (URI) as stored in this Uri instance.
    /// - Returns: The query string.
    public var query: Swift.String {
        get throws {
            try _interop.get_Query()
        }
    }

    /// Gets a parsed Uniform Resource Identifier (URI) query string.
    /// - Returns: The parsed query, as a new WwwFormUrlDecoder object. This is a read-only list of all name-value pairs (the form entries) as found in the query string after parsing.
    public var queryParsed: WindowsFoundation_WwwFormUrlDecoder {
        get throws {
            try COM.NullResult.unwrap(_interop.get_QueryParsed())
        }
    }

    /// Gets the entire original Uniform Resource Identifier (URI) string as used to construct this Uri object, before parsing, and without any encoding applied.
    /// - Returns: The raw Uniform Resource Identifier (URI) string.
    public var rawUri: Swift.String {
        get throws {
            try _interop.get_RawUri()
        }
    }

    /// Gets the protocol scheme name component of the Uniform Resource Identifier (URI) as stored in this Uri instance
    /// - Returns: The protocol scheme name.
    public var schemeName: Swift.String {
        get throws {
            try _interop.get_SchemeName()
        }
    }

    /// Gets a value that indicates whether parsing determined that the Uniform Resource Identifier (URI) is not well-formed.
    /// - Returns: **true** if the Uniform Resource Identifier (URI) is flagged as suspicious; otherwise, **false**.
    public var suspicious: Swift.Bool {
        get throws {
            try _interop.get_Suspicious()
        }
    }

    /// Gets the user name component of the Uniform Resource Identifier (URI) as stored in this Uri instance.
    /// - Returns: The user name.
    public var userName: Swift.String {
        get throws {
            try _interop.get_UserName()
        }
    }

    /// Determines whether the specified Uri object is equal to the current Uri object.
    /// - Parameter pUri: The Uri object to be compared.
    /// - Returns: **true** if the two Uri values are the same; otherwise, **false**.
    public func equals(_ pUri: WindowsFoundation_Uri?) throws -> Swift.Bool {
        try _interop.equals(pUri)
    }

    /// Adds the specified Uniform Resource Identifier (URI) to the current Uri.
    /// - Parameter relativeUri: A relative Uniform Resource Identifier (URI) specified as a string. This relative path is evaluated using the host/authority of the Uri instance where this method is called.
    /// - Returns: The combined Uri value.
    public func combineUri(_ relativeUri: Swift.String) throws -> WindowsFoundation_Uri {
        try COM.NullResult.unwrap(_interop.combineUri(relativeUri))
    }

    // MARK: Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri members

    /// Gets a fully canonical RFC-compliant representation of the current URI.
    /// - Returns: The canonical URI.
    public var absoluteCanonicalUri: Swift.String {
        get throws {
            try _iuriRuntimeClassWithAbsoluteCanonicalUri.get_AbsoluteCanonicalUri()
        }
    }

    /// Gets the decoded unicode characters that make up the current URI.
    /// - Returns: The decoded unicode characters, when possible. Unsafe values are renamed as percent-encoded UTF-8. Characters in the hostname are decoded if they were encoded using*Punycode*.
    public var displayIri: Swift.String {
        get throws {
            try _iuriRuntimeClassWithAbsoluteCanonicalUri.get_DisplayIri()
        }
    }

    // MARK: Windows.Foundation.IStringable members

    /// Gets a canonical string representation for the current Uri.
    /// - Returns: The unescaped canonical representation of the current Uri. All characters are unescaped, except #, ?, and %.
    public func toString() throws -> Swift.String {
        try _istringable.toString()
    }

    // MARK: Windows.Foundation.IUriEscapeStatics members

    /// Converts the specified string by replacing any escape sequences with their unescaped representation.
    /// - Parameter toUnescape: The string to convert.
    /// - Returns: The unescaped representation of *stringToUnescape*.
    public static func unescapeComponent(_ toUnescape: Swift.String) throws -> Swift.String {
        try _iuriEscapeStatics.unescapeComponent(toUnescape)
    }

    /// Converts a Uniform Resource Identifier (URI) string to its escaped representation.
    /// - Parameter toEscape: The string to convert.
    /// - Returns: The escaped representation of *toEscape*.
    public static func escapeComponent(_ toEscape: Swift.String) throws -> Swift.String {
        try _iuriEscapeStatics.escapeComponent(toEscape)
    }

    // MARK: Implementation details

    private var _iuriRuntimeClassWithAbsoluteCanonicalUri_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassWithAbsoluteCanonicalUri>? = nil

    internal var _iuriRuntimeClassWithAbsoluteCanonicalUri: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassWithAbsoluteCanonicalUri> {
        get throws {
            try _iuriRuntimeClassWithAbsoluteCanonicalUri_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassWithAbsoluteCanonicalUri.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassWithAbsoluteCanonicalUri.self)
            }
        }
    }

    private var _istringable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable>? = nil

    internal var _istringable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IStringable> {
        get throws {
            try _istringable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IStringable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IStringable.self)
            }
        }
    }

    deinit {
        _iuriRuntimeClassWithAbsoluteCanonicalUri_storage?.release()
        _istringable_storage?.release()
    }

    private static var _iuriRuntimeClassFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassFactory>? = nil

    internal static var _iuriRuntimeClassFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassFactory> {
        get throws {
            try _iuriRuntimeClassFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Uri", id: CWinRT.SWRT_WindowsFoundation_IUriRuntimeClassFactory.iid)
            }
        }
    }

    private static var _iuriEscapeStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriEscapeStatics>? = nil

    internal static var _iuriEscapeStatics: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IUriEscapeStatics> {
        get throws {
            try _iuriEscapeStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.Uri", id: CWinRT.SWRT_WindowsFoundation_IUriEscapeStatics.iid)
            }
        }
    }
}