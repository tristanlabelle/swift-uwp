// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a reference counted memory buffer.
public final class WindowsFoundation_MemoryBuffer: WindowsRuntime.WinRTImport<WindowsFoundation_MemoryBufferProjection>, WindowsFoundation_IMemoryBufferProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Foundation.IMemoryBufferFactory members

    public convenience init(_ capacity: Swift.UInt32) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imemoryBufferFactory.create(capacity)))
    }

    // MARK: Windows.Foundation.IMemoryBuffer members

    /// Returns a new managed object that implements the IMemoryBufferReference interface.
    /// - Returns: A new managed object that implements the IMemoryBufferReference interface.
    public func createReference() throws -> WindowsFoundation_IMemoryBufferReference {
        try COM.NullResult.unwrap(_interop.createReference())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disconnects this MemoryBuffer object from the actual memory buffer.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _imemoryBufferFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IMemoryBufferFactory>? = nil

    internal static var _imemoryBufferFactory: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IMemoryBufferFactory> {
        get throws {
            try _imemoryBufferFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Foundation.MemoryBuffer", id: CWinRT.SWRT_WindowsFoundation_IMemoryBufferFactory.iid)
            }
        }
    }
}