// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to exclusive and privileged methods, properties, and events on a point-of-service cash drawer device.
public final class WindowsDevicesPointOfService_ClaimedCashDrawer: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedCashDrawerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedCashDrawer members

    /// Gets the close alarm for this cash drawer. This is only valid if IsDrawerOpenSensorAvailable is true.
    /// - Returns: The close alarm for the cash drawer.
    public var closeAlarm: WindowsDevicesPointOfService_CashDrawerCloseAlarm {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CloseAlarm())
        }
    }

    /// The identifier string of the claimed cash drawer device.
    /// - Returns: String representing the ID of the device.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Indicates whether the cash drawer is open.
    /// - Returns: True if the drawer is open, otherwise false.
    public var isDrawerOpen: Swift.Bool {
        get throws {
            try _interop.get_IsDrawerOpen()
        }
    }

    /// Indicates whether the cash drawer is operational and can be used.
    /// - Returns: True if the cash drawer can be opened or CloseAlarm can be used; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Occurs when the device gets a request to release its exclusive claim.
    public func releaseDeviceRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedCashDrawer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReleaseDeviceRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: releaseDeviceRequested)
    }

    public func releaseDeviceRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReleaseDeviceRequested(token)
    }

    /// Opens the cash drawer.
    /// - Returns: Boolean indicating whether the drawer was successfully opened.
    public func openDrawerAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.openDrawerAsync())
    }

    /// Asynchronously notifies the underlying hardware to power on for use.
    /// - Returns: Whether the attempt to enable succeeded or not.
    public func enableAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.enableAsync())
    }

    /// Notifies the underlying hardware to power off.
    /// - Returns: Whether the attempt to disable succeeded or not.
    public func disableAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.disableAsync())
    }

    /// Retain the current claim on the cash drawer. This is usually called in response to a ReleaseDeviceRequested event notification.
    /// - Returns: True if the retain attempt succeeded; false if the retain attempt failed.
    public func retainDeviceAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.retainDeviceAsync())
    }

    public func resetStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.resetStatisticsAsync(statisticsCategories))
    }

    public func updateStatisticsAsync(_ statistics: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.updateStatisticsAsync(statistics))
    }

    // MARK: Windows.Devices.PointOfService.IClaimedCashDrawer2 members

    /// Event that is raised when the **ClaimedCashDrawer** is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedCashDrawer?, WindowsDevicesPointOfService_ClaimedCashDrawerClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclaimedCashDrawer2.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclaimedCashDrawer2.remove_Closed(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes the claimed cash drawer, releases claim on the device, and disables the device the same way as calling DisableAsync.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclaimedCashDrawer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedCashDrawer2>? = nil

    internal var _iclaimedCashDrawer2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedCashDrawer2> {
        get throws {
            try _iclaimedCashDrawer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedCashDrawer2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedCashDrawer2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclaimedCashDrawer2_storage?.release()
        _iclosable_storage?.release()
    }
}