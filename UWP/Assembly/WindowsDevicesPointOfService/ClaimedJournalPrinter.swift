// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a journal printer station that has been claimed for use.
public final class WindowsDevicesPointOfService_ClaimedJournalPrinter: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedJournalPrinterProjection>, WindowsDevicesPointOfService_ICommonClaimedPosPrinterStationProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedJournalPrinter members

    /// Creates a new print job for the journal printer station.
    /// - Returns: The new print job for the journal printer station.
    public func createJob() throws -> WindowsDevicesPointOfService_JournalPrintJob {
        try COM.NullResult.unwrap(_interop.createJob())
    }

    // MARK: Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation members

    /// Gets or sets the number of characters per line for the journal printer station.
    /// - Returns: The number of characters.
    public var charactersPerLine: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_CharactersPerLine()
        }
    }

    /// Gets or sets the number of characters per line for the journal printer station.
    /// - Returns: The number of characters.
    public func charactersPerLine(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_CharactersPerLine(value)
    }

    /// Gets or sets the color cartridge that the journal printer station should use when it prints. This property must agree with what is available through ColorCartridgeCapabilities.
    /// - Returns: An enumeration value that identifies the color cartridge that the journal printer station should use when it prints.
    public var colorCartridge: WindowsDevicesPointOfService_PosPrinterColorCartridge {
        get throws {
            try _icommonClaimedPosPrinterStation.get_ColorCartridge()
        }
    }

    /// Gets or sets the color cartridge that the journal printer station should use when it prints. This property must agree with what is available through ColorCartridgeCapabilities.
    /// - Returns: An enumeration value that identifies the color cartridge that the journal printer station should use when it prints.
    public func colorCartridge(_ value: WindowsDevicesPointOfService_PosPrinterColorCartridge) throws {
        try _icommonClaimedPosPrinterStation.put_ColorCartridge(value)
    }

    /// Gets whether the printer cartridge for the journal printer station is empty. Note, this may throw an exception if the corresponding sensor is not available on the printer. See JournalPrinterCapabilities to verify sensor availability.
    /// - Returns: True if the printer cartridge is empty; otherwise false.
    public var isCartridgeEmpty: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCartridgeEmpty()
        }
    }

    /// Gets whether the cartridge for journal printer station has been removed. Note, this may throw an exception if the corresponding sensor is not available on the printer. See JournalPrinterCapabilities to verify sensor availability.
    /// - Returns: True if the cartridge is missing; otherwise false.
    public var isCartridgeRemoved: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCartridgeRemoved()
        }
    }

    /// Gets whether the printer cover for the journal printer station is open.
    /// - Returns: True if the cover is open; otherwise false.
    public var isCoverOpen: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCoverOpen()
        }
    }

    /// Gets whether the head for the journal printer station is currently cleaning.
    /// - Returns: True if the head is currently cleaning; otherwise false.
    public var isHeadCleaning: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsHeadCleaning()
        }
    }

    /// Gets or sets whether the journal printer station prints with high quality or high speed. Note, this may throw an exception if the corresponding sensor is not available on the printer.
    /// - Returns: True if the journal printer station prints with high quality. False if the journal printer station prints with high speed.
    public var isLetterQuality: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsLetterQuality()
        }
    }

    /// Gets or sets whether the journal printer station prints with high quality or high speed. Note, this may throw an exception if the corresponding sensor is not available on the printer.
    /// - Returns: True if the journal printer station prints with high quality. False if the journal printer station prints with high speed.
    public func isLetterQuality(_ value: Swift.Bool) throws {
        try _icommonClaimedPosPrinterStation.put_IsLetterQuality(value)
    }

    /// Gets whether the paper is empty for the journal printer station. Note, this may throw an exception if the corresponding sensor is not available on the printer. See JournalPrinterCapabilities to verify sensor availability.
    /// - Returns: True if the printer is out of paper; otherwise false.
    public var isPaperEmpty: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsPaperEmpty()
        }
    }

    /// Gets whether the printer paper is near the end for the journal printer station. Note, this may throw an exception if the corresponding sensor is not available on the printer. See JournalPrinterCapabilities to verify sensor availability.
    /// - Returns: True if the paper is near the end; otherwise false.
    public var isPaperNearEnd: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsPaperNearEnd()
        }
    }

    /// Gets whether the journal printer station is ready to print. Note, this may throw an exception if the corresponding sensor is not available on the printer. See JournalPrinterCapabilities to verify sensor availability.
    /// - Returns: True if the printer is ready to print; otherwise false.
    public var isReadyToPrint: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsReadyToPrint()
        }
    }

    /// Gets or sets the current height of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current height of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineHeight: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineHeight()
        }
    }

    /// Gets or sets the current height of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current height of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public func lineHeight(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_LineHeight(value)
    }

    /// Gets or sets the spacing of each single-high print line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies. This spacing includes both the height of printed line and of the white space between each pair of lines.
    /// - Returns: The spacing of each single-high print line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineSpacing: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineSpacing()
        }
    }

    /// Gets or sets the spacing of each single-high print line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies. This spacing includes both the height of printed line and of the white space between each pair of lines.
    /// - Returns: The spacing of each single-high print line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public func lineSpacing(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_LineSpacing(value)
    }

    /// Gets the current width of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current width of the printed line for the journal printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineWidth: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineWidth()
        }
    }

    /// Determines if a JournalPrintJob can successfully execute a print instruction with the specified data.
    /// - Parameter data: The data sequence that you want to validate before you use it with the JournalPrintJob.Print method. This sequence may include printable data and escape sequences.
    /// - Returns: True if the data passes validation; otherwise false.
    public func validateData(_ data: Swift.String) throws -> Swift.Bool {
        try _icommonClaimedPosPrinterStation.validateData(data)
    }

    // MARK: Implementation details

    private var _icommonClaimedPosPrinterStation_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation>? = nil

    internal var _icommonClaimedPosPrinterStation: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation> {
        get throws {
            try _icommonClaimedPosPrinterStation_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation.self)
            }
        }
    }

    deinit {
        _icommonClaimedPosPrinterStation_storage?.release()
    }
}