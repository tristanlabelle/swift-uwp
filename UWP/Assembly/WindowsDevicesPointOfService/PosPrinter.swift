// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a point-of-service printer.
public final class WindowsDevicesPointOfService_PosPrinter: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_PosPrinterProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IPosPrinter members

    /// Gets the capabilities of the point-of-service printer.
    /// - Returns: The capabilities of the point-of-service printer.
    public var capabilities: WindowsDevicesPointOfService_PosPrinterCapabilities {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Capabilities())
        }
    }

    /// Gets the identifier of the point-of-service printer.
    /// - Returns: The identifier of the point-of-service printer.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the current status of the power and availability of the point-of-service printer.
    /// - Returns: The current status of the power and availability of the point-of-service printer.
    public var status: WindowsDevicesPointOfService_PosPrinterStatus {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Status())
        }
    }

    /// Gets the list of character sets that the point-of-service printer supports.
    /// - Returns: The list of numeric values for the character sets that the point-of-service-printer supports.
    public var supportedCharacterSets: WindowsFoundationCollections_IVectorView<Swift.UInt32> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedCharacterSets())
        }
    }

    /// Gets the fonts and typefaces that the point-of-service printer supports.
    /// - Returns: The fonts and typefaces that the point-of-service printer supports.
    public var supportedTypeFaces: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedTypeFaces())
        }
    }

    /// Occurs when the status of the power or availability of the point-of-service printer changes.
    public func statusUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_PosPrinter?, WindowsDevicesPointOfService_PosPrinterStatusUpdatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusUpdated)
    }

    public func statusUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusUpdated(token)
    }

    /// Claims the point-of-service printer for use, and gets an instance of the ClaimedPosPrinter class for the point-of-service printer.
    /// - Returns: The claimed point-of-service printer.
    public func claimPrinterAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_ClaimedPosPrinter?> {
        try COM.NullResult.unwrap(_interop.claimPrinterAsync())
    }

    /// Gets the health state of the point-of-service printer asynchronously.
    /// - Parameter level: The type of health check that you want to perform for the point-of-service printer. Only level POSInternal(1) should be used, as any other UnifiedPosHealthCheckLevel levels will result in an error.
    /// - Returns: An asynchronous operation that returns the health state of the point-of-service printer. You should display this value in the app interface immediately so the user of the app can interpret the value. For example, the operation returns “OK” as the health state if the state of the point-of-service printer is good.
    public func checkHealthAsync(_ level: WindowsDevicesPointOfService_UnifiedPosHealthCheckLevel) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.checkHealthAsync(level))
    }

    public func getStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.getStatisticsAsync(statisticsCategories))
    }

    // MARK: Windows.Devices.PointOfService.IPosPrinter2 members

    /// Gets the barcode symbologies that the point-of-service printer supports.
    /// - Returns: The barcode symbologies that the point-of-service printer supports.
    public var supportedBarcodeSymbologies: WindowsFoundationCollections_IVectorView<Swift.UInt32> {
        get throws {
            try COM.NullResult.unwrap(_iposPrinter2.get_SupportedBarcodeSymbologies())
        }
    }

    /// Gets the specified font property from the point-of-service printers.
    /// - Parameter typeface: The typeface of the font property to retrieve.
    /// - Returns: The requested font property.
    public func getFontProperty(_ typeface: Swift.String) throws -> WindowsDevicesPointOfService_PosPrinterFontProperty {
        try COM.NullResult.unwrap(_iposPrinter2.getFontProperty(typeface))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Close the POS printer session. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.PointOfService.IPosPrinterStatics2 members

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the point-of-service printers available over the specified connection types
    /// - Parameter connectionTypes: A list of the connection types to check for available point-of-service printers.
    /// - Returns: An Advanced Query Syntax (AQS) string that is used to enumerate the point-of-service printers available over the specified connection types
    public static func getDeviceSelector(_ connectionTypes: WindowsDevicesPointOfService_PosConnectionTypes) throws -> Swift.String {
        try _iposPrinterStatics2.getDeviceSelectorWithConnectionTypes(connectionTypes)
    }

    // MARK: Windows.Devices.PointOfService.IPosPrinterStatics members

    /// Gets the default paired or locally-connected printer.
    /// - Returns: The default locally-connected printer.
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_PosPrinter?> {
        try COM.NullResult.unwrap(_iposPrinterStatics.getDefaultAsync())
    }

    /// Creates a PosPrinter object for point-of-service printer with the specified DeviceInformation.Id.
    /// - Parameter deviceId: The DeviceInformation.Id that identifies a specific point-of-service printer.
    /// - Returns: The point-of-service printer that the unique device identifier identifies. Returns a null object in the following cases:
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_PosPrinter?> {
        try COM.NullResult.unwrap(_iposPrinterStatics.fromIdAsync(deviceId))
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the available point-of-service printers.
    /// - Returns: An Advanced Query Syntax (AQS) string that you can use to list the available point-of-service printers.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iposPrinterStatics.getDeviceSelector()
    }

    // MARK: Implementation details

    private var _iposPrinter2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinter2>? = nil

    internal var _iposPrinter2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinter2> {
        get throws {
            try _iposPrinter2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinter2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinter2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iposPrinter2_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _iposPrinterStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics2>? = nil

    internal static var _iposPrinterStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics2> {
        get throws {
            try _iposPrinterStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.PosPrinter", id: CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics2.iid)
            }
        }
    }

    private static var _iposPrinterStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics>? = nil

    internal static var _iposPrinterStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics> {
        get throws {
            try _iposPrinterStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.PosPrinter", id: CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterStatics.iid)
            }
        }
    }
}