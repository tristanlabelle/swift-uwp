// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the barcode scanner capabilities.
public final class WindowsDevicesPointOfService_BarcodeScannerCapabilities: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_BarcodeScannerCapabilitiesProjection> {
    // MARK: Windows.Devices.PointOfService.IBarcodeScannerCapabilities members

    /// Indicates whether the barcode scanner supports image preview.
    /// - Returns: True if the barcode scanner supports image preview; otherwise, false.
    public var isImagePreviewSupported: Swift.Bool {
        get throws {
            try _interop.get_IsImagePreviewSupported()
        }
    }

    /// Indicates whether the barcode scanner supports reporting of usage statistics.
    /// - Returns: True if the barcode scanner supports statistics reporting; otherwise, false.
    public var isStatisticsReportingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsReportingSupported()
        }
    }

    /// Indicates whether the barcode scanner supports updating or resetting of usage statistics.
    /// - Returns: True if the barcode scanner supports updating of usage statistics; otherwise, false.
    public var isStatisticsUpdatingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsUpdatingSupported()
        }
    }

    /// Gets the power reporting type for the barcode scanner.
    /// - Returns: Power reporting type.
    public var powerReportingType: WindowsDevicesPointOfService_UnifiedPosPowerReportingType {
        get throws {
            try _interop.get_PowerReportingType()
        }
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScannerCapabilities1 members

    /// Indicates whether the barcode scanner supports the software trigger functionality.
    /// - Returns: True if the software trigger is supported; otherwise, false.
    public var isSoftwareTriggerSupported: Swift.Bool {
        get throws {
            try _ibarcodeScannerCapabilities1.get_IsSoftwareTriggerSupported()
        }
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScannerCapabilities2 members

    /// Indicates whether the barcode scanner supports displaying a live video preview from an attached camera.
    /// - Returns: True if the barcode scanner supports displaying a live video preview; otherwise, false.
    public var isVideoPreviewSupported: Swift.Bool {
        get throws {
            try _ibarcodeScannerCapabilities2.get_IsVideoPreviewSupported()
        }
    }

    // MARK: Implementation details

    private var _ibarcodeScannerCapabilities1_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities1>? = nil

    internal var _ibarcodeScannerCapabilities1: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities1> {
        get throws {
            try _ibarcodeScannerCapabilities1_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities1.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities1.self)
            }
        }
    }

    private var _ibarcodeScannerCapabilities2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities2>? = nil

    internal var _ibarcodeScannerCapabilities2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities2> {
        get throws {
            try _ibarcodeScannerCapabilities2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerCapabilities2.self)
            }
        }
    }

    deinit {
        _ibarcodeScannerCapabilities1_storage?.release()
        _ibarcodeScannerCapabilities2_storage?.release()
    }
}