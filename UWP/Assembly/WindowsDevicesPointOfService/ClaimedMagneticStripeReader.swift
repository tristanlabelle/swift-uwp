// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the claimed magnetic stripe reader.
public final class WindowsDevicesPointOfService_ClaimedMagneticStripeReader: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedMagneticStripeReaderProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedMagneticStripeReader members

    /// Gets or sets the MagneticStripeReaderEncryptionAlgorithms that will be used to encrypt the track data.
    /// - Returns: The encryption algorithm the will be used to encrypt the track data.
    public var dataEncryptionAlgorithm: Swift.UInt32 {
        get throws {
            try _interop.get_DataEncryptionAlgorithm()
        }
    }

    /// Gets or sets the MagneticStripeReaderEncryptionAlgorithms that will be used to encrypt the track data.
    /// - Returns: The encryption algorithm the will be used to encrypt the track data.
    public func dataEncryptionAlgorithm(_ value: Swift.UInt32) throws {
        try _interop.put_DataEncryptionAlgorithm(value)
    }

    /// Gets the DeviceInformation.Id of the claimed magnetic stripe reader.
    /// - Returns: The DeviceInformation.Id of the claimed magnetic stripe reader.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Indicates whether to provide raw or decoded data from the most recently swiped card.
    /// - Returns: Set to true if decoded data is provided to the application; otherwise, false.
    public var isDecodeDataEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDecodeDataEnabled()
        }
    }

    /// Indicates whether to provide raw or decoded data from the most recently swiped card.
    /// - Returns: Set to true if decoded data is provided to the application; otherwise, false.
    public func isDecodeDataEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDecodeDataEnabled(value)
    }

    /// Indicates whether the device is authenticated.
    /// - Returns: True is the device is authenticated; otherwise, false.
    public var isDeviceAuthenticated: Swift.Bool {
        get throws {
            try _interop.get_IsDeviceAuthenticated()
        }
    }

    /// Gets or sets a Boolean value that indicates whether the magnetic stripe reader is disabled after receiving the data from the most recently swiped card.
    /// - Returns: Set to true if the application wants to receive and process only one input or only one input at a time.
    public var isDisabledOnDataReceived: Swift.Bool {
        get throws {
            try _interop.get_IsDisabledOnDataReceived()
        }
    }

    /// Gets or sets a Boolean value that indicates whether the magnetic stripe reader is disabled after receiving the data from the most recently swiped card.
    /// - Returns: Set to true if the application wants to receive and process only one input or only one input at a time.
    public func isDisabledOnDataReceived(_ value: Swift.Bool) throws {
        try _interop.put_IsDisabledOnDataReceived(value)
    }

    /// Indicates whether the magnetic stripe reader is ready to receive data events.
    /// - Returns: True if the device is operational; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Indicates whether the track data contains start and end sentinel values.
    /// - Returns: True if the track data contains start and end sentinel values. False if the track data properties only contain track data between sentinels.
    public var isTransmitSentinelsEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsTransmitSentinelsEnabled()
        }
    }

    /// Indicates whether the track data contains start and end sentinel values.
    /// - Returns: True if the track data contains start and end sentinel values. False if the track data properties only contain track data between sentinels.
    public func isTransmitSentinelsEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsTransmitSentinelsEnabled(value)
    }

    /// Gets or sets the track data that the application wants to receive following a card swipe.
    /// - Returns: The card track.
    public var tracksToRead: WindowsDevicesPointOfService_MagneticStripeReaderTrackIds {
        get throws {
            try _interop.get_TracksToRead()
        }
    }

    /// Gets or sets the track data that the application wants to receive following a card swipe.
    /// - Returns: The card track.
    public func tracksToRead(_ value: WindowsDevicesPointOfService_MagneticStripeReaderTrackIds) throws {
        try _interop.put_TracksToRead(value)
    }

    /// Occurs when a motor vehicle card is swiped.
    public func aamvaCardDataReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?, WindowsDevicesPointOfService_MagneticStripeReaderAamvaCardDataReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AamvaCardDataReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: aamvaCardDataReceived)
    }

    public func aamvaCardDataReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AamvaCardDataReceived(token)
    }

    /// Occurs when a bank card is swiped.
    public func bankCardDataReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?, WindowsDevicesPointOfService_MagneticStripeReaderBankCardDataReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BankCardDataReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: bankCardDataReceived)
    }

    public func bankCardDataReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BankCardDataReceived(token)
    }

    /// Occurs when the magnetic stripe reader detects an error when reading a card.
    public func errorOccurred(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?, WindowsDevicesPointOfService_MagneticStripeReaderErrorOccurredEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ErrorOccurred(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: errorOccurred)
    }

    public func errorOccurred(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ErrorOccurred(token)
    }

    /// Occurs when the device gets a request to release its exclusive claim.
    public func releaseDeviceRequested(adding handler: WindowsFoundation_EventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReleaseDeviceRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: releaseDeviceRequested)
    }

    public func releaseDeviceRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReleaseDeviceRequested(token)
    }

    /// Occurs when a vendor-specific card is swiped.
    public func vendorSpecificDataReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?, WindowsDevicesPointOfService_MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VendorSpecificDataReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: vendorSpecificDataReceived)
    }

    public func vendorSpecificDataReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VendorSpecificDataReceived(token)
    }

    /// Gets the magnetic stripe reader into a ready state to receive data events.
    /// - Returns: No object or value is returned by this method when it completes.
    public func enableAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.enableAsync())
    }

    /// Puts the ClaimedMagneticStripeReader into a state where it cannot receive data events.
    /// - Returns: No object or value is returned when this method completes.
    public func disableAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.disableAsync())
    }

    /// Retains exclusive claim to the magnetic stripe reader.
    public func retainDevice() throws {
        try _interop.retainDevice()
    }

    /// Sets the type of error to report by the ErrorOccurred event.
    /// - Parameter value: Error reporting type.
    public func setErrorReportingType(_ value: WindowsDevicesPointOfService_MagneticStripeReaderErrorReportingType) throws {
        try _interop.setErrorReportingType(value)
    }

    /// Retrieves a challenge token from the device.
    /// - Returns: Buffer used to store the resulting challenge token from the device.
    public func retrieveDeviceAuthenticationDataAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.retrieveDeviceAuthenticationDataAsync())
    }

    /// Puts the device into an authenticated state.
    /// - Parameter responseToken: A buffer containing the response token generated from the challenge token retrieved from a previous call to the RetrieveDeviceAuthenticationDataAsync method.
    public func authenticateDeviceAsync(_ responseToken: [Swift.UInt8]) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.authenticateDeviceAsync(responseToken))
    }

    /// Puts the device into an unauthenticated state.
    /// - Parameter responseToken: A buffer containing the response token generated from the challenge token retrieved from a previous call to the RetrieveDeviceAuthenticationDataAsync method.
    public func deAuthenticateDeviceAsync(_ responseToken: [Swift.UInt8]) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.deAuthenticateDeviceAsync(responseToken))
    }

    /// Provides a new encryption key to the device.
    /// - Parameter key: The HEX-ASCII or base64-encoded value for the new key.
    /// - Parameter keyName: The name used to identify the key.
    public func updateKeyAsync(_ key: Swift.String, _ keyName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.updateKeyAsync(key, keyName))
    }

    public func resetStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.resetStatisticsAsync(statisticsCategories))
    }

    public func updateStatisticsAsync(_ statistics: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.updateStatisticsAsync(statistics))
    }

    // MARK: Windows.Devices.PointOfService.IClaimedMagneticStripeReader2 members

    /// Event that is raised when the **ClaimedMagneticStripeReader** is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?, WindowsDevicesPointOfService_ClaimedMagneticStripeReaderClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclaimedMagneticStripeReader2.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclaimedMagneticStripeReader2.remove_Closed(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases the exclusive claim to the magnetic strip reader.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclaimedMagneticStripeReader2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedMagneticStripeReader2>? = nil

    internal var _iclaimedMagneticStripeReader2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedMagneticStripeReader2> {
        get throws {
            try _iclaimedMagneticStripeReader2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedMagneticStripeReader2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedMagneticStripeReader2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclaimedMagneticStripeReader2_storage?.release()
        _iclosable_storage?.release()
    }
}