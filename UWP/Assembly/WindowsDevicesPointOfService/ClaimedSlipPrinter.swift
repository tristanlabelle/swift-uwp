// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a slip printer station that has been claimed for use.
public final class WindowsDevicesPointOfService_ClaimedSlipPrinter: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedSlipPrinterProjection>, WindowsDevicesPointOfService_ICommonClaimedPosPrinterStationProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedSlipPrinter members

    /// Gets the number of lines that the slip printer station can print after the ClaimedSlipPrinter.IsPaperNearEnd property is set to **true** but before the printer reaches the end of the slip.
    /// - Returns: The number of lines that the slip printer station can print after the ClaimedSlipPrinter.IsPaperNearEnd property is set to **true** but before the printer reaches the end of the slip.
    public var linesNearEndToEnd: Swift.UInt32 {
        get throws {
            try _interop.get_LinesNearEndToEnd()
        }
    }

    /// Gets the maximum number of lines that the slip printer station can print on a form.
    /// - Returns: The maximum number of lines that the slip printer station can print on a form.
    public var maxLines: Swift.UInt32 {
        get throws {
            try _interop.get_MaxLines()
        }
    }

    /// Gets the size of paper that the claimed slip printer station currently uses, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The size of paper that the claimed slip printer station currently uses.
    public var pageSize: WindowsFoundation_Size {
        get throws {
            try _interop.get_PageSize()
        }
    }

    /// Gets the print area for the slip printer station, expressed in the unit of measurement that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The print area for the slip printer station, expressed in the unit of measurement that the ClaimedPosPrinter.MapMode property specifies.
    public var printArea: WindowsFoundation_Rect {
        get throws {
            try _interop.get_PrintArea()
        }
    }

    /// Gets the side of the sheet on which the claimed slip printer station is currently printing.
    /// - Returns: The side of the sheet on which the claimed slip printer station is currently printing.
    public var printSide: WindowsDevicesPointOfService_PosPrinterPrintSide {
        get throws {
            try _interop.get_PrintSide()
        }
    }

    /// Gets the maximum number of characters that the slip printer station can print on each line in sideways mode.
    /// - Returns: The maximum number of characters that the slip printer station can print on each line in sideways mode.
    public var sidewaysMaxChars: Swift.UInt32 {
        get throws {
            try _interop.get_SidewaysMaxChars()
        }
    }

    /// Gets the maximum number of lines that the slip printer station can print in sideways mode.
    /// - Returns: The maximum number of lines that the slip printer station can print in sideways mode.
    public var sidewaysMaxLines: Swift.UInt32 {
        get throws {
            try _interop.get_SidewaysMaxLines()
        }
    }

    /// Opens the mechanism that holds the slip in place while the slip printer station is printing, typically before the user inserts or removes the slip.
    public func openJaws() throws {
        try _interop.openJaws()
    }

    /// Closes the mechanism that holds the slip in place while the slip printer station is printing, typically after the user inserts or removes the slip.
    public func closeJaws() throws {
        try _interop.closeJaws()
    }

    /// Waits for the user to insert a slip into the slip printer station.
    /// - Parameter timeout: The interval of time that the operation should wait for the user to insert the slip before exiting.
    /// - Returns: An asynchronous operation that returns true if the user inserts the slip within the specified time span, and returns false otherwise.
    public func insertSlipAsync(_ timeout: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.insertSlipAsync(timeout))
    }

    /// Waits for the user to remove a slip from the slip printer station.
    /// - Parameter timeout: The interval of time that the operation should wait for the user to remove the slip before exiting.
    /// - Returns: An asynchronous operation that returns true if the user removes the slip within the specified time span, and returns false otherwise.
    public func removeSlipAsync(_ timeout: WindowsFoundation_TimeSpan) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.removeSlipAsync(timeout))
    }

    /// Changes the side of the sheet on which the claimed slip printer station is currently printing.
    /// - Parameter printSide: The side of the sheet on which the claimed slip printer station is currently printing.
    public func changePrintSide(_ printSide: WindowsDevicesPointOfService_PosPrinterPrintSide) throws {
        try _interop.changePrintSide(printSide)
    }

    /// Creates a new print job for the slip printer stiation.
    /// - Returns: The new print job for the slip printer station.
    public func createJob() throws -> WindowsDevicesPointOfService_SlipPrintJob {
        try COM.NullResult.unwrap(_interop.createJob())
    }

    // MARK: Windows.Devices.PointOfService.ICommonClaimedPosPrinterStation members

    /// Gets or sets the number of characters the slip printer station can print per line of text.
    /// - Returns: The number of characters the slip printer station can print per line of text.
    public var charactersPerLine: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_CharactersPerLine()
        }
    }

    /// Gets or sets the number of characters the slip printer station can print per line of text.
    /// - Returns: The number of characters the slip printer station can print per line of text.
    public func charactersPerLine(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_CharactersPerLine(value)
    }

    /// Gets or sets the color cartridge that the slip printer station should use when it prints.
    /// - Returns: An enumeration value that identifies the color cartridge that the slip printer station should use when it prints.
    public var colorCartridge: WindowsDevicesPointOfService_PosPrinterColorCartridge {
        get throws {
            try _icommonClaimedPosPrinterStation.get_ColorCartridge()
        }
    }

    /// Gets or sets the color cartridge that the slip printer station should use when it prints.
    /// - Returns: An enumeration value that identifies the color cartridge that the slip printer station should use when it prints.
    public func colorCartridge(_ value: WindowsDevicesPointOfService_PosPrinterColorCartridge) throws {
        try _icommonClaimedPosPrinterStation.put_ColorCartridge(value)
    }

    /// Gets whether the cartridge of the slip printer station is currently out of ink or toner.
    /// - Returns: True if the cartridge of the slip printer station is currently out of ink or toner; otherwise, false.
    public var isCartridgeEmpty: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCartridgeEmpty()
        }
    }

    /// Gets whether the cartridge of the slip printer station is currently removed.
    /// - Returns: True if the cartridge of the slip printer station is currently removed; otherwise, false.
    public var isCartridgeRemoved: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCartridgeRemoved()
        }
    }

    /// Gets whether the cover of the slip printer station is currently open.
    /// - Returns: True if the cover of the slip printer station is currently open; otherwise, false.
    public var isCoverOpen: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsCoverOpen()
        }
    }

    /// Gets whether the slip printer station is currently cleaning its print head.
    /// - Returns: True if the slip printer station is currently cleaning its print head; otherwise, false.
    public var isHeadCleaning: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsHeadCleaning()
        }
    }

    /// Gets or sets whether the slip printer station prints with high quality or high speed.
    /// - Returns: True if the slip printer station prints with high quality. False if the slip printer station with high speed.
    public var isLetterQuality: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsLetterQuality()
        }
    }

    /// Gets or sets whether the slip printer station prints with high quality or high speed.
    /// - Returns: True if the slip printer station prints with high quality. False if the slip printer station with high speed.
    public func isLetterQuality(_ value: Swift.Bool) throws {
        try _icommonClaimedPosPrinterStation.put_IsLetterQuality(value)
    }

    /// Gets whether the slip printer station needs paper.
    /// - Returns: True if the slip printer station needs paper; otherwise, false.
    public var isPaperEmpty: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsPaperEmpty()
        }
    }

    /// Gets whether the slip printer station is almost out of paper.
    /// - Returns: True if the slip printer station is almost out of paper; otherwise, false.
    public var isPaperNearEnd: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsPaperNearEnd()
        }
    }

    /// Gets whether the slip printer station is on and accepting print jobs.
    /// - Returns: True if the slip printer station is on and accepting print jobs; otherwise, false.
    public var isReadyToPrint: Swift.Bool {
        get throws {
            try _icommonClaimedPosPrinterStation.get_IsReadyToPrint()
        }
    }

    /// Gets or sets the current height of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current height of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineHeight: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineHeight()
        }
    }

    /// Gets or sets the current height of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current height of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public func lineHeight(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_LineHeight(value)
    }

    /// Gets or sets the spacing of each single-high print line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies. This spacing includes both the height of printed line and of the white space between each pair of lines.
    /// - Returns: The spacing of each single-high print line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineSpacing: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineSpacing()
        }
    }

    /// Gets or sets the spacing of each single-high print line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies. This spacing includes both the height of printed line and of the white space between each pair of lines.
    /// - Returns: The spacing of each single-high print line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public func lineSpacing(_ value: Swift.UInt32) throws {
        try _icommonClaimedPosPrinterStation.put_LineSpacing(value)
    }

    /// Gets the current width of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    /// - Returns: The current width of the printed line for the slip printer station, in the units that the ClaimedPosPrinter.MapMode property specifies.
    public var lineWidth: Swift.UInt32 {
        get throws {
            try _icommonClaimedPosPrinterStation.get_LineWidth()
        }
    }

    /// Determines whether a data sequence, possibly including one or more escape sequences, is valid for the slip printer station, before you use that data sequence when you call the SlipPrintJob.Print and SlipPrintJob.ExecuteAsync methods.
    /// - Parameter data: The data sequence that you want to validate before you use it with the SlipPrintJob.Print method. This sequence may include printable data and escape sequences.
    /// - Returns: True if the data passes validation; otherwise false.
    public func validateData(_ data: Swift.String) throws -> Swift.Bool {
        try _icommonClaimedPosPrinterStation.validateData(data)
    }

    // MARK: Implementation details

    private var _icommonClaimedPosPrinterStation_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation>? = nil

    internal var _icommonClaimedPosPrinterStation: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation> {
        get throws {
            try _icommonClaimedPosPrinterStation_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ICommonClaimedPosPrinterStation.self)
            }
        }
    }

    deinit {
        _icommonClaimedPosPrinterStation_storage?.release()
    }
}