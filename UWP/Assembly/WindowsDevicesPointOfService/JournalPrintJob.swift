// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a set of printing instructions that you want to run on the journal printer station.
public final class WindowsDevicesPointOfService_JournalPrintJob: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_JournalPrintJobProjection>, WindowsDevicesPointOfService_IPosPrinterJobProtocol {
    // MARK: Windows.Devices.PointOfService.IPosPrinterJob members

    /// Adds an instruction to the print job to print the specified text on the journal printer station.
    /// - Parameter data: The text to print on the journal printer.
    public func print(_ data: Swift.String) throws {
        try _interop.print(data)
    }

    /// Adds an instruction to the print job to print the specified line of text on the journal printer station.
    /// - Parameter data: The line of text to print.
    public func printLine(_ data: Swift.String) throws {
        try _interop.printLine(data)
    }

    /// Adds an instruction to the print job to print a newline character on the journal printer station.
    public func printLine() throws {
        try _interop.printNewline()
    }

    /// Runs the print job on the journal printer station asynchronously.
    /// - Returns: The operation to run the print job. This operation returns true if the print job succeeds; otherwise, the operation returns false.
    public func executeAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.executeAsync())
    }

    // MARK: Windows.Devices.PointOfService.IJournalPrintJob members

    /// Adds an instruction to the print job to print the specified text and options on the journal printer station.
    /// - Parameter data: The text to print on the journal printer.
    /// - Parameter printOptions: The print options of the text to print on the journal printer.
    public func print(_ data: Swift.String, _ printOptions: WindowsDevicesPointOfService_PosPrinterPrintOptions?) throws {
        try _ijournalPrintJob.print(data, printOptions)
    }

    /// Adds an instruction to the print job to feed paper by line on the journal printer station.
    /// - Parameter lineCount: The number of lines to feed on the journal printer. Use a positive number to feed paper forward or a negative number to feed paper backward.
    public func feedPaperByLine(_ lineCount: Swift.Int32) throws {
        try _ijournalPrintJob.feedPaperByLine(lineCount)
    }

    /// Adds an instruction to the print job to feed paper by map mode unit on the journal printer station.
    /// - Parameter distance: The number of map mode units to feed on the journal printer. Use a positive number to feed paper forward or a negative number to feed paper backward.
    public func feedPaperByMapModeUnit(_ distance: Swift.Int32) throws {
        try _ijournalPrintJob.feedPaperByMapModeUnit(distance)
    }

    // MARK: Implementation details

    private var _ijournalPrintJob_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IJournalPrintJob>? = nil

    internal var _ijournalPrintJob: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IJournalPrintJob> {
        get throws {
            try _ijournalPrintJob_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IJournalPrintJob.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IJournalPrintJob.self)
            }
        }
    }

    deinit {
        _ijournalPrintJob_storage?.release()
    }
}