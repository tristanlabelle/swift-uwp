// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a line display window.
public final class WindowsDevicesPointOfService_LineDisplayWindow: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_LineDisplayWindowProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.ILineDisplayWindow members

    /// Gets or sets the delay interval between displaying successive characters.
    /// - Returns: The delay interval between displaying successive characters. The default value of this property is 0.
    public var interCharacterWaitInterval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_InterCharacterWaitInterval()
        }
    }

    /// Gets or sets the delay interval between displaying successive characters.
    /// - Returns: The delay interval between displaying successive characters. The default value of this property is 0.
    public func interCharacterWaitInterval(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_InterCharacterWaitInterval(value)
    }

    /// Gets dimensions of the window, in number of character lines (rows and columns).
    /// - Returns: The number of character lines (rows and columns).
    public var sizeInCharacters: WindowsFoundation_Size {
        get throws {
            try _interop.get_SizeInCharacters()
        }
    }

    /// Refresh the line display window.
    /// - Returns: True if the window was successfully refreshed; otherwise, false.
    public func tryRefreshAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryRefreshAsync())
    }

    /// Try to display the specified text in the line display window, using the specified display attribute.
    /// - Parameter text: The text to be displayed.
    /// - Parameter displayAttribute: The display attribute to be applied to the window.
    /// - Returns: True if the text was displayed successfully; otherwise, false.
    public func tryDisplayTextAsync(_ text: Swift.String, _ displayAttribute: WindowsDevicesPointOfService_LineDisplayTextAttribute) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryDisplayTextAsync(text, displayAttribute))
    }

    /// Try to display the specified text at a specified position in the line display window, using the specified display attribute.
    /// - Parameter text: The text to be displayed.
    /// - Parameter displayAttribute: The display attribute to be applied to the window.
    /// - Parameter startPosition: The row and column at which to start displaying the text.
    /// - Returns: True if the text was displayed successfully; otherwise, false.
    public func tryDisplayTextAsync(_ text: Swift.String, _ displayAttribute: WindowsDevicesPointOfService_LineDisplayTextAttribute, _ startPosition: WindowsFoundation_Point) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryDisplayTextAtPositionAsync(text, displayAttribute, startPosition))
    }

    /// Try to display the specified text in the line display window.
    /// - Parameter text: The text to be displayed.
    /// - Returns: True if the text was displayed successfully; otherwise, false.
    public func tryDisplayTextAsync(_ text: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryDisplayTextNormalAsync(text))
    }

    /// Scroll the window text contents the specified number of lines in the specified direction.
    /// - Parameter direction: The direction in which to scroll text.
    /// - Parameter numberOfColumnsOrRows: The number of columns or rows to scroll. Columns are used if the scroll direction is left or right; rows are used if the scroll direction is up or down.
    public func tryScrollTextAsync(_ direction: WindowsDevicesPointOfService_LineDisplayScrollDirection, _ numberOfColumnsOrRows: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryScrollTextAsync(direction, numberOfColumnsOrRows))
    }

    /// Clears the current window. Changers all characters to blanks, clears any bitmaps displayed in the window, and sets **Cursor.Position** to {0,0}.
    /// - Returns: True if the window was successfully cleared; otherwise, false.
    public func tryClearTextAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.tryClearTextAsync())
    }

    // MARK: Windows.Devices.PointOfService.ILineDisplayWindow2 members

    /// Gets the cursor of the line display window.
    /// - Returns: The cursor of the line display window.
    public var cursor: WindowsDevicesPointOfService_LineDisplayCursor {
        get throws {
            try COM.NullResult.unwrap(_ilineDisplayWindow2.get_Cursor())
        }
    }

    /// Gets the line display marquee.
    /// - Returns: The line display marquee.
    public var marquee: WindowsDevicesPointOfService_LineDisplayMarquee {
        get throws {
            try COM.NullResult.unwrap(_ilineDisplayWindow2.get_Marquee())
        }
    }

    /// Attempts to asynchronously read the currently displayed character at the current cursor position.
    /// - Returns: Returns the code for the character at the current cursor position. Returns 0 if the method fails.
    public func readCharacterAtCursorAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.readCharacterAtCursorAsync())
    }

    /// Attempts to asynchronously display a stored bitmap from at LineDisplayStoredBitmap object at the current cursor position.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Returns: Returns True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStoredBitmapAtCursorAsync(_ bitmap: WindowsDevicesPointOfService_LineDisplayStoredBitmap?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStoredBitmapAtCursorAsync(bitmap))
    }

    /// Attempts to asynchronously display a bitmap from a storage file at the current cursor position.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Returns: Return True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStorageFileBitmapAtCursorAsync(_ bitmap: WindowsStorage_StorageFile?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStorageFileBitmapAtCursorAsync(bitmap))
    }

    /// Attempts to asynchronously display a bitmap from a storage file at the current cursor position.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Parameter horizontalAlignment: The horizontal alignment of the bitmap relative to the current text character position.
    /// - Parameter verticalAlignment: The vertical alignment of the bitmap relative to the current text character position.
    /// - Returns: Return True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStorageFileBitmapAtCursorAsync(_ bitmap: WindowsStorage_StorageFile?, _ horizontalAlignment: WindowsDevicesPointOfService_LineDisplayHorizontalAlignment, _ verticalAlignment: WindowsDevicesPointOfService_LineDisplayVerticalAlignment) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStorageFileBitmapAtCursorWithAlignmentAsync(bitmap, horizontalAlignment, verticalAlignment))
    }

    /// Attempts to asynchronously display a bitmap from a storage file at the current cursor position, at a particular width.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Parameter horizontalAlignment: The horizontal alignment of the bitmap relative to the current text character position.
    /// - Parameter verticalAlignment: The vertical alignment of the bitmap relative to the current text character position.
    /// - Parameter widthInPixels: The desired width of the bitmap. A value of 0 pixels will display the bitmap at one pixel per screen dot (unscaled).
    /// - Returns: Return True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStorageFileBitmapAtCursorAsync(_ bitmap: WindowsStorage_StorageFile?, _ horizontalAlignment: WindowsDevicesPointOfService_LineDisplayHorizontalAlignment, _ verticalAlignment: WindowsDevicesPointOfService_LineDisplayVerticalAlignment, _ widthInPixels: Swift.Int32) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStorageFileBitmapAtCursorWithAlignmentAndWidthAsync(bitmap, horizontalAlignment, verticalAlignment, widthInPixels))
    }

    /// Attempts to asynchronously display a bitmap from a storage file at a particular point.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Parameter offsetInPixels: The number of pixels to offset the bitmap display from the top-left corner of the screen, {0,0}.
    /// - Returns: Return True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStorageFileBitmapAtPointAsync(_ bitmap: WindowsStorage_StorageFile?, _ offsetInPixels: WindowsFoundation_Point) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStorageFileBitmapAtPointAsync(bitmap, offsetInPixels))
    }

    /// Attempts to asynchronously display a bitmap from a storage file at a particular point, scaled to a particular width.
    /// - Parameter bitmap: The bitmap to be displayed.
    /// - Parameter offsetInPixels: The number of pixels to offset the bitmap display from the top-left corner of the screen, {0,0}.
    /// - Parameter widthInPixels: The desired width of the bitmap. A value of 0 pixels will display the bitmap at one pixel per screen dot (unscaled).
    /// - Returns: Return True if the bitmap was successfully displayed; otherwise, False.
    public func tryDisplayStorageFileBitmapAtPointAsync(_ bitmap: WindowsStorage_StorageFile?, _ offsetInPixels: WindowsFoundation_Point, _ widthInPixels: Swift.Int32) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilineDisplayWindow2.tryDisplayStorageFileBitmapAtPointWithWidthAsync(bitmap, offsetInPixels, widthInPixels))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the line display window resource, destroying the window on the device.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _ilineDisplayWindow2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayWindow2>? = nil

    internal var _ilineDisplayWindow2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayWindow2> {
        get throws {
            try _ilineDisplayWindow2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayWindow2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayWindow2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ilineDisplayWindow2_storage?.release()
        _iclosable_storage?.release()
    }
}