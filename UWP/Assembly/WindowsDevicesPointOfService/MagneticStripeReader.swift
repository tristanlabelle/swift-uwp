// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the magnetic stripe reader device.
public final class WindowsDevicesPointOfService_MagneticStripeReader: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_MagneticStripeReaderProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IMagneticStripeReader members

    /// Gets the capabilities of the magnetic stripe reader.
    /// - Returns: The capabilities of the magnetic stripe reader.
    public var capabilities: WindowsDevicesPointOfService_MagneticStripeReaderCapabilities {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Capabilities())
        }
    }

    /// Device authentication protocol supported by the magnetic stripe reader.
    /// - Returns: The supported authentication protocol.
    public var deviceAuthenticationProtocol: WindowsDevicesPointOfService_MagneticStripeReaderAuthenticationProtocol {
        get throws {
            try _interop.get_DeviceAuthenticationProtocol()
        }
    }

    /// Gets the DeviceInformation.Id of the magnetic stripe reader.
    /// - Returns: The DeviceInformation.Id of the magnetic stripe reader.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the card types supported by the magnetic stripe reader.
    /// - Returns: The card type identifier.
    public var supportedCardTypes: [Swift.UInt32] {
        get throws {
            try _interop.get_SupportedCardTypes()
        }
    }

    /// Occurs when the device detects an operation status change.
    public func statusUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_MagneticStripeReader?, WindowsDevicesPointOfService_MagneticStripeReaderStatusUpdatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusUpdated)
    }

    public func statusUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusUpdated(token)
    }

    /// Tests the health of the magnetic stripe reader.
    /// - Parameter level: The specific health check level.
    /// - Returns: A text description of the text result. Returns an error if the specified check level is not supported by the device.
    public func checkHealthAsync(_ level: WindowsDevicesPointOfService_UnifiedPosHealthCheckLevel) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.checkHealthAsync(level))
    }

    /// Attempts to get an exclusive access to the magnetic stripe reader.
    /// - Returns: When the method completes, it returns a ClaimedMagneticStripeReader or it returns null if the operation fails to claim a magnetic stripe reader.
    public func claimReaderAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_ClaimedMagneticStripeReader?> {
        try COM.NullResult.unwrap(_interop.claimReaderAsync())
    }

    public func retrieveStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.retrieveStatisticsAsync(statisticsCategories))
    }

    /// Gets the error reporting type the application wants to receive.
    /// - Returns: The error reporting type.
    public func getErrorReportingType() throws -> WindowsDevicesPointOfService_MagneticStripeReaderErrorReportingType {
        try _interop.getErrorReportingType()
    }

    // MARK: Windows.Foundation.IClosable members

    /// Close the magnetic stripe reader session. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.PointOfService.IMagneticStripeReaderStatics members

    /// Returns the first magnetic stripe reader found.
    /// - Returns: The first magnetic stripe reader found. Returns a null object in the following cases:
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_MagneticStripeReader?> {
        try COM.NullResult.unwrap(_imagneticStripeReaderStatics.getDefaultAsync())
    }

    /// Creates a MagneticStripeReader object from DeviceInformation.Id.
    /// - Parameter deviceId: The DeviceInformation.Id that identifies a specific magnetic stripe reader, which can be retrieved from the DeviceId property.
    /// - Returns: The magnetic stripe reader specified by the unique device identifier. Returns a null object in the following cases:
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_MagneticStripeReader?> {
        try COM.NullResult.unwrap(_imagneticStripeReaderStatics.fromIdAsync(deviceId))
    }

    /// Returns an Advanced Query Syntax (AQS) string that is used to enumerate available magnetic stripe readers.
    /// - Returns: An Advanced Query Syntax (AQS) string that is used to enumerate available magnetic stripe readers.
    public static func getDeviceSelector() throws -> Swift.String {
        try _imagneticStripeReaderStatics.getDeviceSelector()
    }

    // MARK: Windows.Devices.PointOfService.IMagneticStripeReaderStatics2 members

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the magnetic stripe readers available over the specified connection types
    /// - Parameter connectionTypes: A list of the connection types to check for available magnetic stripe readers.
    /// - Returns: An Advanced Query Syntax (AQS) string that is used to enumerate the magnetic stripe readers available over the specified connection types
    public static func getDeviceSelector(_ connectionTypes: WindowsDevicesPointOfService_PosConnectionTypes) throws -> Swift.String {
        try _imagneticStripeReaderStatics2.getDeviceSelectorWithConnectionTypes(connectionTypes)
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }

    private static var _imagneticStripeReaderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics>? = nil

    internal static var _imagneticStripeReaderStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics> {
        get throws {
            try _imagneticStripeReaderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.MagneticStripeReader", id: CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics.iid)
            }
        }
    }

    private static var _imagneticStripeReaderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics2>? = nil

    internal static var _imagneticStripeReaderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics2> {
        get throws {
            try _imagneticStripeReaderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.MagneticStripeReader", id: CWinRT.SWRT_WindowsDevicesPointOfService_IMagneticStripeReaderStatics2.iid)
            }
        }
    }
}