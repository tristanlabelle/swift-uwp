// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a claimed line display device.
public final class WindowsDevicesPointOfService_ClaimedLineDisplay: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedLineDisplayProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedLineDisplay members

    /// Gets the capabilities of the claimed line display.
    /// - Returns: The capabilities of the line display.
    public var capabilities: WindowsDevicesPointOfService_LineDisplayCapabilities {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Capabilities())
        }
    }

    /// Gets the default device window of the line display.
    /// - Returns: The default device window, covering the entire screen area.
    public var defaultWindow: WindowsDevicesPointOfService_LineDisplayWindow {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DefaultWindow())
        }
    }

    /// Gets the device control description of the line display.
    /// - Returns: The control description of the line display.
    public var deviceControlDescription: Swift.String {
        get throws {
            try _interop.get_DeviceControlDescription()
        }
    }

    /// Gets the device control version number of the line display.
    /// - Returns: The UnifiedPOS control version number of the line display.
    public var deviceControlVersion: Swift.String {
        get throws {
            try _interop.get_DeviceControlVersion()
        }
    }

    /// Gets the DeviceInformation.Id of the line display.
    /// - Returns: The DeviceInformation.Id of the line display.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the service version number of the line display.
    /// - Returns: The service version number.
    public var deviceServiceVersion: Swift.String {
        get throws {
            try _interop.get_DeviceServiceVersion()
        }
    }

    /// Gets the physical device description.
    /// - Returns: The physical device description given by the UnifiedPOS specification.
    public var physicalDeviceDescription: Swift.String {
        get throws {
            try _interop.get_PhysicalDeviceDescription()
        }
    }

    /// Gets the physical device name.
    /// - Returns: The physical device name given by the UnifiedPOS specification.
    public var physicalDeviceName: Swift.String {
        get throws {
            try _interop.get_PhysicalDeviceName()
        }
    }

    /// Occurs when a claimed line display claimed is claimed by another app with LineDisplay.ClaimAsync.
    public func releaseDeviceRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedLineDisplay?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReleaseDeviceRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: releaseDeviceRequested)
    }

    public func releaseDeviceRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReleaseDeviceRequested(token)
    }

    /// Retains an app's claim on a line display device after it has been claimed by another app with LineDisplay.ClaimAsync.
    public func retainDevice() throws {
        try _interop.retainDevice()
    }

    // MARK: Windows.Devices.PointOfService.IClaimedLineDisplay2 members

    /// Gets the line display's custom glyph list, if the feature is supported.
    /// - Returns: The line display's LineDisplayCustomGlyphs object.
    public var customGlyphs: WindowsDevicesPointOfService_LineDisplayCustomGlyphs {
        get throws {
            try COM.NullResult.unwrap(_iclaimedLineDisplay2.get_CustomGlyphs())
        }
    }

    /// Gets the maximum bitmap size.
    /// - Returns: The maximum bitmap size in pixels.
    public var maxBitmapSizeInPixels: WindowsFoundation_Size {
        get throws {
            try _iclaimedLineDisplay2.get_MaxBitmapSizeInPixels()
        }
    }

    /// Gets the character sets supported by the line display.
    /// - Returns: The character set numbers supported.
    public var supportedCharacterSets: WindowsFoundationCollections_IVectorView<Swift.Int32> {
        get throws {
            try COM.NullResult.unwrap(_iclaimedLineDisplay2.get_SupportedCharacterSets())
        }
    }

    /// Gets the screen sizes supported by the line display.
    /// - Returns: A list containting the sizes that the device supports. Each size is represented as a pair of rows and columns.
    public var supportedScreenSizesInCharacters: WindowsFoundationCollections_IVectorView<WindowsFoundation_Size> {
        get throws {
            try COM.NullResult.unwrap(_iclaimedLineDisplay2.get_SupportedScreenSizesInCharacters())
        }
    }

    /// Notifies the application that there is a change in the power status of the line display.
    public func statusUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedLineDisplay?, WindowsDevicesPointOfService_LineDisplayStatusUpdatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclaimedLineDisplay2.add_StatusUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusUpdated)
    }

    public func statusUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclaimedLineDisplay2.remove_StatusUpdated(token)
    }

    public func getStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.getStatisticsAsync(statisticsCategories))
    }

    /// Gets the device's health state asynchronously.
    /// - Parameter level: The specified health check level.
    /// - Returns: This value is intended to be reflected in the app interface immediately so the user of the app can interpret it. For example, it will return “OK” as the health string if the device state is good.
    public func checkHealthAsync(_ level: WindowsDevicesPointOfService_UnifiedPosHealthCheckLevel) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.checkHealthAsync(level))
    }

    /// Gets the current power status of the device.
    /// - Returns: The current power status of the device.
    public func checkPowerStatusAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayPowerStatus> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.checkPowerStatusAsync())
    }

    /// Gets the attributes of the line display.
    /// - Returns: The attributes of the line display.
    public func getAttributes() throws -> WindowsDevicesPointOfService_LineDisplayAttributes {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.getAttributes())
    }

    /// Updates the device attributes.
    /// - Parameter attributes: The updated attributes to be applied to the device.
    /// - Returns: Returns True if the attributes were successfully updated; otherwise, False.
    public func tryUpdateAttributesAsync(_ attributes: WindowsDevicesPointOfService_LineDisplayAttributes?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryUpdateAttributesAsync(attributes))
    }

    /// Attempts to asynchronously set a descriptor using the specified attribute.
    /// - Parameter descriptor: The descriptor to be set. Must have a value between 0 and LineDisplayCapabilities.SupportedDescriptors - 1.
    /// - Parameter descriptorState: The state to give to the descriptor.
    /// - Returns: Returns True if the descriptor was set successfully; otherwise, False.
    public func trySetDescriptorAsync(_ descriptor: Swift.UInt32, _ descriptorState: WindowsDevicesPointOfService_LineDisplayDescriptorState) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.trySetDescriptorAsync(descriptor, descriptorState))
    }

    /// Attempts to asynchronously clear all descriptions.
    /// - Returns: Returns True if all descriptors are successfully cleared; otherwise, False.
    public func tryClearDescriptorsAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryClearDescriptorsAsync())
    }

    /// Attempts to asynchronously create a LineDisplayWindow.
    /// - Parameter viewport: The viewport’s origin device row, origin device column, width in rows and height in columns.
    /// - Parameter windowSize: The numbers of rows and the number of columns in the window.
    /// - Returns: A new LineDisplayWindow object, representing a new window for the device.
    public func tryCreateWindowAsync(_ viewport: WindowsFoundation_Rect, _ windowSize: WindowsFoundation_Size) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayWindow?> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryCreateWindowAsync(viewport, windowSize))
    }

    /// Attempts to asynchronously store a bitmap image from a StorageFile for later display on the line display device.
    /// - Parameter bitmap: A StorageFile that represents a local bitmap file. All line displays support black and white uncompressed Windows bitmaps. Check device specifications for other supported formats.
    /// - Returns: True if the bitmap is stored successfully, False if a failure occurs.
    public func tryStoreStorageFileBitmapAsync(_ bitmap: WindowsStorage_StorageFile?) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayStoredBitmap?> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryStoreStorageFileBitmapAsync(bitmap))
    }

    /// Attempts to asynchronously store a bitmap image from a StorageFile for later display on the line display device.
    /// - Parameter bitmap: A StorageFile that represents a local bitmap file. All line displays support black and white uncompressed Windows bitmaps. Check device specifications for other supported formats.
    /// - Parameter horizontalAlignment: Determines how the bitmap will be horizontally aligned relative to its originating character cell.
    /// - Parameter verticalAlignment: Determines how the bitmap will be vertically aligned relative to its originating character cell.
    /// - Returns: True if the bitmap is stored successfully, False if a failure occurs.
    public func tryStoreStorageFileBitmapAsync(_ bitmap: WindowsStorage_StorageFile?, _ horizontalAlignment: WindowsDevicesPointOfService_LineDisplayHorizontalAlignment, _ verticalAlignment: WindowsDevicesPointOfService_LineDisplayVerticalAlignment) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayStoredBitmap?> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryStoreStorageFileBitmapWithAlignmentAsync(bitmap, horizontalAlignment, verticalAlignment))
    }

    /// Attempts to asynchronously store a bitmap image from a StorageFile for later display on the line display device.
    /// - Parameter bitmap: A StorageFile that represents a local bitmap file. All line displays support black and white uncompressed Windows bitmaps. Check device specifications for other supported formats.
    /// - Parameter horizontalAlignment: Determines how the bitmap will be horizontally aligned relative to its originating character cell.
    /// - Parameter verticalAlignment: Determines how the bitmap will be vertically aligned relative to its originating character cell.
    /// - Parameter widthInPixels: The displayed bitmap width in pixels, if different from the original bitmap width. Height will be calculated proportionally.
    /// - Returns: True if the bitmap is stored successfully, False if a failure occurs.
    public func tryStoreStorageFileBitmapAsync(_ bitmap: WindowsStorage_StorageFile?, _ horizontalAlignment: WindowsDevicesPointOfService_LineDisplayHorizontalAlignment, _ verticalAlignment: WindowsDevicesPointOfService_LineDisplayVerticalAlignment, _ widthInPixels: Swift.Int32) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayStoredBitmap?> {
        try COM.NullResult.unwrap(_iclaimedLineDisplay2.tryStoreStorageFileBitmapWithAlignmentAndWidthAsync(bitmap, horizontalAlignment, verticalAlignment, widthInPixels))
    }

    // MARK: Windows.Devices.PointOfService.IClaimedLineDisplay3 members

    /// Event that is raised when the **ClaimedLineDisplay** is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedLineDisplay?, WindowsDevicesPointOfService_ClaimedLineDisplayClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclaimedLineDisplay3.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclaimedLineDisplay3.remove_Closed(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Close the line display session. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.PointOfService.IClaimedLineDisplayStatics members

    /// Creates a LineDisplay object from the DeviceInformation.Id.
    /// - Parameter deviceId: The DeviceInformation.Id that identifies a specific line display, which can be retrieved from the DeviceId property.
    /// - Returns: The line display specified by the unique device identifier. Returns a null object in the following cases:
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_ClaimedLineDisplay?> {
        try COM.NullResult.unwrap(_iclaimedLineDisplayStatics.fromIdAsync(deviceId))
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the available line displays.
    /// - Returns: An Advanced Query Syntax string that is used to enumerate available line displays.
    public static func getDeviceSelector() throws -> Swift.String {
        try _iclaimedLineDisplayStatics.getDeviceSelector()
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the line displays available over the specified connection types
    /// - Parameter connectionTypes: A list of the connection types to check for available line displays.
    /// - Returns: An AQS string that is used to enumerate available line displays available over the specified connection types
    public static func getDeviceSelector(_ connectionTypes: WindowsDevicesPointOfService_PosConnectionTypes) throws -> Swift.String {
        try _iclaimedLineDisplayStatics.getDeviceSelectorWithConnectionTypes(connectionTypes)
    }

    // MARK: Implementation details

    private var _iclaimedLineDisplay2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay2>? = nil

    internal var _iclaimedLineDisplay2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay2> {
        get throws {
            try _iclaimedLineDisplay2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay2.self)
            }
        }
    }

    private var _iclaimedLineDisplay3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay3>? = nil

    internal var _iclaimedLineDisplay3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay3> {
        get throws {
            try _iclaimedLineDisplay3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay3.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplay3.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclaimedLineDisplay2_storage?.release()
        _iclaimedLineDisplay3_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _iclaimedLineDisplayStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplayStatics>? = nil

    internal static var _iclaimedLineDisplayStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplayStatics> {
        get throws {
            try _iclaimedLineDisplayStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.ClaimedLineDisplay", id: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedLineDisplayStatics.iid)
            }
        }
    }
}