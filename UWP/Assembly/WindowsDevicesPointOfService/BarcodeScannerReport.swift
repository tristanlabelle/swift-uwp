// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains the barcode scanner data.
public final class WindowsDevicesPointOfService_BarcodeScannerReport: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_BarcodeScannerReportProjection> {
    // MARK: Windows.Devices.PointOfService.IBarcodeScannerReportFactory members

    public convenience init(_ scanDataType: Swift.UInt32, _ scanData: WindowsStorageStreams_IBuffer?, _ scanDataLabel: WindowsStorageStreams_IBuffer?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ibarcodeScannerReportFactory.createInstance(scanDataType, scanData, scanDataLabel)))
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScannerReport members

    /// Gets the full raw data from the DataReceived event.
    /// - Returns: The raw data stream from the scanning event.
    public var scanData: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ScanData())
        }
    }

    /// Gets the decoded barcode label, which does not include the header, checksum, and other miscellaneous information.
    /// - Returns: The data stream containing the decoded barcode label.
    public var scanDataLabel: WindowsStorageStreams_IBuffer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ScanDataLabel())
        }
    }

    /// Gets the decoded barcode label type. Possible values are defined in the BarcodeSymbologies class.
    /// - Returns: The specific barcode symbology.
    public var scanDataType: Swift.UInt32 {
        get throws {
            try _interop.get_ScanDataType()
        }
    }

    // MARK: Implementation details

    private static var _ibarcodeScannerReportFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerReportFactory>? = nil

    internal static var _ibarcodeScannerReportFactory: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerReportFactory> {
        get throws {
            try _ibarcodeScannerReportFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.BarcodeScannerReport", id: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerReportFactory.iid)
            }
        }
    }
}