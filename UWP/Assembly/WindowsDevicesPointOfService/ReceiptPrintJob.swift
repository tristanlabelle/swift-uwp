// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a set of printing instructions that you want to run on the receipt printer.
public final class WindowsDevicesPointOfService_ReceiptPrintJob: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ReceiptPrintJobProjection>, WindowsDevicesPointOfService_IReceiptOrSlipJobProtocol, WindowsDevicesPointOfService_IPosPrinterJobProtocol {
    // MARK: Windows.Devices.PointOfService.IReceiptPrintJob members

    /// Adds an instruction to the printer job to use the mark sensor of the receipt printer station to position the receipt paper.
    /// - Parameter kind: An enumeration value that specifies how to position the receipt paper.
    public func markFeed(_ kind: WindowsDevicesPointOfService_PosPrinterMarkFeedKind) throws {
        try _interop.markFeed(kind)
    }

    /// Adds an instruction to the printer job to cut the specified percentage of the receipt paper.
    /// - Parameter percentage: Decimal representation of the percentage of the receipt that the receipt printer should cut.
    public func cutPaper(_ percentage: Swift.Double) throws {
        try _interop.cutPaper(percentage)
    }

    /// Adds an instruction to the printer job to cut the receipt paper completely.
    public func cutPaper() throws {
        try _interop.cutPaperDefault()
    }

    // MARK: Windows.Devices.PointOfService.IReceiptPrintJob2 members

    /// Adds an instruction to the print job to stamp on the receipt printer station.
    public func stampPaper() throws {
        try _ireceiptPrintJob2.stampPaper()
    }

    /// Adds an instruction to the print job to print the specified text and options on the receipt printer station.
    /// - Parameter data: The text to print on the receipt printer.
    /// - Parameter printOptions: The print options of the text to print on the receipt printer.
    public func print(_ data: Swift.String, _ printOptions: WindowsDevicesPointOfService_PosPrinterPrintOptions?) throws {
        try _ireceiptPrintJob2.print(data, printOptions)
    }

    /// Adds an instruction to the print job to feed paper by line on the receipt printer station.
    /// - Parameter lineCount: The number of lines to feed on the receipt printer. Use a positive number to feed paper forward or a negative number to feed paper backward.
    public func feedPaperByLine(_ lineCount: Swift.Int32) throws {
        try _ireceiptPrintJob2.feedPaperByLine(lineCount)
    }

    /// Adds an instruction to the print job to feed paper by map mode unit on the receipt printer station.
    /// - Parameter distance: The number of map mode units to feed on the receipt printer. Use a positive number to feed paper forward or a negative number to feed paper backward.
    public func feedPaperByMapModeUnit(_ distance: Swift.Int32) throws {
        try _ireceiptPrintJob2.feedPaperByMapModeUnit(distance)
    }

    // MARK: Windows.Devices.PointOfService.IReceiptOrSlipJob members

    /// Sets the rotation of the barcode on the page on the receipt printer station.
    /// - Parameter value: The rotation of the barcode on the page.
    public func setBarcodeRotation(_ value: WindowsDevicesPointOfService_PosPrinterRotation) throws {
        try _ireceiptOrSlipJob.setBarcodeRotation(value)
    }

    /// Sets the rotation of the text or image on the page for the receipt printer station.
    /// - Parameter value: The rotation of the text or image on the page for the receipt printer station.
    /// - Parameter includeBitmaps: Whether bitmaps should also be rotated. This setting takes effect only for subsequent calls to PrintBitmap, and may not apply to saved bitmaps that you print using PrintSavedBitmap.
    public func setPrintRotation(_ value: WindowsDevicesPointOfService_PosPrinterRotation, _ includeBitmaps: Swift.Bool) throws {
        try _ireceiptOrSlipJob.setPrintRotation(value, includeBitmaps)
    }

    /// Sets the area of the page on which the receipt printer station can print the job.
    /// - Parameter value: The area of the page on which the receipt printer can print the job.
    public func setPrintArea(_ value: WindowsFoundation_Rect) throws {
        try _ireceiptOrSlipJob.setPrintArea(value)
    }

    /// Saves information about a bitmap and a standard horizontal placement that you want to use to print that bitmap on the receipt printer station, so that you can use the PrintSavedBitmap method to add that information to the print job later.
    /// - Parameter bitmapNumber: The number that you want to assign to this bitmap. You can set two bitmaps, numbered 1 and 2. Use this number with the PrintSavedBitmap method later to add the print instructions to the print job.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignment: An enumeration value that specifies a standard horizontal placement on the page for the bitmap, such as left-aligned, centered, or right-aligned.
    public func setBitmap(_ bitmapNumber: Swift.UInt32, _ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignment: WindowsDevicesPointOfService_PosPrinterAlignment) throws {
        try _ireceiptOrSlipJob.setBitmap(bitmapNumber, bitmap, alignment)
    }

    /// Saves information about a bitmap, along with the width and a standard horizontal placement that you want to use to print that bitmap on the receipt printer station, so that you can use the PrintSavedBitmap method to add that information to the print job later.
    /// - Parameter bitmapNumber: The number that you want to assign to this bitmap. You can set two bitmaps, numbered 1 and 2. Use this number with the PrintSavedBitmap method later to add the print instructions to the print job.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignment: An enumeration value that specifies a standard horizontal placement on the page for the bitmap, such as left-aligned, centered, or right-aligned.
    /// - Parameter width: The width to use for printing the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func setBitmap(_ bitmapNumber: Swift.UInt32, _ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignment: WindowsDevicesPointOfService_PosPrinterAlignment, _ width: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.setBitmapCustomWidthStandardAlign(bitmapNumber, bitmap, alignment, width)
    }

    /// Saves information about a bitmap and the distance from the leftmost print column at which you want to print that bitmap on the receipt printer station, so that you can use the PrintSavedBitmap method to add that information to the print job later.
    /// - Parameter bitmapNumber: The number that you want to assign to this bitmap. You can set two bitmaps, numbered 1 and 2. Use this number with the PrintSavedBitmap method later to add the print instructions to the print job.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignmentDistance: The distance from the leftmost print column to the start of the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func setCustomAlignedBitmap(_ bitmapNumber: Swift.UInt32, _ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignmentDistance: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.setCustomAlignedBitmap(bitmapNumber, bitmap, alignmentDistance)
    }

    /// Saves information about a bitmap, along with the width and the distance from the leftmost print column that you want to use to print that bitmap on the receipt printer station, so that you can use the PrintSavedBitmap method to add that information to the print job later.
    /// - Parameter bitmapNumber: The number that you want to assign to this bitmap. You can set two bitmaps, numbered 1 and 2. Use this number with the PrintSavedBitmap method later to add the print instructions to the print job.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignmentDistance: The distance from the leftmost print column to the start of the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    /// - Parameter width: The width to use for printing the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func setCustomAlignedBitmap(_ bitmapNumber: Swift.UInt32, _ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignmentDistance: Swift.UInt32, _ width: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.setBitmapCustomWidthCustomAlign(bitmapNumber, bitmap, alignmentDistance, width)
    }

    /// Adds an instruction to the print job to print a bitmap on the receipt printer station by using the bitmap and information saved to the printer via SetBitmap or SetCustomAlignedBitmap.
    /// - Parameter bitmapNumber: The number that you assigned to the bitmap that you want to print when you called SetBitmap or SetCustomAlignedBitmap.
    public func printSavedBitmap(_ bitmapNumber: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.printSavedBitmap(bitmapNumber)
    }

    /// Adds an instruction to the print job to print a drawn, ruled line on the paper of the receipt printer station.
    /// - Parameter positionList: The position parameters for the ruled line. The character string for *positionList* differs depending on whether *lineDirection* specifies a horizontal ruled line or a vertical ruled line (see remarks).
    /// - Parameter lineDirection: The direction in which to print the ruled line.
    /// - Parameter lineWidth: The width of the ruled line that the print should print. The unit of width is dot. If an unsupported value is specified, the best fit value for the printer is used.
    /// - Parameter lineStyle: The appearance of the ruled line, such as whether it is solid or broken, or single or double.
    /// - Parameter lineColor: The color of the ruled line, as an integer value that is equal to the value of the cartridge constant used in the ClaimedReceiptPrinter.ColorCartridge property. If an unsupported value is specified, the printing results may be unpredictable.
    public func drawRuledLine(_ positionList: Swift.String, _ lineDirection: WindowsDevicesPointOfService_PosPrinterLineDirection, _ lineWidth: Swift.UInt32, _ lineStyle: WindowsDevicesPointOfService_PosPrinterLineStyle, _ lineColor: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.drawRuledLine(positionList, lineDirection, lineWidth, lineStyle, lineColor)
    }

    /// Adds an instruction to the print job to print a barcode with the specified data and symbology on the receipt printer station.
    /// - Parameter data: The data to be represented as a barcode.
    /// - Parameter symbology: The symbology (encoding) of the barcode. This can be determined based on the BarcodeSymbologies class static methods.
    /// - Parameter height: The height of the barcode, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    /// - Parameter width: The width of the barcode.
    /// - Parameter textPosition: The vertical position of the barcode text relative to the barcode.
    /// - Parameter alignment: The horizontal alignment of the barcode on the page.
    public func printBarcode(_ data: Swift.String, _ symbology: Swift.UInt32, _ height: Swift.UInt32, _ width: Swift.UInt32, _ textPosition: WindowsDevicesPointOfService_PosPrinterBarcodeTextPosition, _ alignment: WindowsDevicesPointOfService_PosPrinterAlignment) throws {
        try _ireceiptOrSlipJob.printBarcode(data, symbology, height, width, textPosition, alignment)
    }

    /// Adds an instruction to the print job to print a barcode with the specified data, symbology, and custom alignment on the receipt printer station.
    /// - Parameter data: The data to be represented as a barcode.
    /// - Parameter symbology: The symbology (encoding) of the barcode.
    /// - Parameter height: The height of the barcode, in pixels.
    /// - Parameter width: The width of the barcode, in pixels.
    /// - Parameter textPosition: The vertical position of the barcode text relative to the barcode.
    /// - Parameter alignmentDistance: The distance from the leftmost print column to the start of the barcode, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func printBarcodeCustomAlign(_ data: Swift.String, _ symbology: Swift.UInt32, _ height: Swift.UInt32, _ width: Swift.UInt32, _ textPosition: WindowsDevicesPointOfService_PosPrinterBarcodeTextPosition, _ alignmentDistance: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.printBarcodeCustomAlign(data, symbology, height, width, textPosition, alignmentDistance)
    }

    /// Adds an instruction to the print job to print the specified bitmap with the specified standard horizontal placement on the receipt printer station.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignment: An enumeration value that specifies a standard horizontal placement on the page for the bitmap, such as left-aligned, centered, or right-aligned.
    public func printBitmap(_ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignment: WindowsDevicesPointOfService_PosPrinterAlignment) throws {
        try _ireceiptOrSlipJob.printBitmap(bitmap, alignment)
    }

    /// Adds an instruction to the print job to print the specified bitmap with the specified width and a standard horizontal placement on the receipt printer station.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignment: An enumeration value that specifies a standard horizontal placement on the page for the bitmap, such as left-aligned, centered, or right-aligned.
    /// - Parameter width: The width to use for printing the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func printBitmap(_ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignment: WindowsDevicesPointOfService_PosPrinterAlignment, _ width: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.printBitmapCustomWidthStandardAlign(bitmap, alignment, width)
    }

    /// Adds an instruction to the print job to print the specified bitmap at the specified distance from the leftmost print column on the receipt printer station.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignmentDistance: The distance from the leftmost print column to the start of the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    public func printCustomAlignedBitmap(_ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignmentDistance: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.printCustomAlignedBitmap(bitmap, alignmentDistance)
    }

    /// Adds an instruction to the print job to print the specified bitmap with the specified width and at the specified distance from the leftmost print column on the receipt printer station.
    /// - Parameter bitmap: Information about the bitmap that you want to print.
    /// - Parameter alignmentDistance: The distance from the leftmost print column to the start of the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPrinter.MapMode property.
    /// - Parameter width: The width to use for printing the bitmap, expressed in the unit of measurement indicated by the ClaimedPosPriinter.MapMode property.
    public func printCustomAlignedBitmap(_ bitmap: WindowsGraphicsImaging_BitmapFrame?, _ alignmentDistance: Swift.UInt32, _ width: Swift.UInt32) throws {
        try _ireceiptOrSlipJob.printBitmapCustomWidthCustomAlign(bitmap, alignmentDistance, width)
    }

    // MARK: Windows.Devices.PointOfService.IPosPrinterJob members

    /// Adds an instruction to the print job to print the specified text on the receipt printer station.
    /// - Parameter data: The text to print on the receipt printer station.
    public func print(_ data: Swift.String) throws {
        try _iposPrinterJob.print(data)
    }

    /// Adds an instruction to the print job to print a line of text on the receipt printer station.
    /// - Parameter data: The line of text to print.
    public func printLine(_ data: Swift.String) throws {
        try _iposPrinterJob.printLine(data)
    }

    /// Adds an instruction to the print job to print a newline character on the receipt printer station.
    public func printLine() throws {
        try _iposPrinterJob.printNewline()
    }

    /// Runs the print job on the receipt printer station asynchronously.
    /// - Returns: The operation to run the print job. This operation returns true if the print job succeeds; otherwise, the operation returns false.
    public func executeAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iposPrinterJob.executeAsync())
    }

    // MARK: Implementation details

    private var _ireceiptPrintJob2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrintJob2>? = nil

    internal var _ireceiptPrintJob2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrintJob2> {
        get throws {
            try _ireceiptPrintJob2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrintJob2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrintJob2.self)
            }
        }
    }

    private var _ireceiptOrSlipJob_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptOrSlipJob>? = nil

    internal var _ireceiptOrSlipJob: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptOrSlipJob> {
        get throws {
            try _ireceiptOrSlipJob_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptOrSlipJob.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptOrSlipJob.self)
            }
        }
    }

    private var _iposPrinterJob_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterJob>? = nil

    internal var _iposPrinterJob: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterJob> {
        get throws {
            try _iposPrinterJob_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterJob.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IPosPrinterJob.self)
            }
        }
    }

    deinit {
        _ireceiptPrintJob2_storage?.release()
        _ireceiptOrSlipJob_storage?.release()
        _iposPrinterJob_storage?.release()
    }
}