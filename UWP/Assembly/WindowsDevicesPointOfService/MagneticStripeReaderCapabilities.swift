// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides capabilities information for the magnetic stripe reader.
public final class WindowsDevicesPointOfService_MagneticStripeReaderCapabilities: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_MagneticStripeReaderCapabilitiesProjection> {
    // MARK: Windows.Devices.PointOfService.IMagneticStripeReaderCapabilities members

    /// Gets the authentication level supported by the device.
    /// - Returns: The supported authentication level.
    public var authenticationLevel: WindowsDevicesPointOfService_MagneticStripeReaderAuthenticationLevel {
        get throws {
            try _interop.get_AuthenticationLevel()
        }
    }

    /// Gets the type of card authentication data that is supported by the device.
    /// - Returns: The string containing the type of card authentication data.
    public var cardAuthentication: Swift.String {
        get throws {
            try _interop.get_CardAuthentication()
        }
    }

    /// Indicates whether the device supports ISO cards.
    /// - Returns: True if the device supports ISO cards; otherwise, false.
    public var isIsoSupported: Swift.Bool {
        get throws {
            try _interop.get_IsIsoSupported()
        }
    }

    /// Indicates whether device supports JIS Type-I cards.
    /// - Returns: True if the device support JIS Type-I cards; otherwise, false.
    public var isJisOneSupported: Swift.Bool {
        get throws {
            try _interop.get_IsJisOneSupported()
        }
    }

    /// Indicates whether the device supports JIS Type-II cards.
    /// - Returns: True if the device supports JIS Type-II cards; otherwise, false.
    public var isJisTwoSupported: Swift.Bool {
        get throws {
            try _interop.get_IsJisTwoSupported()
        }
    }

    /// Indicates whether the device supports reporting of usage statistics.
    /// - Returns: True if the device supports reporting of usage statistics; otherwise, false.
    public var isStatisticsReportingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsReportingSupported()
        }
    }

    /// Indicates whether the device supports updating of usage statistics.
    /// - Returns: True if the device supports updating of statistics; otherwise, false.
    public var isStatisticsUpdatingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsUpdatingSupported()
        }
    }

    /// Indicates whether the device is capable of masking track data.
    /// - Returns: True if the device is capable of masking track data; otherwise, false.
    public var isTrackDataMaskingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsTrackDataMaskingSupported()
        }
    }

    /// Indicates whether the devices is able to transmit start and end sentinels.
    /// - Returns: True if the device is able to transmit start and end sentinels; otherwise, false.
    public var isTransmitSentinelsSupported: Swift.Bool {
        get throws {
            try _interop.get_IsTransmitSentinelsSupported()
        }
    }

    /// Gets the power reporting capabilities of the device.
    /// - Returns: The power reporting capabilities of the device.
    public var powerReportingType: WindowsDevicesPointOfService_UnifiedPosPowerReportingType {
        get throws {
            try _interop.get_PowerReportingType()
        }
    }

    /// Gets the supported encryption algorithm.
    /// - Returns: The supported encryption algorithm.
    public var supportedEncryptionAlgorithms: Swift.UInt32 {
        get throws {
            try _interop.get_SupportedEncryptionAlgorithms()
        }
    }

    // MARK: Implementation details
}