// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the claimed barcode scanner.
public final class WindowsDevicesPointOfService_ClaimedBarcodeScanner: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ClaimedBarcodeScannerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IClaimedBarcodeScanner members

    /// Gets the DeviceInformation.Id of the claimed barcode scanner.
    /// - Returns: The DeviceInformation.Id of the claimed barcode scanner.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets or sets a Boolean value that indicates whether to provide the decoded data to the service object.
    /// - Returns: Set to true if decoded data is provided to the application; otherwise, false.
    public var isDecodeDataEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsDecodeDataEnabled()
        }
    }

    /// Gets or sets a Boolean value that indicates whether to provide the decoded data to the service object.
    /// - Returns: Set to true if decoded data is provided to the application; otherwise, false.
    public func isDecodeDataEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsDecodeDataEnabled(value)
    }

    /// Gets or sets a Boolean value that indicates whether the barcode scanner is disabled after receiving the data.
    /// - Returns: Set to true if the application wants to receive and process only one input or only one input at a time.
    public var isDisabledOnDataReceived: Swift.Bool {
        get throws {
            try _interop.get_IsDisabledOnDataReceived()
        }
    }

    /// Gets or sets a Boolean value that indicates whether the barcode scanner is disabled after receiving the data.
    /// - Returns: Set to true if the application wants to receive and process only one input or only one input at a time.
    public func isDisabledOnDataReceived(_ value: Swift.Bool) throws {
        try _interop.put_IsDisabledOnDataReceived(value)
    }

    /// Indicates whether the barcode scanner can receive DataReceived events.
    /// - Returns: True if the device can receive DataReceived events; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsEnabled()
        }
    }

    /// Occurs when the device scans a barcode.
    public func dataReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?, WindowsDevicesPointOfService_BarcodeScannerDataReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DataReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: dataReceived)
    }

    public func dataReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DataReceived(token)
    }

    /// Occurs when there is a problem in reading a barcode.
    public func errorOccurred(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?, WindowsDevicesPointOfService_BarcodeScannerErrorOccurredEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ErrorOccurred(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: errorOccurred)
    }

    public func errorOccurred(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ErrorOccurred(token)
    }

    /// Occurs when the device receives the bitmap image of the scan.
    public func imagePreviewReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?, WindowsDevicesPointOfService_BarcodeScannerImagePreviewReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ImagePreviewReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: imagePreviewReceived)
    }

    public func imagePreviewReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ImagePreviewReceived(token)
    }

    /// Occurs when the device gets a request to release its exclusive claim.
    public func releaseDeviceRequested(adding handler: WindowsFoundation_EventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReleaseDeviceRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: releaseDeviceRequested)
    }

    public func releaseDeviceRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReleaseDeviceRequested(token)
    }

    /// Occurs when the barcode scanner trigger or button is pressed during a scanning operation.
    public func triggerPressed(adding handler: WindowsFoundation_EventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TriggerPressed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: triggerPressed)
    }

    public func triggerPressed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TriggerPressed(token)
    }

    /// Occurs when the barcode scanner trigger or button is released during a scanning operation.
    public func triggerReleased(adding handler: WindowsFoundation_EventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TriggerReleased(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: triggerReleased)
    }

    public func triggerReleased(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TriggerReleased(token)
    }

    /// Gets the barcode scanner into a ready state for DataReceived events.
    /// - Returns: No object or value is returned when this method completes.
    public func enableAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.enableAsync())
    }

    /// Puts the barcode scanner into a state where it cannot receive DataReceived events.
    /// - Returns: No object or value is returned when this method completes.
    public func disableAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.disableAsync())
    }

    /// Retains exclusive claim to the barcode scanner.
    public func retainDevice() throws {
        try _interop.retainDevice()
    }

    public func setActiveSymbologiesAsync(_ symbologies: WindowsFoundationCollections_IIterable<Swift.UInt32>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setActiveSymbologiesAsync(symbologies))
    }

    public func resetStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.resetStatisticsAsync(statisticsCategories))
    }

    public func updateStatisticsAsync(_ statistics: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.updateStatisticsAsync(statistics))
    }

    /// Sets the active profile on the barcode scanner.
    /// - Parameter profile: The name of the profile to set on the device.
    /// - Returns: No object or value is returned when the method completes.
    public func setActiveProfileAsync(_ profile: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.setActiveProfileAsync(profile))
    }

    // MARK: Windows.Devices.PointOfService.IClaimedBarcodeScanner1 members

    /// Used to signal the barcode scanner to start scanning. A session is active until StopSoftwareTriggerAsync is invoked, or until the scanner ends the session on its own.
    /// - Returns: No object or value is returned when this method completes.
    public func startSoftwareTriggerAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iclaimedBarcodeScanner1.startSoftwareTriggerAsync())
    }

    /// Used to stop a session that was started with StartSoftwareTriggerAsync. No error is raised if this is called when no session is active.
    /// - Returns: No object or value is returned when this method completes.
    public func stopSoftwareTriggerAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iclaimedBarcodeScanner1.stopSoftwareTriggerAsync())
    }

    // MARK: Windows.Devices.PointOfService.IClaimedBarcodeScanner2 members

    /// Gets the attributes of the specified barcode symbology.
    /// - Parameter barcodeSymbology: The barcode symbology.
    /// - Returns: A BarcodeSymbologyAttributes object, containing the attributes of the specified barcode symbology.
    public func getSymbologyAttributesAsync(_ barcodeSymbology: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_BarcodeSymbologyAttributes?> {
        try COM.NullResult.unwrap(_iclaimedBarcodeScanner2.getSymbologyAttributesAsync(barcodeSymbology))
    }

    /// Sets the attributes of the barcode symbology used by the claimed barcode scanner.
    /// - Parameter barcodeSymbology: The barcode symbology.
    /// - Parameter attributes: The barcode symbology attributes.
    /// - Returns: True if the barcode symbology attributes were successfully set; otherwise, false.
    public func setSymbologyAttributesAsync(_ barcodeSymbology: Swift.UInt32, _ attributes: WindowsDevicesPointOfService_BarcodeSymbologyAttributes?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iclaimedBarcodeScanner2.setSymbologyAttributesAsync(barcodeSymbology, attributes))
    }

    // MARK: Windows.Devices.PointOfService.IClaimedBarcodeScanner3 members

    /// Gets or sets whether to show the video preview window when the barcode scanner is enabled.
    /// - Returns: True if the video preview window will be shown; otherwise false.
    public var isVideoPreviewShownOnEnable: Swift.Bool {
        get throws {
            try _iclaimedBarcodeScanner3.get_IsVideoPreviewShownOnEnable()
        }
    }

    /// Gets or sets whether to show the video preview window when the barcode scanner is enabled.
    /// - Returns: True if the video preview window will be shown; otherwise false.
    public func isVideoPreviewShownOnEnable(_ value: Swift.Bool) throws {
        try _iclaimedBarcodeScanner3.put_IsVideoPreviewShownOnEnable(value)
    }

    /// Shows the video preview window.
    /// - Returns: True if the video preview is shown; false if the video preview is not shown or not supported.
    public func showVideoPreviewAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iclaimedBarcodeScanner3.showVideoPreviewAsync())
    }

    /// Hides the video preview window.
    public func hideVideoPreview() throws {
        try _iclaimedBarcodeScanner3.hideVideoPreview()
    }

    // MARK: Windows.Devices.PointOfService.IClaimedBarcodeScanner4 members

    /// Event that is raised when the **ClaimedBarcodeScanner** is closed.
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_ClaimedBarcodeScanner?, WindowsDevicesPointOfService_ClaimedBarcodeScannerClosedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iclaimedBarcodeScanner4.add_Closed(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closed)
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iclaimedBarcodeScanner4.remove_Closed(token)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Releases exclusive claim to the barcode scanner. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclaimedBarcodeScanner1_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner1>? = nil

    internal var _iclaimedBarcodeScanner1: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner1> {
        get throws {
            try _iclaimedBarcodeScanner1_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner1.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner1.self)
            }
        }
    }

    private var _iclaimedBarcodeScanner2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner2>? = nil

    internal var _iclaimedBarcodeScanner2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner2> {
        get throws {
            try _iclaimedBarcodeScanner2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner2.self)
            }
        }
    }

    private var _iclaimedBarcodeScanner3_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner3>? = nil

    internal var _iclaimedBarcodeScanner3: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner3> {
        get throws {
            try _iclaimedBarcodeScanner3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner3.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner3.self)
            }
        }
    }

    private var _iclaimedBarcodeScanner4_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner4>? = nil

    internal var _iclaimedBarcodeScanner4: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner4> {
        get throws {
            try _iclaimedBarcodeScanner4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner4.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IClaimedBarcodeScanner4.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclaimedBarcodeScanner1_storage?.release()
        _iclaimedBarcodeScanner2_storage?.release()
        _iclaimedBarcodeScanner3_storage?.release()
        _iclaimedBarcodeScanner4_storage?.release()
        _iclosable_storage?.release()
    }
}