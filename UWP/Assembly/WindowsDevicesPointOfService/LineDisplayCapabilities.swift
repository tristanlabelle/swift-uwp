// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the line display capabilities.
public final class WindowsDevicesPointOfService_LineDisplayCapabilities: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_LineDisplayCapabilitiesProjection> {
    // MARK: Windows.Devices.PointOfService.ILineDisplayCapabilities members

    /// Gets whether the line display supports blinking
    /// - Returns: The support for blinking.
    public var canBlink: WindowsDevicesPointOfService_LineDisplayTextAttributeGranularity {
        get throws {
            try _interop.get_CanBlink()
        }
    }

    /// Gets whether the line display supports changing its blink rate.
    /// - Returns: True if the line display supports changing its blink rate; otherwise, false.
    public var canChangeBlinkRate: Swift.Bool {
        get throws {
            try _interop.get_CanChangeBlinkRate()
        }
    }

    /// Gets whether the line display supports changing its screen size.
    /// - Returns: True if the line display supports changing its screen size; otherwise, false.
    public var canChangeScreenSize: Swift.Bool {
        get throws {
            try _interop.get_CanChangeScreenSize()
        }
    }

    /// Gets whether the line display supports displaying bitmaps.
    /// - Returns: True if the line display supports displaying bitmaps; otherwise, false.
    public var canDisplayBitmaps: Swift.Bool {
        get throws {
            try _interop.get_CanDisplayBitmaps()
        }
    }

    /// Gets whether the line display supports displaying custom glyphs.
    /// - Returns: True if the line display supports displaying custom glyphs; otherwise, false.
    public var canDisplayCustomGlyphs: Swift.Bool {
        get throws {
            try _interop.get_CanDisplayCustomGlyphs()
        }
    }

    /// Gets whether the line display supports mapping characters sets.
    /// - Returns: True if the line display supports mapping character sets; otherwise false.
    public var canMapCharacterSets: Swift.Bool {
        get throws {
            try _interop.get_CanMapCharacterSets()
        }
    }

    /// Gets whether the line display supports reading characters at the current cursor position.
    /// - Returns: True if the line display supports reading characters at the cursor; otherwise false.
    public var canReadCharacterAtCursor: Swift.Bool {
        get throws {
            try _interop.get_CanReadCharacterAtCursor()
        }
    }

    /// Gets whether the line display supports reversing the video display.
    /// - Returns: The support for reversing the video display.
    public var canReverse: WindowsDevicesPointOfService_LineDisplayTextAttributeGranularity {
        get throws {
            try _interop.get_CanReverse()
        }
    }

    /// Gets whether the line display supports adjusting the screen brightness.
    /// - Returns: True if the line display supports adjusting the screen brightness; otherwise, false.
    public var isBrightnessSupported: Swift.Bool {
        get throws {
            try _interop.get_IsBrightnessSupported()
        }
    }

    /// Gets whether the line display supports a cursor.
    /// - Returns: True if the line display supports a cursor; otherwise, false.
    public var isCursorSupported: Swift.Bool {
        get throws {
            try _interop.get_IsCursorSupported()
        }
    }

    /// Gets whether the line display supports horizontal marquee scrolling.
    /// - Returns: True if the line display supports horizontal marquee scrolling; otherwise, false.
    public var isHorizontalMarqueeSupported: Swift.Bool {
        get throws {
            try _interop.get_IsHorizontalMarqueeSupported()
        }
    }

    /// Gets whether the line display supports delaying between displaying successive characters.
    /// - Returns: True if the line display supports inter-character wait; otherwise, false.
    public var isInterCharacterWaitSupported: Swift.Bool {
        get throws {
            try _interop.get_IsInterCharacterWaitSupported()
        }
    }

    /// Gets whether the line display supports reporting statistics.
    /// - Returns: True if the line display supports reporting statistics; otherwise, false.
    public var isStatisticsReportingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsReportingSupported()
        }
    }

    /// Gets whether the line display supports updating (or resetting) statistics.
    /// - Returns: True if the line display supports updating statistics; otherwise, false.
    public var isStatisticsUpdatingSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStatisticsUpdatingSupported()
        }
    }

    /// Gets whether the line display supports vertical marquee scrolling.
    /// - Returns: True if the line display supports vertical marquee scrolling; otherwise, false.
    public var isVerticalMarqueeSupported: Swift.Bool {
        get throws {
            try _interop.get_IsVerticalMarqueeSupported()
        }
    }

    /// Gets the type of power reporting supported by the line display.
    /// - Returns: This property can have one of the following values:
    public var powerReportingType: WindowsDevicesPointOfService_UnifiedPosPowerReportingType {
        get throws {
            try _interop.get_PowerReportingType()
        }
    }

    /// Gets the number of descriptors supported by the line display.
    /// - Returns: The number of descriptors supported by the line display. A value of zero indicates that the line display does not support descriptors.
    public var supportedDescriptors: Swift.UInt32 {
        get throws {
            try _interop.get_SupportedDescriptors()
        }
    }

    /// Gets the maximum number of windows supported by the line display.
    /// - Returns: The maximum number of windows supported by the line display.
    public var supportedWindows: Swift.UInt32 {
        get throws {
            try _interop.get_SupportedWindows()
        }
    }

    // MARK: Implementation details
}