// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the barcode scanner device.
public final class WindowsDevicesPointOfService_BarcodeScanner: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_BarcodeScannerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.IBarcodeScanner members

    /// Gets the capabilities of the specified barcode scanner.
    /// - Returns: The capabilities of the barcode scanner.
    public var capabilities: WindowsDevicesPointOfService_BarcodeScannerCapabilities {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Capabilities())
        }
    }

    /// Gets the DeviceInformation.Id of the barcode scanner.
    /// - Returns: The DeviceInformation.Id of the barcode scanner.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Occurs when the barcode scanner detects an operation status change.
    public func statusUpdated(adding handler: WindowsFoundation_TypedEventHandler<WindowsDevicesPointOfService_BarcodeScanner?, WindowsDevicesPointOfService_BarcodeScannerStatusUpdatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_StatusUpdated(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: statusUpdated)
    }

    public func statusUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_StatusUpdated(token)
    }

    /// Attempts to get an exclusive access to the barcode scanner.
    /// - Returns: When the method completes, it returns a ClaimedBarcodeScanner.
    public func claimScannerAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_ClaimedBarcodeScanner?> {
        try COM.NullResult.unwrap(_interop.claimScannerAsync())
    }

    /// Tests the state of the barcode scanner.
    /// - Parameter level: The specified health check level.
    /// - Returns: A text description of the test result. Returns an error if the specified check level is not supported by the device.
    public func checkHealthAsync(_ level: WindowsDevicesPointOfService_UnifiedPosHealthCheckLevel) throws -> WindowsFoundation_IAsyncOperation<Swift.String> {
        try COM.NullResult.unwrap(_interop.checkHealthAsync(level))
    }

    /// Gets the symbologies supported by the claimed barcode scanner.
    /// - Returns: When the method completes successfully, it returns a list of values that represent the symbologies supported by the device.
    public func getSupportedSymbologiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<Swift.UInt32>?> {
        try COM.NullResult.unwrap(_interop.getSupportedSymbologiesAsync())
    }

    /// Determines whether the specified symbology is supported by the barcode scanner.
    /// - Parameter barcodeSymbology: The specific barcode symbology.
    /// - Returns: True if the device supports the specified symbology; otherwise, false.
    public func isSymbologySupportedAsync(_ barcodeSymbology: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.isSymbologySupportedAsync(barcodeSymbology))
    }

    public func retrieveStatisticsAsync(_ statisticsCategories: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_interop.retrieveStatisticsAsync(statisticsCategories))
    }

    /// Gets the list of profiles supported by the barcode scanner.
    /// - Returns: As array of strings representing the supported profiles. Returns an empty list if the scanner does not support profiles.
    public func getSupportedProfiles() throws -> WindowsFoundationCollections_IVectorView<Swift.String> {
        try COM.NullResult.unwrap(_interop.getSupportedProfiles())
    }

    /// Determines whether the profile is supported.
    /// - Parameter profile: Barcode scanner profile.
    /// - Returns: True if the barcode scanner supports the profile; otherwise false.
    public func isProfileSupported(_ profile: Swift.String) throws -> Swift.Bool {
        try _interop.isProfileSupported(profile)
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScanner2 members

    /// Retrieves the video device ID which represents the camera lens associated with the claimed barcode scanner. (Not supported on mobile platforms)
    /// - Returns: The video device ID.
    public var videoDeviceId: Swift.String {
        get throws {
            try _ibarcodeScanner2.get_VideoDeviceId()
        }
    }

    // MARK: Windows.Foundation.IClosable members

    /// Close the barcode scanner session, allowing it to be claimed by another client. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScannerStatics members

    /// Returns the first available barcode scanner.
    /// - Returns: The first available barcode scanner. Returns a null object in the following cases:
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_BarcodeScanner?> {
        try COM.NullResult.unwrap(_ibarcodeScannerStatics.getDefaultAsync())
    }

    /// Creates BarcodeScanner object from the DeviceInformation.Id.
    /// - Parameter deviceId: The DeviceInformation.Id that identifies a specific barcode scanner, which can be retrieved from the DeviceId property.
    /// - Returns: The barcode scanner specified by the unique device identifier. Returns a null object in the following cases:
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_BarcodeScanner?> {
        try COM.NullResult.unwrap(_ibarcodeScannerStatics.fromIdAsync(deviceId))
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the available barcode scanners.
    /// - Returns: An Advanced Query Syntax (AQS) string that is used to enumerate available barcode scanners.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ibarcodeScannerStatics.getDeviceSelector()
    }

    // MARK: Windows.Devices.PointOfService.IBarcodeScannerStatics2 members

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the barcode scanners available over the specified connection types
    /// - Parameter connectionTypes: A list of the connection types to test for available barcode scanners.
    /// - Returns: An Advanced Query Syntax (AQS) string that is used to enumerate the barcode scanners available over the specified connection types
    public static func getDeviceSelector(_ connectionTypes: WindowsDevicesPointOfService_PosConnectionTypes) throws -> Swift.String {
        try _ibarcodeScannerStatics2.getDeviceSelectorWithConnectionTypes(connectionTypes)
    }

    // MARK: Implementation details

    private var _ibarcodeScanner2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScanner2>? = nil

    internal var _ibarcodeScanner2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScanner2> {
        get throws {
            try _ibarcodeScanner2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScanner2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScanner2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ibarcodeScanner2_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _ibarcodeScannerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics>? = nil

    internal static var _ibarcodeScannerStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics> {
        get throws {
            try _ibarcodeScannerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.BarcodeScanner", id: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics.iid)
            }
        }
    }

    private static var _ibarcodeScannerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics2>? = nil

    internal static var _ibarcodeScannerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics2> {
        get throws {
            try _ibarcodeScannerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.BarcodeScanner", id: CWinRT.SWRT_WindowsDevicesPointOfService_IBarcodeScannerStatics2.iid)
            }
        }
    }
}