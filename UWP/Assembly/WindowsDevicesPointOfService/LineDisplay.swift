// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a line display device.
public final class WindowsDevicesPointOfService_LineDisplay: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_LineDisplayProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Devices.PointOfService.ILineDisplay members

    /// Gets the capabilities of the specified line display.
    /// - Returns: The capabilities of the line display.
    public var capabilities: WindowsDevicesPointOfService_LineDisplayCapabilities {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Capabilities())
        }
    }

    /// Gets the device control description of the line display.
    /// - Returns: The control description of the line display.
    public var deviceControlDescription: Swift.String {
        get throws {
            try _interop.get_DeviceControlDescription()
        }
    }

    /// Gets the device control version number of the line display.
    /// - Returns: The UnifiedPOS control version number of the line display, formatted as a string.
    public var deviceControlVersion: Swift.String {
        get throws {
            try _interop.get_DeviceControlVersion()
        }
    }

    /// Gets the DeviceInformation.Id of the line display.
    /// - Returns: The DeviceInformation.Id of the line display.
    public var deviceId: Swift.String {
        get throws {
            try _interop.get_DeviceId()
        }
    }

    /// Gets the service version number of the line display.
    /// - Returns: The UnifiedPOS service version number, formatted as a string.
    public var deviceServiceVersion: Swift.String {
        get throws {
            try _interop.get_DeviceServiceVersion()
        }
    }

    /// Gets the physical device description.
    /// - Returns: The physical device description given by the UnifiedPOS specification.
    public var physicalDeviceDescription: Swift.String {
        get throws {
            try _interop.get_PhysicalDeviceDescription()
        }
    }

    /// Gets the physical device name.
    /// - Returns: The physical device name given by the UnifiedPOS specification.
    public var physicalDeviceName: Swift.String {
        get throws {
            try _interop.get_PhysicalDeviceName()
        }
    }

    /// Attempts to gain exclusive access to the line display.
    /// - Returns: When the method completes, it returns a ClaimedLineDisplay.
    public func claimAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_ClaimedLineDisplay?> {
        try COM.NullResult.unwrap(_interop.claimAsync())
    }

    // MARK: Windows.Devices.PointOfService.ILineDisplay2 members

    /// Gets the current power status of the device.
    /// - Returns: The power status of the device.
    public func checkPowerStatusAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplayPowerStatus> {
        try COM.NullResult.unwrap(_ilineDisplay2.checkPowerStatusAsync())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Close the line display session, allowing it to be claimed by another client. For C++ and JavaScript, use Close(). For C# and Visual Basic, use Dispose().
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Devices.PointOfService.ILineDisplayStatics2 members

    /// Gets the standard UnifiedPOS statistics category selector strings.
    /// - Returns: The standard UnifiedPOS statistics category selector strings.
    public static var statisticsCategorySelector: WindowsDevicesPointOfService_LineDisplayStatisticsCategorySelector {
        get throws {
            try COM.NullResult.unwrap(_ilineDisplayStatics2.get_StatisticsCategorySelector())
        }
    }

    // MARK: Windows.Devices.PointOfService.ILineDisplayStatics members

    /// Creates a LineDisplay object from the DeviceInformation.Id.
    /// - Parameter deviceId: The DeviceInformation.Id that identifies a specific line display, which can be retrieved from the DeviceId property.
    /// - Returns: The line display specified by the unique device identifier. Returns a null object in the following cases:
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplay?> {
        try COM.NullResult.unwrap(_ilineDisplayStatics.fromIdAsync(deviceId))
    }

    /// Returns the first available line display.
    /// - Returns: The first available line display. Returns a null object in the following cases:
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesPointOfService_LineDisplay?> {
        try COM.NullResult.unwrap(_ilineDisplayStatics.getDefaultAsync())
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the available line displays.
    /// - Returns: An Advanced Query Syntax string that is used to enumerate available line displays.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ilineDisplayStatics.getDeviceSelector()
    }

    /// Gets an Advanced Query Syntax (AQS) string that you can use to list the line displays available over the specified connection types
    /// - Parameter connectionTypes: A list of the connection types to check for available line displays.
    /// - Returns: An AQS string that is used to enumerate the line displays available over the specified connection types
    public static func getDeviceSelector(_ connectionTypes: WindowsDevicesPointOfService_PosConnectionTypes) throws -> Swift.String {
        try _ilineDisplayStatics.getDeviceSelectorWithConnectionTypes(connectionTypes)
    }

    // MARK: Implementation details

    private var _ilineDisplay2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplay2>? = nil

    internal var _ilineDisplay2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplay2> {
        get throws {
            try _ilineDisplay2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplay2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplay2.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _ilineDisplay2_storage?.release()
        _iclosable_storage?.release()
    }

    private static var _ilineDisplayStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics2>? = nil

    internal static var _ilineDisplayStatics2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics2> {
        get throws {
            try _ilineDisplayStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.LineDisplay", id: CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics2.iid)
            }
        }
    }

    private static var _ilineDisplayStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics>? = nil

    internal static var _ilineDisplayStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics> {
        get throws {
            try _ilineDisplayStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.PointOfService.LineDisplay", id: CWinRT.SWRT_WindowsDevicesPointOfService_ILineDisplayStatics.iid)
            }
        }
    }
}