// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the capabilities of receipt station of a point-of-service printer.
public final class WindowsDevicesPointOfService_ReceiptPrinterCapabilities: WindowsRuntime.WinRTImport<WindowsDevicesPointOfService_ReceiptPrinterCapabilitiesProjection>, WindowsDevicesPointOfService_ICommonReceiptSlipCapabilitiesProtocol, WindowsDevicesPointOfService_ICommonPosPrintStationCapabilitiesProtocol {
    // MARK: Windows.Devices.PointOfService.IReceiptPrinterCapabilities members

    /// Gets whether the receipt printer station can perform paper cuts.
    /// - Returns: True if the receipt printer station can perform paper cuts; otherwise false.
    public var canCutPaper: Swift.Bool {
        get throws {
            try _interop.get_CanCutPaper()
        }
    }

    /// Gets whether the receipt printer station has a stamp capability.
    /// - Returns: True if the receipt printer station has a stamp capability; otherwise false.
    public var isStampSupported: Swift.Bool {
        get throws {
            try _interop.get_IsStampSupported()
        }
    }

    /// Gets the type of mark-sensed paper handling that is available for the receipt printer station.
    /// - Returns: A logical OR combination of values that indicate the type of mark-sensed paper handling that is available for the receipt printer station.
    public var markFeedCapabilities: WindowsDevicesPointOfService_PosPrinterMarkFeedCapabilities {
        get throws {
            try _interop.get_MarkFeedCapabilities()
        }
    }

    // MARK: Windows.Devices.PointOfService.IReceiptPrinterCapabilities2 members

    /// Gets whether the receipt printer station can reverse paper feed by line.
    /// - Returns: True if the receipt printer station can reverse paper feed by line; otherwise false.
    public var isReversePaperFeedByLineSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsReversePaperFeedByLineSupported()
        }
    }

    /// Gets whether the receipt printer station can reverse paper feed by map mode unit.
    /// - Returns: True if the receipt printer station can reverse paper feed by map mode unit; otherwise false.
    public var isReversePaperFeedByMapModeUnitSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsReversePaperFeedByMapModeUnitSupported()
        }
    }

    /// Gets whether the receipt printer station can print characters in reverse-video style.
    /// - Returns: True if the receipt printer station can print characters in reverse-video style; otherwise false.
    public var isReverseVideoSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsReverseVideoSupported()
        }
    }

    /// Gets whether the receipt printer station can print characters in strikethrough style.
    /// - Returns: True if the receipt printer station can print characters in strikethrough style; otherwise false.
    public var isStrikethroughSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsStrikethroughSupported()
        }
    }

    /// Gets whether the receipt printer station can print characters in subscript style.
    /// - Returns: True if the receipt printer station can print characters in subscript style; otherwise false.
    public var isSubscriptSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsSubscriptSupported()
        }
    }

    /// Gets whether the receipt printer station can print characters in superscript style.
    /// - Returns: True if the receipt printer station can print characters in superscript style; otherwise false.
    public var isSuperscriptSupported: Swift.Bool {
        get throws {
            try _ireceiptPrinterCapabilities2.get_IsSuperscriptSupported()
        }
    }

    // MARK: Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities members

    /// Gets whether the receipt printer station can print in a rotated upside-down mode.
    /// - Returns: True if the receipt printer station can print in a rotated upside-down mode; otherwise false.
    public var is180RotationSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_Is180RotationSupported()
        }
    }

    /// Gets whether the receipt printer station can print barcodes.
    /// - Returns: True if the receipt printer station can print barcodes; otherwise false.
    public var isBarcodeSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_IsBarcodeSupported()
        }
    }

    /// Gets whether the receipt printer station can print bitmaps.
    /// - Returns: True if the receipt printer station can print bitmaps; otherwise false.
    public var isBitmapSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_IsBitmapSupported()
        }
    }

    /// Gets whether the receipt printer station can print information rotated 90 degrees to the left.
    /// - Returns: True if the receipt printer station can print information rotated 90 degrees to the left; otherwise false.
    public var isLeft90RotationSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_IsLeft90RotationSupported()
        }
    }

    /// Gets whether the receipt printer station supports setting a custom size for the area of the page on which the printer should print.
    /// - Returns: True if the receipt printer station supports setting a custom size for the area of the page on which the printer should print; otherwise false.
    public var isPrintAreaSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_IsPrintAreaSupported()
        }
    }

    /// Gets whether the receipt printer station can print information rotated 90 degrees to the right.
    /// - Returns: True if the receipt printer station can print information rotated 90 degrees to the right; otherwise false.
    public var isRight90RotationSupported: Swift.Bool {
        get throws {
            try _icommonReceiptSlipCapabilities.get_IsRight90RotationSupported()
        }
    }

    /// Gets information about the capabilities of the receipt printer station to draw ruled lines.
    /// - Returns: Information about the capabilities of the receipt printer station to draw ruled lines.
    public var ruledLineCapabilities: WindowsDevicesPointOfService_PosPrinterRuledLineCapabilities {
        get throws {
            try _icommonReceiptSlipCapabilities.get_RuledLineCapabilities()
        }
    }

    /// Gets a list of the directions in which the receipt printer station can rotate a barcode when printing.
    /// - Returns: A list of the directions in which the receipt printer station can rotate a barcode when printing.
    public var supportedBarcodeRotations: WindowsFoundationCollections_IVectorView<WindowsDevicesPointOfService_PosPrinterRotation> {
        get throws {
            try COM.NullResult.unwrap(_icommonReceiptSlipCapabilities.get_SupportedBarcodeRotations())
        }
    }

    /// Gets a list of the directions in which the receipt printer station can rotate a bitmap when printing.
    /// - Returns: A list of the directions in which the receipt printer station can rotate a bitmap when printing.
    public var supportedBitmapRotations: WindowsFoundationCollections_IVectorView<WindowsDevicesPointOfService_PosPrinterRotation> {
        get throws {
            try COM.NullResult.unwrap(_icommonReceiptSlipCapabilities.get_SupportedBitmapRotations())
        }
    }

    // MARK: Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities members

    /// Gets information about the sensors that the receipt printer station has available to report the status of the printer station.
    /// - Returns: A combination of enumeration values that indicate the sensors that the receipt printer station has available to report the status of the printer station.
    public var cartridgeSensors: WindowsDevicesPointOfService_PosPrinterCartridgeSensors {
        get throws {
            try _icommonPosPrintStationCapabilities.get_CartridgeSensors()
        }
    }

    /// Gets the color cartridges that the receipt printer station can use to print in color.
    /// - Returns: A combination of enumeration values that indicates which color cartridges the receipt printer station can use to print in color.
    public var colorCartridgeCapabilities: WindowsDevicesPointOfService_PosPrinterColorCapabilities {
        get throws {
            try _icommonPosPrintStationCapabilities.get_ColorCartridgeCapabilities()
        }
    }

    /// Gets whether the receipt printer station can print bold characters.
    /// - Returns: True if the receipt printer station can print bold characters; otherwise false.
    public var isBoldSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsBoldSupported()
        }
    }

    /// Gets whether the receipt printer station can print characters that are both double-high and double-wide.
    /// - Returns: True if the receipt printer station can print characters that are both double-high and double-wide; otherwise false.
    public var isDoubleHighDoubleWidePrintSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsDoubleHighDoubleWidePrintSupported()
        }
    }

    /// Gets whether the receipt printer station can print double-high characters.
    /// - Returns: True if the receipt printer station can print double-high characters; otherwise false.
    public var isDoubleHighPrintSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsDoubleHighPrintSupported()
        }
    }

    /// Gets whether the receipt printer station can print double-wide characters.
    /// - Returns: True if the receipt printer station can print double-wide characters; otherwise false.
    public var isDoubleWidePrintSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsDoubleWidePrintSupported()
        }
    }

    /// Gets whether the receipt printer station can print a dark color plus an alternate color.
    /// - Returns: True if the receipt printer station can print a dark color plus an alternate color; otherwise false.
    public var isDualColorSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsDualColorSupported()
        }
    }

    /// Gets whether the receipt printer station can print italic characters.
    /// - Returns: True if the receipt printer station can print italic characters; otherwise false.
    public var isItalicSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsItalicSupported()
        }
    }

    /// Gets whether the receipt printer station has an out-of-paper sensor.
    /// - Returns: True if the receipt printer station has an out-of-paper sensor; otherwise false.
    public var isPaperEmptySensorSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsPaperEmptySensorSupported()
        }
    }

    /// Gets whether the receipt printer station has a low-paper sensor.
    /// - Returns: True if the receipt printer station has a low-paper sensor; otherwise false.
    public var isPaperNearEndSensorSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsPaperNearEndSensorSupported()
        }
    }

    /// Gets whether a point-of-service printer with a station that prints receipts is present.
    /// - Returns: True if a point-of-service printer with a station that prints receipts is present; otherwise false.
    public var isPrinterPresent: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsPrinterPresent()
        }
    }

    /// Gets whether the receipt printer station can underline characters.
    /// - Returns: True if the receipt printer station can underline characters; otherwise false.
    public var isUnderlineSupported: Swift.Bool {
        get throws {
            try _icommonPosPrintStationCapabilities.get_IsUnderlineSupported()
        }
    }

    /// Gets a collection of the line widths in characters per line that the receipt printer station supports.
    /// - Returns: A collection of the line widths in characters per line that the receipt printer station supports.
    public var supportedCharactersPerLine: WindowsFoundationCollections_IVectorView<Swift.UInt32> {
        get throws {
            try COM.NullResult.unwrap(_icommonPosPrintStationCapabilities.get_SupportedCharactersPerLine())
        }
    }

    // MARK: Implementation details

    private var _ireceiptPrinterCapabilities2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrinterCapabilities2>? = nil

    internal var _ireceiptPrinterCapabilities2: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrinterCapabilities2> {
        get throws {
            try _ireceiptPrinterCapabilities2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrinterCapabilities2.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_IReceiptPrinterCapabilities2.self)
            }
        }
    }

    private var _icommonReceiptSlipCapabilities_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonReceiptSlipCapabilities>? = nil

    internal var _icommonReceiptSlipCapabilities: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonReceiptSlipCapabilities> {
        get throws {
            try _icommonReceiptSlipCapabilities_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ICommonReceiptSlipCapabilities.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ICommonReceiptSlipCapabilities.self)
            }
        }
    }

    private var _icommonPosPrintStationCapabilities_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonPosPrintStationCapabilities>? = nil

    internal var _icommonPosPrintStationCapabilities: COM.COMInterop<CWinRT.SWRT_WindowsDevicesPointOfService_ICommonPosPrintStationCapabilities> {
        get throws {
            try _icommonPosPrintStationCapabilities_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDevicesPointOfService_ICommonPosPrintStationCapabilities.iid).cast(to: CWinRT.SWRT_WindowsDevicesPointOfService_ICommonPosPrintStationCapabilities.self)
            }
        }
    }

    deinit {
        _ireceiptPrinterCapabilities2_storage?.release()
        _icommonReceiptSlipCapabilities_storage?.release()
        _icommonPosPrintStationCapabilities_storage?.release()
    }
}