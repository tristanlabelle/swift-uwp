// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Handles the logic of input that can be used as targets in ExpressionAnimations—typically to drive the motion of visuals based on input.
public final class WindowsUICompositionInteractions_InteractionTracker: WindowsRuntime.WinRTImport<WindowsUICompositionInteractions_InteractionTrackerProjection> {
    // MARK: Windows.UI.Composition.Interactions.IInteractionTracker members

    /// A collection of objects that generate interactions.
    /// - Returns: A collection of objects that generate interactions.
    public var interactionSources: WindowsUICompositionInteractions_CompositionInteractionSourceCollection {
        get throws {
            try COM.NullResult.unwrap(_interop.get_InteractionSources())
        }
    }

    /// Boolean value indicating whether position rounding is currently suggested.
    /// - Returns: Boolean value indicating whether position rounding is currently suggested.
    public var isPositionRoundingSuggested: Swift.Bool {
        get throws {
            try _interop.get_IsPositionRoundingSuggested()
        }
    }

    /// The maximum position allowed for the InteractionTracker.
    /// - Returns: The maximum position allowed for the InteractionTracker.
    public var maxPosition: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_MaxPosition()
        }
    }

    /// The maximum position allowed for the InteractionTracker.
    /// - Returns: The maximum position allowed for the InteractionTracker.
    public func maxPosition(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_MaxPosition(value)
    }

    /// The maximum scale for the InteractionTracker.
    /// - Returns: The maximum scale for the InteractionTracker.
    public var maxScale: Swift.Float {
        get throws {
            try _interop.get_MaxScale()
        }
    }

    /// The maximum scale for the InteractionTracker.
    /// - Returns: The maximum scale for the InteractionTracker.
    public func maxScale(_ value: Swift.Float) throws {
        try _interop.put_MaxScale(value)
    }

    /// The minimum position allowed for the InteractionTracker.
    /// - Returns: The minimum position allowed for the InteractionTracker.
    public var minPosition: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_MinPosition()
        }
    }

    /// The minimum position allowed for the InteractionTracker.
    /// - Returns: The minimum position allowed for the InteractionTracker.
    public func minPosition(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_MinPosition(value)
    }

    /// The minimum scale for the InteractionTracker.
    /// - Returns: The minimum scale for the InteractionTracker.
    public var minScale: Swift.Float {
        get throws {
            try _interop.get_MinScale()
        }
    }

    /// The minimum scale for the InteractionTracker.
    /// - Returns: The minimum scale for the InteractionTracker.
    public func minScale(_ value: Swift.Float) throws {
        try _interop.put_MinScale(value)
    }

    /// Natural resting position for the InteractionTracker.
    /// - Returns: Natural resting position for the InteractionTracker.
    public var naturalRestingPosition: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_NaturalRestingPosition()
        }
    }

    /// Natural resting scale for the InteractionTracker.
    /// - Returns: Natural resting scale for the InteractionTracker.
    public var naturalRestingScale: Swift.Float {
        get throws {
            try _interop.get_NaturalRestingScale()
        }
    }

    /// The IInteractionTrackerOwner associated with the InteractionTracker.
    /// - Returns: The IInteractionTrackerOwner associated with the InteractionTracker.
    public var owner: WindowsUICompositionInteractions_IInteractionTrackerOwner {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Owner())
        }
    }

    /// The output position calculated by the InteractionTracker. The current position is a relative value. During the Idle and CustomAnimation states, it will always be between the values specified in the MinPosition and MaxPosition properties. The InteractionTracker’s position property can go outside this range during the Interacting and Inertia states in order to show a bounce or resistance at the boundary.
    /// - Returns: The output position calculated by the InteractionTracker.
    public var position: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Inertia decay rate for position. Range is from 0 to 1.
    /// - Returns: Inertia decay rate for position. Range is from 0 to 1.
    public var positionInertiaDecayRate: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>? {
        get throws {
            try _interop.get_PositionInertiaDecayRate()
        }
    }

    /// Inertia decay rate for position. Range is from 0 to 1.
    /// - Returns: Inertia decay rate for position. Range is from 0 to 1.
    public func positionInertiaDecayRate(_ value: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>?) throws {
        try _interop.put_PositionInertiaDecayRate(value)
    }

    /// The velocity currently applied to position.
    /// - Returns: The velocity currently applied to position.
    public var positionVelocityInPixelsPerSecond: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_PositionVelocityInPixelsPerSecond()
        }
    }

    /// The output scale calculated by the InteractionTracker. The current scale is a relative value that depends on the values specified in the MinScale and MaxScale properties.
    /// - Returns: The output scale calculated by the InteractionTracker.
    public var scale: Swift.Float {
        get throws {
            try _interop.get_Scale()
        }
    }

    /// Inertia decay rate, for scale. Range is from 0 to 1.
    /// - Returns: Inertia decay rate for scale. Range is from 0 to 1.
    public var scaleInertiaDecayRate: Swift.Float? {
        get throws {
            try _interop.get_ScaleInertiaDecayRate()
        }
    }

    /// Inertia decay rate, for scale. Range is from 0 to 1.
    /// - Returns: Inertia decay rate for scale. Range is from 0 to 1.
    public func scaleInertiaDecayRate(_ value: Swift.Float?) throws {
        try _interop.put_ScaleInertiaDecayRate(value)
    }

    /// The rate of change for scale.
    /// - Returns: The rate of change for scale.
    public var scaleVelocityInPercentPerSecond: Swift.Float {
        get throws {
            try _interop.get_ScaleVelocityInPercentPerSecond()
        }
    }

    /// Adjusts the position x coordinate if it is greater than the specified threshold.
    /// - Parameter adjustment: The amount to adjust the position x coordinate.
    /// - Parameter positionThreshold: The threshold for ajusting the position x coordinate.
    public func adjustPositionXIfGreaterThanThreshold(_ adjustment: Swift.Float, _ positionThreshold: Swift.Float) throws {
        try _interop.adjustPositionXIfGreaterThanThreshold(adjustment, positionThreshold)
    }

    /// Adjusts the position y coordinate if it is greater than the specified threshold.
    /// - Parameter adjustment: The amount to adjust the position y coordinate.
    /// - Parameter positionThreshold: The threshold for ajusting the position y coordinate.
    public func adjustPositionYIfGreaterThanThreshold(_ adjustment: Swift.Float, _ positionThreshold: Swift.Float) throws {
        try _interop.adjustPositionYIfGreaterThanThreshold(adjustment, positionThreshold)
    }

    public func configurePositionXInertiaModifiers(_ modifiers: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_InteractionTrackerInertiaModifier?>?) throws {
        try _interop.configurePositionXInertiaModifiers(modifiers)
    }

    public func configurePositionYInertiaModifiers(_ modifiers: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_InteractionTrackerInertiaModifier?>?) throws {
        try _interop.configurePositionYInertiaModifiers(modifiers)
    }

    public func configureScaleInertiaModifiers(_ modifiers: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_InteractionTrackerInertiaModifier?>?) throws {
        try _interop.configureScaleInertiaModifiers(modifiers)
    }

    /// Tries to update the InteractionTracker 's position.
    /// - Parameter value: The new position for the InteractionTracker.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePosition(_ value: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdatePosition(value)
    }

    /// Tries to adjust the InteractionTracker 's position by the specified amount.
    /// - Parameter amount: The value to add to the current position.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePositionBy(_ amount: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdatePositionBy(amount)
    }

    /// Tries to update the InteractionTracker 's position by applying an animation.
    /// - Parameter animation: The animation to apply to the InteractionTracker.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePositionWithAnimation(_ animation: WindowsUIComposition_CompositionAnimation?) throws -> Swift.Int32 {
        try _interop.tryUpdatePositionWithAnimation(animation)
    }

    /// Tries to update the InteractionTracker 's position by adding velocity.
    /// - Parameter velocityInPixelsPerSecond: The velocity to add in pixels per second.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePositionWithAdditionalVelocity(_ velocityInPixelsPerSecond: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdatePositionWithAdditionalVelocity(velocityInPixelsPerSecond)
    }

    /// Tries to update the scale to the specified value.
    /// - Parameter value: The new value for scale.
    /// - Parameter centerPoint: The new center point.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdateScale(_ value: Swift.Float, _ centerPoint: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdateScale(value, centerPoint)
    }

    /// Tries to update the scale with the specified animation.
    /// - Parameter animation: The animation to apply to the scale.
    /// - Parameter centerPoint: The new center point.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdateScaleWithAnimation(_ animation: WindowsUIComposition_CompositionAnimation?, _ centerPoint: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdateScaleWithAnimation(animation, centerPoint)
    }

    /// Tries to update the scale by adding the specified velocity.
    /// - Parameter velocityInPercentPerSecond: The velocity to add to the scale.
    /// - Parameter centerPoint: The new center point.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdateScaleWithAdditionalVelocity(_ velocityInPercentPerSecond: Swift.Float, _ centerPoint: WindowsFoundationNumerics_Vector3) throws -> Swift.Int32 {
        try _interop.tryUpdateScaleWithAdditionalVelocity(velocityInPercentPerSecond, centerPoint)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTracker2 members

    public func configureCenterPointXInertiaModifiers(_ conditionalValues: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_CompositionConditionalValue?>?) throws {
        try _iinteractionTracker2.configureCenterPointXInertiaModifiers(conditionalValues)
    }

    public func configureCenterPointYInertiaModifiers(_ conditionalValues: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_CompositionConditionalValue?>?) throws {
        try _iinteractionTracker2.configureCenterPointYInertiaModifiers(conditionalValues)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTracker3 members

    public func configureVector2PositionInertiaModifiers(_ modifiers: WindowsFoundationCollections_IIterable<WindowsUICompositionInteractions_InteractionTrackerVector2InertiaModifier?>?) throws {
        try _iinteractionTracker3.configureVector2PositionInertiaModifiers(modifiers)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTracker4 members

    /// Gets a value that indicates whether the inertia is the result of an impulse.
    /// - Returns: **true** if the inertia is the result of an impulse; otherwise, **false**.
    public var isInertiaFromImpulse: Swift.Bool {
        get throws {
            try _iinteractionTracker4.get_IsInertiaFromImpulse()
        }
    }

    /// Tries to update the position of the InteractionTracker using the specified clamping option.
    /// - Parameter value: The new position for the InteractionTracker.
    /// - Parameter option: A value that specifies how values are clamped to the maximum and minimum.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePosition(_ value: WindowsFoundationNumerics_Vector3, _ option: WindowsUICompositionInteractions_InteractionTrackerClampingOption) throws -> Swift.Int32 {
        try _iinteractionTracker4.tryUpdatePositionWithOption(value, option)
    }

    /// Tries to adjust the position of the InteractionTracker by the specified amount using the specified clamping option.
    /// - Parameter amount: The value to add to the current position.
    /// - Parameter option: A value that specifies how values are clamped to the maximum and minimum.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePositionBy(_ amount: WindowsFoundationNumerics_Vector3, _ option: WindowsUICompositionInteractions_InteractionTrackerClampingOption) throws -> Swift.Int32 {
        try _iinteractionTracker4.tryUpdatePositionByWithOption(amount, option)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTracker5 members

    /// Tries to update the position of the InteractionTracker using the specified clamping option.
    /// - Parameter value: The new position for the InteractionTracker.
    /// - Parameter option: A value that specifies how values are clamped to the maximum and minimum.
    /// - Parameter posUpdateOption: A value that specifies whether an already running custom scale animation should be allowed to continue running.
    /// - Returns: Returns the request ID. On state transitions, the request which caused the change in state will be included in the args. These IDs will start at 1 and increase with each try call during the lifetime of the application.
    public func tryUpdatePosition(_ value: WindowsFoundationNumerics_Vector3, _ option: WindowsUICompositionInteractions_InteractionTrackerClampingOption, _ posUpdateOption: WindowsUICompositionInteractions_InteractionTrackerPositionUpdateOption) throws -> Swift.Int32 {
        try _iinteractionTracker5.tryUpdatePositionWithOption(value, option, posUpdateOption)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTrackerStatics2 members

    /// Sets the binding axis mode between two interaction trackers.
    /// - Parameter boundTracker1: The first interaction tracker in the binding.
    /// - Parameter boundTracker2: The second interaction tracker in the binding.
    /// - Parameter axisMode: The axis that is being bound.
    public static func setBindingMode(_ boundTracker1: WindowsUICompositionInteractions_InteractionTracker?, _ boundTracker2: WindowsUICompositionInteractions_InteractionTracker?, _ axisMode: WindowsUICompositionInteractions_InteractionBindingAxisModes) throws {
        try _iinteractionTrackerStatics2.setBindingMode(boundTracker1, boundTracker2, axisMode)
    }

    /// Retrieves the binding axis mode between two interaction trackers.
    /// - Parameter boundTracker1: The first interaction tracker in the binding.
    /// - Parameter boundTracker2: The second interaction tracker in the binding.
    public static func getBindingMode(_ boundTracker1: WindowsUICompositionInteractions_InteractionTracker?, _ boundTracker2: WindowsUICompositionInteractions_InteractionTracker?) throws -> WindowsUICompositionInteractions_InteractionBindingAxisModes {
        try _iinteractionTrackerStatics2.getBindingMode(boundTracker1, boundTracker2)
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTrackerStatics members

    /// Creates an instance of InteractionTracker.
    /// - Parameter compositor: The compositor to use when creating the InteractionTracker.
    /// - Returns: Returns the created InteractionTracker object.
    public static func create(_ compositor: WindowsUIComposition_Compositor?) throws -> WindowsUICompositionInteractions_InteractionTracker {
        try COM.NullResult.unwrap(_iinteractionTrackerStatics.create(compositor))
    }

    /// Creates an instance of InteractionTracker with the specified owner.
    /// - Parameter compositor: The compositor to use to create the instance of InteractionTracker.
    /// - Parameter owner: The InteractionTracker owner to associate with the created InteractionTracker.
    /// - Returns: Returns the created InteractionTracker object.
    public static func createWithOwner(_ compositor: WindowsUIComposition_Compositor?, _ owner: WindowsUICompositionInteractions_IInteractionTrackerOwner?) throws -> WindowsUICompositionInteractions_InteractionTracker {
        try COM.NullResult.unwrap(_iinteractionTrackerStatics.createWithOwner(compositor, owner))
    }

    // MARK: Implementation details

    private var _iinteractionTracker2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker2>? = nil

    internal var _iinteractionTracker2: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker2> {
        get throws {
            try _iinteractionTracker2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker2.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker2.self)
            }
        }
    }

    private var _iinteractionTracker3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker3>? = nil

    internal var _iinteractionTracker3: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker3> {
        get throws {
            try _iinteractionTracker3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker3.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker3.self)
            }
        }
    }

    private var _iinteractionTracker4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker4>? = nil

    internal var _iinteractionTracker4: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker4> {
        get throws {
            try _iinteractionTracker4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker4.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker4.self)
            }
        }
    }

    private var _iinteractionTracker5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker5>? = nil

    internal var _iinteractionTracker5: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker5> {
        get throws {
            try _iinteractionTracker5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker5.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTracker5.self)
            }
        }
    }

    deinit {
        _iinteractionTracker2_storage?.release()
        _iinteractionTracker3_storage?.release()
        _iinteractionTracker4_storage?.release()
        _iinteractionTracker5_storage?.release()
    }

    private static var _iinteractionTrackerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics2>? = nil

    internal static var _iinteractionTrackerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics2> {
        get throws {
            try _iinteractionTrackerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.Interactions.InteractionTracker", id: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics2.iid)
            }
        }
    }

    private static var _iinteractionTrackerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics>? = nil

    internal static var _iinteractionTrackerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics> {
        get throws {
            try _iinteractionTrackerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Composition.Interactions.InteractionTracker", id: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerStatics.iid)
            }
        }
    }
}