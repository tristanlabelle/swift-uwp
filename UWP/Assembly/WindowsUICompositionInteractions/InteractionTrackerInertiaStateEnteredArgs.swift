// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Arguments for the IInteractionTrackerOwner.InertiaStateEntered callback.
public final class WindowsUICompositionInteractions_InteractionTrackerInertiaStateEnteredArgs: WindowsRuntime.WinRTImport<WindowsUICompositionInteractions_InteractionTrackerInertiaStateEnteredArgsProjection> {
    // MARK: Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs members

    /// The InteractionTracker 's resting position when inertia completes after InteractionTrackerInertiaModifier s and boundaries have been applied.
    /// - Returns: The InteractionTracker 's resting position when inertia completes after InteractionTrackerInertiaModifier s and boundaries have been applied.
    public var modifiedRestingPosition: WindowsFoundation_IReference<WindowsFoundationNumerics_Vector3>? {
        get throws {
            try _interop.get_ModifiedRestingPosition()
        }
    }

    /// The InteractionTracker 's resting scale when inertia completes, after InteractionTrackerInertiaModifiers and boundaries have been applied.
    /// - Returns: The InteractionTracker 's resting scale when inertia completes, after InteractionTrackerInertiaModifiers and boundaries have been applied.
    public var modifiedRestingScale: Swift.Float? {
        get throws {
            try _interop.get_ModifiedRestingScale()
        }
    }

    /// The InteractionTracker 's resting position when inertia completes, without any modifiers or boundaries applied.
    /// - Returns: The InteractionTracker 's resting position when inertia completes, without any modifiers or boundaries applied.
    public var naturalRestingPosition: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_NaturalRestingPosition()
        }
    }

    /// The InteractionTracker 's resting scale when inertia completes, without accounting for InteractionTrackerInertiaModifier s or boundaries.
    /// - Returns: The InteractionTracker 's resting scale when inertia completes, without accounting for InteractionTrackerInertiaModifier s or boundaries.
    public var naturalRestingScale: Swift.Float {
        get throws {
            try _interop.get_NaturalRestingScale()
        }
    }

    /// The velocity of InteractionTracker 's position.
    /// - Returns: The velocity of InteractionTracker 's position.
    public var positionVelocityInPixelsPerSecond: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_PositionVelocityInPixelsPerSecond()
        }
    }

    /// The ID of the request that triggered the callback. Represents the ID of the request that caused InteractionTracker to enter the Inertia State (the InertiaStateEntered callback was triggered). Note that the RequestID property will be incremented each time a request tries to change the state of InteractionTracker.
    /// - Returns: The ID of the request that triggered the callback.
    public var requestId: Swift.Int32 {
        get throws {
            try _interop.get_RequestId()
        }
    }

    /// The velocity of InteractionTracker 's scale.
    /// - Returns: The velocity of InteractionTracker 's scale.
    public var scaleVelocityInPercentPerSecond: Swift.Float {
        get throws {
            try _interop.get_ScaleVelocityInPercentPerSecond()
        }
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2 members

    /// Gets a value that indicates whether the inertia is the result of an impulse.
    /// - Returns: **true** if the inertia is the result of an impulse; otherwise, **false**.
    public var isInertiaFromImpulse: Swift.Bool {
        get throws {
            try _iinteractionTrackerInertiaStateEnteredArgs2.get_IsInertiaFromImpulse()
        }
    }

    // MARK: Windows.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3 members

    /// Gets a value that indicates whether this state was entered through interaction with a tracker that this one is bound to.
    /// - Returns: **true** if this state was entered through interaction with a tracker that this one is bound to; **false** if the state was entered through interaction directly with this tracker.
    public var isFromBinding: Swift.Bool {
        get throws {
            try _iinteractionTrackerInertiaStateEnteredArgs3.get_IsFromBinding()
        }
    }

    // MARK: Implementation details

    private var _iinteractionTrackerInertiaStateEnteredArgs2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs2>? = nil

    internal var _iinteractionTrackerInertiaStateEnteredArgs2: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs2> {
        get throws {
            try _iinteractionTrackerInertiaStateEnteredArgs2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs2.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs2.self)
            }
        }
    }

    private var _iinteractionTrackerInertiaStateEnteredArgs3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs3>? = nil

    internal var _iinteractionTrackerInertiaStateEnteredArgs3: COM.COMInterop<CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs3> {
        get throws {
            try _iinteractionTrackerInertiaStateEnteredArgs3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs3.iid).cast(to: CWinRT.SWRT_WindowsUICompositionInteractions_IInteractionTrackerInertiaStateEnteredArgs3.self)
            }
        }
    }

    deinit {
        _iinteractionTrackerInertiaStateEnteredArgs2_storage?.release()
        _iinteractionTrackerInertiaStateEnteredArgs3_storage?.release()
    }
}