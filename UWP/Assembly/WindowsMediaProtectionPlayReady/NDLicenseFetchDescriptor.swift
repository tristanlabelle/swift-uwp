// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Retrieves and sets properties used for fetching a PlayReady-ND license.
public final class WindowsMediaProtectionPlayReady_NDLicenseFetchDescriptor: WindowsRuntime.WinRTImport<WindowsMediaProtectionPlayReady_NDLicenseFetchDescriptorProjection>, WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptorProtocol {
    // MARK: Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptorFactory members

    public convenience init(_ contentIDType: WindowsMediaProtectionPlayReady_NDContentIDType, _ contentIDBytes: [Swift.UInt8], _ licenseFetchChallengeCustomData: WindowsMediaProtectionPlayReady_INDCustomData?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._indlicenseFetchDescriptorFactory.createInstance(contentIDType, contentIDBytes, licenseFetchChallengeCustomData)))
    }

    // MARK: Windows.Media.Protection.PlayReady.INDLicenseFetchDescriptor members

    /// Gets the content identifer.
    /// - Returns: The content identifier.
    public var contentID: [Swift.UInt8] {
        get throws {
            try _interop.get_ContentID()
        }
    }

    /// Gets the type of the content identifier.
    /// - Returns: The content identifier type. This value can be **KeyID**, **PlayReadyObject**, or **Custom**.
    public var contentIDType: WindowsMediaProtectionPlayReady_NDContentIDType {
        get throws {
            try _interop.get_ContentIDType()
        }
    }

    /// Gets or sets custom data for a license fetch challenge.
    /// - Returns: The custom data from or for the license challenge.
    public var licenseFetchChallengeCustomData: WindowsMediaProtectionPlayReady_INDCustomData {
        get throws {
            try COM.NullResult.unwrap(_interop.get_LicenseFetchChallengeCustomData())
        }
    }

    /// Gets or sets custom data for a license fetch challenge.
    /// - Returns: The custom data from or for the license challenge.
    public func licenseFetchChallengeCustomData(_ licenseFetchChallengeCustomData: WindowsMediaProtectionPlayReady_INDCustomData?) throws {
        try _interop.put_LicenseFetchChallengeCustomData(licenseFetchChallengeCustomData)
    }

    // MARK: Implementation details

    private static var _indlicenseFetchDescriptorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptorFactory>? = nil

    internal static var _indlicenseFetchDescriptorFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptorFactory> {
        get throws {
            try _indlicenseFetchDescriptorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Protection.PlayReady.NDLicenseFetchDescriptor", id: CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptorFactory.iid)
            }
        }
    }
}