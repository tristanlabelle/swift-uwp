// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Creates PlayReady-ND sessions, coordinates with the download engine and the stream parser (for example, an MPEG-2 demuxer), manages the sample buffer, and listens to media stream source events.
public final class WindowsMediaProtectionPlayReady_NDClient: WindowsRuntime.WinRTImport<WindowsMediaProtectionPlayReady_NDClientProjection> {
    // MARK: Windows.Media.Protection.PlayReady.INDClientFactory members

    public convenience init(_ downloadEngine: WindowsMediaProtectionPlayReady_INDDownloadEngine?, _ streamParser: WindowsMediaProtectionPlayReady_INDStreamParser?, _ pMessenger: WindowsMediaProtectionPlayReady_INDMessenger?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._indclientFactory.createInstance(downloadEngine, streamParser, pMessenger)))
    }

    // MARK: Windows.Media.Protection.PlayReady.INDClient members

    /// Notifies listeners that a closed caption acquisition operation has completed.
    public func closedCaptionDataReceived(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtectionPlayReady_NDClient?, WindowsMediaProtectionPlayReady_INDClosedCaptionDataReceivedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ClosedCaptionDataReceived(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: closedCaptionDataReceived)
    }

    public func closedCaptionDataReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ClosedCaptionDataReceived(token)
    }

    /// Notifies listeners that a license fetch operation has completed.
    public func licenseFetchCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtectionPlayReady_NDClient?, WindowsMediaProtectionPlayReady_INDLicenseFetchCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LicenseFetchCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: licenseFetchCompleted)
    }

    public func licenseFetchCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LicenseFetchCompleted(token)
    }

    /// Notifies listeners that a proximity detection operation has completed.
    public func proximityDetectionCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtectionPlayReady_NDClient?, WindowsMediaProtectionPlayReady_INDProximityDetectionCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ProximityDetectionCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: proximityDetectionCompleted)
    }

    public func proximityDetectionCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ProximityDetectionCompleted(token)
    }

    /// Notifies listeners that the app should start re-registration by calling the ReRegistrationAsync method.
    public func reRegistrationNeeded(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtectionPlayReady_NDClient?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ReRegistrationNeeded(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: reRegistrationNeeded)
    }

    public func reRegistrationNeeded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ReRegistrationNeeded(token)
    }

    /// Notifies listeners that a registration operation has completed.
    public func registrationCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaProtectionPlayReady_NDClient?, WindowsMediaProtectionPlayReady_INDRegistrationCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_RegistrationCompleted(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: registrationCompleted)
    }

    public func registrationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_RegistrationCompleted(token)
    }

    /// Starts the registration, proximity detection, and license fetch procedures between a client receiver and a transmitter.
    /// - Parameter contentUrl: The URL of the streamed content.
    /// - Parameter startAsyncOptions: The asynchronous start options. See the NDStartAsyncOptions enumeration for a detailed description of these options.
    /// - Parameter registrationCustomData: The custom data type identifier that is used for registration with the transmitter.
    /// - Parameter licenseFetchDescriptor: The descriptor used for license fetching.
    /// - Returns: The result of the asynchronous start call.
    public func startAsync(_ contentUrl: WindowsFoundation_Uri?, _ startAsyncOptions: Swift.UInt32, _ registrationCustomData: WindowsMediaProtectionPlayReady_INDCustomData?, _ licenseFetchDescriptor: WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptor?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaProtectionPlayReady_INDStartResult?> {
        try COM.NullResult.unwrap(_interop.startAsync(contentUrl, startAsyncOptions, registrationCustomData, licenseFetchDescriptor))
    }

    /// Performs a license fetch between a client receiver and a transmitter.
    /// - Parameter licenseFetchDescriptor: Descriptor for the license being fetched.
    /// - Returns: The result of the asynchronous license fetch call.
    public func licenseFetchAsync(_ licenseFetchDescriptor: WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptor?) throws -> WindowsFoundation_IAsyncOperation<WindowsMediaProtectionPlayReady_INDLicenseFetchResult?> {
        try COM.NullResult.unwrap(_interop.licenseFetchAsync(licenseFetchDescriptor))
    }

    /// Performs a proximity detection and reregistration between a client receiver and a transmitter.
    /// - Parameter registrationCustomData: Custom data for the registration request.
    /// - Returns: The result of the asynchronous reregistration call.
    public func reRegistrationAsync(_ registrationCustomData: WindowsMediaProtectionPlayReady_INDCustomData?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.reRegistrationAsync(registrationCustomData))
    }

    /// Closes the current playback session regardless of whether it is in the registration, proximity detection, license fetch, or play state.
    public func close() throws {
        try _interop.close()
    }

    // MARK: Implementation details

    private static var _indclientFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDClientFactory>? = nil

    internal static var _indclientFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDClientFactory> {
        get throws {
            try _indclientFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Protection.PlayReady.NDClient", id: CWinRT.SWRT_WindowsMediaProtectionPlayReady_INDClientFactory.iid)
            }
        }
    }
}