// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains methods that a stream parser plug-in uses to send notifications to a PlayReady-ND client.
public final class WindowsMediaProtectionPlayReady_NDStreamParserNotifier: WindowsRuntime.WinRTImport<WindowsMediaProtectionPlayReady_NDStreamParserNotifierProjection>, WindowsMediaProtectionPlayReady_INDStreamParserNotifierProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaProtectionPlayReady_NDStreamParserNotifierProjection.self))
    }

    // MARK: Windows.Media.Protection.PlayReady.INDStreamParserNotifier members

    /// Called by a stream parser when it receives the content identifier.
    /// - Parameter licenseFetchDescriptor: The license fetch descriptor containing the content identifier.
    public func onContentIDReceived(_ licenseFetchDescriptor: WindowsMediaProtectionPlayReady_INDLicenseFetchDescriptor?) throws {
        try _interop.onContentIDReceived(licenseFetchDescriptor)
    }

    public func onMediaStreamDescriptorCreated(_ audioStreamDescriptors: WindowsFoundationCollections_IVector<WindowsMediaCore_AudioStreamDescriptor?>?, _ videoStreamDescriptors: WindowsFoundationCollections_IVector<WindowsMediaCore_VideoStreamDescriptor?>?) throws {
        try _interop.onMediaStreamDescriptorCreated(audioStreamDescriptors, videoStreamDescriptors)
    }

    /// Called when the stream parser parses a sample from the media stream.
    /// - Parameter streamID: The identifier for the media stream that is being parsed.
    /// - Parameter streamType: The type of the media stream. This value can be **Audio** or **Video**.
    /// - Parameter streamSample: The array of stream samples.
    /// - Parameter pts: The presentation timestamp that indicates when to play the sample, in milliseconds. This value is relative to previous samples in the presentation. For example, if a given sample has a presentation time stamp of 1000 and some later sample has a presentation time stamp of 2000, the later sample occurs one second (1000ms) after the given sample.
    /// - Parameter ccFormat: The closed caption format. This value can be **ATSC**, **SCTE20**, or **Unknown**.
    /// - Parameter ccDataBytes: An array that contains the closed caption data.
    public func onSampleParsed(_ streamID: Swift.UInt32, _ streamType: WindowsMediaProtectionPlayReady_NDMediaStreamType, _ streamSample: WindowsMediaCore_MediaStreamSample?, _ pts: Swift.Int64, _ ccFormat: WindowsMediaProtectionPlayReady_NDClosedCaptionFormat, _ ccDataBytes: [Swift.UInt8]) throws {
        try _interop.onSampleParsed(streamID, streamType, streamSample, pts, ccFormat, ccDataBytes)
    }

    /// Called by the stream parser when it requests a setup decryptor.
    /// - Parameter descriptor: The descriptor of the media stream being decrypted.
    /// - Parameter keyID: The key identifier used for decryption.
    /// - Parameter proBytes: The data for the setup decryptor.
    public func onBeginSetupDecryptor(_ descriptor: WindowsMediaCore_IMediaStreamDescriptor?, _ keyID: Foundation.UUID, _ proBytes: [Swift.UInt8]) throws {
        try _interop.onBeginSetupDecryptor(descriptor, keyID, proBytes)
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Protection.PlayReady.NDStreamParserNotifier", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}