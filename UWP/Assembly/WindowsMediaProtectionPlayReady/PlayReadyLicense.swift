// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the properties of a PlayReady license.
public final class WindowsMediaProtectionPlayReady_PlayReadyLicense: WindowsRuntime.WinRTImport<WindowsMediaProtectionPlayReady_PlayReadyLicenseProjection>, WindowsMediaProtectionPlayReady_IPlayReadyLicenseProtocol {
    // MARK: Windows.Media.Protection.PlayReady.IPlayReadyLicense members

    /// Gets the chain depth of the license chain represented by the current PlayReadyLicense class.
    /// - Returns: The chain depth of the license chain.
    public var chainDepth: Swift.UInt32 {
        get throws {
            try _interop.get_ChainDepth()
        }
    }

    /// Gets the domain account identifier to which this license is bound.
    /// - Returns: The domain account identifier. If the license is not domain bound, **GUID_NULL** is returned. This property value is sensitive to the underlying platform's endianness. Carefully test your app on all platforms you intend to support to ensure that correct endianness is used on each platform.
    public var domainAccountID: Foundation.UUID {
        get throws {
            try _interop.get_DomainAccountID()
        }
    }

    /// Gets the expiration date of the current license.
    /// - Returns: The expiration date of the current license.
    public var expirationDate: WindowsFoundation_IReference<WindowsFoundation_DateTime>? {
        get throws {
            try _interop.get_ExpirationDate()
        }
    }

    /// Gets the amount of time, in seconds, before the current license expires after the media is first played.
    /// - Returns: The time, in seconds, before the current license expires after the media is first played.
    public var expireAfterFirstPlay: Swift.UInt32 {
        get throws {
            try _interop.get_ExpireAfterFirstPlay()
        }
    }

    /// Gets the state of the license.
    /// - Returns: Indicates whether this license chain is evaluated or whether this license chain may be unusable due to enumeration for all licenses (including those that are unusable) being performed. If **true**, the license chain is evaluated. If **false**, the license chain may be unusable.
    public var fullyEvaluated: Swift.Bool {
        get throws {
            try _interop.get_FullyEvaluated()
        }
    }

    /// Gets whether this license is usable for playback.
    /// - Returns: **true** if this license is usable for playback, otherwise **false**.
    public var usableForPlay: Swift.Bool {
        get throws {
            try _interop.get_UsableForPlay()
        }
    }

    /// Gets the key identifier (KID) of the license at the specified chain depth.
    /// - Parameter chainDepth: The depth of the license in the chain for which to retrieve the KID. This value is a 0-based index.
    /// - Returns: The KID of the license. This return value is sensitive to the underlying platform's endianness. Carefully test your app on all platforms you intend to support to ensure that correct endianness is used on each platform.
    public func getKIDAtChainDepth(_ chainDepth: Swift.UInt32) throws -> Foundation.UUID {
        try _interop.getKIDAtChainDepth(chainDepth)
    }

    // MARK: Windows.Media.Protection.PlayReady.IPlayReadyLicense2 members

    /// Gets a value that indicates if the license can expire in the middle of playback or if only expires when attempting a fresh playback.
    /// - Returns: True if the license can expire in the middle of playback; otherwise, false.
    public var expiresInRealTime: Swift.Bool {
        get throws {
            try _iplayReadyLicense2.get_ExpiresInRealTime()
        }
    }

    /// Gets a value that indicates if the license is in-memory-only.
    /// - Returns: True if the license is in-memory-only; otherwise, false.
    public var inMemoryOnly: Swift.Bool {
        get throws {
            try _iplayReadyLicense2.get_InMemoryOnly()
        }
    }

    /// Gets the unique identifier of the certificate for the service that handles the server-side of the SecureStop protocol.
    /// - Returns: The unique identifier of the certificate for the service that handles the server-side of the SecureStop protocol.
    public var secureStopId: Foundation.UUID {
        get throws {
            try _iplayReadyLicense2.get_SecureStopId()
        }
    }

    /// Gets a value that indicates the security level of the license.
    /// - Returns: A value that indicates the security level of the license.
    public var securityLevel: Swift.UInt32 {
        get throws {
            try _iplayReadyLicense2.get_SecurityLevel()
        }
    }

    // MARK: Implementation details

    private var _iplayReadyLicense2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_IPlayReadyLicense2>? = nil

    internal var _iplayReadyLicense2: COM.COMInterop<CWinRT.SWRT_WindowsMediaProtectionPlayReady_IPlayReadyLicense2> {
        get throws {
            try _iplayReadyLicense2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaProtectionPlayReady_IPlayReadyLicense2.iid).cast(to: CWinRT.SWRT_WindowsMediaProtectionPlayReady_IPlayReadyLicense2.self)
            }
        }
    }

    deinit {
        _iplayReadyLicense2_storage?.release()
    }
}