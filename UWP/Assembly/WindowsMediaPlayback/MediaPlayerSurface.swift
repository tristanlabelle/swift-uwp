// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to a ICompositionSurface that is shared between a MediaPlayer and a Compositor to enable the rendering of **MediaPlayer** content using the Windows.UI.Composition APIs without requiring the use of the XAML framework.
public final class WindowsMediaPlayback_MediaPlayerSurface: WindowsRuntime.WinRTImport<WindowsMediaPlayback_MediaPlayerSurfaceProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Media.Playback.IMediaPlayerSurface members

    /// Gets the ICompositionSurface for rendering MediaPlayer content.
    /// - Returns: The ICompositionSurface for rendering MediaPlayer content.
    public var compositionSurface: WindowsUIComposition_ICompositionSurface {
        get throws {
            try COM.NullResult.unwrap(_interop.get_CompositionSurface())
        }
    }

    /// Gets the Compositor with which the surface will be used.
    /// - Returns: The Compositor with which the surface will be used.
    public var compositor: WindowsUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Compositor())
        }
    }

    /// Gets the MediaPlayer associated with the MediaPlayerSurface.
    /// - Returns: The MediaPlayer associated with the MediaPlayerSurface.
    public var mediaPlayer: WindowsMediaPlayback_MediaPlayer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaPlayer())
        }
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the MediaPlayerSurface and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _iclosable_storage?.release()
    }
}