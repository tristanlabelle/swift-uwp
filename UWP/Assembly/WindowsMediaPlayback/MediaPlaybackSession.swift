// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides information about the state of the current playback session of a MediaPlayer and provides events for responding to changes in playback session state.
public final class WindowsMediaPlayback_MediaPlaybackSession: WindowsRuntime.WinRTImport<WindowsMediaPlayback_MediaPlaybackSessionProjection> {
    // MARK: Windows.Media.Playback.IMediaPlaybackSession members

    /// Gets a value that indicates the current buffering progress of a MediaPlaybackSession.
    /// - Returns: The current buffering progress. The value ranges from 0 to 1.0. Multiply by 100 to obtain a percentage.
    public var bufferingProgress: Swift.Double {
        get throws {
            try _interop.get_BufferingProgress()
        }
    }

    /// Gets a value that indicates whether media can be paused if the MediaPlayer.Pause method is called.
    /// - Returns: True if the media can be paused; otherwise, false.
    public var canPause: Swift.Bool {
        get throws {
            try _interop.get_CanPause()
        }
    }

    /// Gets a value that indicates whether the current playback position of the media can be changed by setting the value of the MediaPlayer.Position property.
    /// - Returns: True if the current playback position of the media can be changed; otherwise, false.
    public var canSeek: Swift.Bool {
        get throws {
            try _interop.get_CanSeek()
        }
    }

    /// Gets a value indicating the position after the current playback Position to which downloading has completed and content is buffered.
    /// - Returns: A value indicating the position after the current playback Position to which downloading has completed and content is buffered. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage.
    public var downloadProgress: Swift.Double {
        get throws {
            try _interop.get_DownloadProgress()
        }
    }

    /// Gets a value that indicates whether the media that is currently playing in the MediaPlaybackSession is protected by digital rights management (DRM).
    /// - Returns: True if the currently playing media is protected by DRM; otherwise, false.
    public var isProtected: Swift.Bool {
        get throws {
            try _interop.get_IsProtected()
        }
    }

    /// Gets the MediaPlayer associated with the MediaPlaybackSession.
    /// - Returns: The MediaPlayer associated with the MediaPlaybackSession.
    public var mediaPlayer: WindowsMediaPlayback_MediaPlayer {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MediaPlayer())
        }
    }

    /// Gets a value indicating the duration of the currently playing media, when being played back at normal speed.
    /// - Returns: The duration of the currently playing media.
    public var naturalDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_NaturalDuration()
        }
    }

    /// Gets the height of the video in the currently playing media item.
    /// - Returns: The height of the video in the currently playing media item, in pixels.
    public var naturalVideoHeight: Swift.UInt32 {
        get throws {
            try _interop.get_NaturalVideoHeight()
        }
    }

    /// Gets the width of the video in the currently playing media item.
    /// - Returns: The width of the video in the currently playing media item, in pixels.
    public var naturalVideoWidth: Swift.UInt32 {
        get throws {
            try _interop.get_NaturalVideoWidth()
        }
    }

    /// Gets or sets a normalized rectangle within the video source which is rendered by the MediaPlayer. This enables pan and zoom within video.
    /// - Returns: A normalized rectangle specifying the rectangle within the source video that is rendered by the MediaPlayer.
    public var normalizedSourceRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_NormalizedSourceRect()
        }
    }

    /// Gets or sets a normalized rectangle within the video source which is rendered by the MediaPlayer. This enables pan and zoom within video.
    /// - Returns: A normalized rectangle specifying the rectangle within the source video that is rendered by the MediaPlayer.
    public func normalizedSourceRect(_ value: WindowsFoundation_Rect) throws {
        try _interop.put_NormalizedSourceRect(value)
    }

    /// Gets or sets a value representing the current playback rate for the MediaPlaybackSession.
    /// - Returns: The current playback rate for the MediaPlaybackSession.
    public var playbackRate: Swift.Double {
        get throws {
            try _interop.get_PlaybackRate()
        }
    }

    /// Gets or sets a value representing the current playback rate for the MediaPlaybackSession.
    /// - Returns: The current playback rate for the MediaPlaybackSession.
    public func playbackRate(_ value: Swift.Double) throws {
        try _interop.put_PlaybackRate(value)
    }

    /// Gets a value indicating the current playback state of the MediaPlaybackSession, such as buffering or playing.
    /// - Returns: The current playback state of the MediaPlaybackSession
    public var playbackState: WindowsMediaPlayback_MediaPlaybackState {
        get throws {
            try _interop.get_PlaybackState()
        }
    }

    /// Gets or sets the current playback position within the currently playing media.
    /// - Returns: The current playback position within the currently playing media.
    public var position: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets or sets the current playback position within the currently playing media.
    /// - Returns: The current playback position within the currently playing media.
    public func position(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Position(value)
    }

    /// Gets or sets a value specifying the stereoscopic video packing mode for the MediaPlaybackSession.
    /// - Returns: The stereoscopic video packing mode
    public var stereoscopicVideoPackingMode: WindowsMediaMediaProperties_StereoscopicVideoPackingMode {
        get throws {
            try _interop.get_StereoscopicVideoPackingMode()
        }
    }

    /// Gets or sets a value specifying the stereoscopic video packing mode for the MediaPlaybackSession.
    /// - Returns: The stereoscopic video packing mode
    public func stereoscopicVideoPackingMode(_ value: WindowsMediaMediaProperties_StereoscopicVideoPackingMode) throws {
        try _interop.put_StereoscopicVideoPackingMode(value)
    }

    /// Occurs when buffering ends for the MediaPlaybackSession.
    public func bufferingEnded(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingEnded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingEnded)
    }

    public func bufferingEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingEnded(token)
    }

    /// Occurs when the buffering progress for the MediaPlaybackSession changes.
    public func bufferingProgressChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingProgressChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingProgressChanged)
    }

    public func bufferingProgressChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingProgressChanged(token)
    }

    /// Occurs when buffering starts for the MediaPlaybackSession.
    public func bufferingStarted(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingStarted(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingStarted)
    }

    public func bufferingStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingStarted(token)
    }

    /// Occurs when the download progress for a MediaPlaybackSession changes.
    public func downloadProgressChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_DownloadProgressChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: downloadProgressChanged)
    }

    public func downloadProgressChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_DownloadProgressChanged(token)
    }

    /// Occurs when the duration of the currently playing media item changes.
    public func naturalDurationChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_NaturalDurationChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: naturalDurationChanged)
    }

    public func naturalDurationChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_NaturalDurationChanged(token)
    }

    /// Occurs when the size of the video in the currently playing media item changes.
    public func naturalVideoSizeChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_NaturalVideoSizeChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: naturalVideoSizeChanged)
    }

    public func naturalVideoSizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_NaturalVideoSizeChanged(token)
    }

    /// Occurs when the current playback rate for the MediaPlaybackSession changes.
    public func playbackRateChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PlaybackRateChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackRateChanged)
    }

    public func playbackRateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PlaybackRateChanged(token)
    }

    /// Occurs when the current playback state changes.
    public func playbackStateChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PlaybackStateChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackStateChanged)
    }

    public func playbackStateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PlaybackStateChanged(token)
    }

    /// Occurs when the current playback position within the currently playing media changes.
    public func positionChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PositionChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: positionChanged)
    }

    public func positionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PositionChanged(token)
    }

    /// Occurs when a seek operation for the MediaPlaybackSession completes.
    public func seekCompleted(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SeekCompleted(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: seekCompleted)
    }

    public func seekCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SeekCompleted(token)
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackSession2 members

    /// Gets or sets a value indicating whether the content of the media playback session is currently being mirrored horizontally.
    /// - Returns: True if the content of the media playback session is currently being mirrored horizontally; otherwise, false.
    public var isMirroring: Swift.Bool {
        get throws {
            try _imediaPlaybackSession2.get_IsMirroring()
        }
    }

    /// Gets or sets a value indicating whether the content of the media playback session is currently being mirrored horizontally.
    /// - Returns: True if the content of the media playback session is currently being mirrored horizontally; otherwise, false.
    public func isMirroring(_ value: Swift.Bool) throws {
        try _imediaPlaybackSession2.put_IsMirroring(value)
    }

    /// Gets an object that manages the spherical video projection settings used by the media playback session.
    /// - Returns: An object that manages the spherical video projection settings used by the media playback session.
    public var sphericalVideoProjection: WindowsMediaPlayback_MediaPlaybackSphericalVideoProjection {
        get throws {
            try COM.NullResult.unwrap(_imediaPlaybackSession2.get_SphericalVideoProjection())
        }
    }

    /// Occurs when the set of time ranges for which data is buffered changes.
    public func bufferedRangesChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlaybackSession2.add_BufferedRangesChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferedRangesChanged)
    }

    public func bufferedRangesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlaybackSession2.remove_BufferedRangesChanged(token)
    }

    /// Occurs when the set of time ranges that have been played changes.
    public func playedRangesChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlaybackSession2.add_PlayedRangesChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: playedRangesChanged)
    }

    public func playedRangesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlaybackSession2.remove_PlayedRangesChanged(token)
    }

    /// Occurs when the set of time ranges that can be seeked to changes.
    public func seekableRangesChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlaybackSession2.add_SeekableRangesChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: seekableRangesChanged)
    }

    public func seekableRangesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlaybackSession2.remove_SeekableRangesChanged(token)
    }

    /// Occurs when the set of playback rates supported by the media playback session changes.
    public func supportedPlaybackRatesChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackSession?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlaybackSession2.add_SupportedPlaybackRatesChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: supportedPlaybackRatesChanged)
    }

    public func supportedPlaybackRatesChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlaybackSession2.remove_SupportedPlaybackRatesChanged(token)
    }

    /// Retrieves a read-only list of time ranges for which data is buffered and playback can begin immediately.
    /// - Returns: A read-only list of time ranges.
    public func getBufferedRanges() throws -> WindowsFoundationCollections_IVectorView<WindowsMedia_MediaTimeRange> {
        try COM.NullResult.unwrap(_imediaPlaybackSession2.getBufferedRanges())
    }

    /// Retrieves a read-only list of time ranges for which content has been played back.
    /// - Returns: A read-only list of time ranges.
    public func getPlayedRanges() throws -> WindowsFoundationCollections_IVectorView<WindowsMedia_MediaTimeRange> {
        try COM.NullResult.unwrap(_imediaPlaybackSession2.getPlayedRanges())
    }

    /// Retrieves a read-only list of time ranges in which the playack position can be seeked to. For live streaming, these ranges represent the times ranges for which data is still available.
    /// - Returns: A read-only list of time ranges.
    public func getSeekableRanges() throws -> WindowsFoundationCollections_IVectorView<WindowsMedia_MediaTimeRange> {
        try COM.NullResult.unwrap(_imediaPlaybackSession2.getSeekableRanges())
    }

    /// Gets a value indicating whether the specified range of playback rates is supported.
    /// - Parameter rate1: The lower bound of the playback rate range for which support is queried.
    /// - Parameter rate2: The upper bound of the playback rate range for which support is queried.
    /// - Returns: True if the playback range is supported; otherwise, false.
    public func isSupportedPlaybackRateRange(_ rate1: Swift.Double, _ rate2: Swift.Double) throws -> Swift.Bool {
        try _imediaPlaybackSession2.isSupportedPlaybackRateRange(rate1, rate2)
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackSession3 members

    /// Gets or sets a value from the MediaRotation enumeration that specifies the rotation applied to video content during playback.
    /// - Returns: The rotation applied to video content during playback.
    public var playbackRotation: WindowsMediaMediaProperties_MediaRotation {
        get throws {
            try _imediaPlaybackSession3.get_PlaybackRotation()
        }
    }

    /// Gets or sets a value from the MediaRotation enumeration that specifies the rotation applied to video content during playback.
    /// - Returns: The rotation applied to video content during playback.
    public func playbackRotation(_ value: WindowsMediaMediaProperties_MediaRotation) throws {
        try _imediaPlaybackSession3.put_PlaybackRotation(value)
    }

    /// Gets an object that expresses the current output degradation policy state of the MediaPlaybackSession.
    /// - Returns: A MediaPlaybackSessionOutputDegradationPolicyState object that expresses the current output degradation policy state.
    public func getOutputDegradationPolicyState() throws -> WindowsMediaPlayback_MediaPlaybackSessionOutputDegradationPolicyState {
        try COM.NullResult.unwrap(_imediaPlaybackSession3.getOutputDegradationPolicyState())
    }

    // MARK: Implementation details

    private var _imediaPlaybackSession2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession2>? = nil

    internal var _imediaPlaybackSession2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession2> {
        get throws {
            try _imediaPlaybackSession2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession2.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession2.self)
            }
        }
    }

    private var _imediaPlaybackSession3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession3>? = nil

    internal var _imediaPlaybackSession3: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession3> {
        get throws {
            try _imediaPlaybackSession3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession3.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSession3.self)
            }
        }
    }

    deinit {
        _imediaPlaybackSession2_storage?.release()
        _imediaPlaybackSession3_storage?.release()
    }
}