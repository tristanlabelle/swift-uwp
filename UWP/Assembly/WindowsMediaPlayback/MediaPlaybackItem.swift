// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a media item that can be played back. This class acts as a wrapper around a MediaSource that exposes the audio tracks, video tracks, and timed metadata tracks included in the media source.
public final class WindowsMediaPlayback_MediaPlaybackItem: WindowsRuntime.WinRTImport<WindowsMediaPlayback_MediaPlaybackItemProjection>, WindowsMediaPlayback_IMediaPlaybackSourceProtocol {
    // MARK: Windows.Media.Playback.IMediaPlaybackItemFactory members

    public convenience init(_ source: WindowsMediaCore_MediaSource?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imediaPlaybackItemFactory.create(source)))
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackItemFactory2 members

    public convenience init(_ source: WindowsMediaCore_MediaSource?, _ startTime: WindowsFoundation_TimeSpan) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imediaPlaybackItemFactory2.createWithStartTime(source, startTime)))
    }

    public convenience init(_ source: WindowsMediaCore_MediaSource?, _ startTime: WindowsFoundation_TimeSpan, _ durationLimit: WindowsFoundation_TimeSpan) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imediaPlaybackItemFactory2.createWithStartTimeAndDurationLimit(source, startTime, durationLimit)))
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackItem members

    /// Gets a read-only list of audio tracks in the MediaSource associated with the MediaPlaybackItem.
    /// - Returns: The read-only list of audio tracks.
    public var audioTracks: WindowsMediaPlayback_MediaPlaybackAudioTrackList {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AudioTracks())
        }
    }

    /// Gets the MediaSource object associated with the MediaPlaybackItem.
    /// - Returns: The MediaSource object associated with the MediaPlaybackItem.
    public var source: WindowsMediaCore_MediaSource {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Source())
        }
    }

    /// Gets a read-only list of timed metadata tracks in the MediaSource associated with the MediaPlaybackItem.
    /// - Returns: The read-only list of timed metadata tracks.
    public var timedMetadataTracks: WindowsMediaPlayback_MediaPlaybackTimedMetadataTrackList {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TimedMetadataTracks())
        }
    }

    /// Gets a read-only list of video tracks in the MediaSource associated with the MediaPlaybackItem.
    /// - Returns: The read-only list of video tracks.
    public var videoTracks: WindowsMediaPlayback_MediaPlaybackVideoTrackList {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VideoTracks())
        }
    }

    /// Occurs when the list of audio tracks in the MediaSource associated with the MediaPlaybackItem changes.
    public func audioTracksChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackItem?, WindowsFoundationCollections_IVectorChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_AudioTracksChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: audioTracksChanged)
    }

    public func audioTracksChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_AudioTracksChanged(token)
    }

    /// Occurs when the list of timed metadata tracks in the MediaSource associated with the MediaPlaybackItem changes.
    public func timedMetadataTracksChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackItem?, WindowsFoundationCollections_IVectorChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TimedMetadataTracksChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: timedMetadataTracksChanged)
    }

    public func timedMetadataTracksChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TimedMetadataTracksChanged(token)
    }

    /// Occurs when the list of video tracks in the MediaSource associated with the MediaPlaybackItem changes.
    public func videoTracksChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlaybackItem?, WindowsFoundationCollections_IVectorChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VideoTracksChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: videoTracksChanged)
    }

    public func videoTracksChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VideoTracksChanged(token)
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackItem2 members

    /// Gets the MediaBreakSchedule defining the schedule of media breaks for the MediaPlaybackItem.
    /// - Returns: The MediaBreakSchedule defining the schedule of media breaks for the MediaPlaybackItem.
    public var breakSchedule: WindowsMediaPlayback_MediaBreakSchedule {
        get throws {
            try COM.NullResult.unwrap(_imediaPlaybackItem2.get_BreakSchedule())
        }
    }

    /// Gets or sets a value indicating whether the MediaPlaybackItem can be skipped.
    /// - Returns: True if the MediaPlaybackItem can be skipped; otherwise, false.
    public var canSkip: Swift.Bool {
        get throws {
            try _imediaPlaybackItem2.get_CanSkip()
        }
    }

    /// Gets or sets a value indicating whether the MediaPlaybackItem can be skipped.
    /// - Returns: True if the MediaPlaybackItem can be skipped; otherwise, false.
    public func canSkip(_ value: Swift.Bool) throws {
        try _imediaPlaybackItem2.put_CanSkip(value)
    }

    /// Gets the maximum playback duration of the MediaPlaybackItem.
    /// - Returns: The maximum playback duration of the MediaPlaybackItem.
    public var durationLimit: WindowsFoundation_IReference<WindowsFoundation_TimeSpan>? {
        get throws {
            try _imediaPlaybackItem2.get_DurationLimit()
        }
    }

    /// Gets the position within the MediaPlaybackItem where playback should begin.
    /// - Returns: The position within the MediaPlaybackItem where playback should begin.
    public var startTime: WindowsFoundation_TimeSpan {
        get throws {
            try _imediaPlaybackItem2.get_StartTime()
        }
    }

    /// Gets the display properties for a MediaPlaybackItem.
    /// - Returns: The display properties for a MediaPlaybackItem.
    public func getDisplayProperties() throws -> WindowsMediaPlayback_MediaItemDisplayProperties {
        try COM.NullResult.unwrap(_imediaPlaybackItem2.getDisplayProperties())
    }

    /// Updates the display properties for the MediaPlaybackItem. These properties are used by the System Media Transport Controls to display information about the currently playing media item.
    /// - Parameter value: The display properties to apply to the MediaPlaybackItem.
    public func applyDisplayProperties(_ value: WindowsMediaPlayback_MediaItemDisplayProperties?) throws {
        try _imediaPlaybackItem2.applyDisplayProperties(value)
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackItem3 members

    /// Gets or sets a value that specifies for which types of media content, if any, the system should automatically load metadata to display in the System Media Transport Controls.
    /// - Returns: A value that specifies for which types of media content the system should automatically load and display metadata.
    public var autoLoadedDisplayProperties: WindowsMediaPlayback_AutoLoadedDisplayPropertyKind {
        get throws {
            try _imediaPlaybackItem3.get_AutoLoadedDisplayProperties()
        }
    }

    /// Gets or sets a value that specifies for which types of media content, if any, the system should automatically load metadata to display in the System Media Transport Controls.
    /// - Returns: A value that specifies for which types of media content the system should automatically load and display metadata.
    public func autoLoadedDisplayProperties(_ value: WindowsMediaPlayback_AutoLoadedDisplayPropertyKind) throws {
        try _imediaPlaybackItem3.put_AutoLoadedDisplayProperties(value)
    }

    /// Gets or sets a value that specifies whether a MediaPlaybackItem is disabled in a MediaPlaybackList.
    /// - Returns: True if the media playback item is disabled in the playback list; otherwise, false.
    public var isDisabledInPlaybackList: Swift.Bool {
        get throws {
            try _imediaPlaybackItem3.get_IsDisabledInPlaybackList()
        }
    }

    /// Gets or sets a value that specifies whether a MediaPlaybackItem is disabled in a MediaPlaybackList.
    /// - Returns: True if the media playback item is disabled in the playback list; otherwise, false.
    public func isDisabledInPlaybackList(_ value: Swift.Bool) throws {
        try _imediaPlaybackItem3.put_IsDisabledInPlaybackList(value)
    }

    /// Gets a value that indicates the proportion of the data for the **MediaPlaybackItem** that is currently downloaded.
    /// - Returns: A value, between 0 and 1.0, that indicates the total download progress of the **MediaPlaybackItem** where 0 means that none of the data has been downloaded and 1.0 means that all of the data has been downloaded.
    public var totalDownloadProgress: Swift.Double {
        get throws {
            try _imediaPlaybackItem3.get_TotalDownloadProgress()
        }
    }

    // MARK: Windows.Media.Playback.IMediaPlaybackItemStatics members

    /// Retrieves the MediaPlaybackItem associated with the provided MediaSource.
    /// - Parameter source: The MediaSource associated with the MediaPlaybackItem.
    /// - Returns: The MediaPlaybackItem associated with the provided MediaSource.
    public static func findFromMediaSource(_ source: WindowsMediaCore_MediaSource?) throws -> WindowsMediaPlayback_MediaPlaybackItem {
        try COM.NullResult.unwrap(_imediaPlaybackItemStatics.findFromMediaSource(source))
    }

    // MARK: Implementation details

    private var _imediaPlaybackSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource>? = nil

    internal var _imediaPlaybackSource: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource> {
        get throws {
            try _imediaPlaybackSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackSource.self)
            }
        }
    }

    private var _imediaPlaybackItem2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem2>? = nil

    internal var _imediaPlaybackItem2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem2> {
        get throws {
            try _imediaPlaybackItem2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem2.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem2.self)
            }
        }
    }

    private var _imediaPlaybackItem3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem3>? = nil

    internal var _imediaPlaybackItem3: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem3> {
        get throws {
            try _imediaPlaybackItem3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem3.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItem3.self)
            }
        }
    }

    deinit {
        _imediaPlaybackSource_storage?.release()
        _imediaPlaybackItem2_storage?.release()
        _imediaPlaybackItem3_storage?.release()
    }

    private static var _imediaPlaybackItemFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory>? = nil

    internal static var _imediaPlaybackItemFactory: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory> {
        get throws {
            try _imediaPlaybackItemFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Playback.MediaPlaybackItem", id: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory.iid)
            }
        }
    }

    private static var _imediaPlaybackItemFactory2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory2>? = nil

    internal static var _imediaPlaybackItemFactory2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory2> {
        get throws {
            try _imediaPlaybackItemFactory2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Playback.MediaPlaybackItem", id: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemFactory2.iid)
            }
        }
    }

    private static var _imediaPlaybackItemStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemStatics>? = nil

    internal static var _imediaPlaybackItemStatics: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemStatics> {
        get throws {
            try _imediaPlaybackItemStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Playback.MediaPlaybackItem", id: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlaybackItemStatics.iid)
            }
        }
    }
}