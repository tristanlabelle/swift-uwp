// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to media playback functionality such as play, pause, fast-forward, rewind, and volume.
public final class WindowsMediaPlayback_MediaPlayer: WindowsRuntime.WinRTImport<WindowsMediaPlayback_MediaPlayerProjection>, WindowsFoundation_IClosableProtocol {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsMediaPlayback_MediaPlayerProjection.self))
    }

    // MARK: Windows.Media.Playback.IMediaPlayer members

    /// Gets or sets a Boolean value indicating if playback automatically starts after the media is loaded.
    /// - Returns: True is playback start automatically, otherwise false.
    public var autoPlay: Swift.Bool {
        get throws {
            try _interop.get_AutoPlay()
        }
    }

    /// Gets or sets a Boolean value indicating if playback automatically starts after the media is loaded.
    /// - Returns: True is playback start automatically, otherwise false.
    public func autoPlay(_ value: Swift.Bool) throws {
        try _interop.put_AutoPlay(value)
    }

    /// Gets the amount of buffering that is completed for the media content, expressed as a percentage.
    /// - Returns: The amount of buffering that is completed for the media content.
    public var bufferingProgress: Swift.Double {
        get throws {
            try _interop.get_BufferingProgress()
        }
    }

    /// Gets a Boolean value indicating if the media can be paused.
    /// - Returns: True if the media can be paused, otherwise false.
    public var canPause: Swift.Bool {
        get throws {
            try _interop.get_CanPause()
        }
    }

    /// Gets a Boolean value indicating if the media supports seeking to a specific position.
    /// - Returns: True if the media supports seeking, otherwise false.
    public var canSeek: Swift.Bool {
        get throws {
            try _interop.get_CanSeek()
        }
    }

    /// Gets the current state of media playback. 
    /// - Returns: The current state of media playback.
    public var currentState: WindowsMediaPlayback_MediaPlayerState {
        get throws {
            try _interop.get_CurrentState()
        }
    }

    /// Gets or sets a Boolean value indicating if the media will playback in a repeating loop.
    /// - Returns: True is looping is enabled, otherwise false.
    public var isLoopingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsLoopingEnabled()
        }
    }

    /// Gets or sets a Boolean value indicating if the media will playback in a repeating loop.
    /// - Returns: True is looping is enabled, otherwise false.
    public func isLoopingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsLoopingEnabled(value)
    }

    /// Gets or sets a Boolean value indicating if the audio is muted.
    /// - Returns: True if the audio is muted, otherwise false.
    public var isMuted: Swift.Bool {
        get throws {
            try _interop.get_IsMuted()
        }
    }

    /// Gets or sets a Boolean value indicating if the audio is muted.
    /// - Returns: True if the audio is muted, otherwise false.
    public func isMuted(_ value: Swift.Bool) throws {
        try _interop.put_IsMuted(value)
    }

    /// Gets a Boolean value indicating if the content is protected by a digital rights management system.
    /// - Returns: True if the content is protected, otherwise false.
    public var isProtected: Swift.Bool {
        get throws {
            try _interop.get_IsProtected()
        }
    }

    /// Get the actual duration of the media without applying the PlaybackRate. 
    /// - Returns: The actual duration of the media without applying the PlaybackRate.
    public var naturalDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_NaturalDuration()
        }
    }

    /// Gets the collection of timeline markers for the media. 
    /// - Returns: The collection of timeline markers for the media.
    public var playbackMediaMarkers: WindowsMediaPlayback_PlaybackMediaMarkerSequence {
        get throws {
            try COM.NullResult.unwrap(_interop.get_PlaybackMediaMarkers())
        }
    }

    /// Gets or sets the playback rate, expressed as a ratio. 
    /// - Returns: The playback rate, expressed as a percentage.
    public var playbackRate: Swift.Double {
        get throws {
            try _interop.get_PlaybackRate()
        }
    }

    /// Gets or sets the playback rate, expressed as a ratio. 
    /// - Returns: The playback rate, expressed as a percentage.
    public func playbackRate(_ value: Swift.Double) throws {
        try _interop.put_PlaybackRate(value)
    }

    /// Gets or sets the playback position within the media. 
    /// - Returns: The playback position within the media.
    public var position: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets or sets the playback position within the media. 
    /// - Returns: The playback position within the media.
    public func position(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Position(value)
    }

    /// Get or sets the audio volume for media playback.
    /// - Returns: The audio volume for media playback. The allowed range of values is 0 to 1. Values outside of this range will be clamped.
    public var volume: Swift.Double {
        get throws {
            try _interop.get_Volume()
        }
    }

    /// Get or sets the audio volume for media playback.
    /// - Returns: The audio volume for media playback. The allowed range of values is 0 to 1. Values outside of this range will be clamped.
    public func volume(_ value: Swift.Double) throws {
        try _interop.put_Volume(value)
    }

    /// Occurs when buffering has finished. 
    public func bufferingEnded(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingEnded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingEnded)
    }

    public func bufferingEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingEnded(token)
    }

    /// Occurs when buffering has started. 
    public func bufferingStarted(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BufferingStarted(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: bufferingStarted)
    }

    public func bufferingStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BufferingStarted(token)
    }

    /// Occurs when the state of the media player has changed. 
    public func currentStateChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CurrentStateChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: currentStateChanged)
    }

    public func currentStateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CurrentStateChanged(token)
    }

    /// Occurs when the media has finished playback.
    public func mediaEnded(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaEnded(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaEnded)
    }

    public func mediaEnded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaEnded(token)
    }

    /// Occurs when an error is encountered.
    public func mediaFailed(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsMediaPlayback_MediaPlayerFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaFailed(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaFailed)
    }

    public func mediaFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaFailed(token)
    }

    /// Occurs when the media is opened.
    public func mediaOpened(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaOpened(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaOpened)
    }

    public func mediaOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaOpened(token)
    }

    /// Occurs when the media playback rate has changed. 
    public func mediaPlayerRateChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsMediaPlayback_MediaPlayerRateChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MediaPlayerRateChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: mediaPlayerRateChanged)
    }

    public func mediaPlayerRateChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MediaPlayerRateChanged(token)
    }

    /// Occurs when a media marker has been reached during playback. 
    public func playbackMediaMarkerReached(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsMediaPlayback_PlaybackMediaMarkerReachedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PlaybackMediaMarkerReached(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: playbackMediaMarkerReached)
    }

    public func playbackMediaMarkerReached(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PlaybackMediaMarkerReached(token)
    }

    /// Occurs when a seek operation has finished. 
    public func seekCompleted(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_SeekCompleted(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: seekCompleted)
    }

    public func seekCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_SeekCompleted(token)
    }

    /// Occurs when the volume of the audio has changed.
    public func volumeChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_VolumeChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: volumeChanged)
    }

    public func volumeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_VolumeChanged(token)
    }

    /// Starts media playback.
    public func play() throws {
        try _interop.play()
    }

    /// Pauses media playback.
    public func pause() throws {
        try _interop.pause()
    }

    /// Sets the path to the media. 
    /// - Parameter value: The path to the media.
    public func setUriSource(_ value: WindowsFoundation_Uri?) throws {
        try _interop.setUriSource(value)
    }

    // MARK: Windows.Media.Playback.IMediaPlayerSource members

    /// Gets or sets the content protection manager for the media.
    /// - Returns: The content protection manager for the media.
    public var protectionManager: WindowsMediaProtection_MediaProtectionManager {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerSource.get_ProtectionManager())
        }
    }

    /// Gets or sets the content protection manager for the media.
    /// - Returns: The content protection manager for the media.
    public func protectionManager(_ value: WindowsMediaProtection_MediaProtectionManager?) throws {
        try _imediaPlayerSource.put_ProtectionManager(value)
    }

    /// Set the media source to a file. 
    /// - Parameter file: The media source file.
    public func setFileSource(_ file: WindowsStorage_IStorageFile?) throws {
        try _imediaPlayerSource.setFileSource(file)
    }

    /// Sets the media source to a stream. 
    /// - Parameter stream: The media source stream.
    public func setStreamSource(_ stream: WindowsStorageStreams_IRandomAccessStream?) throws {
        try _imediaPlayerSource.setStreamSource(stream)
    }

    /// Sets the media source for playback. 
    /// - Parameter source: The media source for playback.
    public func setMediaSource(_ source: WindowsMediaCore_IMediaSource?) throws {
        try _imediaPlayerSource.setMediaSource(source)
    }

    // MARK: Windows.Media.Playback.IMediaPlayerSource2 members

    /// Sets the playback source of the media player.
    /// - Returns: The playback source of the media player.
    public var source: WindowsMediaPlayback_IMediaPlaybackSource {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayerSource2.get_Source())
        }
    }

    /// Sets the playback source of the media player.
    /// - Returns: The playback source of the media player.
    public func source(_ value: WindowsMediaPlayback_IMediaPlaybackSource?) throws {
        try _imediaPlayerSource2.put_Source(value)
    }

    // MARK: Windows.Media.Playback.IMediaPlayer2 members

    /// Gets or sets the type of audio that is currently being played.
    /// - Returns: The type of audio that is currently being played.
    public var audioCategory: WindowsMediaPlayback_MediaPlayerAudioCategory {
        get throws {
            try _imediaPlayer2.get_AudioCategory()
        }
    }

    /// Gets or sets the type of audio that is currently being played.
    /// - Returns: The type of audio that is currently being played.
    public func audioCategory(_ value: WindowsMediaPlayback_MediaPlayerAudioCategory) throws {
        try _imediaPlayer2.put_AudioCategory(value)
    }

    /// Gets or sets a value that describes the primary usage of the device that is being used to play back audio.
    /// - Returns: The audio device type.
    public var audioDeviceType: WindowsMediaPlayback_MediaPlayerAudioDeviceType {
        get throws {
            try _imediaPlayer2.get_AudioDeviceType()
        }
    }

    /// Gets or sets a value that describes the primary usage of the device that is being used to play back audio.
    /// - Returns: The audio device type.
    public func audioDeviceType(_ value: WindowsMediaPlayback_MediaPlayerAudioDeviceType) throws {
        try _imediaPlayer2.put_AudioDeviceType(value)
    }

    /// Gets an instance of the SystemMediaTransportControls class to enable user control of playback of the MediaPlayer and to allow the app to show information about the currently playing content in the system UI.
    /// - Returns: An instance of the SystemMediaTransportControls class.
    public var systemMediaTransportControls: WindowsMedia_SystemMediaTransportControls {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer2.get_SystemMediaTransportControls())
        }
    }

    // MARK: Windows.Media.Playback.IMediaPlayerEffects members

    /// Adds an audio effect to the playback stream of the MediaPlayer.
    /// - Parameter activatableClassId: The activatable class ID of the audio effect to add to the playback stream.
    /// - Parameter effectOptional: A value indicating whether the effect is optional.
    /// - Parameter configuration: A property set containing configuration settings for the specified audio effect.
    public func addAudioEffect(_ activatableClassId: Swift.String, _ effectOptional: Swift.Bool, _ configuration: WindowsFoundationCollections_IPropertySet?) throws {
        try _imediaPlayerEffects.addAudioEffect(activatableClassId, effectOptional, configuration)
    }

    /// Removes all effects from the playback stream of the MediaPlayer.
    public func removeAllEffects() throws {
        try _imediaPlayerEffects.removeAllEffects()
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the MediaPlayer and disposes of associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.Media.Playback.IMediaPlayer3 members

    /// Gets or sets a ratio of volume across stereo speakers.
    /// - Returns: The ratio of volume across speakers in the range between -1 and 1. The default value is 0.
    public var audioBalance: Swift.Double {
        get throws {
            try _imediaPlayer3.get_AudioBalance()
        }
    }

    /// Gets or sets a ratio of volume across stereo speakers.
    /// - Returns: The ratio of volume across speakers in the range between -1 and 1. The default value is 0.
    public func audioBalance(_ value: Swift.Double) throws {
        try _imediaPlayer3.put_AudioBalance(value)
    }

    /// Gets or sets the DeviceInformation object representing audio device used by the MediaPlayer to render audio.
    /// - Returns: The DeviceInformation object representing audio device used by the MediaPlayer to render audio.
    public var audioDevice: WindowsDevicesEnumeration_DeviceInformation {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer3.get_AudioDevice())
        }
    }

    /// Gets or sets the DeviceInformation object representing audio device used by the MediaPlayer to render audio.
    /// - Returns: The DeviceInformation object representing audio device used by the MediaPlayer to render audio.
    public func audioDevice(_ value: WindowsDevicesEnumeration_DeviceInformation?) throws {
        try _imediaPlayer3.put_AudioDevice(value)
    }

    /// Gets the MediaBreakManager associated with the MediaPlayer, which provides information about and control over media breaks for the player.
    /// - Returns: The MediaBreakManager associated with the MediaPlayer.
    public var breakManager: WindowsMediaPlayback_MediaBreakManager {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer3.get_BreakManager())
        }
    }

    /// Gets the MediaPlaybackCommandManager associated with the MediaPlayer, which specifies the behavior of and receives events from the System Media Transport Controls.
    /// - Returns: The MediaPlaybackCommandManager associated with the MediaPlayer.
    public var commandManager: WindowsMediaPlayback_MediaPlaybackCommandManager {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer3.get_CommandManager())
        }
    }

    /// Gets the MediaPlaybackSession associated with the MediaPlayer, which provides information about the state of the current playback session and provides events for responding to changes in playback session state.
    /// - Returns: The MediaPlaybackSession associated with the MediaPlayer.
    public var playbackSession: WindowsMediaPlayback_MediaPlaybackSession {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer3.get_PlaybackSession())
        }
    }

    /// Gets or sets a value that configures the MediaPlayer for real-time scenarios such as live streaming video.
    /// - Returns: True if the MediaPlayer is being used for real-time media; otherwise, false.
    public var realTimePlayback: Swift.Bool {
        get throws {
            try _imediaPlayer3.get_RealTimePlayback()
        }
    }

    /// Gets or sets a value that configures the MediaPlayer for real-time scenarios such as live streaming video.
    /// - Returns: True if the MediaPlayer is being used for real-time media; otherwise, false.
    public func realTimePlayback(_ value: Swift.Bool) throws {
        try _imediaPlayer3.put_RealTimePlayback(value)
    }

    /// Gets or sets a value indicating the current stereoscopic render mode.
    /// - Returns: The current stereoscopic render mode.
    public var stereoscopicVideoRenderMode: WindowsMediaPlayback_StereoscopicVideoRenderMode {
        get throws {
            try _imediaPlayer3.get_StereoscopicVideoRenderMode()
        }
    }

    /// Gets or sets a value indicating the current stereoscopic render mode.
    /// - Returns: The current stereoscopic render mode.
    public func stereoscopicVideoRenderMode(_ value: WindowsMediaPlayback_StereoscopicVideoRenderMode) throws {
        try _imediaPlayer3.put_StereoscopicVideoRenderMode(value)
    }

    /// Gets or sets the MediaTimelineController associated with the MediaPlayer. Use this property to manipulate multiple **MediaPlayer** instances with a single timeline control.
    /// - Returns: The MediaTimelineController associated with the MediaPlayer.
    public var timelineController: WindowsMedia_MediaTimelineController {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer3.get_TimelineController())
        }
    }

    /// Gets or sets the MediaTimelineController associated with the MediaPlayer. Use this property to manipulate multiple **MediaPlayer** instances with a single timeline control.
    /// - Returns: The MediaTimelineController associated with the MediaPlayer.
    public func timelineController(_ value: WindowsMedia_MediaTimelineController?) throws {
        try _imediaPlayer3.put_TimelineController(value)
    }

    /// Gets or sets the offset applied to the position of the MediaTimelineController associated with the MediaPlayer.
    /// - Returns: The offset applied to the position of the MediaTimelineController associated with the MediaPlayer.
    public var timelineControllerPositionOffset: WindowsFoundation_TimeSpan {
        get throws {
            try _imediaPlayer3.get_TimelineControllerPositionOffset()
        }
    }

    /// Gets or sets the offset applied to the position of the MediaTimelineController associated with the MediaPlayer.
    /// - Returns: The offset applied to the position of the MediaTimelineController associated with the MediaPlayer.
    public func timelineControllerPositionOffset(_ value: WindowsFoundation_TimeSpan) throws {
        try _imediaPlayer3.put_TimelineControllerPositionOffset(value)
    }

    /// Occurs when the current muted status of the MediaPlayer changes.
    public func isMutedChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlayer3.add_IsMutedChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: isMutedChanged)
    }

    public func isMutedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlayer3.remove_IsMutedChanged(token)
    }

    /// Occurs when the media source for the MediaPlayer changes.
    public func sourceChanged(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlayer3.add_SourceChanged(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: sourceChanged)
    }

    public func sourceChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlayer3.remove_SourceChanged(token)
    }

    /// Causes the MediaPlayer to move forward in the current media by one frame.
    public func stepForwardOneFrame() throws {
        try _imediaPlayer3.stepForwardOneFrame()
    }

    /// Causes the playback position of the MediaPlayer to move backward by .042 seconds, which corresponds to one frame at 24 fps, regardless of the actual frame rate of the content being played.
    public func stepBackwardOneFrame() throws {
        try _imediaPlayer3.stepBackwardOneFrame()
    }

    /// Gets a CastingSource representing the MediaPlayer, which allows it's media to be cast to other devices.
    /// - Returns: The casting source.
    public func getAsCastingSource() throws -> WindowsMediaCasting_CastingSource {
        try COM.NullResult.unwrap(_imediaPlayer3.getAsCastingSource())
    }

    // MARK: Windows.Media.Playback.IMediaPlayer4 members

    /// Sets the size of the composition surface returned by GetSurface.
    /// - Parameter size: An object representing the size of the composition surface.
    public func setSurfaceSize(_ size: WindowsFoundation_Size) throws {
        try _imediaPlayer4.setSurfaceSize(size)
    }

    /// Gets a MediaPlayerSurface object for the MediaPlayer, which allows you to render the player's contents using a Compositor without relying on the XAML framework.
    /// - Parameter compositor: The Compositor with which the returned surface will be used.
    /// - Returns: The media player surface.
    public func getSurface(_ compositor: WindowsUIComposition_Compositor?) throws -> WindowsMediaPlayback_MediaPlayerSurface {
        try COM.NullResult.unwrap(_imediaPlayer4.getSurface(compositor))
    }

    // MARK: Windows.Media.Playback.IMediaPlayerEffects2 members

    /// Applies a video effect to media playback.
    /// - Parameter activatableClassId: The identifier of the effect.
    /// - Parameter effectOptional: Tue if the effect shouldn't block playback when the effect can't be used at run time. False if the effect should block playback when the effect can't be used at run time.
    /// - Parameter effectConfiguration: A property set that transmits property values to the effect specified by *effectID*.
    public func addVideoEffect(_ activatableClassId: Swift.String, _ effectOptional: Swift.Bool, _ effectConfiguration: WindowsFoundationCollections_IPropertySet?) throws {
        try _imediaPlayerEffects2.addVideoEffect(activatableClassId, effectOptional, effectConfiguration)
    }

    // MARK: Windows.Media.Playback.IMediaPlayer5 members

    /// Gets a value indicating whether video frame server mode is enabled for the **MediaPlayer** instance.
    /// - Returns: True if video frame server mode is enabled; otherwise, false.
    public var isVideoFrameServerEnabled: Swift.Bool {
        get throws {
            try _imediaPlayer5.get_IsVideoFrameServerEnabled()
        }
    }

    /// Gets a value indicating whether video frame server mode is enabled for the **MediaPlayer** instance.
    /// - Returns: True if video frame server mode is enabled; otherwise, false.
    public func isVideoFrameServerEnabled(_ value: Swift.Bool) throws {
        try _imediaPlayer5.put_IsVideoFrameServerEnabled(value)
    }

    /// Occurs when IsVideoFrameServerEnabled is set to true and a new video frame is available for processing.
    public func videoFrameAvailable(adding value: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlayer5.add_VideoFrameAvailable(value)
        return WindowsRuntime.EventRegistration(token: _token, remover: videoFrameAvailable)
    }

    public func videoFrameAvailable(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlayer5.remove_VideoFrameAvailable(token)
    }

    /// Copies the current video frame from the **MediaPlayer** to the provided **IDirect3DSurface**.
    /// - Parameter destination: The **IDirect3DSurface** to which the video frame is copied.
    public func copyFrameToVideoSurface(_ destination: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?) throws {
        try _imediaPlayer5.copyFrameToVideoSurface(destination)
    }

    /// Copies the current video frame from the **MediaPlayer** to the specified target rectangle within the provided **IDirect3DSurface**.
    /// - Parameter destination: The **IDirect3DSurface** to which the video frame is copied.
    /// - Parameter targetRectangle: The target rectangle within the **IDirect3DSurface** to which the video frame is copied.
    public func copyFrameToVideoSurface(_ destination: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?, _ targetRectangle: WindowsFoundation_Rect) throws {
        try _imediaPlayer5.copyFrameToVideoSurfaceWithTargetRectangle(destination, targetRectangle)
    }

    /// Copies the video frame currently displayed by the **MediaPlayer** to the two provided **IDirect3DSurface** objects which represent the left eye and right eye content of a stereoscopic video frame.
    /// - Parameter destinationLeftEye: The surface to which the left eye content is copied.
    /// - Parameter destinationRightEye: The surface to which the right eye content is copied.
    public func copyFrameToStereoscopicVideoSurfaces(_ destinationLeftEye: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?, _ destinationRightEye: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?) throws {
        try _imediaPlayer5.copyFrameToStereoscopicVideoSurfaces(destinationLeftEye, destinationRightEye)
    }

    // MARK: Windows.Media.Playback.IMediaPlayer6 members

    /// Occurs when the current subtitle content has changed while the MediaPlayer is in frame server mode.
    public func subtitleFrameChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsMediaPlayback_MediaPlayer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imediaPlayer6.add_SubtitleFrameChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: subtitleFrameChanged)
    }

    public func subtitleFrameChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imediaPlayer6.remove_SubtitleFrameChanged(token)
    }

    /// Requests for the system to render the current subtitle text to the provided IDirect3DSurface.
    /// - Parameter destination: The object that implements **IDirect3DSurface**  to which the subtitle text is rendered.
    /// - Returns: True if the system rendered subtitles to the surface; otherwise false.
    public func renderSubtitlesToSurface(_ destination: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?) throws -> Swift.Bool {
        try _imediaPlayer6.renderSubtitlesToSurface(destination)
    }

    /// Requests for the system to render the current subtitle text to the specified target rectangle within the provided IDirect3DSurface.
    /// - Parameter destination: The object that implements **IDirect3DSurface**  to which the subtitle text is rendered.
    /// - Parameter targetRectangle: The rectangle within the provided surface within which the subtitles are rendered.
    /// - Returns: True if the system rendered subtitles to the surface; otherwise false.
    public func renderSubtitlesToSurface(_ destination: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?, _ targetRectangle: WindowsFoundation_Rect) throws -> Swift.Bool {
        try _imediaPlayer6.renderSubtitlesToSurfaceWithTargetRectangle(destination, targetRectangle)
    }

    // MARK: Windows.Media.Playback.IMediaPlayer7 members

    /// Gets an AudioStateMonitor object that allows a UWP app to determine if any of the app's audio streams are currently being muted or having their volume reduced by the system.
    /// - Returns: An AudioStateMonitor object.
    public var audioStateMonitor: WindowsMediaAudio_AudioStateMonitor {
        get throws {
            try COM.NullResult.unwrap(_imediaPlayer7.get_AudioStateMonitor())
        }
    }

    // MARK: Implementation details

    private var _imediaPlayerSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource>? = nil

    internal var _imediaPlayerSource: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource> {
        get throws {
            try _imediaPlayerSource_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource.self)
            }
        }
    }

    private var _imediaPlayerSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource2>? = nil

    internal var _imediaPlayerSource2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource2> {
        get throws {
            try _imediaPlayerSource2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource2.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerSource2.self)
            }
        }
    }

    private var _imediaPlayer2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer2>? = nil

    internal var _imediaPlayer2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer2> {
        get throws {
            try _imediaPlayer2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer2.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer2.self)
            }
        }
    }

    private var _imediaPlayerEffects_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects>? = nil

    internal var _imediaPlayerEffects: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects> {
        get throws {
            try _imediaPlayerEffects_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    private var _imediaPlayer3_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer3>? = nil

    internal var _imediaPlayer3: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer3> {
        get throws {
            try _imediaPlayer3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer3.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer3.self)
            }
        }
    }

    private var _imediaPlayer4_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer4>? = nil

    internal var _imediaPlayer4: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer4> {
        get throws {
            try _imediaPlayer4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer4.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer4.self)
            }
        }
    }

    private var _imediaPlayerEffects2_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects2>? = nil

    internal var _imediaPlayerEffects2: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects2> {
        get throws {
            try _imediaPlayerEffects2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects2.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayerEffects2.self)
            }
        }
    }

    private var _imediaPlayer5_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer5>? = nil

    internal var _imediaPlayer5: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer5> {
        get throws {
            try _imediaPlayer5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer5.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer5.self)
            }
        }
    }

    private var _imediaPlayer6_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer6>? = nil

    internal var _imediaPlayer6: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer6> {
        get throws {
            try _imediaPlayer6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer6.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer6.self)
            }
        }
    }

    private var _imediaPlayer7_storage: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer7>? = nil

    internal var _imediaPlayer7: COM.COMInterop<CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer7> {
        get throws {
            try _imediaPlayer7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer7.iid).cast(to: CWinRT.SWRT_WindowsMediaPlayback_IMediaPlayer7.self)
            }
        }
    }

    deinit {
        _imediaPlayerSource_storage?.release()
        _imediaPlayerSource2_storage?.release()
        _imediaPlayer2_storage?.release()
        _imediaPlayerEffects_storage?.release()
        _iclosable_storage?.release()
        _imediaPlayer3_storage?.release()
        _imediaPlayer4_storage?.release()
        _imediaPlayerEffects2_storage?.release()
        _imediaPlayer5_storage?.release()
        _imediaPlayer6_storage?.release()
        _imediaPlayer7_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Media.Playback.MediaPlayer", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }
}