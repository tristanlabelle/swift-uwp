// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents an element displayed on a MapControl.
open class WindowsUIXamlControlsMaps_MapElement: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElementFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapElement.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapElementFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement members

    /// Gets or sets a value that indicates whether the MapElement is visible on the MapControl.
    /// - Returns: **true** if the MapElement is visible on the MapControl; otherwise, **false**.
    public var visible: Swift.Bool {
        get throws {
            try _imapElement.get_Visible()
        }
    }

    /// Gets or sets a value that indicates whether the MapElement is visible on the MapControl.
    /// - Returns: **true** if the MapElement is visible on the MapControl; otherwise, **false**.
    public func visible(_ value: Swift.Bool) throws {
        try _imapElement.put_Visible(value)
    }

    /// Gets or sets the z-index of the MapElement. A MapElement with a higher z-index is displayed on top of a MapElement with a lower z-index.
    /// - Returns: The z-index of the MapElement.
    public var zindex: Swift.Int32 {
        get throws {
            try _imapElement.get_ZIndex()
        }
    }

    /// Gets or sets the z-index of the MapElement. A MapElement with a higher z-index is displayed on top of a MapElement with a lower z-index.
    /// - Returns: The z-index of the MapElement.
    public func zindex(_ value: Swift.Int32) throws {
        try _imapElement.put_ZIndex(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement2 members

    /// Gets or sets a value that determines the order in which elements of the MapControl receive focus when the user navigates through those elements by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation across elements in a MapControl.
    public var mapTabIndex: Swift.Int32 {
        get throws {
            try _imapElement2.get_MapTabIndex()
        }
    }

    /// Gets or sets a value that determines the order in which elements of the MapControl receive focus when the user navigates through those elements by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation across elements in a MapControl.
    public func mapTabIndex(_ value: Swift.Int32) throws {
        try _imapElement2.put_MapTabIndex(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement3 members

    /// Gets or sets the name of an entry in the map's style sheet that you'd like to apply to this MapElement.
    /// - Returns: The name of the entry in the map's style sheet that you'd like to apply to this MapElement. This name may be an existing map element (see remarks) that acts like an existing base map element of that type. Or the name may be an extension that is not used by the base map but is set by the style sheet creator and can be changed without affecting the base map (see the example code).
    public var mapStyleSheetEntry: Swift.String {
        get throws {
            try _imapElement3.get_MapStyleSheetEntry()
        }
    }

    /// Gets or sets the name of an entry in the map's style sheet that you'd like to apply to this MapElement.
    /// - Returns: The name of the entry in the map's style sheet that you'd like to apply to this MapElement. This name may be an existing map element (see remarks) that acts like an existing base map element of that type. Or the name may be an extension that is not used by the base map but is set by the style sheet creator and can be changed without affecting the base map (see the example code).
    public func mapStyleSheetEntry(_ value: Swift.String) throws {
        try _imapElement3.put_MapStyleSheetEntry(value)
    }

    /// Gets or sets the name of the state of this MapElement. If the style sheet defines a style for that state, that style is applied to this element. Values defined in the style sheet for the state override values defined in the MapStyleSheetEntry.
    /// - Returns: The name of the state of this MapElement.
    public var mapStyleSheetEntryState: Swift.String {
        get throws {
            try _imapElement3.get_MapStyleSheetEntryState()
        }
    }

    /// Gets or sets the name of the state of this MapElement. If the style sheet defines a style for that state, that style is applied to this element. Values defined in the style sheet for the state override values defined in the MapStyleSheetEntry.
    /// - Returns: The name of the state of this MapElement.
    public func mapStyleSheetEntryState(_ value: Swift.String) throws {
        try _imapElement3.put_MapStyleSheetEntryState(value)
    }

    /// Gets or sets an arbitrary object value that can be used to store custom information about this object.
    /// - Returns: An arbitrary object value that can be used to store custom information about this object.
    public var tag: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_imapElement3.get_Tag())
        }
    }

    /// Gets or sets an arbitrary object value that can be used to store custom information about this object.
    /// - Returns: An arbitrary object value that can be used to store custom information about this object.
    public func tag(_ value: WindowsRuntime.IInspectable?) throws {
        try _imapElement3.put_Tag(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement4 members

    /// Indicates whether users can interact with the MapElement.
    /// - Returns: **true** if users can interact with the MapElement; otherwise, **false**.
    public var isEnabled: Swift.Bool {
        get throws {
            try _imapElement4.get_IsEnabled()
        }
    }

    /// Indicates whether users can interact with the MapElement.
    /// - Returns: **true** if users can interact with the MapElement; otherwise, **false**.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _imapElement4.put_IsEnabled(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElementStatics2 members

    /// Identifies the MapTabIndex dependency property.
    /// - Returns: The identifier for the MapTabIndex dependency property.
    public static var mapTabIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics2.get_MapTabIndexProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElementStatics3 members

    /// Identifies for the MapStyleSheetEntry dependency property.
    /// - Returns: Identifier for the MapStyleSheetEntry dependency property.
    public static var mapStyleSheetEntryProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics3.get_MapStyleSheetEntryProperty())
        }
    }

    /// Identifies for the MapStyleSheetEntryState dependency property.
    /// - Returns: Identifier for the MapStyleSheetEntryState dependency property.
    public static var mapStyleSheetEntryStateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics3.get_MapStyleSheetEntryStateProperty())
        }
    }

    /// Identifies the Tag dependency property.
    /// - Returns: The Tag dependency property.
    public static var tagProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics3.get_TagProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElementStatics members

    /// Identifies the Visible dependency property.
    /// - Returns: The identifier for the Visible dependency property.
    public static var visibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics.get_VisibleProperty())
        }
    }

    /// Identifies the ZIndex dependency property.
    /// - Returns: The identifier for the ZIndex dependency property.
    public static var zindexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics.get_ZIndexProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElementStatics4 members

    /// Identifies the IsEnabled dependency property.
    /// - Returns: Identifier for the IsEnabled dependency property.
    public static var isEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElementStatics4.get_IsEnabledProperty())
        }
    }

    // MARK: Implementation details

    private var _imapElement_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement>? = nil

    internal var _imapElement: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement> {
        get throws {
            try _imapElement_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement.self)
            }
        }
    }

    private var _imapElement2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement2>? = nil

    internal var _imapElement2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement2> {
        get throws {
            try _imapElement2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement2.self)
            }
        }
    }

    private var _imapElement3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3>? = nil

    internal var _imapElement3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3> {
        get throws {
            try _imapElement3_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3.self)
            }
        }
    }

    private var _imapElement4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement4>? = nil

    internal var _imapElement4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement4> {
        get throws {
            try _imapElement4_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement4.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _imapElement_storage?.release()
        _imapElement2_storage?.release()
        _imapElement3_storage?.release()
        _imapElement4_storage?.release()
    }

    private static var _imapElementFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementFactory>? = nil

    internal static var _imapElementFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementFactory> {
        get throws {
            try _imapElementFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementFactory.iid)
            }
        }
    }

    private static var _imapElementStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics2>? = nil

    internal static var _imapElementStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics2> {
        get throws {
            try _imapElementStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics2.iid)
            }
        }
    }

    private static var _imapElementStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics3>? = nil

    internal static var _imapElementStatics3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics3> {
        get throws {
            try _imapElementStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics3.iid)
            }
        }
    }

    private static var _imapElementStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics>? = nil

    internal static var _imapElementStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics> {
        get throws {
            try _imapElementStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics.iid)
            }
        }
    }

    private static var _imapElementStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics4>? = nil

    internal static var _imapElementStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics4> {
        get throws {
            try _imapElementStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElementStatics4.iid)
            }
        }
    }
}