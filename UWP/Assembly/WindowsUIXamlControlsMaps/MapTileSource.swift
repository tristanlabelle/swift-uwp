// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a source of tiles to overlay on the MapControl.
open class WindowsUIXamlControlsMaps_MapTileSource: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapTileSourceFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapTileSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapTileSourceFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    public convenience init(_ dataSource: WindowsUIXamlControlsMaps_MapTileDataSource?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapTileSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapTileSourceFactory.createInstanceWithDataSource(dataSource, baseInterface, &innerInterface))
        }
    }

    public convenience init(_ dataSource: WindowsUIXamlControlsMaps_MapTileDataSource?, _ zoomLevelRange: WindowsUIXamlControlsMaps_MapZoomLevelRange) throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapTileSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapTileSourceFactory.createInstanceWithDataSourceAndZoomRange(dataSource, zoomLevelRange, baseInterface, &innerInterface))
        }
    }

    public convenience init(_ dataSource: WindowsUIXamlControlsMaps_MapTileDataSource?, _ zoomLevelRange: WindowsUIXamlControlsMaps_MapZoomLevelRange, _ bounds: WindowsDevicesGeolocation_GeoboundingBox?) throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapTileSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapTileSourceFactory.createInstanceWithDataSourceZoomRangeAndBounds(dataSource, zoomLevelRange, bounds, baseInterface, &innerInterface))
        }
    }

    public convenience init(_ dataSource: WindowsUIXamlControlsMaps_MapTileDataSource?, _ zoomLevelRange: WindowsUIXamlControlsMaps_MapZoomLevelRange, _ bounds: WindowsDevicesGeolocation_GeoboundingBox?, _ tileSizeInPixels: Swift.Int32) throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapTileSource.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapTileSourceFactory.createInstanceWithDataSourceZoomRangeBoundsAndTileSize(dataSource, zoomLevelRange, bounds, tileSizeInPixels, baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapTileSource members

    /// Gets or sets a value that specifies whether to stretch the current tile while a higher-resolution tile is being downloaded.
    /// - Returns: **true** to stretch the current tile while a higher-resolution tile is being downloaded; otherwise, **false**.
    public var allowOverstretch: Swift.Bool {
        get throws {
            try _imapTileSource.get_AllowOverstretch()
        }
    }

    /// Gets or sets a value that specifies whether to stretch the current tile while a higher-resolution tile is being downloaded.
    /// - Returns: **true** to stretch the current tile while a higher-resolution tile is being downloaded; otherwise, **false**.
    public func allowOverstretch(_ value: Swift.Bool) throws {
        try _imapTileSource.put_AllowOverstretch(value)
    }

    /// Gets or sets the rectangular area to contain the tiles.
    /// - Returns: The rectangular area to contain the tiles.
    public var bounds: WindowsDevicesGeolocation_GeoboundingBox {
        get throws {
            try COM.NullResult.unwrap(_imapTileSource.get_Bounds())
        }
    }

    /// Gets or sets the rectangular area to contain the tiles.
    /// - Returns: The rectangular area to contain the tiles.
    public func bounds(_ value: WindowsDevicesGeolocation_GeoboundingBox?) throws {
        try _imapTileSource.put_Bounds(value)
    }

    /// Gets or sets the data source for the tiles.
    /// - Returns: The data source for the tiles.
    public var dataSource: WindowsUIXamlControlsMaps_MapTileDataSource {
        get throws {
            try COM.NullResult.unwrap(_imapTileSource.get_DataSource())
        }
    }

    /// Gets or sets the data source for the tiles.
    /// - Returns: The data source for the tiles.
    public func dataSource(_ value: WindowsUIXamlControlsMaps_MapTileDataSource?) throws {
        try _imapTileSource.put_DataSource(value)
    }

    /// Gets or sets a value that indicates whether fading is enabled for the tiles.
    /// - Returns: **true** if fading is enabled for the tiles; otherwise, **false**.
    public var isFadingEnabled: Swift.Bool {
        get throws {
            try _imapTileSource.get_IsFadingEnabled()
        }
    }

    /// Gets or sets a value that indicates whether fading is enabled for the tiles.
    /// - Returns: **true** if fading is enabled for the tiles; otherwise, **false**.
    public func isFadingEnabled(_ value: Swift.Bool) throws {
        try _imapTileSource.put_IsFadingEnabled(value)
    }

    /// Gets or sets a value that indicates whether retry is enabled for the tiles.
    /// - Returns: **true** if retry is enabled for the tiles; otherwise, **false**.
    public var isRetryEnabled: Swift.Bool {
        get throws {
            try _imapTileSource.get_IsRetryEnabled()
        }
    }

    /// Gets or sets a value that indicates whether retry is enabled for the tiles.
    /// - Returns: **true** if retry is enabled for the tiles; otherwise, **false**.
    public func isRetryEnabled(_ value: Swift.Bool) throws {
        try _imapTileSource.put_IsRetryEnabled(value)
    }

    /// Gets or sets a value that indicates whether transparency is enabled for the tiles.
    /// - Returns: **true** if transparency is enabled for the tiles; otherwise, **false**.
    public var isTransparencyEnabled: Swift.Bool {
        get throws {
            try _imapTileSource.get_IsTransparencyEnabled()
        }
    }

    /// Gets or sets a value that indicates whether transparency is enabled for the tiles.
    /// - Returns: **true** if transparency is enabled for the tiles; otherwise, **false**.
    public func isTransparencyEnabled(_ value: Swift.Bool) throws {
        try _imapTileSource.put_IsTransparencyEnabled(value)
    }

    /// Gets or sets the layer that contains the tiles.
    /// - Returns: The layer that contains the tiles.
    public var layer: WindowsUIXamlControlsMaps_MapTileLayer {
        get throws {
            try _imapTileSource.get_Layer()
        }
    }

    /// Gets or sets the layer that contains the tiles.
    /// - Returns: The layer that contains the tiles.
    public func layer(_ value: WindowsUIXamlControlsMaps_MapTileLayer) throws {
        try _imapTileSource.put_Layer(value)
    }

    /// Gets or sets the size of the tiles in pixels.
    /// - Returns: The size of the tiles in pixels.
    public var tilePixelSize: Swift.Int32 {
        get throws {
            try _imapTileSource.get_TilePixelSize()
        }
    }

    /// Gets or sets the size of the tiles in pixels.
    /// - Returns: The size of the tiles in pixels.
    public func tilePixelSize(_ value: Swift.Int32) throws {
        try _imapTileSource.put_TilePixelSize(value)
    }

    /// Gets or sets a value that indicates whether the MapTileSource is visible.
    /// - Returns: **true** if the MapTileSource is visible; otherwise, **false**.
    public var visible: Swift.Bool {
        get throws {
            try _imapTileSource.get_Visible()
        }
    }

    /// Gets or sets a value that indicates whether the MapTileSource is visible.
    /// - Returns: **true** if the MapTileSource is visible; otherwise, **false**.
    public func visible(_ value: Swift.Bool) throws {
        try _imapTileSource.put_Visible(value)
    }

    /// Gets or sets the z-index of the tiles.
    /// - Returns: The z-index of the tiles.
    public var zindex: Swift.Int32 {
        get throws {
            try _imapTileSource.get_ZIndex()
        }
    }

    /// Gets or sets the z-index of the tiles.
    /// - Returns: The z-index of the tiles.
    public func zindex(_ value: Swift.Int32) throws {
        try _imapTileSource.put_ZIndex(value)
    }

    /// Gets or sets the minimum and maximum zoom level of the tiles. Tiles are only visible when the ZoomLevel of the MapControl is within the ZoomLevelRange.
    /// - Returns: The minimum and maximum zoom level of the tiles.
    public var zoomLevelRange: WindowsUIXamlControlsMaps_MapZoomLevelRange {
        get throws {
            try _imapTileSource.get_ZoomLevelRange()
        }
    }

    /// Gets or sets the minimum and maximum zoom level of the tiles. Tiles are only visible when the ZoomLevel of the MapControl is within the ZoomLevelRange.
    /// - Returns: The minimum and maximum zoom level of the tiles.
    public func zoomLevelRange(_ value: WindowsUIXamlControlsMaps_MapZoomLevelRange) throws {
        try _imapTileSource.put_ZoomLevelRange(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapTileSource2 members

    /// Gets the animation state of this MapTileSource to be displayed in the MapControl.
    /// - Returns: The animation state of this MapTileSource.
    public var animationState: WindowsUIXamlControlsMaps_MapTileAnimationState {
        get throws {
            try _imapTileSource2.get_AnimationState()
        }
    }

    /// Gets or sets a value that indicates whether map tiles will begin playback automatically when this MapTileSource gets added to the TileSources property of the MapControl.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public var autoPlay: Swift.Bool {
        get throws {
            try _imapTileSource2.get_AutoPlay()
        }
    }

    /// Gets or sets a value that indicates whether map tiles will begin playback automatically when this MapTileSource gets added to the TileSources property of the MapControl.
    /// - Returns: **true** if playback is automatic; otherwise, **false**. The default is **true**.
    public func autoPlay(_ value: Swift.Bool) throws {
        try _imapTileSource2.put_AutoPlay(value)
    }

    /// Gets or sets the number of frames in the animation of this MapTileSource.
    /// - Returns: The number of frames in the animation of this MapTileSource.
    public var frameCount: Swift.Int32 {
        get throws {
            try _imapTileSource2.get_FrameCount()
        }
    }

    /// Gets or sets the number of frames in the animation of this MapTileSource.
    /// - Returns: The number of frames in the animation of this MapTileSource.
    public func frameCount(_ value: Swift.Int32) throws {
        try _imapTileSource2.put_FrameCount(value)
    }

    /// Gets or sets the time duration of each frame in the animation of this MapTileSource.
    /// - Returns: The time duration of each frame in the animation of this MapTileSource.
    public var frameDuration: WindowsFoundation_TimeSpan {
        get throws {
            try _imapTileSource2.get_FrameDuration()
        }
    }

    /// Gets or sets the time duration of each frame in the animation of this MapTileSource.
    /// - Returns: The time duration of each frame in the animation of this MapTileSource.
    public func frameDuration(_ value: WindowsFoundation_TimeSpan) throws {
        try _imapTileSource2.put_FrameDuration(value)
    }

    /// Pauses the animation at the current frame.
    public func pause() throws {
        try _imapTileSource2.pause()
    }

    /// Plays the animation from the current frame.
    public func play() throws {
        try _imapTileSource2.play()
    }

    /// Stops and resets the animation to be played from the beginning.
    public func stop() throws {
        try _imapTileSource2.stop()
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics2 members

    /// Identifies the AnimationState dependency property.
    /// - Returns: The identifier for the AnimationState dependency property.
    public static var animationStateProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics2.get_AnimationStateProperty())
        }
    }

    /// Identifies the AutoPlay dependency property.
    /// - Returns: The identifier for the AutoPlay dependency property.
    public static var autoPlayProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics2.get_AutoPlayProperty())
        }
    }

    /// Identifies the FrameCount dependency property.
    /// - Returns: The identifier for the FrameCount dependency property.
    public static var frameCountProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics2.get_FrameCountProperty())
        }
    }

    /// Identifies the FrameDuration dependency property.
    /// - Returns: The identifier for the FrameDuration dependency property.
    public static var frameDurationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics2.get_FrameDurationProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapTileSourceStatics members

    /// Identifies the AllowOverstretch dependency property.
    /// - Returns: The identifier for the AllowOverstretch dependency property.
    public static var allowOverstretchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_AllowOverstretchProperty())
        }
    }

    /// Identifies the Bounds dependency property.
    /// - Returns: The identifier for the Bounds dependency property.
    public static var boundsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_BoundsProperty())
        }
    }

    /// Identifies the DataSource dependency property.
    /// - Returns: The identifier for the DataSource  dependency property.
    public static var dataSourceProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_DataSourceProperty())
        }
    }

    /// Identifies the IsFadingEnabled dependency property.
    /// - Returns: The identifier for the IsFadingEnabled dependency property.
    public static var isFadingEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_IsFadingEnabledProperty())
        }
    }

    /// Identifies the IsRetryEnabled dependency property.
    /// - Returns: The identifier for the IsRetryEnabled dependency property.
    public static var isRetryEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_IsRetryEnabledProperty())
        }
    }

    /// Identifies the IsTransparencyEnabled dependency property.
    /// - Returns: The identifier for the IsTransparencyEnabled dependency property.
    public static var isTransparencyEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_IsTransparencyEnabledProperty())
        }
    }

    /// Identifies the Layer dependency property.
    /// - Returns: The identifier for the Layer dependency property.
    public static var layerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_LayerProperty())
        }
    }

    /// Identifies the TilePixelSize dependency property.
    /// - Returns: The identifier for the TilePixelSize dependency property.
    public static var tilePixelSizeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_TilePixelSizeProperty())
        }
    }

    /// Identifies the Visible dependency property.
    /// - Returns: The identifier for the Visible dependency property.
    public static var visibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_VisibleProperty())
        }
    }

    /// Identifies the ZIndex dependency property.
    /// - Returns: The identifier for the ZIndex dependency property.
    public static var zindexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_ZIndexProperty())
        }
    }

    /// Identifies the ZoomLevelRange dependency property.
    /// - Returns: The identifier for the ZoomLevelRange dependency property.
    public static var zoomLevelRangeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapTileSourceStatics.get_ZoomLevelRangeProperty())
        }
    }

    // MARK: Implementation details

    private var _imapTileSource_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource>? = nil

    internal var _imapTileSource: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource> {
        get throws {
            try _imapTileSource_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource.self)
            }
        }
    }

    private var _imapTileSource2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource2>? = nil

    internal var _imapTileSource2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource2> {
        get throws {
            try _imapTileSource2_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource2.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSource>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _imapTileSource_storage?.release()
        _imapTileSource2_storage?.release()
    }

    private static var _imapTileSourceFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceFactory>? = nil

    internal static var _imapTileSourceFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceFactory> {
        get throws {
            try _imapTileSourceFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapTileSource", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceFactory.iid)
            }
        }
    }

    private static var _imapTileSourceStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics2>? = nil

    internal static var _imapTileSourceStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics2> {
        get throws {
            try _imapTileSourceStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapTileSource", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics2.iid)
            }
        }
    }

    private static var _imapTileSourceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics>? = nil

    internal static var _imapTileSourceStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics> {
        get throws {
            try _imapTileSourceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapTileSource", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapTileSourceStatics.iid)
            }
        }
    }
}