// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a symbolic or photorealistic map of the Earth.
public final class WindowsUIXamlControlsMaps_MapControl: WindowsRuntime.WinRTImport<WindowsUIXamlControlsMaps_MapControlProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControlsMaps_MapControlProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl members

    /// Gets or sets the center of the map.
    /// - Returns: The center of the map.
    public var center: WindowsDevicesGeolocation_Geopoint {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Center())
        }
    }

    /// Gets or sets the center of the map.
    /// - Returns: The center of the map.
    public func center(_ value: WindowsDevicesGeolocation_Geopoint?) throws {
        try _interop.put_Center(value)
    }

    /// Gets the collection of objects that are children of the MapControl.
    /// - Returns: The collection of objects that are children of the MapControl.
    public var children: WindowsFoundationCollections_IVector<WindowsUIXaml_DependencyObject?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Children())
        }
    }

    /// Gets or sets the color scheme of the map – for example, light or dark.
    /// - Returns: The color scheme of the map – for example, light or dark.
    public var colorScheme: WindowsUIXamlControlsMaps_MapColorScheme {
        get throws {
            try _interop.get_ColorScheme()
        }
    }

    /// Gets or sets the color scheme of the map – for example, light or dark.
    /// - Returns: The color scheme of the map – for example, light or dark.
    public func colorScheme(_ value: WindowsUIXamlControlsMaps_MapColorScheme) throws {
        try _interop.put_ColorScheme(value)
    }

    /// Gets or sets a value that indicates by how many degrees you want the map to be tilted. Sometimes the desired pitch cannot be set.
    /// - Returns: A value that indicates by how many degrees you want the map to be tilted. Sometimes the desired pitch cannot be set.
    public var desiredPitch: Swift.Double {
        get throws {
            try _interop.get_DesiredPitch()
        }
    }

    /// Gets or sets a value that indicates by how many degrees you want the map to be tilted. Sometimes the desired pitch cannot be set.
    /// - Returns: A value that indicates by how many degrees you want the map to be tilted. Sometimes the desired pitch cannot be set.
    public func desiredPitch(_ value: Swift.Double) throws {
        try _interop.put_DesiredPitch(value)
    }

    /// Gets or sets the directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public var heading: Swift.Double {
        get throws {
            try _interop.get_Heading()
        }
    }

    /// Gets or sets the directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public func heading(_ value: Swift.Double) throws {
        try _interop.put_Heading(value)
    }

    /// Gets or sets a value that indicates whether 3D buildings are displayed on the map.
    /// - Returns: **true** if 3D buildings are displayed on the map; otherwise, **false**.
    public var landmarksVisible: Swift.Bool {
        get throws {
            try _interop.get_LandmarksVisible()
        }
    }

    /// Gets or sets a value that indicates whether 3D buildings are displayed on the map.
    /// - Returns: **true** if 3D buildings are displayed on the map; otherwise, **false**.
    public func landmarksVisible(_ value: Swift.Bool) throws {
        try _interop.put_LandmarksVisible(value)
    }

    /// Gets the loading status of the map to be displayed in the MapControl.
    /// - Returns: The loading status of the map to be displayed in the MapControl.
    public var loadingStatus: WindowsUIXamlControlsMaps_MapLoadingStatus {
        get throws {
            try _interop.get_LoadingStatus()
        }
    }

    /// Gets the collection of MapElement objects that are children of the MapControl.
    /// - Returns: The collection of MapElement objects that are children of the MapControl.
    public var mapElements: WindowsFoundationCollections_IVector<WindowsUIXamlControlsMaps_MapElement?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_MapElements())
        }
    }

    /// Gets or sets the authentication key required for using the MapControl and online mapping services.
    /// - Returns: The authentication key required for using the MapControl and online mapping services.
    public var mapServiceToken: Swift.String {
        get throws {
            try _interop.get_MapServiceToken()
        }
    }

    /// Gets or sets the authentication key required for using the MapControl and online mapping services.
    /// - Returns: The authentication key required for using the MapControl and online mapping services.
    public func mapServiceToken(_ value: Swift.String) throws {
        try _interop.put_MapServiceToken(value)
    }

    /// Gets the maximum zoom level for the map.
    /// - Returns: The maximum zoom level for the map.
    public var maxZoomLevel: Swift.Double {
        get throws {
            try _interop.get_MaxZoomLevel()
        }
    }

    /// Gets the minimum zoom level for the map.
    /// - Returns: The minimum zoom level for the map.
    public var minZoomLevel: Swift.Double {
        get throws {
            try _interop.get_MinZoomLevel()
        }
    }

    /// Gets or sets a value that indicates whether pedestrian features such as public stairs are displayed on the map.
    /// - Returns: **true** if pedestrian features such as public stairs are displayed on the map; otherwise, **false**.
    public var pedestrianFeaturesVisible: Swift.Bool {
        get throws {
            try _interop.get_PedestrianFeaturesVisible()
        }
    }

    /// Gets or sets a value that indicates whether pedestrian features such as public stairs are displayed on the map.
    /// - Returns: **true** if pedestrian features such as public stairs are displayed on the map; otherwise, **false**.
    public func pedestrianFeaturesVisible(_ value: Swift.Bool) throws {
        try _interop.put_PedestrianFeaturesVisible(value)
    }

    /// Gets the actual pitch of the map. Sometimes the pitch requested by setting the DesiredPitch property cannot be set.
    /// - Returns: The actual pitch of the map. Sometimes the pitch requested by setting the property cannot be set.
    public var pitch: Swift.Double {
        get throws {
            try _interop.get_Pitch()
        }
    }

    /// Gets the collection of MapRouteView objects displayed on the map.
    /// - Returns: The collection of MapRouteView objects displayed on the map.
    public var routes: WindowsFoundationCollections_IVector<WindowsUIXamlControlsMaps_MapRouteView?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Routes())
        }
    }

    /// Specifies the style of the map - for example, a road map or an aerial map.
    /// - Returns: The style of the map - for example, a road map or an aerial map.
    public var style: WindowsUIXamlControlsMaps_MapStyle {
        get throws {
            try _interop.get_Style()
        }
    }

    /// Specifies the style of the map - for example, a road map or an aerial map.
    /// - Returns: The style of the map - for example, a road map or an aerial map.
    public func style(_ value: WindowsUIXamlControlsMaps_MapStyle) throws {
        try _interop.put_Style(value)
    }

    /// Gets or sets the collection of MapTileSource objects that are children of the MapControl.
    /// - Returns: The collection of MapTileSource objects that are children of the MapControl.
    public var tileSources: WindowsFoundationCollections_IVector<WindowsUIXamlControlsMaps_MapTileSource?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TileSources())
        }
    }

    /// Gets or sets a value that indicates whether traffic conditions are displayed on the map.
    /// - Returns: **true** if traffic conditions are displayed on the map; otherwise, **false**.
    public var trafficFlowVisible: Swift.Bool {
        get throws {
            try _interop.get_TrafficFlowVisible()
        }
    }

    /// Gets or sets a value that indicates whether traffic conditions are displayed on the map.
    /// - Returns: **true** if traffic conditions are displayed on the map; otherwise, **false**.
    public func trafficFlowVisible(_ value: Swift.Bool) throws {
        try _interop.put_TrafficFlowVisible(value)
    }

    /// Gets or sets a point to which the logical center of the map is transformed.
    /// - Returns: A point to which the logical center of the map is transformed. Use a value between 0 and 1 (but not 0 or 1) for the X and Y properties of the Point.
    public var transformOrigin: WindowsFoundation_Point {
        get throws {
            try _interop.get_TransformOrigin()
        }
    }

    /// Gets or sets a point to which the logical center of the map is transformed.
    /// - Returns: A point to which the logical center of the map is transformed. Use a value between 0 and 1 (but not 0 or 1) for the X and Y properties of the Point.
    public func transformOrigin(_ value: WindowsFoundation_Point) throws {
        try _interop.put_TransformOrigin(value)
    }

    /// Gets or sets a value that determines when the watermark of the map is displayed.
    /// - Returns: A value that determines when the watermark of the map is displayed.
    public var watermarkMode: WindowsUIXamlControlsMaps_MapWatermarkMode {
        get throws {
            try _interop.get_WatermarkMode()
        }
    }

    /// Gets or sets a value that determines when the watermark of the map is displayed.
    /// - Returns: A value that determines when the watermark of the map is displayed.
    public func watermarkMode(_ value: WindowsUIXamlControlsMaps_MapWatermarkMode) throws {
        try _interop.put_WatermarkMode(value)
    }

    /// Gets or sets the zoom level of the map, which is a value between 1 and 20 in 2D views.
    /// - Returns: The zoom level of the map, which is a value between 1 and 20 in 2D views.
    public var zoomLevel: Swift.Double {
        get throws {
            try _interop.get_ZoomLevel()
        }
    }

    /// Gets or sets the zoom level of the map, which is a value between 1 and 20 in 2D views.
    /// - Returns: The zoom level of the map, which is a value between 1 and 20 in 2D views.
    public func zoomLevel(_ value: Swift.Double) throws {
        try _interop.put_ZoomLevel(value)
    }

    /// Occurs when the value of the Center property of the MapControl changes.
    public func centerChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_CenterChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: centerChanged)
    }

    public func centerChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_CenterChanged(token)
    }

    /// Occurs when the value of the Heading property of the MapControl changes.
    public func headingChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_HeadingChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: headingChanged)
    }

    public func headingChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_HeadingChanged(token)
    }

    /// Occurs when the value of the LoadingStatus property of the MapControl changes.
    public func loadingStatusChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_LoadingStatusChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: loadingStatusChanged)
    }

    public func loadingStatusChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_LoadingStatusChanged(token)
    }

    /// Occurs when the user double-taps the MapControl. An instance of MapInputEventArgs provides data for this event.
    public func mapDoubleTapped(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapInputEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MapDoubleTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapDoubleTapped)
    }

    public func mapDoubleTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MapDoubleTapped(token)
    }

    /// Occurs when the user taps and holds on the MapControl. An instance of MapInputEventArgs provides data for this event.
    public func mapHolding(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapInputEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MapHolding(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapHolding)
    }

    public func mapHolding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MapHolding(token)
    }

    /// Occurs when the user taps the MapControl or clicks on it with the left mouse button. An instance of MapInputEventArgs provides data for this event.
    public func mapTapped(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapInputEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_MapTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapTapped)
    }

    public func mapTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_MapTapped(token)
    }

    /// Occurs when the value of the Pitch property of the MapControl changes.
    public func pitchChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_PitchChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: pitchChanged)
    }

    public func pitchChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_PitchChanged(token)
    }

    /// Occurs when the value of the TransformOrigin property of the MapControl changes.
    public func transformOriginChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TransformOriginChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: transformOriginChanged)
    }

    public func transformOriginChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TransformOriginChanged(token)
    }

    /// Occurs when the value of the ZoomLevel property of the MapControl changes.
    public func zoomLevelChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ZoomLevelChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: zoomLevelChanged)
    }

    public func zoomLevelChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ZoomLevelChanged(token)
    }

    /// Retrieves the collection of MapElement objects at the specified point on the map.
    /// - Parameter offset: The point on the map from which to retrieve the collection of MapElement objects.
    /// - Returns: The collection of MapElement objects at the specified point on the map.
    public func findMapElementsAtOffset(_ offset: WindowsFoundation_Point) throws -> WindowsFoundationCollections_IVectorView<WindowsUIXamlControlsMaps_MapElement?> {
        try COM.NullResult.unwrap(_interop.findMapElementsAtOffset(offset))
    }

    /// Converts a point on the map to a geographic location.
    /// - Parameter offset: A point on the map to convert to a geographic location.
    /// - Parameter location: When this method returns, contains the corresponding geographic location.
    public func getLocationFromOffset(_ offset: WindowsFoundation_Point, _ location: inout WindowsDevicesGeolocation_Geopoint?) throws {
        try _interop.getLocationFromOffset(offset, &location)
    }

    /// Converts a geographic location to a point on the map.
    /// - Parameter location: A geographic location to convert to a point on the map.
    /// - Parameter offset: When this method returns, contains the corresponding point on the map.
    public func getOffsetFromLocation(_ location: WindowsDevicesGeolocation_Geopoint?, _ offset: inout WindowsFoundation_Point) throws {
        try _interop.getOffsetFromLocation(location, &offset)
    }

    /// Determines whether the specified geographic location is located in the portion of the map currently visible in the MapControl.
    /// - Parameter location: A geographic location.
    /// - Parameter isInView: When this method returns, contains **true** if the specified geographic location is located in the portion of the map currently visible in the MapControl; otherwise, contains **false**.
    public func isLocationInView(_ location: WindowsDevicesGeolocation_Geopoint?, _ isInView: inout Swift.Bool) throws {
        try _interop.isLocationInView(location, &isInView)
    }

    public func trySetViewBoundsAsync(_ bounds: WindowsDevicesGeolocation_GeoboundingBox?, _ margin: WindowsFoundation_IReference<WindowsUIXaml_Thickness>?, _ animation: WindowsUIXamlControlsMaps_MapAnimationKind) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySetViewBoundsAsync(bounds, margin, animation))
    }

    /// Sets the view of the map displayed in the MapControl using the specified center.
    /// - Parameter center: The center to use in the view. For more info, see the Center property.
    /// - Returns: **true** if the asynchronous operation succeeded; otherwise, **false**.
    public func trySetViewAsync(_ center: WindowsDevicesGeolocation_Geopoint?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySetViewWithCenterAsync(center))
    }

    public func trySetViewAsync(_ center: WindowsDevicesGeolocation_Geopoint?, _ zoomLevel: Swift.Double?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySetViewWithCenterAndZoomAsync(center, zoomLevel))
    }

    public func trySetViewAsync(_ center: WindowsDevicesGeolocation_Geopoint?, _ zoomLevel: Swift.Double?, _ heading: Swift.Double?, _ desiredPitch: Swift.Double?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySetViewWithCenterZoomHeadingAndPitchAsync(center, zoomLevel, heading, desiredPitch))
    }

    public func trySetViewAsync(_ center: WindowsDevicesGeolocation_Geopoint?, _ zoomLevel: Swift.Double?, _ heading: Swift.Double?, _ desiredPitch: Swift.Double?, _ animation: WindowsUIXamlControlsMaps_MapAnimationKind) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_interop.trySetViewWithCenterZoomHeadingPitchAndAnimationAsync(center, zoomLevel, heading, desiredPitch, animation))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl2 members

    /// Gets the MapCamera settings that define the current position of the camera.
    /// - Returns: The MapCamera settings that define the current position of the camera.
    public var actualCamera: WindowsUIXamlControlsMaps_MapCamera {
        get throws {
            try COM.NullResult.unwrap(_imapControl2.get_ActualCamera())
        }
    }

    /// Gets or sets a value that indicates whether businesses are displayed on the map.
    /// - Returns: **true** if businesses are displayed on the map; otherwise, **false**.
    public var businessLandmarksVisible: Swift.Bool {
        get throws {
            try _imapControl2.get_BusinessLandmarksVisible()
        }
    }

    /// Gets or sets a value that indicates whether businesses are displayed on the map.
    /// - Returns: **true** if businesses are displayed on the map; otherwise, **false**.
    public func businessLandmarksVisible(_ value: Swift.Bool) throws {
        try _imapControl2.put_BusinessLandmarksVisible(value)
    }

    /// Gets or sets a custom experience for the MapControl.
    /// - Returns: A custom experience for the MapControl.
    public var customExperience: WindowsUIXamlControlsMaps_MapCustomExperience {
        get throws {
            try COM.NullResult.unwrap(_imapControl2.get_CustomExperience())
        }
    }

    /// Gets or sets a custom experience for the MapControl.
    /// - Returns: A custom experience for the MapControl.
    public func customExperience(_ value: WindowsUIXamlControlsMaps_MapCustomExperience?) throws {
        try _imapControl2.put_CustomExperience(value)
    }

    /// Gets a value that indicates if 3D is supported within the map.
    /// - Returns: **true** if 3D is supported within the map; otherwise, **false**.
    public var is3DSupported: Swift.Bool {
        get throws {
            try _imapControl2.get_Is3DSupported()
        }
    }

    /// Gets a value that indicates if Streetside is supported within the map.
    /// - Returns: **true** if Streetside is supported within the map; otherwise, **false**.
    public var isStreetsideSupported: Swift.Bool {
        get throws {
            try _imapControl2.get_IsStreetsideSupported()
        }
    }

    /// Gets or sets a value that indicates if the pan gesture is recognized on the map.
    /// - Returns: A value that indicates if the pan gesture is recognized on the map.
    public var panInteractionMode: WindowsUIXamlControlsMaps_MapPanInteractionMode {
        get throws {
            try _imapControl2.get_PanInteractionMode()
        }
    }

    /// Gets or sets a value that indicates if the pan gesture is recognized on the map.
    /// - Returns: A value that indicates if the pan gesture is recognized on the map.
    public func panInteractionMode(_ value: WindowsUIXamlControlsMaps_MapPanInteractionMode) throws {
        try _imapControl2.put_PanInteractionMode(value)
    }

    /// Gets or sets a value that indicates if the map responds to the rotate gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the rotate gesture and if the corresponding UI control appears on the map.
    public var rotateInteractionMode: WindowsUIXamlControlsMaps_MapInteractionMode {
        get throws {
            try _imapControl2.get_RotateInteractionMode()
        }
    }

    /// Gets or sets a value that indicates if the map responds to the rotate gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the rotate gesture and if the corresponding UI control appears on the map.
    public func rotateInteractionMode(_ value: WindowsUIXamlControlsMaps_MapInteractionMode) throws {
        try _imapControl2.put_RotateInteractionMode(value)
    }

    /// Gets or sets the MapScene associated with this MapControl.
    /// - Returns: The MapScene associated with this MapControl.
    public var scene: WindowsUIXamlControlsMaps_MapScene {
        get throws {
            try COM.NullResult.unwrap(_imapControl2.get_Scene())
        }
    }

    /// Gets or sets the MapScene associated with this MapControl.
    /// - Returns: The MapScene associated with this MapControl.
    public func scene(_ value: WindowsUIXamlControlsMaps_MapScene?) throws {
        try _imapControl2.put_Scene(value)
    }

    /// Gets the MapCamera settings that define the final position of the camera.
    /// - Returns: The MapCamera settings that define the final position of the camera.
    public var targetCamera: WindowsUIXamlControlsMaps_MapCamera {
        get throws {
            try COM.NullResult.unwrap(_imapControl2.get_TargetCamera())
        }
    }

    /// Gets or sets a value that indicates if the map responds to the tilt gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the tilt gesture and if the corresponding UI control appears on the map.
    public var tiltInteractionMode: WindowsUIXamlControlsMaps_MapInteractionMode {
        get throws {
            try _imapControl2.get_TiltInteractionMode()
        }
    }

    /// Gets or sets a value that indicates if the map responds to the tilt gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the tilt gesture and if the corresponding UI control appears on the map.
    public func tiltInteractionMode(_ value: WindowsUIXamlControlsMaps_MapInteractionMode) throws {
        try _imapControl2.put_TiltInteractionMode(value)
    }

    /// Gets or sets a value that indicates if transit features are displayed on the map.
    /// - Returns: **true** if transit features are displayed on the map; otherwise, **false**.
    public var transitFeaturesVisible: Swift.Bool {
        get throws {
            try _imapControl2.get_TransitFeaturesVisible()
        }
    }

    /// Gets or sets a value that indicates if transit features are displayed on the map.
    /// - Returns: **true** if transit features are displayed on the map; otherwise, **false**.
    public func transitFeaturesVisible(_ value: Swift.Bool) throws {
        try _imapControl2.put_TransitFeaturesVisible(value)
    }

    /// Gets or sets a value that indicates if the map responds to the zoom gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the zoom gesture and if the corresponding UI control appears on the map.
    public var zoomInteractionMode: WindowsUIXamlControlsMaps_MapInteractionMode {
        get throws {
            try _imapControl2.get_ZoomInteractionMode()
        }
    }

    /// Gets or sets a value that indicates if the map responds to the zoom gesture and if the corresponding UI control appears on the map.
    /// - Returns: A value that specifies if the map responds to the zoom gesture and if the corresponding UI control appears on the map.
    public func zoomInteractionMode(_ value: WindowsUIXamlControlsMaps_MapInteractionMode) throws {
        try _imapControl2.put_ZoomInteractionMode(value)
    }

    /// Occurs when the current position of the map's camera has changed.
    public func actualCameraChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapActualCameraChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_ActualCameraChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: actualCameraChanged)
    }

    public func actualCameraChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_ActualCameraChanged(token)
    }

    /// Occurs when the current position of the map's camera changes.
    public func actualCameraChanging(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapActualCameraChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_ActualCameraChanging(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: actualCameraChanging)
    }

    public func actualCameraChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_ActualCameraChanging(token)
    }

    /// Occurs when the custom experience of the MapControl changes.
    public func customExperienceChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapCustomExperienceChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_CustomExperienceChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: customExperienceChanged)
    }

    public func customExperienceChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_CustomExperienceChanged(token)
    }

    /// Occurs when the user taps or clicks a MapElement on the MapControl.
    public func mapElementClick(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapElementClickEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_MapElementClick(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapElementClick)
    }

    public func mapElementClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_MapElementClick(token)
    }

    /// Occurs when a pointer moves into the bounding area of a MapElement on a MapControl.
    public func mapElementPointerEntered(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapElementPointerEnteredEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_MapElementPointerEntered(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapElementPointerEntered)
    }

    public func mapElementPointerEntered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_MapElementPointerEntered(token)
    }

    /// Occurs when a pointer moves out of the bounding area of a MapElement on a MapControl.
    public func mapElementPointerExited(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapElementPointerExitedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_MapElementPointerExited(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapElementPointerExited)
    }

    public func mapElementPointerExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_MapElementPointerExited(token)
    }

    /// Occurs when the final position of the map's camera has changed.
    public func targetCameraChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapTargetCameraChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl2.add_TargetCameraChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: targetCameraChanged)
    }

    public func targetCameraChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl2.remove_TargetCameraChanged(token)
    }

    /// Starts an asynchronous operation to rotate the map's camera continuously from its current position.
    /// - Parameter rateInDegreesPerSecond: The degrees that the map's camera rotates per second in a horizontal clockwise direction.
    public func startContinuousRotate(_ rateInDegreesPerSecond: Swift.Double) throws {
        try _imapControl2.startContinuousRotate(rateInDegreesPerSecond)
    }

    /// Stops an asynchronous operation to rotate the map's camera continuously from its current position.
    public func stopContinuousRotate() throws {
        try _imapControl2.stopContinuousRotate()
    }

    /// Starts an asynchronous operation to tilt the map's camera continuously from its current position.
    /// - Parameter rateInDegreesPerSecond: The degrees of Pitch that the map's camera tilts down to the ground per second.
    public func startContinuousTilt(_ rateInDegreesPerSecond: Swift.Double) throws {
        try _imapControl2.startContinuousTilt(rateInDegreesPerSecond)
    }

    /// Stops an asynchronous operation to tilt the map's camera continuously from its current position.
    public func stopContinuousTilt() throws {
        try _imapControl2.stopContinuousTilt()
    }

    /// Starts an asynchronous operation to zoom in continuously until the map's maximum ZoomLevel is reached.
    /// - Parameter rateOfChangePerSecond: The change in ZoomLevel per second.
    public func startContinuousZoom(_ rateOfChangePerSecond: Swift.Double) throws {
        try _imapControl2.startContinuousZoom(rateOfChangePerSecond)
    }

    /// Stops an asynchronous operation to zoom in continuously until the map's maximum ZoomLevel is reached.
    public func stopContinuousZoom() throws {
        try _imapControl2.stopContinuousZoom()
    }

    /// Starts an asynchronous operation to rotate the map's camera from its current position.
    /// - Parameter degrees: The degrees that the map's camera rotates in a horizontal clockwise direction.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryRotateAsync(_ degrees: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryRotateAsync(degrees))
    }

    /// Starts an asynchronous operation to rotate the map's camera to a specific orientation.
    /// - Parameter angleInDegrees: The final Heading of the map's camera, in degrees.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryRotateToAsync(_ angleInDegrees: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryRotateToAsync(angleInDegrees))
    }

    /// Starts an asynchronous operation to tilt the map's camera from its current position.
    /// - Parameter degrees: The degrees of Pitch that the map's camera tilts down to the ground.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryTiltAsync(_ degrees: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryTiltAsync(degrees))
    }

    /// Starts an asynchronous operation to tilt the map's camera to a specific orientation.
    /// - Parameter angleInDegrees: The final Pitch of the map's camera in degrees.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryTiltToAsync(_ angleInDegrees: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryTiltToAsync(angleInDegrees))
    }

    /// Starts an asynchronous operation to zoom in, increasing the map's ZoomLevel by one.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryZoomInAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryZoomInAsync())
    }

    /// Starts an asynchronous operation to zoom out, decreasing the map's ZoomLevel by one.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryZoomOutAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryZoomOutAsync())
    }

    /// Starts an asynchronous operation to zoom the map to a specific ZoomLevel.
    /// - Parameter zoomLevel: The final zoom level of the map, between 1 and 20.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryZoomToAsync(_ zoomLevel: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.tryZoomToAsync(zoomLevel))
    }

    /// Sets the scene of the map displayed in the MapControl using the specified scene.
    /// - Parameter scene: Defines the item or area to appear in the map.
    /// - Returns: **true** if the asynchronous operation succeeded; otherwise, **false**.
    public func trySetSceneAsync(_ scene: WindowsUIXamlControlsMaps_MapScene?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.trySetSceneAsync(scene))
    }

    /// Sets the scene of the map displayed in the MapControl using the specified scene and animation.
    /// - Parameter scene: Defines the item or area to appear in the map.
    /// - Parameter animationKind: Specifies the animation to use when you change the scene of the map.
    /// - Returns: **true** if the asynchronous operation succeeded; otherwise, **false**.
    public func trySetSceneAsync(_ scene: WindowsUIXamlControlsMaps_MapScene?, _ animationKind: WindowsUIXamlControlsMaps_MapAnimationKind) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl2.trySetSceneWithAnimationAsync(scene, animationKind))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl3 members

    /// Occurs when the user presses-and-holds the MapControl or clicks on it using the right mouse button. An instance of MapRightTappedEventArgs provides data for this event.
    public func mapRightTapped(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapRightTappedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl3.add_MapRightTapped(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapRightTapped)
    }

    public func mapRightTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl3.remove_MapRightTapped(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl4 members

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public var businessLandmarksEnabled: Swift.Bool {
        get throws {
            try _imapControl4.get_BusinessLandmarksEnabled()
        }
    }

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public func businessLandmarksEnabled(_ value: Swift.Bool) throws {
        try _imapControl4.put_BusinessLandmarksEnabled(value)
    }

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public var transitFeaturesEnabled: Swift.Bool {
        get throws {
            try _imapControl4.get_TransitFeaturesEnabled()
        }
    }

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public func transitFeaturesEnabled(_ value: Swift.Bool) throws {
        try _imapControl4.put_TransitFeaturesEnabled(value)
    }

    /// Gets the visible region of the map control.
    /// - Parameter region: The visible region kind.
    /// - Returns: The geopath indicating the visible region of the map control. The returned value can be null when a valid visible region cannot be calculated.
    public func getVisibleRegion(_ region: WindowsUIXamlControlsMaps_MapVisibleRegionKind) throws -> WindowsDevicesGeolocation_Geopath {
        try COM.NullResult.unwrap(_imapControl4.getVisibleRegion(region))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl5 members

    /// Gets or sets a MapProjection that specifies how to transform the latitudes and longitudes of the map.
    /// - Returns: An MapProjection that specifies how to transform the latitudes and longitudes of the map.
    public var mapProjection: WindowsUIXamlControlsMaps_MapProjection {
        get throws {
            try _imapControl5.get_MapProjection()
        }
    }

    /// Gets or sets a MapProjection that specifies how to transform the latitudes and longitudes of the map.
    /// - Returns: An MapProjection that specifies how to transform the latitudes and longitudes of the map.
    public func mapProjection(_ value: WindowsUIXamlControlsMaps_MapProjection) throws {
        try _imapControl5.put_MapProjection(value)
    }

    /// Gets or sets an object that defines the style of the map control.
    /// - Returns: An object that defines the style of the map control.
    public var styleSheet: WindowsUIXamlControlsMaps_MapStyleSheet {
        get throws {
            try COM.NullResult.unwrap(_imapControl5.get_StyleSheet())
        }
    }

    /// Gets or sets an object that defines the style of the map control.
    /// - Returns: An object that defines the style of the map control.
    public func styleSheet(_ value: WindowsUIXamlControlsMaps_MapStyleSheet?) throws {
        try _imapControl5.put_StyleSheet(value)
    }

    /// Gets or sets the padding inside a map control.
    /// - Returns: The amount of space between the content of a MapControl and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public var viewPadding: WindowsUIXaml_Thickness {
        get throws {
            try _imapControl5.get_ViewPadding()
        }
    }

    /// Gets or sets the padding inside a map control.
    /// - Returns: The amount of space between the content of a MapControl and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public func viewPadding(_ value: WindowsUIXaml_Thickness) throws {
        try _imapControl5.put_ViewPadding(value)
    }

    /// Occurs when the user has completed a context input gesture on a map, such as a right-click.
    public func mapContextRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapControl?, WindowsUIXamlControlsMaps_MapContextRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _imapControl5.add_MapContextRequested(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: mapContextRequested)
    }

    public func mapContextRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _imapControl5.remove_MapContextRequested(token)
    }

    /// Retrieves the collection of MapElement objects within the specified radius.
    /// - Parameter offset: The point on the map that marks the center of a radius from which to retrieve the collection of MapElement objects.
    /// - Parameter radius: A number that's added to the offset to mark the edge of the radius.
    /// - Returns: The collection of MapElement objects within the specified radius.
    public func findMapElementsAtOffset(_ offset: WindowsFoundation_Point, _ radius: Swift.Double) throws -> WindowsFoundationCollections_IVectorView<WindowsUIXamlControlsMaps_MapElement?> {
        try COM.NullResult.unwrap(_imapControl5.findMapElementsAtOffsetWithRadius(offset, radius))
    }

    /// Converts a point on the map to a geographic location by using the specified altitude reference system.
    /// - Parameter offset: A point on the map to convert to a geographic location.
    /// - Parameter desiredReferenceSystem: The altitude reference system of the geographic point. A value of **Unspecified** for the altitude reference system has the same effect as using the default GetLocationFromOffset(Windows.Foundation.Point offset, Windows.Devices.Geolocation.Geopoint location) overload.
    /// - Parameter location: When this method returns, contains the corresponding geographic location.
    public func getLocationFromOffset(_ offset: WindowsFoundation_Point, _ desiredReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem, _ location: inout WindowsDevicesGeolocation_Geopoint?) throws {
        try _imapControl5.getLocationFromOffsetWithReferenceSystem(offset, desiredReferenceSystem, &location)
    }

    /// Starts an asynchronous operation to pan the map continuously from its current position.
    /// - Parameter horizontalPixelsPerSecond: The pixels per second to pan horizontally.
    /// - Parameter verticalPixelsPerSecond: The pixels per second to pan vertically.
    public func startContinuousPan(_ horizontalPixelsPerSecond: Swift.Double, _ verticalPixelsPerSecond: Swift.Double) throws {
        try _imapControl5.startContinuousPan(horizontalPixelsPerSecond, verticalPixelsPerSecond)
    }

    /// Stops an asynchronous operation to pan the map continuously from its current position.
    public func stopContinuousPan() throws {
        try _imapControl5.stopContinuousPan()
    }

    /// Starts an asynchronous operation to pan the map from its current position.
    /// - Parameter horizontalPixels: The pixels to pan horizontally.
    /// - Parameter verticalPixels: The pixels to pan vertically.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryPanAsync(_ horizontalPixels: Swift.Double, _ verticalPixels: Swift.Double) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl5.tryPanAsync(horizontalPixels, verticalPixels))
    }

    /// Starts an asynchronous operation to pan the map to a specific location.
    /// - Parameter location: The coordinates of a geographic location to which you want to pan the map.
    /// - Returns: Contains the results of the operation: **true** if the operation completed successfully; otherwise, **false**.
    public func tryPanToAsync(_ location: WindowsDevicesGeolocation_Geopoint?) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_imapControl5.tryPanToAsync(location))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl6 members

    /// Gets the collection of MapLayer objects that are children of the MapControl.
    /// - Returns: The collection of MapLayer objects that are children of the MapControl.
    public var layers: WindowsFoundationCollections_IVector<WindowsUIXamlControlsMaps_MapLayer?> {
        get throws {
            try COM.NullResult.unwrap(_imapControl6.get_Layers())
        }
    }

    /// Gets the collection of MapLayer objects that are children of the MapControl.
    /// - Returns: The collection of MapLayer objects that are children of the MapControl.
    public func layers(_ value: WindowsFoundationCollections_IVector<WindowsUIXamlControlsMaps_MapLayer?>?) throws {
        try _imapControl6.put_Layers(value)
    }

    /// Converts a point on the map to a geographic location.
    /// - Parameter offset: A point on the map to convert to a geographic location.
    /// - Parameter location: When this method returns, contains the corresponding geographic location.
    /// - Returns: Returns **true** if the location is invalid; otherwise, **false**.
    public func tryGetLocationFromOffset(_ offset: WindowsFoundation_Point, _ location: inout WindowsDevicesGeolocation_Geopoint?) throws -> Swift.Bool {
        try _imapControl6.tryGetLocationFromOffset(offset, &location)
    }

    /// Converts a point on the map to a geographic location by using the specified altitude reference system.
    /// - Parameter offset: A point on the map to convert to a geographic location.
    /// - Parameter desiredReferenceSystem: The altitude reference system of the geographic point. A value of **Unspecified** for the altitude reference system has the same effect as using the default TryGetLocationFromOffset(Windows.Foundation.Point offset, Windows.Devices.Geolocation.Geopoint location) overload.
    /// - Parameter location: When this method returns, contains the corresponding geographic location.
    /// - Returns: Returns **true** if the location is invalid; otherwise, **false**.
    public func tryGetLocationFromOffset(_ offset: WindowsFoundation_Point, _ desiredReferenceSystem: WindowsDevicesGeolocation_AltitudeReferenceSystem, _ location: inout WindowsDevicesGeolocation_Geopoint?) throws -> Swift.Bool {
        try _imapControl6.tryGetLocationFromOffsetWithReferenceSystem(offset, desiredReferenceSystem, &location)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl7 members

    /// Gets or sets the region (for example, the state or province) of an address.
    /// - Returns: The region (for example, the state or province) of an address.
    public var region: Swift.String {
        get throws {
            try _imapControl7.get_Region()
        }
    }

    /// Gets or sets the region (for example, the state or province) of an address.
    /// - Returns: The region (for example, the state or province) of an address.
    public func region(_ value: Swift.String) throws {
        try _imapControl7.put_Region(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControl8 members

    /// Gets a value indicating if the map can be tilted down
    public var canTiltDown: Swift.Bool {
        get throws {
            try _imapControl8.get_CanTiltDown()
        }
    }

    /// Gets a value indicating if the map can be tilted up
    public var canTiltUp: Swift.Bool {
        get throws {
            try _imapControl8.get_CanTiltUp()
        }
    }

    /// Gets a value indicating if the map can be zoomed in
    public var canZoomIn: Swift.Bool {
        get throws {
            try _imapControl8.get_CanZoomIn()
        }
    }

    /// Gets a value indicating if the map can be zoomed out
    public var canZoomOut: Swift.Bool {
        get throws {
            try _imapControl8.get_CanZoomOut()
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics8 members

    /// Identifies the CanTiltDown dependency property.
    /// - Returns: The identifier for the CanTiltDown dependency property.
    public static var canTiltDownProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics8.get_CanTiltDownProperty())
        }
    }

    /// Identifies the CanTiltUp dependency property.
    /// - Returns: The identifier for the CanTiltUp dependency property.
    public static var canTiltUpProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics8.get_CanTiltUpProperty())
        }
    }

    /// Identifies the CanZoomIn dependency property.
    /// - Returns: The identifier for the CanZoomIn dependency property.
    public static var canZoomInProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics8.get_CanZoomInProperty())
        }
    }

    /// Identifies the CanZoomOut dependency property.
    /// - Returns: The identifier for the CanZoomOut dependency property.
    public static var canZoomOutProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics8.get_CanZoomOutProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics members

    /// Identifies the Center dependency property.
    /// - Returns: The identifier for the Center dependency property.
    public static var centerProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_CenterProperty())
        }
    }

    /// Identifies the Children dependency property.
    /// - Returns: The identifier for the Children dependency property.
    public static var childrenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_ChildrenProperty())
        }
    }

    /// Identifies the ColorScheme dependency property.
    /// - Returns: The identifier for the ColorScheme dependency property.
    public static var colorSchemeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_ColorSchemeProperty())
        }
    }

    /// Identifies the DesiredPitch dependency property.
    /// - Returns: The identifier for the DesiredPitch dependency property.
    public static var desiredPitchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_DesiredPitchProperty())
        }
    }

    /// Identifies the Heading dependency property.
    /// - Returns: The identifier for the Heading dependency property.
    public static var headingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_HeadingProperty())
        }
    }

    /// Identifies the LandmarksVisible dependency property.
    /// - Returns: The identifier for the LandmarksVisible dependency property.
    public static var landmarksVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_LandmarksVisibleProperty())
        }
    }

    /// Identifies the LoadingStatus dependency property.
    /// - Returns: The identifier for the LoadingStatus dependency property.
    public static var loadingStatusProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_LoadingStatusProperty())
        }
    }

    /// Identifies the MapControl.Location XAML attached property.
    /// - Returns: The identifier for the MapControl.Location XAML attached property.
    public static var locationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_LocationProperty())
        }
    }

    /// Identifies the MapElements dependency property.
    /// - Returns: The identifier for the MapElements dependency property.
    public static var mapElementsProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_MapElementsProperty())
        }
    }

    /// Identifies the MapServiceToken dependency property.
    /// - Returns: The identifier for the MapServiceToken dependency property.
    public static var mapServiceTokenProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_MapServiceTokenProperty())
        }
    }

    /// Identifies the MapControl.NormalizedAnchorPoint XAML attached property.
    /// - Returns: The identifier for the MapControl.NormalizedAnchorPoint XAML attached property.
    public static var normalizedAnchorPointProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_NormalizedAnchorPointProperty())
        }
    }

    /// Identifies the PedestrianFeaturesVisible dependency property.
    /// - Returns: The identifier for the PedestrianFeaturesVisible dependency property.
    public static var pedestrianFeaturesVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_PedestrianFeaturesVisibleProperty())
        }
    }

    /// Identifies the Pitch dependency property.
    /// - Returns: The identifier for the Pitch dependency property.
    public static var pitchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_PitchProperty())
        }
    }

    /// Identifies the Routes dependency property.
    /// - Returns: The identifier for the Routes dependency property.
    public static var routesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_RoutesProperty())
        }
    }

    /// Identifies the Style dependency property.
    /// - Returns: The identifier for the Style dependency property.
    public static var styleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_StyleProperty())
        }
    }

    /// Identifies the TileSources dependency property.
    /// - Returns: The identifier for the TileSources dependency property.
    public static var tileSourcesProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_TileSourcesProperty())
        }
    }

    /// Identifies the TrafficFlowVisible dependency property.
    /// - Returns: The identifier for the TrafficFlowVisible dependency property.
    public static var trafficFlowVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_TrafficFlowVisibleProperty())
        }
    }

    /// Identifies the TransformOrigin dependency property.
    /// - Returns: The identifier for the TransformOrigin dependency property.
    public static var transformOriginProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_TransformOriginProperty())
        }
    }

    /// Identifies the WatermarkMode dependency property.
    /// - Returns: The identifier for the WatermarkMode dependency property.
    public static var watermarkModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_WatermarkModeProperty())
        }
    }

    /// Identifies the ZoomLevel dependency property.
    /// - Returns: The identifier for the ZoomLevel dependency property.
    public static var zoomLevelProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics.get_ZoomLevelProperty())
        }
    }

    /// Gets the value of the MapControl.Location XAML attached property from the specified child element of a MapControl. The location is the geographic location on the MapControl at which the MapControl.NormalizedAnchorPoint of the child element is positioned.
    /// - Parameter element: The element from which to read the property value.
    /// - Returns: The value of the MapControl.Location XAML attached property on the specified child element of a MapControl.
    public static func getLocation(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsDevicesGeolocation_Geopoint {
        try COM.NullResult.unwrap(_imapControlStatics.getLocation(element))
    }

    /// Sets the value of the MapControl.Location XAML attached property on the specified child element of a MapControl. The location is the geographic location on the MapControl at which the MapControl.NormalizedAnchorPoint of the child element is positioned.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter value: The value of the MapControl.Location XAML attached property to set on the specified child element of a MapControl.
    public static func setLocation(_ element: WindowsUIXaml_DependencyObject?, _ value: WindowsDevicesGeolocation_Geopoint?) throws {
        try _imapControlStatics.setLocation(element, value)
    }

    /// Gets the value of the MapControl.NormalizedAnchorPoint XAML attached property from the specified child element of a MapControl. The anchor point is the point on the child element that is positioned at the point on the MapControl specified by the MapControl.Location attached property.
    /// - Parameter element: The element from which to read the property value.
    /// - Returns: The value of the MapControl.NormalizedAnchorPoint XAML attached property on the specified child element of a MapControl.
    public static func getNormalizedAnchorPoint(_ element: WindowsUIXaml_DependencyObject?) throws -> WindowsFoundation_Point {
        try _imapControlStatics.getNormalizedAnchorPoint(element)
    }

    /// Sets the value of the MapControl.NormalizedAnchorPoint XAML attached property on the specified child element of a MapControl. The anchor point is the point on the child element that is positioned at the point on the MapControl specified by the MapControl.Location attached property.
    /// - Parameter element: The element on which to set the property value.
    /// - Parameter value: The value of the MapControl.NormalizedAnchorPoint XAML attached property to set on the specified child element of a MapControl.
    public static func setNormalizedAnchorPoint(_ element: WindowsUIXaml_DependencyObject?, _ value: WindowsFoundation_Point) throws {
        try _imapControlStatics.setNormalizedAnchorPoint(element, value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics7 members

    /// Identifies the Region dependency property.
    /// - Returns: Identifier for the Region dependency property.
    public static var regionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics7.get_RegionProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics4 members

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public static var businessLandmarksEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics4.get_BusinessLandmarksEnabledProperty())
        }
    }

    /// This property is not implemented.
    /// - Returns: This property is not implemented.
    public static var transitFeaturesEnabledProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics4.get_TransitFeaturesEnabledProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics6 members

    /// Identifies the Layers dependency property.
    /// - Returns: The Layers dependency property.
    public static var layersProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics6.get_LayersProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics2 members

    /// Identifies the BusinessLandmarksVisible dependency property.
    /// - Returns: The identifier for the BusinessLandmarksVisible dependency property.
    public static var businessLandmarksVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_BusinessLandmarksVisibleProperty())
        }
    }

    /// Identifies the Is3DSupported dependency property.
    /// - Returns: Is the identifier for the Is3DSupported dependency property.
    public static var is3DSupportedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_Is3DSupportedProperty())
        }
    }

    /// Identifies the IsStreetsideSupported dependency property.
    /// - Returns: Is the identifier for the IsStreetsideSupported dependency property.
    public static var isStreetsideSupportedProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_IsStreetsideSupportedProperty())
        }
    }

    /// Identifies the PanInteractionMode dependency property.
    /// - Returns: Identifier for the PanInteractionMode dependency property.
    public static var panInteractionModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_PanInteractionModeProperty())
        }
    }

    /// Identifies the RotateInteractionMode dependency property.
    /// - Returns: Identifier for the RotateInteractionMode dependency property.
    public static var rotateInteractionModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_RotateInteractionModeProperty())
        }
    }

    /// Identifies the Scene dependency property.
    /// - Returns: The identifier for the Scene dependency property.
    public static var sceneProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_SceneProperty())
        }
    }

    /// Identifies the TiltInteractionMode dependency property.
    /// - Returns: Identifier for the TiltInteractionMode dependency property.
    public static var tiltInteractionModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_TiltInteractionModeProperty())
        }
    }

    /// Identifies the TransitFeaturesVisible dependency property.
    /// - Returns: The identifier for the TransitFeaturesVisible dependency property.
    public static var transitFeaturesVisibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_TransitFeaturesVisibleProperty())
        }
    }

    /// Identifies the ZoomInteractionMode dependency property.
    /// - Returns: Identifier for the ZoomInteractionMode dependency property.
    public static var zoomInteractionModeProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics2.get_ZoomInteractionModeProperty())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapControlStatics5 members

    /// Identifies the MapProjection dependency property.
    /// - Returns: The identifier for the MapProjection dependency property.
    public static var mapProjectionProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics5.get_MapProjectionProperty())
        }
    }

    /// Identifies the StyleSheet dependency property.
    /// - Returns: The identifier for the StyleSheet dependency property.
    public static var styleSheetProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics5.get_StyleSheetProperty())
        }
    }

    /// Identifies the ViewPadding dependency property.
    /// - Returns: The identifier for the ViewPadding dependency property.
    public static var viewPaddingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapControlStatics5.get_ViewPaddingProperty())
        }
    }

    // MARK: Implementation details

    private var _imapControl2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl2>? = nil

    internal var _imapControl2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl2> {
        get throws {
            try _imapControl2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl2.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl2.self)
            }
        }
    }

    private var _imapControl3_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl3>? = nil

    internal var _imapControl3: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl3> {
        get throws {
            try _imapControl3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl3.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl3.self)
            }
        }
    }

    private var _imapControl4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl4>? = nil

    internal var _imapControl4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl4> {
        get throws {
            try _imapControl4_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl4.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl4.self)
            }
        }
    }

    private var _imapControl5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl5>? = nil

    internal var _imapControl5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl5> {
        get throws {
            try _imapControl5_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl5.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl5.self)
            }
        }
    }

    private var _imapControl6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl6>? = nil

    internal var _imapControl6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl6> {
        get throws {
            try _imapControl6_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl6.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl6.self)
            }
        }
    }

    private var _imapControl7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl7>? = nil

    internal var _imapControl7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl7> {
        get throws {
            try _imapControl7_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl7.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl7.self)
            }
        }
    }

    private var _imapControl8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl8>? = nil

    internal var _imapControl8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl8> {
        get throws {
            try _imapControl8_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl8.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControl8.self)
            }
        }
    }

    deinit {
        _imapControl2_storage?.release()
        _imapControl3_storage?.release()
        _imapControl4_storage?.release()
        _imapControl5_storage?.release()
        _imapControl6_storage?.release()
        _imapControl7_storage?.release()
        _imapControl8_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imapControlStatics8_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics8>? = nil

    internal static var _imapControlStatics8: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics8> {
        get throws {
            try _imapControlStatics8_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics8.iid)
            }
        }
    }

    private static var _imapControlStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics>? = nil

    internal static var _imapControlStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics> {
        get throws {
            try _imapControlStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics.iid)
            }
        }
    }

    private static var _imapControlStatics7_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics7>? = nil

    internal static var _imapControlStatics7: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics7> {
        get throws {
            try _imapControlStatics7_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics7.iid)
            }
        }
    }

    private static var _imapControlStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics4>? = nil

    internal static var _imapControlStatics4: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics4> {
        get throws {
            try _imapControlStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics4.iid)
            }
        }
    }

    private static var _imapControlStatics6_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics6>? = nil

    internal static var _imapControlStatics6: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics6> {
        get throws {
            try _imapControlStatics6_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics6.iid)
            }
        }
    }

    private static var _imapControlStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics2>? = nil

    internal static var _imapControlStatics2: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics2> {
        get throws {
            try _imapControlStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics2.iid)
            }
        }
    }

    private static var _imapControlStatics5_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics5>? = nil

    internal static var _imapControlStatics5: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics5> {
        get throws {
            try _imapControlStatics5_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapControl", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapControlStatics5.iid)
            }
        }
    }
}