// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a view of a map.
public final class WindowsUIXamlControlsMaps_MapScene: WindowsRuntime.WinRTImport<WindowsUIXamlControlsMaps_MapSceneProjection> {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapScene members

    /// Gets the MapCamera settings that define the final position of the camera.
    /// - Returns: The MapCamera settings that define the final position of the camera.
    public var targetCamera: WindowsUIXamlControlsMaps_MapCamera {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TargetCamera())
        }
    }

    /// Occurs when the final position of the map's camera has changed.
    public func targetCameraChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsUIXamlControlsMaps_MapScene?, WindowsUIXamlControlsMaps_MapTargetCameraChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_TargetCameraChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: targetCameraChanged)
    }

    public func targetCameraChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_TargetCameraChanged(token)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapSceneStatics members

    /// Creates a scene to appear in a map based on a four-sided geographic area.
    /// - Parameter bounds: The four-sided geographic area to appear in the scene.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromBoundingBox(_ bounds: WindowsDevicesGeolocation_GeoboundingBox?) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromBoundingBox(bounds))
    }

    /// Creates a scene to appear in a map based on a four-sided geographic area, heading, and pitch.
    /// - Parameter bounds: The four-sided geographic area to appear in the scene.
    /// - Parameter headingInDegrees: The directional heading of the map's camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West. The default *headingInDegrees* value is 0.
    /// - Parameter pitchInDegrees: The pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum). The default *pitchInDegrees* value is 0.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromBoundingBox(_ bounds: WindowsDevicesGeolocation_GeoboundingBox?, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromBoundingBoxWithHeadingAndPitch(bounds, headingInDegrees, pitchInDegrees))
    }

    /// Creates a scene to appear in a map based on the position of the specified MapCamera.
    /// - Parameter camera: The current position of the specified camera.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromCamera(_ camera: WindowsUIXamlControlsMaps_MapCamera?) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromCamera(camera))
    }

    /// Creates a scene to appear in a map based on a single geographic location.
    /// - Parameter location: The center of the scene.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromLocation(_ location: WindowsDevicesGeolocation_Geopoint?) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocation(location))
    }

    /// Creates a scene to appear in a map based on a single geographic location, heading, and pitch.
    /// - Parameter location: The center of the scene.
    /// - Parameter headingInDegrees: The directional heading of the map's camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West. The default *headingInDegrees* value is 0.
    /// - Parameter pitchInDegrees: The pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum). The default *pitchInDegrees* value is 0.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromLocation(_ location: WindowsDevicesGeolocation_Geopoint?, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocationWithHeadingAndPitch(location, headingInDegrees, pitchInDegrees))
    }

    /// Creates a scene to appear in a map based on a single geographic location and radius.
    /// - Parameter location: The center of the scene.
    /// - Parameter radiusInMeters: The radius around the center to appear in the scene, in meters.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromLocationAndRadius(_ location: WindowsDevicesGeolocation_Geopoint?, _ radiusInMeters: Swift.Double) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocationAndRadius(location, radiusInMeters))
    }

    /// Creates a scene to appear in a map based on a single geographic location, radius, heading, and pitch.
    /// - Parameter location: The center of the scene.
    /// - Parameter radiusInMeters: The radius around the center to appear in the scene, in meters.
    /// - Parameter headingInDegrees: The directional heading of the map's camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West. The default *headingInDegrees* value is 0.
    /// - Parameter pitchInDegrees: The pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum). The default *pitchInDegrees* value is 0.
    /// - Returns: Represents a view of a map in the MapControl.
    public static func createFromLocationAndRadius(_ location: WindowsDevicesGeolocation_Geopoint?, _ radiusInMeters: Swift.Double, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocationAndRadiusWithHeadingAndPitch(location, radiusInMeters, headingInDegrees, pitchInDegrees))
    }

    public static func createFromLocations(_ locations: WindowsFoundationCollections_IIterable<WindowsDevicesGeolocation_Geopoint?>?) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocations(locations))
    }

    public static func createFromLocations(_ locations: WindowsFoundationCollections_IIterable<WindowsDevicesGeolocation_Geopoint?>?, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double) throws -> WindowsUIXamlControlsMaps_MapScene {
        try COM.NullResult.unwrap(_imapSceneStatics.createFromLocationsWithHeadingAndPitch(locations, headingInDegrees, pitchInDegrees))
    }

    // MARK: Implementation details

    private static var _imapSceneStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapSceneStatics>? = nil

    internal static var _imapSceneStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapSceneStatics> {
        get throws {
            try _imapSceneStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapScene", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapSceneStatics.iid)
            }
        }
    }
}