// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a 3D element displayed on a MapControl.
public final class WindowsUIXamlControlsMaps_MapElement3D: WindowsRuntime.WinRTImport<WindowsUIXamlControlsMaps_MapElement3DProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsUIXamlControlsMaps_MapElement3DProjection.self))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement3D members

    /// Gets or sets the directional heading of the 3D map element in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West. The default value is 0.
    public var heading: Swift.Double {
        get throws {
            try _interop.get_Heading()
        }
    }

    /// Gets or sets the directional heading of the 3D map element in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the map in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West. The default value is 0.
    public func heading(_ value: Swift.Double) throws {
        try _interop.put_Heading(value)
    }

    /// Gets or sets the geographic location of the MapElement3D on the MapControl. .
    /// - Returns: The geographic location of the MapElement3D on the MapControl.
    public var location: WindowsDevicesGeolocation_Geopoint {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Location())
        }
    }

    /// Gets or sets the geographic location of the MapElement3D on the MapControl. .
    /// - Returns: The geographic location of the MapElement3D on the MapControl.
    public func location(_ value: WindowsDevicesGeolocation_Geopoint?) throws {
        try _interop.put_Location(value)
    }

    /// Gets or sets the 3D model that represents a 3D object.
    /// - Returns: the 3D model that represents a 3D object.
    public var model: WindowsUIXamlControlsMaps_MapModel3D {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Model())
        }
    }

    /// Gets or sets the 3D model that represents a 3D object.
    /// - Returns: the 3D model that represents a 3D object.
    public func model(_ value: WindowsUIXamlControlsMaps_MapModel3D?) throws {
        try _interop.put_Model(value)
    }

    /// Gets or sets a value that indicates by how many degrees you want the 3D map element to be tilted. A value of 0 is looking out at the horizon and a value of -90 is looking straight down. A value of 90 is looking straight up. The default value is 0.
    /// - Returns: A value that indicates by how many degrees you want the 3D map element to be tilted.
    public var pitch: Swift.Double {
        get throws {
            try _interop.get_Pitch()
        }
    }

    /// Gets or sets a value that indicates by how many degrees you want the 3D map element to be tilted. A value of 0 is looking out at the horizon and a value of -90 is looking straight down. A value of 90 is looking straight up. The default value is 0.
    /// - Returns: A value that indicates by how many degrees you want the 3D map element to be tilted.
    public func pitch(_ value: Swift.Double) throws {
        try _interop.put_Pitch(value)
    }

    /// Gets or sets the roll of the 3D map element in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    /// - Returns: The roll of the 3D map element in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    public var roll: Swift.Double {
        get throws {
            try _interop.get_Roll()
        }
    }

    /// Gets or sets the roll of the 3D map element in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    /// - Returns: The roll of the 3D map element in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    public func roll(_ value: Swift.Double) throws {
        try _interop.put_Roll(value)
    }

    /// The scale to apply to the 3D map element.
    /// - Returns: The scale to apply to the 3D map element. A value of Vector3 (1.0,1.0,1.0) is equivalent to 100%.
    public var scale: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _interop.get_Scale()
        }
    }

    /// The scale to apply to the 3D map element.
    /// - Returns: The scale to apply to the 3D map element. A value of Vector3 (1.0,1.0,1.0) is equivalent to 100%.
    public func scale(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _interop.put_Scale(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapElement3DStatics members

    /// Identifies the Heading dependency property.
    /// - Returns: The Heading dependency property.
    public static var headingProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElement3DStatics.get_HeadingProperty())
        }
    }

    /// Identifies the LocationProperty dependency property.
    /// - Returns: The LocationProperty dependency property.
    public static var locationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElement3DStatics.get_LocationProperty())
        }
    }

    /// Identifies the Pitch dependency property.
    /// - Returns: The Pitch dependency property.
    public static var pitchProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElement3DStatics.get_PitchProperty())
        }
    }

    /// Identifies the Pitch dependency property.
    /// - Returns: The Pitch dependency property.
    public static var rollProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElement3DStatics.get_RollProperty())
        }
    }

    /// Identifies the Roll dependency property.
    /// - Returns: The Roll dependency property.
    public static var scaleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapElement3DStatics.get_ScaleProperty())
        }
    }

    // MARK: Implementation details

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement3D", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _imapElement3DStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3DStatics>? = nil

    internal static var _imapElement3DStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3DStatics> {
        get throws {
            try _imapElement3DStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapElement3D", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapElement3DStatics.iid)
            }
        }
    }
}