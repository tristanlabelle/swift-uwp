// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a collection of map data to which you can bind data and manipulate independently of other map types of map data.
open class WindowsUIXamlControlsMaps_MapLayer: WindowsRuntime.WinRTComposableClass {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapLayerFactory members

    public convenience init() throws {
        try self.init(_compose: Self.self != WindowsUIXamlControlsMaps_MapLayer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try COM.NullResult.unwrap(Self._imapLayerFactory.createInstance(baseInterface, &innerInterface))
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapLayer members

    /// Gets or sets a value that determines the order in which objects of the MapLayer receive focus when the user navigates through those elements by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation across elements in a MapLayer.
    public var mapTabIndex: Swift.Int32 {
        get throws {
            try _imapLayer.get_MapTabIndex()
        }
    }

    /// Gets or sets a value that determines the order in which objects of the MapLayer receive focus when the user navigates through those elements by pressing the Tab key.
    /// - Returns: A value that determines the order of logical navigation across elements in a MapLayer.
    public func mapTabIndex(_ value: Swift.Int32) throws {
        try _imapLayer.put_MapTabIndex(value)
    }

    /// Gets or sets a value that indicates whether the MapLayer is visible on the MapControl.
    /// - Returns: **true** if the MapLayer is visible on the MapControl; otherwise, **false**.
    public var visible: Swift.Bool {
        get throws {
            try _imapLayer.get_Visible()
        }
    }

    /// Gets or sets a value that indicates whether the MapLayer is visible on the MapControl.
    /// - Returns: **true** if the MapLayer is visible on the MapControl; otherwise, **false**.
    public func visible(_ value: Swift.Bool) throws {
        try _imapLayer.put_Visible(value)
    }

    /// Gets or sets the z-index of the MapLayer. A MapLayer with a higher z-index is displayed on top of a MapLayer with a lower z-index.
    /// - Returns: The z-index of the MapLayer.
    public var zindex: Swift.Int32 {
        get throws {
            try _imapLayer.get_ZIndex()
        }
    }

    /// Gets or sets the z-index of the MapLayer. A MapLayer with a higher z-index is displayed on top of a MapLayer with a lower z-index.
    /// - Returns: The z-index of the MapLayer.
    public func zindex(_ value: Swift.Int32) throws {
        try _imapLayer.put_ZIndex(value)
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapLayerStatics members

    /// Identifies the MapTagIndex dependency property.
    /// - Returns: The MapTagIndex dependency property.
    public static var mapTabIndexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapLayerStatics.get_MapTabIndexProperty())
        }
    }

    /// Identifies the Visible dependency property.
    /// - Returns: The Visible dependency property.
    public static var visibleProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapLayerStatics.get_VisibleProperty())
        }
    }

    /// Identifies the ZIndex dependency property.
    /// - Returns: The ZIndex dependency property.
    public static var zindexProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapLayerStatics.get_ZIndexProperty())
        }
    }

    // MARK: Implementation details

    private var _imapLayer_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayer>? = nil

    internal var _imapLayer: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayer> {
        get throws {
            try _imapLayer_storage.lazyInit {
                try _queryInnerInterfacePointer(CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayer.iid).cast(to: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayer.self)
            }
        }
    }

    public init(_transferringRef comPointer: Swift.UnsafeMutablePointer<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayer>) {
        super.init(_transferringRef: IInspectablePointer.cast(comPointer))
    }

    public override init<Interface>(_compose: Swift.Bool, _factory: ComposableFactory<Interface>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    deinit {
        _imapLayer_storage?.release()
    }

    private static var _imapLayerFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerFactory>? = nil

    internal static var _imapLayerFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerFactory> {
        get throws {
            try _imapLayerFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapLayer", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerFactory.iid)
            }
        }
    }

    private static var _imapLayerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerStatics>? = nil

    internal static var _imapLayerStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerStatics> {
        get throws {
            try _imapLayerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapLayer", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapLayerStatics.iid)
            }
        }
    }
}