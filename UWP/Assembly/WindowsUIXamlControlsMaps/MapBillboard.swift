// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Displays an image that scales and fades in relation to its distance from the ReferenceCamera of the MapBillboard.
public final class WindowsUIXamlControlsMaps_MapBillboard: WindowsRuntime.WinRTImport<WindowsUIXamlControlsMaps_MapBillboardProjection> {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapBillboardFactory members

    public convenience init(_ camera: WindowsUIXamlControlsMaps_MapCamera?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imapBillboardFactory.createInstanceFromCamera(camera)))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapBillboard members

    /// Gets or sets the behavior of a MapBillboard when it collides with other map features due to zoom level.
    /// - Returns: The behavior of a MapBillboard when it collides with other map features due to zoom level.
    public var collisionBehaviorDesired: WindowsUIXamlControlsMaps_MapElementCollisionBehavior {
        get throws {
            try _interop.get_CollisionBehaviorDesired()
        }
    }

    /// Gets or sets the behavior of a MapBillboard when it collides with other map features due to zoom level.
    /// - Returns: The behavior of a MapBillboard when it collides with other map features due to zoom level.
    public func collisionBehaviorDesired(_ value: WindowsUIXamlControlsMaps_MapElementCollisionBehavior) throws {
        try _interop.put_CollisionBehaviorDesired(value)
    }

    /// Gets or sets the image for the MapBillboard. Provide an optional custom image to replace the default point of interest (POI) image.
    /// - Returns: The point of interest (POI) image for the MapBillboard.
    public var image: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Image())
        }
    }

    /// Gets or sets the image for the MapBillboard. Provide an optional custom image to replace the default point of interest (POI) image.
    /// - Returns: The point of interest (POI) image for the MapBillboard.
    public func image(_ value: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _interop.put_Image(value)
    }

    /// Gets or sets the geographic location of the MapBillboard on the MapControl. The location is the geographic location on the MapControl at which the NormalizedAnchorPoint of the MapBillboard is positioned.
    /// - Returns: The geographic location of the MapBillboard on the MapControl.
    public var location: WindowsDevicesGeolocation_Geopoint {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Location())
        }
    }

    /// Gets or sets the geographic location of the MapBillboard on the MapControl. The location is the geographic location on the MapControl at which the NormalizedAnchorPoint of the MapBillboard is positioned.
    /// - Returns: The geographic location of the MapBillboard on the MapControl.
    public func location(_ value: WindowsDevicesGeolocation_Geopoint?) throws {
        try _interop.put_Location(value)
    }

    /// Gets or sets the anchor point of the MapBillboard. The anchor point is the point on the MapBillboard that is positioned at the point on the MapControl specified by the Location property.
    /// - Returns: The anchor point of the MapBillboard.
    public var normalizedAnchorPoint: WindowsFoundation_Point {
        get throws {
            try _interop.get_NormalizedAnchorPoint()
        }
    }

    /// Gets or sets the anchor point of the MapBillboard. The anchor point is the point on the MapBillboard that is positioned at the point on the MapControl specified by the Location property.
    /// - Returns: The anchor point of the MapBillboard.
    public func normalizedAnchorPoint(_ value: WindowsFoundation_Point) throws {
        try _interop.put_NormalizedAnchorPoint(value)
    }

    /// Gets the MapCamera settings that define the position and orientation where the image appears at a 1x scale.
    /// - Returns: The MapCamera settings that define the position and orientation where the image appears at a 1x scale.
    public var referenceCamera: WindowsUIXamlControlsMaps_MapCamera {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ReferenceCamera())
        }
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapBillboardStatics members

    /// Identifies the CollisionBehaviorDesired dependency property.
    /// - Returns: Identifier for the CollisionBehaviorDesired dependency property.
    public static var collisionBehaviorDesiredProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapBillboardStatics.get_CollisionBehaviorDesiredProperty())
        }
    }

    /// Identifies the Location dependency property.
    /// - Returns: The identifier for the Location dependency property.
    public static var locationProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapBillboardStatics.get_LocationProperty())
        }
    }

    /// Identifies the NormalizedAnchorPoint dependency property.
    /// - Returns: The identifier for the NormalizedAnchorPoint dependency property.
    public static var normalizedAnchorPointProperty: WindowsUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_imapBillboardStatics.get_NormalizedAnchorPointProperty())
        }
    }

    // MARK: Implementation details

    private static var _imapBillboardFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardFactory>? = nil

    internal static var _imapBillboardFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardFactory> {
        get throws {
            try _imapBillboardFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapBillboard", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardFactory.iid)
            }
        }
    }

    private static var _imapBillboardStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardStatics>? = nil

    internal static var _imapBillboardStatics: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardStatics> {
        get throws {
            try _imapBillboardStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapBillboard", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapBillboardStatics.iid)
            }
        }
    }
}