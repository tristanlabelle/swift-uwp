// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the position of a camera to define the view of a map.
public final class WindowsUIXamlControlsMaps_MapCamera: WindowsRuntime.WinRTImport<WindowsUIXamlControlsMaps_MapCameraProjection> {
    // MARK: Windows.UI.Xaml.Controls.Maps.IMapCameraFactory members

    public convenience init(_ location: WindowsDevicesGeolocation_Geopoint?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imapCameraFactory.createInstanceWithLocation(location)))
    }

    public convenience init(_ location: WindowsDevicesGeolocation_Geopoint?, _ headingInDegrees: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imapCameraFactory.createInstanceWithLocationAndHeading(location, headingInDegrees)))
    }

    public convenience init(_ location: WindowsDevicesGeolocation_Geopoint?, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imapCameraFactory.createInstanceWithLocationHeadingAndPitch(location, headingInDegrees, pitchInDegrees)))
    }

    public convenience init(_ location: WindowsDevicesGeolocation_Geopoint?, _ headingInDegrees: Swift.Double, _ pitchInDegrees: Swift.Double, _ rollInDegrees: Swift.Double, _ fieldOfViewInDegrees: Swift.Double) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._imapCameraFactory.createInstanceWithLocationHeadingPitchRollAndFieldOfView(location, headingInDegrees, pitchInDegrees, rollInDegrees, fieldOfViewInDegrees)))
    }

    // MARK: Windows.UI.Xaml.Controls.Maps.IMapCamera members

    /// Gets or sets the vertical angle of view that appears in the camera, in degrees.
    /// - Returns: The vertical angle of view that appears in the camera, in degrees.
    public var fieldOfView: Swift.Double {
        get throws {
            try _interop.get_FieldOfView()
        }
    }

    /// Gets or sets the vertical angle of view that appears in the camera, in degrees.
    /// - Returns: The vertical angle of view that appears in the camera, in degrees.
    public func fieldOfView(_ value: Swift.Double) throws {
        try _interop.put_FieldOfView(value)
    }

    /// Gets or sets the directional heading of the camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public var heading: Swift.Double {
        get throws {
            try _interop.get_Heading()
        }
    }

    /// Gets or sets the directional heading of the camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    /// - Returns: The directional heading of the camera in degrees, where 0 or 360 = North, 90 = East, 180 = South, and 270 = West.
    public func heading(_ value: Swift.Double) throws {
        try _interop.put_Heading(value)
    }

    /// Gets or sets the location of the camera in the map.
    /// - Returns: The location of the camera in the map.
    public var location: WindowsDevicesGeolocation_Geopoint {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Location())
        }
    }

    /// Gets or sets the location of the camera in the map.
    /// - Returns: The location of the camera in the map.
    public func location(_ value: WindowsDevicesGeolocation_Geopoint?) throws {
        try _interop.put_Location(value)
    }

    /// Gets or sets the pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum).
    /// - Returns: The pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum).
    public var pitch: Swift.Double {
        get throws {
            try _interop.get_Pitch()
        }
    }

    /// Gets or sets the pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum).
    /// - Returns: The pitch of the map's camera in degrees, where 90 is looking out at the horizon (maximum) and 0 is looking straight down (minimum).
    public func pitch(_ value: Swift.Double) throws {
        try _interop.put_Pitch(value)
    }

    /// Gets or sets the roll of the camera in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    /// - Returns: The roll of the camera in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    public var roll: Swift.Double {
        get throws {
            try _interop.get_Roll()
        }
    }

    /// Gets or sets the roll of the camera in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    /// - Returns: The roll of the camera in degrees, where -90 is tilting to the left and +90 is tilting to the right.
    public func roll(_ value: Swift.Double) throws {
        try _interop.put_Roll(value)
    }

    // MARK: Implementation details

    private static var _imapCameraFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapCameraFactory>? = nil

    internal static var _imapCameraFactory: COM.COMInterop<CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapCameraFactory> {
        get throws {
            try _imapCameraFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.UI.Xaml.Controls.Maps.MapCamera", id: CWinRT.SWRT_WindowsUIXamlControlsMaps_IMapCameraFactory.iid)
            }
        }
    }
}