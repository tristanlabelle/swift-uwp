// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents a request for a token from a client to a provider.
public final class WindowsSecurityAuthenticationWebProvider_WebProviderTokenRequest: WindowsRuntime.WinRTImport<WindowsSecurityAuthenticationWebProvider_WebProviderTokenRequestProjection> {
    // MARK: Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest members

    /// Gets the app callback Uri.
    /// - Returns: The app callback Uri.
    public var applicationCallbackUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ApplicationCallbackUri())
        }
    }

    /// Gets the web token request made by the client.
    /// - Returns: The web token request made by the client.
    public var clientRequest: WindowsSecurityAuthenticationWebCore_WebTokenRequest {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ClientRequest())
        }
    }

    /// Gets the web account selection options.
    /// - Returns: The web account selection options.
    public var webAccountSelectionOptions: WindowsSecurityAuthenticationWebProvider_WebAccountSelectionOptions {
        get throws {
            try _interop.get_WebAccountSelectionOptions()
        }
    }

    /// Gets the web accounts for the request.
    /// - Returns: The web accounts for the request.
    public var webAccounts: WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_WebAccount?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_WebAccounts())
        }
    }

    /// Gets a token binding key for the app asynchronously.
    /// - Parameter keyType: The type of key to get.
    /// - Parameter target: The target Uri.
    /// - Returns: When this method completes, it returns a cryptographic key.
    public func getApplicationTokenBindingKeyAsync(_ keyType: WindowsSecurityAuthenticationWeb_TokenBindingKeyType, _ target: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCryptographyCore_CryptographicKey?> {
        try COM.NullResult.unwrap(_interop.getApplicationTokenBindingKeyAsync(keyType, target))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest2 members

    /// Gets an app token binding key Id.
    /// - Parameter keyType: The type of token binding key.
    /// - Parameter target: The target Uri for the key.
    /// - Returns: When this method completes, it returns the token binding key Id.
    public func getApplicationTokenBindingKeyIdAsync(_ keyType: WindowsSecurityAuthenticationWeb_TokenBindingKeyType, _ target: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IBuffer?> {
        try COM.NullResult.unwrap(_iwebProviderTokenRequest2.getApplicationTokenBindingKeyIdAsync(keyType, target))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3 members

    /// Gets the package family name of the calling application.
    /// - Returns: A string representing the package family name.
    public var applicationPackageFamilyName: Swift.String {
        get throws {
            try _iwebProviderTokenRequest3.get_ApplicationPackageFamilyName()
        }
    }

    /// Gets the process name of the calling application.
    /// - Returns: A string representing the process name.
    public var applicationProcessName: Swift.String {
        get throws {
            try _iwebProviderTokenRequest3.get_ApplicationProcessName()
        }
    }

    /// Determines if the calling application fulfills a given SSO capability.
    /// - Parameter capabilityName: The name of the capability to check for.
    /// - Returns: An asynchronous operation with a boolean value. **True** if the application supports the given capability, otherwise **False**.
    public func checkApplicationForCapabilityAsync(_ capabilityName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_iwebProviderTokenRequest3.checkApplicationForCapabilityAsync(capabilityName))
    }

    // MARK: Implementation details

    private var _iwebProviderTokenRequest2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest2>? = nil

    internal var _iwebProviderTokenRequest2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest2> {
        get throws {
            try _iwebProviderTokenRequest2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest2.iid).cast(to: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest2.self)
            }
        }
    }

    private var _iwebProviderTokenRequest3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest3>? = nil

    internal var _iwebProviderTokenRequest3: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest3> {
        get throws {
            try _iwebProviderTokenRequest3_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest3.iid).cast(to: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebProviderTokenRequest3.self)
            }
        }
    }

    deinit {
        _iwebProviderTokenRequest2_storage?.release()
        _iwebProviderTokenRequest3_storage?.release()
    }
}