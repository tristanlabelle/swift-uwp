// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides methods for managing web accounts.
public enum WindowsSecurityAuthenticationWebProvider_WebAccountManager {
    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountScopeManagerStatics members

    public static func addWebAccountAsync(_ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ scope: WindowsSecurityAuthenticationWebProvider_WebAccountScope) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountScopeManagerStatics.addWebAccountWithScopeAsync(webAccountId, webAccountUserName, props, scope))
    }

    /// Sets the scope of a web account asynchronously.
    /// - Parameter webAccount: The web account to set scope for.
    /// - Parameter scope: The scope to set.
    /// - Returns: This method does not return a value.
    public static func setScopeAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?, _ scope: WindowsSecurityAuthenticationWebProvider_WebAccountScope) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountScopeManagerStatics.setScopeAsync(webAccount, scope))
    }

    /// Gets the scope of the web account.
    /// - Parameter webAccount: The web account to get scope for.
    /// - Returns: The scope of the web account.
    public static func getScope(_ webAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsSecurityAuthenticationWebProvider_WebAccountScope {
        try _iwebAccountScopeManagerStatics.getScope(webAccount)
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3 members

    /// Finds all provider web accounts associated with a given user asynchronously (for use with multi-user-aware apps).
    /// - Parameter user: The user associated with the accounts.
    /// - Returns: When this method completes, it returns all provider web accounts for the user.
    public static func findAllProviderWebAccountsForUserAsync(_ user: WindowsSystem_User?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_WebAccount?>?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics3.findAllProviderWebAccountsForUserAsync(user))
    }

    public static func addWebAccountForUserAsync(_ user: WindowsSystem_User?, _ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics3.addWebAccountForUserAsync(user, webAccountId, webAccountUserName, props))
    }

    public static func addWebAccountForUserAsync(_ user: WindowsSystem_User?, _ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ scope: WindowsSecurityAuthenticationWebProvider_WebAccountScope) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics3.addWebAccountWithScopeForUserAsync(user, webAccountId, webAccountUserName, props, scope))
    }

    public static func addWebAccountForUserAsync(_ user: WindowsSystem_User?, _ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ scope: WindowsSecurityAuthenticationWebProvider_WebAccountScope, _ perUserWebAccountId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics3.addWebAccountWithScopeAndMapForUserAsync(user, webAccountId, webAccountUserName, props, scope, perUserWebAccountId))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics2 members

    /// Pulls cookies asynchronously. Use this to enable single sign-on in an app after a user has entered their credentials into a web browser.
    /// - Parameter uriString: The Uri to pull cookies from.
    /// - Parameter callerPFN: The caller's package family name.
    /// - Returns: This method does not return a value.
    public static func pullCookiesAsync(_ uriString: Swift.String, _ callerPFN: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics2.pullCookiesAsync(uriString, callerPFN))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics4 members

    /// Clears the web account manager's token cache for all web accounts.
    /// - Returns: This method does not return a value.
    public static func invalidateAppCacheForAllAccountsAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics4.invalidateAppCacheForAllAccountsAsync())
    }

    /// Clears the web account manager's token cache for a specific web account.
    /// - Parameter webAccount: The web account for which tokens will be cleared.
    /// - Returns: This method does not return a value.
    public static func invalidateAppCacheForAccountAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics4.invalidateAppCacheForAccountAsync(webAccount))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics members

    public static func addWebAccountAsync(_ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?, _ scope: WindowsSecurityAuthenticationWebProvider_WebAccountScope, _ perUserWebAccountId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountMapManagerStatics.addWebAccountWithScopeAndMapAsync(webAccountId, webAccountUserName, props, scope, perUserWebAccountId))
    }

    /// Creates a per-app to per-user account link.
    /// - Parameter perAppAccount: The per-app web account.
    /// - Parameter perUserWebAccountId: The web account Id of the per-user web account to link.
    /// - Returns: This method does not return a value.
    public static func setPerAppToPerUserAccountAsync(_ perAppAccount: WindowsSecurityCredentials_WebAccount?, _ perUserWebAccountId: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountMapManagerStatics.setPerAppToPerUserAccountAsync(perAppAccount, perUserWebAccountId))
    }

    /// Gets a per-user web account from a per-app web account.
    /// - Parameter perAppAccount: The per-app web account.
    /// - Returns: When this method completes, it returns the per-user web account linked to the given per-app account.
    public static func getPerUserFromPerAppAccountAsync(_ perAppAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountMapManagerStatics.getPerUserFromPerAppAccountAsync(perAppAccount))
    }

    /// Clears the link between per-user and per-app web accounts.
    /// - Parameter perAppAccount: The per-app web account to clear.
    /// - Returns: This method does not return a value.
    public static func clearPerUserFromPerAppAccountAsync(_ perAppAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountMapManagerStatics.clearPerUserFromPerAppAccountAsync(perAppAccount))
    }

    // MARK: Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics members

    public static func updateWebAccountPropertiesAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?, _ webAccountUserName: Swift.String, _ additionalProperties: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.updateWebAccountPropertiesAsync(webAccount, webAccountUserName, additionalProperties))
    }

    public static func addWebAccountAsync(_ webAccountId: Swift.String, _ webAccountUserName: Swift.String, _ props: WindowsFoundationCollections_IMapView<Swift.String, Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsSecurityCredentials_WebAccount?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.addWebAccountAsync(webAccountId, webAccountUserName, props))
    }

    /// Deletes a web account asynchronously.
    /// - Parameter webAccount: The WebAccount to delete.
    /// - Returns: This method does not return a value.
    public static func deleteWebAccountAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.deleteWebAccountAsync(webAccount))
    }

    /// Finds all provider web accounts asynchronously.
    /// - Returns: When this method completes, it returns all provider web accounts.
    public static func findAllProviderWebAccountsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSecurityCredentials_WebAccount?>?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.findAllProviderWebAccountsAsync())
    }

    public static func pushCookiesAsync(_ uri: WindowsFoundation_Uri?, _ cookies: WindowsFoundationCollections_IVectorView<WindowsWebHttp_HttpCookie?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.pushCookiesAsync(uri, cookies))
    }

    /// Sets the view for a web account asynchronously.
    /// - Parameter webAccount: The web account to set the view for.
    /// - Parameter view: The view to set.
    /// - Returns: This method does not return a value.
    public static func setViewAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?, _ view: WindowsSecurityAuthenticationWebProvider_WebAccountClientView?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.setViewAsync(webAccount, view))
    }

    /// Clears the view for a web account.
    /// - Parameter webAccount: The web account to clear the view for.
    /// - Parameter applicationCallbackUri: The callback Uri that indicates the completion of the operation. The broker matches this Uri against every Uri that it is about to navigate to. The broker never navigates to this Uri, instead the broker returns the control back to the application when the user clicks a link or a web server redirection is made.
    /// - Returns: This method does not return a value.
    public static func clearViewAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?, _ applicationCallbackUri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.clearViewAsync(webAccount, applicationCallbackUri))
    }

    /// Gets the views for a web account asynchronously.
    /// - Parameter webAccount: The web account to get views for.
    /// - Returns: When this method completes, it returns the views for the web account.
    public static func getViewsAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSecurityAuthenticationWebProvider_WebAccountClientView?>?> {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.getViewsAsync(webAccount))
    }

    /// Sets the picture of a web account asynchronously.
    /// - Parameter webAccount: The web account to set the picture for.
    /// - Parameter webAccountPicture: The picture to set.
    /// - Returns: This method does not return a value.
    public static func setWebAccountPictureAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?, _ webAccountPicture: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.setWebAccountPictureAsync(webAccount, webAccountPicture))
    }

    /// Clears a web account picture asynchronously.
    /// - Parameter webAccount: The web account to clear the picture from.
    /// - Returns: This method does not return a value.
    public static func clearWebAccountPictureAsync(_ webAccount: WindowsSecurityCredentials_WebAccount?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_iwebAccountManagerStatics.clearWebAccountPictureAsync(webAccount))
    }

    // MARK: Implementation details

    private static var _iwebAccountScopeManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountScopeManagerStatics>? = nil

    internal static var _iwebAccountScopeManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountScopeManagerStatics> {
        get throws {
            try _iwebAccountScopeManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountScopeManagerStatics.iid)
            }
        }
    }

    private static var _iwebAccountManagerStatics3_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics3>? = nil

    internal static var _iwebAccountManagerStatics3: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics3> {
        get throws {
            try _iwebAccountManagerStatics3_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics3.iid)
            }
        }
    }

    private static var _iwebAccountManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics2>? = nil

    internal static var _iwebAccountManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics2> {
        get throws {
            try _iwebAccountManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics2.iid)
            }
        }
    }

    private static var _iwebAccountManagerStatics4_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics4>? = nil

    internal static var _iwebAccountManagerStatics4: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics4> {
        get throws {
            try _iwebAccountManagerStatics4_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics4.iid)
            }
        }
    }

    private static var _iwebAccountMapManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountMapManagerStatics>? = nil

    internal static var _iwebAccountMapManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountMapManagerStatics> {
        get throws {
            try _iwebAccountMapManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountMapManagerStatics.iid)
            }
        }
    }

    private static var _iwebAccountManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics>? = nil

    internal static var _iwebAccountManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics> {
        get throws {
            try _iwebAccountManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Security.Authentication.Web.Provider.WebAccountManager", id: CWinRT.SWRT_WindowsSecurityAuthenticationWebProvider_IWebAccountManagerStatics.iid)
            }
        }
    }
}