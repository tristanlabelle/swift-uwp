// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides read access to bitmap container data as well as data from the first frame.
public final class WindowsGraphicsImaging_BitmapDecoder: WindowsRuntime.WinRTImport<WindowsGraphicsImaging_BitmapDecoderProjection>, WindowsGraphicsImaging_IBitmapFrameProtocol, WindowsGraphicsImaging_IBitmapFrameWithSoftwareBitmapProtocol {
    // MARK: Windows.Graphics.Imaging.IBitmapDecoder members

    /// Provides access to the container bitmap properties.
    /// - Returns: The container bitmap properties.
    public var bitmapContainerProperties: WindowsGraphicsImaging_BitmapPropertiesView {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BitmapContainerProperties())
        }
    }

    /// Information about the bitmap decoder.
    /// - Returns: The bitmap decoder information.
    public var decoderInformation: WindowsGraphicsImaging_BitmapCodecInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DecoderInformation())
        }
    }

    /// The number of frames within the image file.
    /// - Returns: The number of frames.
    public var frameCount: Swift.UInt32 {
        get throws {
            try _interop.get_FrameCount()
        }
    }

    /// Asynchronously returns a stream containing the preview image.
    /// - Returns: Object that manages the asynchronous retrieval of the bitmap preview data.
    public func getPreviewAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_ImageStream?> {
        try COM.NullResult.unwrap(_interop.getPreviewAsync())
    }

    /// Asynchronously retrieves a frame from the image file.
    /// - Parameter frameIndex: The zero-based index of the frame to be retrieved.
    /// - Returns: Object that manages the asynchronous retrieval of the frame.
    public func getFrameAsync(_ frameIndex: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapFrame?> {
        try COM.NullResult.unwrap(_interop.getFrameAsync(frameIndex))
    }

    // MARK: Windows.Graphics.Imaging.IBitmapFrame members

    /// The default alpha mode of the first frame.
    /// - Returns: The default alpha mode of the first frame.
    public var bitmapAlphaMode: WindowsGraphicsImaging_BitmapAlphaMode {
        get throws {
            try _ibitmapFrame.get_BitmapAlphaMode()
        }
    }

    /// The pixel format that best fits the first frame.
    /// - Returns: The pixel format that best fits the first frame.
    public var bitmapPixelFormat: WindowsGraphicsImaging_BitmapPixelFormat {
        get throws {
            try _ibitmapFrame.get_BitmapPixelFormat()
        }
    }

    /// A read-only view of the metadata within the first frame.
    /// - Returns: A read-only view of the metadata within the first frame.
    public var bitmapProperties: WindowsGraphicsImaging_BitmapPropertiesView {
        get throws {
            try COM.NullResult.unwrap(_ibitmapFrame.get_BitmapProperties())
        }
    }

    /// The horizontal resolution of the first frame in dots per inch.
    /// - Returns: The horizontal resolution of the first frame in dots per inch.
    public var dpiX: Swift.Double {
        get throws {
            try _ibitmapFrame.get_DpiX()
        }
    }

    /// The vertical resolution of the first frame in dots per inch.
    /// - Returns: The vertical resolution of the first frame in dots per inch.
    public var dpiY: Swift.Double {
        get throws {
            try _ibitmapFrame.get_DpiY()
        }
    }

    /// The height of the first frame in pixels, after any EXIF orientation has been applied to the bitmap.
    /// - Returns: The height of the first frame in pixels, after any EXIF orientation has been applied.
    public var orientedPixelHeight: Swift.UInt32 {
        get throws {
            try _ibitmapFrame.get_OrientedPixelHeight()
        }
    }

    /// The width of the first frame in pixels, after any EXIF orientation has been applied to the bitmap.
    /// - Returns: The width of the first frame in pixels, after any EXIF orientation has been applied.
    public var orientedPixelWidth: Swift.UInt32 {
        get throws {
            try _ibitmapFrame.get_OrientedPixelWidth()
        }
    }

    /// The height of the first frame in pixels.
    /// - Returns: The height of the first frame in pixels.
    public var pixelHeight: Swift.UInt32 {
        get throws {
            try _ibitmapFrame.get_PixelHeight()
        }
    }

    /// The width of the first frame in pixels.
    /// - Returns: The width of the first frame in pixels.
    public var pixelWidth: Swift.UInt32 {
        get throws {
            try _ibitmapFrame.get_PixelWidth()
        }
    }

    /// Asynchronously returns a stream containing the thumbnail image.
    /// - Returns: Object that manages the asynchronous retrieval of the thumbnail stream.
    public func getThumbnailAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_ImageStream?> {
        try COM.NullResult.unwrap(_ibitmapFrame.getThumbnailAsync())
    }

    /// Asynchronously requests the pixel data for the frame.
    /// - Returns: Object that manages the asynchronous retrieval of the pixel data.
    public func getPixelDataAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_PixelDataProvider?> {
        try COM.NullResult.unwrap(_ibitmapFrame.getPixelDataAsync())
    }

    /// Asynchronously requests the pixel data for the frame using the specified parameters.
    /// - Parameter pixelFormat: The specified pixel format.
    /// - Parameter alphaMode: The specified alpha mode.
    /// - Parameter transform: The set of transformations to be applied to the frame.
    /// - Parameter exifOrientationMode: Indicates whether the EXIF orientation flag should be ignored or respected.
    /// - Parameter colorManagementMode: Indicates whether the pixel data should be color managed to the sRGB color space.
    /// - Returns: Object that manages the asynchronous retrieval of the pixel data.
    public func getPixelDataAsync(_ pixelFormat: WindowsGraphicsImaging_BitmapPixelFormat, _ alphaMode: WindowsGraphicsImaging_BitmapAlphaMode, _ transform: WindowsGraphicsImaging_BitmapTransform?, _ exifOrientationMode: WindowsGraphicsImaging_ExifOrientationMode, _ colorManagementMode: WindowsGraphicsImaging_ColorManagementMode) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_PixelDataProvider?> {
        try COM.NullResult.unwrap(_ibitmapFrame.getPixelDataTransformedAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode))
    }

    // MARK: Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap members

    /// Asynchronously gets a SoftwareBitmap representation of the decoded bitmap.
    /// - Returns: An asynchronous operation that returns a SoftwareBitmap on successful completion.
    public func getSoftwareBitmapAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?> {
        try COM.NullResult.unwrap(_ibitmapFrameWithSoftwareBitmap.getSoftwareBitmapAsync())
    }

    /// Asynchronously gets a SoftwareBitmap representation of the decoded bitmap.
    /// - Parameter pixelFormat: The pixel format of the software bitmap.
    /// - Parameter alphaMode: The alpha mode of the software bitmap.
    /// - Returns: An asynchronous operation that returns a SoftwareBitmap on successful completion.
    public func getSoftwareBitmapAsync(_ pixelFormat: WindowsGraphicsImaging_BitmapPixelFormat, _ alphaMode: WindowsGraphicsImaging_BitmapAlphaMode) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?> {
        try COM.NullResult.unwrap(_ibitmapFrameWithSoftwareBitmap.getSoftwareBitmapConvertedAsync(pixelFormat, alphaMode))
    }

    /// Asynchronously gets a SoftwareBitmap representation of the decoded bitmap.
    /// - Parameter pixelFormat: The pixel format of the software bitmap.
    /// - Parameter alphaMode: The alpha mode of the software bitmap.
    /// - Parameter transform: The transform of the software bitmap.
    /// - Parameter exifOrientationMode: The EXIF orientation mode of the software bitmap.
    /// - Parameter colorManagementMode: The color management mode of the software bitmap.
    /// - Returns: An asynchronous operation that returns a SoftwareBitmap on successful completion.
    public func getSoftwareBitmapAsync(_ pixelFormat: WindowsGraphicsImaging_BitmapPixelFormat, _ alphaMode: WindowsGraphicsImaging_BitmapAlphaMode, _ transform: WindowsGraphicsImaging_BitmapTransform?, _ exifOrientationMode: WindowsGraphicsImaging_ExifOrientationMode, _ colorManagementMode: WindowsGraphicsImaging_ColorManagementMode) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?> {
        try COM.NullResult.unwrap(_ibitmapFrameWithSoftwareBitmap.getSoftwareBitmapTransformedAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode))
    }

    // MARK: Windows.Graphics.Imaging.IBitmapDecoderStatics2 members

    /// The unique identifier of the HEIF decoder.
    /// - Returns: The unique identifier of the HEIF decoder.
    public static var heifDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics2.get_HeifDecoderId()
        }
    }

    /// The unique identifier of the WebP decoder.
    /// - Returns: The unique identifier of the WebP decoder.
    public static var webpDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics2.get_WebpDecoderId()
        }
    }

    // MARK: Windows.Graphics.Imaging.IBitmapDecoderStatics members

    /// The unique identifier of the BMP decoder.
    /// - Returns: The unique identifier of the BMP decoder.
    public static var bmpDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_BmpDecoderId()
        }
    }

    /// The unique identifier of the GIF decoder.
    /// - Returns: The unique identifier of the GIF decoder.
    public static var gifDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_GifDecoderId()
        }
    }

    /// The unique identifier of the ICO decoder.
    /// - Returns: The unique identifier of the ICO decoder.
    public static var icoDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_IcoDecoderId()
        }
    }

    /// The unique identifier of the JPEG decoder.
    /// - Returns: The unique identifier of the JPEG decoder.
    public static var jpegDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_JpegDecoderId()
        }
    }

    /// The unique identifier of the JPEG-XR decoder.
    /// - Returns: The unique identifier of the JPEG-XR decoder.
    public static var jpegXRDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_JpegXRDecoderId()
        }
    }

    /// The unique identifier of the PNG decoder.
    /// - Returns: The unique identifier of the PNG decoder.
    public static var pngDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_PngDecoderId()
        }
    }

    /// The unique identifier of the TIFF decoder.
    /// - Returns: The unique identifier of the TIFF decoder.
    public static var tiffDecoderId: Foundation.UUID {
        get throws {
            try _ibitmapDecoderStatics.get_TiffDecoderId()
        }
    }

    /// The bitmap decoders installed on the system and information about them.
    /// - Returns: A list of BitmapCodecInformation objects containing information about each decoder.
    public static func getDecoderInformationEnumerator() throws -> WindowsFoundationCollections_IVectorView<WindowsGraphicsImaging_BitmapCodecInformation?> {
        try COM.NullResult.unwrap(_ibitmapDecoderStatics.getDecoderInformationEnumerator())
    }

    /// Asynchronously creates a new BitmapDecoder and initializes it using a stream.
    /// - Parameter stream: The stream containing the image file to be decoded.
    /// - Returns: An object that manages the asynchronous creation of a new BitmapDecoder.
    public static func createAsync(_ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapDecoder?> {
        try COM.NullResult.unwrap(_ibitmapDecoderStatics.createAsync(stream))
    }

    /// Asynchronously creates a new BitmapDecoder using a specific bitmap codec and initializes it using a stream.
    /// - Parameter decoderId: The unique identifier of the specified bitmap codec.
    /// - Parameter stream: The stream containing the image file to be decoded.
    /// - Returns: An object that manages the asynchronous creation of a new BitmapDecoder.
    public static func createAsync(_ decoderId: Foundation.UUID, _ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapDecoder?> {
        try COM.NullResult.unwrap(_ibitmapDecoderStatics.createWithIdAsync(decoderId, stream))
    }

    // MARK: Implementation details

    private var _ibitmapFrame_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrame>? = nil

    internal var _ibitmapFrame: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrame> {
        get throws {
            try _ibitmapFrame_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrame.iid).cast(to: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrame.self)
            }
        }
    }

    private var _ibitmapFrameWithSoftwareBitmap_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrameWithSoftwareBitmap>? = nil

    internal var _ibitmapFrameWithSoftwareBitmap: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrameWithSoftwareBitmap> {
        get throws {
            try _ibitmapFrameWithSoftwareBitmap_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrameWithSoftwareBitmap.iid).cast(to: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapFrameWithSoftwareBitmap.self)
            }
        }
    }

    deinit {
        _ibitmapFrame_storage?.release()
        _ibitmapFrameWithSoftwareBitmap_storage?.release()
    }

    private static var _ibitmapDecoderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics2>? = nil

    internal static var _ibitmapDecoderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics2> {
        get throws {
            try _ibitmapDecoderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Imaging.BitmapDecoder", id: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics2.iid)
            }
        }
    }

    private static var _ibitmapDecoderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics>? = nil

    internal static var _ibitmapDecoderStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics> {
        get throws {
            try _ibitmapDecoderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Imaging.BitmapDecoder", id: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapDecoderStatics.iid)
            }
        }
    }
}