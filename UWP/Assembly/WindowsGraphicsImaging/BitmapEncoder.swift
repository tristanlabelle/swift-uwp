// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Contains methods to create, edit and save images.
public final class WindowsGraphicsImaging_BitmapEncoder: WindowsRuntime.WinRTImport<WindowsGraphicsImaging_BitmapEncoderProjection> {
    // MARK: Windows.Graphics.Imaging.IBitmapEncoder members

    /// The metadata for the container.
    /// - Returns: A BitmapProperties object that provides both read and write access to the metadata for the container.
    public var bitmapContainerProperties: WindowsGraphicsImaging_BitmapProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BitmapContainerProperties())
        }
    }

    /// The metadata for the selected frame.
    /// - Returns: A BitmapProperties object that provides both read and write access to the metadata for the selected frame.
    public var bitmapProperties: WindowsGraphicsImaging_BitmapProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BitmapProperties())
        }
    }

    /// A BitmapTransform object that is used to specify how the frame bitmap is to be transformed.
    /// - Returns: A BitmapTransform object that is used to specify how the frame bitmap is to be transformed.
    public var bitmapTransform: WindowsGraphicsImaging_BitmapTransform {
        get throws {
            try COM.NullResult.unwrap(_interop.get_BitmapTransform())
        }
    }

    /// Information about the bitmap encoder.
    /// - Returns: An object containing information about the bitmap encoder.
    public var encoderInformation: WindowsGraphicsImaging_BitmapCodecInformation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_EncoderInformation())
        }
    }

    /// The height, in pixels, of any generated thumbnail.
    /// - Returns: The height of the thumbnail, in pixels. The default value is 120 pixels.
    public var generatedThumbnailHeight: Swift.UInt32 {
        get throws {
            try _interop.get_GeneratedThumbnailHeight()
        }
    }

    /// The height, in pixels, of any generated thumbnail.
    /// - Returns: The height of the thumbnail, in pixels. The default value is 120 pixels.
    public func generatedThumbnailHeight(_ value: Swift.UInt32) throws {
        try _interop.put_GeneratedThumbnailHeight(value)
    }

    /// The width, in pixels, of any generated thumbnail.
    /// - Returns: The width of the thumbnail, in pixels. The default value is 160 pixels.
    public var generatedThumbnailWidth: Swift.UInt32 {
        get throws {
            try _interop.get_GeneratedThumbnailWidth()
        }
    }

    /// The width, in pixels, of any generated thumbnail.
    /// - Returns: The width of the thumbnail, in pixels. The default value is 160 pixels.
    public func generatedThumbnailWidth(_ value: Swift.UInt32) throws {
        try _interop.put_GeneratedThumbnailWidth(value)
    }

    /// Indicates whether or not a new thumbnail is automatically generated.
    /// - Returns: A value that indicates whether or not the bitmap encoder will automatically generate a new thumbnail. The default value is False.
    public var isThumbnailGenerated: Swift.Bool {
        get throws {
            try _interop.get_IsThumbnailGenerated()
        }
    }

    /// Indicates whether or not a new thumbnail is automatically generated.
    /// - Returns: A value that indicates whether or not the bitmap encoder will automatically generate a new thumbnail. The default value is False.
    public func isThumbnailGenerated(_ value: Swift.Bool) throws {
        try _interop.put_IsThumbnailGenerated(value)
    }

    /// Sets pixel data on the frame.
    /// - Parameter pixelFormat: The pixel format of the pixel data.
    /// - Parameter alphaMode: The alpha mode of the pixel data.
    /// - Parameter width: The width, in pixels, of the pixel data.
    /// - Parameter height: The height, in pixels, of the pixel data.
    /// - Parameter dpiX: The horizontal resolution, in dots per inch, of the pixel data.
    /// - Parameter dpiY: The vertical resolution, in dots per inch, of the pixel data.
    /// - Parameter pixels: The pixel data.
    public func setPixelData(_ pixelFormat: WindowsGraphicsImaging_BitmapPixelFormat, _ alphaMode: WindowsGraphicsImaging_BitmapAlphaMode, _ width: Swift.UInt32, _ height: Swift.UInt32, _ dpiX: Swift.Double, _ dpiY: Swift.Double, _ pixels: [Swift.UInt8]) throws {
        try _interop.setPixelData(pixelFormat, alphaMode, width, height, dpiX, dpiY, pixels)
    }

    /// Asynchronously commits the current frame data and appends a new empty frame to be edited.
    /// - Returns: An object that manages the asynchronous operation of committing the current frame data and appending a new empty frame to be edited.
    public func goToNextFrameAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.goToNextFrameAsync())
    }

    public func goToNextFrameAsync(_ encodingOptions: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsGraphicsImaging_BitmapTypedValue?>?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.goToNextFrameWithEncodingOptionsAsync(encodingOptions))
    }

    /// Asynchronously commits and flushes all of the image data.
    /// - Returns: An object that manages the asynchronous flush operation.
    public func flushAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.flushAsync())
    }

    // MARK: Windows.Graphics.Imaging.IBitmapEncoderWithSoftwareBitmap members

    /// Sets the image data of the current frame using the specified SoftwareBitmap.
    /// - Parameter bitmap: The software bitmap containing the image data.
    public func setSoftwareBitmap(_ bitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws {
        try _ibitmapEncoderWithSoftwareBitmap.setSoftwareBitmap(bitmap)
    }

    // MARK: Windows.Graphics.Imaging.IBitmapEncoderStatics2 members

    /// The unique identifier of the built-in HEIF encoder.
    /// - Returns: The unique identifier of the built-in HEIF encoder.
    public static var heifEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics2.get_HeifEncoderId()
        }
    }

    // MARK: Windows.Graphics.Imaging.IBitmapEncoderStatics members

    /// The unique identifier of the built-in BMP encoder.
    /// - Returns: The unique identifier of the built-in BMP encoder.
    public static var bmpEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_BmpEncoderId()
        }
    }

    /// The unique identifier of the built-in GIF encoder.
    /// - Returns: The unique identifier of the built-in GIF encoder.
    public static var gifEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_GifEncoderId()
        }
    }

    /// The unique identifier of the built-in JPEG encoder.
    /// - Returns: The unique identifier of the built-in JPEG encoder.
    public static var jpegEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_JpegEncoderId()
        }
    }

    /// The unique identifier of the built-in JPEG-XR encoder.
    /// - Returns: The unique identifier of the built-in JPEG-XR encoder.
    public static var jpegXREncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_JpegXREncoderId()
        }
    }

    /// The unique identifier of the built-in PNG encoder.
    /// - Returns: The unique identifier of the built-in PNG encoder.
    public static var pngEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_PngEncoderId()
        }
    }

    /// The unique identifier of the built-in TIFF encoder.
    /// - Returns: The unique identifier of the built-in TIFF encoder.
    public static var tiffEncoderId: Foundation.UUID {
        get throws {
            try _ibitmapEncoderStatics.get_TiffEncoderId()
        }
    }

    /// A list of the bitmap encoders installed on the system and information about them.
    /// - Returns: A list of BitmapCodecInformation objects containing information about each encoder.
    public static func getEncoderInformationEnumerator() throws -> WindowsFoundationCollections_IVectorView<WindowsGraphicsImaging_BitmapCodecInformation?> {
        try COM.NullResult.unwrap(_ibitmapEncoderStatics.getEncoderInformationEnumerator())
    }

    /// Asynchronously creates a new BitmapEncoder.
    /// - Parameter encoderId: The unique identifier of the specified encoder.
    /// - Parameter stream: The output stream.
    /// - Returns: An object that manages the asynchronous creation of a new BitmapEncoder.
    public static func createAsync(_ encoderId: Foundation.UUID, _ stream: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapEncoder?> {
        try COM.NullResult.unwrap(_ibitmapEncoderStatics.createAsync(encoderId, stream))
    }

    public static func createAsync(_ encoderId: Foundation.UUID, _ stream: WindowsStorageStreams_IRandomAccessStream?, _ encodingOptions: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsGraphicsImaging_BitmapTypedValue?>?>?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapEncoder?> {
        try COM.NullResult.unwrap(_ibitmapEncoderStatics.createWithEncodingOptionsAsync(encoderId, stream, encodingOptions))
    }

    /// Asynchronously creates a new BitmapEncoder and initializes it using data from an existing BitmapDecoder.
    /// - Parameter stream: The output stream.
    /// - Parameter bitmapDecoder: A BitmapDecoder containing the image data to be copied.
    /// - Returns: An object that manages the asynchronous creation of a new BitmapEncoder using data from an existing BitmapDecoder.
    public static func createForTranscodingAsync(_ stream: WindowsStorageStreams_IRandomAccessStream?, _ bitmapDecoder: WindowsGraphicsImaging_BitmapDecoder?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapEncoder?> {
        try COM.NullResult.unwrap(_ibitmapEncoderStatics.createForTranscodingAsync(stream, bitmapDecoder))
    }

    /// Asynchronously creates a new BitmapEncoder for in-place property and metadata editing. The new encoder can only edit bitmap properties in-place and will fail for any other uses.
    /// - Parameter bitmapDecoder: A BitmapDecoder containing the image data to be edited. This parameter must be created on a stream with an access mode of ReadWrite.
    /// - Returns: An object that manages the asynchronous initialization of a new BitmapEncoder using data from an existing BitmapDecoder.
    public static func createForInPlacePropertyEncodingAsync(_ bitmapDecoder: WindowsGraphicsImaging_BitmapDecoder?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_BitmapEncoder?> {
        try COM.NullResult.unwrap(_ibitmapEncoderStatics.createForInPlacePropertyEncodingAsync(bitmapDecoder))
    }

    // MARK: Implementation details

    private var _ibitmapEncoderWithSoftwareBitmap_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderWithSoftwareBitmap>? = nil

    internal var _ibitmapEncoderWithSoftwareBitmap: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderWithSoftwareBitmap> {
        get throws {
            try _ibitmapEncoderWithSoftwareBitmap_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderWithSoftwareBitmap.iid).cast(to: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderWithSoftwareBitmap.self)
            }
        }
    }

    deinit {
        _ibitmapEncoderWithSoftwareBitmap_storage?.release()
    }

    private static var _ibitmapEncoderStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics2>? = nil

    internal static var _ibitmapEncoderStatics2: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics2> {
        get throws {
            try _ibitmapEncoderStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Imaging.BitmapEncoder", id: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics2.iid)
            }
        }
    }

    private static var _ibitmapEncoderStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics>? = nil

    internal static var _ibitmapEncoderStatics: COM.COMInterop<CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics> {
        get throws {
            try _ibitmapEncoderStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Graphics.Imaging.BitmapEncoder", id: CWinRT.SWRT_WindowsGraphicsImaging_IBitmapEncoderStatics.iid)
            }
        }
    }
}