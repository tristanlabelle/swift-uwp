// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Represents the pixel data buffer of a bitmap.
public final class WindowsGraphicsImaging_BitmapBuffer: WindowsRuntime.WinRTImport<WindowsGraphicsImaging_BitmapBufferProjection>, WindowsFoundation_IMemoryBufferProtocol, WindowsFoundation_IClosableProtocol {
    // MARK: Windows.Graphics.Imaging.IBitmapBuffer members

    /// Gets the number of bit planes in the bitmap buffer.
    /// - Returns: The number of bit planes in the bitmap buffer.
    public func getPlaneCount() throws -> Swift.Int32 {
        try _interop.getPlaneCount()
    }

    /// Gets a BitmapPlaneDescription object that describes the size, offset, and stride of the bitmap data in the bit plane with the specified index.
    /// - Parameter index: The index of the bit plane for which the description is retrieved.
    /// - Returns: The bit plane description.
    public func getPlaneDescription(_ index: Swift.Int32) throws -> WindowsGraphicsImaging_BitmapPlaneDescription {
        try _interop.getPlaneDescription(index)
    }

    // MARK: Windows.Foundation.IMemoryBuffer members

    /// Creates a reference to the underlying memory buffer.
    /// - Returns: A reference to the underlying memory buffer.
    public func createReference() throws -> WindowsFoundation_IMemoryBufferReference {
        try COM.NullResult.unwrap(_imemoryBuffer.createReference())
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes of the object and associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    private var _imemoryBuffer_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IMemoryBuffer>? = nil

    internal var _imemoryBuffer: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IMemoryBuffer> {
        get throws {
            try _imemoryBuffer_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IMemoryBuffer.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IMemoryBuffer.self)
            }
        }
    }

    private var _iclosable_storage: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable>? = nil

    internal var _iclosable: COM.COMInterop<CWinRT.SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _iclosable_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsFoundation_IClosable.iid).cast(to: CWinRT.SWRT_WindowsFoundation_IClosable.self)
            }
        }
    }

    deinit {
        _imemoryBuffer_storage?.release()
        _iclosable_storage?.release()
    }
}