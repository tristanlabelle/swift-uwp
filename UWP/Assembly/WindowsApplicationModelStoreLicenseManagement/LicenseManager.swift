// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides members for managing license info for apps.
public enum WindowsApplicationModelStoreLicenseManagement_LicenseManager {
    // MARK: Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics2 members

    /// Refreshes license info for app licenses on the current device.
    /// - Parameter refreshOption: A LicenseRefreshOption that indicates whether to refresh all app licenses on the device or only the licenses for currently running apps.
    /// - Returns: An object that represents the asynchronous operation.
    public static func refreshLicensesAsync(_ refreshOption: WindowsApplicationModelStoreLicenseManagement_LicenseRefreshOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ilicenseManagerStatics2.refreshLicensesAsync(refreshOption))
    }

    // MARK: Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics members

    /// Installs the specified app license.
    /// - Parameter license: The contents of the license to install.
    /// - Returns: An object that represents the installation operation.
    public static func addLicenseAsync(_ license: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_ilicenseManagerStatics.addLicenseAsync(license))
    }

    public static func getSatisfactionInfosAsync(_ contentIds: WindowsFoundationCollections_IIterable<Swift.String>?, _ keyIds: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelStoreLicenseManagement_LicenseSatisfactionResult?> {
        try COM.NullResult.unwrap(_ilicenseManagerStatics.getSatisfactionInfosAsync(contentIds, keyIds))
    }

    // MARK: Implementation details

    private static var _ilicenseManagerStatics2_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics2>? = nil

    internal static var _ilicenseManagerStatics2: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics2> {
        get throws {
            try _ilicenseManagerStatics2_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.LicenseManagement.LicenseManager", id: CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics2.iid)
            }
        }
    }

    private static var _ilicenseManagerStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics>? = nil

    internal static var _ilicenseManagerStatics: COM.COMInterop<CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics> {
        get throws {
            try _ilicenseManagerStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.ApplicationModel.Store.LicenseManagement.LicenseManager", id: CWinRT.SWRT_WindowsApplicationModelStoreLicenseManagement_ILicenseManagerStatics.iid)
            }
        }
    }
}