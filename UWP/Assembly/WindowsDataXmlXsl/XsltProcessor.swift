// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides the methods needed by the Xslt processor.
public final class WindowsDataXmlXsl_XsltProcessor: WindowsRuntime.WinRTImport<WindowsDataXmlXsl_XsltProcessorProjection> {
    // MARK: Windows.Data.Xml.Xsl.IXsltProcessorFactory members

    public convenience init(_ document: WindowsDataXmlDom_XmlDocument?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._ixsltProcessorFactory.createInstance(document)))
    }

    // MARK: Windows.Data.Xml.Xsl.IXsltProcessor members

    /// Processes a node and its children and returns the resulting string transformation.
    /// - Parameter inputNode: The node to process.
    /// - Returns: The resulting transformation.
    public func transformToString(_ inputNode: WindowsDataXmlDom_IXmlNode?) throws -> Swift.String {
        try _interop.transformToString(inputNode)
    }

    // MARK: Windows.Data.Xml.Xsl.IXsltProcessor2 members

    /// Processes a node and its children and returns the resulting XmlDocument.
    /// - Parameter inputNode: The node to process.
    /// - Returns: The resulting transformation.
    public func transformToDocument(_ inputNode: WindowsDataXmlDom_IXmlNode?) throws -> WindowsDataXmlDom_XmlDocument {
        try COM.NullResult.unwrap(_ixsltProcessor2.transformToDocument(inputNode))
    }

    // MARK: Implementation details

    private var _ixsltProcessor2_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessor2>? = nil

    internal var _ixsltProcessor2: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessor2> {
        get throws {
            try _ixsltProcessor2_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessor2.iid).cast(to: CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessor2.self)
            }
        }
    }

    deinit {
        _ixsltProcessor2_storage?.release()
    }

    private static var _ixsltProcessorFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessorFactory>? = nil

    internal static var _ixsltProcessorFactory: COM.COMInterop<CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessorFactory> {
        get throws {
            try _ixsltProcessorFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Data.Xml.Xsl.XsltProcessor", id: CWinRT.SWRT_WindowsDataXmlXsl_IXsltProcessorFactory.iid)
            }
        }
    }
}