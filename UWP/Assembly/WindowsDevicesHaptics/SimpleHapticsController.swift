// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to a single haptic input device.
public final class WindowsDevicesHaptics_SimpleHapticsController: WindowsRuntime.WinRTImport<WindowsDevicesHaptics_SimpleHapticsControllerProjection> {
    // MARK: Windows.Devices.Haptics.ISimpleHapticsController members

    /// Gets the identifier for the haptic input device.
    /// - Returns: The Global Unique Identifier (GUID) used to identify a single input device.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets whether the haptic input device supports feedback intensity.
    /// - Returns: **true** if feedback intensity is supported. Otherwise, **false**.
    public var isIntensitySupported: Swift.Bool {
        get throws {
            try _interop.get_IsIntensitySupported()
        }
    }

    /// Gets whether the haptic input device supports feedback counts.
    /// - Returns: **true** if feedback counts are supported. Otherwise, **false**.
    public var isPlayCountSupported: Swift.Bool {
        get throws {
            try _interop.get_IsPlayCountSupported()
        }
    }

    /// Gets whether the haptic input device supports feedback duration.
    /// - Returns: **true** if duration is supported. Otherwise, **false**.
    public var isPlayDurationSupported: Swift.Bool {
        get throws {
            try _interop.get_IsPlayDurationSupported()
        }
    }

    /// Gets whether the haptic input device supports pause intervals between feedback cycles.
    /// - Returns: **true** if intervals are supported. Otherwise, **false**.
    public var isReplayPauseIntervalSupported: Swift.Bool {
        get throws {
            try _interop.get_IsReplayPauseIntervalSupported()
        }
    }

    /// Gets the types of feedback supported by the haptic input device.
    /// - Returns: The collection of feedback types supported, including behavior such as duration.
    public var supportedFeedback: WindowsFoundationCollections_IVectorView<WindowsDevicesHaptics_SimpleHapticsControllerFeedback?> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedFeedback())
        }
    }

    /// Terminates haptic feedback by the input device.
    public func stopFeedback() throws {
        try _interop.stopFeedback()
    }

    /// Start haptic feedback by the input device.
    /// - Parameter feedback: The type of haptic feedback.
    public func sendHapticFeedback(_ feedback: WindowsDevicesHaptics_SimpleHapticsControllerFeedback?) throws {
        try _interop.sendHapticFeedback(feedback)
    }

    /// Start haptic feedback by the input device with the specified intensity.
    /// - Parameter feedback: The type of haptic feedback.
    /// - Parameter intensity: The strength of the haptic feedback based on the capability of the input device.
    public func sendHapticFeedback(_ feedback: WindowsDevicesHaptics_SimpleHapticsControllerFeedback?, _ intensity: Swift.Double) throws {
        try _interop.sendHapticFeedbackWithIntensity(feedback, intensity)
    }

    /// Start haptic feedback by the input device and continue for the specified amount of time.
    /// - Parameter feedback: The type of haptic feedback.
    /// - Parameter intensity: The strength of the haptic feedback based on the capability of the input device.
    /// - Parameter playDuration: The time period expressed in 100-nanosecond units (1 = 100ns).
    public func sendHapticFeedbackForDuration(_ feedback: WindowsDevicesHaptics_SimpleHapticsControllerFeedback?, _ intensity: Swift.Double, _ playDuration: WindowsFoundation_TimeSpan) throws {
        try _interop.sendHapticFeedbackForDuration(feedback, intensity, playDuration)
    }

    /// Start haptic feedback by the input device and repeat for the specified number of times.
    /// - Parameter feedback: The type of haptic feedback.
    /// - Parameter intensity: The strength of the haptic feedback based on the capability of the input device.
    /// - Parameter playCount: The number of times to repeat the haptic feedback.
    /// - Parameter replayPauseInterval: The time period between feedback cycles, expressed in 100-nanosecond units (1 = 100ns).
    public func sendHapticFeedbackForPlayCount(_ feedback: WindowsDevicesHaptics_SimpleHapticsControllerFeedback?, _ intensity: Swift.Double, _ playCount: Swift.Int32, _ replayPauseInterval: WindowsFoundation_TimeSpan) throws {
        try _interop.sendHapticFeedbackForPlayCount(feedback, intensity, playCount, replayPauseInterval)
    }

    // MARK: Implementation details
}