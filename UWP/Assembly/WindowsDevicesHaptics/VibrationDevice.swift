// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to a device that supports vibration notifications only.
public final class WindowsDevicesHaptics_VibrationDevice: WindowsRuntime.WinRTImport<WindowsDevicesHaptics_VibrationDeviceProjection> {
    // MARK: Windows.Devices.Haptics.IVibrationDevice members

    /// Gets the identifier for the vibration device.
    /// - Returns: The Global Unique Identifier (GUID) used to identify a single input device.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets a reference to a SimpleHapticsController object to specify haptic feedback behavior.
    /// - Returns: The haptic input device.
    public var simpleHapticsController: WindowsDevicesHaptics_SimpleHapticsController {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SimpleHapticsController())
        }
    }

    // MARK: Windows.Devices.Haptics.IVibrationDeviceStatics members

    /// Asynchronously retrieves the access status of the vibration device.
    /// - Returns: The VibrationAccessStatus.
    public static func requestAccessAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesHaptics_VibrationAccessStatus> {
        try COM.NullResult.unwrap(_ivibrationDeviceStatics.requestAccessAsync())
    }

    /// Returns the class selection string that you can use to enumerate vibration devices.
    /// - Returns: The class selection string for vibration devices.
    public static func getDeviceSelector() throws -> Swift.String {
        try _ivibrationDeviceStatics.getDeviceSelector()
    }

    /// Asynchronously retrieves the vibration device specified.
    /// - Parameter deviceId: The Global Unique Identifier (GUID) used to identify a single input device.
    /// - Returns: The VibrationDevice from the specified identifier.
    public static func fromIdAsync(_ deviceId: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesHaptics_VibrationDevice?> {
        try COM.NullResult.unwrap(_ivibrationDeviceStatics.fromIdAsync(deviceId))
    }

    /// Asynchronously retrieves the default vibration device.
    /// - Returns: The default VibrationDevice.
    public static func getDefaultAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsDevicesHaptics_VibrationDevice?> {
        try COM.NullResult.unwrap(_ivibrationDeviceStatics.getDefaultAsync())
    }

    /// Asynchronously retrieves all vibration devices detected.
    /// - Returns: The collection of VibrationDevices detected.
    public static func findAllAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsDevicesHaptics_VibrationDevice?>?> {
        try COM.NullResult.unwrap(_ivibrationDeviceStatics.findAllAsync())
    }

    // MARK: Implementation details

    private static var _ivibrationDeviceStatics_storage: COM.COMInterop<CWinRT.SWRT_WindowsDevicesHaptics_IVibrationDeviceStatics>? = nil

    internal static var _ivibrationDeviceStatics: COM.COMInterop<CWinRT.SWRT_WindowsDevicesHaptics_IVibrationDeviceStatics> {
        get throws {
            try _ivibrationDeviceStatics_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Devices.Haptics.VibrationDevice", id: CWinRT.SWRT_WindowsDevicesHaptics_IVibrationDeviceStatics.iid)
            }
        }
    }
}