// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Specifies the parameters of a search query for enumerating the contents of storage folders.
public final class WindowsStorageSearch_QueryOptions: WindowsRuntime.WinRTImport<WindowsStorageSearch_QueryOptionsProjection> {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_transferringRef: try Self._iactivationFactory.activateInstance(projection: WindowsStorageSearch_QueryOptionsProjection.self))
    }

    // MARK: Windows.Storage.Search.IQueryOptionsFactory members

    public convenience init(_ query: WindowsStorageSearch_CommonFileQuery, _ fileTypeFilter: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iqueryOptionsFactory.createCommonFileQuery(query, fileTypeFilter)))
    }

    public convenience init(_ query: WindowsStorageSearch_CommonFolderQuery) throws {
        self.init(_transferringRef: try COM.NullResult.unwrap(Self._iqueryOptionsFactory.createCommonFolderQuery(query)))
    }

    // MARK: Windows.Storage.Search.IQueryOptions members

    /// Gets or sets an application-defined Advanced Query Syntax (AQS) string for filtering files by keywords or properties. This property is combined with the UserSearchFilter to create the query's search filter.
    /// - Returns: A simple keyword, or a string that conforms to Advanced Query Syntax (AQS). For more information, see Using Advanced Query Syntax Programmatically.
    public var applicationSearchFilter: Swift.String {
        get throws {
            try _interop.get_ApplicationSearchFilter()
        }
    }

    /// Gets or sets an application-defined Advanced Query Syntax (AQS) string for filtering files by keywords or properties. This property is combined with the UserSearchFilter to create the query's search filter.
    /// - Returns: A simple keyword, or a string that conforms to Advanced Query Syntax (AQS). For more information, see Using Advanced Query Syntax Programmatically.
    public func applicationSearchFilter(_ value: Swift.String) throws {
        try _interop.put_ApplicationSearchFilter(value)
    }

    /// Gets the unit of time used to group files into folders if the QueryOptions object was created with a CommonFolderQuery based on date. For example, if CommonFolderQuery.GroupByYear is used to create a QueryOptions object, the value of this property is DateStackOption.Year.
    /// - Returns: The unit of time user to group folder content by date.
    public var dateStackOption: WindowsStorageSearch_DateStackOption {
        get throws {
            try _interop.get_DateStackOption()
        }
    }

    /// Gets a list of file name extensions used to filter the search results. If the list is empty, the results include all file types.
    /// - Returns: The list of file types of files include in query results. The default value is an empty list (which is equivalent to a list containing only "*") that includes all file types.
    public var fileTypeFilter: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FileTypeFilter())
        }
    }

    /// Indicates whether the search query should produce a shallow view of the folder contents or a deep recursive view of all files and subfolder.
    /// - Returns: A value that indicates how deeply to query the folder. The default value is FolderDepth.Shallow. Predefined queries typically override this property and change it to FolderDepth.Deep.
    public var folderDepth: WindowsStorageSearch_FolderDepth {
        get throws {
            try _interop.get_FolderDepth()
        }
    }

    /// Indicates whether the search query should produce a shallow view of the folder contents or a deep recursive view of all files and subfolder.
    /// - Returns: A value that indicates how deeply to query the folder. The default value is FolderDepth.Shallow. Predefined queries typically override this property and change it to FolderDepth.Deep.
    public func folderDepth(_ value: WindowsStorageSearch_FolderDepth) throws {
        try _interop.put_FolderDepth(value)
    }

    /// Gets the name of the property used to group query results if the QueryOptions object was created using a CommonFolderQuery. For example, if CommonFolderQuery.GroupByYear is used to create a QueryOptions object, the value of this property is System.ItemDate.
    /// - Returns: The property that is being used to group files and that is specified by the CommonFolderQuery enumeration.
    public var groupPropertyName: Swift.String {
        get throws {
            try _interop.get_GroupPropertyName()
        }
    }

    /// Gets or sets a value that specifies whether the system index or the file system is used to retrieve query results. The indexer can retrieve results faster but is not available in all file locations.
    /// - Returns: The indexer option.
    public var indexerOption: WindowsStorageSearch_IndexerOption {
        get throws {
            try _interop.get_IndexerOption()
        }
    }

    /// Gets or sets a value that specifies whether the system index or the file system is used to retrieve query results. The indexer can retrieve results faster but is not available in all file locations.
    /// - Returns: The indexer option.
    public func indexerOption(_ value: WindowsStorageSearch_IndexerOption) throws {
        try _interop.put_IndexerOption(value)
    }

    /// Gets or sets the Internet Engineering Task Force (IETF) language tag (BCP47 standard) that identifies the language associated with the query. This determines the language-specific algorithm used by the system to break the query into individual search tokens.
    /// - Returns: The Internet Engineering Task Force (IETF) BCP47-standard language tag.
    public var language: Swift.String {
        get throws {
            try _interop.get_Language()
        }
    }

    /// Gets or sets the Internet Engineering Task Force (IETF) language tag (BCP47 standard) that identifies the language associated with the query. This determines the language-specific algorithm used by the system to break the query into individual search tokens.
    /// - Returns: The Internet Engineering Task Force (IETF) BCP47-standard language tag.
    public func language(_ value: Swift.String) throws {
        try _interop.put_Language(value)
    }

    /// Gets the list of SortEntry structures that specify how to sort content (like files and subfolders) in query results. Use this list to customize how query results are sorted.
    /// - Returns: A SortEntryVector that contains SortEntry structures. These structures specify how to sort query results.
    public var sortOrder: WindowsFoundationCollections_IVector<WindowsStorageSearch_SortEntry> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SortOrder())
        }
    }

    /// Gets or sets a user-defined Advanced Query Syntax (AQS) string for filtering files by keywords or properties. This property is combined with the ApplicationSearchFilter to create the query's search filter.
    /// - Returns: A simple keyword or a string that conforms to Advanced Query Syntax (AQS). For more information, see Using Advanced Query Syntax Programmatically.
    public var userSearchFilter: Swift.String {
        get throws {
            try _interop.get_UserSearchFilter()
        }
    }

    /// Gets or sets a user-defined Advanced Query Syntax (AQS) string for filtering files by keywords or properties. This property is combined with the ApplicationSearchFilter to create the query's search filter.
    /// - Returns: A simple keyword or a string that conforms to Advanced Query Syntax (AQS). For more information, see Using Advanced Query Syntax Programmatically.
    public func userSearchFilter(_ value: Swift.String) throws {
        try _interop.put_UserSearchFilter(value)
    }

    /// Converts the values of a QueryOptions object to a string that can be used to initialize the values of a QueryOptions object by calling LoadFromString.
    /// - Returns: A string representing the serialized settings of a QueryOptions instance.
    public func saveToString() throws -> Swift.String {
        try _interop.saveToString()
    }

    /// Initializes the current instance of the QueryOptions class with search parameters specified by a string that was created by the SaveToString method.
    /// - Parameter value: A string retrieved by a previous call to SaveToString.
    public func loadFromString(_ value: Swift.String) throws {
        try _interop.loadFromString(value)
    }

    /// Specifies the type and size of thumbnails that the system should start loading immediately when items are accessed (instead of retrieving them on a case-by-case basis). This uses more resources but makes thumbnail retrieval on query results faster.
    /// - Parameter mode: The enumeration value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to return a thumbnail image that can be scaled to the requested size without reducing the quality of the image.
    /// - Parameter options: The enum value that describes the desired behavior to use to retrieve the thumbnail image. The specified behavior might affect the size and/or quality of the image and how quickly the thumbnail image is retrieved.
    public func setThumbnailPrefetch(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws {
        try _interop.setThumbnailPrefetch(mode, requestedSize, options)
    }

    public func setPropertyPrefetch(_ options: WindowsStorageFileProperties_PropertyPrefetchOptions, _ propertiesToRetrieve: WindowsFoundationCollections_IIterable<Swift.String>?) throws {
        try _interop.setPropertyPrefetch(options, propertiesToRetrieve)
    }

    // MARK: Windows.Storage.Search.IQueryOptionsWithProviderFilter members

    /// Gets the filter for storage provider identifiers.
    /// - Returns: The filter string.
    public var storageProviderIdFilter: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_iqueryOptionsWithProviderFilter.get_StorageProviderIdFilter())
        }
    }

    // MARK: Implementation details

    private var _iqueryOptionsWithProviderFilter_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsWithProviderFilter>? = nil

    internal var _iqueryOptionsWithProviderFilter: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsWithProviderFilter> {
        get throws {
            try _iqueryOptionsWithProviderFilter_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsWithProviderFilter.iid).cast(to: CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsWithProviderFilter.self)
            }
        }
    }

    deinit {
        _iqueryOptionsWithProviderFilter_storage?.release()
    }

    private static var _iactivationFactory_storage: COM.COMInterop<CWinRT.SWRT_IActivationFactory>? = nil

    internal static var _iactivationFactory: COM.COMInterop<CWinRT.SWRT_IActivationFactory> {
        get throws {
            try _iactivationFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Search.QueryOptions", id: CWinRT.SWRT_IActivationFactory.iid)
            }
        }
    }

    private static var _iqueryOptionsFactory_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsFactory>? = nil

    internal static var _iqueryOptionsFactory: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsFactory> {
        get throws {
            try _iqueryOptionsFactory_storage.lazyInit {
                try WindowsRuntime.getActivationFactoryPointer(activatableId: "Windows.Storage.Search.QueryOptions", id: CWinRT.SWRT_WindowsStorageSearch_IQueryOptionsFactory.iid)
            }
        }
    }
}