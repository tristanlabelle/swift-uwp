// Generated by swift-winrt
// swiftlint:disable all

import CWinRT
import WindowsRuntime
import UWP
import struct Foundation.UUID

/// Provides access to the results of a query that lists all items including files and folders (or file groups) in the folder being queried (which is represented by a storageFolder ). You can use storageItemQueryResult to enumerate the files and folders in that storageFolder.
public final class WindowsStorageSearch_StorageItemQueryResult: WindowsRuntime.WinRTImport<WindowsStorageSearch_StorageItemQueryResultProjection>, WindowsStorageSearch_IStorageQueryResultBaseProtocol {
    // MARK: Windows.Storage.Search.IStorageItemQueryResult members

    /// Retrieves a list of items (files and folders) in a specified range.
    /// - Parameter startIndex: The zero-based index of the first item to retrieve. This parameter defaults to 0.
    /// - Parameter maxNumberOfItems: The maximum number of items to retrieve. Use -1 to retrieve all items. If the range contains fewer items than the max number, all items in the range are returned.
    /// - Returns: When this method completes successfully, it returns a list (type IVectorView ) of items. Each item is the IStorageItem type and represents a file, folder, or file group.
    public func getItemsAsync(_ startIndex: Swift.UInt32, _ maxNumberOfItems: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
        try COM.NullResult.unwrap(_interop.getItemsAsync(startIndex, maxNumberOfItems))
    }

    /// Retrieves a list of all the items (files and folders) in the query results set.
    /// - Returns: When this method completes successfully, it returns a list (type IVectorView ) of items. Each item is the IStorageItem type and represents a file, folder, or file group.
    public func getItemsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
        try COM.NullResult.unwrap(_interop.getItemsAsyncDefaultStartAndCount())
    }

    // MARK: Windows.Storage.Search.IStorageQueryResultBase members

    /// Gets the folder originally used to create the StorageItemQueryResult object. This folder represents the scope of the query.
    /// - Returns: The original folder.
    public var folder: WindowsStorage_StorageFolder {
        get throws {
            try COM.NullResult.unwrap(_istorageQueryResultBase.get_Folder())
        }
    }

    /// Fires when an item is added to, deleted from, or modified in the folder being queried. This event only fires after GetItemsAsync has been called at least once.
    public func contentsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsStorageSearch_IStorageQueryResultBase?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _istorageQueryResultBase.add_ContentsChanged(handler)
        return WindowsRuntime.EventRegistration(token: _token, remover: contentsChanged)
    }

    public func contentsChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _istorageQueryResultBase.remove_ContentsChanged(eventCookie)
    }

    /// Fires when the query options change.
    public func optionsChanged(adding changedHandler: WindowsFoundation_TypedEventHandler<WindowsStorageSearch_IStorageQueryResultBase?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _istorageQueryResultBase.add_OptionsChanged(changedHandler)
        return WindowsRuntime.EventRegistration(token: _token, remover: optionsChanged)
    }

    public func optionsChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
        try _istorageQueryResultBase.remove_OptionsChanged(eventCookie)
    }

    /// Retrieves the number of items in the set of query results.
    /// - Returns: When this method completes successfully, it returns the number of items in the location that match the query.
    public func getItemCountAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_istorageQueryResultBase.getItemCountAsync())
    }

    /// Retrieves the index of the item from the query results that most closely matches the specified property value. The property that is matched is determined by the first SortEntry of the QueryOptions.SortOrder list.
    /// - Parameter value: The property value to match when searching the query results. The property to that is used to match this value is the property in the first SortEntry of the QueryOptions.SortOrder list.
    /// - Returns: When this method completes successfully it returns the index of the matched item in the query results.
    public func findStartIndexAsync(_ value: WindowsRuntime.IInspectable?) throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
        try COM.NullResult.unwrap(_istorageQueryResultBase.findStartIndexAsync(value))
    }

    /// Retrieves the query options used to determine query results.
    /// - Returns: The query options.
    public func getCurrentQueryOptions() throws -> WindowsStorageSearch_QueryOptions {
        try COM.NullResult.unwrap(_istorageQueryResultBase.getCurrentQueryOptions())
    }

    /// Modifies query results based on new QueryOptions.
    /// - Parameter newQueryOptions: The new query options.
    public func applyNewQueryOptions(_ newQueryOptions: WindowsStorageSearch_QueryOptions?) throws {
        try _istorageQueryResultBase.applyNewQueryOptions(newQueryOptions)
    }

    // MARK: Implementation details

    private var _istorageQueryResultBase_storage: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IStorageQueryResultBase>? = nil

    internal var _istorageQueryResultBase: COM.COMInterop<CWinRT.SWRT_WindowsStorageSearch_IStorageQueryResultBase> {
        get throws {
            try _istorageQueryResultBase_storage.lazyInit {
                try _queryInterfacePointer(CWinRT.SWRT_WindowsStorageSearch_IStorageQueryResultBase.iid).cast(to: CWinRT.SWRT_WindowsStorageSearch_IStorageQueryResultBase.self)
            }
        }
    }

    deinit {
        _istorageQueryResultBase_storage?.release()
    }
}